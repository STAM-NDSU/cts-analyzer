Datetime,Hash,Parent,Author,Commit Msg,Filepath,Filename,Removed Test Case
10/09/2008 21:29:06,"=HYPERLINK(""https://github.com/google/gson/commit/3b8404dac56c365cbf77034ec7d96588d89e9798"", ""3b8404dac56c365cbf77034ec7d96588d89e9798"")","=HYPERLINK(""https://github.com/google/gson/commit/0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"", ""0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"")",inder123@gmail.com,refactored String related functional tests out in a separate test class.,gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testReallyLongStringsDeserialization
10/09/2008 21:29:06,"=HYPERLINK(""https://github.com/google/gson/commit/3b8404dac56c365cbf77034ec7d96588d89e9798"", ""3b8404dac56c365cbf77034ec7d96588d89e9798"")","=HYPERLINK(""https://github.com/google/gson/commit/0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"", ""0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"")",inder123@gmail.com,refactored String related functional tests out in a separate test class.,gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,parseLongJson
10/09/2008 21:29:06,"=HYPERLINK(""https://github.com/google/gson/commit/3b8404dac56c365cbf77034ec7d96588d89e9798"", ""3b8404dac56c365cbf77034ec7d96588d89e9798"")","=HYPERLINK(""https://github.com/google/gson/commit/0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"", ""0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"")",inder123@gmail.com,refactored String related functional tests out in a separate test class.,gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,ExceptionHolder
10/09/2008 21:29:06,"=HYPERLINK(""https://github.com/google/gson/commit/3b8404dac56c365cbf77034ec7d96588d89e9798"", ""3b8404dac56c365cbf77034ec7d96588d89e9798"")","=HYPERLINK(""https://github.com/google/gson/commit/0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"", ""0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"")",inder123@gmail.com,refactored String related functional tests out in a separate test class.,gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,ExceptionHolder
10/09/2008 21:29:06,"=HYPERLINK(""https://github.com/google/gson/commit/3b8404dac56c365cbf77034ec7d96588d89e9798"", ""3b8404dac56c365cbf77034ec7d96588d89e9798"")","=HYPERLINK(""https://github.com/google/gson/commit/0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"", ""0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"")",inder123@gmail.com,refactored String related functional tests out in a separate test class.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testStringValueSerialization
10/09/2008 21:29:06,"=HYPERLINK(""https://github.com/google/gson/commit/3b8404dac56c365cbf77034ec7d96588d89e9798"", ""3b8404dac56c365cbf77034ec7d96588d89e9798"")","=HYPERLINK(""https://github.com/google/gson/commit/0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"", ""0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"")",inder123@gmail.com,refactored String related functional tests out in a separate test class.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testStringValueDeserialization
10/09/2008 21:29:06,"=HYPERLINK(""https://github.com/google/gson/commit/3b8404dac56c365cbf77034ec7d96588d89e9798"", ""3b8404dac56c365cbf77034ec7d96588d89e9798"")","=HYPERLINK(""https://github.com/google/gson/commit/0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"", ""0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"")",inder123@gmail.com,refactored String related functional tests out in a separate test class.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testSingleQuoteInStringSerialization
10/09/2008 21:29:06,"=HYPERLINK(""https://github.com/google/gson/commit/3b8404dac56c365cbf77034ec7d96588d89e9798"", ""3b8404dac56c365cbf77034ec7d96588d89e9798"")","=HYPERLINK(""https://github.com/google/gson/commit/0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"", ""0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"")",inder123@gmail.com,refactored String related functional tests out in a separate test class.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testSingleQuoteInStringDeserialization
10/09/2008 21:29:06,"=HYPERLINK(""https://github.com/google/gson/commit/3b8404dac56c365cbf77034ec7d96588d89e9798"", ""3b8404dac56c365cbf77034ec7d96588d89e9798"")","=HYPERLINK(""https://github.com/google/gson/commit/0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"", ""0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"")",inder123@gmail.com,refactored String related functional tests out in a separate test class.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testEscapingQuotesInStringSerialization
10/09/2008 21:29:06,"=HYPERLINK(""https://github.com/google/gson/commit/3b8404dac56c365cbf77034ec7d96588d89e9798"", ""3b8404dac56c365cbf77034ec7d96588d89e9798"")","=HYPERLINK(""https://github.com/google/gson/commit/0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"", ""0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"")",inder123@gmail.com,refactored String related functional tests out in a separate test class.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testEscapingQuotesInStringDeserialization
10/09/2008 21:29:06,"=HYPERLINK(""https://github.com/google/gson/commit/3b8404dac56c365cbf77034ec7d96588d89e9798"", ""3b8404dac56c365cbf77034ec7d96588d89e9798"")","=HYPERLINK(""https://github.com/google/gson/commit/0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"", ""0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"")",inder123@gmail.com,refactored String related functional tests out in a separate test class.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testStringValueAsSingleElementArraySerialization
10/09/2008 21:29:06,"=HYPERLINK(""https://github.com/google/gson/commit/3b8404dac56c365cbf77034ec7d96588d89e9798"", ""3b8404dac56c365cbf77034ec7d96588d89e9798"")","=HYPERLINK(""https://github.com/google/gson/commit/0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"", ""0b9c739a7b2a2dcbeb264a30a271dcb67b72f773"")",inder123@gmail.com,refactored String related functional tests out in a separate test class.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testStringValueAsSingleElementArrayDeserialization
10/09/2008 21:53:54,"=HYPERLINK(""https://github.com/google/gson/commit/1abf693b709f6315baacbbbf23d9f352c5a1083f"", ""1abf693b709f6315baacbbbf23d9f352c5a1083f"")","=HYPERLINK(""https://github.com/google/gson/commit/427c17a73208cf53c381e4e8099d4ef60c08cc9b"", ""427c17a73208cf53c381e4e8099d4ef60c08cc9b"")",inder123@gmail.com,"Fix for Issue 55 where GSON was unable to deserialize JSON with single quotes
(') used for field name/values. Gson now supports different fields with-in the
JSON to use either single quote or double quote. However, a single field name
or value must use ' or """" to delimit itself.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testJsonInSingleQuotes
10/10/2008 18:22:27,"=HYPERLINK(""https://github.com/google/gson/commit/4d73459b7e2fa806610ff1110baf1da3c650c21d"", ""4d73459b7e2fa806610ff1110baf1da3c650c21d"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd516345818eab763da02e1b9d7ec42404e98c4"", ""cdd516345818eab763da02e1b9d7ec42404e98c4"")",inder123@gmail.com,"moved performance tests under the metrics package and replaced the invalid JSON
string with \n with a valid one.",gson/src/test/java/com/google/gson/functional/StringTest.java,StringTest.java,testReallyLongStringsDeserialization
10/10/2008 18:22:27,"=HYPERLINK(""https://github.com/google/gson/commit/4d73459b7e2fa806610ff1110baf1da3c650c21d"", ""4d73459b7e2fa806610ff1110baf1da3c650c21d"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd516345818eab763da02e1b9d7ec42404e98c4"", ""cdd516345818eab763da02e1b9d7ec42404e98c4"")",inder123@gmail.com,"moved performance tests under the metrics package and replaced the invalid JSON
string with \n with a valid one.",gson/src/test/java/com/google/gson/functional/StringTest.java,StringTest.java,parseLongJson
10/10/2008 18:22:27,"=HYPERLINK(""https://github.com/google/gson/commit/4d73459b7e2fa806610ff1110baf1da3c650c21d"", ""4d73459b7e2fa806610ff1110baf1da3c650c21d"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd516345818eab763da02e1b9d7ec42404e98c4"", ""cdd516345818eab763da02e1b9d7ec42404e98c4"")",inder123@gmail.com,"moved performance tests under the metrics package and replaced the invalid JSON
string with \n with a valid one.",gson/src/test/java/com/google/gson/functional/StringTest.java,StringTest.java,ExceptionHolder
10/10/2008 18:22:27,"=HYPERLINK(""https://github.com/google/gson/commit/4d73459b7e2fa806610ff1110baf1da3c650c21d"", ""4d73459b7e2fa806610ff1110baf1da3c650c21d"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd516345818eab763da02e1b9d7ec42404e98c4"", ""cdd516345818eab763da02e1b9d7ec42404e98c4"")",inder123@gmail.com,"moved performance tests under the metrics package and replaced the invalid JSON
string with \n with a valid one.",gson/src/test/java/com/google/gson/functional/StringTest.java,StringTest.java,ExceptionHolder
10/13/2008 14:14:57,"=HYPERLINK(""https://github.com/google/gson/commit/add960644ac204fffbb112d7d01097dbaba38e8f"", ""add960644ac204fffbb112d7d01097dbaba38e8f"")","=HYPERLINK(""https://github.com/google/gson/commit/2b9fd47b720f0743d69dfcc48bc04b471e37d240"", ""2b9fd47b720f0743d69dfcc48bc04b471e37d240"")",inder123@gmail.com,disabled tests for issue 43 and 44 since those are deferred for a subsequent release.,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,CustomTypeAdaptersTest.java,testCustomSerializersOfSelf
10/13/2008 14:14:57,"=HYPERLINK(""https://github.com/google/gson/commit/add960644ac204fffbb112d7d01097dbaba38e8f"", ""add960644ac204fffbb112d7d01097dbaba38e8f"")","=HYPERLINK(""https://github.com/google/gson/commit/2b9fd47b720f0743d69dfcc48bc04b471e37d240"", ""2b9fd47b720f0743d69dfcc48bc04b471e37d240"")",inder123@gmail.com,disabled tests for issue 43 and 44 since those are deferred for a subsequent release.,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,CustomTypeAdaptersTest.java,testCustomDeserializersOfSelf
10/14/2008 14:37:33,"=HYPERLINK(""https://github.com/google/gson/commit/9f5a2086deafa340ac12e78d44c8c23b19483f9d"", ""9f5a2086deafa340ac12e78d44c8c23b19483f9d"")","=HYPERLINK(""https://github.com/google/gson/commit/745c8e2a83360f5f71904d1be828fd7041f42222"", ""745c8e2a83360f5f71904d1be828fd7041f42222"")",inder123@gmail.com,"updated Gson version to 1.2.2
Added a test to ensure that CustomTypeAdapters are not applied automatically
for SubClasses.",gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,CustomTypeAdaptersTest.java,testCustomTypeAdapterAppliesToSubClasses
10/20/2008 15:09:42,"=HYPERLINK(""https://github.com/google/gson/commit/9dfa454f6da6e88b51dba7840881feb874dbbdef"", ""9dfa454f6da6e88b51dba7840881feb874dbbdef"")","=HYPERLINK(""https://github.com/google/gson/commit/95861175a8b175215b753e021ff361609a2d5281"", ""95861175a8b175215b753e021ff361609a2d5281"")",inder123@gmail.com,Fixed issue 63 where Gson could not operate in a thread-safe manner. Resolved the issue by recreating ObjectNavigatorFactory for each call instead of reusing the same object everywhere. This is needed since ObjectNavigatorFactory had MemoryRefStack that was incorrectly being shared across calls.,gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java,ConcurrencyTest.java,testSingleThread
10/20/2008 15:09:42,"=HYPERLINK(""https://github.com/google/gson/commit/9dfa454f6da6e88b51dba7840881feb874dbbdef"", ""9dfa454f6da6e88b51dba7840881feb874dbbdef"")","=HYPERLINK(""https://github.com/google/gson/commit/95861175a8b175215b753e021ff361609a2d5281"", ""95861175a8b175215b753e021ff361609a2d5281"")",inder123@gmail.com,Fixed issue 63 where Gson could not operate in a thread-safe manner. Resolved the issue by recreating ObjectNavigatorFactory for each call instead of reusing the same object everywhere. This is needed since ObjectNavigatorFactory had MemoryRefStack that was incorrectly being shared across calls.,gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java,ConcurrencyTest.java,testMultiThread
10/21/2008 17:37:41,"=HYPERLINK(""https://github.com/google/gson/commit/3cd665b199ff77bbeb4aa45d1e1816ec37d942c7"", ""3cd665b199ff77bbeb4aa45d1e1816ec37d942c7"")","=HYPERLINK(""https://github.com/google/gson/commit/9dfa454f6da6e88b51dba7840881feb874dbbdef"", ""9dfa454f6da6e88b51dba7840881feb874dbbdef"")",inder123@gmail.com,"Added support for serialization of raw maps.
Also, refactored tests for maps in MapTest class.",gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,testMapSerialization
10/21/2008 17:37:41,"=HYPERLINK(""https://github.com/google/gson/commit/3cd665b199ff77bbeb4aa45d1e1816ec37d942c7"", ""3cd665b199ff77bbeb4aa45d1e1816ec37d942c7"")","=HYPERLINK(""https://github.com/google/gson/commit/9dfa454f6da6e88b51dba7840881feb874dbbdef"", ""9dfa454f6da6e88b51dba7840881feb874dbbdef"")",inder123@gmail.com,"Added support for serialization of raw maps.
Also, refactored tests for maps in MapTest class.",gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,testMapDeserialization
10/21/2008 17:37:41,"=HYPERLINK(""https://github.com/google/gson/commit/3cd665b199ff77bbeb4aa45d1e1816ec37d942c7"", ""3cd665b199ff77bbeb4aa45d1e1816ec37d942c7"")","=HYPERLINK(""https://github.com/google/gson/commit/9dfa454f6da6e88b51dba7840881feb874dbbdef"", ""9dfa454f6da6e88b51dba7840881feb874dbbdef"")",inder123@gmail.com,"Added support for serialization of raw maps.
Also, refactored tests for maps in MapTest class.",gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,testMapSerializationEmpty
11/13/2008 20:17:19,"=HYPERLINK(""https://github.com/google/gson/commit/bc2c25f235808c7e90d9bde6b2795997405af0cf"", ""bc2c25f235808c7e90d9bde6b2795997405af0cf"")","=HYPERLINK(""https://github.com/google/gson/commit/9245bebdba9a3227674f3c0b08d86165891f02cc"", ""9245bebdba9a3227674f3c0b08d86165891f02cc"")",inder123@gmail.com,"Removed ExceptionWrapper from serializers. 
This is done since it is improper to throw a parse exception from serializers. Moreover, the serializers dont deal with external input, they deal with classes, so they need not guard against spurious input.",gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,JsonSerializerExceptionWrapperTest.java,testRethrowJsonParseException
11/13/2008 20:17:19,"=HYPERLINK(""https://github.com/google/gson/commit/bc2c25f235808c7e90d9bde6b2795997405af0cf"", ""bc2c25f235808c7e90d9bde6b2795997405af0cf"")","=HYPERLINK(""https://github.com/google/gson/commit/9245bebdba9a3227674f3c0b08d86165891f02cc"", ""9245bebdba9a3227674f3c0b08d86165891f02cc"")",inder123@gmail.com,"Removed ExceptionWrapper from serializers. 
This is done since it is improper to throw a parse exception from serializers. Moreover, the serializers dont deal with external input, they deal with classes, so they need not guard against spurious input.",gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,JsonSerializerExceptionWrapperTest.java,testWrappedExceptionPropagation
11/13/2008 20:17:19,"=HYPERLINK(""https://github.com/google/gson/commit/bc2c25f235808c7e90d9bde6b2795997405af0cf"", ""bc2c25f235808c7e90d9bde6b2795997405af0cf"")","=HYPERLINK(""https://github.com/google/gson/commit/9245bebdba9a3227674f3c0b08d86165891f02cc"", ""9245bebdba9a3227674f3c0b08d86165891f02cc"")",inder123@gmail.com,"Removed ExceptionWrapper from serializers. 
This is done since it is improper to throw a parse exception from serializers. Moreover, the serializers dont deal with external input, they deal with classes, so they need not guard against spurious input.",gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,JsonSerializerExceptionWrapperTest.java,testProperSerialization
11/13/2008 20:17:19,"=HYPERLINK(""https://github.com/google/gson/commit/bc2c25f235808c7e90d9bde6b2795997405af0cf"", ""bc2c25f235808c7e90d9bde6b2795997405af0cf"")","=HYPERLINK(""https://github.com/google/gson/commit/9245bebdba9a3227674f3c0b08d86165891f02cc"", ""9245bebdba9a3227674f3c0b08d86165891f02cc"")",inder123@gmail.com,"Removed ExceptionWrapper from serializers. 
This is done since it is improper to throw a parse exception from serializers. Moreover, the serializers dont deal with external input, they deal with classes, so they need not guard against spurious input.",gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,JsonSerializerExceptionWrapperTest.java,ExceptionJsonSerializer
11/13/2008 20:17:19,"=HYPERLINK(""https://github.com/google/gson/commit/bc2c25f235808c7e90d9bde6b2795997405af0cf"", ""bc2c25f235808c7e90d9bde6b2795997405af0cf"")","=HYPERLINK(""https://github.com/google/gson/commit/9245bebdba9a3227674f3c0b08d86165891f02cc"", ""9245bebdba9a3227674f3c0b08d86165891f02cc"")",inder123@gmail.com,"Removed ExceptionWrapper from serializers. 
This is done since it is improper to throw a parse exception from serializers. Moreover, the serializers dont deal with external input, they deal with classes, so they need not guard against spurious input.",gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,JsonSerializerExceptionWrapperTest.java,serialize
11/14/2008 14:52:57,"=HYPERLINK(""https://github.com/google/gson/commit/9a69560d9f1f8ab89277259c221193acf7cfcffd"", ""9a69560d9f1f8ab89277259c221193acf7cfcffd"")","=HYPERLINK(""https://github.com/google/gson/commit/e4ea6b1fd052705a8c2088ce36ee84db1961b4af"", ""e4ea6b1fd052705a8c2088ce36ee84db1961b4af"")",inder123@gmail.com,"During serialization, we now dont call custom serializers the field is null.
During deserialization, we do not call custom deserializer if the field is to be set to null. Moreover, changed the logic to set fields to null only if explicitly indicated in the incoming Json. This is different from past behavior where all fields not mentioned in incoming Json were set to null. Now they are set to whatever the default constructor will do.",gson/src/test/java/com/google/gson/functional/MapTest.java,MapTest.java,testMapSubclassDeserialization
11/14/2008 23:11:28,"=HYPERLINK(""https://github.com/google/gson/commit/cf2a457af7b0422e7728e0d55a4e794048af5a6b"", ""cf2a457af7b0422e7728e0d55a4e794048af5a6b"")","=HYPERLINK(""https://github.com/google/gson/commit/0d8150fe52eba34a0472c47be71587885ba4a94c"", ""0d8150fe52eba34a0472c47be71587885ba4a94c"")",joel.leitch@gmail.com,Removed the TypeAdapter object from GSON now that the primitive objects and fields are created by a custom Type Adapter.,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,PrimitiveTypeAdapterTest.java,setUp
11/14/2008 23:11:28,"=HYPERLINK(""https://github.com/google/gson/commit/cf2a457af7b0422e7728e0d55a4e794048af5a6b"", ""cf2a457af7b0422e7728e0d55a4e794048af5a6b"")","=HYPERLINK(""https://github.com/google/gson/commit/0d8150fe52eba34a0472c47be71587885ba4a94c"", ""0d8150fe52eba34a0472c47be71587885ba4a94c"")",joel.leitch@gmail.com,Removed the TypeAdapter object from GSON now that the primitive objects and fields are created by a custom Type Adapter.,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,PrimitiveTypeAdapterTest.java,testImproperConversion
11/14/2008 23:11:28,"=HYPERLINK(""https://github.com/google/gson/commit/cf2a457af7b0422e7728e0d55a4e794048af5a6b"", ""cf2a457af7b0422e7728e0d55a4e794048af5a6b"")","=HYPERLINK(""https://github.com/google/gson/commit/0d8150fe52eba34a0472c47be71587885ba4a94c"", ""0d8150fe52eba34a0472c47be71587885ba4a94c"")",joel.leitch@gmail.com,Removed the TypeAdapter object from GSON now that the primitive objects and fields are created by a custom Type Adapter.,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,PrimitiveTypeAdapterTest.java,testImproperCharacterConversion
11/14/2008 23:11:28,"=HYPERLINK(""https://github.com/google/gson/commit/cf2a457af7b0422e7728e0d55a4e794048af5a6b"", ""cf2a457af7b0422e7728e0d55a4e794048af5a6b"")","=HYPERLINK(""https://github.com/google/gson/commit/0d8150fe52eba34a0472c47be71587885ba4a94c"", ""0d8150fe52eba34a0472c47be71587885ba4a94c"")",joel.leitch@gmail.com,Removed the TypeAdapter object from GSON now that the primitive objects and fields are created by a custom Type Adapter.,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,PrimitiveTypeAdapterTest.java,testProperPrimitiveConversions
11/14/2008 23:11:28,"=HYPERLINK(""https://github.com/google/gson/commit/cf2a457af7b0422e7728e0d55a4e794048af5a6b"", ""cf2a457af7b0422e7728e0d55a4e794048af5a6b"")","=HYPERLINK(""https://github.com/google/gson/commit/0d8150fe52eba34a0472c47be71587885ba4a94c"", ""0d8150fe52eba34a0472c47be71587885ba4a94c"")",joel.leitch@gmail.com,Removed the TypeAdapter object from GSON now that the primitive objects and fields are created by a custom Type Adapter.,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,PrimitiveTypeAdapterTest.java,testProperEnumConversions
12/18/2008 17:41:44,"=HYPERLINK(""https://github.com/google/gson/commit/6dbdb272c0950d1bd17c3e3b5e38b385d1373eb2"", ""6dbdb272c0950d1bd17c3e3b5e38b385d1373eb2"")","=HYPERLINK(""https://github.com/google/gson/commit/09720f28cfc165fd1227d8b7be6ec3468d98b636"", ""09720f28cfc165fd1227d8b7be6ec3468d98b636"")",inder123@gmail.com,Added checks to ensure that we do not serialize NaN or postiive or negative infinity for floats.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testNaNSerializationNotSupported
12/18/2008 17:41:44,"=HYPERLINK(""https://github.com/google/gson/commit/6dbdb272c0950d1bd17c3e3b5e38b385d1373eb2"", ""6dbdb272c0950d1bd17c3e3b5e38b385d1373eb2"")","=HYPERLINK(""https://github.com/google/gson/commit/09720f28cfc165fd1227d8b7be6ec3468d98b636"", ""09720f28cfc165fd1227d8b7be6ec3468d98b636"")",inder123@gmail.com,Added checks to ensure that we do not serialize NaN or postiive or negative infinity for floats.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testNaNDeserializationNotSupported
12/18/2008 17:41:44,"=HYPERLINK(""https://github.com/google/gson/commit/6dbdb272c0950d1bd17c3e3b5e38b385d1373eb2"", ""6dbdb272c0950d1bd17c3e3b5e38b385d1373eb2"")","=HYPERLINK(""https://github.com/google/gson/commit/09720f28cfc165fd1227d8b7be6ec3468d98b636"", ""09720f28cfc165fd1227d8b7be6ec3468d98b636"")",inder123@gmail.com,Added checks to ensure that we do not serialize NaN or postiive or negative infinity for floats.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testInfinitySerializationNotSupported
12/18/2008 17:41:44,"=HYPERLINK(""https://github.com/google/gson/commit/6dbdb272c0950d1bd17c3e3b5e38b385d1373eb2"", ""6dbdb272c0950d1bd17c3e3b5e38b385d1373eb2"")","=HYPERLINK(""https://github.com/google/gson/commit/09720f28cfc165fd1227d8b7be6ec3468d98b636"", ""09720f28cfc165fd1227d8b7be6ec3468d98b636"")",inder123@gmail.com,Added checks to ensure that we do not serialize NaN or postiive or negative infinity for floats.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testInfinityDeserializationNotSupported
12/19/2008 11:46:24,"=HYPERLINK(""https://github.com/google/gson/commit/53f7d26b6d442467d54f0e61fdf030cd395011f7"", ""53f7d26b6d442467d54f0e61fdf030cd395011f7"")","=HYPERLINK(""https://github.com/google/gson/commit/f7e4d5e4bbdb10ef3215c66c0df4ca3828f99768"", ""f7e4d5e4bbdb10ef3215c66c0df4ca3828f99768"")",inder123@gmail.com,"removed tests for serialization of BigDecimal NaN, positive and negative infinity since BigDecimal can not be created with these values.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testBigDecimalNaNSerializationNotSupported
12/19/2008 11:46:24,"=HYPERLINK(""https://github.com/google/gson/commit/53f7d26b6d442467d54f0e61fdf030cd395011f7"", ""53f7d26b6d442467d54f0e61fdf030cd395011f7"")","=HYPERLINK(""https://github.com/google/gson/commit/f7e4d5e4bbdb10ef3215c66c0df4ca3828f99768"", ""f7e4d5e4bbdb10ef3215c66c0df4ca3828f99768"")",inder123@gmail.com,"removed tests for serialization of BigDecimal NaN, positive and negative infinity since BigDecimal can not be created with these values.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testBigDecimalInfinitySerializationNotSupported
12/19/2008 11:46:24,"=HYPERLINK(""https://github.com/google/gson/commit/53f7d26b6d442467d54f0e61fdf030cd395011f7"", ""53f7d26b6d442467d54f0e61fdf030cd395011f7"")","=HYPERLINK(""https://github.com/google/gson/commit/f7e4d5e4bbdb10ef3215c66c0df4ca3828f99768"", ""f7e4d5e4bbdb10ef3215c66c0df4ca3828f99768"")",inder123@gmail.com,"removed tests for serialization of BigDecimal NaN, positive and negative infinity since BigDecimal can not be created with these values.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testNegativeInfinityBigDecimalSerializationNotSupported
12/19/2008 19:26:14,"=HYPERLINK(""https://github.com/google/gson/commit/51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"", ""51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"")","=HYPERLINK(""https://github.com/google/gson/commit/362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"", ""362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"")",inder123@gmail.com,"Added a GsonBuilder setting to enable serialization of special double types, NaN, Infinity, and -Infinity.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testDoubleNaNSerializationNotSupported
12/19/2008 19:26:14,"=HYPERLINK(""https://github.com/google/gson/commit/51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"", ""51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"")","=HYPERLINK(""https://github.com/google/gson/commit/362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"", ""362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"")",inder123@gmail.com,"Added a GsonBuilder setting to enable serialization of special double types, NaN, Infinity, and -Infinity.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testDoubleNaNDeserializationNotSupported
12/19/2008 19:26:14,"=HYPERLINK(""https://github.com/google/gson/commit/51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"", ""51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"")","=HYPERLINK(""https://github.com/google/gson/commit/362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"", ""362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"")",inder123@gmail.com,"Added a GsonBuilder setting to enable serialization of special double types, NaN, Infinity, and -Infinity.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testFloatNaNSerializationNotSupported
12/19/2008 19:26:14,"=HYPERLINK(""https://github.com/google/gson/commit/51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"", ""51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"")","=HYPERLINK(""https://github.com/google/gson/commit/362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"", ""362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"")",inder123@gmail.com,"Added a GsonBuilder setting to enable serialization of special double types, NaN, Infinity, and -Infinity.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testFloatNaNDeserializationNotSupported
12/19/2008 19:26:14,"=HYPERLINK(""https://github.com/google/gson/commit/51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"", ""51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"")","=HYPERLINK(""https://github.com/google/gson/commit/362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"", ""362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"")",inder123@gmail.com,"Added a GsonBuilder setting to enable serialization of special double types, NaN, Infinity, and -Infinity.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testDoubleInfinitySerializationNotSupported
12/19/2008 19:26:14,"=HYPERLINK(""https://github.com/google/gson/commit/51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"", ""51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"")","=HYPERLINK(""https://github.com/google/gson/commit/362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"", ""362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"")",inder123@gmail.com,"Added a GsonBuilder setting to enable serialization of special double types, NaN, Infinity, and -Infinity.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testDoubleInfinityDeserializationNotSupported
12/19/2008 19:26:14,"=HYPERLINK(""https://github.com/google/gson/commit/51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"", ""51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"")","=HYPERLINK(""https://github.com/google/gson/commit/362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"", ""362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"")",inder123@gmail.com,"Added a GsonBuilder setting to enable serialization of special double types, NaN, Infinity, and -Infinity.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testFloatInfinitySerializationNotSupported
12/19/2008 19:26:14,"=HYPERLINK(""https://github.com/google/gson/commit/51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"", ""51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"")","=HYPERLINK(""https://github.com/google/gson/commit/362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"", ""362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"")",inder123@gmail.com,"Added a GsonBuilder setting to enable serialization of special double types, NaN, Infinity, and -Infinity.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testFloatInfinityDeserializationNotSupported
12/19/2008 19:26:14,"=HYPERLINK(""https://github.com/google/gson/commit/51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"", ""51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"")","=HYPERLINK(""https://github.com/google/gson/commit/362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"", ""362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"")",inder123@gmail.com,"Added a GsonBuilder setting to enable serialization of special double types, NaN, Infinity, and -Infinity.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testNegativeInfinitySerializationNotSupported
12/19/2008 19:26:14,"=HYPERLINK(""https://github.com/google/gson/commit/51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"", ""51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"")","=HYPERLINK(""https://github.com/google/gson/commit/362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"", ""362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"")",inder123@gmail.com,"Added a GsonBuilder setting to enable serialization of special double types, NaN, Infinity, and -Infinity.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testNegativeInfinityDeserializationNotSupported
12/19/2008 19:26:14,"=HYPERLINK(""https://github.com/google/gson/commit/51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"", ""51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"")","=HYPERLINK(""https://github.com/google/gson/commit/362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"", ""362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"")",inder123@gmail.com,"Added a GsonBuilder setting to enable serialization of special double types, NaN, Infinity, and -Infinity.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testNegativeInfinityFloatSerializationNotSupported
12/19/2008 19:26:14,"=HYPERLINK(""https://github.com/google/gson/commit/51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"", ""51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"")","=HYPERLINK(""https://github.com/google/gson/commit/362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"", ""362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"")",inder123@gmail.com,"Added a GsonBuilder setting to enable serialization of special double types, NaN, Infinity, and -Infinity.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testNegativeInfinityFloatDeserializationNotSupported
12/19/2008 19:26:14,"=HYPERLINK(""https://github.com/google/gson/commit/51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"", ""51881c7f4a60d62e0b71ff0dfef78c18bdb1005f"")","=HYPERLINK(""https://github.com/google/gson/commit/362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"", ""362a94ec74f81a8c9f2a3f42d1a53d9400be2e69"")",inder123@gmail.com,"Added a GsonBuilder setting to enable serialization of special double types, NaN, Infinity, and -Infinity.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testNegativeInfinityBigDecimalDeserializationNotSupported
12/28/2008 17:14:44,"=HYPERLINK(""https://github.com/google/gson/commit/9612bb3601f77611c35ed7b504f0064b98259d3f"", ""9612bb3601f77611c35ed7b504f0064b98259d3f"")","=HYPERLINK(""https://github.com/google/gson/commit/73d93e332251ccf3619b3b6d2e7b1529e902e78d"", ""73d93e332251ccf3619b3b6d2e7b1529e902e78d"")",joel.leitch@gmail.com,Removing test file that I didn't mean to add in r355.,gson/src/main/java/com/google/gson/TestCharacters.java,TestCharacters.java,main
12/30/2008 12:54:33,"=HYPERLINK(""https://github.com/google/gson/commit/05f54f35520bb0718dcaa12333520f4c2aaf3cc7"", ""05f54f35520bb0718dcaa12333520f4c2aaf3cc7"")","=HYPERLINK(""https://github.com/google/gson/commit/9612bb3601f77611c35ed7b504f0064b98259d3f"", ""9612bb3601f77611c35ed7b504f0064b98259d3f"")",inder123@gmail.com,Incorporated code review comments from r350,gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java,FieldExclusionTest.java,TestInnerClass
12/30/2008 12:54:33,"=HYPERLINK(""https://github.com/google/gson/commit/05f54f35520bb0718dcaa12333520f4c2aaf3cc7"", ""05f54f35520bb0718dcaa12333520f4c2aaf3cc7"")","=HYPERLINK(""https://github.com/google/gson/commit/9612bb3601f77611c35ed7b504f0064b98259d3f"", ""9612bb3601f77611c35ed7b504f0064b98259d3f"")",inder123@gmail.com,Incorporated code review comments from r350,gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java,FieldExclusionTest.java,TestStaticNestedClass
12/30/2008 12:54:33,"=HYPERLINK(""https://github.com/google/gson/commit/05f54f35520bb0718dcaa12333520f4c2aaf3cc7"", ""05f54f35520bb0718dcaa12333520f4c2aaf3cc7"")","=HYPERLINK(""https://github.com/google/gson/commit/9612bb3601f77611c35ed7b504f0064b98259d3f"", ""9612bb3601f77611c35ed7b504f0064b98259d3f"")",inder123@gmail.com,Incorporated code review comments from r350,gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java,FieldExclusionTest.java,toJson
12/30/2008 16:42:36,"=HYPERLINK(""https://github.com/google/gson/commit/3690d362b9e3007e390d38092ce339e8a1145781"", ""3690d362b9e3007e390d38092ce339e8a1145781"")","=HYPERLINK(""https://github.com/google/gson/commit/e839336eea7aa7e414108a6d33703349adc7a705"", ""e839336eea7aa7e414108a6d33703349adc7a705"")",inder123@gmail.com,incorporated feedback from r358,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,PrettyPrintingTest.java,setUp
12/30/2008 16:42:36,"=HYPERLINK(""https://github.com/google/gson/commit/3690d362b9e3007e390d38092ce339e8a1145781"", ""3690d362b9e3007e390d38092ce339e8a1145781"")","=HYPERLINK(""https://github.com/google/gson/commit/e839336eea7aa7e414108a6d33703349adc7a705"", ""e839336eea7aa7e414108a6d33703349adc7a705"")",inder123@gmail.com,incorporated feedback from r358,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,PrettyPrintingTest.java,testAnonymousLocalClassesSerialization
12/30/2008 16:42:36,"=HYPERLINK(""https://github.com/google/gson/commit/3690d362b9e3007e390d38092ce339e8a1145781"", ""3690d362b9e3007e390d38092ce339e8a1145781"")","=HYPERLINK(""https://github.com/google/gson/commit/e839336eea7aa7e414108a6d33703349adc7a705"", ""e839336eea7aa7e414108a6d33703349adc7a705"")",inder123@gmail.com,incorporated feedback from r358,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,PrettyPrintingTest.java,testPrettyPrintList
12/30/2008 16:42:36,"=HYPERLINK(""https://github.com/google/gson/commit/3690d362b9e3007e390d38092ce339e8a1145781"", ""3690d362b9e3007e390d38092ce339e8a1145781"")","=HYPERLINK(""https://github.com/google/gson/commit/e839336eea7aa7e414108a6d33703349adc7a705"", ""e839336eea7aa7e414108a6d33703349adc7a705"")",inder123@gmail.com,incorporated feedback from r358,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,PrettyPrintingTest.java,testPrettyPrintArrayOfObjects
12/30/2008 16:42:36,"=HYPERLINK(""https://github.com/google/gson/commit/3690d362b9e3007e390d38092ce339e8a1145781"", ""3690d362b9e3007e390d38092ce339e8a1145781"")","=HYPERLINK(""https://github.com/google/gson/commit/e839336eea7aa7e414108a6d33703349adc7a705"", ""e839336eea7aa7e414108a6d33703349adc7a705"")",inder123@gmail.com,incorporated feedback from r358,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,PrettyPrintingTest.java,testPrettyPrintArrayOfPrimitives
12/30/2008 16:42:36,"=HYPERLINK(""https://github.com/google/gson/commit/3690d362b9e3007e390d38092ce339e8a1145781"", ""3690d362b9e3007e390d38092ce339e8a1145781"")","=HYPERLINK(""https://github.com/google/gson/commit/e839336eea7aa7e414108a6d33703349adc7a705"", ""e839336eea7aa7e414108a6d33703349adc7a705"")",inder123@gmail.com,incorporated feedback from r358,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,PrettyPrintingTest.java,testPrettyPrintArrayOfPrimitiveArrays
12/30/2008 16:42:36,"=HYPERLINK(""https://github.com/google/gson/commit/3690d362b9e3007e390d38092ce339e8a1145781"", ""3690d362b9e3007e390d38092ce339e8a1145781"")","=HYPERLINK(""https://github.com/google/gson/commit/e839336eea7aa7e414108a6d33703349adc7a705"", ""e839336eea7aa7e414108a6d33703349adc7a705"")",inder123@gmail.com,incorporated feedback from r358,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,PrettyPrintingTest.java,testPrettyPrintListOfPrimitiveArrays
12/30/2008 16:42:36,"=HYPERLINK(""https://github.com/google/gson/commit/3690d362b9e3007e390d38092ce339e8a1145781"", ""3690d362b9e3007e390d38092ce339e8a1145781"")","=HYPERLINK(""https://github.com/google/gson/commit/e839336eea7aa7e414108a6d33703349adc7a705"", ""e839336eea7aa7e414108a6d33703349adc7a705"")",inder123@gmail.com,incorporated feedback from r358,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,PrettyPrintingTest.java,testMultipleArrays
12/30/2008 16:42:36,"=HYPERLINK(""https://github.com/google/gson/commit/3690d362b9e3007e390d38092ce339e8a1145781"", ""3690d362b9e3007e390d38092ce339e8a1145781"")","=HYPERLINK(""https://github.com/google/gson/commit/e839336eea7aa7e414108a6d33703349adc7a705"", ""e839336eea7aa7e414108a6d33703349adc7a705"")",inder123@gmail.com,incorporated feedback from r358,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,PrettyPrintingTest.java,print
12/30/2008 16:42:36,"=HYPERLINK(""https://github.com/google/gson/commit/3690d362b9e3007e390d38092ce339e8a1145781"", ""3690d362b9e3007e390d38092ce339e8a1145781"")","=HYPERLINK(""https://github.com/google/gson/commit/e839336eea7aa7e414108a6d33703349adc7a705"", ""e839336eea7aa7e414108a6d33703349adc7a705"")",inder123@gmail.com,incorporated feedback from r358,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,PrettyPrintingTest.java,assertPrintMargin
03/03/2009 16:37:26,"=HYPERLINK(""https://github.com/google/gson/commit/18005bbae1922f725aabe1ce15624104bfc2d146"", ""18005bbae1922f725aabe1ce15624104bfc2d146"")","=HYPERLINK(""https://github.com/google/gson/commit/2c25fdd85022c52d5828a8e7f8a38e7e1d4a2de5"", ""2c25fdd85022c52d5828a8e7f8a38e7e1d4a2de5"")",inder123@gmail.com,using consistent method name prefixes.,gson/src/test/java/com/google/gson/metrics/PerformanceTest.java,PerformanceTest.java,testLargeCollectionSerialization
03/03/2009 16:37:26,"=HYPERLINK(""https://github.com/google/gson/commit/18005bbae1922f725aabe1ce15624104bfc2d146"", ""18005bbae1922f725aabe1ce15624104bfc2d146"")","=HYPERLINK(""https://github.com/google/gson/commit/2c25fdd85022c52d5828a8e7f8a38e7e1d4a2de5"", ""2c25fdd85022c52d5828a8e7f8a38e7e1d4a2de5"")",inder123@gmail.com,using consistent method name prefixes.,gson/src/test/java/com/google/gson/metrics/PerformanceTest.java,PerformanceTest.java,testLargeCollectionDeserialization
03/30/2009 13:36:55,"=HYPERLINK(""https://github.com/google/gson/commit/e340801d258e18f733620b0fd03d65fffb8df6c3"", ""e340801d258e18f733620b0fd03d65fffb8df6c3"")","=HYPERLINK(""https://github.com/google/gson/commit/4f727df749b9ad97dfd0dd108a67539b7f163ee2"", ""4f727df749b9ad97dfd0dd108a67539b7f163ee2"")",inder123@gmail.com,Moved enum-related tests under EnumTest class.,gson/src/test/java/com/google/gson/common/TestTypes.java,TestTypes.java,getExpectedJson
03/30/2009 13:36:55,"=HYPERLINK(""https://github.com/google/gson/commit/e340801d258e18f733620b0fd03d65fffb8df6c3"", ""e340801d258e18f733620b0fd03d65fffb8df6c3"")","=HYPERLINK(""https://github.com/google/gson/commit/4f727df749b9ad97dfd0dd108a67539b7f163ee2"", ""4f727df749b9ad97dfd0dd108a67539b7f163ee2"")",inder123@gmail.com,Moved enum-related tests under EnumTest class.,gson/src/test/java/com/google/gson/functional/ArrayTest.java,ArrayTest.java,testTopLevelEnumInASingleElementArrayDeserialization
03/30/2009 13:36:55,"=HYPERLINK(""https://github.com/google/gson/commit/e340801d258e18f733620b0fd03d65fffb8df6c3"", ""e340801d258e18f733620b0fd03d65fffb8df6c3"")","=HYPERLINK(""https://github.com/google/gson/commit/4f727df749b9ad97dfd0dd108a67539b7f163ee2"", ""4f727df749b9ad97dfd0dd108a67539b7f163ee2"")",inder123@gmail.com,Moved enum-related tests under EnumTest class.,gson/src/test/java/com/google/gson/functional/CollectionTest.java,CollectionTest.java,testCollectionOfEnumsSerialization
03/30/2009 13:36:55,"=HYPERLINK(""https://github.com/google/gson/commit/e340801d258e18f733620b0fd03d65fffb8df6c3"", ""e340801d258e18f733620b0fd03d65fffb8df6c3"")","=HYPERLINK(""https://github.com/google/gson/commit/4f727df749b9ad97dfd0dd108a67539b7f163ee2"", ""4f727df749b9ad97dfd0dd108a67539b7f163ee2"")",inder123@gmail.com,Moved enum-related tests under EnumTest class.,gson/src/test/java/com/google/gson/functional/CollectionTest.java,CollectionTest.java,testCollectionOfEnumsDeserialization
03/30/2009 13:36:55,"=HYPERLINK(""https://github.com/google/gson/commit/e340801d258e18f733620b0fd03d65fffb8df6c3"", ""e340801d258e18f733620b0fd03d65fffb8df6c3"")","=HYPERLINK(""https://github.com/google/gson/commit/4f727df749b9ad97dfd0dd108a67539b7f163ee2"", ""4f727df749b9ad97dfd0dd108a67539b7f163ee2"")",inder123@gmail.com,Moved enum-related tests under EnumTest class.,gson/src/test/java/com/google/gson/functional/EnumTest.java,EnumTest.java,testEnumSerialization
03/30/2009 13:36:55,"=HYPERLINK(""https://github.com/google/gson/commit/e340801d258e18f733620b0fd03d65fffb8df6c3"", ""e340801d258e18f733620b0fd03d65fffb8df6c3"")","=HYPERLINK(""https://github.com/google/gson/commit/4f727df749b9ad97dfd0dd108a67539b7f163ee2"", ""4f727df749b9ad97dfd0dd108a67539b7f163ee2"")",inder123@gmail.com,Moved enum-related tests under EnumTest class.,gson/src/test/java/com/google/gson/functional/EnumTest.java,EnumTest.java,testEnumDeserialization
03/30/2009 13:36:55,"=HYPERLINK(""https://github.com/google/gson/commit/e340801d258e18f733620b0fd03d65fffb8df6c3"", ""e340801d258e18f733620b0fd03d65fffb8df6c3"")","=HYPERLINK(""https://github.com/google/gson/commit/4f727df749b9ad97dfd0dd108a67539b7f163ee2"", ""4f727df749b9ad97dfd0dd108a67539b7f163ee2"")",inder123@gmail.com,Moved enum-related tests under EnumTest class.,gson/src/test/java/com/google/gson/functional/EnumTest.java,EnumTest.java,testEnumFieldSerialization
03/30/2009 13:36:55,"=HYPERLINK(""https://github.com/google/gson/commit/e340801d258e18f733620b0fd03d65fffb8df6c3"", ""e340801d258e18f733620b0fd03d65fffb8df6c3"")","=HYPERLINK(""https://github.com/google/gson/commit/4f727df749b9ad97dfd0dd108a67539b7f163ee2"", ""4f727df749b9ad97dfd0dd108a67539b7f163ee2"")",inder123@gmail.com,Moved enum-related tests under EnumTest class.,gson/src/test/java/com/google/gson/functional/EnumTest.java,EnumTest.java,testEnumFieldDeserialization
03/30/2009 13:36:55,"=HYPERLINK(""https://github.com/google/gson/commit/e340801d258e18f733620b0fd03d65fffb8df6c3"", ""e340801d258e18f733620b0fd03d65fffb8df6c3"")","=HYPERLINK(""https://github.com/google/gson/commit/4f727df749b9ad97dfd0dd108a67539b7f163ee2"", ""4f727df749b9ad97dfd0dd108a67539b7f163ee2"")",inder123@gmail.com,Moved enum-related tests under EnumTest class.,gson/src/test/java/com/google/gson/functional/EnumTest.java,EnumTest.java,Foo
03/30/2009 13:36:55,"=HYPERLINK(""https://github.com/google/gson/commit/e340801d258e18f733620b0fd03d65fffb8df6c3"", ""e340801d258e18f733620b0fd03d65fffb8df6c3"")","=HYPERLINK(""https://github.com/google/gson/commit/4f727df749b9ad97dfd0dd108a67539b7f163ee2"", ""4f727df749b9ad97dfd0dd108a67539b7f163ee2"")",inder123@gmail.com,Moved enum-related tests under EnumTest class.,gson/src/test/java/com/google/gson/functional/EnumTest.java,EnumTest.java,Foo
03/30/2009 13:36:55,"=HYPERLINK(""https://github.com/google/gson/commit/e340801d258e18f733620b0fd03d65fffb8df6c3"", ""e340801d258e18f733620b0fd03d65fffb8df6c3"")","=HYPERLINK(""https://github.com/google/gson/commit/4f727df749b9ad97dfd0dd108a67539b7f163ee2"", ""4f727df749b9ad97dfd0dd108a67539b7f163ee2"")",inder123@gmail.com,Moved enum-related tests under EnumTest class.,gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testClassWithEnumFieldSerialization
03/30/2009 13:36:55,"=HYPERLINK(""https://github.com/google/gson/commit/e340801d258e18f733620b0fd03d65fffb8df6c3"", ""e340801d258e18f733620b0fd03d65fffb8df6c3"")","=HYPERLINK(""https://github.com/google/gson/commit/4f727df749b9ad97dfd0dd108a67539b7f163ee2"", ""4f727df749b9ad97dfd0dd108a67539b7f163ee2"")",inder123@gmail.com,Moved enum-related tests under EnumTest class.,gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testClassWithEnumFieldDeserialization
03/30/2009 13:36:55,"=HYPERLINK(""https://github.com/google/gson/commit/e340801d258e18f733620b0fd03d65fffb8df6c3"", ""e340801d258e18f733620b0fd03d65fffb8df6c3"")","=HYPERLINK(""https://github.com/google/gson/commit/4f727df749b9ad97dfd0dd108a67539b7f163ee2"", ""4f727df749b9ad97dfd0dd108a67539b7f163ee2"")",inder123@gmail.com,Moved enum-related tests under EnumTest class.,gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testTopLevelEnumSerialization
03/30/2009 13:36:55,"=HYPERLINK(""https://github.com/google/gson/commit/e340801d258e18f733620b0fd03d65fffb8df6c3"", ""e340801d258e18f733620b0fd03d65fffb8df6c3"")","=HYPERLINK(""https://github.com/google/gson/commit/4f727df749b9ad97dfd0dd108a67539b7f163ee2"", ""4f727df749b9ad97dfd0dd108a67539b7f163ee2"")",inder123@gmail.com,Moved enum-related tests under EnumTest class.,gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testTopLevelEnumDeserialization
03/30/2009 13:36:55,"=HYPERLINK(""https://github.com/google/gson/commit/e340801d258e18f733620b0fd03d65fffb8df6c3"", ""e340801d258e18f733620b0fd03d65fffb8df6c3"")","=HYPERLINK(""https://github.com/google/gson/commit/4f727df749b9ad97dfd0dd108a67539b7f163ee2"", ""4f727df749b9ad97dfd0dd108a67539b7f163ee2"")",inder123@gmail.com,Moved enum-related tests under EnumTest class.,gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,getExpectedJson
05/19/2009 12:59:32,"=HYPERLINK(""https://github.com/google/gson/commit/cd9bd710927b7c2a2f01b75430a42e58b18fb456"", ""cd9bd710927b7c2a2f01b75430a42e58b18fb456"")","=HYPERLINK(""https://github.com/google/gson/commit/abf4ab2d78b2a7f3108fd7560145f45886f6b301"", ""abf4ab2d78b2a7f3108fd7560145f45886f6b301"")",joel.leitch@gmail.com,Allow JS Keywords as field name.  These names are quoted anyways (and are valid according to the JSON spec) so it should not cause any issues.,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,JsonFieldNameValidatorTest.java,testKeywordAsFieldName
05/19/2009 14:49:25,"=HYPERLINK(""https://github.com/google/gson/commit/376385ac0ecf0c17fe52d70627d9af93549e9bd7"", ""376385ac0ecf0c17fe52d70627d9af93549e9bd7"")","=HYPERLINK(""https://github.com/google/gson/commit/cd9bd710927b7c2a2f01b75430a42e58b18fb456"", ""cd9bd710927b7c2a2f01b75430a42e58b18fb456"")",joel.leitch@gmail.com,Add a single quote to the HTML set of characters that should be escaped.,gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testQuoteEscaping
07/13/2009 20:08:04,"=HYPERLINK(""https://github.com/google/gson/commit/d8095c72fd5149444be413ba1f1c6529a148bc89"", ""d8095c72fd5149444be413ba1f1c6529a148bc89"")","=HYPERLINK(""https://github.com/google/gson/commit/eac1beacc97818cbbda3ec4e6d0bf6c392e59509"", ""eac1beacc97818cbbda3ec4e6d0bf6c392e59509"")",inder123@gmail.com,minor improvements to the test,gson/src/test/java/com/google/gson/metrics/PerformanceTest.java,PerformanceTest.java,testStringDeserializationPerformance
08/31/2009 12:51:47,"=HYPERLINK(""https://github.com/google/gson/commit/82771f006cad2047df9b30cdc35338599c31da45"", ""82771f006cad2047df9b30cdc35338599c31da45"")","=HYPERLINK(""https://github.com/google/gson/commit/66649a1a628bf84c6b2dcaa9312cbdb911c0b042"", ""66649a1a628bf84c6b2dcaa9312cbdb911c0b042"")",inder123@gmail.com,removed Java 1.5 warnings,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,ExposeFieldsTest.java,getExpectedJsonWithoutAnnotations
09/22/2009 14:04:27,"=HYPERLINK(""https://github.com/google/gson/commit/18b301dfeb91ca4468e0955d4cafcb32186efe1e"", ""18b301dfeb91ca4468e0955d4cafcb32186efe1e"")","=HYPERLINK(""https://github.com/google/gson/commit/82771f006cad2047df9b30cdc35338599c31da45"", ""82771f006cad2047df9b30cdc35338599c31da45"")",joel.leitch@gmail.com,"- Serializing of Object arrays.
- Fixed incorrect warning",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testArrayOfPrimitivesAsObjectsSerialization
09/22/2009 14:04:27,"=HYPERLINK(""https://github.com/google/gson/commit/18b301dfeb91ca4468e0955d4cafcb32186efe1e"", ""18b301dfeb91ca4468e0955d4cafcb32186efe1e"")","=HYPERLINK(""https://github.com/google/gson/commit/82771f006cad2047df9b30cdc35338599c31da45"", ""82771f006cad2047df9b30cdc35338599c31da45"")",joel.leitch@gmail.com,"- Serializing of Object arrays.
- Fixed incorrect warning",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testArrayOfPrimitivesAsObjectsDeserialization
09/22/2009 14:04:27,"=HYPERLINK(""https://github.com/google/gson/commit/18b301dfeb91ca4468e0955d4cafcb32186efe1e"", ""18b301dfeb91ca4468e0955d4cafcb32186efe1e"")","=HYPERLINK(""https://github.com/google/gson/commit/82771f006cad2047df9b30cdc35338599c31da45"", ""82771f006cad2047df9b30cdc35338599c31da45"")",joel.leitch@gmail.com,"- Serializing of Object arrays.
- Fixed incorrect warning",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testArrayOfObjectsWithoutTypeInfoDeserialization
09/22/2009 14:04:27,"=HYPERLINK(""https://github.com/google/gson/commit/18b301dfeb91ca4468e0955d4cafcb32186efe1e"", ""18b301dfeb91ca4468e0955d4cafcb32186efe1e"")","=HYPERLINK(""https://github.com/google/gson/commit/82771f006cad2047df9b30cdc35338599c31da45"", ""82771f006cad2047df9b30cdc35338599c31da45"")",joel.leitch@gmail.com,"- Serializing of Object arrays.
- Fixed incorrect warning",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testArrayWithoutTypeInfoDeserialization
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,setUp
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,testNonStringPrimitiveVisitation
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,testStringPrimitiveVisitationNoEscapingRequired
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,testStringPrimitiveVisitationEscapingRequired
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,testNonStringArrayVisitation
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,testStringArrayVisitationNoEscaping
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,testStringArrayVisitationEscapingRequired
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,testNonStringFieldVisitation
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,testStringFieldVisitationNoEscaping
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,testStringFieldVisitationEscapingRequired
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,endArray
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,endObject
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,startArray
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,startObject
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,visitArrayMember
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,visitArrayMember
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,visitArrayMember
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,visitObjectMember
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,visitObjectMember
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,visitObjectMember
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,visitPrimitive
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,visitNullArrayMember
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,visitNull
09/23/2009 13:28:03,"=HYPERLINK(""https://github.com/google/gson/commit/50eb582657b5a07aa4aec22f11c9f3071eb631a8"", ""50eb582657b5a07aa4aec22f11c9f3071eb631a8"")","=HYPERLINK(""https://github.com/google/gson/commit/3b0f8f4340c68d8fde0840befbc1b89afa14933f"", ""3b0f8f4340c68d8fde0840befbc1b89afa14933f"")",joel.leitch@gmail.com,Ensure that the JsonElement.toString() will always generate valid JSON (even when  control characters/whitespace characters are used).,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,JsonEscapingVisitorTest.java,visitNullObjectMember
09/25/2009 14:54:25,"=HYPERLINK(""https://github.com/google/gson/commit/3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"", ""3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"")","=HYPERLINK(""https://github.com/google/gson/commit/19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"", ""19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"")",inder123@gmail.com,"Fixed issue 156. 
Added support for serializing an object field (or array elements) as per its actual type.
Refactored inheritance related tests into its own test class. Added regression tests for issue 156.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testInheritenceSerialization
09/25/2009 14:54:25,"=HYPERLINK(""https://github.com/google/gson/commit/3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"", ""3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"")","=HYPERLINK(""https://github.com/google/gson/commit/19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"", ""19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"")",inder123@gmail.com,"Fixed issue 156. 
Added support for serializing an object field (or array elements) as per its actual type.
Refactored inheritance related tests into its own test class. Added regression tests for issue 156.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testInheritenceDeserialization
09/25/2009 14:54:25,"=HYPERLINK(""https://github.com/google/gson/commit/3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"", ""3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"")","=HYPERLINK(""https://github.com/google/gson/commit/19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"", ""19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"")",inder123@gmail.com,"Fixed issue 156. 
Added support for serializing an object field (or array elements) as per its actual type.
Refactored inheritance related tests into its own test class. Added regression tests for issue 156.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testSubInterfacesOfCollectionSerialization
09/25/2009 14:54:25,"=HYPERLINK(""https://github.com/google/gson/commit/3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"", ""3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"")","=HYPERLINK(""https://github.com/google/gson/commit/19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"", ""19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"")",inder123@gmail.com,"Fixed issue 156. 
Added support for serializing an object field (or array elements) as per its actual type.
Refactored inheritance related tests into its own test class. Added regression tests for issue 156.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testSubInterfacesOfCollectionDeserialization
09/25/2009 14:54:25,"=HYPERLINK(""https://github.com/google/gson/commit/3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"", ""3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"")","=HYPERLINK(""https://github.com/google/gson/commit/19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"", ""19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"")",inder123@gmail.com,"Fixed issue 156. 
Added support for serializing an object field (or array elements) as per its actual type.
Refactored inheritance related tests into its own test class. Added regression tests for issue 156.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,ClassWithSubInterfacesOfCollection
09/25/2009 14:54:25,"=HYPERLINK(""https://github.com/google/gson/commit/3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"", ""3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"")","=HYPERLINK(""https://github.com/google/gson/commit/19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"", ""19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"")",inder123@gmail.com,"Fixed issue 156. 
Added support for serializing an object field (or array elements) as per its actual type.
Refactored inheritance related tests into its own test class. Added regression tests for issue 156.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,ClassWithSubInterfacesOfCollection
09/25/2009 14:54:25,"=HYPERLINK(""https://github.com/google/gson/commit/3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"", ""3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"")","=HYPERLINK(""https://github.com/google/gson/commit/19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"", ""19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"")",inder123@gmail.com,"Fixed issue 156. 
Added support for serializing an object field (or array elements) as per its actual type.
Refactored inheritance related tests into its own test class. Added regression tests for issue 156.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,listContains
09/25/2009 14:54:25,"=HYPERLINK(""https://github.com/google/gson/commit/3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"", ""3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"")","=HYPERLINK(""https://github.com/google/gson/commit/19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"", ""19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"")",inder123@gmail.com,"Fixed issue 156. 
Added support for serializing an object field (or array elements) as per its actual type.
Refactored inheritance related tests into its own test class. Added regression tests for issue 156.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,queueContains
09/25/2009 14:54:25,"=HYPERLINK(""https://github.com/google/gson/commit/3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"", ""3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"")","=HYPERLINK(""https://github.com/google/gson/commit/19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"", ""19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"")",inder123@gmail.com,"Fixed issue 156. 
Added support for serializing an object field (or array elements) as per its actual type.
Refactored inheritance related tests into its own test class. Added regression tests for issue 156.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,setContains
09/25/2009 14:54:25,"=HYPERLINK(""https://github.com/google/gson/commit/3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"", ""3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"")","=HYPERLINK(""https://github.com/google/gson/commit/19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"", ""19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"")",inder123@gmail.com,"Fixed issue 156. 
Added support for serializing an object field (or array elements) as per its actual type.
Refactored inheritance related tests into its own test class. Added regression tests for issue 156.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,sortedSetContains
09/25/2009 14:54:25,"=HYPERLINK(""https://github.com/google/gson/commit/3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"", ""3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"")","=HYPERLINK(""https://github.com/google/gson/commit/19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"", ""19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"")",inder123@gmail.com,"Fixed issue 156. 
Added support for serializing an object field (or array elements) as per its actual type.
Refactored inheritance related tests into its own test class. Added regression tests for issue 156.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,getExpectedJson
09/25/2009 14:54:25,"=HYPERLINK(""https://github.com/google/gson/commit/3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"", ""3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"")","=HYPERLINK(""https://github.com/google/gson/commit/19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"", ""19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"")",inder123@gmail.com,"Fixed issue 156. 
Added support for serializing an object field (or array elements) as per its actual type.
Refactored inheritance related tests into its own test class. Added regression tests for issue 156.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,append
09/25/2009 14:54:25,"=HYPERLINK(""https://github.com/google/gson/commit/3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"", ""3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"")","=HYPERLINK(""https://github.com/google/gson/commit/19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"", ""19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"")",inder123@gmail.com,"Fixed issue 156. 
Added support for serializing an object field (or array elements) as per its actual type.
Refactored inheritance related tests into its own test class. Added regression tests for issue 156.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,SubTypeOfNested
09/25/2009 14:54:25,"=HYPERLINK(""https://github.com/google/gson/commit/3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"", ""3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"")","=HYPERLINK(""https://github.com/google/gson/commit/19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"", ""19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"")",inder123@gmail.com,"Fixed issue 156. 
Added support for serializing an object field (or array elements) as per its actual type.
Refactored inheritance related tests into its own test class. Added regression tests for issue 156.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,SubTypeOfNested
09/25/2009 14:54:25,"=HYPERLINK(""https://github.com/google/gson/commit/3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"", ""3e7ebf85568e7c9ef5b1373907c89a215e27e2b9"")","=HYPERLINK(""https://github.com/google/gson/commit/19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"", ""19ae6c0763cffe5d4a9a020902ae7d9ecbb2d6ea"")",inder123@gmail.com,"Fixed issue 156. 
Added support for serializing an object field (or array elements) as per its actual type.
Refactored inheritance related tests into its own test class. Added regression tests for issue 156.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,appendFields
09/29/2009 15:24:48,"=HYPERLINK(""https://github.com/google/gson/commit/e5ed1cc59a462f6072d5e049d5e8fe488bff0d89"", ""e5ed1cc59a462f6072d5e049d5e8fe488bff0d89"")","=HYPERLINK(""https://github.com/google/gson/commit/e73ad007a419d5a3061ea9a06d456597d5a7bd40"", ""e73ad007a419d5a3061ea9a06d456597d5a7bd40"")",joel.leitch@gmail.com,Added some more tests.,gson/src/test/java/com/google/gson/functional/ArrayTest.java,ArrayTest.java,testObjectArrayWithNonPrimitivesSerializaiton
09/29/2009 15:43:31,"=HYPERLINK(""https://github.com/google/gson/commit/907082102dad9f93d20ccf4a53ea626d5dc559eb"", ""907082102dad9f93d20ccf4a53ea626d5dc559eb"")","=HYPERLINK(""https://github.com/google/gson/commit/933a3e515021e9d3dea4a18326479a42df353494"", ""933a3e515021e9d3dea4a18326479a42df353494"")",inder123@gmail.com,"Added code to ensure that circular reference situations with custom handlers are detected.
Split CircularReferenceTest out of ObjectTest.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testDirectedAcyclicGraphSerialization
09/29/2009 15:43:31,"=HYPERLINK(""https://github.com/google/gson/commit/907082102dad9f93d20ccf4a53ea626d5dc559eb"", ""907082102dad9f93d20ccf4a53ea626d5dc559eb"")","=HYPERLINK(""https://github.com/google/gson/commit/933a3e515021e9d3dea4a18326479a42df353494"", ""933a3e515021e9d3dea4a18326479a42df353494"")",inder123@gmail.com,"Added code to ensure that circular reference situations with custom handlers are detected.
Split CircularReferenceTest out of ObjectTest.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testDirectedAcyclicGraphDeserialization
09/29/2009 15:43:31,"=HYPERLINK(""https://github.com/google/gson/commit/907082102dad9f93d20ccf4a53ea626d5dc559eb"", ""907082102dad9f93d20ccf4a53ea626d5dc559eb"")","=HYPERLINK(""https://github.com/google/gson/commit/933a3e515021e9d3dea4a18326479a42df353494"", ""933a3e515021e9d3dea4a18326479a42df353494"")",inder123@gmail.com,"Added code to ensure that circular reference situations with custom handlers are detected.
Split CircularReferenceTest out of ObjectTest.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testCircularSerialization
09/29/2009 15:43:31,"=HYPERLINK(""https://github.com/google/gson/commit/907082102dad9f93d20ccf4a53ea626d5dc559eb"", ""907082102dad9f93d20ccf4a53ea626d5dc559eb"")","=HYPERLINK(""https://github.com/google/gson/commit/933a3e515021e9d3dea4a18326479a42df353494"", ""933a3e515021e9d3dea4a18326479a42df353494"")",inder123@gmail.com,"Added code to ensure that circular reference situations with custom handlers are detected.
Split CircularReferenceTest out of ObjectTest.",gson/src/test/java/com/google/gson/functional/ObjectTest.java,ObjectTest.java,testSelfReferenceSerialization
09/30/2009 20:37:57,"=HYPERLINK(""https://github.com/google/gson/commit/8567fe6c101f2472662b9362b880a55fc3dcca15"", ""8567fe6c101f2472662b9362b880a55fc3dcca15"")","=HYPERLINK(""https://github.com/google/gson/commit/77c2c29316dd1d8fc7ea608dd6f67585bb6b006c"", ""77c2c29316dd1d8fc7ea608dd6f67585bb6b006c"")",inder123@gmail.com,Implementing code review comment from r428: Using Polymorphism for exclusion strategies for expose annotations.,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,ExposeAnnotationSerializationExclusionStrategyTest.java,setUp
09/30/2009 20:37:57,"=HYPERLINK(""https://github.com/google/gson/commit/8567fe6c101f2472662b9362b880a55fc3dcca15"", ""8567fe6c101f2472662b9362b880a55fc3dcca15"")","=HYPERLINK(""https://github.com/google/gson/commit/77c2c29316dd1d8fc7ea608dd6f67585bb6b006c"", ""77c2c29316dd1d8fc7ea608dd6f67585bb6b006c"")",inder123@gmail.com,Implementing code review comment from r428: Using Polymorphism for exclusion strategies for expose annotations.,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,ExposeAnnotationSerializationExclusionStrategyTest.java,testNeverSkipClasses
09/30/2009 20:37:57,"=HYPERLINK(""https://github.com/google/gson/commit/8567fe6c101f2472662b9362b880a55fc3dcca15"", ""8567fe6c101f2472662b9362b880a55fc3dcca15"")","=HYPERLINK(""https://github.com/google/gson/commit/77c2c29316dd1d8fc7ea608dd6f67585bb6b006c"", ""77c2c29316dd1d8fc7ea608dd6f67585bb6b006c"")",inder123@gmail.com,Implementing code review comment from r428: Using Polymorphism for exclusion strategies for expose annotations.,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,ExposeAnnotationSerializationExclusionStrategyTest.java,testSkipNonAnnotatedFields
09/30/2009 20:37:57,"=HYPERLINK(""https://github.com/google/gson/commit/8567fe6c101f2472662b9362b880a55fc3dcca15"", ""8567fe6c101f2472662b9362b880a55fc3dcca15"")","=HYPERLINK(""https://github.com/google/gson/commit/77c2c29316dd1d8fc7ea608dd6f67585bb6b006c"", ""77c2c29316dd1d8fc7ea608dd6f67585bb6b006c"")",inder123@gmail.com,Implementing code review comment from r428: Using Polymorphism for exclusion strategies for expose annotations.,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,ExposeAnnotationSerializationExclusionStrategyTest.java,testNeverSkipExposedAnnotatedFields
10/01/2009 12:46:28,"=HYPERLINK(""https://github.com/google/gson/commit/3b1056c097cd615c531c1ffd5ccb772d65d2e814"", ""3b1056c097cd615c531c1ffd5ccb772d65d2e814"")","=HYPERLINK(""https://github.com/google/gson/commit/8567fe6c101f2472662b9362b880a55fc3dcca15"", ""8567fe6c101f2472662b9362b880a55fc3dcca15"")",inder123@gmail.com,"Renamed JsonParserAsync to JsonStreamParser as that is a more appropriate name.
Added a TODO in JsonSerializationVisitor per code review of r453.",gson/src/test/java/com/google/gson/JsonParserAsyncTest.java,JsonStreamParserTest.java,testParseTwoStrings
10/01/2009 12:46:28,"=HYPERLINK(""https://github.com/google/gson/commit/3b1056c097cd615c531c1ffd5ccb772d65d2e814"", ""3b1056c097cd615c531c1ffd5ccb772d65d2e814"")","=HYPERLINK(""https://github.com/google/gson/commit/8567fe6c101f2472662b9362b880a55fc3dcca15"", ""8567fe6c101f2472662b9362b880a55fc3dcca15"")",inder123@gmail.com,"Renamed JsonParserAsync to JsonStreamParser as that is a more appropriate name.
Added a TODO in JsonSerializationVisitor per code review of r453.",gson/src/test/java/com/google/gson/JsonParserAsyncTest.java,JsonStreamParserTest.java,testIterator
10/06/2009 12:10:52,"=HYPERLINK(""https://github.com/google/gson/commit/536a968b32eede34554121f75c72b2a658fc442e"", ""536a968b32eede34554121f75c72b2a658fc442e"")","=HYPERLINK(""https://github.com/google/gson/commit/d416361ac58046af0bbba29ed1a6158f640ebc9e"", ""d416361ac58046af0bbba29ed1a6158f640ebc9e"")",inder123@gmail.com,"Disabled escaping of single quote since it is valid for JSON (though invalid for JavaScript).
Added null checks in contexts since the custom type adapter can pass nulls.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testSingleQuoteEscaping
10/06/2009 22:48:29,"=HYPERLINK(""https://github.com/google/gson/commit/c892738fbb6f6e433921ca82234ea2c77b189f68"", ""c892738fbb6f6e433921ca82234ea2c77b189f68"")","=HYPERLINK(""https://github.com/google/gson/commit/536a968b32eede34554121f75c72b2a658fc442e"", ""536a968b32eede34554121f75c72b2a658fc442e"")",joel.leitch@gmail.com,Re-enabling the ' (apostrophe) escaping with valid JSON escaping.,gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testSingleQuoteEscaping
10/08/2009 14:28:53,"=HYPERLINK(""https://github.com/google/gson/commit/b634804533ab68697b6f5414e8c93c3613850bf2"", ""b634804533ab68697b6f5414e8c93c3613850bf2"")","=HYPERLINK(""https://github.com/google/gson/commit/839b0c2f94746b89c08212b9d199a174ae2c407b"", ""839b0c2f94746b89c08212b9d199a174ae2c407b"")",inder123@gmail.com,"Ensured that a base class custom serializer is run when the type is specified explicitly during serialization. For all other situations, ensured that the actual type of the object is taken into consideration while serializing. First a custom handler corresponding to the actual type is looked up, then a custom handler for the specified type. 
Created some serialization specific tests regarding custom serializers. Revised some tests to use toJsonTree for better asserts instead of string matching.",gson/src/test/java/com/google/gson/common/TestTypes.java,TestTypes.java,BaseClass
10/08/2009 14:28:53,"=HYPERLINK(""https://github.com/google/gson/commit/b634804533ab68697b6f5414e8c93c3613850bf2"", ""b634804533ab68697b6f5414e8c93c3613850bf2"")","=HYPERLINK(""https://github.com/google/gson/commit/839b0c2f94746b89c08212b9d199a174ae2c407b"", ""839b0c2f94746b89c08212b9d199a174ae2c407b"")",inder123@gmail.com,"Ensured that a base class custom serializer is run when the type is specified explicitly during serialization. For all other situations, ensured that the actual type of the object is taken into consideration while serializing. First a custom handler corresponding to the actual type is looked up, then a custom handler for the specified type. 
Created some serialization specific tests regarding custom serializers. Revised some tests to use toJsonTree for better asserts instead of string matching.",gson/src/test/java/com/google/gson/common/TestTypes.java,TestTypes.java,BaseClass
10/08/2009 14:28:53,"=HYPERLINK(""https://github.com/google/gson/commit/b634804533ab68697b6f5414e8c93c3613850bf2"", ""b634804533ab68697b6f5414e8c93c3613850bf2"")","=HYPERLINK(""https://github.com/google/gson/commit/839b0c2f94746b89c08212b9d199a174ae2c407b"", ""839b0c2f94746b89c08212b9d199a174ae2c407b"")",inder123@gmail.com,"Ensured that a base class custom serializer is run when the type is specified explicitly during serialization. For all other situations, ensured that the actual type of the object is taken into consideration while serializing. First a custom handler corresponding to the actual type is looked up, then a custom handler for the specified type. 
Created some serialization specific tests regarding custom serializers. Revised some tests to use toJsonTree for better asserts instead of string matching.",gson/src/test/java/com/google/gson/common/TestTypes.java,TestTypes.java,getExpectedJson
10/08/2009 14:28:53,"=HYPERLINK(""https://github.com/google/gson/commit/b634804533ab68697b6f5414e8c93c3613850bf2"", ""b634804533ab68697b6f5414e8c93c3613850bf2"")","=HYPERLINK(""https://github.com/google/gson/commit/839b0c2f94746b89c08212b9d199a174ae2c407b"", ""839b0c2f94746b89c08212b9d199a174ae2c407b"")",inder123@gmail.com,"Ensured that a base class custom serializer is run when the type is specified explicitly during serialization. For all other situations, ensured that the actual type of the object is taken into consideration while serializing. First a custom handler corresponding to the actual type is looked up, then a custom handler for the specified type. 
Created some serialization specific tests regarding custom serializers. Revised some tests to use toJsonTree for better asserts instead of string matching.",gson/src/test/java/com/google/gson/common/TestTypes.java,TestTypes.java,SubClass
10/08/2009 14:28:53,"=HYPERLINK(""https://github.com/google/gson/commit/b634804533ab68697b6f5414e8c93c3613850bf2"", ""b634804533ab68697b6f5414e8c93c3613850bf2"")","=HYPERLINK(""https://github.com/google/gson/commit/839b0c2f94746b89c08212b9d199a174ae2c407b"", ""839b0c2f94746b89c08212b9d199a174ae2c407b"")",inder123@gmail.com,"Ensured that a base class custom serializer is run when the type is specified explicitly during serialization. For all other situations, ensured that the actual type of the object is taken into consideration while serializing. First a custom handler corresponding to the actual type is looked up, then a custom handler for the specified type. 
Created some serialization specific tests regarding custom serializers. Revised some tests to use toJsonTree for better asserts instead of string matching.",gson/src/test/java/com/google/gson/common/TestTypes.java,TestTypes.java,SubClass
10/08/2009 14:28:53,"=HYPERLINK(""https://github.com/google/gson/commit/b634804533ab68697b6f5414e8c93c3613850bf2"", ""b634804533ab68697b6f5414e8c93c3613850bf2"")","=HYPERLINK(""https://github.com/google/gson/commit/839b0c2f94746b89c08212b9d199a174ae2c407b"", ""839b0c2f94746b89c08212b9d199a174ae2c407b"")",inder123@gmail.com,"Ensured that a base class custom serializer is run when the type is specified explicitly during serialization. For all other situations, ensured that the actual type of the object is taken into consideration while serializing. First a custom handler corresponding to the actual type is looked up, then a custom handler for the specified type. 
Created some serialization specific tests regarding custom serializers. Revised some tests to use toJsonTree for better asserts instead of string matching.",gson/src/test/java/com/google/gson/common/TestTypes.java,TestTypes.java,getExpectedJson
10/09/2009 16:12:07,"=HYPERLINK(""https://github.com/google/gson/commit/d87d3f807fba95106ef0baf6432c83640dcd1f3d"", ""d87d3f807fba95106ef0baf6432c83640dcd1f3d"")","=HYPERLINK(""https://github.com/google/gson/commit/bc1e5c5c991fe6d06a5a0f6b775684ac91d289d3"", ""bc1e5c5c991fe6d06a5a0f6b775684ac91d289d3"")",joel.leitch@gmail.com,"Added functional tests for user defined exclusion strategy.
Added test to ensure empty/null properties are added for the JsonObject.",gson/src/test/java/com/google/gson/JsonObjectTest.java,JsonObjectTest.java,testAddingNullProperties
12/04/2009 12:15:00,"=HYPERLINK(""https://github.com/google/gson/commit/15fa10943c6e9db6d5db147efdec9640e86838a9"", ""15fa10943c6e9db6d5db147efdec9640e86838a9"")","=HYPERLINK(""https://github.com/google/gson/commit/ebf24fbda51cd8391791fb89499a6d732a36d835"", ""ebf24fbda51cd8391791fb89499a6d732a36d835"")",inder123@gmail.com,"Fixed serializers and deserializers for java.sql Date and Time to ensure that Date does't serialize time, and time does't serialize the date portion.",gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,assertEquals
08/18/2010 19:10:42,"=HYPERLINK(""https://github.com/google/gson/commit/dc60cb193123b2564bac0c2de9a998e4649fea30"", ""dc60cb193123b2564bac0c2de9a998e4649fea30"")","=HYPERLINK(""https://github.com/google/gson/commit/89c18452aee5242646ae7d5562fb73b4795f6c58"", ""89c18452aee5242646ae7d5562fb73b4795f6c58"")",inder123@gmail.com,"Made FieldNamingStrategy2 is package protected class.
Made type hierarchy adapter registration package protected.
Marked some of the classes final.
Minor changes in the performance tests.",gson/src/test/java/com/google/gson/metrics/PerformanceTest.java,PerformanceTest.java,testByteArraySerialization
08/18/2010 19:10:42,"=HYPERLINK(""https://github.com/google/gson/commit/dc60cb193123b2564bac0c2de9a998e4649fea30"", ""dc60cb193123b2564bac0c2de9a998e4649fea30"")","=HYPERLINK(""https://github.com/google/gson/commit/89c18452aee5242646ae7d5562fb73b4795f6c58"", ""89c18452aee5242646ae7d5562fb73b4795f6c58"")",inder123@gmail.com,"Made FieldNamingStrategy2 is package protected class.
Made type hierarchy adapter registration package protected.
Marked some of the classes final.
Minor changes in the performance tests.",gson/src/test/java/com/google/gson/metrics/PerformanceTest.java,PerformanceTest.java,testSerializeClasses
08/18/2010 19:10:42,"=HYPERLINK(""https://github.com/google/gson/commit/dc60cb193123b2564bac0c2de9a998e4649fea30"", ""dc60cb193123b2564bac0c2de9a998e4649fea30"")","=HYPERLINK(""https://github.com/google/gson/commit/89c18452aee5242646ae7d5562fb73b4795f6c58"", ""89c18452aee5242646ae7d5562fb73b4795f6c58"")",inder123@gmail.com,"Made FieldNamingStrategy2 is package protected class.
Made type hierarchy adapter registration package protected.
Marked some of the classes final.
Minor changes in the performance tests.",gson/src/test/java/com/google/gson/metrics/PerformanceTest.java,PerformanceTest.java,testDeserializeClasses
08/18/2010 19:10:42,"=HYPERLINK(""https://github.com/google/gson/commit/dc60cb193123b2564bac0c2de9a998e4649fea30"", ""dc60cb193123b2564bac0c2de9a998e4649fea30"")","=HYPERLINK(""https://github.com/google/gson/commit/89c18452aee5242646ae7d5562fb73b4795f6c58"", ""89c18452aee5242646ae7d5562fb73b4795f6c58"")",inder123@gmail.com,"Made FieldNamingStrategy2 is package protected class.
Made type hierarchy adapter registration package protected.
Marked some of the classes final.
Minor changes in the performance tests.",gson/src/test/java/com/google/gson/metrics/PerformanceTest.java,PerformanceTest.java,testSerializeExposedClasses
08/18/2010 19:10:42,"=HYPERLINK(""https://github.com/google/gson/commit/dc60cb193123b2564bac0c2de9a998e4649fea30"", ""dc60cb193123b2564bac0c2de9a998e4649fea30"")","=HYPERLINK(""https://github.com/google/gson/commit/89c18452aee5242646ae7d5562fb73b4795f6c58"", ""89c18452aee5242646ae7d5562fb73b4795f6c58"")",inder123@gmail.com,"Made FieldNamingStrategy2 is package protected class.
Made type hierarchy adapter registration package protected.
Marked some of the classes final.
Minor changes in the performance tests.",gson/src/test/java/com/google/gson/metrics/PerformanceTest.java,PerformanceTest.java,testDeserializeExposedClasses
08/27/2010 00:59:18,"=HYPERLINK(""https://github.com/google/gson/commit/7a7bbf754cfabbcb56d090b982bf4b128e15938d"", ""7a7bbf754cfabbcb56d090b982bf4b128e15938d"")","=HYPERLINK(""https://github.com/google/gson/commit/765a9f1ecdfaf96f3587f488385111c9d6a4927e"", ""765a9f1ecdfaf96f3587f488385111c9d6a4927e"")",jesse@swank.ca,"Use JsonReader internally rather than JsonParserJavacc.

For raw parsing (ie. new JsonParser().parse()) the parse time has improved substantially. For example, JsonParserJavacc parsed my 48KiB buzz feed in 4.8ms. JsonReader parses the same feed in 0.9ms.

http://microbenchmarks.appspot.com/run/limpbizkit@gmail.com/com.google.gson.GsonBenchmark/430001",gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,JsonReaderTest.java,testHighPrecisionLong
09/01/2010 19:15:23,"=HYPERLINK(""https://github.com/google/gson/commit/747e3c3051153779954e49b7dbc475daa678e1f4"", ""747e3c3051153779954e49b7dbc475daa678e1f4"")","=HYPERLINK(""https://github.com/google/gson/commit/ffdf0e70125420e4263f9d1f32a38a09b087f93c"", ""ffdf0e70125420e4263f9d1f32a38a09b087f93c"")",jesse@swank.ca,Support mixed streaming and databinding with new APIs.,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,PrettyPrintingTest.java,assertPrintMargin
10/27/2010 18:49:22,"=HYPERLINK(""https://github.com/google/gson/commit/2d7367364b866ad468f5b71316d92fd1490d9381"", ""2d7367364b866ad468f5b71316d92fd1490d9381"")","=HYPERLINK(""https://github.com/google/gson/commit/6feb325044240ba6ff15aceee2b3b091fa278d4f"", ""6feb325044240ba6ff15aceee2b3b091fa278d4f"")",inder123@gmail.com,"Added additional functional tests involving complex protocol buffers, and protos with repeated fields.
Moved all the functional tests under a functional package.",proto/src/test/java/com/google/gson/protobuf/FunctionalTest.java,ProtosWithPrimitiveTypesTest.java,setUp
10/27/2010 18:49:22,"=HYPERLINK(""https://github.com/google/gson/commit/2d7367364b866ad468f5b71316d92fd1490d9381"", ""2d7367364b866ad468f5b71316d92fd1490d9381"")","=HYPERLINK(""https://github.com/google/gson/commit/6feb325044240ba6ff15aceee2b3b091fa278d4f"", ""6feb325044240ba6ff15aceee2b3b091fa278d4f"")",inder123@gmail.com,"Added additional functional tests involving complex protocol buffers, and protos with repeated fields.
Moved all the functional tests under a functional package.",proto/src/test/java/com/google/gson/protobuf/FunctionalTest.java,ProtosWithPrimitiveTypesTest.java,testSerializeEmptyProto
10/27/2010 18:49:22,"=HYPERLINK(""https://github.com/google/gson/commit/2d7367364b866ad468f5b71316d92fd1490d9381"", ""2d7367364b866ad468f5b71316d92fd1490d9381"")","=HYPERLINK(""https://github.com/google/gson/commit/6feb325044240ba6ff15aceee2b3b091fa278d4f"", ""6feb325044240ba6ff15aceee2b3b091fa278d4f"")",inder123@gmail.com,"Added additional functional tests involving complex protocol buffers, and protos with repeated fields.
Moved all the functional tests under a functional package.",proto/src/test/java/com/google/gson/protobuf/FunctionalTest.java,ProtosWithPrimitiveTypesTest.java,testDeserializeEmptyProto
10/27/2010 18:49:22,"=HYPERLINK(""https://github.com/google/gson/commit/2d7367364b866ad468f5b71316d92fd1490d9381"", ""2d7367364b866ad468f5b71316d92fd1490d9381"")","=HYPERLINK(""https://github.com/google/gson/commit/6feb325044240ba6ff15aceee2b3b091fa278d4f"", ""6feb325044240ba6ff15aceee2b3b091fa278d4f"")",inder123@gmail.com,"Added additional functional tests involving complex protocol buffers, and protos with repeated fields.
Moved all the functional tests under a functional package.",proto/src/test/java/com/google/gson/protobuf/FunctionalTest.java,ProtosWithPrimitiveTypesTest.java,testSerializeProto
10/27/2010 18:49:22,"=HYPERLINK(""https://github.com/google/gson/commit/2d7367364b866ad468f5b71316d92fd1490d9381"", ""2d7367364b866ad468f5b71316d92fd1490d9381"")","=HYPERLINK(""https://github.com/google/gson/commit/6feb325044240ba6ff15aceee2b3b091fa278d4f"", ""6feb325044240ba6ff15aceee2b3b091fa278d4f"")",inder123@gmail.com,"Added additional functional tests involving complex protocol buffers, and protos with repeated fields.
Moved all the functional tests under a functional package.",proto/src/test/java/com/google/gson/protobuf/FunctionalTest.java,ProtosWithPrimitiveTypesTest.java,testDeserializeProto
11/01/2010 17:57:39,"=HYPERLINK(""https://github.com/google/gson/commit/43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"", ""43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"")","=HYPERLINK(""https://github.com/google/gson/commit/abe244c099b8c0f0e4c33921a55b27755564713a"", ""abe244c099b8c0f0e4c33921a55b27755564713a"")",inder123@gmail.com,Removed JavaCC parser definition and its generated classes.,gson/src/test/java/com/google/gson/StringUnmarshallerTest.java,StringUnmarshallerTest.java,testCtrlN
11/01/2010 17:57:39,"=HYPERLINK(""https://github.com/google/gson/commit/43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"", ""43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"")","=HYPERLINK(""https://github.com/google/gson/commit/abe244c099b8c0f0e4c33921a55b27755564713a"", ""abe244c099b8c0f0e4c33921a55b27755564713a"")",inder123@gmail.com,Removed JavaCC parser definition and its generated classes.,gson/src/test/java/com/google/gson/StringUnmarshallerTest.java,StringUnmarshallerTest.java,testCtrlR
11/01/2010 17:57:39,"=HYPERLINK(""https://github.com/google/gson/commit/43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"", ""43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"")","=HYPERLINK(""https://github.com/google/gson/commit/abe244c099b8c0f0e4c33921a55b27755564713a"", ""abe244c099b8c0f0e4c33921a55b27755564713a"")",inder123@gmail.com,Removed JavaCC parser definition and its generated classes.,gson/src/test/java/com/google/gson/StringUnmarshallerTest.java,StringUnmarshallerTest.java,testCtrlT
11/01/2010 17:57:39,"=HYPERLINK(""https://github.com/google/gson/commit/43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"", ""43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"")","=HYPERLINK(""https://github.com/google/gson/commit/abe244c099b8c0f0e4c33921a55b27755564713a"", ""abe244c099b8c0f0e4c33921a55b27755564713a"")",inder123@gmail.com,Removed JavaCC parser definition and its generated classes.,gson/src/test/java/com/google/gson/StringUnmarshallerTest.java,StringUnmarshallerTest.java,testBackSpace
11/01/2010 17:57:39,"=HYPERLINK(""https://github.com/google/gson/commit/43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"", ""43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"")","=HYPERLINK(""https://github.com/google/gson/commit/abe244c099b8c0f0e4c33921a55b27755564713a"", ""abe244c099b8c0f0e4c33921a55b27755564713a"")",inder123@gmail.com,Removed JavaCC parser definition and its generated classes.,gson/src/test/java/com/google/gson/StringUnmarshallerTest.java,StringUnmarshallerTest.java,testFormFeed
11/01/2010 17:57:39,"=HYPERLINK(""https://github.com/google/gson/commit/43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"", ""43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"")","=HYPERLINK(""https://github.com/google/gson/commit/abe244c099b8c0f0e4c33921a55b27755564713a"", ""abe244c099b8c0f0e4c33921a55b27755564713a"")",inder123@gmail.com,Removed JavaCC parser definition and its generated classes.,gson/src/test/java/com/google/gson/StringUnmarshallerTest.java,StringUnmarshallerTest.java,testSingleQuote
11/01/2010 17:57:39,"=HYPERLINK(""https://github.com/google/gson/commit/43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"", ""43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"")","=HYPERLINK(""https://github.com/google/gson/commit/abe244c099b8c0f0e4c33921a55b27755564713a"", ""abe244c099b8c0f0e4c33921a55b27755564713a"")",inder123@gmail.com,Removed JavaCC parser definition and its generated classes.,gson/src/test/java/com/google/gson/StringUnmarshallerTest.java,StringUnmarshallerTest.java,testSingleQuoteEscaped
11/01/2010 17:57:39,"=HYPERLINK(""https://github.com/google/gson/commit/43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"", ""43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"")","=HYPERLINK(""https://github.com/google/gson/commit/abe244c099b8c0f0e4c33921a55b27755564713a"", ""abe244c099b8c0f0e4c33921a55b27755564713a"")",inder123@gmail.com,Removed JavaCC parser definition and its generated classes.,gson/src/test/java/com/google/gson/StringUnmarshallerTest.java,StringUnmarshallerTest.java,testDoubleQuote
11/01/2010 17:57:39,"=HYPERLINK(""https://github.com/google/gson/commit/43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"", ""43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"")","=HYPERLINK(""https://github.com/google/gson/commit/abe244c099b8c0f0e4c33921a55b27755564713a"", ""abe244c099b8c0f0e4c33921a55b27755564713a"")",inder123@gmail.com,Removed JavaCC parser definition and its generated classes.,gson/src/test/java/com/google/gson/StringUnmarshallerTest.java,StringUnmarshallerTest.java,testDoubleQuoteEscaped
11/01/2010 17:57:39,"=HYPERLINK(""https://github.com/google/gson/commit/43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"", ""43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"")","=HYPERLINK(""https://github.com/google/gson/commit/abe244c099b8c0f0e4c33921a55b27755564713a"", ""abe244c099b8c0f0e4c33921a55b27755564713a"")",inder123@gmail.com,Removed JavaCC parser definition and its generated classes.,gson/src/test/java/com/google/gson/StringUnmarshallerTest.java,StringUnmarshallerTest.java,testBackslash
11/01/2010 17:57:39,"=HYPERLINK(""https://github.com/google/gson/commit/43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"", ""43f2a0012b5fb9c94a5e1bb926034e136a3a8dfb"")","=HYPERLINK(""https://github.com/google/gson/commit/abe244c099b8c0f0e4c33921a55b27755564713a"", ""abe244c099b8c0f0e4c33921a55b27755564713a"")",inder123@gmail.com,Removed JavaCC parser definition and its generated classes.,gson/src/test/java/com/google/gson/StringUnmarshallerTest.java,StringUnmarshallerTest.java,testUnicodeString
11/03/2010 11:16:17,"=HYPERLINK(""https://github.com/google/gson/commit/44edfcfb33205a71c4c37722e7311c184df6c6f2"", ""44edfcfb33205a71c4c37722e7311c184df6c6f2"")","=HYPERLINK(""https://github.com/google/gson/commit/83539c534c3cade5a05e633944420615b0b478ed"", ""83539c534c3cade5a05e633944420615b0b478ed"")",inder123@gmail.com,"Added version support in RestClient. Revised CallPath to extract version number specified in the path.
Moved version tests in CallPathProviderTest to CallPathTest.",wsf/src/test/java/com/google/gson/wsf/inject/CallPathProviderTest.java,CallPathTest.java,testVersionIsSkipped
11/03/2010 11:16:17,"=HYPERLINK(""https://github.com/google/gson/commit/44edfcfb33205a71c4c37722e7311c184df6c6f2"", ""44edfcfb33205a71c4c37722e7311c184df6c6f2"")","=HYPERLINK(""https://github.com/google/gson/commit/83539c534c3cade5a05e633944420615b0b478ed"", ""83539c534c3cade5a05e633944420615b0b478ed"")",inder123@gmail.com,"Added version support in RestClient. Revised CallPath to extract version number specified in the path.
Moved version tests in CallPathProviderTest to CallPathTest.",wsf/src/test/java/com/google/gson/wsf/inject/CallPathProviderTest.java,CallPathTest.java,testVersionNotPresent
11/05/2010 17:57:44,"=HYPERLINK(""https://github.com/google/gson/commit/6a951b427e2f0b37597da343401029312ff8288c"", ""6a951b427e2f0b37597da343401029312ff8288c"")","=HYPERLINK(""https://github.com/google/gson/commit/f6a332971f1f27be44fc40d2e8d9b8a34017f776"", ""f6a332971f1f27be44fc40d2e8d9b8a34017f776"")",joel.leitch@gmail.com,"Adding new tests (two of which are disabled, but prepping for 1.7).",gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,TypeVariableTest.java,testSingle
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/rest/definition/IdTest.java,IdTest.java,testRawTypeNotEqualToParameterizedOfConcreteType
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/rest/definition/IdTest.java,IdTest.java,testRawTypeEqualToParameterizedOfWildcardType
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/rest/definition/IdTest.java,IdTest.java,testStaticEquals
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/rest/definition/IdTypeAdapterTest.java,IdTypeAdapterTest.java,setUp
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/rest/definition/IdTypeAdapterTest.java,IdTypeAdapterTest.java,testSerializeId
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/rest/definition/IdTypeAdapterTest.java,IdTypeAdapterTest.java,testDeserializeId
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/rest/definition/IdTypeAdapterTest.java,IdTypeAdapterTest.java,Student
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/rest/definition/IdTypeAdapterTest.java,IdTypeAdapterTest.java,Student
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/rest/definition/IdTypeAdapterTest.java,IdTypeAdapterTest.java,Course
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/rest/definition/IdTypeAdapterTest.java,IdTypeAdapterTest.java,Course
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/rest/definition/IdTypeAdapterTest.java,IdTypeAdapterTest.java,getId
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/rest/definition/IdTypeAdapterTest.java,IdTypeAdapterTest.java,getStudents
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/rest/definition/IdTypeAdapterTest.java,IdTypeAdapterTest.java,Assignment
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/rest/definition/IdTypeAdapterTest.java,IdTypeAdapterTest.java,Assignment
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/rest/definition/IdTypeAdapterTest.java,IdTypeAdapterTest.java,createList
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/webservice/definition/CallPathTest.java,CallPathTest.java,testVersionIsSkipped
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/webservice/definition/CallPathTest.java,CallPathTest.java,testVersionNotPresent
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/webservice/definition/CallPathTest.java,CallPathTest.java,testResourceIdPresent
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/webservice/definition/CallPathTest.java,CallPathTest.java,testResourceIdWithEndSlashPresent
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/webservice/definition/CallPathTest.java,CallPathTest.java,testVersionAndResourceIdPresent
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/webservice/definition/CallPathTest.java,CallPathTest.java,testNullPath
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/webservice/definition/CallPathTest.java,CallPathTest.java,testEmptyPath
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/webservice/definition/CallPathTest.java,CallPathTest.java,testWhiteSpacePath
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/webservice/definition/TypedKeyTest.java,TypedKeyTest.java,testEqualsForSameName
11/12/2010 11:12:46,"=HYPERLINK(""https://github.com/google/gson/commit/822d1bc75e70538f01638955bf766316e416499c"", ""822d1bc75e70538f01638955bf766316e416499c"")","=HYPERLINK(""https://github.com/google/gson/commit/7d055fcb517a25e3cf141a867ec2b53264c40a19"", ""7d055fcb517a25e3cf141a867ec2b53264c40a19"")",inder123@gmail.com,moved contents of wsdef to greaze-definition.,wsdef/src/test/java/com/google/gson/webservice/definition/TypedKeyTest.java,TypedKeyTest.java,testEqualsFailsForDifferentClasses
11/16/2010 16:14:40,"=HYPERLINK(""https://github.com/google/gson/commit/0a3f5fa801954b07d0041d8a7dc6f87dc210a470"", ""0a3f5fa801954b07d0041d8a7dc6f87dc210a470"")","=HYPERLINK(""https://github.com/google/gson/commit/279649986eb524666e8c75f0d0b4ad737a9be906"", ""279649986eb524666e8c75f0d0b4ad737a9be906"")",joel.leitch@gmail.com,"Required strings to be quoted even in lenient mode.

As far as Inderjeet and I can tell, this is consistent with Gson 1.5.",gson/src/test/java/com/google/gson/JsonParserTest.java,JsonParserTest.java,testParseUnquotedStringSentence
11/16/2010 16:14:40,"=HYPERLINK(""https://github.com/google/gson/commit/0a3f5fa801954b07d0041d8a7dc6f87dc210a470"", ""0a3f5fa801954b07d0041d8a7dc6f87dc210a470"")","=HYPERLINK(""https://github.com/google/gson/commit/279649986eb524666e8c75f0d0b4ad737a9be906"", ""279649986eb524666e8c75f0d0b4ad737a9be906"")",joel.leitch@gmail.com,"Required strings to be quoted even in lenient mode.

As far as Inderjeet and I can tell, this is consistent with Gson 1.5.",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testUnquotedStringDeserialization
11/16/2010 16:18:28,"=HYPERLINK(""https://github.com/google/gson/commit/56344cf06786bf8cd031933a5fc39eeacde7d942"", ""56344cf06786bf8cd031933a5fc39eeacde7d942"")","=HYPERLINK(""https://github.com/google/gson/commit/0a3f5fa801954b07d0041d8a7dc6f87dc210a470"", ""0a3f5fa801954b07d0041d8a7dc6f87dc210a470"")",joel.leitch@gmail.com,Remove duplicate test.,gson/src/test/java/com/google/gson/JsonParserTest.java,JsonParserTest.java,testParseSingleWordFails
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,TypeInfoArrayTest.java,testArray
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,TypeInfoArrayTest.java,testArrayOfArrays
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,TypeInfoArrayTest.java,testParameterizedArray
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,TypeInfoArrayTest.java,testParameterizedArrayOfArrays
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,TypeInfoArrayTest.java,testNestedParameterizedArray
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,TypeInfoArrayTest.java,testPrimitiveArray
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,TypeInfoArrayTest.java,testStringArray
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,TypeInfoArrayTest.java,testPrimitiveArrayType
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,TypeInfoArrayTest.java,testStringArrayType
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,TypeInfoArrayTest.java,testArrayAsParameterizedTypes
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,setUp
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testSimpleField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testEnumField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testParameterizedTypeField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testNestedParameterizedTypeField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testGenericArrayTypeField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testTypeVariableField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testTypeVariableArrayField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testMutliDimensionalTypeVariableArrayField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testParameterizedTypeVariableField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testNestedParameterizedTypeVariableField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testParameterizedTypeVariableArrayField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testWildcardField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testArrayOfWildcardField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testListStringWildcardField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testArrayOfListStringWildcardField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testListTypeVariableWildcardField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,TypeInfoFactoryTest.java,testArrayOfListTypeVariableWildcardField
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoMapTest.java,TypeInfoMapTest.java,testInvalidConstruction
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoMapTest.java,TypeInfoMapTest.java,testNonMapConstruction
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoMapTest.java,TypeInfoMapTest.java,testBasicGetters
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoMapTest.java,TypeInfoMapTest.java,testMapImplementations
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoTest.java,TypeInfoTest.java,testPrimitive
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoTest.java,TypeInfoTest.java,testPrimitiveWrapper
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoTest.java,TypeInfoTest.java,testString
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoTest.java,TypeInfoTest.java,testObject
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoTest.java,TypeInfoTest.java,testPrimitiveType
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoTest.java,TypeInfoTest.java,testObjectType
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoTest.java,TypeInfoTest.java,testParameterizedTypes
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoTest.java,TypeInfoTest.java,testGenericizedGenericType
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeInfoTest.java,TypeInfoTest.java,testStrangeTypeParameters
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeUtilsTest.java,TypeUtilsTest.java,testGetActualTypeForFirstTypeVariable
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeUtilsTest.java,TypeUtilsTest.java,testIsArrayForNonArrayClasses
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeUtilsTest.java,TypeUtilsTest.java,testIsArrayForArrayClasses
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeUtilsTest.java,TypeUtilsTest.java,testToRawClassForNonGenericClasses
12/03/2010 02:07:13,"=HYPERLINK(""https://github.com/google/gson/commit/d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"", ""d1ddab2e6ffcd938ac0d133fd46caf5fb2417009"")","=HYPERLINK(""https://github.com/google/gson/commit/faa5464e848ab9c6afc46e38eb416e7a156a23e1"", ""faa5464e848ab9c6afc46e38eb416e7a156a23e1"")",jesse@swank.ca,"Swap out GSON's type mechanics with the Type resolution code from Guice.

The most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.

abstract class Foo<A, B> {
   A a;
   B b;
   List<A> list;
   Map<A, List<B>> map;
}
class RealFoo extends Foo<String, Integer> {...}

This is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we're exposing more than we need to!",gson/src/test/java/com/google/gson/TypeUtilsTest.java,TypeUtilsTest.java,testToRawClassForGenericClasses
01/10/2011 16:47:36,"=HYPERLINK(""https://github.com/google/gson/commit/0e5f6704cd5f438c55efe1fcf70c857f95f8190b"", ""0e5f6704cd5f438c55efe1fcf70c857f95f8190b"")","=HYPERLINK(""https://github.com/google/gson/commit/25f0014305b8418da278629ee9726f9b3aa79b48"", ""25f0014305b8418da278629ee9726f9b3aa79b48"")",inder123@gmail.com,Added sonatype oss as parent for the pom. Diabled repository management with-in POM per instructions at: https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,TypeTokenTest.java,testIsAssignableFromRawTypes
01/10/2011 16:47:36,"=HYPERLINK(""https://github.com/google/gson/commit/0e5f6704cd5f438c55efe1fcf70c857f95f8190b"", ""0e5f6704cd5f438c55efe1fcf70c857f95f8190b"")","=HYPERLINK(""https://github.com/google/gson/commit/25f0014305b8418da278629ee9726f9b3aa79b48"", ""25f0014305b8418da278629ee9726f9b3aa79b48"")",inder123@gmail.com,Added sonatype oss as parent for the pom. Diabled repository management with-in POM per instructions at: https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,TypeTokenTest.java,testIsAssignableFromWithTypeParameters
01/10/2011 16:47:36,"=HYPERLINK(""https://github.com/google/gson/commit/0e5f6704cd5f438c55efe1fcf70c857f95f8190b"", ""0e5f6704cd5f438c55efe1fcf70c857f95f8190b"")","=HYPERLINK(""https://github.com/google/gson/commit/25f0014305b8418da278629ee9726f9b3aa79b48"", ""25f0014305b8418da278629ee9726f9b3aa79b48"")",inder123@gmail.com,Added sonatype oss as parent for the pom. Diabled repository management with-in POM per instructions at: https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,TypeTokenTest.java,testIsAssignableFromWithBasicWildcards
01/10/2011 16:47:36,"=HYPERLINK(""https://github.com/google/gson/commit/0e5f6704cd5f438c55efe1fcf70c857f95f8190b"", ""0e5f6704cd5f438c55efe1fcf70c857f95f8190b"")","=HYPERLINK(""https://github.com/google/gson/commit/25f0014305b8418da278629ee9726f9b3aa79b48"", ""25f0014305b8418da278629ee9726f9b3aa79b48"")",inder123@gmail.com,Added sonatype oss as parent for the pom. Diabled repository management with-in POM per instructions at: https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,TypeTokenTest.java,testIsAssignableFromWithNestedWildcards
01/10/2011 16:47:42,"=HYPERLINK(""https://github.com/google/gson/commit/3926afbd3022d8939e279cbd2a9c83aa4984f160"", ""3926afbd3022d8939e279cbd2a9c83aa4984f160"")","=HYPERLINK(""https://github.com/google/gson/commit/0e5f6704cd5f438c55efe1fcf70c857f95f8190b"", ""0e5f6704cd5f438c55efe1fcf70c857f95f8190b"")",joel.leitch@gmail.com,Removing unused files with the new Types class.,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,GenericArrayTypeTest.java,setUp
01/10/2011 16:47:42,"=HYPERLINK(""https://github.com/google/gson/commit/3926afbd3022d8939e279cbd2a9c83aa4984f160"", ""3926afbd3022d8939e279cbd2a9c83aa4984f160"")","=HYPERLINK(""https://github.com/google/gson/commit/0e5f6704cd5f438c55efe1fcf70c857f95f8190b"", ""0e5f6704cd5f438c55efe1fcf70c857f95f8190b"")",joel.leitch@gmail.com,Removing unused files with the new Types class.,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,GenericArrayTypeTest.java,testOurTypeFunctionality
01/10/2011 16:47:42,"=HYPERLINK(""https://github.com/google/gson/commit/3926afbd3022d8939e279cbd2a9c83aa4984f160"", ""3926afbd3022d8939e279cbd2a9c83aa4984f160"")","=HYPERLINK(""https://github.com/google/gson/commit/0e5f6704cd5f438c55efe1fcf70c857f95f8190b"", ""0e5f6704cd5f438c55efe1fcf70c857f95f8190b"")",joel.leitch@gmail.com,Removing unused files with the new Types class.,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,GenericArrayTypeTest.java,testNotEquals
01/10/2011 16:47:42,"=HYPERLINK(""https://github.com/google/gson/commit/3926afbd3022d8939e279cbd2a9c83aa4984f160"", ""3926afbd3022d8939e279cbd2a9c83aa4984f160"")","=HYPERLINK(""https://github.com/google/gson/commit/0e5f6704cd5f438c55efe1fcf70c857f95f8190b"", ""0e5f6704cd5f438c55efe1fcf70c857f95f8190b"")",joel.leitch@gmail.com,Removing unused files with the new Types class.,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,ParameterizedTypeTest.java,setUp
01/10/2011 16:47:42,"=HYPERLINK(""https://github.com/google/gson/commit/3926afbd3022d8939e279cbd2a9c83aa4984f160"", ""3926afbd3022d8939e279cbd2a9c83aa4984f160"")","=HYPERLINK(""https://github.com/google/gson/commit/0e5f6704cd5f438c55efe1fcf70c857f95f8190b"", ""0e5f6704cd5f438c55efe1fcf70c857f95f8190b"")",joel.leitch@gmail.com,Removing unused files with the new Types class.,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,ParameterizedTypeTest.java,testOurTypeFunctionality
01/10/2011 16:47:42,"=HYPERLINK(""https://github.com/google/gson/commit/3926afbd3022d8939e279cbd2a9c83aa4984f160"", ""3926afbd3022d8939e279cbd2a9c83aa4984f160"")","=HYPERLINK(""https://github.com/google/gson/commit/0e5f6704cd5f438c55efe1fcf70c857f95f8190b"", ""0e5f6704cd5f438c55efe1fcf70c857f95f8190b"")",joel.leitch@gmail.com,Removing unused files with the new Types class.,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,ParameterizedTypeTest.java,testNotEquals
01/19/2011 16:24:10,"=HYPERLINK(""https://github.com/google/gson/commit/a526da7cdd2529eb3d13cfbd35664ee82a02d565"", ""a526da7cdd2529eb3d13cfbd35664ee82a02d565"")","=HYPERLINK(""https://github.com/google/gson/commit/edc71130c44e82fec4a3b4712f44b1912d374036"", ""edc71130c44e82fec4a3b4712f44b1912d374036"")",jesse@swank.ca,"Tests that demonstrate that type variables work.

Fixes issue 168.",gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,TypeVariableTest.java,testAdvancedTypeVariables
01/19/2011 17:28:28,"=HYPERLINK(""https://github.com/google/gson/commit/2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"", ""2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"")","=HYPERLINK(""https://github.com/google/gson/commit/fd0f526fb06b6b8ac929e383894d2ce9508dbd36"", ""fd0f526fb06b6b8ac929e383894d2ce9508dbd36"")",inder123@gmail.com,"Registering default type hierarchy adapters first and allow users to override them.
This allows the default EnumTypeAdapter to be overridden for a specific hierachy adapter for Enum with anonymized sub-classes.",gson/src/test/java/com/google/gson/functional/EnumTest.java,EnumTest.java,testEnumSubclassWithRegisteredTypeAdapter
01/19/2011 17:28:28,"=HYPERLINK(""https://github.com/google/gson/commit/2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"", ""2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"")","=HYPERLINK(""https://github.com/google/gson/commit/fd0f526fb06b6b8ac929e383894d2ce9508dbd36"", ""fd0f526fb06b6b8ac929e383894d2ce9508dbd36"")",inder123@gmail.com,"Registering default type hierarchy adapters first and allow users to override them.
This allows the default EnumTypeAdapter to be overridden for a specific hierachy adapter for Enum with anonymized sub-classes.",gson/src/test/java/com/google/gson/functional/EnumTest.java,EnumTest.java,assertRoshambo
01/22/2011 16:15:06,"=HYPERLINK(""https://github.com/google/gson/commit/b883f8f4aaa7ae906b4298cc43223060495fc6ff"", ""b883f8f4aaa7ae906b4298cc43223060495fc6ff"")","=HYPERLINK(""https://github.com/google/gson/commit/2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"", ""2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"")",joel.leitch@gmail.com,"Add new ""Mode"" enum and carry mode through Gson so exclusion strategies know whether it is currently serializing or deserializing.

Deprecate old ExclusionStrategy code since this new approach is more powerful.",gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,ExposeAnnotationDeserializationExclusionStrategyTest.java,setUp
01/22/2011 16:15:06,"=HYPERLINK(""https://github.com/google/gson/commit/b883f8f4aaa7ae906b4298cc43223060495fc6ff"", ""b883f8f4aaa7ae906b4298cc43223060495fc6ff"")","=HYPERLINK(""https://github.com/google/gson/commit/2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"", ""2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"")",joel.leitch@gmail.com,"Add new ""Mode"" enum and carry mode through Gson so exclusion strategies know whether it is currently serializing or deserializing.

Deprecate old ExclusionStrategy code since this new approach is more powerful.",gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,ExposeAnnotationDeserializationExclusionStrategyTest.java,testNeverSkipClasses
01/22/2011 16:15:06,"=HYPERLINK(""https://github.com/google/gson/commit/b883f8f4aaa7ae906b4298cc43223060495fc6ff"", ""b883f8f4aaa7ae906b4298cc43223060495fc6ff"")","=HYPERLINK(""https://github.com/google/gson/commit/2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"", ""2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"")",joel.leitch@gmail.com,"Add new ""Mode"" enum and carry mode through Gson so exclusion strategies know whether it is currently serializing or deserializing.

Deprecate old ExclusionStrategy code since this new approach is more powerful.",gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,ExposeAnnotationDeserializationExclusionStrategyTest.java,testSkipNonAnnotatedFields
01/22/2011 16:15:06,"=HYPERLINK(""https://github.com/google/gson/commit/b883f8f4aaa7ae906b4298cc43223060495fc6ff"", ""b883f8f4aaa7ae906b4298cc43223060495fc6ff"")","=HYPERLINK(""https://github.com/google/gson/commit/2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"", ""2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"")",joel.leitch@gmail.com,"Add new ""Mode"" enum and carry mode through Gson so exclusion strategies know whether it is currently serializing or deserializing.

Deprecate old ExclusionStrategy code since this new approach is more powerful.",gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,ExposeAnnotationDeserializationExclusionStrategyTest.java,testSkipExplicitlySkippedFields
01/22/2011 16:15:06,"=HYPERLINK(""https://github.com/google/gson/commit/b883f8f4aaa7ae906b4298cc43223060495fc6ff"", ""b883f8f4aaa7ae906b4298cc43223060495fc6ff"")","=HYPERLINK(""https://github.com/google/gson/commit/2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"", ""2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"")",joel.leitch@gmail.com,"Add new ""Mode"" enum and carry mode through Gson so exclusion strategies know whether it is currently serializing or deserializing.

Deprecate old ExclusionStrategy code since this new approach is more powerful.",gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,ExposeAnnotationDeserializationExclusionStrategyTest.java,testNeverSkipExposedAnnotatedFields
01/22/2011 16:15:06,"=HYPERLINK(""https://github.com/google/gson/commit/b883f8f4aaa7ae906b4298cc43223060495fc6ff"", ""b883f8f4aaa7ae906b4298cc43223060495fc6ff"")","=HYPERLINK(""https://github.com/google/gson/commit/2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"", ""2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"")",joel.leitch@gmail.com,"Add new ""Mode"" enum and carry mode through Gson so exclusion strategies know whether it is currently serializing or deserializing.

Deprecate old ExclusionStrategy code since this new approach is more powerful.",gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,ExposeAnnotationDeserializationExclusionStrategyTest.java,testNeverSkipExplicitlyExposedAnnotatedFields
01/22/2011 16:15:06,"=HYPERLINK(""https://github.com/google/gson/commit/b883f8f4aaa7ae906b4298cc43223060495fc6ff"", ""b883f8f4aaa7ae906b4298cc43223060495fc6ff"")","=HYPERLINK(""https://github.com/google/gson/commit/2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"", ""2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"")",joel.leitch@gmail.com,"Add new ""Mode"" enum and carry mode through Gson so exclusion strategies know whether it is currently serializing or deserializing.

Deprecate old ExclusionStrategy code since this new approach is more powerful.",gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,ExposeAnnotationSerializationExclusionStrategyTest.java,setUp
01/22/2011 16:15:06,"=HYPERLINK(""https://github.com/google/gson/commit/b883f8f4aaa7ae906b4298cc43223060495fc6ff"", ""b883f8f4aaa7ae906b4298cc43223060495fc6ff"")","=HYPERLINK(""https://github.com/google/gson/commit/2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"", ""2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"")",joel.leitch@gmail.com,"Add new ""Mode"" enum and carry mode through Gson so exclusion strategies know whether it is currently serializing or deserializing.

Deprecate old ExclusionStrategy code since this new approach is more powerful.",gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,ExposeAnnotationSerializationExclusionStrategyTest.java,testNeverSkipClasses
01/22/2011 16:15:06,"=HYPERLINK(""https://github.com/google/gson/commit/b883f8f4aaa7ae906b4298cc43223060495fc6ff"", ""b883f8f4aaa7ae906b4298cc43223060495fc6ff"")","=HYPERLINK(""https://github.com/google/gson/commit/2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"", ""2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"")",joel.leitch@gmail.com,"Add new ""Mode"" enum and carry mode through Gson so exclusion strategies know whether it is currently serializing or deserializing.

Deprecate old ExclusionStrategy code since this new approach is more powerful.",gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,ExposeAnnotationSerializationExclusionStrategyTest.java,testSkipNonAnnotatedFields
01/22/2011 16:15:06,"=HYPERLINK(""https://github.com/google/gson/commit/b883f8f4aaa7ae906b4298cc43223060495fc6ff"", ""b883f8f4aaa7ae906b4298cc43223060495fc6ff"")","=HYPERLINK(""https://github.com/google/gson/commit/2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"", ""2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"")",joel.leitch@gmail.com,"Add new ""Mode"" enum and carry mode through Gson so exclusion strategies know whether it is currently serializing or deserializing.

Deprecate old ExclusionStrategy code since this new approach is more powerful.",gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,ExposeAnnotationSerializationExclusionStrategyTest.java,testSkipExplicitlySkippedFields
01/22/2011 16:15:06,"=HYPERLINK(""https://github.com/google/gson/commit/b883f8f4aaa7ae906b4298cc43223060495fc6ff"", ""b883f8f4aaa7ae906b4298cc43223060495fc6ff"")","=HYPERLINK(""https://github.com/google/gson/commit/2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"", ""2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"")",joel.leitch@gmail.com,"Add new ""Mode"" enum and carry mode through Gson so exclusion strategies know whether it is currently serializing or deserializing.

Deprecate old ExclusionStrategy code since this new approach is more powerful.",gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,ExposeAnnotationSerializationExclusionStrategyTest.java,testNeverSkipExposedAnnotatedFields
01/22/2011 16:15:06,"=HYPERLINK(""https://github.com/google/gson/commit/b883f8f4aaa7ae906b4298cc43223060495fc6ff"", ""b883f8f4aaa7ae906b4298cc43223060495fc6ff"")","=HYPERLINK(""https://github.com/google/gson/commit/2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"", ""2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d"")",joel.leitch@gmail.com,"Add new ""Mode"" enum and carry mode through Gson so exclusion strategies know whether it is currently serializing or deserializing.

Deprecate old ExclusionStrategy code since this new approach is more powerful.",gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,ExposeAnnotationSerializationExclusionStrategyTest.java,testNeverSkipExplicitlyExposedAnnotatedFields
02/03/2011 21:09:41,"=HYPERLINK(""https://github.com/google/gson/commit/114633fbf933c3085a189d20c62fadae0398fb39"", ""114633fbf933c3085a189d20c62fadae0398fb39"")","=HYPERLINK(""https://github.com/google/gson/commit/ea48a1debfaa863d29dac8ddee9a4dd5a55ed785"", ""ea48a1debfaa863d29dac8ddee9a4dd5a55ed785"")",joel.leitch@gmail.com,Provide a means to add serialization or deserialization specific exclusion strategies.,gson/src/test/java/com/google/gson/ExclusionStrategy2AdapterTest.java,ExclusionStrategy2AdapterTest.java,testConstruction
02/03/2011 21:09:41,"=HYPERLINK(""https://github.com/google/gson/commit/114633fbf933c3085a189d20c62fadae0398fb39"", ""114633fbf933c3085a189d20c62fadae0398fb39"")","=HYPERLINK(""https://github.com/google/gson/commit/ea48a1debfaa863d29dac8ddee9a4dd5a55ed785"", ""ea48a1debfaa863d29dac8ddee9a4dd5a55ed785"")",joel.leitch@gmail.com,Provide a means to add serialization or deserialization specific exclusion strategies.,gson/src/test/java/com/google/gson/ExclusionStrategy2AdapterTest.java,ExclusionStrategy2AdapterTest.java,testAdapterDoesSameForBothModes
02/03/2011 21:09:41,"=HYPERLINK(""https://github.com/google/gson/commit/114633fbf933c3085a189d20c62fadae0398fb39"", ""114633fbf933c3085a189d20c62fadae0398fb39"")","=HYPERLINK(""https://github.com/google/gson/commit/ea48a1debfaa863d29dac8ddee9a4dd5a55ed785"", ""ea48a1debfaa863d29dac8ddee9a4dd5a55ed785"")",joel.leitch@gmail.com,Provide a means to add serialization or deserialization specific exclusion strategies.,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,FunctionWithInternalDependenciesTest.java,testUserDefinedExclusionPolicies
02/03/2011 21:09:41,"=HYPERLINK(""https://github.com/google/gson/commit/114633fbf933c3085a189d20c62fadae0398fb39"", ""114633fbf933c3085a189d20c62fadae0398fb39"")","=HYPERLINK(""https://github.com/google/gson/commit/ea48a1debfaa863d29dac8ddee9a4dd5a55ed785"", ""ea48a1debfaa863d29dac8ddee9a4dd5a55ed785"")",joel.leitch@gmail.com,Provide a means to add serialization or deserialization specific exclusion strategies.,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,FunctionWithInternalDependenciesTest.java,UserDefinedExclusionStrategy
02/03/2011 21:09:41,"=HYPERLINK(""https://github.com/google/gson/commit/114633fbf933c3085a189d20c62fadae0398fb39"", ""114633fbf933c3085a189d20c62fadae0398fb39"")","=HYPERLINK(""https://github.com/google/gson/commit/ea48a1debfaa863d29dac8ddee9a4dd5a55ed785"", ""ea48a1debfaa863d29dac8ddee9a4dd5a55ed785"")",joel.leitch@gmail.com,Provide a means to add serialization or deserialization specific exclusion strategies.,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,FunctionWithInternalDependenciesTest.java,shouldSkipClass
02/03/2011 21:09:41,"=HYPERLINK(""https://github.com/google/gson/commit/114633fbf933c3085a189d20c62fadae0398fb39"", ""114633fbf933c3085a189d20c62fadae0398fb39"")","=HYPERLINK(""https://github.com/google/gson/commit/ea48a1debfaa863d29dac8ddee9a4dd5a55ed785"", ""ea48a1debfaa863d29dac8ddee9a4dd5a55ed785"")",joel.leitch@gmail.com,Provide a means to add serialization or deserialization specific exclusion strategies.,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,FunctionWithInternalDependenciesTest.java,shouldSkipField
02/03/2011 21:09:41,"=HYPERLINK(""https://github.com/google/gson/commit/114633fbf933c3085a189d20c62fadae0398fb39"", ""114633fbf933c3085a189d20c62fadae0398fb39"")","=HYPERLINK(""https://github.com/google/gson/commit/ea48a1debfaa863d29dac8ddee9a4dd5a55ed785"", ""ea48a1debfaa863d29dac8ddee9a4dd5a55ed785"")",joel.leitch@gmail.com,Provide a means to add serialization or deserialization specific exclusion strategies.,gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java,ExclusionStrategyFunctionalTest.java,testExclusionStrategy2Serialization
03/14/2011 18:22:50,"=HYPERLINK(""https://github.com/google/gson/commit/0c35edab6584a01d89ec5533ee6acac8f7002a8b"", ""0c35edab6584a01d89ec5533ee6acac8f7002a8b"")","=HYPERLINK(""https://github.com/google/gson/commit/912add077989dc06977fe31209d4d8d125bce8d4"", ""912add077989dc06977fe31209d4d8d125bce8d4"")",inder123@gmail.com,"Fixed the bug where copyOf() for a ParameterizedTypeHandlerMap was failing when hierarchical type adapters for a sub class and its base class were present.

Fixed previously broken tests to verify the behavior that a hierarchical type adapter for a sub-class can be registered after registering a hierarchical type adapter for the base-class. The vice-versa is not allowed as it would result in hiding the sub-class hierarchical type adapter.",gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,TypeHierarchyAdapterTest.java,testRegisterSubtypeFirst
03/14/2011 18:22:50,"=HYPERLINK(""https://github.com/google/gson/commit/0c35edab6584a01d89ec5533ee6acac8f7002a8b"", ""0c35edab6584a01d89ec5533ee6acac8f7002a8b"")","=HYPERLINK(""https://github.com/google/gson/commit/912add077989dc06977fe31209d4d8d125bce8d4"", ""912add077989dc06977fe31209d4d8d125bce8d4"")",inder123@gmail.com,"Fixed the bug where copyOf() for a ParameterizedTypeHandlerMap was failing when hierarchical type adapters for a sub class and its base class were present.

Fixed previously broken tests to verify the behavior that a hierarchical type adapter for a sub-class can be registered after registering a hierarchical type adapter for the base-class. The vice-versa is not allowed as it would result in hiding the sub-class hierarchical type adapter.",gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,TypeHierarchyAdapterTest.java,testRegisterSupertypeFirst
04/04/2011 14:07:20,"=HYPERLINK(""https://github.com/google/gson/commit/5af0b16641ffd0422ea495b8e542ad1e29cc1735"", ""5af0b16641ffd0422ea495b8e542ad1e29cc1735"")","=HYPERLINK(""https://github.com/google/gson/commit/bf4ab04413ce091971175ff594c794116925b44a"", ""bf4ab04413ce091971175ff594c794116925b44a"")",joel.leitch@gmail.com,Updating Map tests.,gson/src/test/java/com/google/gson/functional/MapTest.java,MapTest.java,testMapSubclassDeserialization
04/04/2011 16:43:24,"=HYPERLINK(""https://github.com/google/gson/commit/a1471648520e70b3b33e6421ca30796ff3b258a3"", ""a1471648520e70b3b33e6421ca30796ff3b258a3"")","=HYPERLINK(""https://github.com/google/gson/commit/1a9a54dcc25ccf517f38d427c01f696673512348"", ""1a9a54dcc25ccf517f38d427c01f696673512348"")",inder123@gmail.com,incorporated feedback on r721,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,DefaultDateTypeAdapterTest.java,testFormattingAlwaysEmitsUsLocale
04/05/2011 19:02:40,"=HYPERLINK(""https://github.com/google/gson/commit/b4eb810347ac073c29b62bb0fc2c70c40376aafb"", ""b4eb810347ac073c29b62bb0fc2c70c40376aafb"")","=HYPERLINK(""https://github.com/google/gson/commit/52bf144859d7584fe96c79b5672683f0bb795bdc"", ""52bf144859d7584fe96c79b5672683f0bb795bdc"")",joel.leitch@gmail.com,Comments for r766.,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,DefaultConstructorAllocatorTest.java,assertInCache
04/12/2011 12:29:19,"=HYPERLINK(""https://github.com/google/gson/commit/4917fc7f7628518ade0dfa11464192a17af1c7d1"", ""4917fc7f7628518ade0dfa11464192a17af1c7d1"")","=HYPERLINK(""https://github.com/google/gson/commit/7f9762db633dde22b801e365d4ae02d50acaa6bf"", ""7f9762db633dde22b801e365d4ae02d50acaa6bf"")",joel.leitch@gmail.com,"Lift restriction on naming when using the ""@SerializedNamed"" annotation.

Fix for Issue 290.",gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,JsonFieldNameValidatorTest.java,setUp
04/12/2011 12:29:19,"=HYPERLINK(""https://github.com/google/gson/commit/4917fc7f7628518ade0dfa11464192a17af1c7d1"", ""4917fc7f7628518ade0dfa11464192a17af1c7d1"")","=HYPERLINK(""https://github.com/google/gson/commit/7f9762db633dde22b801e365d4ae02d50acaa6bf"", ""7f9762db633dde22b801e365d4ae02d50acaa6bf"")",joel.leitch@gmail.com,"Lift restriction on naming when using the ""@SerializedNamed"" annotation.

Fix for Issue 290.",gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,JsonFieldNameValidatorTest.java,testValidFieldBeginsWithDollarSign
04/12/2011 12:29:19,"=HYPERLINK(""https://github.com/google/gson/commit/4917fc7f7628518ade0dfa11464192a17af1c7d1"", ""4917fc7f7628518ade0dfa11464192a17af1c7d1"")","=HYPERLINK(""https://github.com/google/gson/commit/7f9762db633dde22b801e365d4ae02d50acaa6bf"", ""7f9762db633dde22b801e365d4ae02d50acaa6bf"")",joel.leitch@gmail.com,"Lift restriction on naming when using the ""@SerializedNamed"" annotation.

Fix for Issue 290.",gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,JsonFieldNameValidatorTest.java,testValidFieldBeginsWithUnderscore
04/12/2011 12:29:19,"=HYPERLINK(""https://github.com/google/gson/commit/4917fc7f7628518ade0dfa11464192a17af1c7d1"", ""4917fc7f7628518ade0dfa11464192a17af1c7d1"")","=HYPERLINK(""https://github.com/google/gson/commit/7f9762db633dde22b801e365d4ae02d50acaa6bf"", ""7f9762db633dde22b801e365d4ae02d50acaa6bf"")",joel.leitch@gmail.com,"Lift restriction on naming when using the ""@SerializedNamed"" annotation.

Fix for Issue 290.",gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,JsonFieldNameValidatorTest.java,testValidFieldBeginsWithLetter
04/12/2011 12:29:19,"=HYPERLINK(""https://github.com/google/gson/commit/4917fc7f7628518ade0dfa11464192a17af1c7d1"", ""4917fc7f7628518ade0dfa11464192a17af1c7d1"")","=HYPERLINK(""https://github.com/google/gson/commit/7f9762db633dde22b801e365d4ae02d50acaa6bf"", ""7f9762db633dde22b801e365d4ae02d50acaa6bf"")",joel.leitch@gmail.com,"Lift restriction on naming when using the ""@SerializedNamed"" annotation.

Fix for Issue 290.",gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,JsonFieldNameValidatorTest.java,testValidFieldMixingLetter
04/12/2011 12:29:19,"=HYPERLINK(""https://github.com/google/gson/commit/4917fc7f7628518ade0dfa11464192a17af1c7d1"", ""4917fc7f7628518ade0dfa11464192a17af1c7d1"")","=HYPERLINK(""https://github.com/google/gson/commit/7f9762db633dde22b801e365d4ae02d50acaa6bf"", ""7f9762db633dde22b801e365d4ae02d50acaa6bf"")",joel.leitch@gmail.com,"Lift restriction on naming when using the ""@SerializedNamed"" annotation.

Fix for Issue 290.",gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,JsonFieldNameValidatorTest.java,testInvalidFieldStartingWithNumbers
04/12/2011 12:29:19,"=HYPERLINK(""https://github.com/google/gson/commit/4917fc7f7628518ade0dfa11464192a17af1c7d1"", ""4917fc7f7628518ade0dfa11464192a17af1c7d1"")","=HYPERLINK(""https://github.com/google/gson/commit/7f9762db633dde22b801e365d4ae02d50acaa6bf"", ""7f9762db633dde22b801e365d4ae02d50acaa6bf"")",joel.leitch@gmail.com,"Lift restriction on naming when using the ""@SerializedNamed"" annotation.

Fix for Issue 290.",gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,JsonFieldNameValidatorTest.java,testInvalidFieldStartingTwoDollarSigns
04/12/2011 12:29:19,"=HYPERLINK(""https://github.com/google/gson/commit/4917fc7f7628518ade0dfa11464192a17af1c7d1"", ""4917fc7f7628518ade0dfa11464192a17af1c7d1"")","=HYPERLINK(""https://github.com/google/gson/commit/7f9762db633dde22b801e365d4ae02d50acaa6bf"", ""7f9762db633dde22b801e365d4ae02d50acaa6bf"")",joel.leitch@gmail.com,"Lift restriction on naming when using the ""@SerializedNamed"" annotation.

Fix for Issue 290.",gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,JsonFieldNameValidatorTest.java,testInvalidFieldStartingTwoUnderscores
04/12/2011 12:29:19,"=HYPERLINK(""https://github.com/google/gson/commit/4917fc7f7628518ade0dfa11464192a17af1c7d1"", ""4917fc7f7628518ade0dfa11464192a17af1c7d1"")","=HYPERLINK(""https://github.com/google/gson/commit/7f9762db633dde22b801e365d4ae02d50acaa6bf"", ""7f9762db633dde22b801e365d4ae02d50acaa6bf"")",joel.leitch@gmail.com,"Lift restriction on naming when using the ""@SerializedNamed"" annotation.

Fix for Issue 290.",gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,JsonFieldNameValidatorTest.java,testInvalidFieldStartingDollarUnderscore
04/12/2011 12:29:19,"=HYPERLINK(""https://github.com/google/gson/commit/4917fc7f7628518ade0dfa11464192a17af1c7d1"", ""4917fc7f7628518ade0dfa11464192a17af1c7d1"")","=HYPERLINK(""https://github.com/google/gson/commit/7f9762db633dde22b801e365d4ae02d50acaa6bf"", ""7f9762db633dde22b801e365d4ae02d50acaa6bf"")",joel.leitch@gmail.com,"Lift restriction on naming when using the ""@SerializedNamed"" annotation.

Fix for Issue 290.",gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,JsonFieldNameValidatorTest.java,testJavaAndJsKeywordAsFieldName
04/12/2011 12:29:19,"=HYPERLINK(""https://github.com/google/gson/commit/4917fc7f7628518ade0dfa11464192a17af1c7d1"", ""4917fc7f7628518ade0dfa11464192a17af1c7d1"")","=HYPERLINK(""https://github.com/google/gson/commit/7f9762db633dde22b801e365d4ae02d50acaa6bf"", ""7f9762db633dde22b801e365d4ae02d50acaa6bf"")",joel.leitch@gmail.com,"Lift restriction on naming when using the ""@SerializedNamed"" annotation.

Fix for Issue 290.",gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,JsonFieldNameValidatorTest.java,testInvalidCharacters
04/12/2011 12:29:19,"=HYPERLINK(""https://github.com/google/gson/commit/4917fc7f7628518ade0dfa11464192a17af1c7d1"", ""4917fc7f7628518ade0dfa11464192a17af1c7d1"")","=HYPERLINK(""https://github.com/google/gson/commit/7f9762db633dde22b801e365d4ae02d50acaa6bf"", ""7f9762db633dde22b801e365d4ae02d50acaa6bf"")",joel.leitch@gmail.com,"Lift restriction on naming when using the ""@SerializedNamed"" annotation.

Fix for Issue 290.",gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,JsonFieldNameValidatorTest.java,testDashesInFieldName
04/12/2011 12:29:19,"=HYPERLINK(""https://github.com/google/gson/commit/4917fc7f7628518ade0dfa11464192a17af1c7d1"", ""4917fc7f7628518ade0dfa11464192a17af1c7d1"")","=HYPERLINK(""https://github.com/google/gson/commit/7f9762db633dde22b801e365d4ae02d50acaa6bf"", ""7f9762db633dde22b801e365d4ae02d50acaa6bf"")",joel.leitch@gmail.com,"Lift restriction on naming when using the ""@SerializedNamed"" annotation.

Fix for Issue 290.",gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,JsonFieldNameValidatorTest.java,testSpacesInFieldName
04/12/2011 12:29:19,"=HYPERLINK(""https://github.com/google/gson/commit/4917fc7f7628518ade0dfa11464192a17af1c7d1"", ""4917fc7f7628518ade0dfa11464192a17af1c7d1"")","=HYPERLINK(""https://github.com/google/gson/commit/7f9762db633dde22b801e365d4ae02d50acaa6bf"", ""7f9762db633dde22b801e365d4ae02d50acaa6bf"")",joel.leitch@gmail.com,"Lift restriction on naming when using the ""@SerializedNamed"" annotation.

Fix for Issue 290.",gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,JsonFieldNameValidatorTest.java,testSpacesInBeginningOfName
04/20/2011 17:27:51,"=HYPERLINK(""https://github.com/google/gson/commit/f291c4d33ea5fcc52afcfa5713e519e663378bda"", ""f291c4d33ea5fcc52afcfa5713e519e663378bda"")","=HYPERLINK(""https://github.com/google/gson/commit/cf3615e38c3078611706e5770d0c21fd01c4c2e1"", ""cf3615e38c3078611706e5770d0c21fd01c4c2e1"")",joel.leitch@gmail.com,"Fix a bunch of preserve-type issues:
- Issue 205
- Issue 294
- Issue 318",gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java,MoreSpecificTypeSerializationTest.java,testListOfSubclassFields
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,setUp
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testNoSpecialCharacters
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testNewlineEscaping
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testCarrageReturnEscaping
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testTabEscaping
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testDoubleQuoteEscaping
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testSingleQuoteEscaping
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testLineSeparatorEscaping
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testParagraphSeparatorEscaping
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testControlCharBlockEscaping
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testEqualsEscaping
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testGreaterThanAndLessThanEscaping
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testAmpersandEscaping
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testSlashEscaping
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testSingleQuoteNotEscaped
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testRequiredEscapingUnicodeCharacter
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,testUnicodeCharacterStringNoEscaping
07/12/2011 18:50:00,"=HYPERLINK(""https://github.com/google/gson/commit/9cf579ef01e66dad2ffe907350d2d088497138a8"", ""9cf579ef01e66dad2ffe907350d2d088497138a8"")","=HYPERLINK(""https://github.com/google/gson/commit/041d499a7c4af1b70617001ded11dbc01732d97f"", ""041d499a7c4af1b70617001ded11dbc01732d97f"")",jesse@swank.ca,"Use Streams instead of Escaper.

Fixes issue 345.",gson/src/test/java/com/google/gson/EscaperTest.java,EscaperTest.java,convertToUnicodeString
09/08/2011 23:20:25,"=HYPERLINK(""https://github.com/google/gson/commit/f67940cb638fcf4d3443b057176bb1b84d054ac0"", ""f67940cb638fcf4d3443b057176bb1b84d054ac0"")","=HYPERLINK(""https://github.com/google/gson/commit/ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22"", ""ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22"")",jesse@swank.ca,"Retire two old bad features
 - overriding primitive type adapters
 - auto unwrapping of single element arrays",gson/src/test/java/com/google/gson/functional/ArrayTest.java,ArrayTest.java,testArrayOfPrimitivesWithCustomTypeAdapter
09/08/2011 23:20:25,"=HYPERLINK(""https://github.com/google/gson/commit/f67940cb638fcf4d3443b057176bb1b84d054ac0"", ""f67940cb638fcf4d3443b057176bb1b84d054ac0"")","=HYPERLINK(""https://github.com/google/gson/commit/ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22"", ""ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22"")",jesse@swank.ca,"Retire two old bad features
 - overriding primitive type adapters
 - auto unwrapping of single element arrays",gson/src/test/java/com/google/gson/functional/ArrayTest.java,ArrayTest.java,testArrayOfObjectsWithoutTypeInfoDeserialization
09/08/2011 23:20:25,"=HYPERLINK(""https://github.com/google/gson/commit/f67940cb638fcf4d3443b057176bb1b84d054ac0"", ""f67940cb638fcf4d3443b057176bb1b84d054ac0"")","=HYPERLINK(""https://github.com/google/gson/commit/ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22"", ""ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22"")",jesse@swank.ca,"Retire two old bad features
 - overriding primitive type adapters
 - auto unwrapping of single element arrays",gson/src/test/java/com/google/gson/functional/ArrayTest.java,ArrayTest.java,testArrayWithoutTypeInfoDeserialization
09/09/2011 00:04:24,"=HYPERLINK(""https://github.com/google/gson/commit/e19672d0a394d552469147e12a70bf81413f0076"", ""e19672d0a394d552469147e12a70bf81413f0076"")","=HYPERLINK(""https://github.com/google/gson/commit/ba283925ae8503ca72f326486a3518fb517df5b7"", ""ba283925ae8503ca72f326486a3518fb517df5b7"")",jesse@swank.ca,Throw the right exceptions when primitives fail to parse.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testPrimitiveIntegerAutoboxedInASingleElementArrayDeserialization
09/09/2011 00:04:24,"=HYPERLINK(""https://github.com/google/gson/commit/e19672d0a394d552469147e12a70bf81413f0076"", ""e19672d0a394d552469147e12a70bf81413f0076"")","=HYPERLINK(""https://github.com/google/gson/commit/ba283925ae8503ca72f326486a3518fb517df5b7"", ""ba283925ae8503ca72f326486a3518fb517df5b7"")",jesse@swank.ca,Throw the right exceptions when primitives fail to parse.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testPrimitiveLongAutoboxedInASingleElementArrayDeserialization
09/09/2011 00:04:24,"=HYPERLINK(""https://github.com/google/gson/commit/e19672d0a394d552469147e12a70bf81413f0076"", ""e19672d0a394d552469147e12a70bf81413f0076"")","=HYPERLINK(""https://github.com/google/gson/commit/ba283925ae8503ca72f326486a3518fb517df5b7"", ""ba283925ae8503ca72f326486a3518fb517df5b7"")",jesse@swank.ca,Throw the right exceptions when primitives fail to parse.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testPrimitiveBooleanAutoboxedDeserialization
09/09/2011 00:04:24,"=HYPERLINK(""https://github.com/google/gson/commit/e19672d0a394d552469147e12a70bf81413f0076"", ""e19672d0a394d552469147e12a70bf81413f0076"")","=HYPERLINK(""https://github.com/google/gson/commit/ba283925ae8503ca72f326486a3518fb517df5b7"", ""ba283925ae8503ca72f326486a3518fb517df5b7"")",jesse@swank.ca,Throw the right exceptions when primitives fail to parse.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testPrimitiveBooleanAutoboxedInASingleElementArrayDeserialization
09/09/2011 00:04:24,"=HYPERLINK(""https://github.com/google/gson/commit/e19672d0a394d552469147e12a70bf81413f0076"", ""e19672d0a394d552469147e12a70bf81413f0076"")","=HYPERLINK(""https://github.com/google/gson/commit/ba283925ae8503ca72f326486a3518fb517df5b7"", ""ba283925ae8503ca72f326486a3518fb517df5b7"")",jesse@swank.ca,Throw the right exceptions when primitives fail to parse.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testPrimitiveDoubleAutoboxedInASingleElementArrayDeserialization
09/09/2011 00:04:24,"=HYPERLINK(""https://github.com/google/gson/commit/e19672d0a394d552469147e12a70bf81413f0076"", ""e19672d0a394d552469147e12a70bf81413f0076"")","=HYPERLINK(""https://github.com/google/gson/commit/ba283925ae8503ca72f326486a3518fb517df5b7"", ""ba283925ae8503ca72f326486a3518fb517df5b7"")",jesse@swank.ca,Throw the right exceptions when primitives fail to parse.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testBigDecimalInASingleElementArrayDeserialization
09/09/2011 00:04:24,"=HYPERLINK(""https://github.com/google/gson/commit/e19672d0a394d552469147e12a70bf81413f0076"", ""e19672d0a394d552469147e12a70bf81413f0076"")","=HYPERLINK(""https://github.com/google/gson/commit/ba283925ae8503ca72f326486a3518fb517df5b7"", ""ba283925ae8503ca72f326486a3518fb517df5b7"")",jesse@swank.ca,Throw the right exceptions when primitives fail to parse.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testBigIntegerInASingleElementArrayDeserialization
09/09/2011 00:04:24,"=HYPERLINK(""https://github.com/google/gson/commit/e19672d0a394d552469147e12a70bf81413f0076"", ""e19672d0a394d552469147e12a70bf81413f0076"")","=HYPERLINK(""https://github.com/google/gson/commit/ba283925ae8503ca72f326486a3518fb517df5b7"", ""ba283925ae8503ca72f326486a3518fb517df5b7"")",jesse@swank.ca,Throw the right exceptions when primitives fail to parse.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testOverridingDefaultPrimitiveSerialization
09/09/2011 00:04:24,"=HYPERLINK(""https://github.com/google/gson/commit/e19672d0a394d552469147e12a70bf81413f0076"", ""e19672d0a394d552469147e12a70bf81413f0076"")","=HYPERLINK(""https://github.com/google/gson/commit/ba283925ae8503ca72f326486a3518fb517df5b7"", ""ba283925ae8503ca72f326486a3518fb517df5b7"")",jesse@swank.ca,Throw the right exceptions when primitives fail to parse.,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testDeserializingDecimalPointValuesAsIntegerFails
09/09/2011 00:23:01,"=HYPERLINK(""https://github.com/google/gson/commit/da67003eeff2c506a2c84ac0ee4191a9e11c25df"", ""da67003eeff2c506a2c84ac0ee4191a9e11c25df"")","=HYPERLINK(""https://github.com/google/gson/commit/a7e9ac36123ad66ec4ac9a7dff3197276b55d5d1"", ""a7e9ac36123ad66ec4ac9a7dff3197276b55d5d1"")",jesse@swank.ca,"GSON 1.x uses arbitrary precision for primitive type conversion (so -122.08e-2132 != 0)
GSON 2.x uses double precision (so -122.08e-2132 == 0)",gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,PrimitiveTest.java,testDeserializingBigDecimalAsLongFails
09/09/2011 00:41:35,"=HYPERLINK(""https://github.com/google/gson/commit/9424949245bb46bd63f3fed83e67daa9fdbdbff9"", ""9424949245bb46bd63f3fed83e67daa9fdbdbff9"")","=HYPERLINK(""https://github.com/google/gson/commit/99801915aa324c4d07b852e23debfbcefb1a3007"", ""99801915aa324c4d07b852e23debfbcefb1a3007"")",jesse@swank.ca,Don't unwrap single-element String arrays,gson/src/test/java/com/google/gson/functional/StringTest.java,StringTest.java,testStringValueAsSingleElementArrayDeserialization
09/09/2011 01:26:21,"=HYPERLINK(""https://github.com/google/gson/commit/e7566085683827ae9278880c38e21a80ccd573d9"", ""e7566085683827ae9278880c38e21a80ccd573d9"")","=HYPERLINK(""https://github.com/google/gson/commit/fede584b9811f35432a936af0c9441f4e05df80a"", ""fede584b9811f35432a936af0c9441f4e05df80a"")",jesse@swank.ca,Forbid custom serializers for primitive types (so we can avoid boxing in the reflective and array adapters),gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,CustomDeserializerTest.java,testCustomDeserializerReturnsNullForTopLevelPrimitives
09/09/2011 01:26:21,"=HYPERLINK(""https://github.com/google/gson/commit/e7566085683827ae9278880c38e21a80ccd573d9"", ""e7566085683827ae9278880c38e21a80ccd573d9"")","=HYPERLINK(""https://github.com/google/gson/commit/fede584b9811f35432a936af0c9441f4e05df80a"", ""fede584b9811f35432a936af0c9441f4e05df80a"")",jesse@swank.ca,Forbid custom serializers for primitive types (so we can avoid boxing in the reflective and array adapters),gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,CustomDeserializerTest.java,testCustomDeserializerReturnsNullForPrimitiveFields
09/09/2011 01:26:21,"=HYPERLINK(""https://github.com/google/gson/commit/e7566085683827ae9278880c38e21a80ccd573d9"", ""e7566085683827ae9278880c38e21a80ccd573d9"")","=HYPERLINK(""https://github.com/google/gson/commit/fede584b9811f35432a936af0c9441f4e05df80a"", ""fede584b9811f35432a936af0c9441f4e05df80a"")",jesse@swank.ca,Forbid custom serializers for primitive types (so we can avoid boxing in the reflective and array adapters),gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,CustomTypeAdaptersTest.java,testCustomSerializerForLong
09/09/2011 01:26:21,"=HYPERLINK(""https://github.com/google/gson/commit/e7566085683827ae9278880c38e21a80ccd573d9"", ""e7566085683827ae9278880c38e21a80ccd573d9"")","=HYPERLINK(""https://github.com/google/gson/commit/fede584b9811f35432a936af0c9441f4e05df80a"", ""fede584b9811f35432a936af0c9441f4e05df80a"")",jesse@swank.ca,Forbid custom serializers for primitive types (so we can avoid boxing in the reflective and array adapters),gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,CustomTypeAdaptersTest.java,testCustomDeserializerForLong
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,DefaultConstructorAllocatorTest.java,setUp
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,DefaultConstructorAllocatorTest.java,testObjectConstructor
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,DefaultConstructorAllocatorTest.java,testMissingDefaultConstructor
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,DefaultConstructorAllocatorTest.java,NoDefaultConstructor
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,DefaultMapJsonSerializerTest.java,setUp
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,MappedObjectConstructorTest.java,setUp
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,MappedObjectConstructorTest.java,testInstanceCreatorTakesTopPrecedence
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,MappedObjectConstructorTest.java,testNoInstanceCreatorInvokesDefaultConstructor
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,MappedObjectConstructorTest.java,testNoDefaultConstructor
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,MappedObjectConstructorTest.java,createInstance
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,MappedObjectConstructorTest.java,ObjectWithDefaultConstructor
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,MappedObjectConstructorTest.java,ObjectWithDefaultConstructor
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,MappedObjectConstructorTest.java,ObjectNoDefaultConstructor
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/MemoryRefStackTest.java,MemoryRefStackTest.java,setUp
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/MemoryRefStackTest.java,MemoryRefStackTest.java,testPeekEmptyStack
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/MemoryRefStackTest.java,MemoryRefStackTest.java,testPushPeekAndPop
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/MemoryRefStackTest.java,MemoryRefStackTest.java,testPopTooMany
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/MemoryRefStackTest.java,MemoryRefStackTest.java,testContains
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/MemoryRefStackTest.java,MemoryRefStackTest.java,equals
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/MemoryRefStackTest.java,MemoryRefStackTest.java,hashCode
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,NullExclusionStrategyTest.java,setUp
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,NullExclusionStrategyTest.java,testNeverSkipsClass
09/11/2011 02:04:56,"=HYPERLINK(""https://github.com/google/gson/commit/25c6ae177b1ca56db7f3c29eb574bdd032a06165"", ""25c6ae177b1ca56db7f3c29eb574bdd032a06165"")","=HYPERLINK(""https://github.com/google/gson/commit/cdd5d80b85155c21c61f888fb3e70c65e72edef7"", ""cdd5d80b85155c21c61f888fb3e70c65e72edef7"")",jesse@swank.ca,"Down to 22 failing tests.

Consolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don't need to ever do reflection to lookup a constructor at construction time.

Cleaned up some buggy type adapters, particularly around handling of null.

Removed dead code for object graph navigation.

Moved some classes into 'internal' so they are visible to the 'bind' subpackage.

Turned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.

Added an API to request the 'next' type adapter for a type. This allows type adapters to compose other type adapters. We're using this in two places:
 - where the user has excluded a type from serialization but not deserialization, we need to use the ""default"" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.
 - similarly when a DOM type serializer is registered but no deserializer, or vice versa.
This is the biggest change to the MiniGson core.

For backwards compatibility, return null for the empty string.

Simplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.

More useful error messages when calling getAsBoolean on a JsonNull.

Remove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don't interject ourselves between the users' various type adapters.",gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,NullExclusionStrategyTest.java,testNeverSkipsField
09/12/2011 00:51:17,"=HYPERLINK(""https://github.com/google/gson/commit/a98d6eae472df67317d58d34f13438bb958668b1"", ""a98d6eae472df67317d58d34f13438bb958668b1"")","=HYPERLINK(""https://github.com/google/gson/commit/d43cf5ea358568446f275c572d8ab9b65c827da7"", ""d43cf5ea358568446f275c572d8ab9b65c827da7"")",jesse@swank.ca,Fix the map type adapter to support array serialization natively.,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,MapAsArrayTypeAdapterTest.java,testTwoTypesCollapseToOneSerialize
09/16/2011 00:40:05,"=HYPERLINK(""https://github.com/google/gson/commit/c71e61cf4830ee950b8fbc601ccadfe4d7ab6d1a"", ""c71e61cf4830ee950b8fbc601ccadfe4d7ab6d1a"")","=HYPERLINK(""https://github.com/google/gson/commit/915c5d4d6f46ca65f60430b7a9b403be87453243"", ""915c5d4d6f46ca65f60430b7a9b403be87453243"")",inder123@gmail.com,"Converted EnumTypeAdapter to new style.
Got rid of default Hierarchy Serializer/Deserializers from DefaultTypeAdapters.
Got rid of methods for gettting default serializers/deserializers/instance creators. Instead we reuse the static final instances.
Fixed warnings in TypeAdapters where a parameterized type T was hiding the parameterized T in methods.
Removed support to unwrap single element array of enums into enum values. Also removed the test that verifies this behavior.",gson/src/test/java/com/google/gson/functional/EnumTest.java,EnumTest.java,testTopLevelEnumInASingleElementArrayDeserialization
09/16/2011 00:41:04,"=HYPERLINK(""https://github.com/google/gson/commit/fd502f4e79d10516205b4a50966d90479be18e6e"", ""fd502f4e79d10516205b4a50966d90479be18e6e"")","=HYPERLINK(""https://github.com/google/gson/commit/c71e61cf4830ee950b8fbc601ccadfe4d7ab6d1a"", ""c71e61cf4830ee950b8fbc601ccadfe4d7ab6d1a"")",inder123@gmail.com,removed unused method.,gson/src/test/java/com/google/gson/functional/EnumTest.java,EnumTest.java,getExpectedJson
09/28/2011 13:00:34,"=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")","=HYPERLINK(""https://github.com/google/gson/commit/3f261441651fe6a5f57cf4e6aa655f9661dc606a"", ""3f261441651fe6a5f57cf4e6aa655f9661dc606a"")",jesse@swank.ca,Death to serializeDefault and deserializeDefault,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,SystemOnlyTypeAdaptersTest.java,setUp
09/28/2011 13:00:34,"=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")","=HYPERLINK(""https://github.com/google/gson/commit/3f261441651fe6a5f57cf4e6aa655f9661dc606a"", ""3f261441651fe6a5f57cf4e6aa655f9661dc606a"")",jesse@swank.ca,Death to serializeDefault and deserializeDefault,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,SystemOnlyTypeAdaptersTest.java,testSerializeDefault
09/28/2011 13:00:34,"=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")","=HYPERLINK(""https://github.com/google/gson/commit/3f261441651fe6a5f57cf4e6aa655f9661dc606a"", ""3f261441651fe6a5f57cf4e6aa655f9661dc606a"")",jesse@swank.ca,Death to serializeDefault and deserializeDefault,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,SystemOnlyTypeAdaptersTest.java,testDeserializeDefault
09/28/2011 13:00:34,"=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")","=HYPERLINK(""https://github.com/google/gson/commit/3f261441651fe6a5f57cf4e6aa655f9661dc606a"", ""3f261441651fe6a5f57cf4e6aa655f9661dc606a"")",jesse@swank.ca,Death to serializeDefault and deserializeDefault,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,SystemOnlyTypeAdaptersTest.java,serialize
09/28/2011 13:00:34,"=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")","=HYPERLINK(""https://github.com/google/gson/commit/3f261441651fe6a5f57cf4e6aa655f9661dc606a"", ""3f261441651fe6a5f57cf4e6aa655f9661dc606a"")",jesse@swank.ca,Death to serializeDefault and deserializeDefault,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,SystemOnlyTypeAdaptersTest.java,deserialize
09/28/2011 14:14:46,"=HYPERLINK(""https://github.com/google/gson/commit/46e65a77c5856d21f2d5e7c90306dbbd894da57e"", ""46e65a77c5856d21f2d5e7c90306dbbd894da57e"")","=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")",jesse@swank.ca,Convert RuntimeTypeAdapter to a TypeAdapterFactory; this avoids the need for serializeDefault(),extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,RuntimeTypeAdapterFactoryTest.java,testRuntimeTypeAdapter
09/28/2011 14:14:46,"=HYPERLINK(""https://github.com/google/gson/commit/46e65a77c5856d21f2d5e7c90306dbbd894da57e"", ""46e65a77c5856d21f2d5e7c90306dbbd894da57e"")","=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")",jesse@swank.ca,Convert RuntimeTypeAdapter to a TypeAdapterFactory; this avoids the need for serializeDefault(),extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,RuntimeTypeAdapterFactoryTest.java,testRuntimeTypeIsBaseType
09/28/2011 14:14:46,"=HYPERLINK(""https://github.com/google/gson/commit/46e65a77c5856d21f2d5e7c90306dbbd894da57e"", ""46e65a77c5856d21f2d5e7c90306dbbd894da57e"")","=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")",jesse@swank.ca,Convert RuntimeTypeAdapter to a TypeAdapterFactory; this avoids the need for serializeDefault(),extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,RuntimeTypeAdapterFactoryTest.java,testNullBaseType
09/28/2011 14:14:46,"=HYPERLINK(""https://github.com/google/gson/commit/46e65a77c5856d21f2d5e7c90306dbbd894da57e"", ""46e65a77c5856d21f2d5e7c90306dbbd894da57e"")","=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")",jesse@swank.ca,Convert RuntimeTypeAdapter to a TypeAdapterFactory; this avoids the need for serializeDefault(),extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,RuntimeTypeAdapterFactoryTest.java,testNullTypeFieldName
09/28/2011 14:14:46,"=HYPERLINK(""https://github.com/google/gson/commit/46e65a77c5856d21f2d5e7c90306dbbd894da57e"", ""46e65a77c5856d21f2d5e7c90306dbbd894da57e"")","=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")",jesse@swank.ca,Convert RuntimeTypeAdapter to a TypeAdapterFactory; this avoids the need for serializeDefault(),extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,RuntimeTypeAdapterFactoryTest.java,testNullSubtype
09/28/2011 14:14:46,"=HYPERLINK(""https://github.com/google/gson/commit/46e65a77c5856d21f2d5e7c90306dbbd894da57e"", ""46e65a77c5856d21f2d5e7c90306dbbd894da57e"")","=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")",jesse@swank.ca,Convert RuntimeTypeAdapter to a TypeAdapterFactory; this avoids the need for serializeDefault(),extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,RuntimeTypeAdapterFactoryTest.java,testNullLabel
09/28/2011 14:14:46,"=HYPERLINK(""https://github.com/google/gson/commit/46e65a77c5856d21f2d5e7c90306dbbd894da57e"", ""46e65a77c5856d21f2d5e7c90306dbbd894da57e"")","=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")",jesse@swank.ca,Convert RuntimeTypeAdapter to a TypeAdapterFactory; this avoids the need for serializeDefault(),extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,RuntimeTypeAdapterFactoryTest.java,testDuplicateSubtype
09/28/2011 14:14:46,"=HYPERLINK(""https://github.com/google/gson/commit/46e65a77c5856d21f2d5e7c90306dbbd894da57e"", ""46e65a77c5856d21f2d5e7c90306dbbd894da57e"")","=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")",jesse@swank.ca,Convert RuntimeTypeAdapter to a TypeAdapterFactory; this avoids the need for serializeDefault(),extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,RuntimeTypeAdapterFactoryTest.java,testDuplicateLabel
09/28/2011 14:14:46,"=HYPERLINK(""https://github.com/google/gson/commit/46e65a77c5856d21f2d5e7c90306dbbd894da57e"", ""46e65a77c5856d21f2d5e7c90306dbbd894da57e"")","=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")",jesse@swank.ca,Convert RuntimeTypeAdapter to a TypeAdapterFactory; this avoids the need for serializeDefault(),extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,RuntimeTypeAdapterFactoryTest.java,testDeserializeMissingTypeField
09/28/2011 14:14:46,"=HYPERLINK(""https://github.com/google/gson/commit/46e65a77c5856d21f2d5e7c90306dbbd894da57e"", ""46e65a77c5856d21f2d5e7c90306dbbd894da57e"")","=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")",jesse@swank.ca,Convert RuntimeTypeAdapter to a TypeAdapterFactory; this avoids the need for serializeDefault(),extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,RuntimeTypeAdapterFactoryTest.java,testDeserializeMissingSubtype
09/28/2011 14:14:46,"=HYPERLINK(""https://github.com/google/gson/commit/46e65a77c5856d21f2d5e7c90306dbbd894da57e"", ""46e65a77c5856d21f2d5e7c90306dbbd894da57e"")","=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")",jesse@swank.ca,Convert RuntimeTypeAdapter to a TypeAdapterFactory; this avoids the need for serializeDefault(),extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,RuntimeTypeAdapterFactoryTest.java,testSerializeMissingSubtype
09/28/2011 14:14:46,"=HYPERLINK(""https://github.com/google/gson/commit/46e65a77c5856d21f2d5e7c90306dbbd894da57e"", ""46e65a77c5856d21f2d5e7c90306dbbd894da57e"")","=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")",jesse@swank.ca,Convert RuntimeTypeAdapter to a TypeAdapterFactory; this avoids the need for serializeDefault(),extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,RuntimeTypeAdapterFactoryTest.java,testSerializeCollidingTypeFieldName
09/28/2011 14:14:46,"=HYPERLINK(""https://github.com/google/gson/commit/46e65a77c5856d21f2d5e7c90306dbbd894da57e"", ""46e65a77c5856d21f2d5e7c90306dbbd894da57e"")","=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")",jesse@swank.ca,Convert RuntimeTypeAdapter to a TypeAdapterFactory; this avoids the need for serializeDefault(),extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,RuntimeTypeAdapterFactoryTest.java,BillingInstrument
09/28/2011 14:14:46,"=HYPERLINK(""https://github.com/google/gson/commit/46e65a77c5856d21f2d5e7c90306dbbd894da57e"", ""46e65a77c5856d21f2d5e7c90306dbbd894da57e"")","=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")",jesse@swank.ca,Convert RuntimeTypeAdapter to a TypeAdapterFactory; this avoids the need for serializeDefault(),extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,RuntimeTypeAdapterFactoryTest.java,CreditCard
09/28/2011 14:14:46,"=HYPERLINK(""https://github.com/google/gson/commit/46e65a77c5856d21f2d5e7c90306dbbd894da57e"", ""46e65a77c5856d21f2d5e7c90306dbbd894da57e"")","=HYPERLINK(""https://github.com/google/gson/commit/2236c95c37e4ac882c20ac080e4ebc68b85b296c"", ""2236c95c37e4ac882c20ac080e4ebc68b85b296c"")",jesse@swank.ca,Convert RuntimeTypeAdapter to a TypeAdapterFactory; this avoids the need for serializeDefault(),extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,RuntimeTypeAdapterFactoryTest.java,BankTransfer
11/12/2011 17:32:44,"=HYPERLINK(""https://github.com/google/gson/commit/172143df7c37482f8c1d43ac4bff769d40ee5ac9"", ""172143df7c37482f8c1d43ac4bff769d40ee5ac9"")","=HYPERLINK(""https://github.com/google/gson/commit/0ac36805c22209cf736a895466f36d56536b3a8d"", ""0ac36805c22209cf736a895466f36d56536b3a8d"")",jesse@swank.ca,Removing JsonObject.deepCopy() and JsonArray.deepCopy(),gson/src/test/java/com/google/gson/JsonArrayTest.java,JsonArrayTest.java,testDeepCopy
11/12/2011 17:32:44,"=HYPERLINK(""https://github.com/google/gson/commit/172143df7c37482f8c1d43ac4bff769d40ee5ac9"", ""172143df7c37482f8c1d43ac4bff769d40ee5ac9"")","=HYPERLINK(""https://github.com/google/gson/commit/0ac36805c22209cf736a895466f36d56536b3a8d"", ""0ac36805c22209cf736a895466f36d56536b3a8d"")",jesse@swank.ca,Removing JsonObject.deepCopy() and JsonArray.deepCopy(),gson/src/test/java/com/google/gson/JsonObjectTest.java,JsonObjectTest.java,testDeepCopy
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,testSerialize
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,testDeserialize
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,testSerializeNullField
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,testDeserializeNullField
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,testSerializeNullObject
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,testDeserializeNullObject
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,testSerializeWithCustomTypeAdapter
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,testDeserializeWithCustomTypeAdapter
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,usePersonNameAdapter
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,testSerializeMap
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,testDeserializeMap
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,testSerialize1dArray
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,testDeserialize1dArray
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,testSerialize2dArray
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,testDeserialize2dArray
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,testSerializeRecursive
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,Person
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,Person
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,equals
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,hashCode
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,Node
11/20/2011 09:23:08,"=HYPERLINK(""https://github.com/google/gson/commit/7e760143fdc8b689daeebdee33ad6ea7d0a62a56"", ""7e760143fdc8b689daeebdee33ad6ea7d0a62a56"")","=HYPERLINK(""https://github.com/google/gson/commit/df31d2db16fe9ef85b7152d002880d5546070fb2"", ""df31d2db16fe9ef85b7152d002880d5546070fb2"")",jesse@swank.ca,"Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable 'Gson' objects. 

The most notable impact of this change is that it adds several new public APIs:
 - The TypeAdapter abstract class
 - The TypeAdapter.Factory interface
 - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)
 - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) 

Still outstanding:
 - Write beautiful prose to document the new APIs above
 - Change GsonBuilder's precedence so that both old and new-style type adapters are registered in one lot",gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,StreamingTypeAdaptersTest.java,Node
11/20/2011 13:55:01,"=HYPERLINK(""https://github.com/google/gson/commit/d391584d48ce87a36c88e804711a5f187e0b9086"", ""d391584d48ce87a36c88e804711a5f187e0b9086"")","=HYPERLINK(""https://github.com/google/gson/commit/777e17c723fa2c87d703326f6bcf1195645893bd"", ""777e17c723fa2c87d703326f6bcf1195645893bd"")",jesse@swank.ca,"Register Gson 1.x tree-style adapters in the TypeAdapter.Factory list rather than in the ParameterizedTypeHandlerMap.

The motivation for this change is to give tree-style adapters precedence order in registration. This fixes the test I committed earlier today, where registration order was not honored.

This renamed ParameterizedTypeHandlerMap to the shorter 'TypeMap'. For type adapters, this is now only used for type hierarchy. We still need non-hierarchy support in TypeMap for instance creators; I'll be looking for workarounds to see if further simplification is possible here.",gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,TypeMapTest.java,setUp
11/20/2011 13:55:01,"=HYPERLINK(""https://github.com/google/gson/commit/d391584d48ce87a36c88e804711a5f187e0b9086"", ""d391584d48ce87a36c88e804711a5f187e0b9086"")","=HYPERLINK(""https://github.com/google/gson/commit/777e17c723fa2c87d703326f6bcf1195645893bd"", ""777e17c723fa2c87d703326f6bcf1195645893bd"")",jesse@swank.ca,"Register Gson 1.x tree-style adapters in the TypeAdapter.Factory list rather than in the ParameterizedTypeHandlerMap.

The motivation for this change is to give tree-style adapters precedence order in registration. This fixes the test I committed earlier today, where registration order was not honored.

This renamed ParameterizedTypeHandlerMap to the shorter 'TypeMap'. For type adapters, this is now only used for type hierarchy. We still need non-hierarchy support in TypeMap for instance creators; I'll be looking for workarounds to see if further simplification is possible here.",gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,TypeMapTest.java,testNullMap
11/20/2011 13:55:01,"=HYPERLINK(""https://github.com/google/gson/commit/d391584d48ce87a36c88e804711a5f187e0b9086"", ""d391584d48ce87a36c88e804711a5f187e0b9086"")","=HYPERLINK(""https://github.com/google/gson/commit/777e17c723fa2c87d703326f6bcf1195645893bd"", ""777e17c723fa2c87d703326f6bcf1195645893bd"")",jesse@swank.ca,"Register Gson 1.x tree-style adapters in the TypeAdapter.Factory list rather than in the ParameterizedTypeHandlerMap.

The motivation for this change is to give tree-style adapters precedence order in registration. This fixes the test I committed earlier today, where registration order was not honored.

This renamed ParameterizedTypeHandlerMap to the shorter 'TypeMap'. For type adapters, this is now only used for type hierarchy. We still need non-hierarchy support in TypeMap for instance creators; I'll be looking for workarounds to see if further simplification is possible here.",gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,TypeMapTest.java,testHasGenericButNotSpecific
11/20/2011 13:55:01,"=HYPERLINK(""https://github.com/google/gson/commit/d391584d48ce87a36c88e804711a5f187e0b9086"", ""d391584d48ce87a36c88e804711a5f187e0b9086"")","=HYPERLINK(""https://github.com/google/gson/commit/777e17c723fa2c87d703326f6bcf1195645893bd"", ""777e17c723fa2c87d703326f6bcf1195645893bd"")",jesse@swank.ca,"Register Gson 1.x tree-style adapters in the TypeAdapter.Factory list rather than in the ParameterizedTypeHandlerMap.

The motivation for this change is to give tree-style adapters precedence order in registration. This fixes the test I committed earlier today, where registration order was not honored.

This renamed ParameterizedTypeHandlerMap to the shorter 'TypeMap'. For type adapters, this is now only used for type hierarchy. We still need non-hierarchy support in TypeMap for instance creators; I'll be looking for workarounds to see if further simplification is possible here.",gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,TypeMapTest.java,testHasSpecificType
11/20/2011 13:55:01,"=HYPERLINK(""https://github.com/google/gson/commit/d391584d48ce87a36c88e804711a5f187e0b9086"", ""d391584d48ce87a36c88e804711a5f187e0b9086"")","=HYPERLINK(""https://github.com/google/gson/commit/777e17c723fa2c87d703326f6bcf1195645893bd"", ""777e17c723fa2c87d703326f6bcf1195645893bd"")",jesse@swank.ca,"Register Gson 1.x tree-style adapters in the TypeAdapter.Factory list rather than in the ParameterizedTypeHandlerMap.

The motivation for this change is to give tree-style adapters precedence order in registration. This fixes the test I committed earlier today, where registration order was not honored.

This renamed ParameterizedTypeHandlerMap to the shorter 'TypeMap'. For type adapters, this is now only used for type hierarchy. We still need non-hierarchy support in TypeMap for instance creators; I'll be looking for workarounds to see if further simplification is possible here.",gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,TypeMapTest.java,testTypeOverridding
11/20/2011 13:55:01,"=HYPERLINK(""https://github.com/google/gson/commit/d391584d48ce87a36c88e804711a5f187e0b9086"", ""d391584d48ce87a36c88e804711a5f187e0b9086"")","=HYPERLINK(""https://github.com/google/gson/commit/777e17c723fa2c87d703326f6bcf1195645893bd"", ""777e17c723fa2c87d703326f6bcf1195645893bd"")",jesse@swank.ca,"Register Gson 1.x tree-style adapters in the TypeAdapter.Factory list rather than in the ParameterizedTypeHandlerMap.

The motivation for this change is to give tree-style adapters precedence order in registration. This fixes the test I committed earlier today, where registration order was not honored.

This renamed ParameterizedTypeHandlerMap to the shorter 'TypeMap'. For type adapters, this is now only used for type hierarchy. We still need non-hierarchy support in TypeMap for instance creators; I'll be looking for workarounds to see if further simplification is possible here.",gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,TypeMapTest.java,testMakeUnmodifiable
11/20/2011 13:55:01,"=HYPERLINK(""https://github.com/google/gson/commit/d391584d48ce87a36c88e804711a5f187e0b9086"", ""d391584d48ce87a36c88e804711a5f187e0b9086"")","=HYPERLINK(""https://github.com/google/gson/commit/777e17c723fa2c87d703326f6bcf1195645893bd"", ""777e17c723fa2c87d703326f6bcf1195645893bd"")",jesse@swank.ca,"Register Gson 1.x tree-style adapters in the TypeAdapter.Factory list rather than in the ParameterizedTypeHandlerMap.

The motivation for this change is to give tree-style adapters precedence order in registration. This fixes the test I committed earlier today, where registration order was not honored.

This renamed ParameterizedTypeHandlerMap to the shorter 'TypeMap'. For type adapters, this is now only used for type hierarchy. We still need non-hierarchy support in TypeMap for instance creators; I'll be looking for workarounds to see if further simplification is possible here.",gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,TypeMapTest.java,testTypeHierarchy
11/20/2011 13:55:01,"=HYPERLINK(""https://github.com/google/gson/commit/d391584d48ce87a36c88e804711a5f187e0b9086"", ""d391584d48ce87a36c88e804711a5f187e0b9086"")","=HYPERLINK(""https://github.com/google/gson/commit/777e17c723fa2c87d703326f6bcf1195645893bd"", ""777e17c723fa2c87d703326f6bcf1195645893bd"")",jesse@swank.ca,"Register Gson 1.x tree-style adapters in the TypeAdapter.Factory list rather than in the ParameterizedTypeHandlerMap.

The motivation for this change is to give tree-style adapters precedence order in registration. This fixes the test I committed earlier today, where registration order was not honored.

This renamed ParameterizedTypeHandlerMap to the shorter 'TypeMap'. For type adapters, this is now only used for type hierarchy. We still need non-hierarchy support in TypeMap for instance creators; I'll be looking for workarounds to see if further simplification is possible here.",gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,TypeMapTest.java,testTypeHierarchyMultipleHandlers
11/20/2011 13:55:01,"=HYPERLINK(""https://github.com/google/gson/commit/d391584d48ce87a36c88e804711a5f187e0b9086"", ""d391584d48ce87a36c88e804711a5f187e0b9086"")","=HYPERLINK(""https://github.com/google/gson/commit/777e17c723fa2c87d703326f6bcf1195645893bd"", ""777e17c723fa2c87d703326f6bcf1195645893bd"")",jesse@swank.ca,"Register Gson 1.x tree-style adapters in the TypeAdapter.Factory list rather than in the ParameterizedTypeHandlerMap.

The motivation for this change is to give tree-style adapters precedence order in registration. This fixes the test I committed earlier today, where registration order was not honored.

This renamed ParameterizedTypeHandlerMap to the shorter 'TypeMap'. For type adapters, this is now only used for type hierarchy. We still need non-hierarchy support in TypeMap for instance creators; I'll be looking for workarounds to see if further simplification is possible here.",gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,TypeMapTest.java,testTypeHierarchyRegisterIfAbsent
11/20/2011 13:55:01,"=HYPERLINK(""https://github.com/google/gson/commit/d391584d48ce87a36c88e804711a5f187e0b9086"", ""d391584d48ce87a36c88e804711a5f187e0b9086"")","=HYPERLINK(""https://github.com/google/gson/commit/777e17c723fa2c87d703326f6bcf1195645893bd"", ""777e17c723fa2c87d703326f6bcf1195645893bd"")",jesse@swank.ca,"Register Gson 1.x tree-style adapters in the TypeAdapter.Factory list rather than in the ParameterizedTypeHandlerMap.

The motivation for this change is to give tree-style adapters precedence order in registration. This fixes the test I committed earlier today, where registration order was not honored.

This renamed ParameterizedTypeHandlerMap to the shorter 'TypeMap'. For type adapters, this is now only used for type hierarchy. We still need non-hierarchy support in TypeMap for instance creators; I'll be looking for workarounds to see if further simplification is possible here.",gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,TypeMapTest.java,testReplaceExistingTypeHierarchyHandler
11/20/2011 13:55:01,"=HYPERLINK(""https://github.com/google/gson/commit/d391584d48ce87a36c88e804711a5f187e0b9086"", ""d391584d48ce87a36c88e804711a5f187e0b9086"")","=HYPERLINK(""https://github.com/google/gson/commit/777e17c723fa2c87d703326f6bcf1195645893bd"", ""777e17c723fa2c87d703326f6bcf1195645893bd"")",jesse@swank.ca,"Register Gson 1.x tree-style adapters in the TypeAdapter.Factory list rather than in the ParameterizedTypeHandlerMap.

The motivation for this change is to give tree-style adapters precedence order in registration. This fixes the test I committed earlier today, where registration order was not honored.

This renamed ParameterizedTypeHandlerMap to the shorter 'TypeMap'. For type adapters, this is now only used for type hierarchy. We still need non-hierarchy support in TypeMap for instance creators; I'll be looking for workarounds to see if further simplification is possible here.",gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,TypeMapTest.java,testHidingExistingTypeHierarchyHandlerIsDisallowed
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,CamelCaseSeparatorNamingPolicyTest.java,testInvalidInstantiation
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,CamelCaseSeparatorNamingPolicyTest.java,testUnderscoreSeparator
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,CamelCaseSeparatorNamingPolicyTest.java,testMultiCharSeparator
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,CamelCaseSeparatorNamingPolicyTest.java,testNameBeginsWithCapital
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,CamelCaseSeparatorNamingPolicyTest.java,testExceptionPossiblyIncorrectSeparation
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/FieldNamingStrategy2AdapterTest.java,FieldNamingStrategy2AdapterTest.java,testSimpleAdapter
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/FieldNamingStrategy2AdapterTest.java,FieldNamingStrategy2AdapterTest.java,translateName
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,JavaFieldNamingPolicyTest.java,setUp
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,JavaFieldNamingPolicyTest.java,testFieldNamingPolicy
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,JavaFieldNamingPolicyTest.java,testNullField
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,LowerCamelCaseSeparatorNamingPolicyTest.java,setUp
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,LowerCamelCaseSeparatorNamingPolicyTest.java,testNameBeginsWithLowerCase
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,LowerCamelCaseSeparatorNamingPolicyTest.java,testNameBeginsWithUpperCase
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,LowerCamelCaseSeparatorNamingPolicyTest.java,testExceptionPossiblyIncorrectSeparation
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,LowerCamelCaseSeparatorNamingPolicyTest.java,testUsingDashesInstead
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,LowerCaseNamingPolicyTest.java,setUp
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,LowerCaseNamingPolicyTest.java,testAllLowerCase
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,LowerCaseNamingPolicyTest.java,testAllUpperCase
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,LowerCaseNamingPolicyTest.java,testMixedCase
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,ModifyFirstLetterNamingPolicyTest.java,testInvalidConstruction
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,ModifyFirstLetterNamingPolicyTest.java,testLowerCaseFirstLetter
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,ModifyFirstLetterNamingPolicyTest.java,testUpperCaseFirstLetter
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,ModifyFirstLetterNamingPolicyTest.java,testSingleCharacterField
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,ModifyFirstLetterNamingPolicyTest.java,testFieldStartsWithUnderscore
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,ModifyFirstLetterNamingPolicyTest.java,testFieldStartsWithUnderscoreFollowedBySingleLetter
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,ModifyFirstLetterNamingPolicyTest.java,testFieldHasSingleNonLetter
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,ModifyFirstLetterNamingPolicyTest.java,testFieldHasNoLetters
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,SerializedNameAnnotationInterceptingNamingPolicyTest.java,setUp
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,SerializedNameAnnotationInterceptingNamingPolicyTest.java,testFieldWithAnnotation
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,SerializedNameAnnotationInterceptingNamingPolicyTest.java,testFieldWithoutAnnotation
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/UpperCamelCaseSeparatorNamingPolicyTest.java,UpperCamelCaseSeparatorNamingPolicyTest.java,setUp
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/UpperCamelCaseSeparatorNamingPolicyTest.java,UpperCamelCaseSeparatorNamingPolicyTest.java,testAllLowerCase
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/UpperCamelCaseSeparatorNamingPolicyTest.java,UpperCamelCaseSeparatorNamingPolicyTest.java,testAllUpperCase
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/UpperCamelCaseSeparatorNamingPolicyTest.java,UpperCamelCaseSeparatorNamingPolicyTest.java,testAllUpperCaseExceptFirst
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/UpperCamelCaseSeparatorNamingPolicyTest.java,UpperCamelCaseSeparatorNamingPolicyTest.java,testAllUpperCaseStartingWithUnderscore
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/UpperCamelCaseSeparatorNamingPolicyTest.java,UpperCamelCaseSeparatorNamingPolicyTest.java,testMixedCase
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,UpperCaseNamingPolicyTest.java,setUp
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,UpperCaseNamingPolicyTest.java,testAllLowerCase
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,UpperCaseNamingPolicyTest.java,testAllUpperCase
11/20/2011 23:08:23,"=HYPERLINK(""https://github.com/google/gson/commit/f89e92aa9fd4c705655dbc0b0584defc996d796f"", ""f89e92aa9fd4c705655dbc0b0584defc996d796f"")","=HYPERLINK(""https://github.com/google/gson/commit/f777a192ee13fd59048aa7ba640cc8023051c89d"", ""f777a192ee13fd59048aa7ba640cc8023051c89d"")",jesse@swank.ca,"Tighten up some of the fields naming policy code. The main thrust of this change is replacing classes like UpperCaseNamingPolicy with the corresponding method calls. Classes like CompositeFieldNamingPolicy are replaced by sequences of method calls. This also replaces unit tests with functional tests.

One nice benefit of this is a 3%/5.7KiB reduction in the size of gson.jar to 184KiB.",gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,UpperCaseNamingPolicyTest.java,testMixedCase
11/21/2011 00:14:23,"=HYPERLINK(""https://github.com/google/gson/commit/7def596775df746f3440f40ffdb937ad5f535265"", ""7def596775df746f3440f40ffdb937ad5f535265"")","=HYPERLINK(""https://github.com/google/gson/commit/e23973afec37fd1691f87a8c25dc8307c11b97e9"", ""e23973afec37fd1691f87a8c25dc8307c11b97e9"")",jesse@swank.ca,Begin to tighten the ExclusionStrategy code. This replaces named classes with anonymous classes wherever we have a single instance of a type.,gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java,ExposeAnnotationExclusionStrategyTest.java,setUp
11/22/2011 00:07:18,"=HYPERLINK(""https://github.com/google/gson/commit/fed332906debe74d0879c77a03825b66f7970c41"", ""fed332906debe74d0879c77a03825b66f7970c41"")","=HYPERLINK(""https://github.com/google/gson/commit/0ff7d980c5430be317aca0405477dec74ab0390c"", ""0ff7d980c5430be317aca0405477dec74ab0390c"")",jesse@swank.ca,"Create a single, monolithic class to manage all exclusion strategies. This gets our file size within target of 177KiB.

I intend to follow this up with a builder for our new class to avoid multiple-argument constructor calls.",gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,DisjunctionExclusionStrategyTest.java,testBadInstantiation
11/22/2011 00:07:18,"=HYPERLINK(""https://github.com/google/gson/commit/fed332906debe74d0879c77a03825b66f7970c41"", ""fed332906debe74d0879c77a03825b66f7970c41"")","=HYPERLINK(""https://github.com/google/gson/commit/0ff7d980c5430be317aca0405477dec74ab0390c"", ""0ff7d980c5430be317aca0405477dec74ab0390c"")",jesse@swank.ca,"Create a single, monolithic class to manage all exclusion strategies. This gets our file size within target of 177KiB.

I intend to follow this up with a builder for our new class to avoid multiple-argument constructor calls.",gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,DisjunctionExclusionStrategyTest.java,testSkipFieldsWithMixedTrueAndFalse
11/22/2011 00:07:18,"=HYPERLINK(""https://github.com/google/gson/commit/fed332906debe74d0879c77a03825b66f7970c41"", ""fed332906debe74d0879c77a03825b66f7970c41"")","=HYPERLINK(""https://github.com/google/gson/commit/0ff7d980c5430be317aca0405477dec74ab0390c"", ""0ff7d980c5430be317aca0405477dec74ab0390c"")",jesse@swank.ca,"Create a single, monolithic class to manage all exclusion strategies. This gets our file size within target of 177KiB.

I intend to follow this up with a builder for our new class to avoid multiple-argument constructor calls.",gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,DisjunctionExclusionStrategyTest.java,testSkipFieldsWithFalseOnly
11/22/2011 00:07:18,"=HYPERLINK(""https://github.com/google/gson/commit/fed332906debe74d0879c77a03825b66f7970c41"", ""fed332906debe74d0879c77a03825b66f7970c41"")","=HYPERLINK(""https://github.com/google/gson/commit/0ff7d980c5430be317aca0405477dec74ab0390c"", ""0ff7d980c5430be317aca0405477dec74ab0390c"")",jesse@swank.ca,"Create a single, monolithic class to manage all exclusion strategies. This gets our file size within target of 177KiB.

I intend to follow this up with a builder for our new class to avoid multiple-argument constructor calls.",gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,InnerClassExclusionStrategyTest.java,setUp
11/22/2011 00:07:18,"=HYPERLINK(""https://github.com/google/gson/commit/fed332906debe74d0879c77a03825b66f7970c41"", ""fed332906debe74d0879c77a03825b66f7970c41"")","=HYPERLINK(""https://github.com/google/gson/commit/0ff7d980c5430be317aca0405477dec74ab0390c"", ""0ff7d980c5430be317aca0405477dec74ab0390c"")",jesse@swank.ca,"Create a single, monolithic class to manage all exclusion strategies. This gets our file size within target of 177KiB.

I intend to follow this up with a builder for our new class to avoid multiple-argument constructor calls.",gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,VersionExclusionStrategyTest.java,testDisallowNegativeValuesAndFailFast
11/22/2011 01:37:13,"=HYPERLINK(""https://github.com/google/gson/commit/aa2f61b7d8defddc2a78de43b8042178241daedb"", ""aa2f61b7d8defddc2a78de43b8042178241daedb"")","=HYPERLINK(""https://github.com/google/gson/commit/fed332906debe74d0879c77a03825b66f7970c41"", ""fed332906debe74d0879c77a03825b66f7970c41"")",jesse@swank.ca,"Rename GsonExclusionStrategy to Excluder. The new class is its own factory, which simplifies its caller in GsonBuilder. It no longer implements ExclusionStrategy, which allows the callers to pass in a boolean for serialize/deserialize. This allows us to use one excluder for both code paths. The delegate ExclusionStrategy instances might end up not being shared so it has two lists internally.",gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,FunctionWithInternalDependenciesTest.java,testAnonymousLocalClassesSerialization
11/22/2011 23:13:17,"=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")","=HYPERLINK(""https://github.com/google/gson/commit/d1de4cf676f669fe6771d12dd220e1a9f8d1a42a"", ""d1de4cf676f669fe6771d12dd220e1a9f8d1a42a"")",jesse@swank.ca,Test precedence of type hierarchy adapters.,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,TypeAdapterPrecedenceTest.java,testSerializeStreamingTypeAdapterFollowedByNonstreamingTypeAdapter
11/22/2011 23:13:17,"=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")","=HYPERLINK(""https://github.com/google/gson/commit/d1de4cf676f669fe6771d12dd220e1a9f8d1a42a"", ""d1de4cf676f669fe6771d12dd220e1a9f8d1a42a"")",jesse@swank.ca,Test precedence of type hierarchy adapters.,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,TypeAdapterPrecedenceTest.java,testDeserializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter
11/22/2011 23:13:17,"=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")","=HYPERLINK(""https://github.com/google/gson/commit/d1de4cf676f669fe6771d12dd220e1a9f8d1a42a"", ""d1de4cf676f669fe6771d12dd220e1a9f8d1a42a"")",jesse@swank.ca,Test precedence of type hierarchy adapters.,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,TypeAdapterPrecedenceTest.java,testDeserializeStreamingTypeAdapterFollowedByNonstreamingTypeAdapter
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,JsonDeserializerExceptionWrapperTest.java,testRethrowJsonParseException
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,JsonDeserializerExceptionWrapperTest.java,testWrappedExceptionPropagation
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,JsonDeserializerExceptionWrapperTest.java,testProperSerialization
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,JsonDeserializerExceptionWrapperTest.java,ExceptionJsonDeserializer
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,JsonDeserializerExceptionWrapperTest.java,deserialize
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,TypeHierarchyAdapterTest.java,testRegisterSubTypeFirstNotAllowed
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/internal/TypeMapTest.java,TypeMapTest.java,setUp
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/internal/TypeMapTest.java,TypeMapTest.java,testNullMap
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/internal/TypeMapTest.java,TypeMapTest.java,testHasGenericButNotSpecific
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/internal/TypeMapTest.java,TypeMapTest.java,testHasSpecificType
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/internal/TypeMapTest.java,TypeMapTest.java,testTypeOverridding
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/internal/TypeMapTest.java,TypeMapTest.java,testMakeUnmodifiable
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/internal/TypeMapTest.java,TypeMapTest.java,testTypeHierarchy
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/internal/TypeMapTest.java,TypeMapTest.java,testTypeHierarchyMultipleHandlers
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/internal/TypeMapTest.java,TypeMapTest.java,testReplaceExistingTypeHierarchyHandler
11/23/2011 00:16:55,"=HYPERLINK(""https://github.com/google/gson/commit/1794182a560588973c6ec131e9c24bd39508433d"", ""1794182a560588973c6ec131e9c24bd39508433d"")","=HYPERLINK(""https://github.com/google/gson/commit/3cbe355cb6b1ab5d84ddb75837430c3d9584119b"", ""3cbe355cb6b1ab5d84ddb75837430c3d9584119b"")",jesse@swank.ca,"Commit to factories as the mechanism to lookup type adapters. This uses factories for type hierarchy adapters. We keep a separate list of factories for tree-style adapters registered with registerTypeHierarchyAdapter to guarantee that these come after the non-hierarchy adapters.

This drops support for type hierarchy instance creators. I don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, I think this might actually be an improvement!",gson/src/test/java/com/google/gson/internal/TypeMapTest.java,TypeMapTest.java,testHidingExistingTypeHierarchyHandlerIsDisallowed
11/26/2011 09:30:38,"=HYPERLINK(""https://github.com/google/gson/commit/4c06b013697d06b327f3c537e23181887aeab774"", ""4c06b013697d06b327f3c537e23181887aeab774"")","=HYPERLINK(""https://github.com/google/gson/commit/ddde79c861cd2a3f62c33650698942cac1bb961c"", ""ddde79c861cd2a3f62c33650698942cac1bb961c"")",jesse@swank.ca,Cache all computed type adapters. On one particularly violent test (issue 375) this improves performance by 77%.,gson/src/test/java/com/google/gson/LruCacheTest.java,LruCacheTest.java,testCacheHitAndMiss
11/26/2011 09:30:38,"=HYPERLINK(""https://github.com/google/gson/commit/4c06b013697d06b327f3c537e23181887aeab774"", ""4c06b013697d06b327f3c537e23181887aeab774"")","=HYPERLINK(""https://github.com/google/gson/commit/ddde79c861cd2a3f62c33650698942cac1bb961c"", ""ddde79c861cd2a3f62c33650698942cac1bb961c"")",jesse@swank.ca,Cache all computed type adapters. On one particularly violent test (issue 375) this improves performance by 77%.,gson/src/test/java/com/google/gson/LruCacheTest.java,LruCacheTest.java,testCacheKeyOverwrite
11/26/2011 09:30:38,"=HYPERLINK(""https://github.com/google/gson/commit/4c06b013697d06b327f3c537e23181887aeab774"", ""4c06b013697d06b327f3c537e23181887aeab774"")","=HYPERLINK(""https://github.com/google/gson/commit/ddde79c861cd2a3f62c33650698942cac1bb961c"", ""ddde79c861cd2a3f62c33650698942cac1bb961c"")",jesse@swank.ca,Cache all computed type adapters. On one particularly violent test (issue 375) this improves performance by 77%.,gson/src/test/java/com/google/gson/LruCacheTest.java,LruCacheTest.java,testCacheEviction
12/30/2011 02:27:24,"=HYPERLINK(""https://github.com/google/gson/commit/4057b98babf5ecb7ad1583d23a90abe7b7fede12"", ""4057b98babf5ecb7ad1583d23a90abe7b7fede12"")","=HYPERLINK(""https://github.com/google/gson/commit/6ec6caa49da4fb28dcf51428dcb45838d98b7966"", ""6ec6caa49da4fb28dcf51428dcb45838d98b7966"")",jesse@swank.ca,"Implement all but the most difficult part of graph type adapter's deserialization. The catch is we want to return an instance that we don't have yet. It's on the stack, but we don't have a handle to it because it's inside the 'nextTypeAdapter' who is busy populating its fields.",extras/src/test/java/com/google/gson/graph/GraphTypeAdapterFactoryTest.java,GraphTypeAdapterFactoryTest.java,testBasicCycle
12/30/2011 02:27:24,"=HYPERLINK(""https://github.com/google/gson/commit/4057b98babf5ecb7ad1583d23a90abe7b7fede12"", ""4057b98babf5ecb7ad1583d23a90abe7b7fede12"")","=HYPERLINK(""https://github.com/google/gson/commit/6ec6caa49da4fb28dcf51428dcb45838d98b7966"", ""6ec6caa49da4fb28dcf51428dcb45838d98b7966"")",jesse@swank.ca,"Implement all but the most difficult part of graph type adapter's deserialization. The catch is we want to return an instance that we don't have yet. It's on the stack, but we don't have a handle to it because it's inside the 'nextTypeAdapter' who is busy populating its fields.",gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java,JsonTreeWriterTest.java,testArray
12/30/2011 02:27:24,"=HYPERLINK(""https://github.com/google/gson/commit/4057b98babf5ecb7ad1583d23a90abe7b7fede12"", ""4057b98babf5ecb7ad1583d23a90abe7b7fede12"")","=HYPERLINK(""https://github.com/google/gson/commit/6ec6caa49da4fb28dcf51428dcb45838d98b7966"", ""6ec6caa49da4fb28dcf51428dcb45838d98b7966"")",jesse@swank.ca,"Implement all but the most difficult part of graph type adapter's deserialization. The catch is we want to return an instance that we don't have yet. It's on the stack, but we don't have a handle to it because it's inside the 'nextTypeAdapter' who is busy populating its fields.",gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java,JsonTreeWriterTest.java,testNestedArray
12/30/2011 02:27:24,"=HYPERLINK(""https://github.com/google/gson/commit/4057b98babf5ecb7ad1583d23a90abe7b7fede12"", ""4057b98babf5ecb7ad1583d23a90abe7b7fede12"")","=HYPERLINK(""https://github.com/google/gson/commit/6ec6caa49da4fb28dcf51428dcb45838d98b7966"", ""6ec6caa49da4fb28dcf51428dcb45838d98b7966"")",jesse@swank.ca,"Implement all but the most difficult part of graph type adapter's deserialization. The catch is we want to return an instance that we don't have yet. It's on the stack, but we don't have a handle to it because it's inside the 'nextTypeAdapter' who is busy populating its fields.",gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java,JsonTreeWriterTest.java,testObject
12/30/2011 02:27:24,"=HYPERLINK(""https://github.com/google/gson/commit/4057b98babf5ecb7ad1583d23a90abe7b7fede12"", ""4057b98babf5ecb7ad1583d23a90abe7b7fede12"")","=HYPERLINK(""https://github.com/google/gson/commit/6ec6caa49da4fb28dcf51428dcb45838d98b7966"", ""6ec6caa49da4fb28dcf51428dcb45838d98b7966"")",jesse@swank.ca,"Implement all but the most difficult part of graph type adapter's deserialization. The catch is we want to return an instance that we don't have yet. It's on the stack, but we don't have a handle to it because it's inside the 'nextTypeAdapter' who is busy populating its fields.",gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java,JsonTreeWriterTest.java,testNestedObject
12/30/2011 02:27:24,"=HYPERLINK(""https://github.com/google/gson/commit/4057b98babf5ecb7ad1583d23a90abe7b7fede12"", ""4057b98babf5ecb7ad1583d23a90abe7b7fede12"")","=HYPERLINK(""https://github.com/google/gson/commit/6ec6caa49da4fb28dcf51428dcb45838d98b7966"", ""6ec6caa49da4fb28dcf51428dcb45838d98b7966"")",jesse@swank.ca,"Implement all but the most difficult part of graph type adapter's deserialization. The catch is we want to return an instance that we don't have yet. It's on the stack, but we don't have a handle to it because it's inside the 'nextTypeAdapter' who is busy populating its fields.",gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java,JsonTreeWriterTest.java,testWriteAfterClose
12/30/2011 02:27:24,"=HYPERLINK(""https://github.com/google/gson/commit/4057b98babf5ecb7ad1583d23a90abe7b7fede12"", ""4057b98babf5ecb7ad1583d23a90abe7b7fede12"")","=HYPERLINK(""https://github.com/google/gson/commit/6ec6caa49da4fb28dcf51428dcb45838d98b7966"", ""6ec6caa49da4fb28dcf51428dcb45838d98b7966"")",jesse@swank.ca,"Implement all but the most difficult part of graph type adapter's deserialization. The catch is we want to return an instance that we don't have yet. It's on the stack, but we don't have a handle to it because it's inside the 'nextTypeAdapter' who is busy populating its fields.",gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java,JsonTreeWriterTest.java,testPrematureClose
12/30/2011 02:27:24,"=HYPERLINK(""https://github.com/google/gson/commit/4057b98babf5ecb7ad1583d23a90abe7b7fede12"", ""4057b98babf5ecb7ad1583d23a90abe7b7fede12"")","=HYPERLINK(""https://github.com/google/gson/commit/6ec6caa49da4fb28dcf51428dcb45838d98b7966"", ""6ec6caa49da4fb28dcf51428dcb45838d98b7966"")",jesse@swank.ca,"Implement all but the most difficult part of graph type adapter's deserialization. The catch is we want to return an instance that we don't have yet. It's on the stack, but we don't have a handle to it because it's inside the 'nextTypeAdapter' who is busy populating its fields.",gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java,JsonTreeWriterTest.java,testSerializeNullsFalse
12/30/2011 02:27:24,"=HYPERLINK(""https://github.com/google/gson/commit/4057b98babf5ecb7ad1583d23a90abe7b7fede12"", ""4057b98babf5ecb7ad1583d23a90abe7b7fede12"")","=HYPERLINK(""https://github.com/google/gson/commit/6ec6caa49da4fb28dcf51428dcb45838d98b7966"", ""6ec6caa49da4fb28dcf51428dcb45838d98b7966"")",jesse@swank.ca,"Implement all but the most difficult part of graph type adapter's deserialization. The catch is we want to return an instance that we don't have yet. It's on the stack, but we don't have a handle to it because it's inside the 'nextTypeAdapter' who is busy populating its fields.",gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java,JsonTreeWriterTest.java,testSerializeNullsTrue
12/30/2011 02:27:24,"=HYPERLINK(""https://github.com/google/gson/commit/4057b98babf5ecb7ad1583d23a90abe7b7fede12"", ""4057b98babf5ecb7ad1583d23a90abe7b7fede12"")","=HYPERLINK(""https://github.com/google/gson/commit/6ec6caa49da4fb28dcf51428dcb45838d98b7966"", ""6ec6caa49da4fb28dcf51428dcb45838d98b7966"")",jesse@swank.ca,"Implement all but the most difficult part of graph type adapter's deserialization. The catch is we want to return an instance that we don't have yet. It's on the stack, but we don't have a handle to it because it's inside the 'nextTypeAdapter' who is busy populating its fields.",gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java,JsonTreeWriterTest.java,testEmptyWriter
12/30/2011 02:27:24,"=HYPERLINK(""https://github.com/google/gson/commit/4057b98babf5ecb7ad1583d23a90abe7b7fede12"", ""4057b98babf5ecb7ad1583d23a90abe7b7fede12"")","=HYPERLINK(""https://github.com/google/gson/commit/6ec6caa49da4fb28dcf51428dcb45838d98b7966"", ""6ec6caa49da4fb28dcf51428dcb45838d98b7966"")",jesse@swank.ca,"Implement all but the most difficult part of graph type adapter's deserialization. The catch is we want to return an instance that we don't have yet. It's on the stack, but we don't have a handle to it because it's inside the 'nextTypeAdapter' who is busy populating its fields.",gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java,JsonTreeWriterTest.java,testLenientNansAndInfinities
12/30/2011 02:27:24,"=HYPERLINK(""https://github.com/google/gson/commit/4057b98babf5ecb7ad1583d23a90abe7b7fede12"", ""4057b98babf5ecb7ad1583d23a90abe7b7fede12"")","=HYPERLINK(""https://github.com/google/gson/commit/6ec6caa49da4fb28dcf51428dcb45838d98b7966"", ""6ec6caa49da4fb28dcf51428dcb45838d98b7966"")",jesse@swank.ca,"Implement all but the most difficult part of graph type adapter's deserialization. The catch is we want to return an instance that we don't have yet. It's on the stack, but we don't have a handle to it because it's inside the 'nextTypeAdapter' who is busy populating its fields.",gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java,JsonTreeWriterTest.java,testStrictNansAndInfinities
12/30/2011 02:27:24,"=HYPERLINK(""https://github.com/google/gson/commit/4057b98babf5ecb7ad1583d23a90abe7b7fede12"", ""4057b98babf5ecb7ad1583d23a90abe7b7fede12"")","=HYPERLINK(""https://github.com/google/gson/commit/6ec6caa49da4fb28dcf51428dcb45838d98b7966"", ""6ec6caa49da4fb28dcf51428dcb45838d98b7966"")",jesse@swank.ca,"Implement all but the most difficult part of graph type adapter's deserialization. The catch is we want to return an instance that we don't have yet. It's on the stack, but we don't have a handle to it because it's inside the 'nextTypeAdapter' who is busy populating its fields.",gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java,JsonTreeWriterTest.java,testStrictBoxedNansAndInfinities
01/01/2012 07:42:44,"=HYPERLINK(""https://github.com/google/gson/commit/6cca23c172612aded9ee2996a5177cb7b9a84390"", ""6cca23c172612aded9ee2996a5177cb7b9a84390"")","=HYPERLINK(""https://github.com/google/gson/commit/d4a1e49e463091ed3793930815fde75bb766d030"", ""d4a1e49e463091ed3793930815fde75bb766d030"")",jesse@swank.ca,Get GraphAdapterBuilder working for serialization and deserialization using InstanceCreators to get a sneak peek at a value under construction.,extras/src/test/java/com/google/gson/graph/GraphTypeAdapterFactoryTest.java,GraphAdapterBuilderTest.java,testSerialization
01/01/2012 07:42:44,"=HYPERLINK(""https://github.com/google/gson/commit/6cca23c172612aded9ee2996a5177cb7b9a84390"", ""6cca23c172612aded9ee2996a5177cb7b9a84390"")","=HYPERLINK(""https://github.com/google/gson/commit/d4a1e49e463091ed3793930815fde75bb766d030"", ""d4a1e49e463091ed3793930815fde75bb766d030"")",jesse@swank.ca,Get GraphAdapterBuilder working for serialization and deserialization using InstanceCreators to get a sneak peek at a value under construction.,extras/src/test/java/com/google/gson/graph/GraphTypeAdapterFactoryTest.java,GraphAdapterBuilderTest.java,testDeserialization
01/01/2012 07:42:44,"=HYPERLINK(""https://github.com/google/gson/commit/6cca23c172612aded9ee2996a5177cb7b9a84390"", ""6cca23c172612aded9ee2996a5177cb7b9a84390"")","=HYPERLINK(""https://github.com/google/gson/commit/d4a1e49e463091ed3793930815fde75bb766d030"", ""d4a1e49e463091ed3793930815fde75bb766d030"")",jesse@swank.ca,Get GraphAdapterBuilder working for serialization and deserialization using InstanceCreators to get a sneak peek at a value under construction.,extras/src/test/java/com/google/gson/graph/GraphTypeAdapterFactoryTest.java,GraphAdapterBuilderTest.java,Roshambo
04/12/2012 13:15:56,"=HYPERLINK(""https://github.com/google/gson/commit/7b61e784c0c55870225637de639f43fe71cc2492"", ""7b61e784c0c55870225637de639f43fe71cc2492"")","=HYPERLINK(""https://github.com/google/gson/commit/6d351fea073bf0795dfba4ff8fc88f9557ca8979"", ""6d351fea073bf0795dfba4ff8fc88f9557ca8979"")",jesse@swank.ca,Remove testParameterizedMapSubclassDeserialization that never passed. We'll eventually add an equivalent to the extras/ package.,gson/src/test/java/com/google/gson/functional/MapTest.java,MapTest.java,testParameterizedMapSubclassDeserialization
06/29/2012 21:37:49,"=HYPERLINK(""https://github.com/google/gson/commit/dc4e43bb237c3878d12902e562ac352cbf463333"", ""dc4e43bb237c3878d12902e562ac352cbf463333"")","=HYPERLINK(""https://github.com/google/gson/commit/c3ada66749870df16fc549a16efe1905f2ee7989"", ""c3ada66749870df16fc549a16efe1905f2ee7989"")",jesse@swank.ca,"Permit users to define type adapters for primitive types and strings.
 
 Also expose an API to get the field naming strategy.",gson/src/test/java/com/google/gson/GsonBuilderTest.java,GsonBuilderTest.java,testRegisterTypeAdapterForUnsupportedType
06/29/2012 21:37:49,"=HYPERLINK(""https://github.com/google/gson/commit/dc4e43bb237c3878d12902e562ac352cbf463333"", ""dc4e43bb237c3878d12902e562ac352cbf463333"")","=HYPERLINK(""https://github.com/google/gson/commit/c3ada66749870df16fc549a16efe1905f2ee7989"", ""c3ada66749870df16fc549a16efe1905f2ee7989"")",jesse@swank.ca,"Permit users to define type adapters for primitive types and strings.
 
 Also expose an API to get the field naming strategy.",gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,CustomTypeAdaptersTest.java,testCustomSerializerForbiddenForPrimitives
06/29/2012 21:37:49,"=HYPERLINK(""https://github.com/google/gson/commit/dc4e43bb237c3878d12902e562ac352cbf463333"", ""dc4e43bb237c3878d12902e562ac352cbf463333"")","=HYPERLINK(""https://github.com/google/gson/commit/c3ada66749870df16fc549a16efe1905f2ee7989"", ""c3ada66749870df16fc549a16efe1905f2ee7989"")",jesse@swank.ca,"Permit users to define type adapters for primitive types and strings.
 
 Also expose an API to get the field naming strategy.",gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,CustomTypeAdaptersTest.java,testCustomDeserializerForbiddenForPrimitives
06/29/2012 21:37:49,"=HYPERLINK(""https://github.com/google/gson/commit/dc4e43bb237c3878d12902e562ac352cbf463333"", ""dc4e43bb237c3878d12902e562ac352cbf463333"")","=HYPERLINK(""https://github.com/google/gson/commit/c3ada66749870df16fc549a16efe1905f2ee7989"", ""c3ada66749870df16fc549a16efe1905f2ee7989"")",jesse@swank.ca,"Permit users to define type adapters for primitive types and strings.
 
 Also expose an API to get the field naming strategy.",gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,DelegateTypeAdapterTest.java,testDelegateNotInvokedOnStrings
07/02/2012 15:32:38,"=HYPERLINK(""https://github.com/google/gson/commit/4816941f0d76f2dc5d5b0b7b5fb3206d6fef641d"", ""4816941f0d76f2dc5d5b0b7b5fb3206d6fef641d"")","=HYPERLINK(""https://github.com/google/gson/commit/ae9e63fc542dce5e1aedd461f36b1028392156fe"", ""ae9e63fc542dce5e1aedd461f36b1028392156fe"")",jesse@swank.ca,Address code review comments on r1154,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,DelegateTypeAdapterTest.java,testDelegateInvokedOnObjectsButNotOnPrimitives
08/26/2012 17:06:57,"=HYPERLINK(""https://github.com/google/gson/commit/085856c12843a6b58d6de59672d37da47afdaa72"", ""085856c12843a6b58d6de59672d37da47afdaa72"")","=HYPERLINK(""https://github.com/google/gson/commit/e7bfd0c97d2196047bad996b6625d3bb197aae13"", ""e7bfd0c97d2196047bad996b6625d3bb197aae13"")",jesse@swank.ca,"Don't leave the JsonReader in an invalid state if nextInt(), nextDouble() or nextLong() fails. We now save a reference to the string before we parse it, and keep that referenced value if parsing fails.",gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,JsonReaderTest.java,testPeekLargerThanLongMinValue
08/26/2012 21:34:52,"=HYPERLINK(""https://github.com/google/gson/commit/4c2980e6ff798f3209f00292ead5060c402d9774"", ""4c2980e6ff798f3209f00292ead5060c402d9774"")","=HYPERLINK(""https://github.com/google/gson/commit/c7cb503cdb093cf7bb78afdfe125dd2255f029ad"", ""c7cb503cdb093cf7bb78afdfe125dd2255f029ad"")",jesse@swank.ca,Fix a bug in integer parsing.,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,JsonReaderTest.java,testPeekLargerThanLongMinValue
09/02/2012 15:12:19,"=HYPERLINK(""https://github.com/google/gson/commit/b3b919770bd6e1aa14abc9ee1a1406af251e1d1c"", ""b3b919770bd6e1aa14abc9ee1a1406af251e1d1c"")","=HYPERLINK(""https://github.com/google/gson/commit/3920d95fac0520c288e6b5f626ae0724a32f49ca"", ""3920d95fac0520c288e6b5f626ae0724a32f49ca"")",jesse@swank.ca,Change number parsing to use one big loop. This changes it to return JsonToken.STRING for very long (>8k digits) numbers.,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,JsonReaderTest.java,testNumberWithOctalPrefix
09/02/2012 15:12:19,"=HYPERLINK(""https://github.com/google/gson/commit/b3b919770bd6e1aa14abc9ee1a1406af251e1d1c"", ""b3b919770bd6e1aa14abc9ee1a1406af251e1d1c"")","=HYPERLINK(""https://github.com/google/gson/commit/3920d95fac0520c288e6b5f626ae0724a32f49ca"", ""3920d95fac0520c288e6b5f626ae0724a32f49ca"")",jesse@swank.ca,Change number parsing to use one big loop. This changes it to return JsonToken.STRING for very long (>8k digits) numbers.,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,JsonReaderTest.java,testPeekLargerThanLongMaxValue
09/02/2012 15:12:19,"=HYPERLINK(""https://github.com/google/gson/commit/b3b919770bd6e1aa14abc9ee1a1406af251e1d1c"", ""b3b919770bd6e1aa14abc9ee1a1406af251e1d1c"")","=HYPERLINK(""https://github.com/google/gson/commit/3920d95fac0520c288e6b5f626ae0724a32f49ca"", ""3920d95fac0520c288e6b5f626ae0724a32f49ca"")",jesse@swank.ca,Change number parsing to use one big loop. This changes it to return JsonToken.STRING for very long (>8k digits) numbers.,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,JsonReaderTest.java,testPeekLargerThanLongMinValue
09/02/2012 15:12:19,"=HYPERLINK(""https://github.com/google/gson/commit/b3b919770bd6e1aa14abc9ee1a1406af251e1d1c"", ""b3b919770bd6e1aa14abc9ee1a1406af251e1d1c"")","=HYPERLINK(""https://github.com/google/gson/commit/3920d95fac0520c288e6b5f626ae0724a32f49ca"", ""3920d95fac0520c288e6b5f626ae0724a32f49ca"")",jesse@swank.ca,Change number parsing to use one big loop. This changes it to return JsonToken.STRING for very long (>8k digits) numbers.,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,JsonReaderTest.java,testVeryLongNumber
09/04/2012 16:10:12,"=HYPERLINK(""https://github.com/google/gson/commit/d1ff7bb397d10ab60136ebaedb5db9c7009cbeca"", ""d1ff7bb397d10ab60136ebaedb5db9c7009cbeca"")","=HYPERLINK(""https://github.com/google/gson/commit/411c5c0b502401c7af381a64e94253972b7db5f2"", ""411c5c0b502401c7af381a64e94253972b7db5f2"")",inder123@gmail.com,Deleted spurious directory gson-codegen. The real codegen code is in trunk/codegen,gson/gson-codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,CodeGenFunctionalTest.java,testGeneratedJson
09/16/2012 22:30:20,"=HYPERLINK(""https://github.com/google/gson/commit/2fef83799de82f67f2124908e982c773c49a6153"", ""2fef83799de82f67f2124908e982c773c49a6153"")","=HYPERLINK(""https://github.com/google/gson/commit/aceadaecf18cf7ad011ae3040aa3fe570559902d"", ""aceadaecf18cf7ad011ae3040aa3fe570559902d"")",jesse@swank.ca,"Optimizations and bug fixes for LinkedHashTreeMap.

The most interesting optimization is to replace ArrayDeque with a manual linked list that reuses the nodes 'parent' field. These optimizations save about 20%.",gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedHashTreeMapTest.java,testIterationOrder
09/16/2012 22:30:20,"=HYPERLINK(""https://github.com/google/gson/commit/2fef83799de82f67f2124908e982c773c49a6153"", ""2fef83799de82f67f2124908e982c773c49a6153"")","=HYPERLINK(""https://github.com/google/gson/commit/aceadaecf18cf7ad011ae3040aa3fe570559902d"", ""aceadaecf18cf7ad011ae3040aa3fe570559902d"")",jesse@swank.ca,"Optimizations and bug fixes for LinkedHashTreeMap.

The most interesting optimization is to replace ArrayDeque with a manual linked list that reuses the nodes 'parent' field. These optimizations save about 20%.",gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedHashTreeMapTest.java,testRemoveRootDoesNotDoubleUnlink
09/16/2012 22:30:20,"=HYPERLINK(""https://github.com/google/gson/commit/2fef83799de82f67f2124908e982c773c49a6153"", ""2fef83799de82f67f2124908e982c773c49a6153"")","=HYPERLINK(""https://github.com/google/gson/commit/aceadaecf18cf7ad011ae3040aa3fe570559902d"", ""aceadaecf18cf7ad011ae3040aa3fe570559902d"")",jesse@swank.ca,"Optimizations and bug fixes for LinkedHashTreeMap.

The most interesting optimization is to replace ArrayDeque with a manual linked list that reuses the nodes 'parent' field. These optimizations save about 20%.",gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedHashTreeMapTest.java,testPutNullKeyFails
09/16/2012 22:30:20,"=HYPERLINK(""https://github.com/google/gson/commit/2fef83799de82f67f2124908e982c773c49a6153"", ""2fef83799de82f67f2124908e982c773c49a6153"")","=HYPERLINK(""https://github.com/google/gson/commit/aceadaecf18cf7ad011ae3040aa3fe570559902d"", ""aceadaecf18cf7ad011ae3040aa3fe570559902d"")",jesse@swank.ca,"Optimizations and bug fixes for LinkedHashTreeMap.

The most interesting optimization is to replace ArrayDeque with a manual linked list that reuses the nodes 'parent' field. These optimizations save about 20%.",gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedHashTreeMapTest.java,testContainsNullKeyFails
09/16/2012 22:30:20,"=HYPERLINK(""https://github.com/google/gson/commit/2fef83799de82f67f2124908e982c773c49a6153"", ""2fef83799de82f67f2124908e982c773c49a6153"")","=HYPERLINK(""https://github.com/google/gson/commit/aceadaecf18cf7ad011ae3040aa3fe570559902d"", ""aceadaecf18cf7ad011ae3040aa3fe570559902d"")",jesse@swank.ca,"Optimizations and bug fixes for LinkedHashTreeMap.

The most interesting optimization is to replace ArrayDeque with a manual linked list that reuses the nodes 'parent' field. These optimizations save about 20%.",gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedHashTreeMapTest.java,testContainsNonComparableKeyThrows
09/16/2012 22:30:20,"=HYPERLINK(""https://github.com/google/gson/commit/2fef83799de82f67f2124908e982c773c49a6153"", ""2fef83799de82f67f2124908e982c773c49a6153"")","=HYPERLINK(""https://github.com/google/gson/commit/aceadaecf18cf7ad011ae3040aa3fe570559902d"", ""aceadaecf18cf7ad011ae3040aa3fe570559902d"")",jesse@swank.ca,"Optimizations and bug fixes for LinkedHashTreeMap.

The most interesting optimization is to replace ArrayDeque with a manual linked list that reuses the nodes 'parent' field. These optimizations save about 20%.",gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedHashTreeMapTest.java,testClear
09/16/2012 22:30:20,"=HYPERLINK(""https://github.com/google/gson/commit/2fef83799de82f67f2124908e982c773c49a6153"", ""2fef83799de82f67f2124908e982c773c49a6153"")","=HYPERLINK(""https://github.com/google/gson/commit/aceadaecf18cf7ad011ae3040aa3fe570559902d"", ""aceadaecf18cf7ad011ae3040aa3fe570559902d"")",jesse@swank.ca,"Optimizations and bug fixes for LinkedHashTreeMap.

The most interesting optimization is to replace ArrayDeque with a manual linked list that reuses the nodes 'parent' field. These optimizations save about 20%.",gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedHashTreeMapTest.java,testAvlWalker
09/16/2012 22:30:20,"=HYPERLINK(""https://github.com/google/gson/commit/2fef83799de82f67f2124908e982c773c49a6153"", ""2fef83799de82f67f2124908e982c773c49a6153"")","=HYPERLINK(""https://github.com/google/gson/commit/aceadaecf18cf7ad011ae3040aa3fe570559902d"", ""aceadaecf18cf7ad011ae3040aa3fe570559902d"")",jesse@swank.ca,"Optimizations and bug fixes for LinkedHashTreeMap.

The most interesting optimization is to replace ArrayDeque with a manual linked list that reuses the nodes 'parent' field. These optimizations save about 20%.",gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedHashTreeMapTest.java,assertAvlWalker
09/16/2012 22:30:20,"=HYPERLINK(""https://github.com/google/gson/commit/2fef83799de82f67f2124908e982c773c49a6153"", ""2fef83799de82f67f2124908e982c773c49a6153"")","=HYPERLINK(""https://github.com/google/gson/commit/aceadaecf18cf7ad011ae3040aa3fe570559902d"", ""aceadaecf18cf7ad011ae3040aa3fe570559902d"")",jesse@swank.ca,"Optimizations and bug fixes for LinkedHashTreeMap.

The most interesting optimization is to replace ArrayDeque with a manual linked list that reuses the nodes 'parent' field. These optimizations save about 20%.",gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedHashTreeMapTest.java,testAvlBuilder
09/16/2012 22:30:20,"=HYPERLINK(""https://github.com/google/gson/commit/2fef83799de82f67f2124908e982c773c49a6153"", ""2fef83799de82f67f2124908e982c773c49a6153"")","=HYPERLINK(""https://github.com/google/gson/commit/aceadaecf18cf7ad011ae3040aa3fe570559902d"", ""aceadaecf18cf7ad011ae3040aa3fe570559902d"")",jesse@swank.ca,"Optimizations and bug fixes for LinkedHashTreeMap.

The most interesting optimization is to replace ArrayDeque with a manual linked list that reuses the nodes 'parent' field. These optimizations save about 20%.",gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedHashTreeMapTest.java,assertAvlBuilder
09/16/2012 22:30:20,"=HYPERLINK(""https://github.com/google/gson/commit/2fef83799de82f67f2124908e982c773c49a6153"", ""2fef83799de82f67f2124908e982c773c49a6153"")","=HYPERLINK(""https://github.com/google/gson/commit/aceadaecf18cf7ad011ae3040aa3fe570559902d"", ""aceadaecf18cf7ad011ae3040aa3fe570559902d"")",jesse@swank.ca,"Optimizations and bug fixes for LinkedHashTreeMap.

The most interesting optimization is to replace ArrayDeque with a manual linked list that reuses the nodes 'parent' field. These optimizations save about 20%.",gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedHashTreeMapTest.java,testDoubleCapacity
09/16/2012 22:30:20,"=HYPERLINK(""https://github.com/google/gson/commit/2fef83799de82f67f2124908e982c773c49a6153"", ""2fef83799de82f67f2124908e982c773c49a6153"")","=HYPERLINK(""https://github.com/google/gson/commit/aceadaecf18cf7ad011ae3040aa3fe570559902d"", ""aceadaecf18cf7ad011ae3040aa3fe570559902d"")",jesse@swank.ca,"Optimizations and bug fixes for LinkedHashTreeMap.

The most interesting optimization is to replace ArrayDeque with a manual linked list that reuses the nodes 'parent' field. These optimizations save about 20%.",gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedHashTreeMapTest.java,node
09/16/2012 22:30:20,"=HYPERLINK(""https://github.com/google/gson/commit/2fef83799de82f67f2124908e982c773c49a6153"", ""2fef83799de82f67f2124908e982c773c49a6153"")","=HYPERLINK(""https://github.com/google/gson/commit/aceadaecf18cf7ad011ae3040aa3fe570559902d"", ""aceadaecf18cf7ad011ae3040aa3fe570559902d"")",jesse@swank.ca,"Optimizations and bug fixes for LinkedHashTreeMap.

The most interesting optimization is to replace ArrayDeque with a manual linked list that reuses the nodes 'parent' field. These optimizations save about 20%.",gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedHashTreeMapTest.java,node
09/16/2012 22:30:20,"=HYPERLINK(""https://github.com/google/gson/commit/2fef83799de82f67f2124908e982c773c49a6153"", ""2fef83799de82f67f2124908e982c773c49a6153"")","=HYPERLINK(""https://github.com/google/gson/commit/aceadaecf18cf7ad011ae3040aa3fe570559902d"", ""aceadaecf18cf7ad011ae3040aa3fe570559902d"")",jesse@swank.ca,"Optimizations and bug fixes for LinkedHashTreeMap.

The most interesting optimization is to replace ArrayDeque with a manual linked list that reuses the nodes 'parent' field. These optimizations save about 20%.",gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedHashTreeMapTest.java,toString
09/16/2012 22:30:20,"=HYPERLINK(""https://github.com/google/gson/commit/2fef83799de82f67f2124908e982c773c49a6153"", ""2fef83799de82f67f2124908e982c773c49a6153"")","=HYPERLINK(""https://github.com/google/gson/commit/aceadaecf18cf7ad011ae3040aa3fe570559902d"", ""aceadaecf18cf7ad011ae3040aa3fe570559902d"")",jesse@swank.ca,"Optimizations and bug fixes for LinkedHashTreeMap.

The most interesting optimization is to replace ArrayDeque with a manual linked list that reuses the nodes 'parent' field. These optimizations save about 20%.",gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedHashTreeMapTest.java,assertIterationOrder
10/10/2012 22:15:49,"=HYPERLINK(""https://github.com/google/gson/commit/14f16e2d0c3c60338d69a3e0f653b8b876fdc1be"", ""14f16e2d0c3c60338d69a3e0f653b8b876fdc1be"")","=HYPERLINK(""https://github.com/google/gson/commit/c950d2846034e853936fb087e724a721fdd983ae"", ""c950d2846034e853936fb087e724a721fdd983ae"")",joel.leitch@gmail.com,Adding Red-Black Tree implementation and tying it into the Gson bindings.,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,testJsonObjectDeerialization
10/10/2012 22:15:49,"=HYPERLINK(""https://github.com/google/gson/commit/14f16e2d0c3c60338d69a3e0f653b8b876fdc1be"", ""14f16e2d0c3c60338d69a3e0f653b8b876fdc1be"")","=HYPERLINK(""https://github.com/google/gson/commit/c950d2846034e853936fb087e724a721fdd983ae"", ""c950d2846034e853936fb087e724a721fdd983ae"")",joel.leitch@gmail.com,Adding Red-Black Tree implementation and tying it into the Gson bindings.,gson/src/test/java/com/google/gson/internal/StringMapTest.java,StringMapTest.java,testFallbackFromTooManyCollisions
10/10/2012 22:15:49,"=HYPERLINK(""https://github.com/google/gson/commit/14f16e2d0c3c60338d69a3e0f653b8b876fdc1be"", ""14f16e2d0c3c60338d69a3e0f653b8b876fdc1be"")","=HYPERLINK(""https://github.com/google/gson/commit/c950d2846034e853936fb087e724a721fdd983ae"", ""c950d2846034e853936fb087e724a721fdd983ae"")",joel.leitch@gmail.com,Adding Red-Black Tree implementation and tying it into the Gson bindings.,gson/src/test/java/com/google/gson/internal/StringMapTest.java,StringMapTest.java,collidingStrings
10/11/2012 15:29:40,"=HYPERLINK(""https://github.com/google/gson/commit/714ac8e64399eb156abc4ce3e517185c098fb7e6"", ""714ac8e64399eb156abc4ce3e517185c098fb7e6"")","=HYPERLINK(""https://github.com/google/gson/commit/c25278b4d6036a0e0ae758b13194813936d9e911"", ""c25278b4d6036a0e0ae758b13194813936d9e911"")",inder123@gmail.com,added tests for using intercept in fields and lists. These tests are currently failing.,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,InterceptorTest.java,testPostDeserialize
10/11/2012 15:29:40,"=HYPERLINK(""https://github.com/google/gson/commit/714ac8e64399eb156abc4ce3e517185c098fb7e6"", ""714ac8e64399eb156abc4ce3e517185c098fb7e6"")","=HYPERLINK(""https://github.com/google/gson/commit/c25278b4d6036a0e0ae758b13194813936d9e911"", ""c25278b4d6036a0e0ae758b13194813936d9e911"")",inder123@gmail.com,added tests for using intercept in fields and lists. These tests are currently failing.,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,InterceptorTest.java,postDeserialize
10/17/2012 21:37:43,"=HYPERLINK(""https://github.com/google/gson/commit/fd4fbe41322c39329245b6a1311ae42bd10827ad"", ""fd4fbe41322c39329245b6a1311ae42bd10827ad"")","=HYPERLINK(""https://github.com/google/gson/commit/714ac8e64399eb156abc4ce3e517185c098fb7e6"", ""714ac8e64399eb156abc4ce3e517185c098fb7e6"")",inder123@gmail.com,"Added support for collections, maps, and arbitrary depth of type adapters for Intercept annotation.
Added more tests for the features.",gson/src/test/java/com/google/gson/functional/InterceptorTest.java,InterceptorTest.java,testPostDeserializeTopLevelClass
10/17/2012 21:37:43,"=HYPERLINK(""https://github.com/google/gson/commit/fd4fbe41322c39329245b6a1311ae42bd10827ad"", ""fd4fbe41322c39329245b6a1311ae42bd10827ad"")","=HYPERLINK(""https://github.com/google/gson/commit/714ac8e64399eb156abc4ce3e517185c098fb7e6"", ""714ac8e64399eb156abc4ce3e517185c098fb7e6"")",inder123@gmail.com,"Added support for collections, maps, and arbitrary depth of type adapters for Intercept annotation.
Added more tests for the features.",gson/src/test/java/com/google/gson/functional/InterceptorTest.java,InterceptorTest.java,testPostDeserializeList
10/17/2012 21:37:43,"=HYPERLINK(""https://github.com/google/gson/commit/fd4fbe41322c39329245b6a1311ae42bd10827ad"", ""fd4fbe41322c39329245b6a1311ae42bd10827ad"")","=HYPERLINK(""https://github.com/google/gson/commit/714ac8e64399eb156abc4ce3e517185c098fb7e6"", ""714ac8e64399eb156abc4ce3e517185c098fb7e6"")",inder123@gmail.com,"Added support for collections, maps, and arbitrary depth of type adapters for Intercept annotation.
Added more tests for the features.",gson/src/test/java/com/google/gson/functional/InterceptorTest.java,InterceptorTest.java,testPostDeserializeField
12/20/2012 01:57:17,"=HYPERLINK(""https://github.com/google/gson/commit/6d90f0d894c468bc2f5b1e138ef21174ae644a0b"", ""6d90f0d894c468bc2f5b1e138ef21174ae644a0b"")","=HYPERLINK(""https://github.com/google/gson/commit/b4d51db776325cd0da58d96d973175dc1b86b256"", ""b4d51db776325cd0da58d96d973175dc1b86b256"")",joel.leitch@gmail.com,Make JsonElement TypeAdapterFactory a type hierarchy factory.,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,testJsonArrayDeerialization
12/20/2012 01:57:17,"=HYPERLINK(""https://github.com/google/gson/commit/6d90f0d894c468bc2f5b1e138ef21174ae644a0b"", ""6d90f0d894c468bc2f5b1e138ef21174ae644a0b"")","=HYPERLINK(""https://github.com/google/gson/commit/b4d51db776325cd0da58d96d973175dc1b86b256"", ""b4d51db776325cd0da58d96d973175dc1b86b256"")",joel.leitch@gmail.com,Make JsonElement TypeAdapterFactory a type hierarchy factory.,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,testJsonNullDeerialization
12/20/2012 01:57:17,"=HYPERLINK(""https://github.com/google/gson/commit/6d90f0d894c468bc2f5b1e138ef21174ae644a0b"", ""6d90f0d894c468bc2f5b1e138ef21174ae644a0b"")","=HYPERLINK(""https://github.com/google/gson/commit/b4d51db776325cd0da58d96d973175dc1b86b256"", ""b4d51db776325cd0da58d96d973175dc1b86b256"")",joel.leitch@gmail.com,Make JsonElement TypeAdapterFactory a type hierarchy factory.,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,testNullJsonElementDeserialization
04/04/2013 16:31:23,"=HYPERLINK(""https://github.com/google/gson/commit/af6aa5f782dcfc38a060d2de9476337e14ffedcb"", ""af6aa5f782dcfc38a060d2de9476337e14ffedcb"")","=HYPERLINK(""https://github.com/google/gson/commit/7d53113ebc9ef6921c6238f013aabd10890611a0"", ""7d53113ebc9ef6921c6238f013aabd10890611a0"")",joel.leitch@gmail.com,Use the LinkedHashTreeMap instead of LinkedTreeMap and delete the LinkedTreeMap version.,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedTreeMapTest.java,testPutAndGet
04/04/2013 16:31:23,"=HYPERLINK(""https://github.com/google/gson/commit/af6aa5f782dcfc38a060d2de9476337e14ffedcb"", ""af6aa5f782dcfc38a060d2de9476337e14ffedcb"")","=HYPERLINK(""https://github.com/google/gson/commit/7d53113ebc9ef6921c6238f013aabd10890611a0"", ""7d53113ebc9ef6921c6238f013aabd10890611a0"")",joel.leitch@gmail.com,Use the LinkedHashTreeMap instead of LinkedTreeMap and delete the LinkedTreeMap version.,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedTreeMapTest.java,testGetAndContainsNullKey
04/04/2013 16:31:23,"=HYPERLINK(""https://github.com/google/gson/commit/af6aa5f782dcfc38a060d2de9476337e14ffedcb"", ""af6aa5f782dcfc38a060d2de9476337e14ffedcb"")","=HYPERLINK(""https://github.com/google/gson/commit/7d53113ebc9ef6921c6238f013aabd10890611a0"", ""7d53113ebc9ef6921c6238f013aabd10890611a0"")",joel.leitch@gmail.com,Use the LinkedHashTreeMap instead of LinkedTreeMap and delete the LinkedTreeMap version.,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedTreeMapTest.java,testDisallowPutForNullKeys
04/04/2013 16:31:23,"=HYPERLINK(""https://github.com/google/gson/commit/af6aa5f782dcfc38a060d2de9476337e14ffedcb"", ""af6aa5f782dcfc38a060d2de9476337e14ffedcb"")","=HYPERLINK(""https://github.com/google/gson/commit/7d53113ebc9ef6921c6238f013aabd10890611a0"", ""7d53113ebc9ef6921c6238f013aabd10890611a0"")",joel.leitch@gmail.com,Use the LinkedHashTreeMap instead of LinkedTreeMap and delete the LinkedTreeMap version.,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedTreeMapTest.java,testSingleElement
04/04/2013 16:31:23,"=HYPERLINK(""https://github.com/google/gson/commit/af6aa5f782dcfc38a060d2de9476337e14ffedcb"", ""af6aa5f782dcfc38a060d2de9476337e14ffedcb"")","=HYPERLINK(""https://github.com/google/gson/commit/7d53113ebc9ef6921c6238f013aabd10890611a0"", ""7d53113ebc9ef6921c6238f013aabd10890611a0"")",joel.leitch@gmail.com,Use the LinkedHashTreeMap instead of LinkedTreeMap and delete the LinkedTreeMap version.,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedTreeMapTest.java,testAddAndRemove
04/04/2013 16:31:23,"=HYPERLINK(""https://github.com/google/gson/commit/af6aa5f782dcfc38a060d2de9476337e14ffedcb"", ""af6aa5f782dcfc38a060d2de9476337e14ffedcb"")","=HYPERLINK(""https://github.com/google/gson/commit/7d53113ebc9ef6921c6238f013aabd10890611a0"", ""7d53113ebc9ef6921c6238f013aabd10890611a0"")",joel.leitch@gmail.com,Use the LinkedHashTreeMap instead of LinkedTreeMap and delete the LinkedTreeMap version.,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedTreeMapTest.java,testInsertionOrderPreserved
04/04/2013 16:31:23,"=HYPERLINK(""https://github.com/google/gson/commit/af6aa5f782dcfc38a060d2de9476337e14ffedcb"", ""af6aa5f782dcfc38a060d2de9476337e14ffedcb"")","=HYPERLINK(""https://github.com/google/gson/commit/7d53113ebc9ef6921c6238f013aabd10890611a0"", ""7d53113ebc9ef6921c6238f013aabd10890611a0"")",joel.leitch@gmail.com,Use the LinkedHashTreeMap instead of LinkedTreeMap and delete the LinkedTreeMap version.,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedTreeMapTest.java,testEqualsAndHashCode
04/04/2013 16:31:23,"=HYPERLINK(""https://github.com/google/gson/commit/af6aa5f782dcfc38a060d2de9476337e14ffedcb"", ""af6aa5f782dcfc38a060d2de9476337e14ffedcb"")","=HYPERLINK(""https://github.com/google/gson/commit/7d53113ebc9ef6921c6238f013aabd10890611a0"", ""7d53113ebc9ef6921c6238f013aabd10890611a0"")",joel.leitch@gmail.com,Use the LinkedHashTreeMap instead of LinkedTreeMap and delete the LinkedTreeMap version.,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,LinkedTreeMapTest.java,assertIterationOrder
05/03/2013 10:13:30,"=HYPERLINK(""https://github.com/google/gson/commit/b88e0e9395fd153deea35272bef5c968fcb863a7"", ""b88e0e9395fd153deea35272bef5c968fcb863a7"")","=HYPERLINK(""https://github.com/google/gson/commit/8e8bb9c688c0ca3ba0d9ca5ddb594093eb8c8f0f"", ""8e8bb9c688c0ca3ba0d9ca5ddb594093eb8c8f0f"")",joel.leitch@gmail.com,Test to expose edge doubling and rehashing bug in LinkedHashTreeMap.,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testContainsNullKeyFails
05/13/2013 16:01:33,"=HYPERLINK(""https://github.com/google/gson/commit/88343438615a4ed983f3b74f53e8411d7742097d"", ""88343438615a4ed983f3b74f53e8411d7742097d"")","=HYPERLINK(""https://github.com/google/gson/commit/2d5cab1b7b1f2845954f851106c138137e91bfea"", ""2d5cab1b7b1f2845954f851106c138137e91bfea"")",joel.leitch@gmail.com,"Moving broken class to ""test"" package for now and disabling broken test.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testForceDoublingAndRehash
05/14/2013 16:43:20,"=HYPERLINK(""https://github.com/google/gson/commit/1840466704210c3c6c2d1d0bf06d1ff88c19c08d"", ""1840466704210c3c6c2d1d0bf06d1ff88c19c08d"")","=HYPERLINK(""https://github.com/google/gson/commit/d2b660570e1a68653e02de210b0c1221616127e9"", ""d2b660570e1a68653e02de210b0c1221616127e9"")",jesse@swank.ca,"Fix a nasty bug where elements in LinkedHashTreeMap could be dropped.

The underlying problem is that the doubleCapacity function would drop the parent links when all nodes ended up on the same side in a doubling. This was caused by the fact that the AvlIterator was destructive on parent nodes, and we weren't putting them back together with the AvlBuilder. This removes an incorrect optimization and fixes the problem.

Also move LinkedHashTreeMap back into main from test.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testForceDoublingAndRehash
03/09/2014 01:28:04,"=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")","=HYPERLINK(""https://github.com/google/gson/commit/67d512ee7db6eca139622591cd7ea5e46fa39c01"", ""67d512ee7db6eca139622591cd7ea5e46fa39c01"")",inder123@gmail.com,Added support for JsonAdapter annotation on fields,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationTest.java,JsonAdapterAnnotationOnClassesTest.java,testJsonAdapterInvoked
03/09/2014 01:28:04,"=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")","=HYPERLINK(""https://github.com/google/gson/commit/67d512ee7db6eca139622591cd7ea5e46fa39c01"", ""67d512ee7db6eca139622591cd7ea5e46fa39c01"")",inder123@gmail.com,Added support for JsonAdapter annotation on fields,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationTest.java,JsonAdapterAnnotationOnClassesTest.java,testRegisteredAdapterOverridesJsonAdapter
03/09/2014 01:28:04,"=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")","=HYPERLINK(""https://github.com/google/gson/commit/67d512ee7db6eca139622591cd7ea5e46fa39c01"", ""67d512ee7db6eca139622591cd7ea5e46fa39c01"")",inder123@gmail.com,Added support for JsonAdapter annotation on fields,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationTest.java,JsonAdapterAnnotationOnClassesTest.java,testRegisteredSerializerOverridesJsonAdapter
03/09/2014 01:28:04,"=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")","=HYPERLINK(""https://github.com/google/gson/commit/67d512ee7db6eca139622591cd7ea5e46fa39c01"", ""67d512ee7db6eca139622591cd7ea5e46fa39c01"")",inder123@gmail.com,Added support for JsonAdapter annotation on fields,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationTest.java,JsonAdapterAnnotationOnClassesTest.java,testRegisteredDeserializerOverridesJsonAdapter
03/09/2014 01:28:04,"=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")","=HYPERLINK(""https://github.com/google/gson/commit/67d512ee7db6eca139622591cd7ea5e46fa39c01"", ""67d512ee7db6eca139622591cd7ea5e46fa39c01"")",inder123@gmail.com,Added support for JsonAdapter annotation on fields,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationTest.java,JsonAdapterAnnotationOnClassesTest.java,testIncorrectTypeAdapterFails
03/09/2014 01:28:04,"=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")","=HYPERLINK(""https://github.com/google/gson/commit/67d512ee7db6eca139622591cd7ea5e46fa39c01"", ""67d512ee7db6eca139622591cd7ea5e46fa39c01"")",inder123@gmail.com,Added support for JsonAdapter annotation on fields,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationTest.java,JsonAdapterAnnotationOnClassesTest.java,testSuperclassTypeAdapterNotInvoked
03/09/2014 01:28:04,"=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")","=HYPERLINK(""https://github.com/google/gson/commit/67d512ee7db6eca139622591cd7ea5e46fa39c01"", ""67d512ee7db6eca139622591cd7ea5e46fa39c01"")",inder123@gmail.com,Added support for JsonAdapter annotation on fields,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationTest.java,JsonAdapterAnnotationOnClassesTest.java,A
03/09/2014 01:28:04,"=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")","=HYPERLINK(""https://github.com/google/gson/commit/67d512ee7db6eca139622591cd7ea5e46fa39c01"", ""67d512ee7db6eca139622591cd7ea5e46fa39c01"")",inder123@gmail.com,Added support for JsonAdapter annotation on fields,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationTest.java,JsonAdapterAnnotationOnClassesTest.java,write
03/09/2014 01:28:04,"=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")","=HYPERLINK(""https://github.com/google/gson/commit/67d512ee7db6eca139622591cd7ea5e46fa39c01"", ""67d512ee7db6eca139622591cd7ea5e46fa39c01"")",inder123@gmail.com,Added support for JsonAdapter annotation on fields,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationTest.java,JsonAdapterAnnotationOnClassesTest.java,read
03/09/2014 01:28:04,"=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")","=HYPERLINK(""https://github.com/google/gson/commit/67d512ee7db6eca139622591cd7ea5e46fa39c01"", ""67d512ee7db6eca139622591cd7ea5e46fa39c01"")",inder123@gmail.com,Added support for JsonAdapter annotation on fields,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationTest.java,JsonAdapterAnnotationOnClassesTest.java,B
03/09/2014 01:28:04,"=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")","=HYPERLINK(""https://github.com/google/gson/commit/67d512ee7db6eca139622591cd7ea5e46fa39c01"", ""67d512ee7db6eca139622591cd7ea5e46fa39c01"")",inder123@gmail.com,Added support for JsonAdapter annotation on fields,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationTest.java,JsonAdapterAnnotationOnClassesTest.java,ClassWithIncorrectJsonAdapter
03/09/2014 01:28:04,"=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")","=HYPERLINK(""https://github.com/google/gson/commit/67d512ee7db6eca139622591cd7ea5e46fa39c01"", ""67d512ee7db6eca139622591cd7ea5e46fa39c01"")",inder123@gmail.com,Added support for JsonAdapter annotation on fields,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationTest.java,JsonAdapterAnnotationOnClassesTest.java,User
03/09/2014 01:28:04,"=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")","=HYPERLINK(""https://github.com/google/gson/commit/67d512ee7db6eca139622591cd7ea5e46fa39c01"", ""67d512ee7db6eca139622591cd7ea5e46fa39c01"")",inder123@gmail.com,Added support for JsonAdapter annotation on fields,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationTest.java,JsonAdapterAnnotationOnClassesTest.java,write
03/09/2014 01:28:04,"=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")","=HYPERLINK(""https://github.com/google/gson/commit/67d512ee7db6eca139622591cd7ea5e46fa39c01"", ""67d512ee7db6eca139622591cd7ea5e46fa39c01"")",inder123@gmail.com,Added support for JsonAdapter annotation on fields,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationTest.java,JsonAdapterAnnotationOnClassesTest.java,read
03/09/2014 01:30:37,"=HYPERLINK(""https://github.com/google/gson/commit/b9998e511f3a3c19d52c104d66d78037eaff88ec"", ""b9998e511f3a3c19d52c104d66d78037eaff88ec"")","=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")",inder123@gmail.com,deleted support for the magic GSON_TYPE_ADAPTER field,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,GsonFieldTypeAdapterTest.java,testFieldAdapterInvoked
03/09/2014 01:30:37,"=HYPERLINK(""https://github.com/google/gson/commit/b9998e511f3a3c19d52c104d66d78037eaff88ec"", ""b9998e511f3a3c19d52c104d66d78037eaff88ec"")","=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")",inder123@gmail.com,deleted support for the magic GSON_TYPE_ADAPTER field,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,GsonFieldTypeAdapterTest.java,testRegisteredAdapterOverridesFieldAdapter
03/09/2014 01:30:37,"=HYPERLINK(""https://github.com/google/gson/commit/b9998e511f3a3c19d52c104d66d78037eaff88ec"", ""b9998e511f3a3c19d52c104d66d78037eaff88ec"")","=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")",inder123@gmail.com,deleted support for the magic GSON_TYPE_ADAPTER field,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,GsonFieldTypeAdapterTest.java,testRegisteredSerializerOverridesFieldAdapter
03/09/2014 01:30:37,"=HYPERLINK(""https://github.com/google/gson/commit/b9998e511f3a3c19d52c104d66d78037eaff88ec"", ""b9998e511f3a3c19d52c104d66d78037eaff88ec"")","=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")",inder123@gmail.com,deleted support for the magic GSON_TYPE_ADAPTER field,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,GsonFieldTypeAdapterTest.java,testRegisteredDeserializerOverridesFieldAdapter
03/09/2014 01:30:37,"=HYPERLINK(""https://github.com/google/gson/commit/b9998e511f3a3c19d52c104d66d78037eaff88ec"", ""b9998e511f3a3c19d52c104d66d78037eaff88ec"")","=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")",inder123@gmail.com,deleted support for the magic GSON_TYPE_ADAPTER field,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,GsonFieldTypeAdapterTest.java,testFieldAdapterNotInvokedIfNull
03/09/2014 01:30:37,"=HYPERLINK(""https://github.com/google/gson/commit/b9998e511f3a3c19d52c104d66d78037eaff88ec"", ""b9998e511f3a3c19d52c104d66d78037eaff88ec"")","=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")",inder123@gmail.com,deleted support for the magic GSON_TYPE_ADAPTER field,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,GsonFieldTypeAdapterTest.java,testNonStaticFieldAdapterNotInvoked
03/09/2014 01:30:37,"=HYPERLINK(""https://github.com/google/gson/commit/b9998e511f3a3c19d52c104d66d78037eaff88ec"", ""b9998e511f3a3c19d52c104d66d78037eaff88ec"")","=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")",inder123@gmail.com,deleted support for the magic GSON_TYPE_ADAPTER field,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,GsonFieldTypeAdapterTest.java,testIncorrectTypeAdapterNotInvoked
03/09/2014 01:30:37,"=HYPERLINK(""https://github.com/google/gson/commit/b9998e511f3a3c19d52c104d66d78037eaff88ec"", ""b9998e511f3a3c19d52c104d66d78037eaff88ec"")","=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")",inder123@gmail.com,deleted support for the magic GSON_TYPE_ADAPTER field,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,GsonFieldTypeAdapterTest.java,testSuperclassTypeAdapterNotInvoked
03/09/2014 01:30:37,"=HYPERLINK(""https://github.com/google/gson/commit/b9998e511f3a3c19d52c104d66d78037eaff88ec"", ""b9998e511f3a3c19d52c104d66d78037eaff88ec"")","=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")",inder123@gmail.com,deleted support for the magic GSON_TYPE_ADAPTER field,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,GsonFieldTypeAdapterTest.java,ClassWithFieldAdapter
03/09/2014 01:30:37,"=HYPERLINK(""https://github.com/google/gson/commit/b9998e511f3a3c19d52c104d66d78037eaff88ec"", ""b9998e511f3a3c19d52c104d66d78037eaff88ec"")","=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")",inder123@gmail.com,deleted support for the magic GSON_TYPE_ADAPTER field,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,GsonFieldTypeAdapterTest.java,ClassWithSuperClassFieldAdapter
03/09/2014 01:30:37,"=HYPERLINK(""https://github.com/google/gson/commit/b9998e511f3a3c19d52c104d66d78037eaff88ec"", ""b9998e511f3a3c19d52c104d66d78037eaff88ec"")","=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")",inder123@gmail.com,deleted support for the magic GSON_TYPE_ADAPTER field,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,GsonFieldTypeAdapterTest.java,ClassWithNullFieldAdapter
03/09/2014 01:30:37,"=HYPERLINK(""https://github.com/google/gson/commit/b9998e511f3a3c19d52c104d66d78037eaff88ec"", ""b9998e511f3a3c19d52c104d66d78037eaff88ec"")","=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")",inder123@gmail.com,deleted support for the magic GSON_TYPE_ADAPTER field,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,GsonFieldTypeAdapterTest.java,ClassWithNonStaticFieldAdapter
03/09/2014 01:30:37,"=HYPERLINK(""https://github.com/google/gson/commit/b9998e511f3a3c19d52c104d66d78037eaff88ec"", ""b9998e511f3a3c19d52c104d66d78037eaff88ec"")","=HYPERLINK(""https://github.com/google/gson/commit/bf549f0589105a42f159c78a621fc28087561d16"", ""bf549f0589105a42f159c78a621fc28087561d16"")",inder123@gmail.com,deleted support for the magic GSON_TYPE_ADAPTER field,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,GsonFieldTypeAdapterTest.java,ClassWithIncorrectFieldAdapter
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,AdaptAnnotationOnClassesTest.java,testJsonAdapterInvoked
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,AdaptAnnotationOnClassesTest.java,testRegisteredAdapterOverridesJsonAdapter
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,AdaptAnnotationOnClassesTest.java,testRegisteredSerializerOverridesJsonAdapter
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,AdaptAnnotationOnClassesTest.java,testRegisteredDeserializerOverridesJsonAdapter
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,AdaptAnnotationOnClassesTest.java,testIncorrectTypeAdapterFails
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,AdaptAnnotationOnClassesTest.java,testSuperclassTypeAdapterNotInvoked
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,AdaptAnnotationOnClassesTest.java,A
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,AdaptAnnotationOnClassesTest.java,write
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,AdaptAnnotationOnClassesTest.java,read
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,AdaptAnnotationOnClassesTest.java,B
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,AdaptAnnotationOnClassesTest.java,ClassWithIncorrectJsonAdapter
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,AdaptAnnotationOnClassesTest.java,User
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,AdaptAnnotationOnClassesTest.java,write
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,AdaptAnnotationOnClassesTest.java,read
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,AdaptAnnotationOnFieldsTest.java,testJsonAdapterInvoked
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,AdaptAnnotationOnFieldsTest.java,testRegisteredTypeAdapterOverridesFieldAnnotation
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,AdaptAnnotationOnFieldsTest.java,testFieldAnnotationSupersedesClassAnnotation
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,AdaptAnnotationOnFieldsTest.java,Gadget
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,AdaptAnnotationOnFieldsTest.java,Part
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,AdaptAnnotationOnFieldsTest.java,write
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,AdaptAnnotationOnFieldsTest.java,read
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,AdaptAnnotationOnFieldsTest.java,Computer
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,AdaptAnnotationOnFieldsTest.java,User
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,AdaptAnnotationOnFieldsTest.java,write
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,AdaptAnnotationOnFieldsTest.java,read
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,AdaptAnnotationOnFieldsTest.java,Computer2
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,AdaptAnnotationOnFieldsTest.java,write
03/09/2014 18:08:54,"=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")","=HYPERLINK(""https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1"", ""6e8d3cd65e2777da196513d91b796d3e03e203d1"")",inder123@gmail.com,renamed JsonAdapter annotation to Adapt annotation.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,AdaptAnnotationOnFieldsTest.java,read
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnClassesTest.java,JsonAdapterAnnotationOnClassesTest.java,testJsonAdapterInvoked
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnClassesTest.java,JsonAdapterAnnotationOnClassesTest.java,testRegisteredAdapterOverridesJsonAdapter
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnClassesTest.java,JsonAdapterAnnotationOnClassesTest.java,testRegisteredSerializerOverridesJsonAdapter
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnClassesTest.java,JsonAdapterAnnotationOnClassesTest.java,testRegisteredDeserializerOverridesJsonAdapter
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnClassesTest.java,JsonAdapterAnnotationOnClassesTest.java,testIncorrectTypeAdapterFails
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnClassesTest.java,JsonAdapterAnnotationOnClassesTest.java,testSuperclassTypeAdapterNotInvoked
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnClassesTest.java,JsonAdapterAnnotationOnClassesTest.java,A
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnClassesTest.java,JsonAdapterAnnotationOnClassesTest.java,write
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnClassesTest.java,JsonAdapterAnnotationOnClassesTest.java,read
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnClassesTest.java,JsonAdapterAnnotationOnClassesTest.java,B
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnClassesTest.java,JsonAdapterAnnotationOnClassesTest.java,ClassWithIncorrectJsonAdapter
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnClassesTest.java,JsonAdapterAnnotationOnClassesTest.java,User
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnClassesTest.java,JsonAdapterAnnotationOnClassesTest.java,write
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnClassesTest.java,JsonAdapterAnnotationOnClassesTest.java,read
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,testJsonAdapterInvoked
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,testRegisteredTypeAdapterOverridesFieldAnnotation
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,testFieldAnnotationSupersedesClassAnnotation
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,Gadget
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,Part
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,write
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,read
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,Computer
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,User
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,write
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,read
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,Computer2
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,write
03/26/2014 12:59:54,"=HYPERLINK(""https://github.com/google/gson/commit/edf66083e6245abfab4a85dce03c0bf79a66f474"", ""edf66083e6245abfab4a85dce03c0bf79a66f474"")","=HYPERLINK(""https://github.com/google/gson/commit/7f6a0960300792f47ee6c153595e0681ea07cd91"", ""7f6a0960300792f47ee6c153595e0681ea07cd91"")",inder123@gmail.com,renamed @Adapt to @JsonAdapter,gson/src/test/java/com/google/gson/functional/AdaptAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,read
08/02/2014 13:22:43,"=HYPERLINK(""https://github.com/google/gson/commit/125e6d9d3d42516de6b6797be8ef0c59e6360512"", ""125e6d9d3d42516de6b6797be8ef0c59e6360512"")","=HYPERLINK(""https://github.com/google/gson/commit/f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"", ""f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"")",jesse@swank.ca,Change field annotations to take precedence over registered type adapters.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,testJsonAdapterInvoked
08/02/2014 13:22:43,"=HYPERLINK(""https://github.com/google/gson/commit/125e6d9d3d42516de6b6797be8ef0c59e6360512"", ""125e6d9d3d42516de6b6797be8ef0c59e6360512"")","=HYPERLINK(""https://github.com/google/gson/commit/f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"", ""f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"")",jesse@swank.ca,Change field annotations to take precedence over registered type adapters.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,testRegisteredTypeAdapterOverridesFieldAnnotation
08/02/2014 13:22:43,"=HYPERLINK(""https://github.com/google/gson/commit/125e6d9d3d42516de6b6797be8ef0c59e6360512"", ""125e6d9d3d42516de6b6797be8ef0c59e6360512"")","=HYPERLINK(""https://github.com/google/gson/commit/f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"", ""f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"")",jesse@swank.ca,Change field annotations to take precedence over registered type adapters.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,testFieldAnnotationSupersedesClassAnnotation
08/02/2014 13:22:43,"=HYPERLINK(""https://github.com/google/gson/commit/125e6d9d3d42516de6b6797be8ef0c59e6360512"", ""125e6d9d3d42516de6b6797be8ef0c59e6360512"")","=HYPERLINK(""https://github.com/google/gson/commit/f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"", ""f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"")",jesse@swank.ca,Change field annotations to take precedence over registered type adapters.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,write
08/02/2014 13:22:43,"=HYPERLINK(""https://github.com/google/gson/commit/125e6d9d3d42516de6b6797be8ef0c59e6360512"", ""125e6d9d3d42516de6b6797be8ef0c59e6360512"")","=HYPERLINK(""https://github.com/google/gson/commit/f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"", ""f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"")",jesse@swank.ca,Change field annotations to take precedence over registered type adapters.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,read
08/02/2014 13:22:43,"=HYPERLINK(""https://github.com/google/gson/commit/125e6d9d3d42516de6b6797be8ef0c59e6360512"", ""125e6d9d3d42516de6b6797be8ef0c59e6360512"")","=HYPERLINK(""https://github.com/google/gson/commit/f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"", ""f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"")",jesse@swank.ca,Change field annotations to take precedence over registered type adapters.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,write
08/02/2014 13:22:43,"=HYPERLINK(""https://github.com/google/gson/commit/125e6d9d3d42516de6b6797be8ef0c59e6360512"", ""125e6d9d3d42516de6b6797be8ef0c59e6360512"")","=HYPERLINK(""https://github.com/google/gson/commit/f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"", ""f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"")",jesse@swank.ca,Change field annotations to take precedence over registered type adapters.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,read
08/02/2014 13:22:43,"=HYPERLINK(""https://github.com/google/gson/commit/125e6d9d3d42516de6b6797be8ef0c59e6360512"", ""125e6d9d3d42516de6b6797be8ef0c59e6360512"")","=HYPERLINK(""https://github.com/google/gson/commit/f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"", ""f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"")",jesse@swank.ca,Change field annotations to take precedence over registered type adapters.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,write
08/02/2014 13:22:43,"=HYPERLINK(""https://github.com/google/gson/commit/125e6d9d3d42516de6b6797be8ef0c59e6360512"", ""125e6d9d3d42516de6b6797be8ef0c59e6360512"")","=HYPERLINK(""https://github.com/google/gson/commit/f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"", ""f9a302e22a24c5a6a58f582bdaf80e7df7bc904d"")",jesse@swank.ca,Change field annotations to take precedence over registered type adapters.,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,JsonAdapterAnnotationOnFieldsTest.java,read
11/16/2014 16:55:18,"=HYPERLINK(""https://github.com/google/gson/commit/8d5a41329ec2f4db3aed02c20d379baf92840b37"", ""8d5a41329ec2f4db3aed02c20d379baf92840b37"")","=HYPERLINK(""https://github.com/google/gson/commit/b6a625fb6cb7e46a01938fef79ac6ea26c93a8dc"", ""b6a625fb6cb7e46a01938fef79ac6ea26c93a8dc"")",inder123@gmail.com,added tests for Throwable. Revised ReflectiveTypeAdapterFactory to ignore self-referencing fields.,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,CircularReferenceTest.java,testSelfReferenceSerialization
11/06/2015 17:24:15,"=HYPERLINK(""https://github.com/google/gson/commit/457f53f08f38e3c6d154699ea00fa521f208882d"", ""457f53f08f38e3c6d154699ea00fa521f208882d"")","=HYPERLINK(""https://github.com/google/gson/commit/00cf46cde434d8a9909bc13ead6664acf1b6240f"", ""00cf46cde434d8a9909bc13ead6664acf1b6240f"")",inder@peel.com,renamed JavaUtilConcurrentLocksTest to JavaUtilConcurrentAtomicTest,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,JavaUtilConcurrentAtomicTest.java,setUp
11/06/2015 17:24:15,"=HYPERLINK(""https://github.com/google/gson/commit/457f53f08f38e3c6d154699ea00fa521f208882d"", ""457f53f08f38e3c6d154699ea00fa521f208882d"")","=HYPERLINK(""https://github.com/google/gson/commit/00cf46cde434d8a9909bc13ead6664acf1b6240f"", ""00cf46cde434d8a9909bc13ead6664acf1b6240f"")",inder@peel.com,renamed JavaUtilConcurrentLocksTest to JavaUtilConcurrentAtomicTest,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,JavaUtilConcurrentAtomicTest.java,testAtomicBoolean
11/06/2015 17:24:15,"=HYPERLINK(""https://github.com/google/gson/commit/457f53f08f38e3c6d154699ea00fa521f208882d"", ""457f53f08f38e3c6d154699ea00fa521f208882d"")","=HYPERLINK(""https://github.com/google/gson/commit/00cf46cde434d8a9909bc13ead6664acf1b6240f"", ""00cf46cde434d8a9909bc13ead6664acf1b6240f"")",inder@peel.com,renamed JavaUtilConcurrentLocksTest to JavaUtilConcurrentAtomicTest,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,JavaUtilConcurrentAtomicTest.java,testAtomicInteger
11/06/2015 17:24:15,"=HYPERLINK(""https://github.com/google/gson/commit/457f53f08f38e3c6d154699ea00fa521f208882d"", ""457f53f08f38e3c6d154699ea00fa521f208882d"")","=HYPERLINK(""https://github.com/google/gson/commit/00cf46cde434d8a9909bc13ead6664acf1b6240f"", ""00cf46cde434d8a9909bc13ead6664acf1b6240f"")",inder@peel.com,renamed JavaUtilConcurrentLocksTest to JavaUtilConcurrentAtomicTest,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,JavaUtilConcurrentAtomicTest.java,testAtomicLong
11/06/2015 17:24:15,"=HYPERLINK(""https://github.com/google/gson/commit/457f53f08f38e3c6d154699ea00fa521f208882d"", ""457f53f08f38e3c6d154699ea00fa521f208882d"")","=HYPERLINK(""https://github.com/google/gson/commit/00cf46cde434d8a9909bc13ead6664acf1b6240f"", ""00cf46cde434d8a9909bc13ead6664acf1b6240f"")",inder@peel.com,renamed JavaUtilConcurrentLocksTest to JavaUtilConcurrentAtomicTest,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,JavaUtilConcurrentAtomicTest.java,testAtomicLongWithStringSerializationPolicy
11/06/2015 17:24:15,"=HYPERLINK(""https://github.com/google/gson/commit/457f53f08f38e3c6d154699ea00fa521f208882d"", ""457f53f08f38e3c6d154699ea00fa521f208882d"")","=HYPERLINK(""https://github.com/google/gson/commit/00cf46cde434d8a9909bc13ead6664acf1b6240f"", ""00cf46cde434d8a9909bc13ead6664acf1b6240f"")",inder@peel.com,renamed JavaUtilConcurrentLocksTest to JavaUtilConcurrentAtomicTest,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,JavaUtilConcurrentAtomicTest.java,testAtomicIntegerArray
11/06/2015 17:24:15,"=HYPERLINK(""https://github.com/google/gson/commit/457f53f08f38e3c6d154699ea00fa521f208882d"", ""457f53f08f38e3c6d154699ea00fa521f208882d"")","=HYPERLINK(""https://github.com/google/gson/commit/00cf46cde434d8a9909bc13ead6664acf1b6240f"", ""00cf46cde434d8a9909bc13ead6664acf1b6240f"")",inder@peel.com,renamed JavaUtilConcurrentLocksTest to JavaUtilConcurrentAtomicTest,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,JavaUtilConcurrentAtomicTest.java,testAtomicLongArray
11/06/2015 17:24:15,"=HYPERLINK(""https://github.com/google/gson/commit/457f53f08f38e3c6d154699ea00fa521f208882d"", ""457f53f08f38e3c6d154699ea00fa521f208882d"")","=HYPERLINK(""https://github.com/google/gson/commit/00cf46cde434d8a9909bc13ead6664acf1b6240f"", ""00cf46cde434d8a9909bc13ead6664acf1b6240f"")",inder@peel.com,renamed JavaUtilConcurrentLocksTest to JavaUtilConcurrentAtomicTest,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,JavaUtilConcurrentAtomicTest.java,testAtomicLongArrayWithStringSerializationPolicy
01/18/2016 14:07:33,"=HYPERLINK(""https://github.com/google/gson/commit/c8627c8ab831dec86eeb52fc02600b22c81ba858"", ""c8627c8ab831dec86eeb52fc02600b22c81ba858"")","=HYPERLINK(""https://github.com/google/gson/commit/2ab776b5f5075bd98e7eb730cb03772f2b734b45"", ""2ab776b5f5075bd98e7eb730cb03772f2b734b45"")",jw@squareup.com,Update reader and writer for RFC 7159.,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,JsonReaderTest.java,testNoTopLevelObject
01/18/2016 14:07:33,"=HYPERLINK(""https://github.com/google/gson/commit/c8627c8ab831dec86eeb52fc02600b22c81ba858"", ""c8627c8ab831dec86eeb52fc02600b22c81ba858"")","=HYPERLINK(""https://github.com/google/gson/commit/2ab776b5f5075bd98e7eb730cb03772f2b734b45"", ""2ab776b5f5075bd98e7eb730cb03772f2b734b45"")",jw@squareup.com,Update reader and writer for RFC 7159.,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,JsonReaderTest.java,testStrictTopLevelString
01/18/2016 14:07:33,"=HYPERLINK(""https://github.com/google/gson/commit/c8627c8ab831dec86eeb52fc02600b22c81ba858"", ""c8627c8ab831dec86eeb52fc02600b22c81ba858"")","=HYPERLINK(""https://github.com/google/gson/commit/2ab776b5f5075bd98e7eb730cb03772f2b734b45"", ""2ab776b5f5075bd98e7eb730cb03772f2b734b45"")",jw@squareup.com,Update reader and writer for RFC 7159.,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,JsonReaderTest.java,testLenientTopLevelString
01/18/2016 14:07:33,"=HYPERLINK(""https://github.com/google/gson/commit/c8627c8ab831dec86eeb52fc02600b22c81ba858"", ""c8627c8ab831dec86eeb52fc02600b22c81ba858"")","=HYPERLINK(""https://github.com/google/gson/commit/2ab776b5f5075bd98e7eb730cb03772f2b734b45"", ""2ab776b5f5075bd98e7eb730cb03772f2b734b45"")",jw@squareup.com,Update reader and writer for RFC 7159.,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,JsonReaderTest.java,testStrictTopLevelValueType
01/18/2016 14:07:33,"=HYPERLINK(""https://github.com/google/gson/commit/c8627c8ab831dec86eeb52fc02600b22c81ba858"", ""c8627c8ab831dec86eeb52fc02600b22c81ba858"")","=HYPERLINK(""https://github.com/google/gson/commit/2ab776b5f5075bd98e7eb730cb03772f2b734b45"", ""2ab776b5f5075bd98e7eb730cb03772f2b734b45"")",jw@squareup.com,Update reader and writer for RFC 7159.,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,JsonReaderTest.java,testLenientTopLevelValueType
01/18/2016 14:07:33,"=HYPERLINK(""https://github.com/google/gson/commit/c8627c8ab831dec86eeb52fc02600b22c81ba858"", ""c8627c8ab831dec86eeb52fc02600b22c81ba858"")","=HYPERLINK(""https://github.com/google/gson/commit/2ab776b5f5075bd98e7eb730cb03772f2b734b45"", ""2ab776b5f5075bd98e7eb730cb03772f2b734b45"")",jw@squareup.com,Update reader and writer for RFC 7159.,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,JsonReaderTest.java,testStrictTopLevelValueTypeWithSkipValue
01/18/2016 14:07:33,"=HYPERLINK(""https://github.com/google/gson/commit/c8627c8ab831dec86eeb52fc02600b22c81ba858"", ""c8627c8ab831dec86eeb52fc02600b22c81ba858"")","=HYPERLINK(""https://github.com/google/gson/commit/2ab776b5f5075bd98e7eb730cb03772f2b734b45"", ""2ab776b5f5075bd98e7eb730cb03772f2b734b45"")",jw@squareup.com,Update reader and writer for RFC 7159.,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,JsonWriterTest.java,testWrongTopLevelType
02/25/2016 19:38:48,"=HYPERLINK(""https://github.com/google/gson/commit/79a00cd90695c9ab72f301ca30fe2cbbc1fe8e36"", ""79a00cd90695c9ab72f301ca30fe2cbbc1fe8e36"")","=HYPERLINK(""https://github.com/google/gson/commit/c731abb293e79b26e53db3264306768fb86ef4c4"", ""c731abb293e79b26e53db3264306768fb86ef4c4"")",inder@peel.com,"incorporated code review feedback. Simplified the code, merged Device and Control and removed unnecessary fields.",gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java,JsonAdapterNullSafeTest.java,testTypeAdapterFactoryNullSafeBug
02/25/2016 19:38:48,"=HYPERLINK(""https://github.com/google/gson/commit/79a00cd90695c9ab72f301ca30fe2cbbc1fe8e36"", ""79a00cd90695c9ab72f301ca30fe2cbbc1fe8e36"")","=HYPERLINK(""https://github.com/google/gson/commit/c731abb293e79b26e53db3264306768fb86ef4c4"", ""c731abb293e79b26e53db3264306768fb86ef4c4"")",inder@peel.com,"incorporated code review feedback. Simplified the code, merged Device and Control and removed unnecessary fields.",gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java,JsonAdapterNullSafeTest.java,ControlData
02/25/2016 19:38:48,"=HYPERLINK(""https://github.com/google/gson/commit/79a00cd90695c9ab72f301ca30fe2cbbc1fe8e36"", ""79a00cd90695c9ab72f301ca30fe2cbbc1fe8e36"")","=HYPERLINK(""https://github.com/google/gson/commit/c731abb293e79b26e53db3264306768fb86ef4c4"", ""c731abb293e79b26e53db3264306768fb86ef4c4"")",inder@peel.com,"incorporated code review feedback. Simplified the code, merged Device and Control and removed unnecessary fields.",gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java,JsonAdapterNullSafeTest.java,JsonAdapterFactory
02/25/2016 19:38:48,"=HYPERLINK(""https://github.com/google/gson/commit/79a00cd90695c9ab72f301ca30fe2cbbc1fe8e36"", ""79a00cd90695c9ab72f301ca30fe2cbbc1fe8e36"")","=HYPERLINK(""https://github.com/google/gson/commit/c731abb293e79b26e53db3264306768fb86ef4c4"", ""c731abb293e79b26e53db3264306768fb86ef4c4"")",inder@peel.com,"incorporated code review feedback. Simplified the code, merged Device and Control and removed unnecessary fields.",gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java,JsonAdapterNullSafeTest.java,StringifiedJsonAdapterFactory
02/25/2016 19:38:48,"=HYPERLINK(""https://github.com/google/gson/commit/79a00cd90695c9ab72f301ca30fe2cbbc1fe8e36"", ""79a00cd90695c9ab72f301ca30fe2cbbc1fe8e36"")","=HYPERLINK(""https://github.com/google/gson/commit/c731abb293e79b26e53db3264306768fb86ef4c4"", ""c731abb293e79b26e53db3264306768fb86ef4c4"")",inder@peel.com,"incorporated code review feedback. Simplified the code, merged Device and Control and removed unnecessary fields.",gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java,JsonAdapterNullSafeTest.java,create
06/01/2016 23:08:25,"=HYPERLINK(""https://github.com/google/gson/commit/45511fdd1534aa4fcc3c560ac4c0b439d94fc2ad"", ""45511fdd1534aa4fcc3c560ac4c0b439d94fc2ad"")","=HYPERLINK(""https://github.com/google/gson/commit/854760e6c7131b5ec5b1ec07756a3b2d0807aff3"", ""854760e6c7131b5ec5b1ec07756a3b2d0807aff3"")",jwilson@squareup.com,"Added support for JsonSerializer/JsonDeserializer for JsonAdapter annotation.
JsonAdapter is cached per the type of the JsonAdapter class.
Added a test to ensure JsonAdapter works on fields of parameterized types
Keep track of registered JsonAdapters and JsonAdapterFactorys in ThreadLocal.",gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,RuntimeTypeAdapterFactoryFunctionalTest.java,testSubclassesAutomaticallySerialzed
06/09/2016 23:14:28,"=HYPERLINK(""https://github.com/google/gson/commit/c2fae85a9f71d478d1153112e09dbc45ef31259a"", ""c2fae85a9f71d478d1153112e09dbc45ef31259a"")","=HYPERLINK(""https://github.com/google/gson/commit/ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"", ""ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"")",jw@squareup.com,Implement JSON Path for JsonTreeReader.,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,JsonReaderPathTest.java,testPath
06/09/2016 23:14:28,"=HYPERLINK(""https://github.com/google/gson/commit/c2fae85a9f71d478d1153112e09dbc45ef31259a"", ""c2fae85a9f71d478d1153112e09dbc45ef31259a"")","=HYPERLINK(""https://github.com/google/gson/commit/ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"", ""ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"")",jw@squareup.com,Implement JSON Path for JsonTreeReader.,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,JsonReaderPathTest.java,testObjectPath
06/09/2016 23:14:28,"=HYPERLINK(""https://github.com/google/gson/commit/c2fae85a9f71d478d1153112e09dbc45ef31259a"", ""c2fae85a9f71d478d1153112e09dbc45ef31259a"")","=HYPERLINK(""https://github.com/google/gson/commit/ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"", ""ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"")",jw@squareup.com,Implement JSON Path for JsonTreeReader.,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,JsonReaderPathTest.java,testArrayPath
06/09/2016 23:14:28,"=HYPERLINK(""https://github.com/google/gson/commit/c2fae85a9f71d478d1153112e09dbc45ef31259a"", ""c2fae85a9f71d478d1153112e09dbc45ef31259a"")","=HYPERLINK(""https://github.com/google/gson/commit/ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"", ""ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"")",jw@squareup.com,Implement JSON Path for JsonTreeReader.,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,JsonReaderPathTest.java,testMultipleTopLevelValuesInOneDocument
06/09/2016 23:14:28,"=HYPERLINK(""https://github.com/google/gson/commit/c2fae85a9f71d478d1153112e09dbc45ef31259a"", ""c2fae85a9f71d478d1153112e09dbc45ef31259a"")","=HYPERLINK(""https://github.com/google/gson/commit/ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"", ""ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"")",jw@squareup.com,Implement JSON Path for JsonTreeReader.,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,JsonReaderPathTest.java,testSkipArrayElements
06/09/2016 23:14:28,"=HYPERLINK(""https://github.com/google/gson/commit/c2fae85a9f71d478d1153112e09dbc45ef31259a"", ""c2fae85a9f71d478d1153112e09dbc45ef31259a"")","=HYPERLINK(""https://github.com/google/gson/commit/ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"", ""ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"")",jw@squareup.com,Implement JSON Path for JsonTreeReader.,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,JsonReaderPathTest.java,testSkipObjectNames
06/09/2016 23:14:28,"=HYPERLINK(""https://github.com/google/gson/commit/c2fae85a9f71d478d1153112e09dbc45ef31259a"", ""c2fae85a9f71d478d1153112e09dbc45ef31259a"")","=HYPERLINK(""https://github.com/google/gson/commit/ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"", ""ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"")",jw@squareup.com,Implement JSON Path for JsonTreeReader.,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,JsonReaderPathTest.java,testSkipObjectValues
06/09/2016 23:14:28,"=HYPERLINK(""https://github.com/google/gson/commit/c2fae85a9f71d478d1153112e09dbc45ef31259a"", ""c2fae85a9f71d478d1153112e09dbc45ef31259a"")","=HYPERLINK(""https://github.com/google/gson/commit/ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"", ""ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"")",jw@squareup.com,Implement JSON Path for JsonTreeReader.,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,JsonReaderPathTest.java,testSkipNestedStructures
06/09/2016 23:14:28,"=HYPERLINK(""https://github.com/google/gson/commit/c2fae85a9f71d478d1153112e09dbc45ef31259a"", ""c2fae85a9f71d478d1153112e09dbc45ef31259a"")","=HYPERLINK(""https://github.com/google/gson/commit/ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"", ""ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"")",jw@squareup.com,Implement JSON Path for JsonTreeReader.,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,JsonReaderPathTest.java,testArrayOfObjects
06/09/2016 23:14:28,"=HYPERLINK(""https://github.com/google/gson/commit/c2fae85a9f71d478d1153112e09dbc45ef31259a"", ""c2fae85a9f71d478d1153112e09dbc45ef31259a"")","=HYPERLINK(""https://github.com/google/gson/commit/ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"", ""ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f"")",jw@squareup.com,Implement JSON Path for JsonTreeReader.,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,JsonReaderPathTest.java,testArrayOfArrays
04/23/2017 07:54:10,"=HYPERLINK(""https://github.com/google/gson/commit/eb27d55f497a5bb292c020e255415677e0b646fc"", ""eb27d55f497a5bb292c020e255415677e0b646fc"")","=HYPERLINK(""https://github.com/google/gson/commit/5412f21431ebace2295e933fa0446adc0abf4b01"", ""5412f21431ebace2295e933fa0446adc0abf4b01"")",lyubomyr-shaydariv@users.noreply.github.com,Remove helper methods mentioned in the TODO list,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,StreamingTypeAdaptersTest.java,toJson
04/23/2017 07:54:10,"=HYPERLINK(""https://github.com/google/gson/commit/eb27d55f497a5bb292c020e255415677e0b646fc"", ""eb27d55f497a5bb292c020e255415677e0b646fc"")","=HYPERLINK(""https://github.com/google/gson/commit/5412f21431ebace2295e933fa0446adc0abf4b01"", ""5412f21431ebace2295e933fa0446adc0abf4b01"")",lyubomyr-shaydariv@users.noreply.github.com,Remove helper methods mentioned in the TODO list,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,StreamingTypeAdaptersTest.java,fromJson
04/15/2019 21:35:10,"=HYPERLINK(""https://github.com/google/gson/commit/c5a3f21fbad3828deba1deb88168e1f76829f807"", ""c5a3f21fbad3828deba1deb88168e1f76829f807"")","=HYPERLINK(""https://github.com/google/gson/commit/477b3f77e159d15531fd30f41688d4b732a8b042"", ""477b3f77e159d15531fd30f41688d4b732a8b042"")",jakew@google.com,Refactor JsonParser to statics & fix tests,gson/src/test/java/com/google/gson/JsonParserTest.java,JsonParserTest.java,setUp
10/03/2019 17:49:24,"=HYPERLINK(""https://github.com/google/gson/commit/7845c380778889eab5c57c24da416bf4f3da9b50"", ""7845c380778889eab5c57c24da416bf4f3da9b50"")","=HYPERLINK(""https://github.com/google/gson/commit/0e90771e455cd5db201b7beaa2456ffdf50c78f2"", ""0e90771e455cd5db201b7beaa2456ffdf50c78f2"")",inder123@gmail.com,Minor cleanups in deprecations and other warnings (#1522),gson/src/test/java/com/google/gson/functional/JsonParserTest.java,JsonParserTest.java,list
05/23/2020 16:31:03,"=HYPERLINK(""https://github.com/google/gson/commit/4fb215c9df408ef48bad1288ef23c68b7910a7a3"", ""4fb215c9df408ef48bad1288ef23c68b7910a7a3"")","=HYPERLINK(""https://github.com/google/gson/commit/380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"", ""380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"")",Marcono1234@users.noreply.github.com,Move SQL types specific tests to separate test class,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,testDefaultJavaSqlDateSerialization
05/23/2020 16:31:03,"=HYPERLINK(""https://github.com/google/gson/commit/4fb215c9df408ef48bad1288ef23c68b7910a7a3"", ""4fb215c9df408ef48bad1288ef23c68b7910a7a3"")","=HYPERLINK(""https://github.com/google/gson/commit/380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"", ""380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"")",Marcono1234@users.noreply.github.com,Move SQL types specific tests to separate test class,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,testDefaultJavaSqlDateDeserialization
05/23/2020 16:31:03,"=HYPERLINK(""https://github.com/google/gson/commit/4fb215c9df408ef48bad1288ef23c68b7910a7a3"", ""4fb215c9df408ef48bad1288ef23c68b7910a7a3"")","=HYPERLINK(""https://github.com/google/gson/commit/380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"", ""380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"")",Marcono1234@users.noreply.github.com,Move SQL types specific tests to separate test class,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,testDefaultJavaSqlTimestampSerialization
05/23/2020 16:31:03,"=HYPERLINK(""https://github.com/google/gson/commit/4fb215c9df408ef48bad1288ef23c68b7910a7a3"", ""4fb215c9df408ef48bad1288ef23c68b7910a7a3"")","=HYPERLINK(""https://github.com/google/gson/commit/380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"", ""380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"")",Marcono1234@users.noreply.github.com,Move SQL types specific tests to separate test class,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,testDefaultJavaSqlTimestampDeserialization
05/23/2020 16:31:03,"=HYPERLINK(""https://github.com/google/gson/commit/4fb215c9df408ef48bad1288ef23c68b7910a7a3"", ""4fb215c9df408ef48bad1288ef23c68b7910a7a3"")","=HYPERLINK(""https://github.com/google/gson/commit/380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"", ""380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"")",Marcono1234@users.noreply.github.com,Move SQL types specific tests to separate test class,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,testDefaultJavaSqlTimeSerialization
05/23/2020 16:31:03,"=HYPERLINK(""https://github.com/google/gson/commit/4fb215c9df408ef48bad1288ef23c68b7910a7a3"", ""4fb215c9df408ef48bad1288ef23c68b7910a7a3"")","=HYPERLINK(""https://github.com/google/gson/commit/380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"", ""380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"")",Marcono1234@users.noreply.github.com,Move SQL types specific tests to separate test class,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,testDefaultJavaSqlTimeDeserialization
05/23/2020 16:31:03,"=HYPERLINK(""https://github.com/google/gson/commit/4fb215c9df408ef48bad1288ef23c68b7910a7a3"", ""4fb215c9df408ef48bad1288ef23c68b7910a7a3"")","=HYPERLINK(""https://github.com/google/gson/commit/380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"", ""380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"")",Marcono1234@users.noreply.github.com,Move SQL types specific tests to separate test class,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,testTimestampSerialization
05/23/2020 16:31:03,"=HYPERLINK(""https://github.com/google/gson/commit/4fb215c9df408ef48bad1288ef23c68b7910a7a3"", ""4fb215c9df408ef48bad1288ef23c68b7910a7a3"")","=HYPERLINK(""https://github.com/google/gson/commit/380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"", ""380c4ec12c7a8b2b85cc3a8ac78b3f123162c70c"")",Marcono1234@users.noreply.github.com,Move SQL types specific tests to separate test class,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,DefaultTypeAdaptersTest.java,testSqlDateSerialization
09/17/2021 19:21:37,"=HYPERLINK(""https://github.com/google/gson/commit/26a1928277f7eba70609f02697509ba9258dd8ef"", ""26a1928277f7eba70609f02697509ba9258dd8ef"")","=HYPERLINK(""https://github.com/google/gson/commit/f1f90313fc22c122a28716e7ecac1543e6fa253e"", ""f1f90313fc22c122a28716e7ecac1543e6fa253e"")",noreply@github.com,"Fix `RuntimeTypeAdapterFactory` depending on internal `Streams` class (#1959)

* Fix RuntimeTypeAdapterFactory depending on internal Streams class

* Clean up gson-extras project, make it Maven module of gson-parent

* Remove broken test from GraphAdapterBuilderTest",extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java,GraphAdapterBuilderTest.java,testSerializationDirectSelfReference
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testIterationOrder
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testRemoveRootDoesNotDoubleUnlink
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testPutNullKeyFails
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testPutNonComparableKeyFails
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testContainsNonComparableKeyReturnsFalse
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testContainsNullKeyIsAlwaysFalse
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testPutOverrides
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testEmptyStringValues
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testForceDoublingAndRehash
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testClear
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testEqualsAndHashCode
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testAvlWalker
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,assertAvlWalker
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testAvlBuilder
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,assertAvlBuilder
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testDoubleCapacity
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testDoubleCapacityAllNodesOnLeft
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,testJavaSerialization
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,node
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,node
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,assertTree
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,assertConsistent
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,toString
11/01/2021 17:09:14,"=HYPERLINK(""https://github.com/google/gson/commit/e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"", ""e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0"")","=HYPERLINK(""https://github.com/google/gson/commit/b4dab86b105c85e6b7d7106c9ff11e3e923e3485"", ""b4dab86b105c85e6b7d7106c9ff11e3e923e3485"")",noreply@github.com,"Delete unused LinkedHashTreeMap (#1992)

Class seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.
Gson currently only uses LinkedTreeMap.",gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,LinkedHashTreeMapTest.java,assertIterationOrder
11/09/2021 09:16:35,"=HYPERLINK(""https://github.com/google/gson/commit/b0595c595bd2c052cd05e0283bb37b67c02bd06f"", ""b0595c595bd2c052cd05e0283bb37b67c02bd06f"")","=HYPERLINK(""https://github.com/google/gson/commit/0d9f6b677ae67cbd749ebca817139041d1977831"", ""0d9f6b677ae67cbd749ebca817139041d1977831"")",noreply@github.com,"Fix failing to serialize Collection or Map with inaccessible constructor (#1902)

* Remove UnsafeReflectionAccessor

Revert #1218

Usage of sun.misc.Unsafe to change internal AccessibleObject.override field
to suppress JPMS warnings goes against the intentions of the JPMS and does not
work anymore in newer versions, see #1540.
Therefore remove it and instead create a descriptive exception when making a
member accessible fails. If necessary users can also still use `java` command
line flags to open external modules.

* Fix failing to serialize Collection or Map with inaccessible constructor

Also remove tests which rely on Java implementation details.

* Don't keep reference to access exception of ConstructorConstructor

This also avoids a confusing stack trace, since the previously caught
exception might have had a complete unrelated stack trace.

* Remove Maven toolchain requirement

* Address review feedback

* Add back test for Security Manager",gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java,ThrowableFunctionalTest.java,testExceptionWithoutCause
11/09/2021 09:16:35,"=HYPERLINK(""https://github.com/google/gson/commit/b0595c595bd2c052cd05e0283bb37b67c02bd06f"", ""b0595c595bd2c052cd05e0283bb37b67c02bd06f"")","=HYPERLINK(""https://github.com/google/gson/commit/0d9f6b677ae67cbd749ebca817139041d1977831"", ""0d9f6b677ae67cbd749ebca817139041d1977831"")",noreply@github.com,"Fix failing to serialize Collection or Map with inaccessible constructor (#1902)

* Remove UnsafeReflectionAccessor

Revert #1218

Usage of sun.misc.Unsafe to change internal AccessibleObject.override field
to suppress JPMS warnings goes against the intentions of the JPMS and does not
work anymore in newer versions, see #1540.
Therefore remove it and instead create a descriptive exception when making a
member accessible fails. If necessary users can also still use `java` command
line flags to open external modules.

* Fix failing to serialize Collection or Map with inaccessible constructor

Also remove tests which rely on Java implementation details.

* Don't keep reference to access exception of ConstructorConstructor

This also avoids a confusing stack trace, since the previously caught
exception might have had a complete unrelated stack trace.

* Remove Maven toolchain requirement

* Address review feedback

* Add back test for Security Manager",gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java,ThrowableFunctionalTest.java,testExceptionWithCause
11/09/2021 09:16:35,"=HYPERLINK(""https://github.com/google/gson/commit/b0595c595bd2c052cd05e0283bb37b67c02bd06f"", ""b0595c595bd2c052cd05e0283bb37b67c02bd06f"")","=HYPERLINK(""https://github.com/google/gson/commit/0d9f6b677ae67cbd749ebca817139041d1977831"", ""0d9f6b677ae67cbd749ebca817139041d1977831"")",noreply@github.com,"Fix failing to serialize Collection or Map with inaccessible constructor (#1902)

* Remove UnsafeReflectionAccessor

Revert #1218

Usage of sun.misc.Unsafe to change internal AccessibleObject.override field
to suppress JPMS warnings goes against the intentions of the JPMS and does not
work anymore in newer versions, see #1540.
Therefore remove it and instead create a descriptive exception when making a
member accessible fails. If necessary users can also still use `java` command
line flags to open external modules.

* Fix failing to serialize Collection or Map with inaccessible constructor

Also remove tests which rely on Java implementation details.

* Don't keep reference to access exception of ConstructorConstructor

This also avoids a confusing stack trace, since the previously caught
exception might have had a complete unrelated stack trace.

* Remove Maven toolchain requirement

* Address review feedback

* Add back test for Security Manager",gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java,ThrowableFunctionalTest.java,testSerializedNameOnExceptionFields
11/09/2021 09:16:35,"=HYPERLINK(""https://github.com/google/gson/commit/b0595c595bd2c052cd05e0283bb37b67c02bd06f"", ""b0595c595bd2c052cd05e0283bb37b67c02bd06f"")","=HYPERLINK(""https://github.com/google/gson/commit/0d9f6b677ae67cbd749ebca817139041d1977831"", ""0d9f6b677ae67cbd749ebca817139041d1977831"")",noreply@github.com,"Fix failing to serialize Collection or Map with inaccessible constructor (#1902)

* Remove UnsafeReflectionAccessor

Revert #1218

Usage of sun.misc.Unsafe to change internal AccessibleObject.override field
to suppress JPMS warnings goes against the intentions of the JPMS and does not
work anymore in newer versions, see #1540.
Therefore remove it and instead create a descriptive exception when making a
member accessible fails. If necessary users can also still use `java` command
line flags to open external modules.

* Fix failing to serialize Collection or Map with inaccessible constructor

Also remove tests which rely on Java implementation details.

* Don't keep reference to access exception of ConstructorConstructor

This also avoids a confusing stack trace, since the previously caught
exception might have had a complete unrelated stack trace.

* Remove Maven toolchain requirement

* Address review feedback

* Add back test for Security Manager",gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java,ThrowableFunctionalTest.java,testErrorWithoutCause
11/09/2021 09:16:35,"=HYPERLINK(""https://github.com/google/gson/commit/b0595c595bd2c052cd05e0283bb37b67c02bd06f"", ""b0595c595bd2c052cd05e0283bb37b67c02bd06f"")","=HYPERLINK(""https://github.com/google/gson/commit/0d9f6b677ae67cbd749ebca817139041d1977831"", ""0d9f6b677ae67cbd749ebca817139041d1977831"")",noreply@github.com,"Fix failing to serialize Collection or Map with inaccessible constructor (#1902)

* Remove UnsafeReflectionAccessor

Revert #1218

Usage of sun.misc.Unsafe to change internal AccessibleObject.override field
to suppress JPMS warnings goes against the intentions of the JPMS and does not
work anymore in newer versions, see #1540.
Therefore remove it and instead create a descriptive exception when making a
member accessible fails. If necessary users can also still use `java` command
line flags to open external modules.

* Fix failing to serialize Collection or Map with inaccessible constructor

Also remove tests which rely on Java implementation details.

* Don't keep reference to access exception of ConstructorConstructor

This also avoids a confusing stack trace, since the previously caught
exception might have had a complete unrelated stack trace.

* Remove Maven toolchain requirement

* Address review feedback

* Add back test for Security Manager",gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java,ThrowableFunctionalTest.java,testErrornWithCause
11/09/2021 09:16:35,"=HYPERLINK(""https://github.com/google/gson/commit/b0595c595bd2c052cd05e0283bb37b67c02bd06f"", ""b0595c595bd2c052cd05e0283bb37b67c02bd06f"")","=HYPERLINK(""https://github.com/google/gson/commit/0d9f6b677ae67cbd749ebca817139041d1977831"", ""0d9f6b677ae67cbd749ebca817139041d1977831"")",noreply@github.com,"Fix failing to serialize Collection or Map with inaccessible constructor (#1902)

* Remove UnsafeReflectionAccessor

Revert #1218

Usage of sun.misc.Unsafe to change internal AccessibleObject.override field
to suppress JPMS warnings goes against the intentions of the JPMS and does not
work anymore in newer versions, see #1540.
Therefore remove it and instead create a descriptive exception when making a
member accessible fails. If necessary users can also still use `java` command
line flags to open external modules.

* Fix failing to serialize Collection or Map with inaccessible constructor

Also remove tests which rely on Java implementation details.

* Don't keep reference to access exception of ConstructorConstructor

This also avoids a confusing stack trace, since the previously caught
exception might have had a complete unrelated stack trace.

* Remove Maven toolchain requirement

* Address review feedback

* Add back test for Security Manager",gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,RecursiveTypesResolveTest.java,testIssue603PrintStream
11/09/2021 09:16:35,"=HYPERLINK(""https://github.com/google/gson/commit/b0595c595bd2c052cd05e0283bb37b67c02bd06f"", ""b0595c595bd2c052cd05e0283bb37b67c02bd06f"")","=HYPERLINK(""https://github.com/google/gson/commit/0d9f6b677ae67cbd749ebca817139041d1977831"", ""0d9f6b677ae67cbd749ebca817139041d1977831"")",noreply@github.com,"Fix failing to serialize Collection or Map with inaccessible constructor (#1902)

* Remove UnsafeReflectionAccessor

Revert #1218

Usage of sun.misc.Unsafe to change internal AccessibleObject.override field
to suppress JPMS warnings goes against the intentions of the JPMS and does not
work anymore in newer versions, see #1540.
Therefore remove it and instead create a descriptive exception when making a
member accessible fails. If necessary users can also still use `java` command
line flags to open external modules.

* Fix failing to serialize Collection or Map with inaccessible constructor

Also remove tests which rely on Java implementation details.

* Don't keep reference to access exception of ConstructorConstructor

This also avoids a confusing stack trace, since the previously caught
exception might have had a complete unrelated stack trace.

* Remove Maven toolchain requirement

* Address review feedback

* Add back test for Security Manager",gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,RecursiveTypesResolveTest.java,testIssue440WeakReference
11/09/2021 09:16:35,"=HYPERLINK(""https://github.com/google/gson/commit/b0595c595bd2c052cd05e0283bb37b67c02bd06f"", ""b0595c595bd2c052cd05e0283bb37b67c02bd06f"")","=HYPERLINK(""https://github.com/google/gson/commit/0d9f6b677ae67cbd749ebca817139041d1977831"", ""0d9f6b677ae67cbd749ebca817139041d1977831"")",noreply@github.com,"Fix failing to serialize Collection or Map with inaccessible constructor (#1902)

* Remove UnsafeReflectionAccessor

Revert #1218

Usage of sun.misc.Unsafe to change internal AccessibleObject.override field
to suppress JPMS warnings goes against the intentions of the JPMS and does not
work anymore in newer versions, see #1540.
Therefore remove it and instead create a descriptive exception when making a
member accessible fails. If necessary users can also still use `java` command
line flags to open external modules.

* Fix failing to serialize Collection or Map with inaccessible constructor

Also remove tests which rely on Java implementation details.

* Don't keep reference to access exception of ConstructorConstructor

This also avoids a confusing stack trace, since the previously caught
exception might have had a complete unrelated stack trace.

* Remove Maven toolchain requirement

* Address review feedback

* Add back test for Security Manager",gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java,UnsafeReflectionAccessorTest.java,testMakeAccessibleWithUnsafe
11/09/2021 09:16:35,"=HYPERLINK(""https://github.com/google/gson/commit/b0595c595bd2c052cd05e0283bb37b67c02bd06f"", ""b0595c595bd2c052cd05e0283bb37b67c02bd06f"")","=HYPERLINK(""https://github.com/google/gson/commit/0d9f6b677ae67cbd749ebca817139041d1977831"", ""0d9f6b677ae67cbd749ebca817139041d1977831"")",noreply@github.com,"Fix failing to serialize Collection or Map with inaccessible constructor (#1902)

* Remove UnsafeReflectionAccessor

Revert #1218

Usage of sun.misc.Unsafe to change internal AccessibleObject.override field
to suppress JPMS warnings goes against the intentions of the JPMS and does not
work anymore in newer versions, see #1540.
Therefore remove it and instead create a descriptive exception when making a
member accessible fails. If necessary users can also still use `java` command
line flags to open external modules.

* Fix failing to serialize Collection or Map with inaccessible constructor

Also remove tests which rely on Java implementation details.

* Don't keep reference to access exception of ConstructorConstructor

This also avoids a confusing stack trace, since the previously caught
exception might have had a complete unrelated stack trace.

* Remove Maven toolchain requirement

* Address review feedback

* Add back test for Security Manager",gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java,UnsafeReflectionAccessorTest.java,testMakeAccessibleWithRestrictiveSecurityManager
11/09/2021 09:16:35,"=HYPERLINK(""https://github.com/google/gson/commit/b0595c595bd2c052cd05e0283bb37b67c02bd06f"", ""b0595c595bd2c052cd05e0283bb37b67c02bd06f"")","=HYPERLINK(""https://github.com/google/gson/commit/0d9f6b677ae67cbd749ebca817139041d1977831"", ""0d9f6b677ae67cbd749ebca817139041d1977831"")",noreply@github.com,"Fix failing to serialize Collection or Map with inaccessible constructor (#1902)

* Remove UnsafeReflectionAccessor

Revert #1218

Usage of sun.misc.Unsafe to change internal AccessibleObject.override field
to suppress JPMS warnings goes against the intentions of the JPMS and does not
work anymore in newer versions, see #1540.
Therefore remove it and instead create a descriptive exception when making a
member accessible fails. If necessary users can also still use `java` command
line flags to open external modules.

* Fix failing to serialize Collection or Map with inaccessible constructor

Also remove tests which rely on Java implementation details.

* Don't keep reference to access exception of ConstructorConstructor

This also avoids a confusing stack trace, since the previously caught
exception might have had a complete unrelated stack trace.

* Remove Maven toolchain requirement

* Address review feedback

* Add back test for Security Manager",gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java,UnsafeReflectionAccessorTest.java,ClassWithPrivateFinalFields
01/01/2022 14:44:39,"=HYPERLINK(""https://github.com/google/gson/commit/6b96a389cc40d56fd3d00547c00a42ab2bef6098"", ""6b96a389cc40d56fd3d00547c00a42ab2bef6098"")","=HYPERLINK(""https://github.com/google/gson/commit/dc28951fa7e7112f0e229e0a4665ad27a1891d79"", ""dc28951fa7e7112f0e229e0a4665ad27a1891d79"")",noreply@github.com,"Put `module-info.class` into Multi-Release JAR folder (#2013)

* Put module-info.class into Multi-Release JAR folder

Uses ModiTect to place module-info.class under Multi-Release JAR folder
`META-INF/versions/9`.

* Adjust pom.xml to drop support for Java 6

* Change doclint setting

All Javadoc errors have been solved previously; doclint can now be enabled
without causing build failures.

* Improve README Java requirements",gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java,TreeTypeAdaptersTest.java,createList
01/28/2022 13:26:28,"=HYPERLINK(""https://github.com/google/gson/commit/e2e851c9bc692cec68ba7b0cbb002f82b4a229e4"", ""e2e851c9bc692cec68ba7b0cbb002f82b4a229e4"")","=HYPERLINK(""https://github.com/google/gson/commit/710a76c8b8835e36935c62024001ba6b91ceee01"", ""710a76c8b8835e36935c62024001ba6b91ceee01"")",noreply@github.com,"Add LazilyParsedNumber default adapter (#2060)

* Add LazilyParsedNumber default adapter

* Validate JsonWriter.value(Number) argument

* Fix incorrect JSON number pattern, extend tests",gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,JsonWriterTest.java,testNonFiniteBoxedDoubles
01/28/2022 13:26:28,"=HYPERLINK(""https://github.com/google/gson/commit/e2e851c9bc692cec68ba7b0cbb002f82b4a229e4"", ""e2e851c9bc692cec68ba7b0cbb002f82b4a229e4"")","=HYPERLINK(""https://github.com/google/gson/commit/710a76c8b8835e36935c62024001ba6b91ceee01"", ""710a76c8b8835e36935c62024001ba6b91ceee01"")",noreply@github.com,"Add LazilyParsedNumber default adapter (#2060)

* Add LazilyParsedNumber default adapter

* Validate JsonWriter.value(Number) argument

* Fix incorrect JSON number pattern, extend tests",gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,JsonWriterTest.java,testNonFiniteBoxedDoublesWhenLenient
04/03/2022 22:00:54,"=HYPERLINK(""https://github.com/google/gson/commit/b2b1424582f973457e15f4eeba35cd3c0c0ed2b6"", ""b2b1424582f973457e15f4eeba35cd3c0c0ed2b6"")","=HYPERLINK(""https://github.com/google/gson/commit/774c751a9ee026c6d7e4b0ca44dac6ad526de557"", ""774c751a9ee026c6d7e4b0ca44dac6ad526de557"")",noreply@github.com,"codegen removal (#2099)

* Delete CodeGenFunctionalTest.java

* codegen removal

* pom.xml update

* email config

* Remove unnecessary space change.

Co-authored-by: Éamonn McManus <emcmanus@google.com>",codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,CodeGenFunctionalTest.java,testGeneratedJson
07/29/2022 12:10:54,"=HYPERLINK(""https://github.com/google/gson/commit/6d2557d5d1a8ac498f2bcee20e5053c93b33ecce"", ""6d2557d5d1a8ac498f2bcee20e5053c93b33ecce"")","=HYPERLINK(""https://github.com/google/gson/commit/2deb2099d3007b8bb0e324bc364b6f9dddada0cd"", ""2deb2099d3007b8bb0e324bc364b6f9dddada0cd"")",noreply@github.com,Remove unused package-private FieldAttributes methods (#2162),gson/src/test/java/com/google/gson/FieldAttributesTest.java,FieldAttributesTest.java,testIsSynthetic
07/31/2022 16:49:02,"=HYPERLINK(""https://github.com/google/gson/commit/a45c55739f4e5eb25e9b67a8b7e2bfad25851fb6"", ""a45c55739f4e5eb25e9b67a8b7e2bfad25851fb6"")","=HYPERLINK(""https://github.com/google/gson/commit/5f2513a407793b4f9d5293f77414144e76041087"", ""5f2513a407793b4f9d5293f77414144e76041087"")",noreply@github.com,"Improve ArrayTypeAdapter for Object[] (#1716)

* Improve ArrayTypeAdapter for Object[]

* Fix typo in test method names",gson/src/test/java/com/google/gson/functional/ArrayTest.java,ArrayTest.java,testMultidimenstionalArraysSerialization
07/31/2022 16:49:02,"=HYPERLINK(""https://github.com/google/gson/commit/a45c55739f4e5eb25e9b67a8b7e2bfad25851fb6"", ""a45c55739f4e5eb25e9b67a8b7e2bfad25851fb6"")","=HYPERLINK(""https://github.com/google/gson/commit/5f2513a407793b4f9d5293f77414144e76041087"", ""5f2513a407793b4f9d5293f77414144e76041087"")",noreply@github.com,"Improve ArrayTypeAdapter for Object[] (#1716)

* Improve ArrayTypeAdapter for Object[]

* Fix typo in test method names",gson/src/test/java/com/google/gson/functional/ArrayTest.java,ArrayTest.java,testMultiDimenstionalObjectArraysSerialization
07/31/2022 16:49:02,"=HYPERLINK(""https://github.com/google/gson/commit/a45c55739f4e5eb25e9b67a8b7e2bfad25851fb6"", ""a45c55739f4e5eb25e9b67a8b7e2bfad25851fb6"")","=HYPERLINK(""https://github.com/google/gson/commit/5f2513a407793b4f9d5293f77414144e76041087"", ""5f2513a407793b4f9d5293f77414144e76041087"")",noreply@github.com,"Improve ArrayTypeAdapter for Object[] (#1716)

* Improve ArrayTypeAdapter for Object[]

* Fix typo in test method names",gson/src/test/java/com/google/gson/functional/ArrayTest.java,ArrayTest.java,testMultidimenstionalArraysDeserialization
08/07/2022 18:00:35,"=HYPERLINK(""https://github.com/google/gson/commit/9eb04414c0a7f201d039cdbf9a9ebc4144990d3f"", ""9eb04414c0a7f201d039cdbf9a9ebc4144990d3f"")","=HYPERLINK(""https://github.com/google/gson/commit/76c78f5925ec80434cbbd28332f841f74fee3275"", ""76c78f5925ec80434cbbd28332f841f74fee3275"")",noreply@github.com,"Improve InternationalizationTest (#1705)

* Improve InternationalizationTest

- Remove ""raw"" tests since after compiling they are the same as the one with
  escape sequences
- Add tests for supplementary code points (> \uFFFF)

* Improve variable names, fix incorrect escape sequences",gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,InternationalizationTest.java,testStringsWithRawChineseCharactersDeserialization
08/26/2022 19:36:18,"=HYPERLINK(""https://github.com/google/gson/commit/f7a164d98b77d7f7e3f918115781e74fdede5bdb"", ""f7a164d98b77d7f7e3f918115781e74fdede5bdb"")","=HYPERLINK(""https://github.com/google/gson/commit/325f37cd6b743c07eab8a595542fa3ae9bb820c8"", ""325f37cd6b743c07eab8a595542fa3ae9bb820c8"")",noreply@github.com,"Fail Maven build on compiler warnings; remove some warning suppressions (#2183)

* Fail Maven build on compiler warnings; remove some warning suppressions

* Fix compiler warnings causing failure for newer JDK

* Improve placement of ""raw"" and ""unchecked"" warning suppressions

* Adjust javac documentation link

* Fix compilation error on newer JDKs",gson/src/test/java/com/google/gson/functional/CollectionTest.java,CollectionTest.java,testRawCollectionSerialization
08/26/2022 19:36:18,"=HYPERLINK(""https://github.com/google/gson/commit/f7a164d98b77d7f7e3f918115781e74fdede5bdb"", ""f7a164d98b77d7f7e3f918115781e74fdede5bdb"")","=HYPERLINK(""https://github.com/google/gson/commit/325f37cd6b743c07eab8a595542fa3ae9bb820c8"", ""325f37cd6b743c07eab8a595542fa3ae9bb820c8"")",noreply@github.com,"Fail Maven build on compiler warnings; remove some warning suppressions (#2183)

* Fail Maven build on compiler warnings; remove some warning suppressions

* Fix compiler warnings causing failure for newer JDK

* Improve placement of ""raw"" and ""unchecked"" warning suppressions

* Adjust javac documentation link

* Fix compilation error on newer JDKs",gson/src/test/java/com/google/gson/functional/MapTest.java,MapTest.java,testRawMapSerialization
10/02/2022 18:38:43,"=HYPERLINK(""https://github.com/google/gson/commit/796193d0326a2f44bc314bf24262732ea3e64014"", ""796193d0326a2f44bc314bf24262732ea3e64014"")","=HYPERLINK(""https://github.com/google/gson/commit/28609089faa747f2ad5730281c14093ab40d6fda"", ""28609089faa747f2ad5730281c14093ab40d6fda"")",noreply@github.com,Improve versioning support documentation and validate version (#2214),gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,VersionExclusionStrategyTest.java,testClassAndFieldAreAtSameVersion
10/02/2022 18:38:43,"=HYPERLINK(""https://github.com/google/gson/commit/796193d0326a2f44bc314bf24262732ea3e64014"", ""796193d0326a2f44bc314bf24262732ea3e64014"")","=HYPERLINK(""https://github.com/google/gson/commit/28609089faa747f2ad5730281c14093ab40d6fda"", ""28609089faa747f2ad5730281c14093ab40d6fda"")",noreply@github.com,Improve versioning support documentation and validate version (#2214),gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,VersionExclusionStrategyTest.java,testClassAndFieldAreBehindInVersion
10/02/2022 18:38:43,"=HYPERLINK(""https://github.com/google/gson/commit/796193d0326a2f44bc314bf24262732ea3e64014"", ""796193d0326a2f44bc314bf24262732ea3e64014"")","=HYPERLINK(""https://github.com/google/gson/commit/28609089faa747f2ad5730281c14093ab40d6fda"", ""28609089faa747f2ad5730281c14093ab40d6fda"")",noreply@github.com,Improve versioning support documentation and validate version (#2214),gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,VersionExclusionStrategyTest.java,testClassAndFieldAreAheadInVersion
10/02/2022 18:38:43,"=HYPERLINK(""https://github.com/google/gson/commit/796193d0326a2f44bc314bf24262732ea3e64014"", ""796193d0326a2f44bc314bf24262732ea3e64014"")","=HYPERLINK(""https://github.com/google/gson/commit/28609089faa747f2ad5730281c14093ab40d6fda"", ""28609089faa747f2ad5730281c14093ab40d6fda"")",noreply@github.com,Improve versioning support documentation and validate version (#2214),gson/src/test/java/com/google/gson/functional/VersioningTest.java,VersioningTest.java,setUp
10/16/2022 14:30:49,"=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")","=HYPERLINK(""https://github.com/google/gson/commit/c2458bf876ef52a4489af937f7dd7c2709b74fb9"", ""c2458bf876ef52a4489af937f7dd7c2709b74fb9"")",noreply@github.com,"Add `JsonArray.asList` and `JsonObject.asMap` view methods (#2225)

* Add `JsonArray.asList` and `JsonObject.asMap` view methods

* Address review comments",gson/src/test/java/com/google/gson/functional/JsonArrayTest.java,JsonArrayTest.java,testStringPrimitiveAddition
10/16/2022 14:30:49,"=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")","=HYPERLINK(""https://github.com/google/gson/commit/c2458bf876ef52a4489af937f7dd7c2709b74fb9"", ""c2458bf876ef52a4489af937f7dd7c2709b74fb9"")",noreply@github.com,"Add `JsonArray.asList` and `JsonObject.asMap` view methods (#2225)

* Add `JsonArray.asList` and `JsonObject.asMap` view methods

* Address review comments",gson/src/test/java/com/google/gson/functional/JsonArrayTest.java,JsonArrayTest.java,testIntegerPrimitiveAddition
10/16/2022 14:30:49,"=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")","=HYPERLINK(""https://github.com/google/gson/commit/c2458bf876ef52a4489af937f7dd7c2709b74fb9"", ""c2458bf876ef52a4489af937f7dd7c2709b74fb9"")",noreply@github.com,"Add `JsonArray.asList` and `JsonObject.asMap` view methods (#2225)

* Add `JsonArray.asList` and `JsonObject.asMap` view methods

* Address review comments",gson/src/test/java/com/google/gson/functional/JsonArrayTest.java,JsonArrayTest.java,testDoublePrimitiveAddition
10/16/2022 14:30:49,"=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")","=HYPERLINK(""https://github.com/google/gson/commit/c2458bf876ef52a4489af937f7dd7c2709b74fb9"", ""c2458bf876ef52a4489af937f7dd7c2709b74fb9"")",noreply@github.com,"Add `JsonArray.asList` and `JsonObject.asMap` view methods (#2225)

* Add `JsonArray.asList` and `JsonObject.asMap` view methods

* Address review comments",gson/src/test/java/com/google/gson/functional/JsonArrayTest.java,JsonArrayTest.java,testBooleanPrimitiveAddition
10/16/2022 14:30:49,"=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")","=HYPERLINK(""https://github.com/google/gson/commit/c2458bf876ef52a4489af937f7dd7c2709b74fb9"", ""c2458bf876ef52a4489af937f7dd7c2709b74fb9"")",noreply@github.com,"Add `JsonArray.asList` and `JsonObject.asMap` view methods (#2225)

* Add `JsonArray.asList` and `JsonObject.asMap` view methods

* Address review comments",gson/src/test/java/com/google/gson/functional/JsonArrayTest.java,JsonArrayTest.java,testCharPrimitiveAddition
10/16/2022 14:30:49,"=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")","=HYPERLINK(""https://github.com/google/gson/commit/c2458bf876ef52a4489af937f7dd7c2709b74fb9"", ""c2458bf876ef52a4489af937f7dd7c2709b74fb9"")",noreply@github.com,"Add `JsonArray.asList` and `JsonObject.asMap` view methods (#2225)

* Add `JsonArray.asList` and `JsonObject.asMap` view methods

* Address review comments",gson/src/test/java/com/google/gson/functional/JsonArrayTest.java,JsonArrayTest.java,testMixedPrimitiveAddition
10/16/2022 14:30:49,"=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")","=HYPERLINK(""https://github.com/google/gson/commit/c2458bf876ef52a4489af937f7dd7c2709b74fb9"", ""c2458bf876ef52a4489af937f7dd7c2709b74fb9"")",noreply@github.com,"Add `JsonArray.asList` and `JsonObject.asMap` view methods (#2225)

* Add `JsonArray.asList` and `JsonObject.asMap` view methods

* Address review comments",gson/src/test/java/com/google/gson/functional/JsonArrayTest.java,JsonArrayTest.java,testNullPrimitiveAddition
10/16/2022 14:30:49,"=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")","=HYPERLINK(""https://github.com/google/gson/commit/c2458bf876ef52a4489af937f7dd7c2709b74fb9"", ""c2458bf876ef52a4489af937f7dd7c2709b74fb9"")",noreply@github.com,"Add `JsonArray.asList` and `JsonObject.asMap` view methods (#2225)

* Add `JsonArray.asList` and `JsonObject.asMap` view methods

* Address review comments",gson/src/test/java/com/google/gson/functional/JsonArrayTest.java,JsonArrayTest.java,testSameAddition
10/22/2022 11:01:56,"=HYPERLINK(""https://github.com/google/gson/commit/66d9621ce87c04a5167ee04097694093b13b514c"", ""66d9621ce87c04a5167ee04097694093b13b514c"")","=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")",noreply@github.com,"Adjust Record adapter and extend test coverage (#2224)

* Adjust Record adapter and extend test coverage

* Address review feedback

* Make constructor string more concise

* Add tests for Gson default behavior for static fields

* Improve exception for deserializing static final field

Previously it would report ""Unexpected IllegalAccessException occurred...""
due to the uncaught IllegalAccessException.

* Improve handling of exception thrown by accessor

Such an exception is not 'unexpected' (which was claimed by the previous
exception handling) because user code could throw it.

* Improve constructor invocation exception handling and add tests",gson/src/test/java/com/google/gson/functional/Java17RecordTest.java,Java17RecordTest.java,testPrimitiveNullValues
10/22/2022 11:01:56,"=HYPERLINK(""https://github.com/google/gson/commit/66d9621ce87c04a5167ee04097694093b13b514c"", ""66d9621ce87c04a5167ee04097694093b13b514c"")","=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")",noreply@github.com,"Adjust Record adapter and extend test coverage (#2224)

* Adjust Record adapter and extend test coverage

* Address review feedback

* Make constructor string more concise

* Add tests for Gson default behavior for static fields

* Improve exception for deserializing static final field

Previously it would report ""Unexpected IllegalAccessException occurred...""
due to the uncaught IllegalAccessException.

* Improve handling of exception thrown by accessor

Such an exception is not 'unexpected' (which was claimed by the previous
exception handling) because user code could throw it.

* Improve constructor invocation exception handling and add tests",gson/src/test/java/com/google/gson/functional/Java17RecordTest.java,Java17RecordTest.java,MyRecord
10/22/2022 11:01:56,"=HYPERLINK(""https://github.com/google/gson/commit/66d9621ce87c04a5167ee04097694093b13b514c"", ""66d9621ce87c04a5167ee04097694093b13b514c"")","=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")",noreply@github.com,"Adjust Record adapter and extend test coverage (#2224)

* Adjust Record adapter and extend test coverage

* Address review feedback

* Make constructor string more concise

* Add tests for Gson default behavior for static fields

* Improve exception for deserializing static final field

Previously it would report ""Unexpected IllegalAccessException occurred...""
due to the uncaught IllegalAccessException.

* Improve handling of exception thrown by accessor

Such an exception is not 'unexpected' (which was claimed by the previous
exception handling) because user code could throw it.

* Improve constructor invocation exception handling and add tests",gson/src/test/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactoryTest.java,Java17ReflectiveTypeAdapterFactoryTest.java,setUp
10/22/2022 11:01:56,"=HYPERLINK(""https://github.com/google/gson/commit/66d9621ce87c04a5167ee04097694093b13b514c"", ""66d9621ce87c04a5167ee04097694093b13b514c"")","=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")",noreply@github.com,"Adjust Record adapter and extend test coverage (#2224)

* Adjust Record adapter and extend test coverage

* Address review feedback

* Make constructor string more concise

* Add tests for Gson default behavior for static fields

* Improve exception for deserializing static final field

Previously it would report ""Unexpected IllegalAccessException occurred...""
due to the uncaught IllegalAccessException.

* Improve handling of exception thrown by accessor

Such an exception is not 'unexpected' (which was claimed by the previous
exception handling) because user code could throw it.

* Improve constructor invocation exception handling and add tests",gson/src/test/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactoryTest.java,Java17ReflectiveTypeAdapterFactoryTest.java,testCustomAdapterForRecords
10/22/2022 11:01:56,"=HYPERLINK(""https://github.com/google/gson/commit/66d9621ce87c04a5167ee04097694093b13b514c"", ""66d9621ce87c04a5167ee04097694093b13b514c"")","=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")",noreply@github.com,"Adjust Record adapter and extend test coverage (#2224)

* Adjust Record adapter and extend test coverage

* Address review feedback

* Make constructor string more concise

* Add tests for Gson default behavior for static fields

* Improve exception for deserializing static final field

Previously it would report ""Unexpected IllegalAccessException occurred...""
due to the uncaught IllegalAccessException.

* Improve handling of exception thrown by accessor

Such an exception is not 'unexpected' (which was claimed by the previous
exception handling) because user code could throw it.

* Improve constructor invocation exception handling and add tests",gson/src/test/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactoryTest.java,Java17ReflectiveTypeAdapterFactoryTest.java,testSerializeRecords
10/22/2022 11:01:56,"=HYPERLINK(""https://github.com/google/gson/commit/66d9621ce87c04a5167ee04097694093b13b514c"", ""66d9621ce87c04a5167ee04097694093b13b514c"")","=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")",noreply@github.com,"Adjust Record adapter and extend test coverage (#2224)

* Adjust Record adapter and extend test coverage

* Address review feedback

* Make constructor string more concise

* Add tests for Gson default behavior for static fields

* Improve exception for deserializing static final field

Previously it would report ""Unexpected IllegalAccessException occurred...""
due to the uncaught IllegalAccessException.

* Improve handling of exception thrown by accessor

Such an exception is not 'unexpected' (which was claimed by the previous
exception handling) because user code could throw it.

* Improve constructor invocation exception handling and add tests",gson/src/test/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactoryTest.java,Java17ReflectiveTypeAdapterFactoryTest.java,write
10/22/2022 11:01:56,"=HYPERLINK(""https://github.com/google/gson/commit/66d9621ce87c04a5167ee04097694093b13b514c"", ""66d9621ce87c04a5167ee04097694093b13b514c"")","=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")",noreply@github.com,"Adjust Record adapter and extend test coverage (#2224)

* Adjust Record adapter and extend test coverage

* Address review feedback

* Make constructor string more concise

* Add tests for Gson default behavior for static fields

* Improve exception for deserializing static final field

Previously it would report ""Unexpected IllegalAccessException occurred...""
due to the uncaught IllegalAccessException.

* Improve handling of exception thrown by accessor

Such an exception is not 'unexpected' (which was claimed by the previous
exception handling) because user code could throw it.

* Improve constructor invocation exception handling and add tests",gson/src/test/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactoryTest.java,Java17ReflectiveTypeAdapterFactoryTest.java,read
10/22/2022 11:01:56,"=HYPERLINK(""https://github.com/google/gson/commit/66d9621ce87c04a5167ee04097694093b13b514c"", ""66d9621ce87c04a5167ee04097694093b13b514c"")","=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")",noreply@github.com,"Adjust Record adapter and extend test coverage (#2224)

* Adjust Record adapter and extend test coverage

* Address review feedback

* Make constructor string more concise

* Add tests for Gson default behavior for static fields

* Improve exception for deserializing static final field

Previously it would report ""Unexpected IllegalAccessException occurred...""
due to the uncaught IllegalAccessException.

* Improve handling of exception thrown by accessor

Such an exception is not 'unexpected' (which was claimed by the previous
exception handling) because user code could throw it.

* Improve constructor invocation exception handling and add tests",gson/src/test/java/com/google/gson/internal/reflect/ReflectionHelperTest.java,Java17ReflectionHelperTest.java,setUp
10/22/2022 11:01:56,"=HYPERLINK(""https://github.com/google/gson/commit/66d9621ce87c04a5167ee04097694093b13b514c"", ""66d9621ce87c04a5167ee04097694093b13b514c"")","=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")",noreply@github.com,"Adjust Record adapter and extend test coverage (#2224)

* Adjust Record adapter and extend test coverage

* Address review feedback

* Make constructor string more concise

* Add tests for Gson default behavior for static fields

* Improve exception for deserializing static final field

Previously it would report ""Unexpected IllegalAccessException occurred...""
due to the uncaught IllegalAccessException.

* Improve handling of exception thrown by accessor

Such an exception is not 'unexpected' (which was claimed by the previous
exception handling) because user code could throw it.

* Improve constructor invocation exception handling and add tests",gson/src/test/java/com/google/gson/internal/reflect/ReflectionHelperTest.java,Java17ReflectionHelperTest.java,testJava17Record
10/22/2022 11:01:56,"=HYPERLINK(""https://github.com/google/gson/commit/66d9621ce87c04a5167ee04097694093b13b514c"", ""66d9621ce87c04a5167ee04097694093b13b514c"")","=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")",noreply@github.com,"Adjust Record adapter and extend test coverage (#2224)

* Adjust Record adapter and extend test coverage

* Address review feedback

* Make constructor string more concise

* Add tests for Gson default behavior for static fields

* Improve exception for deserializing static final field

Previously it would report ""Unexpected IllegalAccessException occurred...""
due to the uncaught IllegalAccessException.

* Improve handling of exception thrown by accessor

Such an exception is not 'unexpected' (which was claimed by the previous
exception handling) because user code could throw it.

* Improve constructor invocation exception handling and add tests",gson/src/test/java/com/google/gson/internal/reflect/ReflectionHelperTest.java,Java17ReflectionHelperTest.java,testJava17RecordAccessors
10/22/2022 11:01:56,"=HYPERLINK(""https://github.com/google/gson/commit/66d9621ce87c04a5167ee04097694093b13b514c"", ""66d9621ce87c04a5167ee04097694093b13b514c"")","=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")",noreply@github.com,"Adjust Record adapter and extend test coverage (#2224)

* Adjust Record adapter and extend test coverage

* Address review feedback

* Make constructor string more concise

* Add tests for Gson default behavior for static fields

* Improve exception for deserializing static final field

Previously it would report ""Unexpected IllegalAccessException occurred...""
due to the uncaught IllegalAccessException.

* Improve handling of exception thrown by accessor

Such an exception is not 'unexpected' (which was claimed by the previous
exception handling) because user code could throw it.

* Improve constructor invocation exception handling and add tests",gson/src/test/java/com/google/gson/internal/reflect/ReflectionHelperTest.java,Java17ReflectionHelperTest.java,PrincipalImpl
10/22/2022 11:01:56,"=HYPERLINK(""https://github.com/google/gson/commit/66d9621ce87c04a5167ee04097694093b13b514c"", ""66d9621ce87c04a5167ee04097694093b13b514c"")","=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")",noreply@github.com,"Adjust Record adapter and extend test coverage (#2224)

* Adjust Record adapter and extend test coverage

* Address review feedback

* Make constructor string more concise

* Add tests for Gson default behavior for static fields

* Improve exception for deserializing static final field

Previously it would report ""Unexpected IllegalAccessException occurred...""
due to the uncaught IllegalAccessException.

* Improve handling of exception thrown by accessor

Such an exception is not 'unexpected' (which was claimed by the previous
exception handling) because user code could throw it.

* Improve constructor invocation exception handling and add tests",gson/src/test/java/com/google/gson/internal/reflect/ReflectionHelperTest.java,Java17ReflectionHelperTest.java,getName
10/22/2022 11:01:56,"=HYPERLINK(""https://github.com/google/gson/commit/66d9621ce87c04a5167ee04097694093b13b514c"", ""66d9621ce87c04a5167ee04097694093b13b514c"")","=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")",noreply@github.com,"Adjust Record adapter and extend test coverage (#2224)

* Adjust Record adapter and extend test coverage

* Address review feedback

* Make constructor string more concise

* Add tests for Gson default behavior for static fields

* Improve exception for deserializing static final field

Previously it would report ""Unexpected IllegalAccessException occurred...""
due to the uncaught IllegalAccessException.

* Improve handling of exception thrown by accessor

Such an exception is not 'unexpected' (which was claimed by the previous
exception handling) because user code could throw it.

* Improve constructor invocation exception handling and add tests",gson/src/test/java/com/google/gson/internal/reflect/ReflectionHelperTest.java,Java17ReflectionHelperTest.java,equals
10/22/2022 11:01:56,"=HYPERLINK(""https://github.com/google/gson/commit/66d9621ce87c04a5167ee04097694093b13b514c"", ""66d9621ce87c04a5167ee04097694093b13b514c"")","=HYPERLINK(""https://github.com/google/gson/commit/954d526af4ad9e58872e7a64f92e749421d1cdf5"", ""954d526af4ad9e58872e7a64f92e749421d1cdf5"")",noreply@github.com,"Adjust Record adapter and extend test coverage (#2224)

* Adjust Record adapter and extend test coverage

* Address review feedback

* Make constructor string more concise

* Add tests for Gson default behavior for static fields

* Improve exception for deserializing static final field

Previously it would report ""Unexpected IllegalAccessException occurred...""
due to the uncaught IllegalAccessException.

* Improve handling of exception thrown by accessor

Such an exception is not 'unexpected' (which was claimed by the previous
exception handling) because user code could throw it.

* Improve constructor invocation exception handling and add tests",gson/src/test/java/com/google/gson/internal/reflect/ReflectionHelperTest.java,Java17ReflectionHelperTest.java,hashCode
10/29/2022 03:15:43,"=HYPERLINK(""https://github.com/google/gson/commit/dd6635dc61626dde42423b61e6427abd946f35cb"", ""dd6635dc61626dde42423b61e6427abd946f35cb"")","=HYPERLINK(""https://github.com/google/gson/commit/763e69a33117fcfc2b527aee7cda5866cc747b22"", ""763e69a33117fcfc2b527aee7cda5866cc747b22"")",noreply@github.com,"Making consistent prefixs in PerformanceTest (#1760)

* Making consistent prefixs in PerformanceTest

change some ""disable_"" to ""disabled_""

* Update PerformanceTest.java",gson/src/test/java/com/google/gson/metrics/PerformanceTest.java,PerformanceTest.java,testByteArrayDeserialization
10/29/2022 03:15:43,"=HYPERLINK(""https://github.com/google/gson/commit/dd6635dc61626dde42423b61e6427abd946f35cb"", ""dd6635dc61626dde42423b61e6427abd946f35cb"")","=HYPERLINK(""https://github.com/google/gson/commit/763e69a33117fcfc2b527aee7cda5866cc747b22"", ""763e69a33117fcfc2b527aee7cda5866cc747b22"")",noreply@github.com,"Making consistent prefixs in PerformanceTest (#1760)

* Making consistent prefixs in PerformanceTest

change some ""disable_"" to ""disabled_""

* Update PerformanceTest.java",gson/src/test/java/com/google/gson/metrics/PerformanceTest.java,PerformanceTest.java,testLargeObjectSerializationAndDeserialization
