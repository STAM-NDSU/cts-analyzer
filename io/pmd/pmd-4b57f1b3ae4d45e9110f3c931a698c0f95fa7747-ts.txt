/* * User: tom * Date: Jun 20, 2002 * Time: 8:43:20 AM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import java.util.List;import net.sourceforge.pmd.RuleFactory;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.rules.DontCreateTimersRule;import net.sourceforge.pmd.rules.EmptyIfStmtRule;public class RuleFactoryTest extends TestCase {    public RuleFactoryTest(String name) {        super(name);    }    public void testCougaar() {        List r = RuleFactory.createRules(RuleFactory.COUGAAR);        assertTrue(r.contains(new DontCreateTimersRule()));    }    public void testAll() {        List r = RuleFactory.createRules(RuleFactory.ALL);        assertTrue(r.contains(new EmptyIfStmtRule()));    }    public void testGeneral() {        List r = RuleFactory.createRules(RuleFactory.GENERAL);        assertTrue(r.contains(new EmptyIfStmtRule()));        assertTrue(!r.contains(new DontCreateTimersRule()));    }    public void testException() {        try {            RuleFactory.createRules("blah");        } catch (Exception e) {            return; // cool        }        throw new RuntimeException("Should have thrown RuntimeException");    }}
/* * User: tom * Date: Jun 19, 2002 * Time: 11:09:06 AM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import net.sourceforge.pmd.SymbolTable;import net.sourceforge.pmd.Symbol;import java.util.HashMap;public class SymbolTableTest extends TestCase {    private static final Symbol FOO = new Symbol("foo", 10);    public SymbolTableTest(String name) {        super(name);    }    public void testAdd() {        SymbolTable s = new SymbolTable();        s.add(FOO);        try {            s.add(FOO);        } catch (RuntimeException e) {            return; // cool        }        throw new RuntimeException("Should have thrown RuntimeException");    }    public void testParent() {        SymbolTable parent = new SymbolTable();        SymbolTable child = new SymbolTable(parent);        assertEquals(child.getParent(), parent);    }    public void testAddSameSymbol() {        SymbolTable parent = new SymbolTable();        parent.add(FOO);        SymbolTable child = new SymbolTable(parent);        try {            child.add(FOO);        } catch (RuntimeException e) {            return; // cool        }        throw new RuntimeException("Should have thrown RuntimeException");    }    public void testParentContains2() {        SymbolTable parent = new SymbolTable();        SymbolTable child = new SymbolTable(parent);        child.add(new Symbol("bar", 12));        child.add(new Symbol("baz", 12));        assertTrue(!parent.getUnusedSymbols().hasNext());        assertTrue(child.getUnusedSymbols().hasNext());    }    public void testRecordUsage() {        SymbolTable s = new SymbolTable();        s.add(FOO);        assertTrue(s.getUnusedSymbols().hasNext());        s.recordPossibleUsageOf(FOO);        assertTrue(!s.getUnusedSymbols().hasNext());    }    public void testRecordPossibleUsage() {        SymbolTable parent = new SymbolTable();        SymbolTable child = new SymbolTable(parent);        child.recordPossibleUsageOf(new Symbol("bar", 10));        assertTrue(!parent.getUnusedSymbols().hasNext());    }    public void testRecordPossibleUsage2() {        SymbolTable s = new SymbolTable();        s.recordPossibleUsageOf(new Symbol("bar", 10));        assertTrue(!s.getUnusedSymbols().hasNext());    }    public void testRecordUsageParent() {        SymbolTable parent = new SymbolTable();        parent.add(FOO);        SymbolTable child = new SymbolTable(parent);        assertEquals(FOO, parent.getUnusedSymbols().next());    }    public void testRecordUsageParent2() {        SymbolTable parent = new SymbolTable();        parent.add(FOO);        SymbolTable child = new SymbolTable(parent);        child.recordPossibleUsageOf(FOO);        assertTrue(!parent.getUnusedSymbols().hasNext());    }}
/* * User: tom * Date: Jun 17, 2002 * Time: 3:19:33 PM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.util.Iterator;import net.sourceforge.pmd.*;import net.sourceforge.pmd.rules.*;public class FunctionalTest extends TestCase{    public FunctionalTest(String name) {        super(name);    }    public void testUnusedLocal1() {        Report report = process("Unused1.java");        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new UnusedLocalVariableRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testUnusedLocal2() {        Report report = process("Unused2.java");        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new UnusedLocalVariableRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testUnusedLocal3() {        Report report = process("Unused3.java");        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new UnusedLocalVariableRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testUnusedLocal4() {        Report report = process("Unused4.java");        assertTrue(report.currentFileHasNoViolations());    }    public void testUnusedLocal5() {        Report report = process("Unused5.java");        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new UnusedLocalVariableRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testUnusedLocal6() {        Report report = process("Unused6.java");        assertTrue(report.currentFileHasNoViolations());    }    public void testUnusedLocal7() {        Report report = process("Unused7.java");        assertTrue(report.currentFileHasNoViolations());    }    public void testUnusedLocal8() {        Report report = process("Unused8.java");        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new SystemPropsRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testUnusedLocal9() {        Report report = process("Unused9.java");        assertEquals(2, report.countViolationsInCurrentFile());        Iterator i =  report.violationsInCurrentFile();        assertEquals(new UnusedLocalVariableRule(), ((RuleViolation)i.next()).getRule());        assertEquals(new UnusedLocalVariableRule(), ((RuleViolation)i.next()).getRule());    }    public void testUnusedLocal10() {        Report report = process("Unused10.java");        assertTrue(report.currentFileHasNoViolations());    }    public void testEmptyCatchBlock() {        Report report = process("EmptyCatchBlock.java");        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new EmptyCatchBlockRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testUnnecessaryTemporaries() {        Report report = process("UnnecessaryTemporary.java");        assertEquals(6, report.countViolationsInCurrentFile());        assertEquals(new UnnecessaryConversionTemporaryRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testProps() {        Report report = process("ContainsSystemGetProps.java");        assertEquals(3, report.countViolationsInCurrentFile());        assertEquals(new SystemPropsRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testSystemIn() {        Report report = process("ContainsSystemIn.java");        assertEquals(3, report.countViolationsInCurrentFile());        assertEquals(new SystemOutRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testSystemOut() {        Report report = process("ContainsSystemOut.java");        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new SystemOutRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testCreateAThread() {        Report report = process("CreatesAThread.java");        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new DontCreateThreadsRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testCreateATimer() {        Report report = process("CreatesATimer.java");        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new DontCreateTimersRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testEmptyIf() {        Report report = process("EmptyIfStmtRule.java");        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new EmptyIfStmtRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testUnusedPrivateInstanceVar1() {        Report report = process("UnusedPrivateInstanceVar1.java");        assertEquals(1, report.countViolationsInCurrentFile());        Iterator i =  report.violationsInCurrentFile();        assertEquals(new UnusedPrivateInstanceVariableRule(), ((RuleViolation)i.next()).getRule());    }    public void testUnusedPrivateInstanceVar2() {        Report report = process("UnusedPrivateInstanceVar2.java");        assertTrue(report.currentFileHasNoViolations());    }    public void testUnusedPrivateInstanceVar3() {        Report report = process("UnusedPrivateInstanceVar3.java");        assertEquals(1, report.countViolationsInCurrentFile());        Iterator i =  report.violationsInCurrentFile();        assertEquals(new UnusedPrivateInstanceVariableRule(), ((RuleViolation)i.next()).getRule());    }    public void testUnusedPrivateInstanceVar4() {        Report report = process("UnusedPrivateInstanceVar4.java");        assertTrue(report.currentFileHasNoViolations());    }    public void testUnusedPrivateInstanceVar6() {        Report report = process("UnusedPrivateInstanceVar6.java");        assertTrue(report.currentFileHasNoViolations());    }    public void testUnusedPrivateInstanceVar7() {        Report report = process("UnusedPrivateInstanceVar7.java");        assertTrue(report.currentFileHasNoViolations());    }    public void testUnusedPrivateInstanceVar8() {        Report report = process("UnusedPrivateInstanceVar8.java");        assertTrue(report.currentFileHasNoViolations());    }    public void testIfElseStmtsMustUseBraces1() {        Report report = process("IfElseStmtsNeedBraces1.java");        assertEquals(1, report.countViolationsInCurrentFile());    }    public void testIfElseStmtsMustUseBraces2() {        Report report = process("IfElseStmtsNeedBraces2.java");        assertTrue(report.currentFileHasNoViolations());    }/*TODO - this tests unused variables in nested classes    public void testUnusedPrivateInstanceVar9() {        Report report = process("UnusedPrivateInstanceVar9.java");        assertEquals(1, report.violationsInCurrentFile());    }TODO - this tests unused variables in nested classes*/    private Report process(String file) {        try {            PMD p = new PMD();            Report report = new Report("xml", file);            p.processFile(file, getClass().getClassLoader().getResourceAsStream(file), RuleFactory.ALL, report);            return report;        } catch (FileNotFoundException fnfe) {            throw new RuntimeException("File " + file + " not found");        }    }}
/* * User: tom * Date: Jun 14, 2002 * Time: 1:18:30 PM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.Rule;import java.lang.reflect.Proxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;public class ReportTest extends TestCase {    private static class MyInv implements InvocationHandler {        private String in;        public MyInv() {}        public MyInv(String in) {            this.in = in;        }        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {            return in;        }    }    public ReportTest(String name) {        super(name);    }    public void testBasic() {        Report r = new Report("foo", "xml");        Rule rule = (Rule) Proxy.newProxyInstance(Rule.class.getClassLoader(), new Class[] {Rule.class },  new MyInv());        r.addRuleViolation(new RuleViolation(rule, 5));        assertTrue(!r.currentFileHasNoViolations());    }    public void testRenderXML() {        Report r = new Report("foo", "xml");        InvocationHandler ih = new MyInv("foo");        Rule rule = (Rule) Proxy.newProxyInstance(Rule.class.getClassLoader(), new Class[] {Rule.class },  ih);        r.addRuleViolation(new RuleViolation(rule, 5));        assertTrue(r.render().indexOf("foo") != -1);        assertTrue(r.render().indexOf("<pmd>") != -1);    }    public void testRenderText() {        Report r = new Report("foo", "text");        InvocationHandler ih = new MyInv("foo");        Rule rule = (Rule) Proxy.newProxyInstance(Rule.class.getClassLoader(), new Class[] {Rule.class },  ih);        r.addRuleViolation(new RuleViolation(rule, 5));        assertTrue(r.render().indexOf("foo") != -1);    }}
/* * User: tom * Date: Jun 21, 2002 * Time: 2:21:44 PM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import net.sourceforge.pmd.Namespace;import net.sourceforge.pmd.SymbolTable;public class NamespaceTest extends TestCase{    public NamespaceTest(String name) {        super(name);    }    public void testBasic() {        Namespace nameSpace = new Namespace();        nameSpace.addTable();        assertEquals(1, nameSpace.size());        nameSpace.removeTable();        assertEquals(0, nameSpace.size());    }    public void testParent() {        Namespace nameSpace = new Namespace();        nameSpace.addTable();        SymbolTable parent = nameSpace.peek();        nameSpace.addTable();        assertEquals(parent, nameSpace.peek().getParent());    }}
/* * User: tom * Date: Jun 19, 2002 * Time: 11:59:24 AM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import net.sourceforge.pmd.Symbol;public class SymbolTest extends TestCase {    public SymbolTest(String name) {        super(name);    }    public void testBasic() {        Symbol s = new Symbol("foo", 10);        assertEquals(10, s.getLine());        assertEquals("foo", s.getImage());        assertEquals(s, new Symbol("foo", 5));        assertEquals(s.hashCode(), new Symbol("foo", 6).hashCode());    }}
package test.net.sourceforge.pmd;import junit.framework.*;import java.util.*;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleViolation;public class RuleViolationTest extends TestCase {    public RuleViolationTest(String name) {        super(name);    }        public void testBasic() {        RuleViolation r = new RuleViolation(new Rule() {            public String getName() {return "name";}            public String getDescription()  {return "desc";}        }, 2);        assertTrue(r.getText().indexOf("name") != -1);    }    public void testGetText() {        RuleViolation r = new RuleViolation(new Rule() {            public String getName() {return "name";}            public String getDescription()  {return "desc";}        }, 2, "foo");        assertTrue(r.getText().indexOf("foo") != -1);    }    public void testXML() {        RuleViolation r = new RuleViolation(new Rule() {            public String getName() {return "name";}            public String getDescription()  {return "desc";}        }, 2, "foo");        assertTrue(r.getXML().indexOf("foo") != -1);        assertTrue(r.getXML().indexOf("2") != -1);    }}
package net.sourceforge.pmd.ast;import java.io.*;public class Test implements JavaParserVisitor{    public static void main(String[] args) {        try {            FileReader fr = new FileReader(new File("c:\\data\\pmd\\pmd\\test-data\\ContainsSystemGetProps.java"));            JavaParser parser = new JavaParser(fr);            Test test = new Test();            ASTCompilationUnit c = parser.CompilationUnit();            c.dump("");            c.childrenAccept(test, null);        } catch (Exception e) {            e.printStackTrace();        }    }    public Object visit(ASTAssertStatement node, Object data){node.childrenAccept(this, data);return null;}    public Object visit(ASTName node, Object data){node.childrenAccept(this, data);return null;}    public Object visit(ASTLocalVariableDeclaration node, Object data){node.childrenAccept(this, data);return null;}    public Object visit(ASTPrimitiveType node, Object data){node.childrenAccept(this, data);return null;}    public Object visit(ASTImportDeclaration node, Object data){node.childrenAccept(this, data);return null;}    public Object visit(ASTLiteral node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(SimpleNode node, Object data) {node.childrenAccept(this, data);return null;}  public Object visit(ASTCompilationUnit node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTPackageDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTTypeDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTClassDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTUnmodifiedClassDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTClassBody node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTNestedClassDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTClassBodyDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTMethodDeclarationLookahead node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTInterfaceDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTNestedInterfaceDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTUnmodifiedInterfaceDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTInterfaceMemberDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTFieldDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTVariableDeclarator node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTVariableDeclaratorId node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTVariableInitializer node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTArrayInitializer node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTMethodDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTMethodDeclarator node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTFormalParameters node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTFormalParameter node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTConstructorDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTExplicitConstructorInvocation node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTInitializer node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTType node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTResultType node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTNameList node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTAssignmentOperator node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTConditionalExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTConditionalOrExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTConditionalAndExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTInclusiveOrExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTExclusiveOrExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTAndExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTEqualityExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTInstanceOfExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTRelationalExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTShiftExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTAdditiveExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTMultiplicativeExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTUnaryExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTPreIncrementExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTPreDecrementExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTUnaryExpressionNotPlusMinus node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTCastLookahead node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTPostfixExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTCastExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTPrimaryExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTPrimaryPrefix node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTPrimarySuffix node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTBooleanLiteral node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTNullLiteral node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTArguments node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTArgumentList node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTAllocationExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTArrayDimsAndInits node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTLabeledStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTBlock node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTBlockStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTEmptyStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTStatementExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTSwitchStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTSwitchLabel node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTIfStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTWhileStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTDoStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTForStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTForInit node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTStatementExpressionList node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTForUpdate node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTBreakStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTContinueStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTReturnStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTThrowStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTSynchronizedStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTTryStatement node, Object data){node.childrenAccept(this, data);return null;}}