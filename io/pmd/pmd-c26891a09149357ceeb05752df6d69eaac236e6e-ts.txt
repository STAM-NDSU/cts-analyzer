/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import java.io.IOException;import org.apache.commons.io.IOUtils;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.testframework.AbstractTokenizerTest;public class GroovyTokenizerTest extends AbstractTokenizerTest {    private static final String FILENAME = "BTree.groovy";    @Before    @Override    public void buildTokenizer() throws IOException {        this.tokenizer = new GroovyTokenizer();        this.sourceCode = new SourceCode(new SourceCode.StringCodeLoader(this.getSampleCode(), FILENAME));    }    @Override    public String getSampleCode() throws IOException {        return IOUtils.toString(GroovyTokenizer.class.getResourceAsStream(FILENAME));    }    @Test    public void tokenizeTest() throws IOException {        this.expectedTokenCount = 369;        super.tokenizeTest();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.groovy.GroovyLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] {            {                GroovyLanguageModule.NAME,                GroovyLanguageModule.TERSE_NAME,                "",                LanguageRegistry.getLanguage(GroovyLanguageModule.NAME).getDefaultVersion(),            },        });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.vm.rule.basic;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class BasicRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "vm-basic";    @Override    public void setUp() {        addRule(RULESET, "AvoidDeeplyNestedIfStmts");        addRule(RULESET, "CollapsibleIfStatements");        addRule(RULESET, "ExcessiveTemplateLength");        addRule(RULESET, "AvoidReassigningParameters");        addRule(RULESET, "EmptyIfStmt");        addRule(RULESET, "EmptyForeachStmt");        addRule(RULESET, "UnusedMacroParameter");        addRule(RULESET, "NoInlineJavaScript");        addRule(RULESET, "NoInlineStyles");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.vm;import java.io.StringReader;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersionHandler;import net.sourceforge.pmd.lang.Parser;import net.sourceforge.pmd.lang.ast.Node;/** * Unit test for VM parsing. *  */public class VmParserTest {    private static final String VM_SRC = "<HTML><BODY>Hello $customer.Name <table> "            + "#foreach($mud in $mudsOnSpecial)" + "  #if ( $customer.hasPurchased($mud) )" + "     <tr>" + "      <td>"            + "       $flogger.getPromo( $mud )" + "    </td>" + "  </tr>" + " #elseif ($customer.broke) do stuff #end"            + "\n " + "#end " + "</table>";    private static final String SRC2 = "#macro(tablerows $color $values ) " + "#foreach( $value in $values ) "            + "<tr><td bgcolor=$color>$value</td></tr> " + "#end " + "#end "            + "#set( $greatlakes = [\"Superior\",\"Michigan\",\"Huron\",\"Erie\",\"Ontario\"] ) "            + "#set( $color = \"blue\" ) " + "<table> " + " #tablerows( $color $greatlakes ) " + "</table>";    private static final String SRC3 = "#if ( $c1 ) #if ( $c2)#end #end";    // private static final String VM_SRC = "#if( $mud == 1 ) blah #if ($dirt ==    // 2) stuff #end #end";    @Test    public void testParser() {        final Node node = parse(VM_SRC);        Assert.assertNotNull(node);    }    @Test    public void testParser2() {        final Node node = parse(SRC2);        Assert.assertNotNull(node);    }    @Test    public void testParser3() {        final Node node = parse(SRC3);        Assert.assertNotNull(node);    }    private Node parse(final String code) {        final LanguageVersionHandler vmLang = LanguageRegistry.getLanguage(VmLanguageModule.NAME).getDefaultVersion()                .getLanguageVersionHandler();        final Parser parser = vmLang.getParser(vmLang.getDefaultParserOptions());        final Node node = parser.parse(null, new StringReader(code));        return node;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.vm.VmLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] { { VmLanguageModule.NAME, VmLanguageModule.TERSE_NAME, "",            LanguageRegistry.getLanguage(VmLanguageModule.NAME).getDefaultVersion(), }, });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;/** * Test velocity's rulesets */public class RuleSetFactoryTest extends AbstractRuleSetFactoryTest {    // no additional tests yet}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.php.PhpLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] { { PhpLanguageModule.NAME, PhpLanguageModule.TERSE_NAME, "",            LanguageRegistry.getLanguage(PhpLanguageModule.NAME).getDefaultVersion(), }, });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.plsql.dfa;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.util.List;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.ast.AbstractNode;import net.sourceforge.pmd.lang.dfa.DataFlowNode;import net.sourceforge.pmd.lang.dfa.NodeType;import net.sourceforge.pmd.lang.dfa.StartOrEndDataFlowNode;import net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst;import net.sourceforge.pmd.lang.plsql.PLSQLLanguageModule;import net.sourceforge.pmd.lang.plsql.ast.ASTExpression;import net.sourceforge.pmd.lang.plsql.ast.ASTMethodDeclaration;import net.sourceforge.pmd.lang.plsql.ast.ASTProgramUnit;import net.sourceforge.pmd.lang.plsql.ast.ASTVariableOrConstantDeclarator;import net.sourceforge.pmd.lang.plsql.ast.PLSQLNode;public class StatementAndBraceFinderTest extends AbstractPLSQLParserTst {    /**     * Java ASTStatementExpression equivalent is inferred as an Expression()     * which has an UnlabelledStatement as a parent.     */    @Test    public void testExpressionParentChildLinks() {        ASTExpression ex = getOrderedNodes(ASTExpression.class, TEST1).get(0);        DataFlowNode dfn = ex.getDataFlowNode();        assertEquals(3, dfn.getLine());        assertTrue(dfn.getNode() instanceof ASTExpression);        List<DataFlowNode> dfns = dfn.getParents();        assertEquals(1, dfns.size());        DataFlowNode parentDfn = dfns.get(0);        assertEquals(2, parentDfn.getLine());        assertTrue(parentDfn.getNode() instanceof ASTProgramUnit);        ASTProgramUnit exParent = (ASTProgramUnit) parentDfn.getNode();        // Validate the two-way link between Program Unit and Statement        assertEquals(ex, exParent.getDataFlowNode().getChildren().get(0).getNode());        assertEquals(exParent, ex.getDataFlowNode().getParents().get(0).getNode());    }    @Test    public void testVariableOrConstantDeclaratorParentChildLinks() {        ASTVariableOrConstantDeclarator vd = getOrderedNodes(ASTVariableOrConstantDeclarator.class, TEST2).get(0);        // ASTMethodDeclaration vdParent = (ASTMethodDeclaration)        // ((DataFlowNode) vd.getDataFlowNode().getParents().get(0)).getNode();        ASTProgramUnit vdParent = (ASTProgramUnit) vd.getDataFlowNode().getParents().get(0).getNode();        // Validate the two-way link between Program Unit and Variable        assertEquals(vd, vdParent.getDataFlowNode().getChildren().get(0).getNode());        assertEquals(vdParent, vd.getDataFlowNode().getParents().get(0).getNode());    }    @Test    public void testIfStmtHasCorrectTypes() {        ASTExpression exp = getOrderedNodes(ASTExpression.class, TEST3).get(0);        assertEquals(5, exp.getDataFlowNode().getFlow().size());        DataFlowNode dfn = exp.getDataFlowNode().getFlow().get(2);        assertTrue(dfn.isType(NodeType.IF_EXPR));        assertEquals(3, dfn.getLine());        dfn = exp.getDataFlowNode().getFlow().get(3);        assertTrue(dfn.isType(NodeType.IF_LAST_STATEMENT_WITHOUT_ELSE));        assertEquals(3, dfn.getLine());    }    @Test    public void testWhileStmtHasCorrectTypes() {        ASTExpression exp = getOrderedNodes(ASTExpression.class, TEST4).get(0);        DataFlowNode dfn = exp.getDataFlowNode().getFlow().get(2);        assertTrue(dfn.isType(NodeType.WHILE_EXPR));        dfn = exp.getDataFlowNode().getFlow().get(3);        assertTrue(dfn.isType(NodeType.WHILE_LAST_STATEMENT));    }    @Test    public void testForStmtHasCorrectTypes() {        ASTExpression exp = getOrderedNodes(ASTExpression.class, TEST5).get(0);        DataFlowNode dfn = null;        dfn = exp.getDataFlowNode().getFlow().get(0);        assertTrue(dfn instanceof StartOrEndDataFlowNode);        dfn = exp.getDataFlowNode().getFlow().get(1);        assertTrue(dfn.getNode() instanceof ASTProgramUnit);        assertEquals(2, dfn.getLine());        dfn = exp.getDataFlowNode().getFlow().get(2);        assertEquals(3, dfn.getLine());        assertTrue(dfn.isType(NodeType.FOR_EXPR));        assertTrue(dfn.isType(NodeType.FOR_BEFORE_FIRST_STATEMENT));        dfn = exp.getDataFlowNode().getFlow().get(3);        assertEquals(3, dfn.getLine());        assertTrue(dfn.isType(NodeType.FOR_END));    }    @Test    public void testSimpleCaseStmtHasCorrectTypes() {        ASTExpression exp = getOrderedNodes(ASTExpression.class, TEST6).get(0);        DataFlowNode dfn = null;        dfn = exp.getDataFlowNode().getFlow().get(0);        assertTrue(dfn instanceof StartOrEndDataFlowNode);        dfn = exp.getDataFlowNode().getFlow().get(1);        assertEquals(2, dfn.getLine());        assertTrue(dfn.getNode() instanceof ASTProgramUnit);        dfn = exp.getDataFlowNode().getFlow().get(2);        assertEquals(4, dfn.getLine());        assertTrue(dfn.isType(NodeType.SWITCH_START));        assertTrue(dfn.isType(NodeType.CASE_LAST_STATEMENT));        dfn = exp.getDataFlowNode().getFlow().get(3);        assertEquals(5, dfn.getLine());        assertTrue(dfn.isType(NodeType.CASE_LAST_STATEMENT));        assertTrue(dfn.isType(NodeType.BREAK_STATEMENT));        dfn = exp.getDataFlowNode().getFlow().get(4);        assertEquals(6, dfn.getLine());        assertTrue(dfn.isType(NodeType.SWITCH_LAST_DEFAULT_STATEMENT));        assertTrue(dfn.isType(NodeType.BREAK_STATEMENT));        dfn = exp.getDataFlowNode().getFlow().get(5);        assertEquals(7, dfn.getLine());        assertTrue(dfn.isType(NodeType.SWITCH_END));    }    /*     * @Test public void testSearchedCaseStmtHasCorrectTypes()     * { List<ASTStatement> statements = getOrderedNodes(ASTStatement.class,     * TEST7); List<ASTExpression> expressions =     * getOrderedNodes(ASTExpression.class, TEST7);     *      * ASTStatement st = statements.get(0); ASTStatement st1 =     * statements.get(1); ASTStatement st2 = statements.get(2); ASTStatement st3     * = statements.get(3);     * System.err.println("testSearchedCaseStmtHasCorrectTypes-st(0)="+st.     * getBeginLine());     *      * ASTExpression ex = expressions.get(0); ASTExpression ex1 =     * expressions.get(1); ASTExpression ex2 = expressions.get(2); ASTExpression     * ex3 = expressions.get(3); ASTExpression ex4 = expressions.get(4);     * System.err.println("ASTExpression="+ex );     *      * DataFlowNode dfn = null; //dfn = ex.getDataFlowNode().getFlow().get(0);     * //dfn = st.getDataFlowNode().getFlow().get(0); dfn = (DataFlowNode)     * st.getDataFlowNode(); System.err.println("DataFlowNode(st-0)="+dfn ) ;     * System.err.println("DataFlowNode(st-1)="+st1.getDataFlowNode() ) ;     * System.err.println("DataFlowNode(st-2)="+st2.getDataFlowNode() ) ;     * System.err.println("DataFlowNode(st-3)="+st3.getDataFlowNode() ) ;     *      * System.err.println("DataFlowNode(ex-0)="+ex.getDataFlowNode() ) ;     * System.err.println("DataFlowNode(ex-1)="+ex1.getDataFlowNode() ) ;     * System.err.println("DataFlowNode(ex-2)="+ex2.getDataFlowNode() ) ;     * System.err.println("DataFlowNode(ex-3)="+ex3.getDataFlowNode() ) ;     * System.err.println("DataFlowNode(ex-4)="+ex4.getDataFlowNode() ) ;     * List<DataFlowNode> dfns = dfn.getFlow();     * System.err.println("DataFlowNodes List size="+dfns.size()) ; DataFlowNode     * firstDfn = dfns.get(0); System.err.println("firstDataFlowNode="+firstDfn     * ) ;     * System.err.println("testSearchedCaseStmtHasCorrectTypes-dfn(0)="+dfn);     * dfn = st.getDataFlowNode().getFlow().get(1);     * System.err.println("testSearchedCaseStmtHasCorrectTypes-dfn(1)="+dfn);     * dfn = st.getDataFlowNode().getFlow().get(2);     * System.err.println("testSearchedCaseStmtHasCorrectTypes-dfn(2)="+dfn);     * assertTrue(dfn.isType(NodeType.SWITCH_START)); dfn =     * st.getDataFlowNode().getFlow().get(3);     * System.err.println("testSearchedCaseStmtHasCorrectTypes-dfn(3)="+dfn);     * assertTrue(dfn.isType(NodeType.CASE_LAST_STATEMENT)); //dfn =     * st.getDataFlowNode().getFlow().get(4);     * System.err.println("testSearchedCaseStmtHasCorrectTypes-dfn(5)="+dfn);     * assertTrue(dfn.isType(NodeType.CASE_LAST_STATEMENT)); dfn =     * st.getDataFlowNode().getFlow().get(5);     * System.err.println("testSearchedCaseStmtHasCorrectTypes-dfn(7)="+dfn);     * assertTrue(dfn.isType(NodeType.SWITCH_LAST_DEFAULT_STATEMENT)); dfn =     * st.getDataFlowNode().getFlow().get(6);     * System.err.println("testSearchedCaseStmtHasCorrectTypes-dfn(8)="+dfn);     * assertTrue(dfn.isType(NodeType.SWITCH_END)); }     */    @Test    public void testLabelledStmtHasCorrectTypes() {        ASTExpression exp = getOrderedNodes(ASTExpression.class, TEST8).get(0);        DataFlowNode dfn = exp.getDataFlowNode().getFlow().get(2);        assertEquals(3, dfn.getLine());        assertTrue(dfn.isType(NodeType.LABEL_STATEMENT));    }    @Test    public void testOnlyWorksForMethodsAndConstructors() {        StatementAndBraceFinder sbf = new StatementAndBraceFinder(LanguageRegistry.getLanguage(PLSQLLanguageModule.NAME)                .getDefaultVersion().getLanguageVersionHandler().getDataFlowHandler());        PLSQLNode node = new ASTMethodDeclaration(1);        ((AbstractNode) node).testingOnlySetBeginColumn(1);        sbf.buildDataFlowFor(node);        // sbf.buildDataFlowFor(new ASTConstructorDeclaration(1));        node = new ASTProgramUnit(1);        ((AbstractNode) node).testingOnlySetBeginColumn(1);        sbf.buildDataFlowFor(node);    }    private static final String TEST1 = "CREATE OR REPLACE PACKAGE BODY Foo AS" + PMD.EOL + " PROCEDURE bar IS BEGIN"            + PMD.EOL + "  x := 2;" + PMD.EOL + " END bar;" + PMD.EOL + "END foo;";    private static final String TEST2 = "CREATE OR REPLACE PACKAGE BODY Foo AS" + PMD.EOL + " PROCEDURE bar IS "            + PMD.EOL + "  int x; " + PMD.EOL + "  BEGIN NULL ;" + PMD.EOL + " END bar;" + PMD.EOL + "END foo;";    private static final String TEST3 = "CREATE OR REPLACE PACKAGE BODY Foo AS" + PMD.EOL + " PROCEDURE bar IS BEGIN"            + PMD.EOL + "  if (x) THEN NULL; END IF; " + PMD.EOL + " END bar;" + PMD.EOL + "END foo;";    private static final String TEST4 = "CREATE OR REPLACE PACKAGE BODY Foo AS" + PMD.EOL + " PROCEDURE bar IS BEGIN"            + PMD.EOL + "  while (x) LOOP NULL; END LOOP;" + PMD.EOL + " END bar;" + PMD.EOL + "END foo;";    private static final String TEST5 = "CREATE OR REPLACE PACKAGE BODY Foo AS" + PMD.EOL + " PROCEDURE bar IS BEGIN"            + PMD.EOL + "  for i in 0..9 LOOP NULL; END LOOP;" + PMD.EOL + " END bar;" + PMD.EOL + "END foo;";    private static final String TEST6 = "CREATE OR REPLACE PACKAGE BODY Foo AS" + PMD.EOL + " PROCEDURE bar IS "            + PMD.EOL + " BEGIN" + PMD.EOL + " CASE 1 " + PMD.EOL + " WHEN 0 THEN NULL; " + PMD.EOL            + " WHEN 1 THEN NULL; " + PMD.EOL + " ELSE NULL;" + PMD.EOL + " END CASE; " + PMD.EOL + " END bar; "            + PMD.EOL + "END foo;";    private static final String TEST7 = "CREATE OR REPLACE PACKAGE BODY Foo AS" + PMD.EOL + " PROCEDURE bar IS "            + PMD.EOL + " BEGIN" + PMD.EOL + " CASE " + PMD.EOL + " WHEN 0=1 THEN NULL; " + PMD.EOL            + " WHEN 1=1 THEN NULL; " + PMD.EOL + " ELSE NULL;" + PMD.EOL + " END CASE;" + PMD.EOL + " END bar;"            + PMD.EOL + "END foo;";    private static final String TEST8 = "CREATE OR REPLACE PACKAGE BODY Foo AS" + PMD.EOL + " PROCEDURE bar IS BEGIN"            + PMD.EOL + " <<label>> NULL;" + PMD.EOL + " END bar;" + PMD.EOL + "END foo;";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.plsql.rule.strictsyntax;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class StrictsyntaxRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "plsql-strictsyntax";    @Override    public void setUp() {        addRule(RULESET, "MisplacedPragma");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.plsql.rule.codesize;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class CodesizeRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "plsql-codesize";    @Override    public void setUp() {        addRule(RULESET, "NPathComplexity");        addRule(RULESET, "ExcessiveTypeLength");        addRule(RULESET, "CyclomaticComplexity");        addRule(RULESET, "ExcessiveObjectLength");        addRule(RULESET, "ExcessivePackageBodyLength");        addRule(RULESET, "ExcessivePackageSpecificationLength");        addRule(RULESET, "ExcessiveParameterList");        addRule(RULESET, "ExcessiveMethodLength");        addRule(RULESET, "NcssMethodCount");        addRule(RULESET, "NcssObjectCount");        addRule(RULESET, "TooManyFields");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.plsql;import org.apache.commons.io.IOUtils;import org.junit.Test;public class PLSQLParserTest extends AbstractPLSQLParserTst {    @Test    public void testExceptions() {        parsePLSQL("CREATE OR REPLACE PROCEDURE bar IS BEGIN" + "    doSomething;" + "    EXCEPTION"                + "    WHEN FooException THEN" + "        doSomethingElse;" + "    WHEN OTHERS THEN"                + "        doSomethingElse;" + "END;");    }    /**     * See https://sourceforge.net/p/pmd/bugs/1167/     */    @Test    public void testBOM() {        parsePLSQL("\ufeff" + "CREATE OR REPLACE PROCEDURE bar IS BEGIN" + "    doSomething;" + "    EXCEPTION"                + "    WHEN FooException THEN" + "        doSomethingElse;" + "    WHEN OTHERS THEN"                + "        doSomethingElse;" + "END;");    }    @Test(timeout = 5000)    public void testBug1531() {        parsePLSQL("create or replace force view oxa.o_xa_function_role_types as\n"                + "select \"CFT_ID\",\"CFR_ID\",\"CFT_NAME\",\"TCN\",\"LOG_MODULE\",\"LOG_USER\",\"LOG_DATE\",\"LOG_TIME\" from crm_function_role_types\n"                + "/");    }    @Test    public void testBug1527() throws Exception {        parsePLSQL(IOUtils.toString(PLSQLParserTest.class.getResourceAsStream("ast/InlinePragmaProcError.pls")));    }    @Test    public void testBug1520IsOfType() throws Exception {        parsePLSQL(IOUtils.toString(PLSQLParserTest.class.getResourceAsStream("ast/IsOfType.pls")));    }    @Test    public void testBug1520Using() throws Exception {        parsePLSQL(IOUtils.toString(PLSQLParserTest.class.getResourceAsStream("ast/Using.pls")));    }    @Test    public void testSingleLineSelect() throws Exception {        parsePLSQL(IOUtils.toString(PLSQLParserTest.class.getResourceAsStream("ast/SingleLineSelect.pls")));    }    @Test    public void testMultiLineSelect() throws Exception {        parsePLSQL(IOUtils.toString(PLSQLParserTest.class.getResourceAsStream("ast/MultiLineSelect.pls")));    }    @Test    public void testIsNull() throws Exception {        parsePLSQL(IOUtils.toString(PLSQLParserTest.class.getResourceAsStream("ast/IsNull.pls")));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.plsql;import java.util.Arrays;import org.junit.Assert;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.plsql.ast.ASTInput;import net.sourceforge.pmd.lang.rule.XPathRule;/** * Tests to use XPath rules with PLSQL. */public class PLSQLXPathRuleTest extends AbstractPLSQLParserTst {    private ASTInput node = parsePLSQL(            "create or replace\n" + "package pkg_xpath_problem\n" + "AS\n" + "    PROCEDURE pkg_minimal\n" + "    IS\n"                    + "        a_variable VARCHAR2(1);\n" + "    BEGIN \n" + "        --PRAGMA INLINE(output,'YES');\n"                    + "        a_variable := 'Y' ;\n" + "    END ;\n" + "end pkg_xpath_problem;\n" + "/\n" + "");    private RuleContext ctx = new RuleContext();    @Before    public void setup() {        ctx.setLanguageVersion(LanguageRegistry.getLanguage(PLSQLLanguageModule.NAME).getDefaultVersion());    }    /**     * See https://sourceforge.net/p/pmd/bugs/1166/     */    @Test    public void testXPathRule1() {        XPathRule rule = createRule("1.0");        rule.apply(Arrays.asList(node), ctx);        Assert.assertEquals(2, ctx.getReport().treeSize());    }    /**     * See https://sourceforge.net/p/pmd/bugs/1166/     */    @Test    public void testXPathRule1Compatibility() {        XPathRule rule = createRule("1.0 compatibility");        rule.apply(Arrays.asList(node), ctx);        Assert.assertEquals(2, ctx.getReport().treeSize());    }    /**     * See https://sourceforge.net/p/pmd/bugs/1166/     */    @Test    public void testXPathRule2() {        XPathRule rule = createRule("2.0");        rule.apply(Arrays.asList(node), ctx);        Assert.assertEquals(2, ctx.getReport().treeSize());    }    private XPathRule createRule(String version) {        XPathRule rule = new XPathRule("//PrimaryExpression");        rule.setLanguage(LanguageRegistry.getLanguage(PLSQLLanguageModule.NAME));        rule.setVersion(version);        rule.setMessage("Test Violation");        return rule;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import java.io.IOException;import org.apache.commons.io.IOUtils;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.testframework.AbstractTokenizerTest;public class PLSQLTokenizerTest extends AbstractTokenizerTest {    private static final String FILENAME = "sample-plsql.sql";    @Before    @Override    public void buildTokenizer() throws IOException {        this.tokenizer = new PLSQLTokenizer();        this.sourceCode = new SourceCode(new SourceCode.StringCodeLoader(this.getSampleCode(), FILENAME));    }    @Override    public String getSampleCode() throws IOException {        return IOUtils.toString(PLSQLTokenizer.class.getResourceAsStream(FILENAME));    }    @Test    public void tokenizeTest() throws IOException {        this.expectedTokenCount = 1422;        super.tokenizeTest();    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(PLSQLTokenizerTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import java.io.File;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.LanguageVersionDiscoverer;import net.sourceforge.pmd.lang.plsql.PLSQLLanguageModule;public class LanguageVersionDiscovererTest {    /**     * Test on PLSQL file with default version     */    @Test    public void testPlsql() {        LanguageVersionDiscoverer discoverer = new LanguageVersionDiscoverer();        File plsqlFile = new File("/path/to/MY_PACKAGE.sql");        LanguageVersion languageVersion = discoverer.getDefaultLanguageVersionForFile(plsqlFile);        assertEquals("LanguageVersion must be PLSQL!",                LanguageRegistry.getLanguage(PLSQLLanguageModule.NAME).getDefaultVersion(), languageVersion);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.plsql.PLSQLLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] { { PLSQLLanguageModule.NAME, PLSQLLanguageModule.TERSE_NAME, "",            LanguageRegistry.getLanguage(PLSQLLanguageModule.NAME).getDefaultVersion(), }, });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;/** * Test plsql's rulesets */public class RuleSetFactoryTest extends AbstractRuleSetFactoryTest {    // no additional tests yet}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import java.io.IOException;import org.apache.commons.io.IOUtils;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.testframework.AbstractTokenizerTest;public class SwiftTokenizerTest extends AbstractTokenizerTest {    private static final String FILENAME = "BTree.swift";    @Before    @Override    public void buildTokenizer() throws IOException {        this.tokenizer = new SwiftTokenizer();        this.sourceCode = new SourceCode(new SourceCode.StringCodeLoader(this.getSampleCode(), FILENAME));    }    @Override    public String getSampleCode() throws IOException {        return IOUtils.toString(SwiftTokenizer.class.getResourceAsStream(FILENAME));    }    @Test    public void tokenizeTest() throws IOException {        this.expectedTokenCount = 3811;        super.tokenizeTest();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.swift.SwiftLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] { { SwiftLanguageModule.NAME, SwiftLanguageModule.TERSE_NAME, "",            LanguageRegistry.getLanguage(SwiftLanguageModule.NAME).getDefaultVersion(), }, });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import java.io.IOException;import org.apache.commons.io.IOUtils;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.testframework.AbstractTokenizerTest;public class ObjectiveCTokenizerTest extends AbstractTokenizerTest {    private static final String FILENAME = "AFHTTPRequestOperation.m";    @Before    @Override    public void buildTokenizer() throws IOException {        this.tokenizer = new ObjectiveCTokenizer();        this.sourceCode = new SourceCode(new SourceCode.StringCodeLoader(this.getSampleCode(), FILENAME));    }    @Override    public String getSampleCode() throws IOException {        return IOUtils.toString(ObjectiveCTokenizer.class.getResourceAsStream(FILENAME));    }    @Test    public void tokenizeTest() throws IOException {        this.expectedTokenCount = 884;        super.tokenizeTest();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import java.io.IOException;import org.apache.commons.io.IOUtils;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.testframework.AbstractTokenizerTest;//Tests if the ObjectiveC tokenizer supports identifiers with unicode characterspublic class UnicodeObjectiveCTokenizerTest extends AbstractTokenizerTest {    private static final String FILENAME = "NCClient.m";    @Before    @Override    public void buildTokenizer() throws IOException {        this.tokenizer = new ObjectiveCTokenizer();        this.sourceCode = new SourceCode(new SourceCode.StringCodeLoader(this.getSampleCode(), FILENAME));    }    @Override    public String getSampleCode() throws IOException {        return IOUtils.toString(ObjectiveCTokenizer.class.getResourceAsStream(FILENAME), "UTF-8");    }    @Test    public void tokenizeTest() throws IOException {        this.expectedTokenCount = 10;        super.tokenizeTest();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import java.io.IOException;import org.apache.commons.io.IOUtils;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.testframework.AbstractTokenizerTest;//Tests if the ObjectiveC tokenizer supports UTF-8 escapes in string literalspublic class UTF8EscapesInStringLiteralObjCTokenizerTest extends AbstractTokenizerTest {    private static final String FILENAME = "FileWithUTF8EscapeInStringLiteral.m";    @Before    @Override    public void buildTokenizer() throws IOException {        this.tokenizer = new ObjectiveCTokenizer();        this.sourceCode = new SourceCode(new SourceCode.StringCodeLoader(this.getSampleCode(), FILENAME));    }    @Override    public String getSampleCode() throws IOException {        return IOUtils.toString(ObjectiveCTokenizer.class.getResourceAsStream(FILENAME), "UTF-8");    }    @Test    public void tokenizeTest() throws IOException {        this.expectedTokenCount = 45;        super.tokenizeTest();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.objectivec.ObjectiveCLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] { { ObjectiveCLanguageModule.NAME, ObjectiveCLanguageModule.TERSE_NAME, "",            LanguageRegistry.getLanguage(ObjectiveCLanguageModule.NAME).getDefaultVersion(), }, });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.bugs;import java.io.InputStream;import java.io.InputStreamReader;import org.junit.Ignore;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersionHandler;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.typeresolution.testdata.UsesJavaStreams;@Ignorepublic class InterfaceMethodTest {    @Test    public void shouldNotFail() {        ASTCompilationUnit acu = parseAndTypeResolveForClass(UsesJavaStreams.class);    }    // Note: If you're using Eclipse or some other IDE to run this test, you    // _must_ have the regress folder in    // the classpath. Normally the IDE doesn't put source directories themselves    // directly in the classpath, only    // the output directories are in the classpath.    private ASTCompilationUnit parseAndTypeResolveForClass(Class<?> clazz) {        String sourceFile = clazz.getName().replace('.', '/') + ".java";        InputStream is = InterfaceMethodTest.class.getClassLoader().getResourceAsStream(sourceFile);        if (is == null) {            throw new IllegalArgumentException("Unable to find source file " + sourceFile + " for " + clazz);        }        LanguageVersionHandler languageVersionHandler = LanguageRegistry.getLanguage(JavaLanguageModule.NAME)                .getVersion("1.8").getLanguageVersionHandler();        ASTCompilationUnit acu = (ASTCompilationUnit) languageVersionHandler                .getParser(languageVersionHandler.getDefaultParserOptions()).parse(null, new InputStreamReader(is));        languageVersionHandler.getSymbolFacade().start(acu);        languageVersionHandler.getTypeResolutionFacade(InterfaceMethodTest.class.getClassLoader()).start(acu);        return acu;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.typeresolution;import java.io.InputStream;import java.io.InputStreamReader;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersionHandler;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.typeresolution.testdata.UsesJavaStreams;import net.sourceforge.pmd.typeresolution.testdata.UsesRepeatableAnnotations;public class ClassTypeResolverJava8Test {    @Test    public void interfaceMethodShouldBeParseable() {        ASTCompilationUnit acu = parseAndTypeResolveForClass18(UsesJavaStreams.class);    }    @Test    public void repeatableAnnotationsMethodShouldBeParseable() {        ASTCompilationUnit acu = parseAndTypeResolveForClass18(UsesRepeatableAnnotations.class);    }    private ASTCompilationUnit parseAndTypeResolveForClass18(Class<?> clazz) {        return parseAndTypeResolveForClass(clazz, "1.8");    }    // Note: If you're using Eclipse or some other IDE to run this test, you    // _must_ have the regress folder in    // the classpath. Normally the IDE doesn't put source directories themselves    // directly in the classpath, only    // the output directories are in the classpath.    private ASTCompilationUnit parseAndTypeResolveForClass(Class<?> clazz, String version) {        String sourceFile = clazz.getName().replace('.', '/') + ".java";        InputStream is = ClassTypeResolverJava8Test.class.getClassLoader().getResourceAsStream(sourceFile);        if (is == null) {            throw new IllegalArgumentException("Unable to find source file " + sourceFile + " for " + clazz);        }        LanguageVersionHandler languageVersionHandler = LanguageRegistry.getLanguage(JavaLanguageModule.NAME)                .getVersion(version).getLanguageVersionHandler();        ASTCompilationUnit acu = (ASTCompilationUnit) languageVersionHandler                .getParser(languageVersionHandler.getDefaultParserOptions()).parse(null, new InputStreamReader(is));        languageVersionHandler.getSymbolFacade().start(acu);        languageVersionHandler.getTypeResolutionFacade(ClassTypeResolverJava8Test.class.getClassLoader()).start(acu);        return acu;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.ecmascript.rule.controversial;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class ControversialRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "ecmascript-controversial";    @Override    public void setUp() {        addRule(RULESET, "AvoidWithStatement");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.ecmascript.rule.basic;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class BasicRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "ecmascript-basic";    @Override    public void setUp() {        addRule(RULESET, "AssignmentInOperand");        addRule(RULESET, "AvoidTrailingComma");        addRule(RULESET, "ConsistentReturn");        addRule(RULESET, "InnaccurateNumericLiteral");        addRule(RULESET, "ScopeForInVariable");        addRule(RULESET, "UnreachableCode");        addRule(RULESET, "EqualComparison");        addRule(RULESET, "GlobalVariable");        addRule(RULESET, "UseBaseWithParseInt");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.ecmascript.rule.braces;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class BracesRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "ecmascript-braces";    @Override    public void setUp() {        addRule(RULESET, "ForLoopsMustUseBraces");        addRule(RULESET, "IfElseStmtsMustUseBraces");        addRule(RULESET, "IfStmtsMustUseBraces");        addRule(RULESET, "WhileLoopsMustUseBraces");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.ecmascript.rule.unnecessary;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class UnnecessaryRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "ecmascript-unnecessary";    @Override    public void setUp() {        addRule(RULESET, "UnnecessaryBlock");        addRule(RULESET, "UnnecessaryParentheses");        addRule(RULESET, "NoElseReturn");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.ecmascript.ast;import java.util.List;import org.junit.Assert;import org.junit.Test;import org.mozilla.javascript.ast.AstRoot;/** * See the following bugs: #1141 ECMAScript: getFinallyBlock() is buggy. #1142 * ECMAScript: getCatchClause() is buggy */public class ASTTryStatementTest extends EcmascriptParserTestBase {    private ASTTryStatement getTryStmt(String js) {        EcmascriptNode<AstRoot> node = parse(js);        List<ASTTryStatement> trys = node.findDescendantsOfType(ASTTryStatement.class);        Assert.assertEquals(1, trys.size());        ASTTryStatement tryStmt = trys.get(0);        return tryStmt;    }    @Test    public void testFinallyBlockOnly() {        ASTTryStatement tryStmt = getTryStmt("function() { try { } finally { } }");        Assert.assertNull(tryStmt.getCatchClause(0));        Assert.assertFalse(tryStmt.hasCatch());        Assert.assertEquals(0, tryStmt.getNumCatchClause());        Assert.assertNotNull(tryStmt.getFinallyBlock());        Assert.assertTrue(tryStmt.hasFinally());    }    @Test    public void testCatchBlockOnly() {        ASTTryStatement tryStmt = getTryStmt("function() { try { } catch (error) { } }");        Assert.assertNotNull(tryStmt.getCatchClause(0));        Assert.assertTrue(tryStmt.hasCatch());        Assert.assertEquals(1, tryStmt.getNumCatchClause());        Assert.assertNull(tryStmt.getFinallyBlock());        Assert.assertFalse(tryStmt.hasFinally());    }    @Test    public void testCatchAndFinallyBlock() {        ASTTryStatement tryStmt = getTryStmt("function() { try { } catch (error) { } finally { } }");        Assert.assertNotNull(tryStmt.getCatchClause(0));        Assert.assertTrue(tryStmt.hasCatch());        Assert.assertEquals(1, tryStmt.getNumCatchClause());        Assert.assertNotNull(tryStmt.getFinallyBlock());        Assert.assertTrue(tryStmt.hasFinally());    }    @Test    public void testMultipleCatchAndFinallyBlock() {        ASTTryStatement tryStmt = getTryStmt(                "function() { " + "try { } " + "catch (error if error instanceof BadError) { } "                        + "catch (error2 if error2 instanceof OtherError) { } " + "finally { } }");        Assert.assertNotNull(tryStmt.getCatchClause(0));        Assert.assertNotNull(tryStmt.getCatchClause(1));        Assert.assertTrue(tryStmt.hasCatch());        Assert.assertEquals(2, tryStmt.getNumCatchClause());        Assert.assertNotNull(tryStmt.getFinallyBlock());        Assert.assertTrue(tryStmt.hasFinally());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.ecmascript.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.io.Reader;import java.io.StringReader;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import org.junit.Test;import org.mozilla.javascript.ast.AstRoot;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.ecmascript.Ecmascript3Parser;import net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptions;import net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule;public class EcmascriptParserTest extends EcmascriptParserTestBase {    /**     * https://sourceforge.net/p/pmd/bugs/1043/     */    @Test    public void testLineNumbers() {        final String SOURCE_CODE = "function a() {" + PMD.EOL + "  alert('hello');" + PMD.EOL + "}" + PMD.EOL;        EcmascriptNode<AstRoot> node = parse(SOURCE_CODE);        assertEquals(1, node.getBeginLine());        assertEquals(1, node.getBeginColumn());        assertEquals(3, node.getEndLine());        assertEquals(1, node.getEndColumn());        Node child = node.getFirstChildOfType(ASTFunctionNode.class);        assertEquals(1, child.getBeginLine());        assertEquals(1, child.getBeginColumn());        assertEquals(3, child.getEndLine());        assertEquals(1, child.getEndColumn());        child = node.getFirstDescendantOfType(ASTFunctionCall.class);        assertEquals(2, child.getBeginLine());        assertEquals(3, child.getBeginColumn());        assertEquals(2, child.getEndLine());        assertEquals(16, child.getEndColumn());    }    /**     * https://sourceforge.net/p/pmd/bugs/1149/     */    @Test    public void testLineNumbersWithinEcmascriptRules() {        String source = "function f(x){\n" + "   if (x) {\n" + "       return 1;\n" + "   } else {\n"                + "       return 0;\n" + "   }\n" + "}";        final List<String> output = new ArrayList<>();        class MyEcmascriptRule extends AbstractEcmascriptRule {            public Object visit(ASTScope node, Object data) {                output.add("Scope from " + node.getBeginLine() + " to " + node.getEndLine());                return super.visit(node, data);            }        }        MyEcmascriptRule rule = new MyEcmascriptRule();        RuleContext ctx = new RuleContext();        rule.apply(Arrays.asList(parse(source)), ctx);        assertEquals("Scope from 2 to 4", output.get(0));        assertEquals("Scope from 4 to 6", output.get(1));    }    /**     * Test bug https://sourceforge.net/p/pmd/bugs/1118/     */    @Test    public void testArrayAccess() {        EcmascriptNode<AstRoot> node = parse("function a() { b['a'] = 1; c[1] = 2; }");        List<ASTElementGet> arrays = node.findDescendantsOfType(ASTElementGet.class);        assertEquals("b", arrays.get(0).getTarget().getImage());        assertEquals("a", arrays.get(0).getElement().getImage());        assertEquals("c", arrays.get(1).getTarget().getImage());        assertEquals("1", arrays.get(1).getElement().getImage());    }    /**     * Test for bug #1136 ECAMScript: NullPointerException in getLeft() and     * getRight()     */    @Test    public void testArrayMethod() {        EcmascriptNode<AstRoot> rootNode = parse(                "function test(){\n" + "  a();      // OK\n" + "  b.c();    // OK\n" + "  d[0]();   // OK\n"                        + "  e[0].f(); // OK\n" + "  y.z[0](); // FAIL ==> java.lang.NullPointerException\n" + "}");        List<ASTFunctionCall> calls = rootNode.findDescendantsOfType(ASTFunctionCall.class);        List<String> results = new ArrayList<>();        for (ASTFunctionCall f : calls) {            Node node = f.getTarget();            results.add(getName(node));        }        assertEquals("[a, b.c, d[], e[].f, y.z[]]", results.toString());    }    private String getName(Node node) {        if (node instanceof ASTName) {            return ((ASTName) node).getIdentifier();        }        if (node instanceof ASTPropertyGet) {            final ASTPropertyGet pgNode = (ASTPropertyGet) node;            final String leftName = getName(pgNode.getLeft());            final String rightName = getName(pgNode.getRight());            return leftName + "." + rightName;        }        if (node instanceof ASTElementGet) {            return getName(((ASTElementGet) node).getTarget()) + "[]";        }        return "????";    }    /**     * https://sourceforge.net/p/pmd/bugs/1150/ #1150 "EmptyExpression" for     * valid statements!     */    @Test    public void testCaseAsIdentifier() {        ASTAstRoot rootNode = parse("function f(a){\n" + "    a.case.flag = 1;\n" + "    return;\n" + "}");        ASTBlock block = rootNode.getFirstDescendantOfType(ASTBlock.class);        assertFalse(block.jjtGetChild(0) instanceof ASTEmptyExpression);        assertTrue(block.jjtGetChild(0) instanceof ASTExpressionStatement);        assertTrue(block.jjtGetChild(0).jjtGetChild(0) instanceof ASTAssignment);    }    /**     * https://sourceforge.net/p/pmd/bugs/1045/ #1045 //NOPMD not working (or     * not implemented) with ECMAscript     */    @Test    public void testSuppresionComment() {        Ecmascript3Parser parser = new Ecmascript3Parser(new EcmascriptParserOptions());        Reader sourceCode = new StringReader("function(x) {\n" + "x = x; //NOPMD I know what I'm doing\n" + "}\n");        parser.parse("foo", sourceCode);        assertEquals(" I know what I'm doing", parser.getSuppressMap().get(2));        assertEquals(1, parser.getSuppressMap().size());        EcmascriptParserOptions parserOptions = new EcmascriptParserOptions();        parserOptions.setSuppressMarker("FOOOO");        parser = new Ecmascript3Parser(parserOptions);        sourceCode = new StringReader(                "function(x) {\n" + "y = y; //NOPMD xyz\n" + "x = x; //FOOOO I know what I'm doing\n" + "}\n");        parser.parse("foo", sourceCode);        assertEquals(" I know what I'm doing", parser.getSuppressMap().get(3));        assertEquals(1, parser.getSuppressMap().size());    }    /**     * #1191 Ecmascript fails to parse "void(0)"     */    @Test    public void testVoidKeyword() {        ASTAstRoot rootNode = parse("function f(matchFn, fieldval, n){\n"                + "    return (matchFn)?(matcharray = eval(matchFn+\"('\"+fieldval+\"','\"+n.id+\"')\")):void(0);\n"                + "}\n");        ASTUnaryExpression unary = rootNode.getFirstDescendantOfType(ASTUnaryExpression.class);        assertEquals("void", unary.getImage());    }    /**     * #1192 Ecmascript fails to parse this operator " ^= "     */    @Test    public void testXorAssignment() {        ASTAstRoot rootNode = parse("function f() { var x = 2; x ^= 2; x &= 2; x |= 2; "                + "x &&= true; x ||= false; x *= 2; x /= 2; x %= 2; x += 2; x -= 2; "                + "x <<= 2; x >>= 2; x >>>= 2; }");        ASTAssignment infix = rootNode.getFirstDescendantOfType(ASTAssignment.class);        assertEquals("^=", infix.getImage());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.ecmascript.ast;import org.junit.Assert;import org.junit.Test;public class ASTFunctionNodeTest extends EcmascriptParserTestBase {    @Test    public void testGetBody() {        ASTAstRoot node = parse("function foo() { var a = 'a'; }");        ASTFunctionNode fn = node.getFirstDescendantOfType(ASTFunctionNode.class);        Assert.assertFalse(fn.isClosure());        EcmascriptNode<?> body = fn.getBody();        Assert.assertTrue(body instanceof ASTBlock);    }    @Test    public void testGetBodyFunctionClosureExpression() {        ASTAstRoot node = parse18("(function(x) x*x)");        ASTFunctionNode fn = node.getFirstDescendantOfType(ASTFunctionNode.class);        Assert.assertTrue(fn.isClosure());        EcmascriptNode<?> body = fn.getBody();        Assert.assertTrue(body instanceof ASTBlock);        Assert.assertTrue(body.jjtGetChild(0) instanceof ASTReturnStatement);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.ecmascript;import static net.sourceforge.pmd.lang.ParserOptionsTest.verifyOptionsEqualsHashcode;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertTrue;import org.junit.Test;import net.sourceforge.pmd.lang.ParserOptions;import net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule;import net.sourceforge.pmd.lang.rule.properties.BooleanProperty;public class EcmascriptParserOptionsTest {    @Test    public void testDefaults() throws Exception {        EcmascriptParserOptions parserOptions = new EcmascriptParserOptions();        assertTrue(parserOptions.isRecordingComments());        assertTrue(parserOptions.isRecordingLocalJsDocComments());        assertEquals(EcmascriptParserOptions.Version.VERSION_DEFAULT, parserOptions.getRhinoLanguageVersion());        MyRule rule = new MyRule();        parserOptions = (EcmascriptParserOptions) rule.getParserOptions();        assertTrue(parserOptions.isRecordingComments());        assertTrue(parserOptions.isRecordingLocalJsDocComments());        assertEquals(EcmascriptParserOptions.Version.VERSION_DEFAULT, parserOptions.getRhinoLanguageVersion());    }    @Test    public void testConstructor() throws Exception {        MyRule rule = new MyRule();        rule.setProperty(EcmascriptParserOptions.RECORDING_COMMENTS_DESCRIPTOR, true);        assertTrue(((EcmascriptParserOptions) rule.getParserOptions()).isRecordingComments());        rule.setProperty(EcmascriptParserOptions.RECORDING_COMMENTS_DESCRIPTOR, false);        assertFalse(((EcmascriptParserOptions) rule.getParserOptions()).isRecordingComments());        rule.setProperty(EcmascriptParserOptions.RECORDING_LOCAL_JSDOC_COMMENTS_DESCRIPTOR, true);        assertTrue(((EcmascriptParserOptions) rule.getParserOptions()).isRecordingLocalJsDocComments());        rule.setProperty(EcmascriptParserOptions.RECORDING_LOCAL_JSDOC_COMMENTS_DESCRIPTOR, false);        assertFalse(((EcmascriptParserOptions) rule.getParserOptions()).isRecordingLocalJsDocComments());        rule.setProperty(EcmascriptParserOptions.RHINO_LANGUAGE_VERSION, "default");        assertEquals(EcmascriptParserOptions.Version.VERSION_DEFAULT,                ((EcmascriptParserOptions) rule.getParserOptions()).getRhinoLanguageVersion());        rule.setProperty(EcmascriptParserOptions.RHINO_LANGUAGE_VERSION, "1.8");        assertEquals(EcmascriptParserOptions.Version.VERSION_1_8,                ((EcmascriptParserOptions) rule.getParserOptions()).getRhinoLanguageVersion());    }    @Test    public void testSetters() {        EcmascriptParserOptions options = new EcmascriptParserOptions();        options.setSuppressMarker("foo");        assertEquals("foo", options.getSuppressMarker());        options.setSuppressMarker(null);        assertNull(options.getSuppressMarker());    }    @Test    public void testEqualsHashcode() throws Exception {        BooleanProperty[] properties = new BooleanProperty[] { EcmascriptParserOptions.RECORDING_COMMENTS_DESCRIPTOR,            EcmascriptParserOptions.RECORDING_LOCAL_JSDOC_COMMENTS_DESCRIPTOR, };        for (int i = 0; i < properties.length; i++) {            BooleanProperty property = properties[i];            MyRule rule = new MyRule();            rule.setProperty(property, true);            ParserOptions options1 = rule.getParserOptions();            rule.setProperty(property, false);            ParserOptions options2 = rule.getParserOptions();            rule.setProperty(property, true);            ParserOptions options3 = rule.getParserOptions();            rule.setProperty(property, false);            ParserOptions options4 = rule.getParserOptions();            verifyOptionsEqualsHashcode(options1, options2, options3, options4);        }        EcmascriptParserOptions options1 = new EcmascriptParserOptions();        options1.setSuppressMarker("foo");        EcmascriptParserOptions options2 = new EcmascriptParserOptions();        options2.setSuppressMarker("bar");        EcmascriptParserOptions options3 = new EcmascriptParserOptions();        options3.setSuppressMarker("foo");        EcmascriptParserOptions options4 = new EcmascriptParserOptions();        options4.setSuppressMarker("bar");        verifyOptionsEqualsHashcode(options1, options2, options3, options4);        options1 = new EcmascriptParserOptions();        options1.setRhinoLanguageVersion(EcmascriptParserOptions.Version.VERSION_DEFAULT);        options2 = new EcmascriptParserOptions();        options2.setRhinoLanguageVersion(EcmascriptParserOptions.Version.VERSION_1_8);        options3 = new EcmascriptParserOptions();        options3.setRhinoLanguageVersion(EcmascriptParserOptions.Version.VERSION_DEFAULT);        options4 = new EcmascriptParserOptions();        options4.setRhinoLanguageVersion(EcmascriptParserOptions.Version.VERSION_1_8);        verifyOptionsEqualsHashcode(options1, options2, options3, options4);    }    private static final class MyRule extends AbstractEcmascriptRule {    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(EcmascriptParserOptionsTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.cli.BaseCPDCLITest;public class CPDCommandLineInterfaceTest extends BaseCPDCLITest {    @Test    public void shouldFindDuplicatesWithDifferentFileExtensions() {        runCPD("--minimum-tokens", "5", "--language", "js", "--files",                "src/test/resources/net/sourceforge/pmd/cpd/ts/File1.ts",                "src/test/resources/net/sourceforge/pmd/cpd/ts/File2.ts");        String out = getOutput();        Assert.assertTrue(out.contains("Found a 9 line (30 tokens) duplication in the following files"));    }    @Test    public void shouldFindNoDuplicatesWithDifferentFileExtensions() {        runCPD("--minimum-tokens", "5", "--language", "js", "--files",                "src/test/resources/net/sourceforge/pmd/cpd/ts/");        String out = getOutput();        Assert.assertTrue(out.trim().isEmpty());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import java.io.IOException;import java.util.List;import org.junit.Test;import net.sourceforge.pmd.PMD;public class EcmascriptTokenizerTest {    @Test    public void test1() throws IOException {        Tokenizer tokenizer = new EcmascriptTokenizer();        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(getCode1()));        Tokens tokens = new Tokens();        tokenizer.tokenize(sourceCode, tokens);        assertEquals(40, tokens.size());    }    @Test    public void test2() throws IOException {        Tokenizer t = new EcmascriptTokenizer();        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(getCode2()));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        assertEquals(45, tokens.size());    }    /**     * See: https://sourceforge.net/p/pmd/bugs/1239/     *      * @throws IOException     *             IO Exception     */    @Test    public void parseStringNotAsMultiline() throws IOException {        Tokenizer t = new EcmascriptTokenizer();        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(                "var s = \"a string \\\n" + "continues\";\n" + "var s = \"a string \\\n" + "continues2\";\n"));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        assertEquals(11, tokens.size());        List<TokenEntry> list = tokens.getTokens();        assertEquals("var", list.get(0).getIdentifier(), list.get(5).getIdentifier());        assertEquals("s", list.get(1).getIdentifier(), list.get(6).getIdentifier());        assertEquals("=", list.get(2).getIdentifier(), list.get(7).getIdentifier());        assertEquals("\"a string continues\"", list.get(3).toString());        assertEquals("\"a string continues2\"", list.get(8).toString());        assertFalse(list.get(3).getIdentifier() == list.get(8).getIdentifier());    }    @Test    public void testIgnoreSingleLineComments() throws IOException {        Tokenizer t = new EcmascriptTokenizer();        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(                "//This is a single line comment\n" + "var i = 0;\n\n" + "//This is another comment\n" + "i++;"));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        assertEquals(9, tokens.size());        List<TokenEntry> list = tokens.getTokens();        assertEquals("var", list.get(0).toString());        assertEquals("++", list.get(6).toString());    }    @Test    public void testIgnoreMultiLineComments() throws IOException {        Tokenizer t = new EcmascriptTokenizer();        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader("/* This is a multi line comment\n"                + " *                             \n" + " */                            \n" + "var i = 0;\n\n"                + "/* This is another multi line comment\n" + " * second line                       \n"                + " * third line                      */\n" + "i++;"));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        assertEquals(9, tokens.size());        List<TokenEntry> list = tokens.getTokens();        assertEquals("var", list.get(0).toString());        assertEquals("++", list.get(6).toString());    }    // no semi-colons    private String getCode1() {        StringBuilder sb = new StringBuilder();        sb.append("function switchToRealPassword() {").append(PMD.EOL);        sb.append("   var real = $('realPass')").append(PMD.EOL);        sb.append("   var prompt = $('promptPass')").append(PMD.EOL);        sb.append("   real.style.display = 'inline'").append(PMD.EOL);        sb.append("   prompt.style.display = 'none'").append(PMD.EOL);        sb.append("   real.focus()").append(PMD.EOL);        sb.append("}").append(PMD.EOL);        return sb.toString();    }    // same as getCode1, but lines are ended with semi-colons    private String getCode2() {        StringBuilder sb = new StringBuilder();        sb.append("function switchToRealPassword() {").append(PMD.EOL);        sb.append("   var real = $('realPass');").append(PMD.EOL);        sb.append("   var prompt = $('promptPass');").append(PMD.EOL);        sb.append("   real.style.display = 'inline';").append(PMD.EOL);        sb.append("   prompt.style.display = 'none';").append(PMD.EOL);        sb.append("   real.focus();").append(PMD.EOL);        sb.append("}").append(PMD.EOL);        return sb.toString();    }    @Test    public void testTemplateStrings() throws IOException {        Tokenizer t = new EcmascriptTokenizer();        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(                  "export default class DrawLocation extends joint.shapes.basic.Generic {" + PMD.EOL                + "  constructor(location: ILocation) {" + PMD.EOL                + "    this.markup = `<g>" + PMD.EOL                + "        <path class=\"location\"/>" + PMD.EOL                + "        <text x=\"0\" y=\"0\" text-anchor=\"middle\" class=\"location-text\"></text>" + PMD.EOL                + PMD.EOL                + "        <path class=\"location\"/>" + PMD.EOL                + "        <circle class=\"location-circle\"/>" + PMD.EOL                + "        ${drawIndicators.Check.markup}" + PMD.EOL                + PMD.EOL                + "      </g>`;" + PMD.EOL                + "  }" + PMD.EOL                + "" + PMD.EOL                + "}"));        final Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        final String templateString = "`<g>" + PMD.EOL                + "        <path class=\"location\"/>" + PMD.EOL                + "        <text x=\"0\" y=\"0\" text-anchor=\"middle\" class=\"location-text\"></text>" + PMD.EOL                + PMD.EOL                + "        <path class=\"location\"/>" + PMD.EOL                + "        <circle class=\"location-circle\"/>" + PMD.EOL                + "        ${drawIndicators.Check.markup}" + PMD.EOL                + PMD.EOL                + "      </g>`";        assertEquals(templateString, tokens.getTokens().get(24).toString());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ant;import org.junit.Test;public class PMDTaskTest extends AbstractAntTestHelper {    public PMDTaskTest() {        super.antTestScriptFilename = "pmdtasktest.xml";    }    @Test    public void testEcmascript() {        executeTarget("testEcmascript");        assertOutputContaining("A 'return', 'break', 'continue', or 'throw' statement should be the last in a block.");        assertOutputContaining("Avoid using global variables");        assertOutputContaining("Use ===/!== to compare with true/false or Numbers");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cli;import static org.junit.Assert.assertTrue;import java.io.File;import org.junit.Test;import net.sourceforge.pmd.util.FileUtil;/** * @author Romain Pelisse &lt;belaran@gmail.com&gt; *  */public class CLITest extends BaseCLITest {    @Test    public void useEcmaScript() {        String[] args = { "-d", SOURCE_FOLDER, "-f", "xml", "-R", "ecmascript-basic", "-version", "3", "-l",            "ecmascript", "-debug", };        String resultFilename = runTest(args, "useEcmaScript");        assertTrue("Invalid JavaScript version",                FileUtil.findPatternInFile(new File(resultFilename), "Using Ecmascript version: Ecmascript 3"));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.ecmascript.EcmascriptLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] { { EcmascriptLanguageModule.NAME, EcmascriptLanguageModule.TERSE_NAME, "3",            LanguageRegistry.getLanguage(EcmascriptLanguageModule.NAME).getDefaultVersion(), }, });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.ecmascript.EcmascriptLanguageModule;import net.sourceforge.pmd.lang.ecmascript.ast.ASTFunctionNode;import net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule;import net.sourceforge.pmd.lang.ecmascript.rule.EcmascriptRuleViolationFactory;import net.sourceforge.pmd.testframework.RuleTst;public class ReportTest extends RuleTst {    @Test    public void testExclusionsInReportWithNOPMDEcmascript() throws Exception {        Report rpt = new Report();        Rule rule = new AbstractEcmascriptRule() {            @Override            public Object visit(ASTFunctionNode node, Object data) {                EcmascriptRuleViolationFactory.INSTANCE.addViolation((RuleContext) data, this, node, "Test", null);                return super.visit(node, data);            }        };        String code = "function(x) // NOPMD test suppress\n" + "{ x = 1; }";        runTestFromString(code, rule, rpt,                LanguageRegistry.getLanguage(EcmascriptLanguageModule.NAME).getDefaultVersion());        assertTrue(rpt.isEmpty());        assertEquals(1, rpt.getSuppressedRuleViolations().size());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;/** * Test javascript's rulesets */public class RuleSetFactoryTest extends AbstractRuleSetFactoryTest {    // no additional tests yet}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.vf.rule.security;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class SecurityRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "vf-security";    @Override    public void setUp() {        addRule(RULESET, "VfUnescapeEl");        addRule(RULESET, "VfCsrf");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.vf.ast;import static org.junit.Assert.assertEquals;import java.io.StringReader;import java.util.HashSet;import java.util.Set;import net.sourceforge.pmd.lang.ast.JavaCharStream;import net.sourceforge.pmd.lang.ast.Node;public abstract class AbstractVfNodesTest {    public <T extends VfNode> void assertNumberOfNodes(Class<T> clazz, String source, int number) {        Set<T> nodes = getNodes(clazz, source);        assertEquals("Exactly " + number + " element(s) expected", number, nodes.size());    }    /**     * Run the VF parser on the source, and return the nodes of type clazz.     *     * @param clazz     * @param source     * @return Set     */    public <T extends VfNode> Set<T> getNodes(Class<T> clazz, String source) {        VfParser parser = new VfParser(new JavaCharStream(new StringReader(source)));        Node rootNode = parser.CompilationUnit();        Set<T> nodes = new HashSet<>();        addNodeAndSubnodes(rootNode, nodes, clazz);        return nodes;    }    /**     * Return a subset of allNodes, containing the items in allNodes that are of     * the given type.     *     * @param clazz     * @param allNodes     * @return Set     */    @SuppressWarnings("unchecked")    public <T extends VfNode> Set<T> getNodesOfType(Class<T> clazz, Set<VfNode> allNodes) {        Set<T> result = new HashSet<>();        for (Node node : allNodes) {            if (clazz.equals(node.getClass())) {                result.add((T) node);            }        }        return result;    }    /**     * Add the given node and its subnodes to the set of nodes. If clazz is not     * null, only nodes of the given class are put in the set of nodes.     */    @SuppressWarnings("unchecked")    private <T extends VfNode> void addNodeAndSubnodes(Node node, Set<T> nodes, Class<T> clazz) {        if (null != node) {            if ((null == clazz) || (clazz.equals(node.getClass()))) {                nodes.add((T) node);            }            for (int i = 0; i < node.jjtGetNumChildren(); i++) {                addNodeAndSubnodes(node.jjtGetChild(i), nodes, clazz);            }        }    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.vf.ast;import static org.junit.Assert.assertEquals;import java.util.Set;import org.junit.Test;public class VfPageStyleTest extends AbstractVfNodesTest {    /**     * Test parsing of a EL expression.     */    @Test    public void testElExpression() {        Set<ASTElExpression> expressions = getNodes(ASTElExpression.class, VF_EL_EXPRESSION);        assertEquals("One expression expected!", 1, expressions.size());        ASTElExpression expression = expressions.iterator().next();        ASTExpression exp = expression.getFirstChildOfType(ASTExpression.class);        ASTIdentifier id = exp.getFirstChildOfType(ASTIdentifier.class);        assertEquals("Correct expression content expected!", "myBean", id.getImage());        ASTDotExpression dot = exp.getFirstChildOfType(ASTDotExpression.class);        ASTIdentifier dotid = dot.getFirstChildOfType(ASTIdentifier.class);        assertEquals("Correct expression content expected!", "get", dotid.getImage());         ASTArguments arguments = exp.getFirstChildOfType(ASTArguments.class);        ASTExpression innerExpression = arguments.getFirstChildOfType(ASTExpression.class);        ASTLiteral literal = innerExpression.getFirstChildOfType(ASTLiteral.class);        assertEquals("Correct expression content expected!", "\"{! World }\"", literal.getImage());    }    /**     * Test parsing of a EL expression in an attribute.     */    @Test    public void testElExpressionInAttribute() {        Set<ASTElExpression> expressions = getNodes(ASTElExpression.class, VF_EL_EXPRESSION_IN_ATTRIBUTE);        assertEquals("One expression expected!", 1, expressions.size());        ASTElExpression expression = expressions.iterator().next();        ASTExpression exp = expression.getFirstChildOfType(ASTExpression.class);        ASTIdentifier id = exp.getFirstChildOfType(ASTIdentifier.class);        assertEquals("Correct expression content expected!", "myValidator", id.getImage());        ASTDotExpression dot = exp.getFirstChildOfType(ASTDotExpression.class);        ASTIdentifier dotid = dot.getFirstChildOfType(ASTIdentifier.class);        assertEquals("Correct expression content expected!", "find", dotid.getImage());        ASTArguments arguments = exp.getFirstChildOfType(ASTArguments.class);        ASTExpression innerExpression = arguments.getFirstChildOfType(ASTExpression.class);        ASTLiteral literal = innerExpression.getFirstChildOfType(ASTLiteral.class);        assertEquals("Correct expression content expected!", "\"'vf'\"", literal.getImage());    }    private static final String VF_EL_EXPRESSION = "<html><title>Hello {!myBean.get(\"{! World }\") } .vf</title></html>";    private static final String VF_EL_EXPRESSION_IN_ATTRIBUTE = "<html> <f:validator type=\"get('type').{!myValidator.find(\"'vf'\")}\" /> </html>";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(VfPageStyleTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.vf.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Iterator;import java.util.List;import java.util.Set;import org.junit.Test;/** * Test parsing of a VF in document style, by checking the generated AST. * Original @author pieter_van_raemdonck - Application Engineers NV/SA - * www.ae.be *  * @author sergey.gorbaty - VF adaptation * */public class VfDocStyleTest extends AbstractVfNodesTest {    /**     * Smoke test for VF parser.     */    @Test    public void testSimplestVf() {        assertNumberOfNodes(ASTElement.class, TEST_SIMPLEST_HTML, 1);    }    /**     * Test the information on a Element and Attribute.     */    @Test    public void testElementAttributeAndNamespace() {        Set<VfNode> nodes = getNodes(null, TEST_ELEMENT_AND_NAMESPACE);        Set<ASTElement> elementNodes = getNodesOfType(ASTElement.class, nodes);        assertEquals("One element node expected!", 1, elementNodes.size());        ASTElement element = elementNodes.iterator().next();        assertEquals("Correct name expected!", "h:html", element.getName());        assertEquals("Has namespace prefix!", true, element.isHasNamespacePrefix());        assertEquals("Element is empty!", true, element.isEmpty());        assertEquals("Correct namespace prefix of element expected!", "h", element.getNamespacePrefix());        assertEquals("Correct local name of element expected!", "html", element.getLocalName());        Set<ASTAttribute> attributeNodes = getNodesOfType(ASTAttribute.class, nodes);        assertEquals("One attribute node expected!", 1, attributeNodes.size());        ASTAttribute attribute = attributeNodes.iterator().next();        assertEquals("Correct name expected!", "MyNsPrefix:MyAttr", attribute.getName());        assertEquals("Has namespace prefix!", true, attribute.isHasNamespacePrefix());        assertEquals("Correct namespace prefix of element expected!", "MyNsPrefix", attribute.getNamespacePrefix());        assertEquals("Correct local name of element expected!", "MyAttr", attribute.getLocalName());    }    /**     * Test exposing a bug of parsing error when having a hash as last character     * in an attribute value.     *     */    @Test    public void testAttributeValueContainingHash() {        Set<VfNode> nodes = getNodes(null, TEST_ATTRIBUTE_VALUE_CONTAINING_HASH);        Set<ASTAttribute> attributes = getNodesOfType(ASTAttribute.class, nodes);        assertEquals("Three attributes expected!", 3, attributes.size());        List<ASTAttribute> attrsList = new ArrayList<>(attributes);        Collections.sort(attrsList, new Comparator<ASTAttribute>() {            public int compare(ASTAttribute arg0, ASTAttribute arg1) {                return arg0.getName().compareTo(arg1.getName());            }        });        ASTAttribute attr = attrsList.get(0);        assertEquals("Correct attribute name expected!", "foo", attr.getName());        assertEquals("Correct attribute value expected!", "CREATE",                attr.getFirstDescendantOfType(ASTText.class).getImage());        attr = attrsList.get(1);        assertEquals("Correct attribute name expected!", "href", attr.getName());        assertEquals("Correct attribute value expected!", "#", attr.getFirstDescendantOfType(ASTText.class).getImage());        attr = attrsList.get(2);        assertEquals("Correct attribute name expected!", "something", attr.getName());        assertEquals("Correct attribute value expected!", "#yes#",                attr.getFirstDescendantOfType(ASTText.class).getImage());    }    /**     * Test correct parsing of CDATA.     */    @Test    public void testCData() {        Set<ASTCData> cdataNodes = getNodes(ASTCData.class, TEST_CDATA);        assertEquals("One CDATA node expected!", 1, cdataNodes.size());        ASTCData cdata = cdataNodes.iterator().next();        assertEquals("Content incorrectly parsed!", " some <cdata> ]] ]> ", cdata.getImage());    }    /**     * Test parsing of Doctype declaration.     */    @Test    public void testDoctype() {        Set<VfNode> nodes = getNodes(null, TEST_DOCTYPE);        Set<ASTDoctypeDeclaration> docTypeDeclarations = getNodesOfType(ASTDoctypeDeclaration.class, nodes);        assertEquals("One doctype declaration expected!", 1, docTypeDeclarations.size());        ASTDoctypeDeclaration docTypeDecl = docTypeDeclarations.iterator().next();        assertEquals("Correct doctype-name expected!", "html", docTypeDecl.getName());        Set<ASTDoctypeExternalId> externalIds = getNodesOfType(ASTDoctypeExternalId.class, nodes);        assertEquals("One doctype external id expected!", 1, externalIds.size());        ASTDoctypeExternalId externalId = externalIds.iterator().next();        assertEquals("Correct external public id expected!", "-//W3C//DTD XHTML 1.1//EN", externalId.getPublicId());        assertEquals("Correct external uri expected!", "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd",                externalId.getUri());    }    /**     * Test parsing of HTML &lt;script&gt; element.     */    @Test    public void testHtmlScript() {        Set<ASTHtmlScript> scripts = getNodes(ASTHtmlScript.class, TEST_HTML_SCRIPT);        assertEquals("One script expected!", 1, scripts.size());        ASTHtmlScript script = scripts.iterator().next();        ASTText text = script.getFirstChildOfType(ASTText.class);        assertEquals("Correct script content expected!", "Script!", text.getImage());    }    /**     * Test parsing of EL in attribute of an element.     */    @Test    public void testELInTagValue() {        Set<ASTElement> elememts = getNodes(ASTElement.class, TEST_EL_IN_TAG_ATTRIBUTE);        assertEquals("One element expected!", 1, elememts.size());        ASTElement element = elememts.iterator().next();        ASTAttributeValue attribute = element.getFirstDescendantOfType(ASTAttributeValue.class);        ASTIdentifier id = attribute.getFirstDescendantOfType(ASTIdentifier.class);        assertEquals("Correct identifier expected", "foo", id.getImage());    }    /**     * Test parsing of EL in attribute of an element that also has a comment.     */    @Test    public void testELInTagValueWithCommentDQ() {        Set<ASTElement> elememts = getNodes(ASTElement.class, TEST_EL_IN_TAG_ATTRIBUTE_WITH_COMMENT);        assertEquals("One element expected!", 1, elememts.size());        ASTElement element = elememts.iterator().next();        ASTElExpression elExpr = element.getFirstDescendantOfType(ASTElExpression.class);        ASTIdentifier id = elExpr.getFirstDescendantOfType(ASTIdentifier.class);        assertEquals("Correct identifier expected", "init", id.getImage());    }    /**     * Test parsing of EL in attribute of an element that also has a comment.     */    @Test    public void testELInTagValueWithCommentSQ() {        Set<ASTElement> elememts = getNodes(ASTElement.class, TEST_EL_IN_TAG_ATTRIBUTE_WITH_COMMENT_SQ);        assertEquals("One element expected!", 1, elememts.size());        ASTElement element = elememts.iterator().next();        ASTElExpression elExpr = element.getFirstDescendantOfType(ASTElExpression.class);        ASTIdentifier id = elExpr.getFirstDescendantOfType(ASTIdentifier.class);        assertEquals("Correct identifier expected", "init", id.getImage());    }    /**     * Test parsing of EL in HTML &lt;script&gt; element.     */    @Test    public void testELInHtmlScript() {        Set<ASTHtmlScript> scripts = getNodes(ASTHtmlScript.class, TEST_EL_IN_HTML_SCRIPT);        assertEquals("One script expected!", 1, scripts.size());        ASTHtmlScript script = scripts.iterator().next();        ASTText text = script.getFirstChildOfType(ASTText.class);        assertEquals("Correct script content expected!", "vartext=", text.getImage());        ASTElExpression el = script.getFirstChildOfType(ASTElExpression.class);        ASTIdentifier id = el.getFirstDescendantOfType(ASTIdentifier.class);        assertEquals("Correct EL content expected!", "elInScript", id.getImage());    }    /**     * Test parsing of inline comment in EL.     */    @Test    public void testInlineCommentInEL() {        Set<ASTHtmlScript> scripts = getNodes(ASTHtmlScript.class, TEST_EL_IN_HTML_SCRIPT_WITH_COMMENT);        assertEquals("One script expected!", 1, scripts.size());        ASTHtmlScript script = scripts.iterator().next();        ASTText text = script.getFirstChildOfType(ASTText.class);        assertEquals("Correct script content expected!", "vartext=", text.getImage());        ASTElExpression el = script.getFirstChildOfType(ASTElExpression.class);        ASTIdentifier id = el.getFirstDescendantOfType(ASTIdentifier.class);        assertEquals("Correct EL content expected!", "elInScript", id.getImage());    }    /**     * Test parsing of quoted EL in HTML &lt;script&gt; element.     */    @Test    public void testQuotedELInHtmlScript() {        Set<ASTHtmlScript> scripts = getNodes(ASTHtmlScript.class, TEST_QUOTED_EL_IN_HTML_SCRIPT);        assertEquals("One script expected!", 1, scripts.size());        ASTHtmlScript script = scripts.iterator().next();        ASTText text = script.getFirstChildOfType(ASTText.class);        assertEquals("Correct script content expected!", "vartext='textHere", text.getImage());        ASTElExpression el = script.getFirstChildOfType(ASTElExpression.class);        ASTIdentifier id = el.getFirstDescendantOfType(ASTIdentifier.class);        assertEquals("Correct EL content expected!", "elInScript", id.getImage());    }    /**     * Test parsing of HTML &lt;script src="x"/&gt; element. It might not be     * valid html but it is likely to appear in .page files.     */    @Test    public void testImportHtmlScript() {        Set<ASTHtmlScript> scripts = getNodes(ASTHtmlScript.class, TEST_IMPORT_JAVASCRIPT);        assertEquals("One script expected!", 1, scripts.size());        ASTHtmlScript script = scripts.iterator().next();        List<ASTAttribute> attr = script.findDescendantsOfType(ASTAttribute.class);        assertEquals("One script expected!", 1, attr.size());        ASTAttribute att = attr.iterator().next();        ASTAttributeValue val = att.getFirstChildOfType(ASTAttributeValue.class);        ASTText text = val.getFirstChildOfType(ASTText.class);        assertEquals("filename.js", text.getImage());    }    /**     * Test parsing of HTML &lt;script&gt; element.     */    @Test    public void testHtmlScriptWithAttribute() {        Set<ASTHtmlScript> scripts = getNodes(ASTHtmlScript.class, TEST_HTML_SCRIPT_WITH_ATTRIBUTE);        assertEquals("One script expected!", 1, scripts.size());        ASTHtmlScript script = scripts.iterator().next();        ASTText text = script.getFirstChildOfType(ASTText.class);        assertEquals("Correct script content expected!", "Script!", text.getImage());        List<ASTText> attrs = script.findDescendantsOfType(ASTText.class);        assertTrue("text/javascript".equals(attrs.get(0).getImage()));    }    /**     * A complex script containing HTML comments, escapes, quotes, etc.     */    @Test    public void testComplexHtmlScript() {        Set<ASTHtmlScript> script = getNodes(ASTHtmlScript.class, TEST_COMPLEX_SCRIPT);        assertEquals("One script expected!", 1, script.size());        ASTHtmlScript next = script.iterator().next();        ASTText text = next.getFirstChildOfType(ASTText.class);        assertTrue(text.getImage().contains("<!--"));    }    /**     * Test parsing of HTML &lt;style&gt; element.     */    @Test    public void testInlineCss() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_INLINE_STYLE);        assertEquals("Two elements expected!", 3, elements.size());    }    /**     * Test parsing of HTML text within element.     */    @Test    public void testTextInTag() {        Set<ASTText> scripts = getNodes(ASTText.class, TEST_TEXT_IN_TAG);        assertEquals("One text chunk expected!", 1, scripts.size());        ASTText script = scripts.iterator().next();        assertEquals("Correct content expected!", " some text ", script.getImage());    }    /**     * Test parsing of HTML with no spaces between tags. Parser is likely in     * this scenario.     */    @Test    public void noSpacesBetweenTags() {        Set<ASTElement> scripts = getNodes(ASTElement.class, TEST_TAGS_NO_SPACE);        assertEquals("Two tags expected!", 2, scripts.size());        List<ASTElement> elmts = sortNodesByName(scripts);        Iterator<ASTElement> iterator = elmts.iterator();        ASTElement script = iterator.next();        assertEquals("Correct content expected!", "a", script.getName());        script = iterator.next();        assertEquals("Correct content expected!", "b", script.getName());    }    /**     * the $ sign might trick the parser into thinking an EL is next. He should     * be able to treat it as plain text     */    @Test    public void unclosedTagsWithDollar() {        Set<ASTText> scripts = getNodes(ASTText.class, TEST_TAGS_WITH_DOLLAR);        assertEquals("Two text chunks expected!", 2, scripts.size());        ASTText script = scripts.iterator().next();        assertEquals("Correct content expected!", " $ ", script.getImage());    }    /**     * Make sure EL expressions aren't treated as plain text when they are     * around unclosed tags.     */    @Test    public void unclosedTagsWithELWithin() {        Set<ASTElement> element = getNodes(ASTElement.class, TEST_TAGS_WITH_EL_WITHIN);        assertEquals("One element expected!", 1, element.size());        for (ASTElement elem : element) {            ASTContent content = elem.getFirstChildOfType(ASTContent.class);            List<ASTElExpression> els = content.findChildrenOfType(ASTElExpression.class);            assertEquals("Two EL expressions expected!", 2, els.size());            ASTElExpression node = (ASTElExpression) content.jjtGetChild(0);            ASTIdentifier id = node.getFirstDescendantOfType(ASTIdentifier.class);            assertEquals("Correct content expected!", "expr1", id.getImage());            node = (ASTElExpression) content.jjtGetChild(1);            id = node.getFirstDescendantOfType(ASTIdentifier.class);            assertEquals("Correct content expected!", "expr2", id.getImage());        }    }    /**     * Test parsing of HTML &lt;script&gt; element.     */    @Test    public void textAfterOpenAndClosedTag() {        Set<ASTElement> nodes = getNodes(ASTElement.class, TEST_TEXT_AFTER_OPEN_AND_CLOSED_TAG);        assertEquals("Two elements expected!", 2, nodes.size());        List<ASTElement> elmts = sortNodesByName(nodes);        assertEquals("First element should be a", "a", elmts.get(0).getName());        assertFalse("first element should be closed", elmts.get(0).isUnclosed());        assertEquals("Second element should be b", "b", elmts.get(1).getName());        assertTrue("Second element should not be closed", elmts.get(1).isUnclosed());        Set<ASTText> text = getNodes(ASTText.class, TEST_TEXT_AFTER_OPEN_AND_CLOSED_TAG);        assertEquals("Two text chunks expected!", 2, text.size());    }    @Test    public void quoteEL() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_QUOTE_EL);        assertEquals("One attribute expected!", 1, attributes.size());        ASTAttributeValue attr = attributes.iterator().next();        List<ASTElExpression> els = attr.findChildrenOfType(ASTElExpression.class);        assertEquals("Must be 1!", 1, els.size());        ASTExpression expr = els.get(0).getFirstChildOfType(ASTExpression.class);        ASTIdentifier id = expr.getFirstChildOfType(ASTIdentifier.class);        assertEquals("Expected to detect proper value for attribute!", "something", id.getImage());    }    /**     * smoke test for a non-quoted attribute value     */    @Test    public void quoteAttrValue() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_ATTR);        assertEquals("One attribute expected!", 1, attributes.size());        ASTAttributeValue attr = attributes.iterator().next();        ASTText text = attr.getFirstChildOfType(ASTText.class);        assertEquals("Expected to detect proper value for attribute!", "yes|", text.getImage());    }    /**     * tests whether parse correctly interprets empty non quote attribute     */    @Test    public void noQuoteAttrEmpty() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_EMPTY_ATTR);        assertEquals("two attributes expected!", 2, attributes.size());        Iterator<ASTAttributeValue> iterator = attributes.iterator();        ASTAttributeValue attr = iterator.next();        if ("http://someHost:/some_URL".equals(attr.getImage())) {            // we have to employ this nasty work-around            // in order to ensure that we check the proper attribute            attr = iterator.next();        }        assertEquals("Expected to detect proper value for attribute!", null, attr.getImage());    }    /**     * tests whether parse correctly interprets an tab instead of an attribute     */    @Test    public void singleQuoteAttrTab() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_TAB_ATTR);        assertEquals("One attribute expected!", 1, attributes.size());        Iterator<ASTAttributeValue> iterator = attributes.iterator();        ASTAttributeValue attr = iterator.next();        ASTText text = attr.getFirstChildOfType(ASTText.class);        assertEquals("Expected to detect proper value for attribute!", "\t", text.getImage());    }    @Test    public void unclosedTag() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_UNCLOSED_SIMPLE);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("2 tags expected", 2, elements.size());        assertEquals("First element should be sorted tag:if", "tag:if", sortedElmnts.get(0).getName());        assertEquals("Second element should be tag:someTag", "tag:someTag", sortedElmnts.get(1).getName());        assertTrue(sortedElmnts.get(0).isEmpty());        assertTrue(sortedElmnts.get(0).isUnclosed());        assertFalse(sortedElmnts.get(1).isEmpty());        assertFalse(sortedElmnts.get(1).isUnclosed());    }    @Test    public void unclosedTagAndNoQuotesForAttribute() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_UNCLOSED_ATTR);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("2 tags expected", 2, elements.size());        assertEquals("First element should be sorted tag:if", "tag:if", sortedElmnts.get(0).getName());        assertEquals("Second element should be tag:someTag", "tag:someTag", sortedElmnts.get(1).getName());        assertTrue(sortedElmnts.get(0).isEmpty());        assertTrue(sortedElmnts.get(0).isUnclosed());        assertFalse(sortedElmnts.get(1).isEmpty());        assertFalse(sortedElmnts.get(1).isUnclosed());    }    @Test    public void unclosedTagMultipleLevels() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_UNCLOSED_MULTIPLE_LEVELS);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("3 tags expected", 3, elements.size());        assertEquals("First element should be sorted tag:someTag", "tag:someTag", sortedElmnts.get(0).getName());        assertEquals("Second element should be tag:someTag", "tag:someTag", sortedElmnts.get(1).getName());        assertEquals("Third element should be tag:x", "tag:x", sortedElmnts.get(2).getName());        assertFalse(sortedElmnts.get(0).isEmpty());        assertFalse(sortedElmnts.get(0).isUnclosed());        assertTrue(sortedElmnts.get(1).isEmpty());        assertTrue(sortedElmnts.get(1).isUnclosed());        assertFalse(sortedElmnts.get(2).isEmpty());        assertFalse(sortedElmnts.get(2).isUnclosed());    }    /**     * &lt;html&gt; &lt;a1&gt; &lt;a2/&gt; &lt;b/&gt; &lt;/a1&gt; &lt;/html&gt;     */    @Test    public void nestedEmptyTags() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_MULTIPLE_EMPTY_TAGS);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("4 tags expected", 4, elements.size());        assertEquals("First element should a1", "a1", sortedElmnts.get(0).getName());        assertEquals("Second element should be a2", "a2", sortedElmnts.get(1).getName());        assertEquals("Third element should be b", "b", sortedElmnts.get(2).getName());        assertEquals("Third element should be html", "html", sortedElmnts.get(3).getName());        // a1        assertFalse(sortedElmnts.get(0).isEmpty());        assertFalse(sortedElmnts.get(0).isUnclosed());        // a2        assertTrue(sortedElmnts.get(1).isEmpty());        assertFalse(sortedElmnts.get(1).isUnclosed());        // b        assertTrue(sortedElmnts.get(2).isEmpty());        assertFalse(sortedElmnts.get(2).isUnclosed());        // html        assertFalse(sortedElmnts.get(3).isEmpty());        assertFalse(sortedElmnts.get(3).isUnclosed());    }    /**     * &lt;html&gt; &lt;a1&gt; &lt;a2&gt; &lt;a3&gt; &lt;/a2&gt; &lt;/a1&gt;     * &lt;b/&gt; &lt;a4/&gt; &lt;/html&gt;     */    @Test    public void nestedMultipleTags() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_MULTIPLE_NESTED_TAGS);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("4 tags expected", 6, elements.size());        assertEquals("First element should a1", "a1", sortedElmnts.get(0).getName());        assertEquals("Second element should be a2", "a2", sortedElmnts.get(1).getName());        assertEquals("Third element should be a3", "a3", sortedElmnts.get(2).getName());        assertEquals("Forth element should be a4", "a4", sortedElmnts.get(3).getName());        assertEquals("Fifth element should be b", "b", sortedElmnts.get(4).getName());        assertEquals("Sixth element should be html", "html", sortedElmnts.get(5).getName());        // a1 not empty and closed        assertFalse(sortedElmnts.get(0).isEmpty());        assertFalse(sortedElmnts.get(0).isUnclosed());        // a2 not empty and closed        assertFalse(sortedElmnts.get(1).isEmpty());        assertFalse(sortedElmnts.get(1).isUnclosed());        // a3 empty and not closed        assertTrue(sortedElmnts.get(2).isEmpty());        assertTrue(sortedElmnts.get(2).isUnclosed());        // a4 empty but closed        assertTrue(sortedElmnts.get(3).isEmpty());        assertFalse(sortedElmnts.get(3).isUnclosed());        // b empty but closed        assertTrue(sortedElmnts.get(4).isEmpty());        assertFalse(sortedElmnts.get(4).isUnclosed());        // html not empty and closed        assertFalse(sortedElmnts.get(5).isEmpty());        assertFalse(sortedElmnts.get(5).isUnclosed());    }    /**     * will test &lt;x&gt; &lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/x&gt; &lt;/a&gt;     * &lt;/x&gt; . Here x is the first tag to be closed thus rendering the next     * close of a (&lt;/a&gt;) to be disregarded.     */    @Test    public void unclosedParentTagClosedBeforeChild() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_UNCLOSED_END_AFTER_PARENT_CLOSE);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("4 tags expected", 4, elements.size());        assertEquals("First element should be 'a'", "a", sortedElmnts.get(0).getName());        assertEquals("Second element should be b", "b", sortedElmnts.get(1).getName());        assertEquals("Third element should be b", "b", sortedElmnts.get(2).getName());        assertEquals("Forth element should be x", "x", sortedElmnts.get(3).getName());        // a        assertTrue(sortedElmnts.get(0).isEmpty());        assertTrue(sortedElmnts.get(0).isUnclosed());        // b        assertTrue(sortedElmnts.get(1).isEmpty());        assertTrue(sortedElmnts.get(1).isUnclosed());        // b        assertTrue(sortedElmnts.get(2).isEmpty());        assertTrue(sortedElmnts.get(2).isUnclosed());        // x        assertFalse(sortedElmnts.get(3).isEmpty());        assertFalse(sortedElmnts.get(3).isUnclosed());    }    /**     * &lt;x&gt; &lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/z&gt; &lt;/a&gt; &lt;/x&gt;     * An unmatched closing of 'z' appears randomly in the document. This should     * be disregarded and structure of children and parents should not be     * influenced. in other words &lt;/a&gt; should close the first &lt;a&gt;     * tag , &lt;/x&gt; should close the first &lt;x&gt;, etc.     */    @Test    public void unmatchedTagDoesNotInfluenceStructure() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_UNCLOSED_UNMATCHED_CLOSING_TAG);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("4 tags expected", 4, elements.size());        assertEquals("First element should be 'a'", "a", sortedElmnts.get(0).getName());        assertEquals("Second element should be b", "b", sortedElmnts.get(1).getName());        assertEquals("Third element should be b", "b", sortedElmnts.get(2).getName());        assertEquals("Forth element should be x", "x", sortedElmnts.get(3).getName());        // a is not empty and closed        assertFalse(sortedElmnts.get(0).isEmpty());        assertFalse(sortedElmnts.get(0).isUnclosed());        // b empty and unclosed        assertTrue(sortedElmnts.get(1).isEmpty());        assertTrue(sortedElmnts.get(1).isUnclosed());        // b empty and unclosed        assertTrue(sortedElmnts.get(2).isEmpty());        assertTrue(sortedElmnts.get(2).isUnclosed());        // x not empty and closed        assertFalse(sortedElmnts.get(3).isEmpty());        assertFalse(sortedElmnts.get(3).isUnclosed());    }    /**     * &lt;a&gt; &lt;x&gt; &lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/z&gt; &lt;/a&gt;     * &lt;/x&gt; An unmatched closing of 'z' appears randomly in the document.     * This should be disregarded and structure of children and parents should     * not be influenced. Also un unclosed &lt;a&gt; tag appears at the start of     * the document     */    @Test    public void unclosedStartTagWithUnmatchedCloseOfDifferentTag() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_UNCLOSED_START_TAG_WITH_UNMATCHED_CLOSE);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("5 tags expected", 5, elements.size());        assertEquals("First element should be 'a'", "a", sortedElmnts.get(0).getName());        assertEquals("Second element should be a", "a", sortedElmnts.get(1).getName());        assertEquals("Third element should be b", "b", sortedElmnts.get(2).getName());        assertEquals("Forth element should be b", "b", sortedElmnts.get(3).getName());        assertEquals("Fifth element should be x", "x", sortedElmnts.get(4).getName());        // first a is empty and unclosed        assertTrue(sortedElmnts.get(0).isEmpty());        assertTrue(sortedElmnts.get(0).isUnclosed());        // second a not empty and closed        assertFalse(sortedElmnts.get(1).isEmpty());        assertFalse(sortedElmnts.get(1).isUnclosed());        // b empty and unclosed        assertTrue(sortedElmnts.get(2).isEmpty());        assertTrue(sortedElmnts.get(2).isUnclosed());        // b empty and unclosed        assertTrue(sortedElmnts.get(3).isEmpty());        assertTrue(sortedElmnts.get(3).isUnclosed());        // x not empty and closed        assertFalse(sortedElmnts.get(4).isEmpty());        assertFalse(sortedElmnts.get(4).isUnclosed());    }    /**     * will sort the AST element in list in alphabetical order and if tag name     * is the same it will sort against o1.getBeginColumn() +""+     * o1.getBeginLine(). so first criteria is the name, then the second is the     * column +""+line string.     *      * @param elements     * @return     */    private List<ASTElement> sortNodesByName(Set<ASTElement> elements) {        List<ASTElement> list = new ArrayList<>();        list.addAll(elements);        Collections.sort(list, new Comparator<ASTElement>() {            public int compare(ASTElement o1, ASTElement o2) {                if (o1.getName() == null) {                    return Integer.MIN_VALUE;                }                if (o2.getName() == null) {                    return Integer.MAX_VALUE;                }                if (o1.getName().equals(o2.getName())) {                    String o1Value = o1.getBeginColumn() + "" + o1.getBeginLine();                    String o2Value = o2.getBeginColumn() + "" + o2.getBeginLine();                    return o1Value.compareTo(o2Value);                }                return o1.getName().compareTo(o2.getName());            }        });        return list;    }    @Test    public void noQuoteAttrWithJspEL() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_NO_QUOTE_ATTR_WITH_EL);        assertEquals("One attribute expected!", 1, attributes.size());        Iterator<ASTAttributeValue> iterator = attributes.iterator();        ASTAttributeValue attr = iterator.next();        ASTIdentifier id = attr.getFirstDescendantOfType(ASTIdentifier.class);        assertEquals("Expected to detect proper value for EL in attribute!", "something", id.getImage());    }    private static final String TEST_SIMPLEST_HTML = "<html/>";    private static final String TEST_ELEMENT_AND_NAMESPACE = "<h:html MyNsPrefix:MyAttr='MyValue'/>";    private static final String TEST_CDATA = "<html><![CDATA[ some <cdata> ]] ]> ]]></html>";    private static final String TEST_DOCTYPE = "<?xml version=\"1.0\" standalone='yes'?>\n"            + "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" "            + "\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n" + "<greeting>Hello, world!</greeting>";    private static final String TEST_ATTRIBUTE_VALUE_CONTAINING_HASH = "<tag:if something=\"#yes#\" foo=\"CREATE\">  <a href=\"#\">foo</a> </tag:if>";    private static final String TEST_HTML_SCRIPT = "<html><head><script>Script!</script></head></html>";    private static final String TEST_EL_IN_TAG_ATTRIBUTE = "<apex:page action=\"{!foo}\">text</apex:page>";    private static final String TEST_EL_IN_TAG_ATTRIBUTE_WITH_COMMENT = "<apex:page action=\"{!/*comment here*/init}\">text</apex:page>";    private static final String TEST_EL_IN_TAG_ATTRIBUTE_WITH_COMMENT_SQ = "<apex:page action='{!/*comment here*/init}'>text</apex:page>";    private static final String TEST_EL_IN_HTML_SCRIPT = "<html><head><script>var text={!elInScript};</script></head></html>";    private static final String TEST_EL_IN_HTML_SCRIPT_WITH_COMMENT = "<html><head><script>var text={!/*junk1*/elInScript/*junk2*/};</script></head></html>";    private static final String TEST_QUOTED_EL_IN_HTML_SCRIPT = "<html><head><script>var text='textHere{!elInScript}';</script></head></html>";    private static final String TEST_IMPORT_JAVASCRIPT = "<html><head><script src=\"filename.js\" /></head></html>";    private static final String TEST_HTML_SCRIPT_WITH_ATTRIBUTE = "<html><head><script type=\"text/javascript\">Script!</script></head></html>";    private static final String TEST_COMPLEX_SCRIPT = "<HTML><BODY><!--Java Script-->"            + "<SCRIPT language='JavaScript' type='text/javascript'>" + "<!--function calcDays(){"            + " date1 = date1.split(\"-\");  date2 = date2.split(\"-\");"            + " var sDate = new Date(date1[0]+\"/\"+date1[1]+\"/\"+date1[2]);"            + " var eDate = new Date(date2[0]+\"/\"+date2[1]+\"/\"+date2[2]);" + " onload=calcDays;//-->"            + "</SCRIPT></BODY></HTML>;";    private static final String TEST_INLINE_STYLE = "<html><head><style> div { color:red; } </style></head></html>";    private static final String TEST_TEXT_IN_TAG = "<a> some text </a>";    private static final String TEST_TAGS_NO_SPACE = "<a><b></a>";    private static final String TEST_TAGS_WITH_DOLLAR = "<a> $ <b> $ </a>";    private static final String TEST_TAGS_WITH_EL_WITHIN = "<a>{!expr1}{!expr2}</a>";    private static final String TEST_TEXT_AFTER_OPEN_AND_CLOSED_TAG = "<a> some text <b> some text </a>";    private static final String TEST_QUOTE_EL = "<tag:if something=\"{!something}\" > </tag:if>";    private static final String TEST_ATTR = "<tag:if something=\"yes|\" > </tag:if>";    private static final String TEST_EMPTY_ATTR = "<tag:if something= >  <a href=\"http://someHost:/some_URL\" >foo</a> </tag:if>";    private static final String TEST_TAB_ATTR = "<tag:if something='\t' >   </tag:if>";    private static final String TEST_UNCLOSED_SIMPLE = "<tag:someTag> <tag:if someting=\"x\" > </tag:someTag>";    /**     * someTag is closed just once     */    private static final String TEST_UNCLOSED_MULTIPLE_LEVELS = "<tag:x> <tag:someTag> <tag:someTag someting=\"x\" > </tag:someTag> </tag:x>";    /**     * nested empty tags     */    private static final String TEST_MULTIPLE_EMPTY_TAGS = "<html> <a1> <a2/> <b/> </a1> </html>";    /**     * multiple nested tags with some tags unclosed     */    private static final String TEST_MULTIPLE_NESTED_TAGS = "<html> <a1> <a2> <a3> </a2> </a1> <b/> <a4/> </html>";    /**     * </x> will close before </a>, thus leaving <a> to remain unclosed     */    private static final String TEST_UNCLOSED_END_AFTER_PARENT_CLOSE = "<x> <a> <b> <b> </x> </a> aa </x> bb </x>";    /**     * </z> is just a dangling closing tag not matching any parent. The parser     * should disregard it     */    private static final String TEST_UNCLOSED_UNMATCHED_CLOSING_TAG = "<x> <a> <b> <b> </z> </a> </x>";    /**     * First <a> tag does not close. The first closing of </a> will match the     * second opening of a. Another rogue </z> is there for testing compliance     */    private static final String TEST_UNCLOSED_START_TAG_WITH_UNMATCHED_CLOSE = "<a> <x> <a> <b> <b> </z> </a> </x>";    private static final String TEST_UNCLOSED_ATTR = "<tag:someTag> <tag:if someting='x' > </tag:someTag>";    private static final String TEST_NO_QUOTE_ATTR_WITH_EL = "<apex:someTag something={!something} > foo </apex:someTag>";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.vf.ast;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import org.junit.Before;import org.junit.Test;public class OpenTagRegisterTest {    private OpenTagRegister tagList;    private int elmId = 0;    @Before    public void newRegister() {        tagList = new OpenTagRegister();    }    /**     * &lt;a&gt; &lt;b&gt; &lt;/a&gt;     */    @Test    public void testSimpleNesting() {        ASTElement elm = element("a");        ASTElement elm2 = element("b");        tagList.openTag(elm);        tagList.openTag(elm2);        tagList.closeTag(elm);        assertFalse(elm.isUnclosed());        assertTrue(elm2.isUnclosed());    }    /**     * &lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/a&gt;     */    @Test    public void doubleNesting() {        ASTElement elm = element("a");        ASTElement elm2 = element("b");        ASTElement elm3 = element("b");        tagList.openTag(elm);        tagList.openTag(elm2);        tagList.openTag(elm3);        tagList.closeTag(elm);        assertFalse(elm.isUnclosed());        assertTrue(elm2.isUnclosed());        assertTrue(elm3.isUnclosed());    }    /**     * &lt;x&gt; &lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/x&gt; &lt;/a&gt; &lt;/x&gt;     */    @Test    public void unopenedTags() {        ASTElement elm = element("x");        ASTElement elm2 = element("a");        ASTElement elm3 = element("b");        ASTElement elm4 = element("b");        tagList.openTag(elm);        tagList.openTag(elm2);        tagList.openTag(elm3);        tagList.openTag(elm4);        tagList.closeTag(elm);        tagList.closeTag(elm2);        tagList.closeTag(elm3);        tagList.closeTag(elm);        assertFalse(elm.isUnclosed());        assertTrue(elm2.isUnclosed());        assertTrue(elm3.isUnclosed());        assertTrue(elm4.isUnclosed());    }    /**     * &lt;x&gt; &lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/z&gt; &lt;/a&gt; &lt;/x&gt;     *      */    @Test    public void interleavedTags() {        ASTElement elm = element("x");        ASTElement elm2 = element("a");        ASTElement elm3 = element("b");        ASTElement elm4 = element("b");        ASTElement elm5 = element("z");        tagList.openTag(elm);        tagList.openTag(elm2);        tagList.openTag(elm3);        tagList.openTag(elm4); // open b        tagList.closeTag(elm5); // close z        tagList.closeTag(elm2); // close a        tagList.closeTag(elm); // close x        assertFalse(elm.isUnclosed()); // x is closed        assertFalse(elm2.isUnclosed()); // a is closed        assertTrue(elm3.isUnclosed());        assertTrue(elm4.isUnclosed());        // elm5 ???    }    /**     * &lt;a&gt; &lt;x&gt; &lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/z&gt; &lt;/a&gt;     * &lt;/x&gt;     */    @Test    public void openedIsolatedTag() {        ASTElement a = element("a");        ASTElement x = element("x");        ASTElement a2 = element("a");        ASTElement b = element("b");        ASTElement b2 = element("b");        ASTElement z = element("z");        tagList.openTag(a);        tagList.openTag(x);        tagList.openTag(a2);        tagList.openTag(b);        tagList.openTag(b2);        tagList.closeTag(z); // close z        tagList.closeTag(a2); // close second a        tagList.closeTag(x); // close x        assertTrue(a.isUnclosed()); // first a is unclosed        assertFalse(x.isUnclosed()); // x is closed        assertFalse(a2.isUnclosed()); // a is closed        assertTrue(b.isUnclosed());        assertTrue(b2.isUnclosed());    }    private ASTElement element(String name) {        ASTElement elm = new ASTElement(elmId++);        elm.setName(name);        return elm;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.vf;import java.io.StringReader;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersionHandler;import net.sourceforge.pmd.lang.Parser;import net.sourceforge.pmd.lang.ast.Node;/** * @author sergey.gorbaty * */public class VfParserTest {    @Test    public void testSingleDoubleQuoteAndEL() {        Node node = parse("<span escape='false' attrib=\"{!call}\">${!'yes'}</span>");        Assert.assertNotNull(node);    }    @Test    public void testSingleDoubleQuoteAndELFunction() {        Node node = parse("<span escape='false' attrib=\"{!call}\">${!method}</span>");        Assert.assertNotNull(node);    }        @Test    public void testSingleDoubleQuote() {        Node node = parse("<span escape='false' attrib=\"{!call}\">${\"yes\"}</span>");        Assert.assertNotNull(node);    }    private Node parse(String code) {        LanguageVersionHandler vfLang = LanguageRegistry.getLanguage(VfLanguageModule.NAME).getDefaultVersion()                .getLanguageVersionHandler();        Parser parser = vfLang.getParser(vfLang.getDefaultParserOptions());        Node node = parser.parse(null, new StringReader(code));        return node;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import java.io.File;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.LanguageVersionDiscoverer;import net.sourceforge.pmd.lang.vf.VfLanguageModule;/** * @author sergey.gorbaty * */public class LanguageVersionDiscovererTest {    /**     * Test on VF file.     */    @Test    public void testVFFile() {        LanguageVersionDiscoverer discoverer = new LanguageVersionDiscoverer();        File vfFile = new File("/path/to/MyPage.page");        LanguageVersion languageVersion = discoverer.getDefaultLanguageVersionForFile(vfFile);        assertEquals("LanguageVersion must be VF!",                LanguageRegistry.getLanguage(VfLanguageModule.NAME).getDefaultVersion(), languageVersion);    }    @Test    public void testComponentFile() {        LanguageVersionDiscoverer discoverer = new LanguageVersionDiscoverer();        File vfFile = new File("/path/to/MyPage.component");        LanguageVersion languageVersion = discoverer.getDefaultLanguageVersionForFile(vfFile);        assertEquals("LanguageVersion must be VF!",                LanguageRegistry.getLanguage(VfLanguageModule.NAME).getDefaultVersion(), languageVersion);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.vf.VfLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] { { VfLanguageModule.NAME, VfLanguageModule.TERSE_NAME, "",            LanguageRegistry.getLanguage(VfLanguageModule.NAME).getDefaultVersion(), }, });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import java.io.IOException;import org.apache.commons.io.IOUtils;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.testframework.AbstractTokenizerTest;public class PythonTokenizerTest extends AbstractTokenizerTest {    private static final String FILENAME = "sample-python.py";    @Before    @Override    public void buildTokenizer() throws IOException {        this.tokenizer = new PythonTokenizer();        this.sourceCode = new SourceCode(new SourceCode.StringCodeLoader(this.getSampleCode(), FILENAME));    }    @Override    public String getSampleCode() throws IOException {        return IOUtils.toString(PythonTokenizer.class.getResourceAsStream(FILENAME));    }    @Test    public void tokenizeTest() throws IOException {        this.expectedTokenCount = 1218;        super.tokenizeTest();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import java.io.File;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.LanguageVersionDiscoverer;import net.sourceforge.pmd.lang.python.PythonLanguageModule;public class LanguageVersionDiscovererTest {    /**     * Test on Python file with default version     */    @Test    public void testPython() {        LanguageVersionDiscoverer discoverer = new LanguageVersionDiscoverer();        File pythonFile = new File("/path/to/MY_PACKAGE.py");        LanguageVersion languageVersion = discoverer.getDefaultLanguageVersionForFile(pythonFile);        assertEquals("LanguageVersion must be Python!",                LanguageRegistry.getLanguage(PythonLanguageModule.NAME).getDefaultVersion(), languageVersion);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.python.PythonLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] { { PythonLanguageModule.NAME, PythonLanguageModule.TERSE_NAME, "",            LanguageRegistry.getLanguage(PythonLanguageModule.NAME).getDefaultVersion(), }, });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.xml.rule.basic;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class BasicRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "xml-basic";    @Override    public void setUp() {        addRule(RULESET, "MistypedCDATASection");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.xml.rule;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNotNull;import java.io.StringReader;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.junit.Test;import org.w3c.dom.Attr;import org.w3c.dom.CharacterData;import org.w3c.dom.Comment;import org.w3c.dom.Document;import org.w3c.dom.DocumentType;import org.w3c.dom.Element;import org.w3c.dom.Entity;import org.w3c.dom.EntityReference;import org.w3c.dom.Notation;import org.w3c.dom.ProcessingInstruction;import org.w3c.dom.Text;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.Parser;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.xml.XmlLanguageModule;import net.sourceforge.pmd.lang.xml.XmlParserOptions;import net.sourceforge.pmd.lang.xml.ast.XmlNode;public class AbstractDomXmlRuleTest {    @Test    public void testVisit() throws Exception {        String source = "<?xml version=\"1.0\"?><?mypi?><!DOCTYPE testDoc [<!ENTITY entity \"e\">]><!--Comment--><foo abc=\"abc\"><bar>TEXT</bar><![CDATA[cdata!]]>&gt;&entity;&lt;</foo>";        XmlParserOptions parserOptions = new XmlParserOptions();        parserOptions.setExpandEntityReferences(false);        Parser parser = LanguageRegistry.getLanguage(XmlLanguageModule.NAME).getDefaultVersion()                .getLanguageVersionHandler().getParser(parserOptions);        XmlNode xmlNode = (XmlNode) parser.parse(null, new StringReader(source));        List<XmlNode> nodes = new ArrayList<>();        nodes.add(xmlNode);        MyRule rule = new MyRule();        rule.apply(nodes, null);        List<org.w3c.dom.Node> visited = rule.visitedNodes.get("Attr");        assertEquals(1, visited.size());        assertEquals("abc", visited.get(0).getLocalName());        visited = rule.visitedNodes.get("CharacterData");        assertEquals(1, visited.size());        assertEquals("cdata!", ((CharacterData) visited.get(0)).getData());        visited = rule.visitedNodes.get("Comment");        assertEquals("Comment", ((Comment) visited.get(0)).getData());        visited = rule.visitedNodes.get("Document");        assertEquals(1, visited.size());        visited = rule.visitedNodes.get("DocumentType");        assertEquals("testDoc", ((DocumentType) visited.get(0)).getName());        visited = rule.visitedNodes.get("Element");        assertEquals(2, visited.size());        assertEquals("foo", visited.get(0).getLocalName());        assertEquals("bar", visited.get(1).getLocalName());        // TODO Figure out how to trigger this.        // visited = rule.visitedNodes.get("Entity");        // assertEquals(0, visited.size());        visited = rule.visitedNodes.get("EntityReference");        assertEquals(1, visited.size());        assertEquals("entity", ((EntityReference) visited.get(0)).getNodeName());        // TODO Figure out how to trigger this.        // visited = rule.visitedNodes.get("Notation");        // assertEquals(0, visited.size());        visited = rule.visitedNodes.get("ProcessingInstruction");        assertEquals(1, visited.size());        assertEquals("mypi", ((ProcessingInstruction) visited.get(0)).getTarget());        visited = rule.visitedNodes.get("Text");        assertEquals(3, visited.size());        assertEquals("TEXT", ((Text) visited.get(0)).getData());        assertEquals(">", ((Text) visited.get(1)).getData());        assertEquals("e<", ((Text) visited.get(2)).getData());    }    @Test    public void dtdIsNotLookedUp() {        String source = "<!DOCTYPE struts-config PUBLIC "                + " \"-//Apache Software Foundation//DTD Struts Configuration 1.1//EN \" "                + " \"http://jakarta.inexistinghost.org/struts/dtds/struts-config_1_1.dtd\" >" + "<struts-config/>";        XmlParserOptions parserOptions = new XmlParserOptions();        parserOptions.setLookupDescriptorDoc(false);        Parser parser = LanguageRegistry.getLanguage(XmlLanguageModule.NAME).getDefaultVersion()                .getLanguageVersionHandler().getParser(parserOptions);        XmlNode xmlNode = (XmlNode) parser.parse(null, new StringReader(source));        // no exception should be thrown        MyRule rule = new MyRule();        List<XmlNode> nodes = new ArrayList<>();        nodes.add(xmlNode);        rule.apply(nodes, null);        // first element is still parsed        assertNotNull(rule.visitedNodes.get("Element"));    }    @Test    public void xsdIsNotLookedUp() {        String source = "<?xml version=\"1.0\" encoding=\"UTF-8\"?> "                + "<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" "                + "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" "                + "xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.inexisting.com/xml/ns/javaee/web-app_2_5.xsd\" "                + "version=\"2.5\">" + "</web-app>";        XmlParserOptions parserOptions = new XmlParserOptions();        Parser parser = LanguageRegistry.getLanguage(XmlLanguageModule.NAME).getDefaultVersion()                .getLanguageVersionHandler().getParser(parserOptions);        XmlNode xmlNode = (XmlNode) parser.parse(null, new StringReader(source));        // no exception should be thrown        // first element is still parsed        MyRule rule = new MyRule();        List<XmlNode> nodes = new ArrayList<>();        nodes.add(xmlNode);        rule.apply(nodes, null);        assertNotNull(rule.visitedNodes.get("Element"));    }    private static class MyRule extends AbstractDomXmlRule {        final Map<String, List<org.w3c.dom.Node>> visitedNodes = new HashMap<>();        MyRule() {        }        private void visit(String key, org.w3c.dom.Node node) {            List<org.w3c.dom.Node> nodes = visitedNodes.get(key);            if (nodes == null) {                nodes = new ArrayList<>();                visitedNodes.put(key, nodes);            }            nodes.add(node);        }        @Override        public void apply(List<? extends Node> nodes, RuleContext ctx) {            super.apply(nodes, ctx);        }        @Override        protected void visit(XmlNode node, Attr attr, RuleContext ctx) {            visit("Attr", attr);            super.visit(node, attr, ctx);        }        @Override        protected void visit(XmlNode node, CharacterData characterData, RuleContext ctx) {            visit("CharacterData", characterData);            super.visit(node, characterData, ctx);        }        @Override        protected void visit(XmlNode node, Comment comment, RuleContext ctx) {            visit("Comment", comment);            super.visit(node, comment, ctx);        }        @Override        protected void visit(XmlNode node, Document document, RuleContext ctx) {            visit("Document", document);            super.visit(node, document, ctx);        }        @Override        protected void visit(XmlNode node, DocumentType documentType, RuleContext ctx) {            visit("DocumentType", documentType);            super.visit(node, documentType, ctx);        }        @Override        protected void visit(XmlNode node, Element element, RuleContext ctx) {            visit("Element", element);            super.visit(node, element, ctx);        }        @Override        protected void visit(XmlNode node, Entity entity, RuleContext ctx) {            visit("Entity", entity);            super.visit(node, entity, ctx);        }        @Override        protected void visit(XmlNode node, EntityReference entityReference, RuleContext ctx) {            visit("EntityReference", entityReference);            super.visit(node, entityReference, ctx);        }        @Override        protected void visit(XmlNode node, Notation notation, RuleContext ctx) {            visit("Notation", notation);            super.visit(node, notation, ctx);        }        @Override        protected void visit(XmlNode node, ProcessingInstruction processingInstruction, RuleContext ctx) {            visit("ProcessingInstruction", processingInstruction);            super.visit(node, processingInstruction, ctx);        }        @Override        protected void visit(XmlNode node, Text text, RuleContext ctx) {            visit("Text", text);            super.visit(node, text, ctx);        }    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.xml.rule;import static org.junit.Assert.assertEquals;import java.io.StringReader;import java.util.ArrayList;import java.util.List;import org.junit.Test;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.Parser;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.xml.XmlLanguageModule;import net.sourceforge.pmd.lang.xml.XmlParserOptions;import net.sourceforge.pmd.lang.xml.ast.XmlNode;public class AbstractXmlRuleTest {    @Test    public void testVisit() throws Exception {        String source = "<?xml version=\"1.0\"?><foo abc=\"abc\"><bar/></foo>";        XmlParserOptions parserOptions = new XmlParserOptions();        Parser parser = LanguageRegistry.getLanguage(XmlLanguageModule.NAME).getDefaultVersion()                .getLanguageVersionHandler().getParser(parserOptions);        XmlNode xmlNode = (XmlNode) parser.parse(null, new StringReader(source));        List<XmlNode> nodes = new ArrayList<>();        nodes.add(xmlNode);        MyRule rule = new MyRule();        rule.apply(nodes, null);        assertEquals(3, rule.visitedNodes.size());        assertEquals("document", rule.visitedNodes.get(0).toString());        assertEquals("foo", rule.visitedNodes.get(1).toString());        assertEquals("bar", rule.visitedNodes.get(2).toString());    }    private static class MyRule extends AbstractXmlRule {        final List<XmlNode> visitedNodes = new ArrayList<>();        MyRule() {        }        @Override        public void apply(List<? extends Node> nodes, RuleContext ctx) {            visitedNodes.clear();            super.apply(nodes, ctx);        }        @Override        protected void visit(XmlNode node, RuleContext ctx) {            visitedNodes.add(node);            super.visit(node, ctx);        }    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.xml;import static net.sourceforge.pmd.lang.ParserOptionsTest.verifyOptionsEqualsHashcode;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertTrue;import org.junit.Test;import net.sourceforge.pmd.lang.ParserOptions;import net.sourceforge.pmd.lang.rule.properties.BooleanProperty;import net.sourceforge.pmd.lang.xml.rule.AbstractXmlRule;public class XmlParserOptionsTest {    @Test    public void testDefaults() throws Exception {        XmlParserOptions options = new XmlParserOptions();        assertFalse(options.isCoalescing());        assertTrue(options.isExpandEntityReferences());        assertFalse(options.isIgnoringComments());        assertFalse(options.isIgnoringElementContentWhitespace());        assertTrue(options.isNamespaceAware());        assertFalse(options.isValidating());        assertFalse(options.isXincludeAware());        MyRule rule = new MyRule();        options = (XmlParserOptions) rule.getParserOptions();        assertFalse(options.isCoalescing());        assertTrue(options.isExpandEntityReferences());        assertFalse(options.isIgnoringComments());        assertFalse(options.isIgnoringElementContentWhitespace());        assertTrue(options.isNamespaceAware());        assertFalse(options.isValidating());        assertFalse(options.isXincludeAware());    }    @Test    public void testConstructor() throws Exception {        MyRule rule = new MyRule();        rule.setProperty(XmlParserOptions.COALESCING_DESCRIPTOR, true);        assertTrue(((XmlParserOptions) rule.getParserOptions()).isCoalescing());        rule.setProperty(XmlParserOptions.COALESCING_DESCRIPTOR, false);        assertFalse(((XmlParserOptions) rule.getParserOptions()).isCoalescing());        rule.setProperty(XmlParserOptions.EXPAND_ENTITY_REFERENCES_DESCRIPTOR, true);        assertTrue(((XmlParserOptions) rule.getParserOptions()).isExpandEntityReferences());        rule.setProperty(XmlParserOptions.EXPAND_ENTITY_REFERENCES_DESCRIPTOR, false);        assertFalse(((XmlParserOptions) rule.getParserOptions()).isExpandEntityReferences());        rule.setProperty(XmlParserOptions.IGNORING_COMMENTS_DESCRIPTOR, true);        assertTrue(((XmlParserOptions) rule.getParserOptions()).isIgnoringComments());        rule.setProperty(XmlParserOptions.IGNORING_COMMENTS_DESCRIPTOR, false);        assertFalse(((XmlParserOptions) rule.getParserOptions()).isIgnoringComments());        rule.setProperty(XmlParserOptions.IGNORING_ELEMENT_CONTENT_WHITESPACE_DESCRIPTOR, true);        assertTrue(((XmlParserOptions) rule.getParserOptions()).isIgnoringElementContentWhitespace());        rule.setProperty(XmlParserOptions.IGNORING_ELEMENT_CONTENT_WHITESPACE_DESCRIPTOR, false);        assertFalse(((XmlParserOptions) rule.getParserOptions()).isIgnoringElementContentWhitespace());        rule.setProperty(XmlParserOptions.NAMESPACE_AWARE_DESCRIPTOR, true);        assertTrue(((XmlParserOptions) rule.getParserOptions()).isNamespaceAware());        rule.setProperty(XmlParserOptions.NAMESPACE_AWARE_DESCRIPTOR, false);        assertFalse(((XmlParserOptions) rule.getParserOptions()).isNamespaceAware());        rule.setProperty(XmlParserOptions.VALIDATING_DESCRIPTOR, true);        assertTrue(((XmlParserOptions) rule.getParserOptions()).isValidating());        rule.setProperty(XmlParserOptions.VALIDATING_DESCRIPTOR, false);        assertFalse(((XmlParserOptions) rule.getParserOptions()).isValidating());        rule.setProperty(XmlParserOptions.XINCLUDE_AWARE_DESCRIPTOR, true);        assertTrue(((XmlParserOptions) rule.getParserOptions()).isXincludeAware());        rule.setProperty(XmlParserOptions.XINCLUDE_AWARE_DESCRIPTOR, false);        assertFalse(((XmlParserOptions) rule.getParserOptions()).isXincludeAware());    }    @Test    public void testSetters() {        XmlParserOptions options = new XmlParserOptions();        options.setSuppressMarker("foo");        assertEquals("foo", options.getSuppressMarker());        options.setSuppressMarker(null);        assertNull(options.getSuppressMarker());        options.setCoalescing(true);        assertTrue(options.isCoalescing());        options.setCoalescing(false);        assertFalse(options.isCoalescing());        options.setExpandEntityReferences(true);        assertTrue(options.isExpandEntityReferences());        options.setExpandEntityReferences(false);        assertFalse(options.isExpandEntityReferences());        options.setIgnoringComments(true);        assertTrue(options.isIgnoringComments());        options.setIgnoringComments(false);        assertFalse(options.isIgnoringComments());        options.setIgnoringElementContentWhitespace(true);        assertTrue(options.isIgnoringElementContentWhitespace());        options.setIgnoringElementContentWhitespace(false);        assertFalse(options.isIgnoringElementContentWhitespace());        options.setNamespaceAware(true);        assertTrue(options.isNamespaceAware());        options.setNamespaceAware(false);        assertFalse(options.isNamespaceAware());        options.setValidating(true);        assertTrue(options.isValidating());        options.setValidating(false);        assertFalse(options.isValidating());        options.setXincludeAware(true);        assertTrue(options.isXincludeAware());        options.setXincludeAware(false);        assertFalse(options.isXincludeAware());    }    @Test    public void testEqualsHashcode() throws Exception {        BooleanProperty[] properties = new BooleanProperty[] { XmlParserOptions.COALESCING_DESCRIPTOR,            XmlParserOptions.EXPAND_ENTITY_REFERENCES_DESCRIPTOR, XmlParserOptions.IGNORING_COMMENTS_DESCRIPTOR,            XmlParserOptions.IGNORING_ELEMENT_CONTENT_WHITESPACE_DESCRIPTOR,            XmlParserOptions.NAMESPACE_AWARE_DESCRIPTOR, XmlParserOptions.VALIDATING_DESCRIPTOR,            XmlParserOptions.XINCLUDE_AWARE_DESCRIPTOR, };        for (int i = 0; i < properties.length; i++) {            BooleanProperty property = properties[i];            MyRule rule = new MyRule();            rule.setProperty(property, true);            ParserOptions options1 = rule.getParserOptions();            rule.setProperty(property, false);            ParserOptions options2 = rule.getParserOptions();            rule.setProperty(property, true);            ParserOptions options3 = rule.getParserOptions();            rule.setProperty(property, false);            ParserOptions options4 = rule.getParserOptions();            verifyOptionsEqualsHashcode(options1, options2, options3, options4);        }        XmlParserOptions options1 = new XmlParserOptions();        options1.setSuppressMarker("foo");        XmlParserOptions options2 = new XmlParserOptions();        options2.setSuppressMarker("bar");        XmlParserOptions options3 = new XmlParserOptions();        options3.setSuppressMarker("foo");        XmlParserOptions options4 = new XmlParserOptions();        options4.setSuppressMarker("bar");        verifyOptionsEqualsHashcode(options1, options2, options3, options4);    }    private static final class MyRule extends AbstractXmlRule {    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(XmlParserOptionsTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.xml;import static org.junit.Assert.assertNotNull;import java.io.ByteArrayOutputStream;import java.io.PrintStream;import java.io.StringReader;import java.io.UnsupportedEncodingException;import java.util.Iterator;import java.util.Locale;import org.apache.commons.io.IOUtils;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersionHandler;import net.sourceforge.pmd.lang.Parser;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.ast.xpath.Attribute;import net.sourceforge.pmd.lang.xml.ast.XmlNode;import net.sourceforge.pmd.lang.xml.ast.XmlParser;import net.sourceforge.pmd.util.StringUtil;/** * Unit test for the {@link XmlParser}. */public class XmlParserTest {    private static final String XML_TEST = "<?xml version=\"1.0\"?>\n" + "<!DOCTYPE rootElement\n" + "[\n"            + "<!ELEMENT rootElement (child1,child2)>\n" + "<!ELEMENT child1 (#PCDATA)>\n"            + "<!ATTLIST child1 test CDATA #REQUIRED>\n" + "<!ELEMENT child2 (#PCDATA)>\n" + "\n"            + "<!ENTITY pmd \"Copyright: PMD\">\n" + "]\n" + ">\n" + "<rootElement>\n"            + "    <!-- that's a comment -->\n" + "    <child1 test=\"1\">entity: &pmd;\n" + "    </child1>\n"            + "    <child2>\n" + "      <![CDATA[ cdata section ]]>\n" + "    </child2>\n" + "</rootElement>";    private static final String XML_NAMESPACE_TEST = "<?xml version=\"1.0\"?>\n"            + "<pmd:rootElement xmlns:pmd=\"http://pmd.sf.net\">\n" + "    <!-- that's a comment -->\n"            + "    <pmd:child1 test=\"1\">entity: &amp;\n" + "    </pmd:child1>\n" + "    <pmd:child2>\n"            + "      <![CDATA[ cdata section ]]>\n" + "    </pmd:child2>\n" + "</pmd:rootElement>";    private static final String XML_INVALID_WITH_DTD = "<?xml version=\"1.0\"?>\n" + "<!DOCTYPE rootElement\n" + "[\n"            + "<!ELEMENT rootElement (child)>\n" + "<!ELEMENT child (#PCDATA)>\n" + "]\n" + ">\n" + "<rootElement>\n"            + "  <invalidChild></invalidChild>\n" + "</rootElement>";    /**     * See bug #1054: XML Rules ever report a line -1 and not the line/column     * where the error occurs     *      * @throws Exception     *             any error     */    @Test    public void testLineNumbers() throws Exception {        LanguageVersionHandler xmlVersionHandler = LanguageRegistry.getLanguage(XmlLanguageModule.NAME)                .getDefaultVersion().getLanguageVersionHandler();        Parser parser = xmlVersionHandler.getParser(xmlVersionHandler.getDefaultParserOptions());        Node document = parser.parse(null, new StringReader(XML_TEST));        assertNode(document, "document", 2);        assertLineNumbers(document, 1, 1, 19, 14);        Node dtdElement = document.jjtGetChild(0);        assertNode(dtdElement, "rootElement", 0);        assertLineNumbers(dtdElement, 2, 1, 11, 1);        Node rootElement = document.jjtGetChild(1);        assertNode(rootElement, "rootElement", 7);        assertLineNumbers(rootElement, 12, 1, 19, 14);        assertTextNode(rootElement.jjtGetChild(0), "\\n    ");        assertLineNumbers(rootElement.jjtGetChild(0), 12, 14, 13, 4);        assertNode(rootElement.jjtGetChild(1), "comment", 0);        assertLineNumbers(rootElement.jjtGetChild(1), 13, 5, 13, 29);        assertTextNode(rootElement.jjtGetChild(2), "\\n    ");        assertLineNumbers(rootElement.jjtGetChild(2), 13, 30, 14, 4);        Node child1 = rootElement.jjtGetChild(3);        assertNode(child1, "child1", 1, "test", "1");        assertLineNumbers(child1, 14, 5, 15, 13);        assertTextNode(child1.jjtGetChild(0), "entity: Copyright: PMD\\n    ");        assertLineNumbers(child1.jjtGetChild(0), 14, 22, 15, 4);        assertTextNode(rootElement.jjtGetChild(4), "\\n    ");        assertLineNumbers(rootElement.jjtGetChild(4), 15, 14, 16, 4);        Node child2 = rootElement.jjtGetChild(5);        assertNode(child2, "child2", 3);        assertLineNumbers(child2, 16, 5, 18, 13);        assertTextNode(child2.jjtGetChild(0), "\\n      ");        assertLineNumbers(child2.jjtGetChild(0), 16, 13, 17, 6);        assertTextNode(child2.jjtGetChild(1), " cdata section ", "cdata-section");        assertLineNumbers(child2.jjtGetChild(1), 17, 7, 17, 33);        assertTextNode(child2.jjtGetChild(2), "\\n    ");        assertLineNumbers(child2.jjtGetChild(2), 17, 34, 18, 4);        assertTextNode(rootElement.jjtGetChild(6), "\\n");        assertLineNumbers(rootElement.jjtGetChild(6), 18, 14, 18, 14);    }    /**     * Verifies the default parsing behavior of the XML parser.     */    @Test    public void testDefaultParsing() {        LanguageVersionHandler xmlVersionHandler = LanguageRegistry.getLanguage(XmlLanguageModule.NAME)                .getDefaultVersion().getLanguageVersionHandler();        Parser parser = xmlVersionHandler.getParser(xmlVersionHandler.getDefaultParserOptions());        Node document = parser.parse(null, new StringReader(XML_TEST));        assertNode(document, "document", 2);        Node dtdElement = document.jjtGetChild(0);        assertNode(dtdElement, "rootElement", 0);        Node rootElement = document.jjtGetChild(1);        assertNode(rootElement, "rootElement", 7);        assertTextNode(rootElement.jjtGetChild(0), "\\n    ");        assertNode(rootElement.jjtGetChild(1), "comment", 0);        assertTextNode(rootElement.jjtGetChild(2), "\\n    ");        Node child1 = rootElement.jjtGetChild(3);        assertNode(child1, "child1", 1, "test", "1");        assertTextNode(child1.jjtGetChild(0), "entity: Copyright: PMD\\n    ");        assertTextNode(rootElement.jjtGetChild(4), "\\n    ");        Node child2 = rootElement.jjtGetChild(5);        assertNode(child2, "child2", 3);        assertTextNode(child2.jjtGetChild(0), "\\n      ");        assertTextNode(child2.jjtGetChild(1), " cdata section ", "cdata-section");        assertTextNode(child2.jjtGetChild(2), "\\n    ");        assertTextNode(rootElement.jjtGetChild(6), "\\n");    }    /**     * Verifies the parsing behavior of the XML parser with coalescing enabled.     */    @Test    public void testParsingCoalescingEnabled() {        LanguageVersionHandler xmlVersionHandler = LanguageRegistry.getLanguage(XmlLanguageModule.NAME)                .getDefaultVersion().getLanguageVersionHandler();        XmlParserOptions parserOptions = new XmlParserOptions();        parserOptions.setCoalescing(true);        Parser parser = xmlVersionHandler.getParser(parserOptions);        Node document = parser.parse(null, new StringReader(XML_TEST));        assertNode(document, "document", 2);        Node dtdElement = document.jjtGetChild(0);        assertNode(dtdElement, "rootElement", 0);        Node rootElement = document.jjtGetChild(1);        assertNode(rootElement, "rootElement", 7);        assertTextNode(rootElement.jjtGetChild(0), "\\n    ");        assertNode(rootElement.jjtGetChild(1), "comment", 0);        assertTextNode(rootElement.jjtGetChild(2), "\\n    ");        Node child1 = rootElement.jjtGetChild(3);        assertNode(child1, "child1", 1, "test", "1");        assertTextNode(child1.jjtGetChild(0), "entity: Copyright: PMD\\n    ");        assertTextNode(rootElement.jjtGetChild(4), "\\n    ");        Node child2 = rootElement.jjtGetChild(5);        assertNode(child2, "child2", 1);        assertTextNode(child2.jjtGetChild(0), "\\n       cdata section \\n    ");        assertTextNode(rootElement.jjtGetChild(6), "\\n");    }    /**     * Verifies the parsing behavior of the XML parser if entities are not     * expanded.     */    @Test    public void testParsingDoNotExpandEntities() {        LanguageVersionHandler xmlVersionHandler = LanguageRegistry.getLanguage(XmlLanguageModule.NAME)                .getDefaultVersion().getLanguageVersionHandler();        XmlParserOptions parserOptions = new XmlParserOptions();        parserOptions.setExpandEntityReferences(false);        Parser parser = xmlVersionHandler.getParser(parserOptions);        Node document = parser.parse(null, new StringReader(XML_TEST));        assertNode(document, "document", 2);        Node dtdElement = document.jjtGetChild(0);        assertNode(dtdElement, "rootElement", 0);        Node rootElement = document.jjtGetChild(1);        assertNode(rootElement, "rootElement", 7);        assertTextNode(rootElement.jjtGetChild(0), "\\n    ");        assertNode(rootElement.jjtGetChild(1), "comment", 0);        assertTextNode(rootElement.jjtGetChild(2), "\\n    ");        Node child1 = rootElement.jjtGetChild(3);        assertNode(child1, "child1", 3, "test", "1");        assertTextNode(child1.jjtGetChild(0), "entity: ");        assertNode(child1.jjtGetChild(1), "pmd", 0);        assertTextNode(child1.jjtGetChild(2), "Copyright: PMD\\n    ");        assertTextNode(rootElement.jjtGetChild(4), "\\n    ");        Node child2 = rootElement.jjtGetChild(5);        assertNode(child2, "child2", 3);        assertTextNode(child2.jjtGetChild(0), "\\n      ");        assertTextNode(child2.jjtGetChild(1), " cdata section ", "cdata-section");        assertTextNode(child2.jjtGetChild(2), "\\n    ");        assertTextNode(rootElement.jjtGetChild(6), "\\n");    }    /**     * Verifies the parsing behavior of the XML parser if ignoring comments.     */    @Test    public void testParsingIgnoreComments() {        LanguageVersionHandler xmlVersionHandler = LanguageRegistry.getLanguage(XmlLanguageModule.NAME)                .getDefaultVersion().getLanguageVersionHandler();        XmlParserOptions parserOptions = new XmlParserOptions();        parserOptions.setIgnoringComments(true);        Parser parser = xmlVersionHandler.getParser(parserOptions);        Node document = parser.parse(null, new StringReader(XML_TEST));        assertNode(document, "document", 2);        Node dtdElement = document.jjtGetChild(0);        assertNode(dtdElement, "rootElement", 0);        Node rootElement = document.jjtGetChild(1);        assertNode(rootElement, "rootElement", 5);        assertTextNode(rootElement.jjtGetChild(0), "\\n    \\n    ");        Node child1 = rootElement.jjtGetChild(1);        assertNode(child1, "child1", 1, "test", "1");        assertTextNode(child1.jjtGetChild(0), "entity: Copyright: PMD\\n    ");        assertTextNode(rootElement.jjtGetChild(2), "\\n    ");        Node child2 = rootElement.jjtGetChild(3);        assertNode(child2, "child2", 3);        assertTextNode(child2.jjtGetChild(0), "\\n      ");        assertTextNode(child2.jjtGetChild(1), " cdata section ", "cdata-section");        assertTextNode(child2.jjtGetChild(2), "\\n    ");        assertTextNode(rootElement.jjtGetChild(4), "\\n");    }    /**     * Verifies the parsing behavior of the XML parser if ignoring whitespaces     * in elements.     */    @Test    public void testParsingIgnoreElementContentWhitespace() {        LanguageVersionHandler xmlVersionHandler = LanguageRegistry.getLanguage(XmlLanguageModule.NAME)                .getDefaultVersion().getLanguageVersionHandler();        XmlParserOptions parserOptions = new XmlParserOptions();        parserOptions.setIgnoringElementContentWhitespace(true);        Parser parser = xmlVersionHandler.getParser(parserOptions);        Node document = parser.parse(null, new StringReader(XML_TEST));        assertNode(document, "document", 2);        Node dtdElement = document.jjtGetChild(0);        assertNode(dtdElement, "rootElement", 0);        Node rootElement = document.jjtGetChild(1);        assertNode(rootElement, "rootElement", 3);        assertNode(rootElement.jjtGetChild(0), "comment", 0);        Node child1 = rootElement.jjtGetChild(1);        assertNode(child1, "child1", 1, "test", "1");        assertTextNode(child1.jjtGetChild(0), "entity: Copyright: PMD\\n    ");        Node child2 = rootElement.jjtGetChild(2);        assertNode(child2, "child2", 3);        assertTextNode(child2.jjtGetChild(0), "\\n      ");        assertTextNode(child2.jjtGetChild(1), " cdata section ", "cdata-section");        assertTextNode(child2.jjtGetChild(2), "\\n    ");    }    /**     * Verifies the default parsing behavior of the XML parser with namespaces.     */    @Test    public void testDefaultParsingNamespaces() {        LanguageVersionHandler xmlVersionHandler = LanguageRegistry.getLanguage(XmlLanguageModule.NAME)                .getDefaultVersion().getLanguageVersionHandler();        Parser parser = xmlVersionHandler.getParser(xmlVersionHandler.getDefaultParserOptions());        Node document = parser.parse(null, new StringReader(XML_NAMESPACE_TEST));        assertNode(document, "document", 1);        Node rootElement = document.jjtGetChild(0);        assertNode(rootElement, "pmd:rootElement", 7, "xmlns:pmd", "http://pmd.sf.net");        Assert.assertEquals("http://pmd.sf.net", ((XmlNode) rootElement).getNode().getNamespaceURI());        Assert.assertEquals("pmd", ((XmlNode) rootElement).getNode().getPrefix());        Assert.assertEquals("rootElement", ((XmlNode) rootElement).getNode().getLocalName());        Assert.assertEquals("pmd:rootElement", ((XmlNode) rootElement).getNode().getNodeName());        assertTextNode(rootElement.jjtGetChild(0), "\\n    ");        assertNode(rootElement.jjtGetChild(1), "comment", 0);        assertTextNode(rootElement.jjtGetChild(2), "\\n    ");        Node child1 = rootElement.jjtGetChild(3);        assertNode(child1, "pmd:child1", 1, "test", "1");        assertTextNode(child1.jjtGetChild(0), "entity: &\\n    ");        assertTextNode(rootElement.jjtGetChild(4), "\\n    ");        Node child2 = rootElement.jjtGetChild(5);        assertNode(child2, "pmd:child2", 3);        assertTextNode(child2.jjtGetChild(0), "\\n      ");        assertTextNode(child2.jjtGetChild(1), " cdata section ", "cdata-section");        assertTextNode(child2.jjtGetChild(2), "\\n    ");        assertTextNode(rootElement.jjtGetChild(6), "\\n");    }    /**     * Verifies the default parsing behavior of the XML parser with namespaces     * but not namespace aware.     */    @Test    public void testParsingNotNamespaceAware() {        LanguageVersionHandler xmlVersionHandler = LanguageRegistry.getLanguage(XmlLanguageModule.NAME)                .getDefaultVersion().getLanguageVersionHandler();        XmlParserOptions parserOptions = new XmlParserOptions();        parserOptions.setNamespaceAware(false);        Parser parser = xmlVersionHandler.getParser(parserOptions);        Node document = parser.parse(null, new StringReader(XML_NAMESPACE_TEST));        assertNode(document, "document", 1);        Node rootElement = document.jjtGetChild(0);        assertNode(rootElement, "pmd:rootElement", 7, "xmlns:pmd", "http://pmd.sf.net");        Assert.assertNull(((XmlNode) rootElement).getNode().getNamespaceURI());        Assert.assertNull(((XmlNode) rootElement).getNode().getPrefix());        Assert.assertNull(((XmlNode) rootElement).getNode().getLocalName());        Assert.assertEquals("pmd:rootElement", ((XmlNode) rootElement).getNode().getNodeName());        assertTextNode(rootElement.jjtGetChild(0), "\\n    ");        assertNode(rootElement.jjtGetChild(1), "comment", 0);        assertTextNode(rootElement.jjtGetChild(2), "\\n    ");        Node child1 = rootElement.jjtGetChild(3);        assertNode(child1, "pmd:child1", 1, "test", "1");        assertTextNode(child1.jjtGetChild(0), "entity: &\\n    ");        assertTextNode(rootElement.jjtGetChild(4), "\\n    ");        Node child2 = rootElement.jjtGetChild(5);        assertNode(child2, "pmd:child2", 3);        assertTextNode(child2.jjtGetChild(0), "\\n      ");        assertTextNode(child2.jjtGetChild(1), " cdata section ", "cdata-section");        assertTextNode(child2.jjtGetChild(2), "\\n    ");        assertTextNode(rootElement.jjtGetChild(6), "\\n");    }    /**     * Verifies the parsing behavior of the XML parser with validation on.     *      * @throws UnsupportedEncodingException     *             error     */    @Test    public void testParsingWithValidation() throws UnsupportedEncodingException {        LanguageVersionHandler xmlVersionHandler = LanguageRegistry.getLanguage(XmlLanguageModule.NAME)                .getDefaultVersion().getLanguageVersionHandler();        XmlParserOptions parserOptions = new XmlParserOptions();        parserOptions.setValidating(true);        Parser parser = xmlVersionHandler.getParser(parserOptions);        PrintStream oldErr = System.err;        Locale oldLocale = Locale.getDefault();        try {            ByteArrayOutputStream bos = new ByteArrayOutputStream();            System.setErr(new PrintStream(bos));            Locale.setDefault(Locale.ENGLISH);            Node document = parser.parse(null, new StringReader(XML_INVALID_WITH_DTD));            Assert.assertNotNull(document);            String output = bos.toString("UTF-8");            Assert.assertTrue(output.contains("Element type \"invalidChild\" must be declared."));            Assert.assertTrue(output.contains("The content of element type \"rootElement\" must match \"(child)\"."));            Assert.assertEquals(2, document.jjtGetNumChildren());            Assert.assertEquals("invalidChild", String.valueOf(document.jjtGetChild(1).jjtGetChild(1)));        } finally {            System.setErr(oldErr);            Locale.setDefault(oldLocale);        }    }    @Test    public void testWithProcessingInstructions() {        String xml = "<?xml version=\"1.0\"?><?mypi?><!DOCTYPE testDoc [<!ENTITY myentity \"e\">]><!--Comment--><foo abc=\"abc\"><bar>TEXT</bar><![CDATA[cdata!]]>&gt;&myentity;&lt;</foo>";        LanguageVersionHandler xmlVersionHandler = LanguageRegistry.getLanguage(XmlLanguageModule.NAME)                .getDefaultVersion().getLanguageVersionHandler();        XmlParserOptions options = (XmlParserOptions) xmlVersionHandler.getDefaultParserOptions();        options.setExpandEntityReferences(false);        Parser parser = xmlVersionHandler.getParser(options);        Node document = parser.parse(null, new StringReader(xml));        Assert.assertNotNull(document);        assertNode(document.jjtGetChild(0), "mypi", 0);        assertLineNumbers(document.jjtGetChild(0), 1, 22, 1, 29);    }    private Node parseXml(String xml) {        LanguageVersionHandler xmlVersionHandler = LanguageRegistry.getLanguage(XmlLanguageModule.NAME).getDefaultVersion().getLanguageVersionHandler();        XmlParserOptions options = (XmlParserOptions) xmlVersionHandler.getDefaultParserOptions();        Parser parser = xmlVersionHandler.getParser(options);        Node document = parser.parse(null, new StringReader(xml));        return document;    }    @Test    public void testBug1518() throws Exception {        String xml = IOUtils.toString(XmlParserTest.class.getResourceAsStream("parsertests/bug1518.xml"));        Node document = parseXml(xml);        assertNotNull(document);    }    /**     * Asserts a single node inclusive attributes.     *      * @param node     *            the node     * @param toString     *            the to String representation to expect     * @param childs     *            number of childs     * @param atts     *            attributes - each object pair forms one attribute: first name,     *            then value.     */    private void assertNode(Node node, String toString, int childs, Object... atts) {        Assert.assertEquals(toString, String.valueOf(node));        Assert.assertEquals(childs, node.jjtGetNumChildren());        Iterator<Attribute> attributeIterator = ((XmlNode) node).getAttributeIterator();        if (atts != null) {            for (int i = 0; i < atts.length; i += 2) {                Assert.assertTrue(attributeIterator.hasNext());                String name = String.valueOf(atts[i]);                Object value = atts[i + 1];                Attribute attribute = attributeIterator.next();                Assert.assertEquals(name, attribute.getName());                Assert.assertEquals(value, attribute.getValue());            }        }        Assert.assertFalse(attributeIterator.hasNext());    }    /**     * Assert a single text node.     *      * @param node     *            the node to check     * @param text     *            the text to expect     */    private void assertTextNode(Node node, String text) {        assertTextNode(node, text, "text");    }    /**     * Assert a single text node.     *     * @param node     *            the node to check     * @param text     *            the text to expect     * @param toString     *            the to string representation     */    private void assertTextNode(Node node, String text, String toString) {        Assert.assertEquals(toString, String.valueOf(node));        Assert.assertEquals(0, node.jjtGetNumChildren());        Assert.assertEquals(text, StringUtil.escapeWhitespace(node.getImage()));        Iterator<Attribute> attributeIterator = ((XmlNode) node).getAttributeIterator();        Assert.assertTrue(attributeIterator.hasNext());        Attribute attribute = attributeIterator.next();        Assert.assertEquals("Image", attribute.getName());        Assert.assertEquals(text, StringUtil.escapeWhitespace(attribute.getValue()));        Assert.assertFalse(attributeIterator.hasNext());    }    /**     * Assert the line numbers of a node.     *     * @param node     *            the node     * @param beginLine     *            the begin line     * @param beginColumn     *            the begin column     * @param endLine     *            the end line     * @param endColumn     *            the end column     */    private void assertLineNumbers(Node node, int beginLine, int beginColumn, int endLine, int endColumn) {        Assert.assertEquals("begin line wrong", beginLine, node.getBeginLine());        Assert.assertEquals("begin column wrong", beginColumn, node.getBeginColumn());        Assert.assertEquals("end line wrong", endLine, node.getEndLine());        Assert.assertEquals("end column wrong", endColumn, node.getEndColumn());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.pom.rule.basic;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class BasicRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "pom-basic";    @Override    public void setUp() {        addRule(RULESET, "ProjectVersionAsDependencyVersion");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.wsdl.rule;import static org.junit.Assert.assertEquals;import java.io.StringReader;import java.util.ArrayList;import java.util.List;import org.junit.Test;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.Parser;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.wsdl.WsdlLanguageModule;import net.sourceforge.pmd.lang.xml.XmlParserOptions;import net.sourceforge.pmd.lang.xml.ast.XmlNode;public class AbstractWsdlRuleTest {    @Test    public void testVisit() throws Exception {        String source = "<?xml version=\"1.0\"?><foo abc=\"abc\"><bar/></foo>";        XmlParserOptions parserOptions = new XmlParserOptions();        Parser parser = LanguageRegistry.getLanguage(WsdlLanguageModule.NAME).getDefaultVersion()                .getLanguageVersionHandler().getParser(parserOptions);        XmlNode xmlNode = (XmlNode) parser.parse(null, new StringReader(source));        List<XmlNode> nodes = new ArrayList<>();        nodes.add(xmlNode);        MyRule rule = new MyRule();        rule.apply(nodes, null);        assertEquals(3, rule.visitedNodes.size());        assertEquals("document", rule.visitedNodes.get(0).toString());        assertEquals("foo", rule.visitedNodes.get(1).toString());        assertEquals("bar", rule.visitedNodes.get(2).toString());    }    private static class MyRule extends AbstractWsdlRule {        final List<XmlNode> visitedNodes = new ArrayList<>();        MyRule() {        }        @Override        public void apply(List<? extends Node> nodes, RuleContext ctx) {            visitedNodes.clear();            super.apply(nodes, ctx);        }        @Override        protected void visit(XmlNode node, RuleContext ctx) {            visitedNodes.add(node);            super.visit(node, ctx);        }    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.xsl.rule.xpath;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class XPathRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "xsl-xpath";    @Override    public void setUp() {        addRule(RULESET, "UseConcatOnce");        addRule(RULESET, "AvoidAxisNavigation");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ant;import org.junit.Test;public class PMDTaskTest extends AbstractAntTestHelper {    public PMDTaskTest() {        super.antTestScriptFilename = "pmdtasktest.xml";    }    @Test    public void testXML() {        executeTarget("testXML");        assertOutputContaining("Potentialy mistyped CDATA section with extra [ at beginning or ] at the end.");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.pom.PomLanguageModule;import net.sourceforge.pmd.lang.wsdl.WsdlLanguageModule;import net.sourceforge.pmd.lang.xml.XmlLanguageModule;import net.sourceforge.pmd.lang.xsl.XslLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] {            { XmlLanguageModule.NAME, XmlLanguageModule.TERSE_NAME, "",                LanguageRegistry.getLanguage(XmlLanguageModule.NAME).getDefaultVersion(), },            { XslLanguageModule.NAME, XslLanguageModule.TERSE_NAME, "",                LanguageRegistry.getLanguage(XslLanguageModule.NAME).getDefaultVersion(), },            { WsdlLanguageModule.NAME, WsdlLanguageModule.TERSE_NAME, "",                LanguageRegistry.getLanguage(WsdlLanguageModule.NAME).getDefaultVersion(), },            { PomLanguageModule.NAME, PomLanguageModule.TERSE_NAME, "",                LanguageRegistry.getLanguage(PomLanguageModule.NAME).getDefaultVersion(), }, });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;/** * Test xml's and xslt's rulesets */public class RuleSetFactoryTest extends AbstractRuleSetFactoryTest {    // no additional tests yet}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNotEquals;import java.util.List;import org.junit.Before;import org.junit.Test;public class CsTokenizerTest {    private CsTokenizer tokenizer;    private Tokens tokens;    @Before    public void init() {        tokenizer = new CsTokenizer();        tokens = new Tokens();        TokenEntry.clearImages();    }    @Test    public void testSimpleClass() {        tokenizer.tokenize(toSourceCode("class Foo {}"), tokens);        assertEquals(5, tokens.size());    }    @Test    public void testSimpleClassDuplicatedTokens() {        tokenizer.tokenize(toSourceCode("class Foo { class Foo { } }"), tokens);        assertEquals(9, tokens.size());        List<TokenEntry> tokenList = tokens.getTokens();        assertEquals(tokenList.get(0).getIdentifier(), tokenList.get(3).getIdentifier());        assertEquals(tokenList.get(1).getIdentifier(), tokenList.get(4).getIdentifier());        assertEquals(tokenList.get(2).getIdentifier(), tokenList.get(5).getIdentifier());        assertEquals(tokenList.get(6).getIdentifier(), tokenList.get(7).getIdentifier());    }    @Test    public void testSimpleClassMethodMultipleLines() {        tokenizer.tokenize(toSourceCode("class Foo {\n" + "  public String foo(int a) {\n" + "    int i = a;\n"                + "    return \"x\" + a;\n" + "  }\n" + "}"), tokens);        assertEquals(22, tokens.size());        List<TokenEntry> tokenList = tokens.getTokens();        assertEquals(1, tokenList.get(0).getBeginLine());        assertEquals(2, tokenList.get(4).getBeginLine());        assertEquals(3, tokenList.get(11).getBeginLine());    }    @Test    public void testStrings() {        tokenizer.tokenize(toSourceCode("String s =\"aaa \\\"b\\n\";"), tokens);        assertEquals(5, tokens.size());    }    @Test    public void testOpenString() {        tokenizer.tokenize(toSourceCode("String s =\"aaa \\\"b\\"), tokens);        assertEquals(5, tokens.size());    }    @Test    public void testCommentsIgnored1() {        tokenizer.tokenize(toSourceCode("class Foo { /* class * ** X */ }"), tokens);        assertEquals(5, tokens.size());    }    @Test    public void testCommentsIgnored2() {        tokenizer.tokenize(toSourceCode("class Foo { // class X /* aaa */ \n }"), tokens);        assertEquals(5, tokens.size());    }    @Test    public void testCommentsIgnored3() {        tokenizer.tokenize(toSourceCode("class Foo { /// class X /* aaa */ \n }"), tokens);        assertEquals(5, tokens.size());    }    @Test    public void testMoreTokens() {        tokenizer                .tokenize(                        toSourceCode("class Foo {\n" + "  void bar() {\n" + "    int a = 1 >> 2; \n" + "    a += 1; \n"                                + "    a++; \n" + "    a /= 3e2; \n" + "    float f = -3.1; \n" + "    f *= 2; \n"                                + "    bool b = ! (f == 2.0 || f >= 1.0 && f <= 2.0) \n" + "  }\n" + "}"),                        tokens);        assertEquals(50, tokens.size());    }    @Test    public void testLineNumberAfterMultilineComment() {        tokenizer                .tokenize(                        toSourceCode("/* This is a multiline comment \n" + " * \n" + " * Lorem ipsum dolor sit amet, \n"                                + " * consectetur adipiscing elit \n" + " */\n" + "\n" + "class Foo {\n" + "\n" + "}"),                        tokens);        assertEquals(5, tokens.size());        assertEquals(7, tokens.getTokens().get(0).getBeginLine());    }    @Test    public void testLineNumberAfterMultilineString() {        tokenizer.tokenize(toSourceCode(                "class Foo {\n" + "  void bar() {\n" + "    String query = \n" + "      @\"SELECT foo, bar\n"                        + "         FROM table \n" + "         WHERE id = 42\"; \n" + "  }\n" + "}"),                tokens);        assertEquals(16, tokens.size());        assertEquals(8, tokens.getTokens().get(14).getBeginLine());    }    @Test    public void testIgnoreUsingDirectives() {        tokenizer.setIgnoreUsings(true);        tokenizer.tokenize(toSourceCode("using System.Text;\n"), tokens);        assertNotEquals("using", tokens.getTokens().get(0).toString());        assertEquals(2, tokens.size());    }    @Test    public void testUsingStatementsAreNotIgnored() {        tokenizer.setIgnoreUsings(true);        tokenizer.tokenize(toSourceCode(                "using (Font font1 = new Font(\"Arial\", 10.0f)) {\n" + "  byte charset = font1.GdiCharSet;\n" + "}\n"),                tokens);        assertEquals("using", tokens.getTokens().get(0).toString());    }    private SourceCode toSourceCode(String source) {        return new SourceCode(new SourceCode.StringCodeLoader(source));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.testframework;import java.util.ArrayList;import java.util.List;import java.util.Properties;import org.junit.Ignore;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.lang.LanguageVersion;/** * Stores the information required to run a complete test. */@Ignore("this is not a unit test")public class TestDescriptor {    private Rule rule;    private Properties properties;    private String description;    private int numberOfProblemsExpected;    private List<String> expectedMessages = new ArrayList<>();    private List<Integer> expectedLineNumbers = new ArrayList<>();    private String code;    private LanguageVersion languageVersion;    // default, avoids unintentional mixing of state between test cases    private boolean reinitializeRule = true;    private boolean isRegressionTest = true;    private boolean useAuxClasspath = true;    private int numberInDocument = -1;    // Empty descriptor added to please mvn surefire plugin    public TestDescriptor() {    }    public TestDescriptor(String code, String description, int numberOfProblemsExpected, Rule rule) {        this(code, description, numberOfProblemsExpected, rule, rule.getLanguage().getDefaultVersion());    }    public TestDescriptor(String code, String description, int numberOfProblemsExpected, Rule rule,            LanguageVersion languageVersion) {        this.rule = rule;        this.code = code;        this.description = description;        this.numberOfProblemsExpected = numberOfProblemsExpected;        this.languageVersion = languageVersion;    }    public int getNumberInDocument() {        return numberInDocument;    }    public void setNumberInDocument(int numberInDocument) {        this.numberInDocument = numberInDocument;    }    public void setExpectedMessages(List<String> messages) {        expectedMessages.clear();        expectedMessages.addAll(messages);    }    public List<String> getExpectedMessages() {        return expectedMessages;    }    public void setExpectedLineNumbers(List<Integer> expectedLineNumbers) {        this.expectedLineNumbers.clear();        this.expectedLineNumbers.addAll(expectedLineNumbers);    }    public List<Integer> getExpectedLineNumbers() {        return expectedLineNumbers;    }    public void setProperties(Properties properties) {        this.properties = properties;    }    public Properties getProperties() {        return properties;    }    public String getCode() {        return code;    }    public LanguageVersion getLanguageVersion() {        return languageVersion;    }    public String getDescription() {        return description;    }    public int getNumberOfProblemsExpected() {        return numberOfProblemsExpected;    }    public Rule getRule() {        return rule;    }    public boolean getReinitializeRule() {        return reinitializeRule;    }    public void setReinitializeRule(boolean reinitializeRule) {        this.reinitializeRule = reinitializeRule;    }    /**     * Checks whether we are testing for regression problems only. Return value     * is based on the system property "pmd.regress".     *     * @return <code>false</code> if system property "pmd.regress" is set to     *         <code>false</code>, <code>true</code> otherwise     */    public static boolean inRegressionTestMode() {        boolean inRegressionMode = true; // default        try {            // get the "pmd.regress" System property            String property = System.getProperty("pmd.regress");            if (property != null) {                inRegressionMode = Boolean.parseBoolean(property);            }        } catch (IllegalArgumentException e) {        }        return inRegressionMode;    }    public boolean isRegressionTest() {        return isRegressionTest;    }    public void setRegressionTest(boolean isRegressionTest) {        this.isRegressionTest = isRegressionTest;    }    public void setUseAuxClasspath(boolean useAuxClasspath) {        this.useAuxClasspath = useAuxClasspath;    }    public boolean isUseAuxClasspath() {        return useAuxClasspath;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.testframework;import static org.junit.Assert.assertEquals;import java.io.IOException;import java.util.List;import net.sourceforge.pmd.cpd.SourceCode;import net.sourceforge.pmd.cpd.TokenEntry;import net.sourceforge.pmd.cpd.Tokenizer;import net.sourceforge.pmd.cpd.Tokens;/** * @author Romain PELISSE, belaran@gmail.com * */public abstract class AbstractTokenizerTest {    protected int expectedTokenCount;    protected Tokenizer tokenizer;    protected SourceCode sourceCode;    public abstract void buildTokenizer() throws IOException;    public abstract String getSampleCode() throws IOException;    protected void tokenizeTest() throws IOException {        Tokens tokens = new Tokens();        tokenizer.tokenize(sourceCode, tokens);        List<TokenEntry> entries = tokens.getTokens();        assertEquals(expectedTokenCount, entries.size());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang;import org.junit.Assert;import org.junit.Test;/** * Unit tests for {@link ParserOptions}. */public class ParserOptionsTest {    /**     * SuppressMarker should be initially null and changeable.     */    @Test    public void testSuppressMarker() {        ParserOptions parserOptions = new ParserOptions();        Assert.assertNull(parserOptions.getSuppressMarker());        parserOptions.setSuppressMarker("foo");        Assert.assertEquals("foo", parserOptions.getSuppressMarker());    }    /**     * Verify that the equals and hashCode methods work as expected.     */    @Test    public void testEqualsHashcode() {        ParserOptions options1 = new ParserOptions();        options1.setSuppressMarker("foo");        ParserOptions options2 = new ParserOptions();        options2.setSuppressMarker("bar");        ParserOptions options3 = new ParserOptions();        options3.setSuppressMarker("foo");        ParserOptions options4 = new ParserOptions();        options4.setSuppressMarker("bar");        verifyOptionsEqualsHashcode(options1, options2, options3, options4);    }    /**     * Verify equals and hashCode for 4 {@link ParserOptions} instances. The     * given options should be as follows: 1 and 3 are equals, as are 2 and 4.     *     * @param options1     *            first option instance - equals third     * @param options2     *            second option instance - equals fourth     * @param options3     *            third option instance - equals first     * @param options4     *            fourth option instance - equals second     */    public static void verifyOptionsEqualsHashcode(ParserOptions options1, ParserOptions options2,            ParserOptions options3, ParserOptions options4) {        // Objects should be different        Assert.assertNotSame(options1, options2);        Assert.assertNotSame(options1, options2);        Assert.assertNotSame(options1, options3);        Assert.assertNotSame(options2, options3);        Assert.assertNotSame(options2, options4);        Assert.assertNotSame(options3, options4);        // Check all 16 equality combinations        Assert.assertEquals(options1, options1);        Assert.assertFalse(options1.equals(options2));        Assert.assertEquals(options1, options3);        Assert.assertFalse(options1.equals(options4));        Assert.assertFalse(options2.equals(options1));        Assert.assertEquals(options2, options2);        Assert.assertFalse(options2.equals(options3));        Assert.assertEquals(options2, options4);        Assert.assertEquals(options3, options1);        Assert.assertFalse(options3.equals(options2));        Assert.assertEquals(options3, options3);        Assert.assertFalse(options3.equals(options4));        Assert.assertFalse(options4.equals(options1));        Assert.assertEquals(options4, options2);        Assert.assertFalse(options4.equals(options3));        Assert.assertEquals(options4, options4);        // Hashcodes should match up        Assert.assertNotEquals(options1.hashCode(), options2.hashCode());        Assert.assertEquals(options1.hashCode(), options3.hashCode());        Assert.assertNotEquals(options1.hashCode(), options4.hashCode());        Assert.assertNotEquals(options2.hashCode(), options3.hashCode());        Assert.assertEquals(options2.hashCode(), options4.hashCode());        Assert.assertNotEquals(options3.hashCode(), options4.hashCode());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cli;import static org.junit.Assert.assertTrue;import static org.junit.Assert.fail;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.PrintStream;import org.junit.After;import org.junit.Before;import org.junit.BeforeClass;import net.sourceforge.pmd.PMD;/** * @author Romain Pelisse &lt;belaran@gmail.com&gt; * */public abstract class BaseCLITest {    protected static final String TEST_OUPUT_DIRECTORY = "target/cli-tests/";    // Points toward a folder with not many source files, to avoid actually PMD    // and slowing down tests    protected static final String SOURCE_FOLDER = "src/test/resources/net/sourceforge/pmd/cli";    protected PrintStream originalOut;    protected PrintStream originalErr;    /**     * @throws java.lang.Exception     */    @BeforeClass    public static void setUp() throws Exception {        System.setProperty(PMDCommandLineInterface.NO_EXIT_AFTER_RUN, "true");        File testOuputDir = new File(TEST_OUPUT_DIRECTORY);        if (!testOuputDir.exists()) {            assertTrue("failed to create output directory for test:" + testOuputDir.getAbsolutePath(),                    testOuputDir.mkdirs());        }    }    @Before    public void setup() {        originalOut = System.out;        originalErr = System.err;    }    @After    public void tearDown() {        System.setOut(originalOut);        System.setErr(originalErr);    }    protected void createTestOutputFile(String filename) {        try {            PrintStream out = new PrintStream(new FileOutputStream(filename));            System.setOut(out);            System.setErr(out);        } catch (FileNotFoundException e) {            fail("Can't create file " + filename + " for test.");        }    }    protected String runTest(String[] args, String testname) {        return runTest(args, testname, 0);    }    protected String runTest(String[] args, String testname, int expectedExitCode) {        String filename = TEST_OUPUT_DIRECTORY + testname + ".txt";        long start = System.currentTimeMillis();        createTestOutputFile(filename);        System.out.println("Start running test " + testname);        runPMDWith(args);        checkStatusCode(expectedExitCode);        System.out.println("Test finished successfully after " + (System.currentTimeMillis() - start) + "ms.");        return filename;    }    protected void runPMDWith(String[] args) {        PMD.main(args);    }    protected void checkStatusCode(int expectedExitCode) {        int statusCode = getStatusCode();        if (statusCode != expectedExitCode) {            fail("PMD failed with status code:" + statusCode);        }    }    protected int getStatusCode() {        return Integer.parseInt(System.getProperty(PMDCommandLineInterface.STATUS_CODE_PROPERTY));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cli;import java.io.ByteArrayOutputStream;import java.io.PrintStream;import java.io.UnsupportedEncodingException;import org.junit.After;import org.junit.Before;import net.sourceforge.pmd.cpd.CPD;import net.sourceforge.pmd.cpd.CPDCommandLineInterface;public abstract class BaseCPDCLITest {    private ByteArrayOutputStream bufferStdout;    private PrintStream originalStdout;    private PrintStream originalStderr;    @Before    public void setup() throws UnsupportedEncodingException {        originalStdout = System.out;        originalStderr = System.err;        bufferStdout = new ByteArrayOutputStream();        System.setOut(new PrintStream(bufferStdout, false, "UTF-8"));        System.setErr(System.out);    }    @After    public void teardown() {        System.setOut(originalStdout);        System.setErr(originalStderr);    }    public final String getOutput() {        try {            return bufferStdout.toString("UTF-8");        } catch (UnsupportedEncodingException e) {            throw new RuntimeException(e);        }    }    protected void runCPD(String... args) {        System.setProperty(CPDCommandLineInterface.NO_EXIT_AFTER_RUN, "true");        CPD.main(args);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import static org.junit.Assert.fail;import java.io.BufferedReader;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.List;import java.util.Properties;import java.util.StringTokenizer;import javax.xml.parsers.ParserConfigurationException;import javax.xml.parsers.SAXParser;import javax.xml.parsers.SAXParserFactory;import org.junit.BeforeClass;import org.junit.Test;import org.xml.sax.InputSource;import org.xml.sax.SAXException;import org.xml.sax.SAXParseException;import org.xml.sax.helpers.DefaultHandler;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.rule.RuleReference;import net.sourceforge.pmd.lang.rule.XPathRule;import net.sourceforge.pmd.util.ResourceLoader;/** * Base test class to verify the language's rulesets. This class should be * subclassed for each language. */public abstract class AbstractRuleSetFactoryTest {    private static SAXParserFactory saxParserFactory;    private static ValidateDefaultHandler validateDefaultHandlerXsd;    private static ValidateDefaultHandler validateDefaultHandlerDtd;    private static SAXParser saxParser;    /**     * Setups the XML parser with validation.     *      * @throws Exception     *             any error     */    @BeforeClass    public static void init() throws Exception {        saxParserFactory = SAXParserFactory.newInstance();        saxParserFactory.setValidating(true);        saxParserFactory.setNamespaceAware(true);        // Hope we're using Xerces, or this may not work!        // Note: Features are listed here        // http://xerces.apache.org/xerces2-j/features.html        saxParserFactory.setFeature("http://xml.org/sax/features/validation", true);        saxParserFactory.setFeature("http://apache.org/xml/features/validation/schema", true);        saxParserFactory.setFeature("http://apache.org/xml/features/validation/schema-full-checking", true);        validateDefaultHandlerXsd = new ValidateDefaultHandler("ruleset_2_0_0.xsd");        validateDefaultHandlerDtd = new ValidateDefaultHandler("ruleset_2_0_0.dtd");        saxParser = saxParserFactory.newSAXParser();    }    /**     * Checks all rulesets of all languages on the classpath and verifies that     * all required attributes for all rules are specified.     *      * @throws Exception     *             any error     */    @Test    public void testAllPMDBuiltInRulesMeetConventions() throws Exception {        int invalidSinceAttributes = 0;        int invalidExternalInfoURL = 0;        int invalidClassName = 0;        int invalidRegexSuppress = 0;        int invalidXPathSuppress = 0;        String messages = "";        List<String> ruleSetFileNames = getRuleSetFileNames();        for (String fileName : ruleSetFileNames) {            RuleSet ruleSet = loadRuleSetByFileName(fileName);            for (Rule rule : ruleSet.getRules()) {                // Skip references                if (rule instanceof RuleReference) {                    continue;                }                Language language = rule.getLanguage();                String group = fileName.substring(fileName.lastIndexOf('/') + 1);                group = group.substring(0, group.indexOf(".xml"));                if (group.indexOf('-') >= 0) {                    group = group.substring(0, group.indexOf('-'));                }                // Is since missing ?                if (rule.getSince() == null) {                    invalidSinceAttributes++;                    messages += "Rule " + fileName + "/" + rule.getName() + " is missing 'since' attribute" + PMD.EOL;                }                // Is URL valid ?                if (rule.getExternalInfoUrl() == null || "".equalsIgnoreCase(rule.getExternalInfoUrl())) {                    invalidExternalInfoURL++;                    messages += "Rule " + fileName + "/" + rule.getName() + " is missing 'externalInfoURL' attribute"                            + PMD.EOL;                } else {                    String expectedExternalInfoURL = "https?://pmd.(sourceforge.net|github.io)/.+/rules/"                            + fileName.replaceAll("rulesets/", "").replaceAll(".xml", "") + ".html#" + rule.getName();                    if (rule.getExternalInfoUrl() == null                            || !rule.getExternalInfoUrl().matches(expectedExternalInfoURL)) {                        invalidExternalInfoURL++;                        messages += "Rule " + fileName + "/" + rule.getName()                                + " seems to have an invalid 'externalInfoURL' value (" + rule.getExternalInfoUrl()                                + "), it should be:" + expectedExternalInfoURL + PMD.EOL;                    }                }                // Proper class name/packaging?                String expectedClassName = "net.sourceforge.pmd.lang." + language.getTerseName() + ".rule." + group                        + "." + rule.getName() + "Rule";                if (!rule.getRuleClass().equals(expectedClassName)                        && !rule.getRuleClass().equals(XPathRule.class.getName())) {                    invalidClassName++;                    messages += "Rule " + fileName + "/" + rule.getName() + " seems to have an invalid 'class' value ("                            + rule.getRuleClass() + "), it should be:" + expectedClassName + PMD.EOL;                }                // Should not have violation suppress regex property                if (rule.getProperty(Rule.VIOLATION_SUPPRESS_REGEX_DESCRIPTOR) != null) {                    invalidRegexSuppress++;                    messages += "Rule " + fileName + "/" + rule.getName() + " should not have '"                            + Rule.VIOLATION_SUPPRESS_REGEX_DESCRIPTOR.name()                            + "', this is intended for end user customization only." + PMD.EOL;                }                // Should not have violation suppress xpath property                if (rule.getProperty(Rule.VIOLATION_SUPPRESS_XPATH_DESCRIPTOR) != null) {                    invalidXPathSuppress++;                    messages += "Rule " + fileName + "/" + rule.getName() + " should not have '"                            + Rule.VIOLATION_SUPPRESS_XPATH_DESCRIPTOR.name()                            + "', this is intended for end user customization only." + PMD.EOL;                }            }        }        // We do this at the end to ensure we test ALL the rules before failing        // the test        if (invalidSinceAttributes > 0 || invalidExternalInfoURL > 0 || invalidClassName > 0 || invalidRegexSuppress > 0                || invalidXPathSuppress > 0) {            fail("All built-in PMD rules need 'since' attribute (" + invalidSinceAttributes                    + " are missing), a proper ExternalURLInfo (" + invalidExternalInfoURL                    + " are invalid), a class name meeting conventions (" + invalidClassName + " are invalid), no '"                    + Rule.VIOLATION_SUPPRESS_REGEX_DESCRIPTOR.name() + "' property (" + invalidRegexSuppress                    + " are invalid), and no '" + Rule.VIOLATION_SUPPRESS_XPATH_DESCRIPTOR.name() + "' property ("                    + invalidXPathSuppress + " are invalid)" + PMD.EOL + messages);        }    }    /**     * Verifies that all rulesets are valid XML according to the xsd schema.     *      * @throws Exception     *             any error     */    @Test    public void testXmlSchema() throws Exception {        boolean allValid = true;        List<String> ruleSetFileNames = getRuleSetFileNames();        for (String fileName : ruleSetFileNames) {            boolean valid = validateAgainstSchema(fileName);            allValid = allValid && valid;        }        assertTrue("All XML must parse without producing validation messages.", allValid);    }    /**     * Verifies that all rulesets are valid XML according to the DTD.     *      * @throws Exception     *             any error     */    @Test    public void testDtd() throws Exception {        boolean allValid = true;        List<String> ruleSetFileNames = getRuleSetFileNames();        for (String fileName : ruleSetFileNames) {            boolean valid = validateAgainstDtd(fileName);            allValid = allValid && valid;        }        assertTrue("All XML must parse without producing validation messages.", allValid);    }    /**     * Reads and writes the rulesets to make sure, that no data is lost if the     * rulests are processed.     *      * @throws Exception     *             any error     */    @Test    public void testReadWriteRoundTrip() throws Exception {        List<String> ruleSetFileNames = getRuleSetFileNames();        for (String fileName : ruleSetFileNames) {            testRuleSet(fileName);        }    }    // Gets all test PMD Ruleset XML files    private List<String> getRuleSetFileNames() throws IOException, RuleSetNotFoundException {        List<String> result = new ArrayList<>();        for (Language language : LanguageRegistry.getLanguages()) {            result.addAll(getRuleSetFileNames(language.getTerseName()));        }        return result;    }    private List<String> getRuleSetFileNames(String language) throws IOException, RuleSetNotFoundException {        List<String> ruleSetFileNames = new ArrayList<>();        try {            Properties properties = new Properties();            try (InputStream is = ResourceLoader.loadResourceAsStream("rulesets/" + language + "/rulesets.properties")) {                properties.load(is);            }            String fileNames = properties.getProperty("rulesets.filenames");            StringTokenizer st = new StringTokenizer(fileNames, ",");            while (st.hasMoreTokens()) {                ruleSetFileNames.add(st.nextToken());            }        } catch (RuleSetNotFoundException e) {            // this might happen if a language is only support by CPD, but not            // by PMD            System.err.println("No ruleset found for language " + language);        }        return ruleSetFileNames;    }    private RuleSet loadRuleSetByFileName(String ruleSetFileName) throws RuleSetNotFoundException {        RuleSetFactory rsf = new RuleSetFactory();        return rsf.createRuleSet(ruleSetFileName);    }    private boolean validateAgainstSchema(String fileName)            throws IOException, RuleSetNotFoundException, ParserConfigurationException, SAXException {        InputStream inputStream = loadResourceAsStream(fileName);        boolean valid = validateAgainstSchema(inputStream);        if (!valid) {            System.err.println("Validation against XML Schema failed for: " + fileName);        }        return valid;    }    private boolean validateAgainstSchema(InputStream inputStream)            throws IOException, RuleSetNotFoundException, ParserConfigurationException, SAXException {        saxParser.parse(inputStream, validateDefaultHandlerXsd.resetValid());        inputStream.close();        return validateDefaultHandlerXsd.isValid();    }    private boolean validateAgainstDtd(String fileName)            throws IOException, RuleSetNotFoundException, ParserConfigurationException, SAXException {        InputStream inputStream = loadResourceAsStream(fileName);        boolean valid = validateAgainstDtd(inputStream);        if (!valid) {            System.err.println("Validation against DTD failed for: " + fileName);        }        return valid;    }    private boolean validateAgainstDtd(InputStream inputStream)            throws IOException, RuleSetNotFoundException, ParserConfigurationException, SAXException {        // Read file into memory        String file = readFullyToString(inputStream);        inputStream.close();        // Remove XML Schema stuff, replace with DTD        file = file.replaceAll("<\\?xml [ a-zA-Z0-9=\".-]*\\?>", "");        file = file.replaceAll("xmlns=\"" + RuleSetWriter.RULESET_NS_URI + "\"", "");        file = file.replaceAll("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", "");        file = file.replaceAll("xsi:schemaLocation=\"" + RuleSetWriter.RULESET_NS_URI                + " http://pmd.sourceforge.net/ruleset_2_0_0.xsd\"", "");        file = "<?xml version=\"1.0\"?>" + PMD.EOL + "<!DOCTYPE ruleset SYSTEM \"file://"                + "/path/does/not/matter/will/be/replaced/ruleset_2_0_0.dtd\">" + PMD.EOL + file;        InputStream modifiedStream = new ByteArrayInputStream(file.getBytes());        saxParser.parse(modifiedStream, validateDefaultHandlerDtd.resetValid());        modifiedStream.close();        return validateDefaultHandlerDtd.isValid();    }    private String readFullyToString(InputStream inputStream) throws IOException {        StringBuilder buf = new StringBuilder(64 * 1024);        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));        String line;        while ((line = reader.readLine()) != null) {            buf.append(line);            buf.append(PMD.EOL);        }        reader.close();        return buf.toString();    }    private static InputStream loadResourceAsStream(String resource) throws RuleSetNotFoundException {        InputStream inputStream = ResourceLoader.loadResourceAsStream(resource,                AbstractRuleSetFactoryTest.class.getClassLoader());        if (inputStream == null) {            throw new RuleSetNotFoundException("Can't find resource " + resource                    + "  Make sure the resource is a valid file or URL or is on the CLASSPATH.  Here's the current classpath: "                    + System.getProperty("java.class.path"));        }        return inputStream;    }    private void testRuleSet(String fileName)            throws IOException, RuleSetNotFoundException, ParserConfigurationException, SAXException {        // Load original XML        // String xml1 =        // readFullyToString(ResourceLoader.loadResourceAsStream(fileName));        // System.out.println("xml1: " + xml1);        // Load the original RuleSet        RuleSet ruleSet1 = loadRuleSetByFileName(fileName);        // Write to XML, first time        ByteArrayOutputStream outputStream1 = new ByteArrayOutputStream();        RuleSetWriter writer1 = new RuleSetWriter(outputStream1);        writer1.write(ruleSet1);        writer1.close();        String xml2 = new String(outputStream1.toByteArray());        // System.out.println("xml2: " + xml2);        // Read RuleSet from XML, first time        RuleSetFactory ruleSetFactory = new RuleSetFactory();        RuleSet ruleSet2 = ruleSetFactory.createRuleSet(createRuleSetReferenceId(xml2));        // Do write/read a 2nd time, just to be sure        // Write to XML, second time        ByteArrayOutputStream outputStream2 = new ByteArrayOutputStream();        RuleSetWriter writer2 = new RuleSetWriter(outputStream2);        writer2.write(ruleSet2);        writer2.close();        String xml3 = new String(outputStream2.toByteArray());        // System.out.println("xml3: " + xml3);        // Read RuleSet from XML, second time        RuleSet ruleSet3 = ruleSetFactory.createRuleSet(createRuleSetReferenceId(xml3));        // The 2 written XMLs should all be valid w.r.t Schema/DTD        assertTrue("1st roundtrip RuleSet XML is not valid against Schema (filename: " + fileName + ")",                validateAgainstSchema(new ByteArrayInputStream(xml2.getBytes())));        assertTrue("2nd roundtrip RuleSet XML is not valid against Schema (filename: " + fileName + ")",                validateAgainstSchema(new ByteArrayInputStream(xml3.getBytes())));        assertTrue("1st roundtrip RuleSet XML is not valid against DTD (filename: " + fileName + ")",                validateAgainstDtd(new ByteArrayInputStream(xml2.getBytes())));        assertTrue("2nd roundtrip RuleSet XML is not valid against DTD (filename: " + fileName + ")",                validateAgainstDtd(new ByteArrayInputStream(xml3.getBytes())));        // All 3 versions of the RuleSet should be the same        assertEqualsRuleSet("Original RuleSet and 1st roundtrip Ruleset not the same (filename: " + fileName + ")",                ruleSet1, ruleSet2);        assertEqualsRuleSet("1st roundtrip Ruleset and 2nd roundtrip RuleSet not the same (filename: " + fileName + ")",                ruleSet2, ruleSet3);        // It's hard to compare the XML DOMs. At least the roundtrip ones should        // textually be the same.        assertEquals("1st roundtrip RuleSet XML and 2nd roundtrip RuleSet XML (filename: " + fileName + ")", xml2,                xml3);    }    private void assertEqualsRuleSet(String message, RuleSet ruleSet1, RuleSet ruleSet2) {        assertEquals(message + ", RuleSet name", ruleSet1.getName(), ruleSet2.getName());        assertEquals(message + ", RuleSet description", ruleSet1.getDescription(), ruleSet2.getDescription());        assertEquals(message + ", RuleSet exclude patterns", ruleSet1.getExcludePatterns(),                ruleSet2.getExcludePatterns());        assertEquals(message + ", RuleSet include patterns", ruleSet1.getIncludePatterns(),                ruleSet2.getIncludePatterns());        assertEquals(message + ", RuleSet rule count", ruleSet1.getRules().size(), ruleSet2.getRules().size());        for (int i = 0; i < ruleSet1.getRules().size(); i++) {            Rule rule1 = ((List<Rule>) ruleSet1.getRules()).get(i);            Rule rule2 = ((List<Rule>) ruleSet2.getRules()).get(i);            assertFalse(message + ", Different RuleReference",                    rule1 instanceof RuleReference && !(rule2 instanceof RuleReference)                            || !(rule1 instanceof RuleReference) && rule2 instanceof RuleReference);            if (rule1 instanceof RuleReference) {                RuleReference ruleReference1 = (RuleReference) rule1;                RuleReference ruleReference2 = (RuleReference) rule2;                assertEquals(message + ", RuleReference overridden language", ruleReference1.getOverriddenLanguage(),                        ruleReference2.getOverriddenLanguage());                assertEquals(message + ", RuleReference overridden minimum language version",                        ruleReference1.getOverriddenMinimumLanguageVersion(),                        ruleReference2.getOverriddenMinimumLanguageVersion());                assertEquals(message + ", RuleReference overridden maximum language version",                        ruleReference1.getOverriddenMaximumLanguageVersion(),                        ruleReference2.getOverriddenMaximumLanguageVersion());                assertEquals(message + ", RuleReference overridden deprecated", ruleReference1.isOverriddenDeprecated(),                        ruleReference2.isOverriddenDeprecated());                assertEquals(message + ", RuleReference overridden name", ruleReference1.getOverriddenName(),                        ruleReference2.getOverriddenName());                assertEquals(message + ", RuleReference overridden description",                        ruleReference1.getOverriddenDescription(), ruleReference2.getOverriddenDescription());                assertEquals(message + ", RuleReference overridden message", ruleReference1.getOverriddenMessage(),                        ruleReference2.getOverriddenMessage());                assertEquals(message + ", RuleReference overridden external info url",                        ruleReference1.getOverriddenExternalInfoUrl(), ruleReference2.getOverriddenExternalInfoUrl());                assertEquals(message + ", RuleReference overridden priority", ruleReference1.getOverriddenPriority(),                        ruleReference2.getOverriddenPriority());                assertEquals(message + ", RuleReference overridden examples", ruleReference1.getOverriddenExamples(),                        ruleReference2.getOverriddenExamples());            }            assertEquals(message + ", Rule name", rule1.getName(), rule2.getName());            assertEquals(message + ", Rule class", rule1.getRuleClass(), rule2.getRuleClass());            assertEquals(message + ", Rule description " + rule1.getName(), rule1.getDescription(),                    rule2.getDescription());            assertEquals(message + ", Rule message", rule1.getMessage(), rule2.getMessage());            assertEquals(message + ", Rule external info url", rule1.getExternalInfoUrl(), rule2.getExternalInfoUrl());            assertEquals(message + ", Rule priority", rule1.getPriority(), rule2.getPriority());            assertEquals(message + ", Rule examples", rule1.getExamples(), rule2.getExamples());            List<PropertyDescriptor<?>> propertyDescriptors1 = rule1.getPropertyDescriptors();            List<PropertyDescriptor<?>> propertyDescriptors2 = rule2.getPropertyDescriptors();            assertEquals(message + ", Rule property descriptor ", propertyDescriptors1, propertyDescriptors2);            for (int j = 0; j < propertyDescriptors1.size(); j++) {                assertEquals(message + ", Rule property value " + j, rule1.getProperty(propertyDescriptors1.get(j)),                        rule2.getProperty(propertyDescriptors2.get(j)));            }            assertEquals(message + ", Rule property descriptor count", propertyDescriptors1.size(),                    propertyDescriptors2.size());        }    }    /**     * Create a {@link RuleSetReferenceId} by the given XML string.     *      * @param ruleSetXml     *            the ruleset file content as string     * @return the {@link RuleSetReferenceId}     */    protected static RuleSetReferenceId createRuleSetReferenceId(final String ruleSetXml) {        return new RuleSetReferenceId(null) {            @Override            public InputStream getInputStream(ClassLoader classLoader) throws RuleSetNotFoundException {                try {                    return new ByteArrayInputStream(ruleSetXml.getBytes("UTF-8"));                } catch (UnsupportedEncodingException e) {                    return null;                }            }        };    }    /**     * Validator for the SAX parser     */    private static class ValidateDefaultHandler extends DefaultHandler {        private final String validateDocument;        private boolean valid = true;        ValidateDefaultHandler(String validateDocument) {            this.validateDocument = validateDocument;        }        public ValidateDefaultHandler resetValid() {            valid = true;            return this;        }        public boolean isValid() {            return valid;        }        @Override        public void error(SAXParseException e) throws SAXException {            log("Error", e);        }        @Override        public void fatalError(SAXParseException e) throws SAXException {            log("FatalError", e);        }        @Override        public void warning(SAXParseException e) throws SAXException {            log("Warning", e);        }        private void log(String prefix, SAXParseException e) {            String message = prefix + " at (" + e.getLineNumber() + ", " + e.getColumnNumber() + "): " + e.getMessage();            System.err.println(message);            valid = false;        }        @Override        public InputSource resolveEntity(String publicId, String systemId) throws IOException, SAXException {            if ("http://pmd.sourceforge.net/ruleset_2_0_0.xsd".equals(systemId)                    || systemId.endsWith("ruleset_2_0_0.dtd")) {                try {                    InputStream inputStream = loadResourceAsStream(validateDocument);                    return new InputSource(inputStream);                } catch (RuleSetNotFoundException e) {                    System.err.println(e.getMessage());                    throw new IOException(e.getMessage());                }            }            throw new IllegalArgumentException(                    "No clue how to handle: publicId=" + publicId + ", systemId=" + systemId);        }    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNotNull;import java.io.InputStream;import java.util.Properties;import org.junit.Test;import org.junit.runner.RunWith;import org.junit.runners.Parameterized;import net.sourceforge.pmd.ant.SourceLanguage;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.util.ResourceLoader;/** * Base test class for {@link LanguageVersion} implementations. <br> * Each language implementation should subclass this and provide a data method. *  * <pre> * &#64;Parameters *     public static Collection&lt;Object[]&gt; data() { *       return Arrays.asList(new Object[][] { *            { MyLanguageModule.NAME, MyLanguageModule.TERSE_NAME, "1.1", *              LanguageRegistry.getLanguage(MyLanguageModule.NAME).getVersion("1.1") }, *            { MyLanguageModule.NAME, MyLanguageModule.TERSE_NAME, "1.2", *              LanguageRegistry.getLanguage(MyLanguageModule.NAME).getVersion("1.2") }, * *            // doesn't exist *            { MyLanguageModule.NAME, MyLanguageModule.TERSE_NAME, "1.3", *              null } *       }); * </pre> *  * <p>For the parameters, see the constructor * {@link #AbstractLanguageVersionTest(String, String, String, LanguageVersion)}.</p> */@RunWith(Parameterized.class)public class AbstractLanguageVersionTest {    private String name;    private String version;    private String simpleTerseName;    private String terseName;    private LanguageVersion expected;    /**     * Creates a new {@link AbstractLanguageVersionTest}     *      * @param name     *            the name under which the language module is registered     * @param terseName     *            the terse name under which the language module is registered     * @param version     *            the specific version of the language version     * @param expected     *            the expected {@link LanguageVersion} instance     */    public AbstractLanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        this.name = name;        this.version = version;        this.simpleTerseName = terseName;        this.terseName = terseName;        if (version != null && !version.isEmpty()) {            this.terseName += " " + version;        }        this.expected = expected;    }    /**     * Checks that the expected {@link LanguageVersion} can be found by the     * combination of {@link #terseName} and {@link #version}.     */    @Test    public void testGetLanguageVersionForTerseName() {        assertEquals(expected, LanguageRegistry.findLanguageVersionByTerseName(terseName));    }    /**     * Checks that the expected {@link LanguageVersion} can be found via     * {@link #name} and {@link #version}.     */    @Test    public void testFindVersionsForLanguageNameAndVersion() {        SourceLanguage sourceLanguage = new SourceLanguage();        sourceLanguage.setName(name);        sourceLanguage.setVersion(version);        Language language = LanguageRegistry.getLanguage(sourceLanguage.getName());        LanguageVersion languageVersion = null;        if (language != null) {            languageVersion = language.getVersion(sourceLanguage.getVersion());        }        assertEquals(expected, languageVersion);    }    /**     * Makes sure, that for each language a "rulesets.properties" file exists.     *      * @throws Exception     *             any error     */    @Test    public void testRegisteredRulesets() throws Exception {        // only check for languages, that support rules        if (expected == null || expected.getLanguage().getRuleChainVisitorClass() == null) {            return;        }        Properties props = new Properties();        String rulesetsProperties = "rulesets/" + simpleTerseName + "/rulesets.properties";        try (InputStream inputStream = ResourceLoader.loadResourceAsStream(rulesetsProperties);) {            props.load(inputStream);        }        String rulesetFilenames = props.getProperty("rulesets.filenames");        assertNotNull(rulesetFilenames);        RuleSetFactory factory = new RuleSetFactory();        if (rulesetFilenames.trim().isEmpty()) {            return;        }        String[] rulesets = rulesetFilenames.split(",");        for (String r : rulesets) {            InputStream stream = ResourceLoader.loadResourceAsStream(r);            assertNotNull(stream);            stream.close();            RuleSet ruleset = factory.createRuleSet(r);            assertNotNull(ruleset);        }    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.testframework;import static org.mockito.Matchers.any;import static org.mockito.Matchers.anyList;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.times;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.verifyNoMoreInteractions;import static org.mockito.Mockito.when;import org.junit.Test;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;public class RuleTstTest {    @Test    public void shouldCallStartAndEnd() {        RuleTst ruleTester = new RuleTst() {        };        LanguageVersion languageVersion = LanguageRegistry.findLanguageByTerseName("dummy").getDefaultVersion();        Report report = new Report();        Rule rule = mock(Rule.class);        when(rule.getLanguage()).thenReturn(languageVersion.getLanguage());        when(rule.getName()).thenReturn("test rule");        ruleTester.runTestFromString("the code", rule, report, languageVersion, false);        verify(rule).start(any(RuleContext.class));        verify(rule).end(any(RuleContext.class));        verify(rule, times(4)).getLanguage();        verify(rule).usesDFA();        verify(rule).usesTypeResolution();        verify(rule, times(2)).usesRuleChain();        verify(rule).getMinimumLanguageVersion();        verify(rule).getMaximumLanguageVersion();        verify(rule).apply(anyList(), any(RuleContext.class));        verify(rule, times(2)).getName();        verify(rule).getPropertiesByPropertyDescriptor();        verifyNoMoreInteractions(rule);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.junit;import java.util.List;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;public class TestClassWithoutTestCasesRule extends AbstractJUnitRule {    @Override    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {        if (node.isAbstract() || node.isInterface() || node.isNested()) {            return data;        }        List<ASTMethodDeclaration> m = node.findDescendantsOfType(ASTMethodDeclaration.class);        boolean testsFound = false;        if (m != null) {            for (ASTMethodDeclaration md : m) {                if (!isInInnerClassOrInterface(md) && isJUnitMethod(md, data)) {                    testsFound = true;                }            }        }        if (!testsFound) {            addViolation(data, node);        }        return data;    }    private boolean isInInnerClassOrInterface(ASTMethodDeclaration md) {        ASTClassOrInterfaceDeclaration p = md.getFirstParentOfType(ASTClassOrInterfaceDeclaration.class);        return p != null && p.isNested();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.coverage;import static org.junit.Assert.fail;import java.io.BufferedReader;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import org.junit.Test;import net.sourceforge.pmd.PMD;public class PMDCoverageTest {    /**     * Test some of the PMD command line options     */    @Test    public void testPmdOptions() {        runPmd("-d src/main/java/net/sourceforge/pmd/lang/java/rule/design -f text -R rulesets/internal/all-java.xml -version 1.5 -language java -stress -benchmark");    }    /**     * Run the PMD command line tool, i.e. call PMD.main().     *      * @param commandLine     */    private void runPmd(String commandLine) {        String[] args;        args = commandLine.split("\\s");        File f = null;        try {            f = File.createTempFile("pmd", ".txt");            int n = args.length;            String[] a = new String[n + 2];            System.arraycopy(args, 0, a, 0, n);            a[n] = "-reportfile";            a[n + 1] = f.getAbsolutePath();            args = a;            PMD.run(args);            // FIXME: check that output doesn't have parsing errors        } catch (IOException ioe) {            fail("Problem creating temporary file: " + ioe.getLocalizedMessage());        } finally {            if (f != null) {                f.delete();            }        }    }    /**     * Name of the configuration file used by testResourceFileCommands().     */    private static final String PMD_CONFIG_FILE = "pmd_tests.conf";    /**     * Run PMD using the command lines found in PMD_CONFIG_FILE.     */    @Test    public void testResourceFileCommands() {        InputStream is = getClass().getResourceAsStream(PMD_CONFIG_FILE);        if (is != null) {            try {                BufferedReader r = new BufferedReader(new InputStreamReader(is));                String l;                while ((l = r.readLine()) != null) {                    l = l.trim();                    if (l.length() == 0 || l.charAt(0) == '#') {                        continue;                    }                    runPmd(l);                }                r.close();            } catch (IOException ioe) {                fail("Problem reading config file: " + ioe.getLocalizedMessage());            }        } else {            fail("Missing config file: " + PMD_CONFIG_FILE);        }    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.dfa;import static org.junit.Assert.assertEquals;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.dfa.Structure;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;public class StructureTest {    @Test    public void testAddResultsinDFANodeContainingAddedNode() {        Structure s = new Structure(LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getDefaultVersion()                .getLanguageVersionHandler().getDataFlowHandler());        Node n = new ASTMethodDeclaration(1);        assertEquals(n, s.createNewNode(n).getNode());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(StructureTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.dfa;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.LinkedList;import org.junit.Test;import net.sourceforge.pmd.lang.dfa.DataFlowNode;import net.sourceforge.pmd.lang.dfa.NodeType;import net.sourceforge.pmd.lang.dfa.StartOrEndDataFlowNode;public class DataFlowNodeTest {    @Test    public void testAddPathToChild() {        DataFlowNode parent = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 10, false);        DataFlowNode child = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 12, false);        parent.addPathToChild(child);        assertEquals(parent.getChildren().size(), 1);        assertTrue(child.getParents().contains(parent));        assertTrue(parent.getChildren().contains(child));    }    @Test    public void testRemovePathToChild() {        DataFlowNode parent = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 10, false);        DataFlowNode child = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 12, false);        parent.addPathToChild(child);        assertTrue(parent.removePathToChild(child));        assertFalse(child.getParents().contains(parent));        assertFalse(parent.getChildren().contains(child));    }    @Test    public void testRemovePathWithNonChild() {        DataFlowNode parent = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 10, false);        DataFlowNode child = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 12, false);        assertFalse(parent.removePathToChild(child));    }    @Test    public void testReverseParentPathsTo() {        DataFlowNode parent1 = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 10, false);        DataFlowNode parent2 = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 12, false);        DataFlowNode child1 = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 13, false);        DataFlowNode child2 = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 13, false);        parent1.addPathToChild(child1);        parent2.addPathToChild(child1);        assertTrue(parent1.getChildren().contains(child1));        child1.reverseParentPathsTo(child2);        assertTrue(parent1.getChildren().contains(child2));        assertFalse(parent1.getChildren().contains(child1));        assertTrue(parent2.getChildren().contains(child2));        assertFalse(parent2.getChildren().contains(child1));        assertEquals(0, child1.getParents().size());        assertEquals(2, child2.getParents().size());    }    @Test    public void testSetType() {        DataFlowNode node = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 10, false);        node.setType(NodeType.BREAK_STATEMENT);        assertTrue(node.isType(NodeType.BREAK_STATEMENT));        assertFalse(node.isType(NodeType.CASE_LAST_STATEMENT));    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(DataFlowNodeTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.dfa;import static org.junit.Assert.assertEquals;import org.junit.Test;import net.sourceforge.pmd.lang.dfa.VariableAccess;public class VariableAccessTest {    @Test    public void testGetVariableName() {        VariableAccess va = new VariableAccess(VariableAccess.DEFINITION, "foo.bar");        assertEquals("foo", va.getVariableName());        va = new VariableAccess(VariableAccess.DEFINITION, ".foobar");        assertEquals("", va.getVariableName());        va = new VariableAccess(VariableAccess.DEFINITION, "foobar.");        assertEquals("foobar", va.getVariableName());        va = new VariableAccess(VariableAccess.DEFINITION, "foobar");        assertEquals("foobar", va.getVariableName());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.dfa;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath;import net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder;import net.sourceforge.pmd.lang.dfa.pathfinder.Executable;import net.sourceforge.pmd.lang.java.ParserTst;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator;public class DAAPathFinderTest extends ParserTst implements Executable {    @Test    public void testTwoUpdateDefs() {        ASTMethodDeclarator meth = getOrderedNodes(ASTMethodDeclarator.class, TWO_UPDATE_DEFS).get(0);        DAAPathFinder a = new DAAPathFinder(meth.getDataFlowNode().getFlow().get(0), this);        // a.run();    }    public void execute(CurrentPath path) {    }    private static final String TWO_UPDATE_DEFS = "class Foo {" + PMD.EOL + " void bar(int x) {" + PMD.EOL            + "  for (int i=0; i<10; i++, j--) {}" + PMD.EOL + " }" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.dfa;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.dfa.DataFlowNode;import net.sourceforge.pmd.lang.dfa.NodeType;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.lang.java.ParserTst;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTExpression;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTStatementExpression;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;public class StatementAndBraceFinderTest extends ParserTst {    @Test    public void testStatementExpressionParentChildLinks() {        ASTStatementExpression se = getOrderedNodes(ASTStatementExpression.class, TEST1).get(0);        ASTMethodDeclaration seParent = (ASTMethodDeclaration) se.getDataFlowNode().getParents().get(0).getNode();        assertEquals(se, seParent.getDataFlowNode().getChildren().get(0).getNode());        assertEquals(seParent, se.getDataFlowNode().getParents().get(0).getNode());    }    @Test    public void testVariableDeclaratorParentChildLinks() {        ASTVariableDeclarator vd = getOrderedNodes(ASTVariableDeclarator.class, TEST2).get(0);        ASTMethodDeclaration vdParent = (ASTMethodDeclaration) vd.getDataFlowNode().getParents().get(0).getNode();        assertEquals(vd, vdParent.getDataFlowNode().getChildren().get(0).getNode());        assertEquals(vdParent, vd.getDataFlowNode().getParents().get(0).getNode());    }    @Test    public void testIfStmtHasCorrectTypes() {        ASTExpression exp = getOrderedNodes(ASTExpression.class, TEST3).get(0);        DataFlowNode dfn = exp.getDataFlowNode().getFlow().get(2);        assertTrue(dfn.isType(NodeType.IF_EXPR));        assertTrue(dfn.isType(NodeType.IF_LAST_STATEMENT_WITHOUT_ELSE));    }    @Test    public void testWhileStmtHasCorrectTypes() {        ASTExpression exp = getOrderedNodes(ASTExpression.class, TEST4).get(0);        DataFlowNode dfn = exp.getDataFlowNode().getFlow().get(2);        assertTrue(dfn.isType(NodeType.WHILE_EXPR));        assertTrue(dfn.isType(NodeType.WHILE_LAST_STATEMENT));    }    @Test    public void testForStmtHasCorrectTypes() {        ASTExpression exp = getOrderedNodes(ASTExpression.class, TEST5).get(0);        DataFlowNode dfn = exp.getDataFlowNode().getFlow().get(2);        assertTrue(dfn.isType(NodeType.FOR_INIT));        dfn = exp.getDataFlowNode().getFlow().get(3);        assertTrue(dfn.isType(NodeType.FOR_EXPR));        dfn = exp.getDataFlowNode().getFlow().get(4);        assertTrue(dfn.isType(NodeType.FOR_UPDATE));        assertTrue(dfn.isType(NodeType.FOR_BEFORE_FIRST_STATEMENT));        assertTrue(dfn.isType(NodeType.FOR_END));    }    @Test(expected = RuntimeException.class)    public void testOnlyWorksForMethodsAndConstructors() {        StatementAndBraceFinder sbf = new StatementAndBraceFinder(LanguageRegistry.getLanguage(JavaLanguageModule.NAME)                .getDefaultVersion().getLanguageVersionHandler().getDataFlowHandler());        sbf.buildDataFlowFor(new ASTMethodDeclaration(1));        sbf.buildDataFlowFor(new ASTConstructorDeclaration(1));        sbf.buildDataFlowFor(new ASTCompilationUnit(1));    }    private static final String TEST1 = "class Foo {" + PMD.EOL + " void bar() {" + PMD.EOL + "  x = 2;" + PMD.EOL            + " }" + PMD.EOL + "}";    private static final String TEST2 = "class Foo {" + PMD.EOL + " void bar() {" + PMD.EOL + "  int x;" + PMD.EOL            + " }" + PMD.EOL + "}";    private static final String TEST3 = "class Foo {" + PMD.EOL + " void bar() {" + PMD.EOL + "  if (x) {}" + PMD.EOL            + " }" + PMD.EOL + "}";    private static final String TEST4 = "class Foo {" + PMD.EOL + " void bar() {" + PMD.EOL + "  while (x) {}" + PMD.EOL            + " }" + PMD.EOL + "}";    private static final String TEST5 = "class Foo {" + PMD.EOL + " void bar() {" + PMD.EOL            + "  for (int i=0; i<10; i++) {}" + PMD.EOL + " }" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.dfa;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNotNull;import java.util.List;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.dfa.DataFlowNode;import net.sourceforge.pmd.lang.java.ParserTst;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator;public class GeneralFiddlingTest extends ParserTst {    /**     * Unit test for https://sourceforge.net/p/pmd/bugs/1325/     */    @Test    public void innerClassShouldWork() {        ASTCompilationUnit acu = buildDFA(                "class Foo {" + "    void bar() {" + "        class X {}" + "        int i;" + "    }" + "}");        assertNotNull(acu);    }    @Test    public void test1() {        ASTCompilationUnit acu = buildDFA(TEST1);        ASTMethodDeclarator meth = acu.findDescendantsOfType(ASTMethodDeclarator.class).get(0);        DataFlowNode n = meth.getDataFlowNode();        List<DataFlowNode> f = n.getFlow();        assertEquals(6, f.size());        assertEquals("Undefinition(x)", String.valueOf(f.get(0).getVariableAccess().get(0)));        assertEquals(0, f.get(1).getVariableAccess().size());        assertEquals("Definition(x)", String.valueOf(f.get(2).getVariableAccess().get(0)));        assertEquals("Reference(x)", String.valueOf(f.get(3).getVariableAccess().get(0)));        assertEquals("Definition(x)", String.valueOf(f.get(4).getVariableAccess().get(0)));        assertEquals("Undefinition(x)", String.valueOf(f.get(5).getVariableAccess().get(0)));        // for (DataFlowNode dfan : f) {        // System.out.println("Flow starting on line " + dfan.getLine());        // List<VariableAccess> va = dfan.getVariableAccess();        // for (VariableAccess o : va) {        // System.out.println(" variable: " + o);        // }        // }    }    private static final String TEST1 = "class Foo {" + PMD.EOL + " void bar() {" + PMD.EOL + "  int x = 2;" + PMD.EOL            + "  foo(x);" + PMD.EOL + "  x = 3;" + PMD.EOL + " }" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.dfa;import static org.junit.Assert.assertTrue;import java.util.List;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.dfa.DataFlowNode;import net.sourceforge.pmd.lang.java.ParserTst;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator;/* * Created on 18.08.2004 */public class AcceptanceTest extends ParserTst {    @Test    public void testbook() {        getOrderedNodes(ASTMethodDeclarator.class, FOO);    }    private static final String FOO = "class Foo {" + PMD.EOL + " void bar() {" + PMD.EOL + "  int x = 2;" + PMD.EOL            + " }" + PMD.EOL + "}";    @Test    public void testLabelledBreakLockup() {        getOrderedNodes(ASTMethodDeclarator.class, LABELLED_BREAK_LOCKUP);    }    private static final String LABELLED_BREAK_LOCKUP = "class Foo {" + PMD.EOL + " void bar(int x) {" + PMD.EOL            + "  here: if (x>2) {" + PMD.EOL + "   break here;" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + "}";    private boolean check(int[][] array, List<ASTMethodDeclarator> methodNodes) {        for (int i = 0; i < methodNodes.size(); i++) {            ASTMethodDeclarator decl = methodNodes.get(i);            DataFlowNode inode = decl.getDataFlowNode();            for (int j = 0; j < inode.getChildren().size(); j++) {                DataFlowNode child = inode.getChildren().get(j);                if (array[i][j] != child.getIndex() - 1) {                    return false;                }            }        }        return true;    }    @Test    public void test1() {        assertTrue(check(TEST1_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST1)));    }    @Test    public void test2() {        assertTrue(check(TEST2_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST2)));    }    @Test    public void test3() {        assertTrue(check(TEST3_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST3)));    }    @Test    public void test4() {        assertTrue(check(TEST4_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST4)));    }    @Test    public void test6() {        assertTrue(check(TEST5_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST6)));    }    @Test    public void test7() {        assertTrue(check(TEST5_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST7)));    }    @Test    public void test8() {        assertTrue(check(TEST8_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST8)));    }    @Test    public void test9() {        assertTrue(check(TEST5_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST9)));    }    @Test    public void test10() {        assertTrue(check(TEST8_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST10)));    }    @Test    public void test11() {        assertTrue(check(TEST8_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST11)));    }    @Test    public void test12() {        assertTrue(check(TEST12_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST12)));    }    @Test    public void test13() {        assertTrue(check(TEST13_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST13)));    }    @Test    public void test14() {        assertTrue(check(TEST14_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST14)));    }    @Test    public void test15() {        assertTrue(check(TEST15_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST15)));    }    @Test    public void test16() {        assertTrue(check(TEST16_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST16)));    }    @Test    public void test17() {        assertTrue(check(TEST17_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST17)));    }    @Test    public void test18() {        assertTrue(check(TEST18_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST18)));    }    @Test    public void test19() {        assertTrue(check(TEST19_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST19)));    }    @Test    public void test20() {        assertTrue(check(TEST20_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST20)));    }    @Test    public void test21() {        assertTrue(check(TEST21_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST21)));    }    @Test    public void test22() {        assertTrue(check(TEST22_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST22)));    }    @Test    public void test23() {        assertTrue(check(TEST23_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST23)));    }    @Test    public void test24() {        assertTrue(check(TEST24_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST24)));    }    @Test    public void test25() {        assertTrue(check(TEST25_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST25)));    }    @Test    public void test26() {        assertTrue(check(TEST26_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST26)));    }    @Test    public void test27() {        assertTrue(check(TEST27_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST27)));    }    @Test    public void test28() {        assertTrue(check(TEST28_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST28)));    }    @Test    public void test29() {        assertTrue(check(TEST29_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST29)));    }    @Test    public void test30() {        assertTrue(check(TEST30_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST30)));    }    // first dimension: the index of a node    // second dimension: the indices of the children    private static final int[][] TEST1_NODES = { { 1, }, { 2, }, { 3, }, { 4, 6, }, { 5, }, { 6, }, {}, };    private static final String TEST1 = "class Foo {" + PMD.EOL + " void test_1() {" + PMD.EOL + "  int x = 0;"            + PMD.EOL + "  if (x == 0) {" + PMD.EOL + "   x++;" + PMD.EOL + "   x = 0;" + PMD.EOL + "  }" + PMD.EOL            + " }" + PMD.EOL + " }";    private static final int[][] TEST2_NODES = { { 1, }, { 2, }, { 3, }, { 5, 7, }, { 3, }, { 6, }, { 4, }, {}, };    private static final String TEST2 = "class Foo {" + PMD.EOL + " public void test_2() {" + PMD.EOL            + "  for (int i = 0; i < 1; i++) {" + PMD.EOL + "   i++;" + PMD.EOL + "   i = 8;" + PMD.EOL + "  }"            + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST3_NODES = { { 1, }, { 2, }, { 3, }, { 4, 5, }, { 3, }, {}, };    private static final String TEST3 = "public class Foo {" + PMD.EOL + " public void test_3() {" + PMD.EOL            + "  for (int i = 0; i < 1; i++) {" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST4_NODES = { { 1, }, { 2, }, { 3, }, {}, };    private static final String TEST4 = "public class Foo {" + PMD.EOL + " public void test_4() {" + PMD.EOL            + "  for (; ;) {" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST5_NODES = { { 1, }, { 2, }, { 3, }, { 4, }, {}, };    private static final String TEST6 = "public class Foo {" + PMD.EOL + " public void test_6() {" + PMD.EOL            + "  for (int i = 0; ;) {" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final String TEST7 = "public class Foo {" + PMD.EOL + " public void test_7() {" + PMD.EOL            + "  for (int i = 0; i < 0;) {" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST8_NODES = { { 1, }, { 2, }, { 3, }, { 4, 5, }, { 3, }, {}, };    public static final String TEST8 = "public class Foo {" + PMD.EOL + " public void test_8() {" + PMD.EOL            + "  for (int i = 0; ; i++) {" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    public static final String TEST9 = "public class Foo {" + PMD.EOL + " public void test_9() {" + PMD.EOL            + "  int i = 0;" + PMD.EOL + "  for (; i < 0;) {" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    public static final String TEST10 = "public class Foo {" + PMD.EOL + " public void test_10() {" + PMD.EOL            + "  int i = 0;" + PMD.EOL + "  for (; i < 0; i++) {" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    public static final String TEST11 = "public class Foo {" + PMD.EOL + " public void test_11() {" + PMD.EOL            + "  int i = 0;" + PMD.EOL + "  for (; ; i++) {" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST12_NODES = { { 1, }, { 2, }, { 3, }, { 4, 5, }, { 3, }, {}, };    public static final String TEST12 = "public class Foo {" + PMD.EOL + " public void test_12() {" + PMD.EOL            + "  for (; ;) {" + PMD.EOL + "   int i = 0;" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST13_NODES = { { 1, }, { 2, }, { 3, }, { 5, 9, }, { 3, }, { 6, }, { 7, 8, }, { 8, }, { 4, },        {}, };    public static final String TEST13 = "public class Foo {" + PMD.EOL + " public void test_13() {" + PMD.EOL            + "  for (int i = 0; i < 0; i++) {" + PMD.EOL + "   i = 9;" + PMD.EOL + "   if (i < 8) {" + PMD.EOL            + "    i = 7;" + PMD.EOL + "   }" + PMD.EOL + "   i = 6;" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL            + " }";    private static final int[][] TEST14_NODES = { { 1 }, { 2 }, { 3 }, { 5, 8 }, { 3 }, { 6 }, { 7, 4 }, { 4 }, {} };    public static final String TEST14 = "public class Foo {" + PMD.EOL + " public void test_14() {" + PMD.EOL            + "  for (int i = 0; i < 0; i++) {" + PMD.EOL + "   i = 9;" + PMD.EOL + "   if (i < 8) {" + PMD.EOL            + "    i = 7;" + PMD.EOL + "   }" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST15_NODES = { { 1 }, { 2 }, { 3 }, { 5, 7 }, { 3 }, { 6, 4 }, { 4 }, {} };    public static final String TEST15 = "public class Foo {" + PMD.EOL + " public void test_15() {" + PMD.EOL            + "  for (int i = 0; i < 0; i++) {" + PMD.EOL + "   if (i < 8) {" + PMD.EOL + "    i = 7;" + PMD.EOL            + "   }" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST16_NODES = { { 1 }, { 2 }, { 3 }, { 5, 8 }, { 3 }, { 6, 7 }, { 4 }, { 4 }, {} };    public static final String TEST16 = "public class Foo {" + PMD.EOL + " public void test_16() {" + PMD.EOL            + "  for (int i = 0; i < 0; i++) {" + PMD.EOL + "   if (i < 8) {" + PMD.EOL + "    i = 7;" + PMD.EOL            + "   } else {" + PMD.EOL + "    i = 6;" + PMD.EOL + "   }" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL            + " }";    private static final int[][] TEST17_NODES = { { 1 }, { 2 }, { 3 }, { 5, 10 }, { 3 }, { 6, 7 }, { 4 }, { 8, 9 },        { 4 }, { 4 }, {}, };    public static final String TEST17 = "public class Foo {" + PMD.EOL + " public void test_17() {" + PMD.EOL            + "  for (int i = 0; i < 0; i++) {" + PMD.EOL + "   if (i < 6) {" + PMD.EOL + "    i = 7;" + PMD.EOL            + "   } else if (i > 8) {" + PMD.EOL + "    i = 9;" + PMD.EOL + "   } else {" + PMD.EOL + "    i = 10;"            + PMD.EOL + "   }" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST18_NODES = { { 1 }, { 2 }, { 3 }, { 5, 9 }, { 3 }, { 6 }, { 8, 4 }, { 6 }, { 7 },        {}, };    public static final String TEST18 = "public class Foo {" + PMD.EOL + " public void test_18() {" + PMD.EOL            + "  for (int i = 0; i < 0; i++) {" + PMD.EOL + "   for (int j = 0; j < 0; j++) {" + PMD.EOL + "    j++;"            + PMD.EOL + "   }" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST19_NODES = { { 1 }, { 2 }, { 3 }, { 4, 5 }, { 10 }, { 6, 7 }, { 10 }, { 8, 9 },        { 10 }, { 10 }, {}, };    public static final String TEST19 = "public class Foo {" + PMD.EOL + " public void test_19() {" + PMD.EOL            + "  int i = 0;" + PMD.EOL + "  if (i == 1) {" + PMD.EOL + "   i = 2;" + PMD.EOL + "  } else if (i == 3) {"            + PMD.EOL + "   i = 4;" + PMD.EOL + "  } else if (i == 5) {" + PMD.EOL + "   i = 6;" + PMD.EOL            + "  } else {" + PMD.EOL + "   i = 7;" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST20_NODES = { { 1 }, { 2 }, { 3 }, { 4, 6 }, { 5, 7 }, { 7 }, { 7 }, {} };    public static final String TEST20 = "public class Foo {" + PMD.EOL + " public void test_20() {" + PMD.EOL            + "  int i = 0;" + PMD.EOL + "  if (i == 1) {" + PMD.EOL + "   if (i == 2) {" + PMD.EOL + "    i = 3;"            + PMD.EOL + "   }" + PMD.EOL + "  } else {" + PMD.EOL + "   i = 7;" + PMD.EOL + "  }" + PMD.EOL + " }"            + PMD.EOL + " }";    private static final int[][] TEST21_NODES = { { 1 }, { 2 }, { 3 }, { 4, 9 }, { 5 }, { 7, 8 }, { 5 }, { 6 }, { 11 },        { 10, 11 }, { 11 }, {}, };    public static final String TEST21 = "public class Foo {" + PMD.EOL + " public void test_21() {" + PMD.EOL            + "  int i = 0;" + PMD.EOL + "  if (i == 1) {" + PMD.EOL + "   for (i = 3; i < 4; i++) {" + PMD.EOL            + "    i = 5;" + PMD.EOL + "   }" + PMD.EOL + "   i++;" + PMD.EOL + "  } else if (i < 6) {" + PMD.EOL            + "   i = 7;" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST22_NODES = { { 1 }, { 2 }, { 3 }, { 4, 8 }, { 5 }, { 7, 9 }, { 5 }, { 6 }, { 9 },        {}, };    public static final String TEST22 = "public class Foo {" + PMD.EOL + " public void test_22() {" + PMD.EOL            + "  int i = 0;" + PMD.EOL + "  if (i == 1) {" + PMD.EOL + "   for (i = 3; i < 4; i++) {" + PMD.EOL            + "    i = 5;" + PMD.EOL + "   }" + PMD.EOL + "  } else {" + PMD.EOL + "   i = 7;" + PMD.EOL + "  }"            + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST23_NODES = { { 1 }, { 2 }, { 3 }, { 4, 8 }, { 5 }, { 7, 10 }, { 5 }, { 6 },        { 9, 10 }, { 10 }, {}, };    public static final String TEST23 = "public class Foo {" + PMD.EOL + " public void test_23() {" + PMD.EOL            + "  int i = 0;" + PMD.EOL + "  if (i == 1) {" + PMD.EOL + "   for (i = 3; i < 4; i++) {" + PMD.EOL            + "    i = 5;" + PMD.EOL + "   }" + PMD.EOL + "  } else if (i < 6) {" + PMD.EOL + "   i = 7;" + PMD.EOL            + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST24_NODES = { { 1 }, { 2 }, { 3 }, { 4, 9 }, { 5 }, { 7, 11 }, { 5 }, { 8, 6 },        { 6 }, { 10, 11 }, { 11 }, {}, };    public static final String TEST24 = "public class Foo {" + PMD.EOL + " public void test_24() {" + PMD.EOL            + "  int x = 0;" + PMD.EOL + "  if (x > 2) {" + PMD.EOL + "   for (int i = 0; i < 1; i++) {" + PMD.EOL            + "    if (x > 3) {" + PMD.EOL + "     x++;" + PMD.EOL + "    }" + PMD.EOL + "   }" + PMD.EOL            + "  } else if (x > 4) {" + PMD.EOL + "   x++;" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST25_NODES = { { 1 }, { 2 }, { 3 }, { 4, 5 }, { 5 }, {} };    public static final String TEST25 = "public class Foo {" + PMD.EOL + " public void test_25() {" + PMD.EOL            + "  int x = 0;" + PMD.EOL + "  switch (x) {" + PMD.EOL + "   default:" + PMD.EOL + "    x = 9;" + PMD.EOL            + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST26_NODES = { { 1 }, { 2 }, { 3 }, { 4 }, { 5, 6 }, { 6 }, { 7 }, { 8, 3 }, { 9 },        {}, };    public static final String TEST26 = "public class Foo {" + PMD.EOL + " public void test_26() {" + PMD.EOL            + "  int x = 0;" + PMD.EOL + "  do {" + PMD.EOL + "   if (x > 0) {" + PMD.EOL + "    x++;" + PMD.EOL            + "   }" + PMD.EOL + "   x++;" + PMD.EOL + "  } while (x < 9);" + PMD.EOL + "  x++;" + PMD.EOL + " }"            + PMD.EOL + " }";    private static final int[][] TEST27_NODES = { { 1 }, { 2 }, { 3 }, { 5, 9 }, { 3 }, { 6 }, { 7 }, { 8 }, { 6, 4 }, {}, };    public static final String TEST27 = "public class Foo {" + PMD.EOL + " public void test_27() {" + PMD.EOL            + "  for (int i = 0; i < 36; i++) {" + PMD.EOL + "   int x = 0;" + PMD.EOL + "   do {" + PMD.EOL            + "    x++;" + PMD.EOL + "   } while (x < 9);" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST28_NODES = { { 1 }, { 2 }, { 3 }, { 5, 14 }, { 3 }, { 6 }, { 7 }, { 8, 12 }, { 9 },        { 10, 12 }, { 11 }, { 12 }, { 13 }, { 6, 4 }, {}, };    public static final String TEST28 = "public class Foo {" + PMD.EOL + " private void test_28() {" + PMD.EOL            + "  for (int i = 0; i < 36; i++) {" + PMD.EOL + "   int x = 0;" + PMD.EOL + "   do {" + PMD.EOL            + "    if (x > 0) {" + PMD.EOL + "     x++;" + PMD.EOL + "     switch (i) {" + PMD.EOL + "      case 0:"            + PMD.EOL + "       x = 0;" + PMD.EOL + "       break;" + PMD.EOL + "     }" + PMD.EOL + "    }" + PMD.EOL            + "    x++;" + PMD.EOL + "   } while (x < 9);" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + " }";    private static final int[][] TEST29_NODES = { { 1 }, { 2 }, { 3, 4, 5 }, { 6 }, { 6 }, { 6 }, {}, };    public static final String TEST29 = "public class Foo {" + PMD.EOL + " private void test_29() {" + PMD.EOL            + "  switch(x) {" + PMD.EOL + "   case 1:" + PMD.EOL + "    break; " + PMD.EOL + "   default: " + PMD.EOL            + "    break;" + PMD.EOL + "   case 2:" + PMD.EOL + "    break;" + PMD.EOL + "  }" + PMD.EOL + " }"            + PMD.EOL + "}";    private static final int[][] TEST30_NODES = { { 1 }, { 2 }, { 3 }, { 4, 7 }, { 5, 6 }, { 4 }, { 3 }, {} };    public static final String TEST30 = "public class Foo {" + PMD.EOL + " private void test_30() {" + PMD.EOL            + "  int x = 0;" + PMD.EOL + "  while (true) {" + PMD.EOL + "   while (x>0) {" + PMD.EOL + "     x++;"            + PMD.EOL + "   }" + PMD.EOL + "   continue;" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.symboltable;import static org.junit.Assert.assertEquals;import java.io.File;import java.util.HashSet;import java.util.Set;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.typeresolution.PMDASMClassLoader;public class TypeSetTest {    private PMDASMClassLoader pmdClassLoader = PMDASMClassLoader.getInstance(TypeSetTest.class.getClassLoader());    @Test    public void testASTCompilationUnitPackage() {        TypeSet t = new TypeSet();        t.setASTCompilationUnitPackage("java.lang.");        assertEquals("java.lang.", t.getASTCompilationUnitPackage());    }    @Test    public void testAddImport() {        TypeSet t = new TypeSet();        t.addImport("java.io.File");        assertEquals(1, t.getImportsCount());    }    @Test    public void testFindClassImplicitImport() throws ClassNotFoundException {        TypeSet t = new TypeSet();        Class<?> clazz = t.findClass("String");        assertEquals(String.class, clazz);    }    @Test    public void testFindClassSamePackage() throws ClassNotFoundException {        TypeSet t = new TypeSet();        t.setASTCompilationUnitPackage("net.sourceforge.pmd");        Class<?> clazz = t.findClass("PMD");        assertEquals(PMD.class, clazz);    }    @Test    public void testFindClassExplicitImport() throws ClassNotFoundException {        TypeSet t = new TypeSet();        t.addImport("java.io.File");        Class<?> clazz = t.findClass("File");        assertEquals(File.class, clazz);    }    @Test    public void testFindClassImportOnDemand() throws ClassNotFoundException {        TypeSet t = new TypeSet();        t.addImport("java.io.*");        Class<?> clazz = t.findClass("File");        assertEquals(File.class, clazz);    }    @Test    public void testFindClassPrimitive() throws ClassNotFoundException {        TypeSet t = new TypeSet();        assertEquals(int.class, t.findClass("int"));    }    @Test    public void testFindClassVoid() throws ClassNotFoundException {        TypeSet t = new TypeSet();        assertEquals(void.class, t.findClass("void"));    }    @Test    public void testFindFullyQualified() throws ClassNotFoundException {        TypeSet t = new TypeSet();        assertEquals(String.class, t.findClass("java.lang.String"));        assertEquals(Set.class, t.findClass("java.util.Set"));    }    // inner class tests    @Test    public void testPrimitiveTypeResolver() throws ClassNotFoundException {        TypeSet.Resolver r = new TypeSet.PrimitiveTypeResolver();        assertEquals(int.class, r.resolve("int"));        assertEquals(byte.class, r.resolve("byte"));        assertEquals(long.class, r.resolve("long"));    }    @Test(expected = ClassNotFoundException.class)    public void testPrimitiveTypeResolverWithNull() throws ClassNotFoundException {        TypeSet.Resolver r = new TypeSet.PrimitiveTypeResolver();        r.resolve(null);    }    @Test    public void testVoidTypeResolver() throws ClassNotFoundException {        TypeSet.Resolver r = new TypeSet.VoidResolver();        assertEquals(void.class, r.resolve("void"));    }    @Test(expected = ClassNotFoundException.class)    public void testVoidTypeResolverWithNull() throws ClassNotFoundException {        TypeSet.Resolver r = new TypeSet.VoidResolver();        r.resolve(null);    }    @Test    public void testExplicitImportResolver() throws ClassNotFoundException {        Set<String> imports = new HashSet<>();        imports.add("java.io.File");        TypeSet.Resolver r = new TypeSet.ExplicitImportResolver(pmdClassLoader, imports);        assertEquals(File.class, r.resolve("File"));    }    @Test(expected = ClassNotFoundException.class)    public void testExplicitImportResolverWithNull() throws ClassNotFoundException {        Set<String> imports = new HashSet<>();        imports.add("java.io.File");        TypeSet.Resolver r = new TypeSet.ExplicitImportResolver(pmdClassLoader, imports);        r.resolve(null);    }    @Test(expected = ClassNotFoundException.class)    public void testExplicitImportResolverWithNullAndEmptyImports() throws ClassNotFoundException {        TypeSet.Resolver r = new TypeSet.ExplicitImportResolver(pmdClassLoader, new HashSet<String>());        r.resolve(null);    }    @Test    public void testImplicitImportResolverPass() throws ClassNotFoundException {        TypeSet.Resolver r = new TypeSet.ImplicitImportResolver(pmdClassLoader);        assertEquals(String.class, r.resolve("String"));    }    @Test(expected = ClassNotFoundException.class)    public void testImplicitImportResolverPassFail() throws ClassNotFoundException {        TypeSet.Resolver r = new TypeSet.ImplicitImportResolver(pmdClassLoader);        r.resolve("PMD");    }    @Test(expected = ClassNotFoundException.class)    public void testImplicitImportResolverWithNull() throws ClassNotFoundException {        TypeSet.Resolver r = new TypeSet.ImplicitImportResolver(pmdClassLoader);        r.resolve(null);    }    @Test    public void testCurrentPackageResolverPass() throws ClassNotFoundException {        TypeSet.Resolver r = new TypeSet.CurrentPackageResolver(pmdClassLoader, "net.sourceforge.pmd");        assertEquals(PMD.class, r.resolve("PMD"));    }    @Test(expected = ClassNotFoundException.class)    public void testCurrentPackageResolverWithNull() throws ClassNotFoundException {        TypeSet.Resolver r = new TypeSet.CurrentPackageResolver(pmdClassLoader, "net.sourceforge.pmd");        r.resolve(null);    }    @Test    public void testImportOnDemandResolverPass() throws ClassNotFoundException {        TypeSet.Resolver r = getResolver();        assertEquals(Set.class, r.resolve("Set"));        assertEquals(File.class, r.resolve("File"));    }    @Test(expected = ClassNotFoundException.class)    public void testImportOnDemandResolverWithNull() throws ClassNotFoundException {        TypeSet.Resolver r = getResolver();        r.resolve(null);    }    @Test(expected = ClassNotFoundException.class)    public void importOnDemandResolverFail1() throws ClassNotFoundException {        TypeSet.Resolver r = getResolver();        r.resolve("foo");    }    @Test(expected = ClassNotFoundException.class)    public void importOnDemandResolverFail2() throws ClassNotFoundException {        TypeSet.Resolver r = getResolver();        r.resolve("String");    }    private TypeSet.Resolver getResolver() {        Set<String> imports = new HashSet<>();        imports.add("java.io.*");        imports.add("java.util.*");        TypeSet.Resolver r = new TypeSet.ImportOnDemandResolver(pmdClassLoader, imports);        return r;    }    @Test(expected = ClassNotFoundException.class)    public void testFullyQualifiedNameResolverWithNull() throws ClassNotFoundException {        TypeSet.Resolver r = new TypeSet.FullyQualifiedNameResolver(pmdClassLoader);        r.resolve(null);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.symboltable;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.util.List;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;import net.sourceforge.pmd.lang.java.ast.ASTTryStatement;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.lang.symboltable.NameDeclaration;import net.sourceforge.pmd.lang.symboltable.Scope;public class VariableNameDeclarationTest extends STBBaseTst {    @Test    public void testConstructor() {        parseCode(TEST1);        List<ASTVariableDeclaratorId> nodes = acu.findDescendantsOfType(ASTVariableDeclaratorId.class);        Scope s = nodes.get(0).getScope();        NameDeclaration decl = s.getDeclarations().keySet().iterator().next();        assertEquals("bar", decl.getImage());        assertEquals(3, decl.getNode().getBeginLine());    }    @Test    public void testExceptionBlkParam() {        ASTVariableDeclaratorId id = new ASTVariableDeclaratorId(3);        id.testingOnlySetBeginLine(10);        id.setImage("foo");        ASTFormalParameter param = new ASTFormalParameter(2);        id.jjtSetParent(param);        param.jjtSetParent(new ASTTryStatement(1));        VariableNameDeclaration decl = new VariableNameDeclaration(id);        assertTrue(decl.isExceptionBlockParameter());    }    @Test    public void testIsArray() {        parseCode(TEST3);        VariableNameDeclaration decl = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0).getScope()                .getDeclarations(VariableNameDeclaration.class).keySet().iterator().next();        assertTrue(decl.isArray());    }    @Test    public void testPrimitiveType() {        parseCode(TEST1);        VariableNameDeclaration decl = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0).getScope()                .getDeclarations(VariableNameDeclaration.class).keySet().iterator().next();        assertTrue(decl.isPrimitiveType());    }    @Test    public void testArrayIsReferenceType() {        parseCode(TEST3);        VariableNameDeclaration decl = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0).getScope()                .getDeclarations(VariableNameDeclaration.class).keySet().iterator().next();        assertTrue(decl.isReferenceType());    }    @Test    public void testPrimitiveTypeImage() {        parseCode(TEST3);        NameDeclaration decl = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0).getScope()                .getDeclarations().keySet().iterator().next();        assertEquals("int", ((TypedNameDeclaration) decl).getTypeImage());    }    @Test    public void testRefTypeImage() {        parseCode(TEST4);        NameDeclaration decl = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0).getScope()                .getDeclarations().keySet().iterator().next();        assertEquals("String", ((TypedNameDeclaration) decl).getTypeImage());    }    @Test    public void testParamTypeImage() {        parseCode(TEST5);        NameDeclaration decl = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0).getScope()                .getDeclarations().keySet().iterator().next();        assertEquals("String", ((TypedNameDeclaration) decl).getTypeImage());    }    public static final String TEST1 = "public class Foo {" + PMD.EOL + " void foo() {" + PMD.EOL + "  int bar = 42;"            + PMD.EOL + " }" + PMD.EOL + "}";    public static final String TEST2 = "public class Foo {" + PMD.EOL + " void foo() {" + PMD.EOL            + "  try {} catch(Exception e) {}" + PMD.EOL + " }" + PMD.EOL + "}";    public static final String TEST3 = "public class Foo {" + PMD.EOL + " void foo() {" + PMD.EOL + "  int[] x;"            + PMD.EOL + " }" + PMD.EOL + "}";    public static final String TEST4 = "public class Foo {" + PMD.EOL + " void foo() {" + PMD.EOL + "  String x;"            + PMD.EOL + " }" + PMD.EOL + "}";    public static final String TEST5 = "public class Foo {" + PMD.EOL + " void foo(String x) {}" + PMD.EOL + "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(VariableNameDeclarationTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.symboltable;import static org.junit.Assert.assertTrue;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTIfStatement;public class ScopeCreationVisitorTest extends STBBaseTst {    @Test    public void testScopesAreCreated() {        parseCode(TEST1);        ASTIfStatement n = acu.findDescendantsOfType(ASTIfStatement.class).get(0);        assertTrue(n.getScope() instanceof LocalScope);    }    private static final String TEST1 = "public class Foo {" + PMD.EOL + " void foo() {" + PMD.EOL + "  if (x>2) {}"            + PMD.EOL + " }" + PMD.EOL + "}" + PMD.EOL;    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ScopeCreationVisitorTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.symboltable;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import static org.junit.Assert.fail;import java.util.Iterator;import java.util.List;import java.util.Map;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.lang.java.ast.DummyJavaNode;import net.sourceforge.pmd.lang.java.ast.JavaNode;import net.sourceforge.pmd.lang.java.symboltable.testdata.InnerClass;import net.sourceforge.pmd.lang.java.symboltable.testdata.InnerClass.TheInnerClass;import net.sourceforge.pmd.lang.java.symboltable.testdata.InnerClass.TheInnerClass.EnumTest;import net.sourceforge.pmd.lang.symboltable.NameDeclaration;import net.sourceforge.pmd.lang.symboltable.NameOccurrence;public class ClassScopeTest extends STBBaseTst {    @Test    public void testEnumsClassScope() {        parseCode15(ENUM_SCOPE);    }    @Test    public void testEnumTypeParameter() {        parseCode15(ENUM_TYPE_PARAMETER);    }    @Test    public void testVarArgsEmpty() {        parseCode15("public class Foo {\n" + "  public void bar1(String s, Integer... i) {}\n"                + "  public void bar1() {}\n" + "  public void c() {\n" + "    bar1();\n" + "  }\n" + "}\n");    }    // FIXME - these will break when this goes from Anonymous$1 to Foo$1    @Test    public void testAnonymousInnerClassName() {        ClassNameDeclaration classDeclaration = new ClassNameDeclaration(null);        ClassScope s = new ClassScope("Foo", classDeclaration);        s = new ClassScope(classDeclaration);        assertEquals("Anonymous$1", s.getClassName());        s = new ClassScope(classDeclaration);        assertEquals("Anonymous$2", s.getClassName());    }    @Test    public void testContains() {        ClassNameDeclaration classDeclaration = new ClassNameDeclaration(null);        ClassScope s = new ClassScope("Foo", classDeclaration);        ASTVariableDeclaratorId node = new ASTVariableDeclaratorId(1);        node.setImage("bar");        s.addDeclaration(new VariableNameDeclaration(node));        assertTrue(s.getDeclarations().keySet().iterator().hasNext());    }    @Test    public void testCantContainsSuperToString() {        ClassNameDeclaration classDeclaration = new ClassNameDeclaration(null);        ClassScope s = new ClassScope("Foo", classDeclaration);        JavaNode node = new DummyJavaNode(1);        node.setImage("super.toString");        assertFalse(s.contains(new JavaNameOccurrence(node, node.getImage())));    }    @Test    public void testContainsStaticVariablePrefixedWithClassName() {        ClassNameDeclaration classDeclaration = new ClassNameDeclaration(null);        ClassScope s = new ClassScope("Foo", classDeclaration);        ASTVariableDeclaratorId node = new ASTVariableDeclaratorId(1);        node.setImage("X");        s.addDeclaration(new VariableNameDeclaration(node));        JavaNode node2 = new DummyJavaNode(2);        node2.setImage("Foo.X");        assertTrue(s.contains(new JavaNameOccurrence(node2, node2.getImage())));    }    @Test    public void testClassName() {        parseCode(CLASS_NAME);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        assertEquals("Foo", n.getScope().getEnclosingScope(ClassScope.class).getClassName());    }    @Test    public void testMethodDeclarationRecorded() {        parseCode(METHOD_DECLARATIONS_RECORDED);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        ClassScope s = (ClassScope) n.getScope();        Map<NameDeclaration, List<NameOccurrence>> m = s.getDeclarations();        assertEquals(1, m.size());        MethodNameDeclaration mnd = (MethodNameDeclaration) m.keySet().iterator().next();        assertEquals("bar", mnd.getImage());        ASTMethodDeclaration node = (ASTMethodDeclaration) mnd.getNode().jjtGetParent();        assertTrue(node.isPrivate());    }    @Test    public void testTwoMethodsSameNameDiffArgs() {        // TODO this won't work with String and java.lang.String        parseCode(METHODS_WITH_DIFF_ARG);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map<NameDeclaration, List<NameOccurrence>> m = ((ClassScope) n.getScope()).getDeclarations();        assertEquals(2, m.size());        Iterator<NameDeclaration> i = m.keySet().iterator();        MethodNameDeclaration mnd = (MethodNameDeclaration) i.next();        assertEquals("bar", mnd.getImage());        assertEquals("bar", ((MethodNameDeclaration) i.next()).getImage());    }    @Test    public final void testOneParam() {        parseCode(ONE_PARAM);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map<NameDeclaration, List<NameOccurrence>> m = ((ClassScope) n.getScope()).getDeclarations();        MethodNameDeclaration mnd = (MethodNameDeclaration) m.keySet().iterator().next();        assertEquals("(String)", mnd.getParameterDisplaySignature());    }    @Test    public final void testTwoParams() {        parseCode(TWO_PARAMS);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map<NameDeclaration, List<NameOccurrence>> m = ((ClassScope) n.getScope()).getDeclarations();        MethodNameDeclaration mnd = (MethodNameDeclaration) m.keySet().iterator().next();        assertEquals("(String,int)", mnd.getParameterDisplaySignature());    }    @Test    public final void testNoParams() {        parseCode(NO_PARAMS);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map<NameDeclaration, List<NameOccurrence>> m = ((ClassScope) n.getScope()).getDeclarations();        MethodNameDeclaration mnd = (MethodNameDeclaration) m.keySet().iterator().next();        assertEquals("()", mnd.getParameterDisplaySignature());    }    @Test    public final void testOneParamVararg() {        parseCode15(ONE_PARAM_VARARG);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map<NameDeclaration, List<NameOccurrence>> m = ((ClassScope) n.getScope()).getDeclarations();        MethodNameDeclaration mnd = (MethodNameDeclaration) m.keySet().iterator().next();        assertEquals("(String...)", mnd.getParameterDisplaySignature());    }    @Test    public final void testTwoParamsVararg() {        parseCode15(TWO_PARAMS_VARARG);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map<NameDeclaration, List<NameOccurrence>> m = ((ClassScope) n.getScope()).getDeclarations();        MethodNameDeclaration mnd = (MethodNameDeclaration) m.keySet().iterator().next();        assertEquals("(String,String...)", mnd.getParameterDisplaySignature());    }    @Test    public void testNestedClassesOfImportResolution() {        parseCode(NESTED_CLASSES_OF_IMPORT);        final ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        final ClassScope c = (ClassScope) n.getScope();        assertEquals(EnumTest.class, c.resolveType("TheInnerClass.EnumTest"));    }    @Test    public void testNestedClassesResolution() {        parseForClass(InnerClass.class);        final ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        final ClassScope c = (ClassScope) n.getScope();        assertEquals(InnerClass.class, c.resolveType("InnerClass"));        assertEquals(TheInnerClass.class, c.resolveType("InnerClass.TheInnerClass"));        assertEquals(TheInnerClass.class, c.resolveType("TheInnerClass")); // Within this scope, we can access it directly    }    @Test    public void testImportNestedClassesResolution() {        parseCode(IMPORT_NESTED_CLASSES);        final ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        final ClassScope c = (ClassScope) n.getScope();        assertEquals(EnumTest.class, c.resolveType("EnumTest"));    }    @Test    public final void testNestedClassDeclFound() {        parseCode(NESTED_CLASS_FOUND);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        ClassScope c = (ClassScope) n.getScope();        Map<NameDeclaration, List<NameOccurrence>> m = c.getDeclarations();        ClassNameDeclaration cnd = (ClassNameDeclaration) m.keySet().iterator().next();        assertEquals("Buz", cnd.getImage());    }    @Test    public final void testbuz() {        parseCode(METH);        // SymbolTableViewer st = new SymbolTableViewer();        // acu.jjtAccept(st, null);    }    @Test    public void testMethodUsageSeen() {        parseCode(METHOD_USAGE_SEEN);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map<NameDeclaration, List<NameOccurrence>> m = ((ClassScope) n.getScope()).getDeclarations();        Iterator<Map.Entry<NameDeclaration, List<NameOccurrence>>> i = m.entrySet().iterator();        MethodNameDeclaration mnd;        Map.Entry<NameDeclaration, List<NameOccurrence>> entry;        do {            entry = i.next();            mnd = (MethodNameDeclaration) entry.getKey();        } while (!mnd.getImage().equals("bar"));        List<NameOccurrence> usages = entry.getValue();        assertEquals(1, usages.size());        assertEquals("bar", ((JavaNameOccurrence) usages.get(0)).getImage());    }    @Test    public void testMethodUsageSeenWithThis() {        parseCode(METHOD_USAGE_SEEN_WITH_THIS);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map<NameDeclaration, List<NameOccurrence>> m = ((ClassScope) n.getScope()).getDeclarations();        Iterator<Map.Entry<NameDeclaration, List<NameOccurrence>>> i = m.entrySet().iterator();        MethodNameDeclaration mnd;        Map.Entry<NameDeclaration, List<NameOccurrence>> entry;        do {            entry = i.next();            mnd = (MethodNameDeclaration) entry.getKey();        } while (!mnd.getImage().equals("bar"));        List<NameOccurrence> usages = entry.getValue();        assertEquals(1, usages.size());        assertEquals("bar", ((JavaNameOccurrence) usages.get(0)).getImage());    }    @Test    public void testMethodUsageSeen2() {        parseCode(METHOD_USAGE_SEEN2);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map<NameDeclaration, List<NameOccurrence>> m = ((ClassScope) n.getScope()).getDeclarations();        assertEquals(2, m.size());        for (Map.Entry<NameDeclaration, List<NameOccurrence>> entry : m.entrySet()) {            assertEquals("baz", entry.getKey().getImage());            if (entry.getKey().getNode().getBeginLine() == 2) {                // this is the public method declaration - it is not used                // anywhere                assertEquals(0, entry.getValue().size());            } else if (entry.getKey().getNode().getBeginLine() == 5) {                // this is the private (overloaded) method                assertEquals(1, entry.getValue().size());                // it's used once in line 3                assertEquals(3, entry.getValue().get(0).getLocation().getBeginLine());            } else {                fail("unexpected name declaration");            }        }    }    /**     * Test case for bug report #2410201     */    @Test    public void testNestedClassFieldAndParameter() {        parseCode(NESTED_CLASS_FIELD_AND_PARAM);        ASTMethodDeclaration node = acu.getFirstDescendantOfType(ASTMethodDeclaration.class);        Map<NameDeclaration, List<NameOccurrence>> vd = node.getScope().getDeclarations();        assertEquals(1, vd.size());        for (Map.Entry<NameDeclaration, List<NameOccurrence>> entry : vd.entrySet()) {            assertEquals("field", entry.getKey().getImage());            List<NameOccurrence> occurrences = entry.getValue();            assertEquals(2, occurrences.size());            NameOccurrence no1 = occurrences.get(0);            assertEquals(8, no1.getLocation().getBeginLine());            NameOccurrence no2 = occurrences.get(1);            assertEquals(9, no2.getLocation().getBeginLine());        }    }    @Test    public void testNullType() {        parseCode(TEST_NULL_TYPE);    }    private static final String NESTED_CLASS_FIELD_AND_PARAM = "public class Foo {" + PMD.EOL + " class Test {"            + PMD.EOL + "   public String field;" + PMD.EOL + "   public Test t;" + PMD.EOL + " }" + PMD.EOL            + " public void foo(String field) {" + PMD.EOL + "   Test t = new Test();" + PMD.EOL + "   t.field = field;"            + PMD.EOL + "   t.t.field = field;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String METHOD_USAGE_SEEN2 = "public class Foo {" + PMD.EOL + " public void baz() {" + PMD.EOL            + "  baz(x, y);" + PMD.EOL + " }" + PMD.EOL + " private void baz(int x, int y) {}" + PMD.EOL + "}";    private static final String METHOD_USAGE_SEEN = "public class Foo {" + PMD.EOL + " private void bar() {}" + PMD.EOL            + " public void buz() {" + PMD.EOL + "  bar();" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String METHOD_USAGE_SEEN_WITH_THIS = "public class Foo {" + PMD.EOL + " private void bar() {}"            + PMD.EOL + " public void buz() {" + PMD.EOL + "  this.bar();" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String METH = "public class Test {" + PMD.EOL + "  static { " + PMD.EOL + "   int y; "            + PMD.EOL + "  } " + PMD.EOL + "  void bar(int x) {} " + PMD.EOL + "  void baz(int x) {} " + PMD.EOL + "}";    private static final String NESTED_CLASS_FOUND = "public class Test {" + PMD.EOL + "  private class Buz {} "            + PMD.EOL + "}";    private static final String ONE_PARAM = "public class Test {" + PMD.EOL + "  void bar(String x) {" + PMD.EOL + "  }"            + PMD.EOL + "}";    private static final String TWO_PARAMS = "public class Test {" + PMD.EOL + "  void bar(String x, int y) {" + PMD.EOL            + "  }" + PMD.EOL + "}";    private static final String NO_PARAMS = "public class Test {" + PMD.EOL + "  void bar() {" + PMD.EOL + "  }"            + PMD.EOL + "}";    private static final String ONE_PARAM_VARARG = "public class Test {" + PMD.EOL + "  void bar(String... s) {"            + PMD.EOL + "  }" + PMD.EOL + "}";    private static final String TWO_PARAMS_VARARG = "public class Test {" + PMD.EOL            + "  void bar(String s1, String... s2) {" + PMD.EOL + "  }" + PMD.EOL + "}";    private static final String CLASS_NAME = "public class Foo {}";    private static final String METHOD_DECLARATIONS_RECORDED = "public class Foo {" + PMD.EOL + " private void bar() {}"            + PMD.EOL + "}";    private static final String METHODS_WITH_DIFF_ARG = "public class Foo {" + PMD.EOL            + " private void bar(String x) {}" + PMD.EOL + " private void bar() {}" + PMD.EOL + "}";    private static final String ENUM_SCOPE = "public enum Foo {" + PMD.EOL + " HEAP(\"foo\");" + PMD.EOL            + " private final String fuz;" + PMD.EOL + " public String getFuz() {" + PMD.EOL + "  return fuz;" + PMD.EOL            + " }" + PMD.EOL + "}";    public static final String TEST_NULL_TYPE = "public abstract class NullTypeTest {" + PMD.EOL            + "   protected Comparator<TreeNode> nodesComparator = (o1, o2) -> StringHelper.saveCompare(getFilterableString(o1), getFilterableString(o2));"            + PMD.EOL + "   public abstract String getFilterableString(TreeNode node);" + PMD.EOL + "}";    private static final String ENUM_TYPE_PARAMETER = "public enum Foo {" + PMD.EOL            + "   BAR(isCustomer(BazEnum.FOO_BAR));" + PMD.EOL + "   Foo(boolean isCustomer) { }" + PMD.EOL            + "   private static boolean isCustomer(BazEnum baz) {" + PMD.EOL + "      return false;" + PMD.EOL + "   }"            + PMD.EOL + "}";    private static final String IMPORT_NESTED_CLASSES =            "import net.sourceforge.pmd.lang.java.symboltable.testdata.InnerClass.TheInnerClass.EnumTest;" + PMD.EOL            + "public class Foo {" + PMD.EOL            + " public EnumTest e;" + PMD.EOL            + "}" + PMD.EOL;    private static final String NESTED_CLASSES_OF_IMPORT =            "import net.sourceforge.pmd.lang.java.symboltable.testdata.InnerClass.TheInnerClass;" + PMD.EOL            + "public class Foo {" + PMD.EOL            + " public TheInnerClass.EnumTest e;" + PMD.EOL            + "}" + PMD.EOL;}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.symboltable;import java.util.List;import java.util.Set;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator;import net.sourceforge.pmd.lang.symboltable.NameDeclaration;public class ScopeAndDeclarationFinderTest extends STBBaseTst {    /**     * Unit test for https://sourceforge.net/p/pmd/bugs/1317/     */    @Test    public void testJava8LambdaScoping() {        String source = "public class MultipleLambdas {\n"                + "  Observer a = (o, arg) -> System.out.println(\"a:\" + arg);\n"                + "  Observer b = (o, arg) -> System.out.println(\"b:\" + arg);\n" + "}";        parseCode(source, LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.8"));        List<ASTLambdaExpression> lambdas = acu.findDescendantsOfType(ASTLambdaExpression.class);        Assert.assertEquals(2, lambdas.size());        LocalScope scope1 = (LocalScope) lambdas.get(0).getScope();        LocalScope scope2 = (LocalScope) lambdas.get(1).getScope();        Assert.assertNotSame(scope1, scope2);        for (ASTLambdaExpression l : lambdas) {            LocalScope scope = (LocalScope) l.getScope();            Assert.assertEquals(2, scope.getVariableDeclarations().size());            Assert.assertTrue(scope.contains(new JavaNameOccurrence(null, "o")));            Assert.assertTrue(scope.contains(new JavaNameOccurrence(null, "arg")));            Set<NameDeclaration> declarations = scope.findVariableHere(new JavaNameOccurrence(null, "arg"));            Assert.assertEquals(1, declarations.size());            NameDeclaration decl = declarations.iterator().next();            Assert.assertEquals(1, scope.getVariableDeclarations().get(decl).size());        }    }    @Test    public void testAnnonInnerClassScoping() {        String source = "public class Foo {" + PMD.EOL                + "  public static final Creator<Foo> CREATOR = new Creator<Foo>() {" + PMD.EOL                + "    @Override public Foo createFromParcel(Parcel source) {" + PMD.EOL                + "      return new Foo();" + PMD.EOL                + "    }" + PMD.EOL                + "    @Override public Foo[] newArray(int size) {" + PMD.EOL                + "      return new Foo[size];" + PMD.EOL                + "    }" + PMD.EOL                + "  };" + PMD.EOL                + "}" + PMD.EOL;        parseCode(source, LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.6"));        ClassScope cs = (ClassScope) acu.getFirstDescendantOfType(ASTClassOrInterfaceDeclaration.class).getScope();        Assert.assertEquals(1, cs.getClassDeclarations().size()); // There should be 1 anonymous class        List<ASTMethodDeclarator> methods = acu.findDescendantsOfType(ASTMethodDeclarator.class);        Assert.assertEquals(2, methods.size());        ClassScope scope1 = methods.get(0).getScope().getEnclosingScope(ClassScope.class);        ClassScope scope2 = methods.get(1).getScope().getEnclosingScope(ClassScope.class);        Assert.assertSame(scope1, scope2);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.symboltable;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import java.util.List;import java.util.Map;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;import net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTName;import net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.lang.symboltable.NameDeclaration;import net.sourceforge.pmd.lang.symboltable.NameOccurrence;public class LocalScopeTest extends STBBaseTst {    @Test    public void testNameWithThisOrSuperIsNotFlaggedAsUnused() {        LocalScope scope = new LocalScope();        ASTName name = new ASTName(1);        name.setImage("foo");        ASTPrimaryPrefix prefix = new ASTPrimaryPrefix(2);        prefix.setUsesThisModifier();        name.jjtAddChild(prefix, 1);        JavaNameOccurrence occ = new JavaNameOccurrence(name, "foo");        scope.addNameOccurrence(occ);        assertFalse(scope.getDeclarations().keySet().iterator().hasNext());    }    @Test    public void testNameWithSuperIsNotFlaggedAsUnused() {        LocalScope scope = new LocalScope();        ASTName name = new ASTName(1);        name.setImage("foo");        ASTPrimaryPrefix prefix = new ASTPrimaryPrefix(2);        prefix.setUsesSuperModifier();        name.jjtAddChild(prefix, 1);        JavaNameOccurrence occ = new JavaNameOccurrence(name, "foo");        scope.addNameOccurrence(occ);        assertFalse(scope.getDeclarations().keySet().iterator().hasNext());    }    @Test    public void testLocalVariableDeclarationFound() {        parseCode(TEST1);        List<ASTVariableDeclaratorId> nodes = acu.findDescendantsOfType(ASTVariableDeclaratorId.class);        ASTVariableDeclaratorId node = nodes.get(0);        Map<NameDeclaration, List<NameOccurrence>> vars = node.getScope().getDeclarations();        assertEquals(1, vars.size());        NameDeclaration decl = vars.keySet().iterator().next();        assertEquals("b", decl.getImage());    }    @Test    public void testQualifiedNameOccurrence() {        parseCode(TEST2);        List<ASTVariableDeclaratorId> nodes = acu.findDescendantsOfType(ASTVariableDeclaratorId.class);        ASTVariableDeclaratorId node = nodes.get(0);        Map<NameDeclaration, List<NameOccurrence>> vars = node.getScope().getDeclarations();        NameDeclaration decl = vars.keySet().iterator().next();        JavaNameOccurrence occ = (JavaNameOccurrence) vars.get(decl).get(0);        assertEquals("b", occ.getImage());    }    @Test    public void testPostfixUsageIsRecorded() {        parseCode(TEST3);        List<ASTVariableDeclaratorId> nodes = acu.findDescendantsOfType(ASTVariableDeclaratorId.class);        ASTVariableDeclaratorId node = nodes.get(0);        Map<NameDeclaration, List<NameOccurrence>> vars = node.getScope().getDeclarations();        NameDeclaration decl = vars.keySet().iterator().next();        List<NameOccurrence> usages = vars.get(decl);        JavaNameOccurrence occ = (JavaNameOccurrence) usages.get(0);        assertEquals(4, occ.getLocation().getBeginLine());    }    @Test    public void testLocalVariableTypesAreRecorded() {        parseCode(TEST1);        List<ASTVariableDeclaratorId> nodes = acu.findDescendantsOfType(ASTVariableDeclaratorId.class);        Map<NameDeclaration, List<NameOccurrence>> vars = nodes.get(0).getScope().getDeclarations();        VariableNameDeclaration decl = (VariableNameDeclaration) vars.keySet().iterator().next();        assertEquals("Bar", decl.getTypeImage());    }    @Test    public void testMethodArgumentTypesAreRecorded() {        parseCode(TEST5);        List<ASTFormalParameter> nodes = acu.findDescendantsOfType(ASTFormalParameter.class);        Map<NameDeclaration, List<NameOccurrence>> vars = nodes.get(0).getScope().getDeclarations();        VariableNameDeclaration decl = (VariableNameDeclaration) vars.keySet().iterator().next();        assertEquals("String", decl.getTypeImage());    }    @Test    public void testgetEnclosingMethodScope() {        parseCode(TEST4);        ASTLocalVariableDeclaration node = acu.findDescendantsOfType(ASTLocalVariableDeclaration.class).get(0);        LocalScope scope = (LocalScope) node.getScope();        MethodScope ms = scope.getEnclosingScope(MethodScope.class);        assertEquals(2, ms.getDeclarations().size());    }    public static final String TEST1 = "public class Foo {" + PMD.EOL + " void foo() {" + PMD.EOL            + "  Bar b = new Bar();" + PMD.EOL + " }" + PMD.EOL + "}";    public static final String TEST2 = "public class Foo {" + PMD.EOL + " void foo() {" + PMD.EOL            + "  Bar b = new Bar();" + PMD.EOL + "  b.buz = 2;" + PMD.EOL + " }" + PMD.EOL + "}";    public static final String TEST3 = "public class Foo {" + PMD.EOL + " void foo() {" + PMD.EOL + "  int x = 2;"            + PMD.EOL + "  x++;" + PMD.EOL + " }" + PMD.EOL + "}";    public static final String TEST4 = "public class Foo {" + PMD.EOL + " void foo(String x, String z) { int y; }"            + PMD.EOL + "}";    public static final String TEST5 = "public class Foo {" + PMD.EOL + " void foo(String x);" + PMD.EOL + "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(LocalScopeTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.symboltable;import java.util.ArrayList;import java.util.List;import java.util.Map;import javax.swing.JComponent;import javax.swing.JTextField;import org.junit.Assert;import org.junit.Test;/** * Unit test for {@link SimpleTypedNameDeclaration} */public class SimpleTypedNameDeclarationTest {    /**     * Tests the equal method.     */    @Test    public void testEquals() {        Assert.assertEquals(byClass(SimpleTypedNameDeclaration.class), byClass(SimpleTypedNameDeclaration.class));        Assert.assertEquals(byClass(List.class), byClass(ArrayList.class));        Assert.assertEquals(byClass(ArrayList.class), byClass(List.class));        Assert.assertEquals(byName("String"), byName("String"));        Assert.assertEquals(byClass(String.class), byName("String"));        Assert.assertEquals(byClass(JComponent.class), byClass(JTextField.class));        Assert.assertFalse(byClass(Map.class).equals(byClass(List.class)));        Assert.assertFalse(byName("A").equals(byName("B")));        Assert.assertFalse(byClass(String.class).equals(byName("A")));        Assert.assertEquals(by(Double.TYPE, "double"), by(null, "double"));        Assert.assertEquals(by(Double.class, "Double"), by(null, "double"));        Assert.assertEquals(by(Character.class, "Character"), by(null, "char"));        Assert.assertEquals(by(Double.TYPE, "double"), by(null, "float"));        Assert.assertEquals(by(Double.TYPE, "double"), by(null, "int"));        Assert.assertEquals(by(Double.TYPE, "double"), by(Integer.class, "Integer"));        Assert.assertEquals(by(Double.TYPE, "double"), by(null, "long"));        Assert.assertEquals(by(Double.TYPE, "double"), by(Long.TYPE, "long"));        Assert.assertEquals(by(Double.TYPE, "double"), by(Long.class, "Long"));        Assert.assertEquals(by(Float.TYPE, "float"), by(null, "int"));        Assert.assertEquals(by(Float.TYPE, "float"), by(Integer.TYPE, "int"));        Assert.assertEquals(by(Float.TYPE, "float"), by(Integer.class, "Integer"));        Assert.assertEquals(by(Float.TYPE, "float"), by(null, "long"));        Assert.assertEquals(by(Float.TYPE, "float"), by(Long.TYPE, "long"));        Assert.assertEquals(by(Float.TYPE, "float"), by(Long.class, "Long"));        Assert.assertEquals(by(Integer.TYPE, "int"), by(null, "char"));        Assert.assertEquals(by(Integer.TYPE, "int"), by(Character.TYPE, "char"));        Assert.assertEquals(by(Integer.TYPE, "int"), by(Character.class, "Character"));        Assert.assertEquals(by(Long.TYPE, "long"), by(null, "int"));        Assert.assertEquals(by(Long.TYPE, "long"), by(Integer.TYPE, "int"));        Assert.assertEquals(by(Long.TYPE, "long"), by(Integer.class, "Integer"));        Assert.assertEquals(by(Long.TYPE, "long"), by(null, "char"));        Assert.assertEquals(by(Long.TYPE, "long"), by(Character.TYPE, "char"));        Assert.assertEquals(by(Long.TYPE, "long"), by(Character.class, "Character"));        // should always equal to Object        Assert.assertEquals(by(Object.class, "Object"), by(null, "Something"));        Assert.assertEquals(withNext(byName("Foo.I"), "Foo.B"), byName("Foo.I"));        Assert.assertEquals(byName("Foo.I"), withNext(byName("Foo.I"), "Foo.B"));    }    private static SimpleTypedNameDeclaration byClass(Class<?> c) {        return new SimpleTypedNameDeclaration(c.getSimpleName(), c);    }    private static SimpleTypedNameDeclaration byName(String n) {        return new SimpleTypedNameDeclaration(n, null);    }    private static SimpleTypedNameDeclaration by(Class<?> c, String n) {        return new SimpleTypedNameDeclaration(n, c);    }    private static SimpleTypedNameDeclaration withNext(SimpleTypedNameDeclaration next, String n) {        SimpleTypedNameDeclaration t = new SimpleTypedNameDeclaration(n, null);        t.addNext(next);        return t;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.symboltable;import static org.junit.Assert.assertEquals;import java.util.List;import java.util.Map;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;import net.sourceforge.pmd.lang.symboltable.NameDeclaration;import net.sourceforge.pmd.lang.symboltable.NameOccurrence;public class MethodScopeTest extends STBBaseTst {    @Test    public void testMethodParameterOccurrenceRecorded() {        parseCode(TEST1);        Map<NameDeclaration, List<NameOccurrence>> m = acu.findDescendantsOfType(ASTMethodDeclaration.class).get(0)                .getScope().getDeclarations();        NameDeclaration vnd = m.keySet().iterator().next();        assertEquals("bar", vnd.getImage());        List<NameOccurrence> occs = m.get(vnd);        NameOccurrence occ = occs.get(0);        assertEquals(3, occ.getLocation().getBeginLine());    }    @Test    public void testMethodName() {        parseCode(TEST1);        ASTMethodDeclaration meth = acu.findDescendantsOfType(ASTMethodDeclaration.class).get(0);        MethodScope ms = (MethodScope) meth.getScope();        assertEquals(ms.getName(), "foo");    }    @Test    public void testGenerics() {        parseCode(TEST_GENERICS);    }    public static final String TEST1 = "public class Foo {" + PMD.EOL + " void foo(int bar) {" + PMD.EOL + "  bar = 2;"            + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST_GENERICS = "public class Tree {" + PMD.EOL + "  private List<Object> subForest;"            + PMD.EOL + "  public <B> Tree<B> fmap(final F<B> f) { return Tree.<B>foo(); }" + PMD.EOL            + "  public List<Object> subForest() { return null; }" + PMD.EOL + "}" + PMD.EOL;}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.symboltable;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.List;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression;public class NameOccurrencesTest extends STBBaseTst {    @Test    public void testSuper() {        parseCode(TEST1);        List<ASTPrimaryExpression> nodes = acu.findDescendantsOfType(ASTPrimaryExpression.class);        NameFinder occs = new NameFinder(nodes.get(0));        assertEquals("super", occs.getNames().get(0).getImage());    }    @Test    public void testThis() {        parseCode(TEST2);        List<ASTPrimaryExpression> nodes = acu.findDescendantsOfType(ASTPrimaryExpression.class);        NameFinder occs = new NameFinder(nodes.get(0));        assertEquals("this", occs.getNames().get(0).getImage());        assertEquals("x", occs.getNames().get(1).getImage());    }    @Test    public void testNameLinkage() {        parseCode(TEST2);        List<ASTPrimaryExpression> nodes = acu.findDescendantsOfType(ASTPrimaryExpression.class);        NameFinder occs = new NameFinder(nodes.get(0));        JavaNameOccurrence thisNameOccurrence = occs.getNames().get(0);        assertEquals(thisNameOccurrence.getNameForWhichThisIsAQualifier(), occs.getNames().get(1));    }    @Test    public void testSimpleVariableOccurrence() {        parseCode(TEST3);        List<ASTPrimaryExpression> nodes = acu.findDescendantsOfType(ASTPrimaryExpression.class);        NameFinder occs = new NameFinder(nodes.get(0));        assertEquals("x", occs.getNames().get(0).getImage());        assertFalse(occs.getNames().get(0).isThisOrSuper());        assertFalse(occs.getNames().get(0).isMethodOrConstructorInvocation());        assertTrue(occs.getNames().get(0).isOnLeftHandSide());    }    @Test    public void testQualifiedOccurrence() {        parseCode(TEST4);        List<ASTPrimaryExpression> nodes = acu.findDescendantsOfType(ASTPrimaryExpression.class);        NameFinder occs = new NameFinder(nodes.get(0));        assertEquals("b", occs.getNames().get(0).getImage());        assertEquals("x", occs.getNames().get(1).getImage());    }    @Test    public void testIsSelfAssignment() {        parseCode(TEST5);        List<ASTPrimaryExpression> nodes = acu.findDescendantsOfType(ASTPrimaryExpression.class);        NameFinder occs = new NameFinder(nodes.get(2));        assertTrue(occs.getNames().get(0).isSelfAssignment());        parseCode(TEST6);        nodes = acu.findDescendantsOfType(ASTPrimaryExpression.class);        occs = new NameFinder(nodes.get(2));        assertTrue(occs.getNames().get(0).isSelfAssignment());    }    @Test    public void testEnumStaticUsage() {        parseCode(TEST_ENUM);        List<ASTPrimaryExpression> nodes = acu.findDescendantsOfType(ASTPrimaryExpression.class);        NameFinder occs = new NameFinder(nodes.get(4));        List<JavaNameOccurrence> names = occs.getNames();        assertEquals(3, names.size());        assertEquals("myEnum", names.get(0).getImage());        assertFalse(names.get(0).isMethodOrConstructorInvocation());        assertEquals("desc", names.get(1).getImage());        assertFalse(names.get(1).isMethodOrConstructorInvocation());        assertEquals("equals", names.get(2).getImage());        assertTrue(names.get(2).isMethodOrConstructorInvocation());    }    public static final String TEST1 = "public class Foo {" + PMD.EOL + " void foo() {" + PMD.EOL + "  super.x = 2;"            + PMD.EOL + " }" + PMD.EOL + "}";    public static final String TEST2 = "public class Foo {" + PMD.EOL + " void foo() {" + PMD.EOL + "  this.x = 2;"            + PMD.EOL + " }" + PMD.EOL + "}";    public static final String TEST3 = "public class Foo {" + PMD.EOL + " void foo() {" + PMD.EOL + "  x = 2;" + PMD.EOL            + " }" + PMD.EOL + "}";    public static final String TEST4 = "public class Foo {" + PMD.EOL + " void foo() {" + PMD.EOL + "  b.x = 2;"            + PMD.EOL + " }" + PMD.EOL + "}";    public static final String TEST5 = "public class Foo{" + PMD.EOL + "    private int counter;" + PMD.EOL            + "    private Foo(){" + PMD.EOL + "        counter = 0;" + PMD.EOL + "    }" + PMD.EOL            + "    private int foo(){" + PMD.EOL + "        if (++counter < 3) {" + PMD.EOL + "            return 0;"            + PMD.EOL + "        }" + PMD.EOL + "        return 1;" + PMD.EOL + "    }" + PMD.EOL + "}";    public static final String TEST6 = "public class Foo{" + PMD.EOL + "    private int counter;" + PMD.EOL            + "    private Foo(){" + PMD.EOL + "        counter = 0;" + PMD.EOL + "    }" + PMD.EOL            + "    private int foo(){" + PMD.EOL + "        if (++this.counter < 3) {" + PMD.EOL            + "            return 0;" + PMD.EOL + "        }" + PMD.EOL + "        return 1;" + PMD.EOL + "    }"            + PMD.EOL + "}";    public static final String TEST_ENUM = "public enum MyEnum {" + PMD.EOL + "  A(\"a\");" + PMD.EOL            + "  private final String desc;" + PMD.EOL + "  private MyEnum(String desc) {" + PMD.EOL            + "    this.desc = desc;" + PMD.EOL + "  }" + PMD.EOL + "  public static MyEnum byDesc(String desc) {"            + PMD.EOL + "    for (MyEnum myEnum : value()) {" + PMD.EOL            + "      if (myEnum.desc.equals(desc)) return myEnum;" + PMD.EOL + "    }" + PMD.EOL + "    return null;"            + PMD.EOL + "  }" + PMD.EOL + " }";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(NameOccurrencesTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.symboltable;import static org.junit.Assert.assertEquals;import java.util.List;import java.util.Map;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.symboltable.NameDeclaration;import net.sourceforge.pmd.lang.symboltable.NameOccurrence;import net.sourceforge.pmd.lang.symboltable.Scope;public class GlobalScopeTest extends STBBaseTst {    @Test    public void testClassDeclAppears() {        parseCode(TEST1);        ASTCompilationUnit decl = acu;        Scope scope = decl.getScope();        Map<NameDeclaration, List<NameOccurrence>> m = scope.getDeclarations();        ClassNameDeclaration classNameDeclaration = (ClassNameDeclaration) m.keySet().iterator().next();        assertEquals(classNameDeclaration.getImage(), "Foo");    }    @Test    public void testEnums() {        parseCode15(TEST2);    }    private static final String TEST1 = "public class Foo {}" + PMD.EOL;    private static final String TEST2 = "public enum Bar {" + PMD.EOL + "  FOO1 {          " + PMD.EOL            + "    private static final String FIELD_NAME = \"\";" + PMD.EOL + "  }," + PMD.EOL + "  FOO2 {          "            + PMD.EOL + "    private static final String FIELD_NAME = \"\";" + PMD.EOL + "  }" + PMD.EOL + "}"            + PMD.EOL;}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.symboltable;import static org.junit.Assert.assertEquals;import java.util.List;import java.util.Map;import java.util.Set;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.lang.symboltable.NameDeclaration;import net.sourceforge.pmd.lang.symboltable.NameOccurrence;public class MethodNameDeclarationTest extends STBBaseTst {    @Test    public void testEquality() {        // Verify proper number of nodes are not equal        parseCode15(SIMILAR);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map<NameDeclaration, List<NameOccurrence>> m = ((ClassScope) n.getScope()).getDeclarations();        Set<NameDeclaration> methodNameDeclarations = m.keySet();        assertEquals("Wrong number of method name declarations", methodNameDeclarations.size(), 3);    }    private static final String SIMILAR = "public class Foo {" + PMD.EOL + " public void bar() {" + PMD.EOL            + "  bar(x, y);" + PMD.EOL + " }" + PMD.EOL + " private void bar(int x, int y) {}" + PMD.EOL            + " private void bar(int x, int... y) {}" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.symboltable;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import java.util.Iterator;import java.util.List;import java.util.Map;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.symboltable.NameDeclaration;import net.sourceforge.pmd.lang.symboltable.NameOccurrence;public class SourceFileScopeTest extends STBBaseTst {    @Test    public void testClassDeclAppears() {        parseCode(TEST1);        Map<NameDeclaration, List<NameOccurrence>> m = acu.getScope().getDeclarations();        ClassNameDeclaration classNameDeclaration = (ClassNameDeclaration) m.keySet().iterator().next();        assertEquals(classNameDeclaration.getImage(), "Foo");    }    @Test    public void testPackageIsEmptyString() {        parseCode(TEST1);        ASTCompilationUnit decl = acu;        assertEquals(decl.getScope().getEnclosingScope(SourceFileScope.class).getPackageName(), "");    }    @Test    public void testPackageNameFound() {        parseCode(TEST2);        ASTCompilationUnit decl = acu;        assertEquals(decl.getScope().getEnclosingScope(SourceFileScope.class).getPackageName(), "foo.bar");    }    @Test    public void testNestedClasses() {        parseCode(TEST3);        Map<NameDeclaration, List<NameOccurrence>> m = acu.getScope().getDeclarations();        Iterator<NameDeclaration> iterator = m.keySet().iterator();        ClassNameDeclaration classNameDeclaration = (ClassNameDeclaration) iterator.next();        assertEquals(classNameDeclaration.getImage(), "Foo");        assertFalse(iterator.hasNext());    }    private static final String TEST1 = "public class Foo {}" + PMD.EOL;    private static final String TEST2 = "package foo.bar;" + PMD.EOL + "public class Foo {" + PMD.EOL + "}" + PMD.EOL;    private static final String TEST3 = "public class Foo {" + PMD.EOL + " public class Bar {" + PMD.EOL + " }"            + PMD.EOL + "}" + PMD.EOL;}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.symboltable;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import static org.junit.Assert.fail;import java.util.Iterator;import java.util.List;import java.util.Map;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.java.ast.ASTBlock;import net.sourceforge.pmd.lang.java.ast.ASTCatchStatement;import net.sourceforge.pmd.lang.java.ast.ASTEqualityExpression;import net.sourceforge.pmd.lang.java.ast.ASTInitializer;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.lang.symboltable.NameDeclaration;import net.sourceforge.pmd.lang.symboltable.NameOccurrence;import net.sourceforge.pmd.lang.symboltable.Scope;public class AcceptanceTest extends STBBaseTst {    @Test    public void testClashingSymbols() {        parseCode(TEST1);    }    @Test    public void testInitializer() {        parseCode(TEST_INITIALIZERS);        ASTInitializer a = acu.findDescendantsOfType(ASTInitializer.class).get(0);        assertFalse(a.isStatic());        a = acu.findDescendantsOfType(ASTInitializer.class).get(1);        assertTrue(a.isStatic());    }    @Test    public void testCatchBlocks() {        parseCode(TEST_CATCH_BLOCKS);        ASTCatchStatement c = acu.findDescendantsOfType(ASTCatchStatement.class).get(0);        ASTBlock a = c.findDescendantsOfType(ASTBlock.class).get(0);        Scope s = a.getScope();        Map<NameDeclaration, List<NameOccurrence>> vars = s.getParent().getDeclarations();        assertEquals(1, vars.size());        NameDeclaration v = vars.keySet().iterator().next();        assertEquals("e", v.getImage());        assertEquals(1, (vars.get(v)).size());    }    @Test    public void testEq() {        parseCode(TEST_EQ);        ASTEqualityExpression e = acu.findDescendantsOfType(ASTEqualityExpression.class).get(0);        ASTMethodDeclaration method = e.getFirstParentOfType(ASTMethodDeclaration.class);        Scope s = method.getScope();        Map<NameDeclaration, List<NameOccurrence>> m = s.getDeclarations();        assertEquals(2, m.size());        for (Map.Entry<NameDeclaration, List<NameOccurrence>> entry : m.entrySet()) {            NameDeclaration vnd = entry.getKey();            List<NameOccurrence> usages = entry.getValue();            if (vnd.getImage().equals("a") || vnd.getImage().equals("b")) {                assertEquals(1, usages.size());                assertEquals(3, usages.get(0).getLocation().getBeginLine());            } else {                fail("Unkown variable " + vnd);            }        }    }    @Test    public void testFieldFinder() {        parseCode(TEST_FIELD);        // System.out.println(TEST_FIELD);        ASTVariableDeclaratorId declaration = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(1);        assertEquals(3, declaration.getBeginLine());        assertEquals("bbbbbbbbbb", declaration.getImage());        assertEquals(1, declaration.getUsages().size());        NameOccurrence no = declaration.getUsages().get(0);        Node location = no.getLocation();        assertEquals(6, location.getBeginLine());        // System.out.println("variable " + declaration.getImage() + " is used        // here: " + location.getImage());    }    @Test    public void testDemo() {        parseCode(TEST_DEMO);        // System.out.println(TEST_DEMO);        ASTMethodDeclaration node = acu.findDescendantsOfType(ASTMethodDeclaration.class).get(0);        Scope s = node.getScope();        Map<NameDeclaration, List<NameOccurrence>> m = s.getDeclarations();        for (Iterator<NameDeclaration> i = m.keySet().iterator(); i.hasNext();) {            NameDeclaration d = i.next();            assertEquals("buz", d.getImage());            assertEquals("ArrayList", ((TypedNameDeclaration) d).getTypeImage());            List<NameOccurrence> u = m.get(d);            assertEquals(1, u.size());            NameOccurrence o = u.get(0);            int beginLine = o.getLocation().getBeginLine();            assertEquals(3, beginLine);            // System.out.println("Variable: " + d.getImage());            // System.out.println("Type: " + d.getTypeImage());            // System.out.println("Usages: " + u.size());            // System.out.println("Used in line " + beginLine);        }    }    @Test    public void testEnum() {        parseCode(NameOccurrencesTest.TEST_ENUM);        ASTVariableDeclaratorId vdi = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0);        List<NameOccurrence> usages = vdi.getUsages();        assertEquals(2, usages.size());        assertEquals(5, usages.get(0).getLocation().getBeginLine());        assertEquals(9, usages.get(1).getLocation().getBeginLine());    }    @Test    public void testInnerOuterClass() {        parseCode(TEST_INNER_CLASS);        ASTVariableDeclaratorId vdi = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0);        List<NameOccurrence> usages = vdi.getUsages();        assertEquals(2, usages.size());        assertEquals(5, usages.get(0).getLocation().getBeginLine());        assertEquals(10, usages.get(1).getLocation().getBeginLine());    }    /**     * Unit test for bug #1490     *     * @see <a href="https://sourceforge.net/p/pmd/bugs/1490/">#1490 [java] PMD     *      Error while processing - NullPointerException</a>     */    @Test    public void testNullPointerEnumValueOfOverloaded() {        parseCode("public enum EsmDcVoltageSensor {\n" + "    A;\n" + "    void bar(int ... args) {\n"                + "        int idx;\n" + "        int startIdx;\n"                + "        String name = EsmDcVoltageSensor.valueOf((byte) (idx - startIdx)).getName();\n" + "    }\n"                // that's the overloaded method                + "    public EsmDCVoltageSensor valueOf(byte b) {\n"                + "    }\n" + "}\n");    }    private static final String TEST_DEMO = "public class Foo  {" + PMD.EOL + " void bar(ArrayList buz) { " + PMD.EOL            + "  buz.add(\"foo\");" + PMD.EOL + " } " + PMD.EOL + "}" + PMD.EOL;    private static final String TEST_EQ = "public class Foo  {" + PMD.EOL + " boolean foo(String a, String b) { "            + PMD.EOL + "  return a == b; " + PMD.EOL + " } " + PMD.EOL + "}" + PMD.EOL;    private static final String TEST1 = "import java.io.*;" + PMD.EOL + "public class Foo  {" + PMD.EOL            + " void buz( ) {" + PMD.EOL + "  Object o = new Serializable() { int x; };" + PMD.EOL            + "  Object o1 = new Serializable() { int x; };" + PMD.EOL + " }" + PMD.EOL + "}" + PMD.EOL;    private static final String TEST_INITIALIZERS = "public class Foo  {" + PMD.EOL + " {} " + PMD.EOL + " static {} "            + PMD.EOL + "}" + PMD.EOL;    private static final String TEST_CATCH_BLOCKS = "public class Foo  {" + PMD.EOL + " void foo() { " + PMD.EOL            + "  try { " + PMD.EOL + "  } catch (Exception e) { " + PMD.EOL + "   e.printStackTrace(); " + PMD.EOL            + "  } " + PMD.EOL + " } " + PMD.EOL + "}" + PMD.EOL;    private static final String TEST_FIELD = "public class MyClass {" + PMD.EOL + " private int aaaaaaaaaa; " + PMD.EOL            + " boolean bbbbbbbbbb = MyClass.ASCENDING; " + PMD.EOL + " private int zzzzzzzzzz;" + PMD.EOL            + " private void doIt() {" + PMD.EOL + "  if (bbbbbbbbbb) {" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL            + "}" + PMD.EOL;    public static final String TEST_INNER_CLASS = "public class Outer {" + PMD.EOL + "  private static class Inner {"            + PMD.EOL + "    private int i;" + PMD.EOL + "    private Inner(int i) {" + PMD.EOL + "      this.i = i;"            + PMD.EOL + "    }" + PMD.EOL + "  }" + PMD.EOL + "  public int modify(int i) {" + PMD.EOL            + "    Inner in = new Inner(i);" + PMD.EOL + "    return in.i;" + PMD.EOL + "  }" + PMD.EOL + "}" + PMD.EOL;    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(AcceptanceTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.symboltable;import static org.junit.Assert.assertEquals;import java.util.ArrayList;import java.util.List;import org.junit.Test;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.lang.symboltable.ImageFinderFunction;import net.sourceforge.pmd.lang.symboltable.NameDeclaration;public class ImageFinderFunctionTest {    @Test    public void testSingleImage() {        ImageFinderFunction f = new ImageFinderFunction("foo");        ASTVariableDeclaratorId node = new ASTVariableDeclaratorId(1);        node.setImage("foo");        NameDeclaration decl = new VariableNameDeclaration(node);        f.applyTo(decl);        assertEquals(decl, f.getDecl());    }    @Test    public void testSeveralImages() {        List<String> imgs = new ArrayList<>();        imgs.add("Foo.foo");        imgs.add("foo");        ImageFinderFunction f = new ImageFinderFunction(imgs);        ASTVariableDeclaratorId node = new ASTVariableDeclaratorId(1);        node.setImage("foo");        NameDeclaration decl = new VariableNameDeclaration(node);        f.applyTo(decl);        assertEquals(decl, f.getDecl());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ImageFinderFunctionTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.optimizations;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class OptimizationsRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-optimizations";    @Override    public void setUp() {        addRule(RULESET, "AddEmptyString");        addRule(RULESET, "AvoidArrayLoops");        addRule(RULESET, "AvoidInstantiatingObjectsInLoops");        addRule(RULESET, "LocalVariableCouldBeFinal");        addRule(RULESET, "MethodArgumentCouldBeFinal");        addRule(RULESET, "RedundantFieldInitializer");        addRule(RULESET, "SimplifyStartsWith");        addRule(RULESET, "UnnecessaryWrapperObjectCreation");        addRule(RULESET, "UseArrayListInsteadOfVector");        addRule(RULESET, "UseArraysAsList");        addRule(RULESET, "UseStringBufferForStringAppends");        addRule(RULESET, "PrematureDeclaration");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.controversial;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class ControversialRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-controversial";    @Override    public void setUp() {        addRule(RULESET, "AssignmentInOperand");        addRule(RULESET, "AvoidLiteralsInIfCondition");        addRule(RULESET, "AvoidPrefixingMethodParameters");        addRule(RULESET, "AvoidUsingNativeCode");        addRule(RULESET, "AvoidUsingShortType");        addRule(RULESET, "AvoidUsingVolatile");        addRule(RULESET, "AtLeastOneConstructor");        addRule(RULESET, "AvoidFinalLocalVariable");        addRule(RULESET, "CallSuperInConstructor");        addRule(RULESET, "DataflowAnomalyAnalysis");        addRule(RULESET, "DefaultPackage");        addRule(RULESET, "DontImportSun");        addRule(RULESET, "DoNotCallGarbageCollectionExplicitly");        addRule(RULESET, "NullAssignment");        addRule(RULESET, "OnlyOneReturn");        addRule(RULESET, "OneDeclarationPerLine");        addRule(RULESET, "SuspiciousOctalEscape");        addRule(RULESET, "UnnecessaryConstructor");        addRule(RULESET, "UnnecessaryParentheses");        addRule(RULESET, "UseConcurrentHashMap");        addRule(RULESET, "UseObjectForClearerAPI");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.imports;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class ImportsRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-imports";    @Override    public void setUp() {        addRule(RULESET, "DontImportJavaLang");        addRule(RULESET, "DuplicateImports");        addRule(RULESET, "ImportFromSamePackage");        addRule(RULESET, "TooManyStaticImports");        addRule(RULESET, "UnnecessaryFullyQualifiedName");        addRule(RULESET, "UnusedImports");    }    /**     * This is just for testing DuplicateImports for static imports and     * disambiguation.     */    // Do not delete this method, its needed for a test case    // see:    // /pmd-java/src/test/resources/net/sourceforge/pmd/lang/java/rule/imports/xml/DuplicateImports.xml    // #1306 False positive on duplicate when using static imports    public static void assertTrue(String message, boolean condition) {        if (!condition) {            System.out.println(message);        }    }    // Do not delete these two enums - it is needed for a test case    // see:    // /pmd-java/src/test/resources/net/sourceforge/pmd/lang/java/rule/imports/xml/UnnecessaryFullyQualifiedName.xml    // #1436 UnnecessaryFullyQualifiedName false positive on clashing static    // imports with enums    public enum ENUM1 {        A, B;    }    public enum ENUM2 {        C, D;    }    // Do not delete these two classes - it is needed for a test case    // see: /pmd-java/src/test/resources/net/sourceforge/pmd/lang/java/rule/imports/xml/UnnecessaryFullyQualifiedName.xml    // #1546 part 1 UnnecessaryFullyQualifiedName doesn't take into consideration conflict resolution    // #1546 part 2 UnnecessaryFullyQualifiedName doesn't take into consideration conflict resolution    public static class PhonyMockito {        public static <T> T mock(Class<T> clazz) {            return null;        }    }    public static class PhonyPowerMockito {        public static <T> T mock(Class<T> clazz) {            return null;        }    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.javabeans;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class JavabeansRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-javabeans";    @Override    public void setUp() {        addRule(RULESET, "BeanMembersShouldSerialize");        addRule(RULESET, "MissingSerialVersionUID");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.basic;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;/** * Rule tests for the basic ruleset */public class BasicRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-basic";    @Override    public void setUp() {        addRule(RULESET, "AvoidBranchingStatementAsLastInLoop");        addRule(RULESET, "AvoidDecimalLiteralsInBigDecimalConstructor");        addRule(RULESET, "AvoidMultipleUnaryOperators");        addRule(RULESET, "AvoidThreadGroup");        addRule(RULESET, "AvoidUsingHardCodedIP");        // addRule(RULESET, "AvoidUsingHardCodedURL");        addRule(RULESET, "AvoidUsingOctalValues");        addRule(RULESET, "BigIntegerInstantiation");        addRule(RULESET, "BooleanInstantiation");        addRule(RULESET, "BrokenNullCheck");        addRule(RULESET, "CheckResultSet");        addRule(RULESET, "CheckSkipResult");        addRule(RULESET, "ClassCastExceptionWithToArray");        addRule(RULESET, "CollapsibleIfStatements");        addRule(RULESET, "DoubleCheckedLocking");        addRule(RULESET, "ExtendsObject");        addRule(RULESET, "ForLoopShouldBeWhileLoop");        addRule(RULESET, "JumbledIncrementer");        addRule(RULESET, "MisplacedNullCheck");        addRule(RULESET, "OverrideBothEqualsAndHashcode");        addRule(RULESET, "ReturnFromFinallyBlock");        addRule(RULESET, "DontCallThreadRun");        addRule(RULESET, "DontUseFloatTypeForLoopIndices");        addRule(RULESET, "SimplifiedTernary");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.junit;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class JunitRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-junit";    @Override    public void setUp() {        addRule(RULESET, "JUnitAssertionsShouldIncludeMessage");        addRule(RULESET, "JUnitSpelling");        addRule(RULESET, "JUnitStaticSuite");        addRule(RULESET, "JUnitTestContainsTooManyAsserts");        addRule(RULESET, "JUnitTestsShouldIncludeAssert");        addRule(RULESET, "SimplifyBooleanAssertion");        addRule(RULESET, "TestClassWithoutTestCases");        addRule(RULESET, "UnnecessaryBooleanAssertion");        addRule(RULESET, "UseAssertEqualsInsteadOfAssertTrue");        addRule(RULESET, "UseAssertNullInsteadOfAssertTrue");        addRule(RULESET, "UseAssertSameInsteadOfAssertTrue");        addRule(RULESET, "UseAssertTrueInsteadOfAssertEquals");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.j2ee;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class J2EERulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-j2ee";    @Override    public void setUp() {        addRule(RULESET, "DoNotCallSystemExit");        addRule(RULESET, "DoNotUseThreads");        addRule(RULESET, "LocalHomeNamingConvention");        addRule(RULESET, "LocalInterfaceSessionNamingConvention");        addRule(RULESET, "MDBAndSessionBeanNamingConvention");        addRule(RULESET, "RemoteInterfaceNamingConvention");        addRule(RULESET, "RemoteSessionInterfaceNamingConvention");        addRule(RULESET, "StaticEJBFieldShouldBeFinal");        addRule(RULESET, "UseProperClassLoader");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.coupling;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class CouplingRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-coupling";    @Override    public void setUp() {        addRule(RULESET, "CouplingBetweenObjects");        addRule(RULESET, "ExcessiveImports");        addRule(RULESET, "LooseCoupling");        addRule(RULESET, "LoosePackageCoupling");        addRule(RULESET, "LawOfDemeter");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.naming;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class NamingRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-naming";    @Override    public void setUp() {        addRule(RULESET, "AbstractNaming");        addRule(RULESET, "AvoidDollarSigns");        addRule(RULESET, "AvoidFieldNameMatchingMethodName");        addRule(RULESET, "AvoidFieldNameMatchingTypeName");        addRule(RULESET, "BooleanGetMethodName");        addRule(RULESET, "ClassNamingConventions");        addRule(RULESET, "LongVariable");        addRule(RULESET, "MethodNamingConventions");        addRule(RULESET, "MethodWithSameNameAsEnclosingClass");        addRule(RULESET, "MisleadingVariableName");        addRule(RULESET, "NoPackage");        addRule(RULESET, "PackageCase");        addRule(RULESET, "ShortMethodName");        addRule(RULESET, "ShortClassName");        addRule(RULESET, "ShortVariable");        addRule(RULESET, "SuspiciousConstantFieldName");        addRule(RULESET, "SuspiciousEqualsMethodName");        addRule(RULESET, "SuspiciousHashcodeMethodName");        addRule(RULESET, "VariableNamingConventions");        addRule(RULESET, "GenericsNaming");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.design;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;/** * Tests all the rules, that are in the design ruleset. */public class DesignRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-design";    @Override    public void setUp() {        addRule(RULESET, "AbstractClassWithoutAbstractMethod");        addRule(RULESET, "AbstractClassWithoutAnyMethod");        addRule(RULESET, "AccessorClassGeneration");        addRule(RULESET, "AccessorMethodGeneration");        addRule(RULESET, "AssignmentToNonFinalStatic");        addRule(RULESET, "AvoidDeeplyNestedIfStmts");        addRule(RULESET, "AvoidInstanceofChecksInCatchClause");        addRule(RULESET, "AvoidProtectedFieldInFinalClass");        addRule(RULESET, "AvoidProtectedMethodInFinalClassNotExtending");        addRule(RULESET, "AvoidReassigningParameters");        addRule(RULESET, "AvoidSynchronizedAtMethodLevel");        addRule(RULESET, "BadComparison");        addRule(RULESET, "ClassWithOnlyPrivateConstructorsShouldBeFinal");        addRule(RULESET, "CloseResource");        addRule(RULESET, "CompareObjectsWithEquals");        addRule(RULESET, "ConfusingTernary");        addRule(RULESET, "ConstantsInInterface");        addRule(RULESET, "ConstructorCallsOverridableMethod");        addRule(RULESET, "DefaultLabelNotLastInSwitchStmt");        addRule(RULESET, "EmptyMethodInAbstractClassShouldBeAbstract");        addRule(RULESET, "EqualsNull");        addRule(RULESET, "FieldDeclarationsShouldBeAtStartOfClass");        addRule(RULESET, "FinalFieldCouldBeStatic");        addRule(RULESET, "GodClass");        addRule(RULESET, "IdempotentOperations");        addRule(RULESET, "ImmutableField");        addRule(RULESET, "InstantiationToGetClass");        addRule(RULESET, "LogicInversion");        addRule(RULESET, "MissingBreakInSwitch");        addRule(RULESET, "MissingStaticMethodInNonInstantiatableClass");        addRule(RULESET, "NonCaseLabelInSwitchStatement");        addRule(RULESET, "NonStaticInitializer");        addRule(RULESET, "NonThreadSafeSingleton");        addRule(RULESET, "OptimizableToArrayCall");        // addRule(RULESET, "PositionalIteratorRule"); This rule does not yet        // exist        addRule(RULESET, "PositionLiteralsFirstInComparisons");        addRule(RULESET, "PositionLiteralsFirstInCaseInsensitiveComparisons");        addRule(RULESET, "PreserveStackTrace");        addRule(RULESET, "ReturnEmptyArrayRatherThanNull");        addRule(RULESET, "SimpleDateFormatNeedsLocale");        addRule(RULESET, "SimplifyBooleanExpressions");        addRule(RULESET, "SimplifyBooleanReturns");        addRule(RULESET, "SimplifyConditional");        addRule(RULESET, "SingleMethodSingleton");        addRule(RULESET, "SingletonClassReturningNewInstance");        addRule(RULESET, "SingularField");        addRule(RULESET, "SwitchDensity");        addRule(RULESET, "SwitchStmtsShouldHaveDefault");        addRule(RULESET, "TooFewBranchesForASwitchStatement");        // addRule(RULESET, "TooManyHttpFilter"); This rule does not yet exist        addRule(RULESET, "UncommentedEmptyConstructor");        addRule(RULESET, "UncommentedEmptyMethodBody");        addRule(RULESET, "UnnecessaryLocalBeforeReturn");        addRule(RULESET, "UnsynchronizedStaticDateFormatter");        addRule(RULESET, "UseCollectionIsEmpty");        addRule(RULESET, "UseLocaleWithCaseConversions");        addRule(RULESET, "UseNotifyAllInsteadOfNotify");        addRule(RULESET, "UseUtilityClass");        addRule(RULESET, "UseVarargs");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.comments;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class CommentRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-comments";    @Override    public void setUp() {        addRule(RULESET, "CommentRequired");        addRule(RULESET, "CommentSize");        addRule(RULESET, "CommentContent");        addRule(RULESET, "CommentDefaultAccessModifier");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.comments;import static org.junit.Assert.assertEquals;import java.io.Reader;import java.io.StringReader;import java.util.List;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersionHandler;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;import net.sourceforge.pmd.lang.java.ast.FormalComment;import net.sourceforge.pmd.lang.java.ast.MultiLineComment;import net.sourceforge.pmd.lang.java.ast.Token;public class AbstractCommentRuleTest {    private AbstractCommentRule testSubject = new AbstractCommentRule() {    };    /**     * Blank lines in comments should not raise an exception. See bug #1048.     */    @Test    public void testFilteredCommentIn() {        Token token = new Token();        token.image = "/* multi line comment with blank lines\n\n\n */";        String filtered = testSubject.filteredCommentIn(new MultiLineComment(token));        assertEquals("multi line comment with blank lines", filtered);        token.image = "/** a formal comment with blank lines\n\n\n */";        filtered = testSubject.filteredCommentIn(new FormalComment(token));        assertEquals("a formal comment with blank lines", filtered);    }    @Test    public void testCommentAssignments() {        LanguageVersionHandler handler = LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.8")                .getLanguageVersionHandler();        Reader source = new StringReader("public class Foo {" + "     /** Comment 1 */\n"                + "        public void method1() {}\n" + "    \n" + "        /** Comment 2 */\n" + "    \n"                + "        /** Comment 3 */\n" + "        public void method2() {}" + "}");        Node node = handler.getParser(handler.getDefaultParserOptions()).parse("test", source);        testSubject.assignCommentsToDeclarations((ASTCompilationUnit) node);        List<ASTMethodDeclaration> methods = node.findDescendantsOfType(ASTMethodDeclaration.class);        Assert.assertEquals("/** Comment 1 */", methods.get(0).comment().getImage());        Assert.assertEquals("/** Comment 3 */", methods.get(1).comment().getImage());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.loggingjakartacommons;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class LoggingJakartaCommonsRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-logging-jakarta-commons";    @Override    public void setUp() {        addRule(RULESET, "ProperLogger");        addRule(RULESET, "UseCorrectExceptionLogging");        addRule(RULESET, "GuardDebugLogging");        addRule(RULESET, "GuardLogStatement");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.braces;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class BracesRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-braces";    @Override    public void setUp() {        addRule(RULESET, "ForLoopsMustUseBraces");        addRule(RULESET, "IfElseStmtsMustUseBraces");        addRule(RULESET, "IfStmtsMustUseBraces");        addRule(RULESET, "WhileLoopsMustUseBraces");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.migrating;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class MigratingRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-migrating";    @Override    public void setUp() {        addRule(RULESET, "AvoidAssertAsIdentifier");        addRule(RULESET, "AvoidEnumAsIdentifier");        addRule(RULESET, "ByteInstantiation");        addRule(RULESET, "IntegerInstantiation");        addRule(RULESET, "JUnit4SuitesShouldUseSuiteAnnotation");        addRule(RULESET, "JUnit4TestShouldUseAfterAnnotation");        addRule(RULESET, "JUnit4TestShouldUseBeforeAnnotation");        addRule(RULESET, "JUnit4TestShouldUseTestAnnotation");        addRule(RULESET, "JUnitUseExpected");        addRule(RULESET, "LongInstantiation");        addRule(RULESET, "ReplaceEnumerationWithIterator");        addRule(RULESET, "ReplaceHashtableWithMap");        addRule(RULESET, "ReplaceVectorWithList");        addRule(RULESET, "ShortInstantiation");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.loggingjava;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class LoggingJavaRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-logging-java";    @Override    public void setUp() {        addRule(RULESET, "AvoidPrintStackTrace");        addRule(RULESET, "LoggerIsNotStaticFinal");        addRule(RULESET, "MoreThanOneLogger");        addRule(RULESET, "SystemPrintln");        addRule(RULESET, "GuardLogStatementJavaUtil");        addRule(RULESET, "InvalidSlf4jMessageFormat");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.empty;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class EmptyRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-empty";    @Override    public void setUp() {        addRule(RULESET, "EmptyCatchBlock");        addRule(RULESET, "EmptyFinallyBlock");        addRule(RULESET, "EmptyIfStmt");        addRule(RULESET, "EmptyInitializer");        addRule(RULESET, "EmptyStatementBlock");        addRule(RULESET, "EmptyStatementNotInLoop");        addRule(RULESET, "EmptyStaticInitializer");        addRule(RULESET, "EmptySwitchStatements");        addRule(RULESET, "EmptySynchronizedBlock");        addRule(RULESET, "EmptyTryBlock");        addRule(RULESET, "EmptyWhileStmt");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.sunsecure;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class SunSecureRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-sunsecure";    @Override    public void setUp() {        addRule(RULESET, "MethodReturnsInternalArray");        addRule(RULESET, "ArrayIsStoredDirectly");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.clone;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class CloneRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-clone";    @Override    public void setUp() {        addRule(RULESET, "CloneMethodMustImplementCloneable");        addRule(RULESET, "CloneThrowsCloneNotSupportedException");        addRule(RULESET, "ProperCloneImplementation");        addRule(RULESET, "CloneMethodReturnTypeMustMatchClassName");        addRule(RULESET, "CloneMethodMustBePublic");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.codesize;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class CodesizeRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-codesize";    @Override    public void setUp() {        addRule(RULESET, "CyclomaticComplexity");        addRule(RULESET, "ExcessivePublicCount");        addRule(RULESET, "ExcessiveClassLength");        addRule(RULESET, "ExcessiveParameterList");        addRule(RULESET, "ExcessiveMethodLength");        addRule(RULESET, "ModifiedCyclomaticComplexity");        addRule(RULESET, "NcssConstructorCount");        addRule(RULESET, "NcssMethodCount");        addRule(RULESET, "NcssTypeCount");        addRule(RULESET, "NPathComplexity");        addRule(RULESET, "StdCyclomaticComplexity");        addRule(RULESET, "TooManyFields");        addRule(RULESET, "TooManyMethods");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.codesize;import java.io.StringReader;import java.util.Arrays;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.Parser;import net.sourceforge.pmd.lang.ParserOptions;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.java.JavaLanguageModule;public class StdCyclomaticComplexityRuleTest {    /**     * Make sure the entry stack is empty, if show classes complexity is     * disabled.     *     * @see <a href="https://sourceforge.net/p/pmd/bugs/1501/">bug #1501</a>     */    @Test    public void entryStackMustBeEmpty() {        StdCyclomaticComplexityRule rule = new StdCyclomaticComplexityRule();        rule.setProperty(StdCyclomaticComplexityRule.SHOW_CLASSES_COMPLEXITY_DESCRIPTOR, Boolean.FALSE);        RuleContext ctx = new RuleContext();        LanguageVersion javaLanguageVersion = LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.8");        ParserOptions parserOptions = javaLanguageVersion.getLanguageVersionHandler().getDefaultParserOptions();        Parser parser = javaLanguageVersion.getLanguageVersionHandler().getParser(parserOptions);        Node node = parser.parse("test", new StringReader("public class SampleClass {}"));        rule.apply(Arrays.asList(node), ctx);        Assert.assertTrue(rule.entryStack.isEmpty());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.typeresolution;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class SignatureDeclareThrowsExceptionTest extends SimpleAggregatorTst {    private static final String RULESET = "java-typeresolution";    @Override    public void setUp() {        addRule(RULESET, "SignatureDeclareThrowsException");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.typeresolution;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class CloneMethodMustImplementCloneableTest extends SimpleAggregatorTst {    private static final String RULESET = "java-typeresolution";    @Override    public void setUp() {        addRule(RULESET, "CloneMethodMustImplementCloneable");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.typeresolution;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class UnusedImportsTest extends SimpleAggregatorTst {    private static final String RULESET = "java-typeresolution";    @Override    public void setUp() {        addRule(RULESET, "UnusedImports");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.typeresolution;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class LooseCouplingTest extends SimpleAggregatorTst {    private static final String RULESET = "java-typeresolution";    @Override    public void setUp() {        addRule(RULESET, "LooseCoupling");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.android;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class AndroidRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-android";    @Override    public void setUp() {        addRule(RULESET, "CallSuperFirst");        addRule(RULESET, "CallSuperLast");        addRule(RULESET, "DoNotHardCodeSDCard");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.finalizers;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class FinalizersRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-finalizers";    @Override    public void setUp() {        addRule(RULESET, "AvoidCallingFinalize");        addRule(RULESET, "EmptyFinalizer");        addRule(RULESET, "FinalizeDoesNotCallSuperFinalize");        addRule(RULESET, "FinalizeOnlyCallsSuperFinalize");        addRule(RULESET, "FinalizeOverloaded");        addRule(RULESET, "FinalizeShouldBeProtected");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.strictexception;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class StrictExceptionRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-strictexception";    @Override    public void setUp() {        addRule(RULESET, "AvoidCatchingGenericException");        addRule(RULESET, "AvoidCatchingNPE");        addRule(RULESET, "AvoidCatchingThrowable");        addRule(RULESET, "AvoidLosingExceptionInformation");        addRule(RULESET, "AvoidRethrowingException");        addRule(RULESET, "AvoidThrowingNewInstanceOfSameException");        addRule(RULESET, "AvoidThrowingNullPointerException");        addRule(RULESET, "AvoidThrowingRawExceptionTypes");        addRule(RULESET, "DoNotExtendJavaLangError");        addRule(RULESET, "ExceptionAsFlowControl");        addRule(RULESET, "SignatureDeclareThrowsException");        addRule(RULESET, "DoNotThrowExceptionInFinally");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.unnecessary;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;/** * Rule tests for the unnecessary ruleset */public class UnnecessaryRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-unnecessary";    @Override    public void setUp() {        addRule(RULESET, "UnnecessaryConversionTemporary");        addRule(RULESET, "UnnecessaryReturn");        addRule(RULESET, "UnnecessaryFinalModifier");        addRule(RULESET, "UnnecessaryModifier");        addRule(RULESET, "UnusedNullCheckInEquals");        addRule(RULESET, "UselessOverridingMethod");        addRule(RULESET, "UselessOperationOnImmutable");        addRule(RULESET, "UselessParentheses");        addRule(RULESET, "UselessQualifiedThis");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.strings;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class StringsRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-strings";    @Override    public void setUp() {        addRule(RULESET, "AppendCharacterWithChar");        addRule(RULESET, "AvoidDuplicateLiterals");        addRule(RULESET, "AvoidStringBufferField");        addRule(RULESET, "ConsecutiveAppendsShouldReuse");        addRule(RULESET, "ConsecutiveLiteralAppends");        addRule(RULESET, "InefficientEmptyStringCheck");        addRule(RULESET, "InefficientStringBuffering");        addRule(RULESET, "InsufficientStringBufferDeclaration");        addRule(RULESET, "StringBufferInstantiationWithChar");        addRule(RULESET, "StringInstantiation");        addRule(RULESET, "StringToString");        addRule(RULESET, "UnnecessaryCaseChange");        addRule(RULESET, "UseEqualsToCompareStrings");        addRule(RULESET, "UseIndexOfChar");        addRule(RULESET, "UselessStringValueOf");        addRule(RULESET, "UseStringBufferLength");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.strings;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.util.Set;import org.junit.Test;public class AvoidDuplicateLiteralsRuleTest {    @Test    public void testStringParserEmptyString() {        AvoidDuplicateLiteralsRule.ExceptionParser p = new AvoidDuplicateLiteralsRule.ExceptionParser(',');        Set<String> res = p.parse("");        assertTrue(res.isEmpty());    }    @Test    public void testStringParserSimple() {        AvoidDuplicateLiteralsRule.ExceptionParser p = new AvoidDuplicateLiteralsRule.ExceptionParser(',');        Set<String> res = p.parse("a,b,c");        assertEquals(3, res.size());        assertTrue(res.contains("a"));        assertTrue(res.contains("b"));        assertTrue(res.contains("c"));    }    @Test    public void testStringParserEscapedChar() {        AvoidDuplicateLiteralsRule.ExceptionParser p = new AvoidDuplicateLiteralsRule.ExceptionParser(',');        Set<String> res = p.parse("a,b,\\,");        assertEquals(3, res.size());        assertTrue(res.contains("a"));        assertTrue(res.contains("b"));        assertTrue(res.contains(","));    }    @Test    public void testStringParserEscapedEscapedChar() {        AvoidDuplicateLiteralsRule.ExceptionParser p = new AvoidDuplicateLiteralsRule.ExceptionParser(',');        Set<String> res = p.parse("a,b,\\\\");        assertEquals(3, res.size());        assertTrue(res.contains("a"));        assertTrue(res.contains("b"));        assertTrue(res.contains("\\"));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.unusedcode;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;/** * Rule tests for the unused code ruleset. */public class UnusedCodeRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-unusedcode";    /**     * Configure the rules.     */    @Override    public void setUp() {        addRule(RULESET, "UnusedFormalParameter");        addRule(RULESET, "UnusedLocalVariable");        addRule(RULESET, "UnusedPrivateField");        addRule(RULESET, "UnusedPrivateMethod");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule;import static org.junit.Assert.assertEquals;import java.io.StringReader;import java.util.HashMap;import java.util.List;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSetFactory;import net.sourceforge.pmd.RuleSets;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.Parser;import net.sourceforge.pmd.lang.ParserOptions;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.rule.XPathRule;import net.sourceforge.pmd.lang.rule.properties.StringProperty;import net.sourceforge.pmd.lang.rule.xpath.JaxenXPathRuleQuery;import net.sourceforge.pmd.lang.rule.xpath.SaxonXPathRuleQuery;import net.sourceforge.pmd.lang.rule.xpath.XPathRuleQuery;import net.sourceforge.pmd.testframework.RuleTst;/** * @author daniels */public class XPathRuleTest extends RuleTst {    XPathRule rule;    @Before    public void setUp() {        rule = new XPathRule();        rule.setLanguage(LanguageRegistry.getLanguage(JavaLanguageModule.NAME));        rule.setMessage("XPath Rule Failed");    }    @Test    public void testPluginname() throws Exception {        rule.setXPath("//VariableDeclaratorId[string-length(@Image) < 3]");        rule.setMessage("{0}");        PMD p = new PMD();        RuleContext ctx = new RuleContext();        Report report = new Report();        ctx.setReport(report);        ctx.setSourceCodeFilename("n/a");        RuleSet rules = new RuleSetFactory().createSingleRuleRuleSet(rule);        p.getSourceCodeProcessor().processSourceCode(new StringReader(TEST1), new RuleSets(rules), ctx);        RuleViolation rv = report.iterator().next();        assertEquals("a", rv.getDescription());    }    @Test    public void testVariables() throws Exception {        rule.setXPath("//VariableDeclaratorId[@Image=$var]");        rule.setMessage("Avoid vars");        StringProperty varDescriptor = new StringProperty("var", "Test var", null, 1.0f);        rule.definePropertyDescriptor(varDescriptor);        rule.setProperty(varDescriptor, "fiddle");        PMD p = new PMD();        RuleContext ctx = new RuleContext();        Report report = new Report();        ctx.setReport(report);        ctx.setSourceCodeFilename("n/a");        RuleSet rules = new RuleSetFactory().createSingleRuleRuleSet(rule);        p.getSourceCodeProcessor().processSourceCode(new StringReader(TEST2), new RuleSets(rules), ctx);        RuleViolation rv = report.iterator().next();        assertEquals(3, rv.getBeginLine());    }    /**     * Test for problem reported in bug #1219 PrimarySuffix/@Image does not work     * in some cases in xpath 2.0     *      * @throws Exception     *             any error     */    @Test    public void testImageOfPrimarySuffix() throws Exception {        final String SUFFIX = "import java.io.File;\n" + "\n" + "public class TestSuffix {\n"                + "    public static void main(String args[]) {\n" + "        new File(\"subdirectory\").list();\n"                + "    }\n" + "}";        LanguageVersion language = LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getDefaultVersion();        ParserOptions parserOptions = language.getLanguageVersionHandler().getDefaultParserOptions();        Parser parser = language.getLanguageVersionHandler().getParser(parserOptions);        ASTCompilationUnit cu = (ASTCompilationUnit) parser.parse("test", new StringReader(SUFFIX));        RuleContext ruleContext = new RuleContext();        ruleContext.setLanguageVersion(language);        String xpath = "//PrimarySuffix[@Image='list']";        // XPATH version 1.0        XPathRuleQuery xpathRuleQuery = new JaxenXPathRuleQuery();        xpathRuleQuery.setXPath(xpath);        xpathRuleQuery.setProperties(new HashMap<PropertyDescriptor<?>, Object>());        xpathRuleQuery.setVersion(XPathRuleQuery.XPATH_1_0);        List<Node> nodes = xpathRuleQuery.evaluate(cu, ruleContext);        assertEquals(1, nodes.size());        // XPATH version 1.0 Compatibility        xpathRuleQuery = new SaxonXPathRuleQuery();        xpathRuleQuery.setXPath(xpath);        xpathRuleQuery.setProperties(new HashMap<PropertyDescriptor<?>, Object>());        xpathRuleQuery.setVersion(XPathRuleQuery.XPATH_1_0_COMPATIBILITY);        nodes = xpathRuleQuery.evaluate(cu, ruleContext);        assertEquals(1, nodes.size());        // XPATH version 2.0        xpathRuleQuery = new SaxonXPathRuleQuery();        xpathRuleQuery.setXPath(xpath);        xpathRuleQuery.setProperties(new HashMap<PropertyDescriptor<?>, Object>());        xpathRuleQuery.setVersion(XPathRuleQuery.XPATH_2_0);        nodes = xpathRuleQuery.evaluate(cu, ruleContext);        assertEquals(1, nodes.size());    }    /**     * Following sibling check: See https://sourceforge.net/p/pmd/bugs/1209/     *      * @throws Exception     *             any error     */    @Test    public void testFollowingSibling() throws Exception {        final String SOURCE = "public class dummy {\n" + "  public String toString() {\n"                + "    String test = \"bad example\";\n" + "    test = \"a\";\n" + "    return test;\n" + "  }\n" + "}";        LanguageVersion language = LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getDefaultVersion();        ParserOptions parserOptions = language.getLanguageVersionHandler().getDefaultParserOptions();        Parser parser = language.getLanguageVersionHandler().getParser(parserOptions);        ASTCompilationUnit cu = (ASTCompilationUnit) parser.parse("test", new StringReader(SOURCE));        RuleContext ruleContext = new RuleContext();        ruleContext.setLanguageVersion(language);        String xpath = "//Block/BlockStatement/following-sibling::BlockStatement";        // XPATH version 1.0        XPathRuleQuery xpathRuleQuery = new JaxenXPathRuleQuery();        xpathRuleQuery.setXPath(xpath);        xpathRuleQuery.setProperties(new HashMap<PropertyDescriptor<?>, Object>());        xpathRuleQuery.setVersion(XPathRuleQuery.XPATH_1_0);        List<Node> nodes = xpathRuleQuery.evaluate(cu, ruleContext);        assertEquals(2, nodes.size());        assertEquals(4, nodes.get(0).getBeginLine());        assertEquals(5, nodes.get(1).getBeginLine());        // XPATH version 2.0        xpathRuleQuery = new SaxonXPathRuleQuery();        xpathRuleQuery.setXPath(xpath);        xpathRuleQuery.setProperties(new HashMap<PropertyDescriptor<?>, Object>());        xpathRuleQuery.setVersion(XPathRuleQuery.XPATH_2_0);        nodes = xpathRuleQuery.evaluate(cu, ruleContext);        assertEquals(2, nodes.size());        assertEquals(4, nodes.get(0).getBeginLine());        assertEquals(5, nodes.get(1).getBeginLine());    }    private static final String TEST1 = "public class Foo {" + PMD.EOL + " int a;" + PMD.EOL + "}";    private static final String TEST2 = "public class Foo {" + PMD.EOL + " int faddle;" + PMD.EOL + " int fiddle;"            + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule;import static org.junit.Assert.assertEquals;import java.io.StringReader;import org.junit.Test;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersionHandler;import net.sourceforge.pmd.lang.ParserOptions;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;import net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;import net.sourceforge.pmd.lang.java.symboltable.ScopeAndDeclarationFinder;/** * @author Philip Graf */public class JavaRuleViolationTest {    /**     * Verifies that {@link JavaRuleViolation} sets the variable name for an     * {@link ASTFormalParameter} node.     */    @Test    public void testASTFormalParameterVariableName() {        ASTCompilationUnit ast = parse("class Foo { void bar(int x) {} }");        final ASTFormalParameter node = ast.getFirstDescendantOfType(ASTFormalParameter.class);        final RuleContext context = new RuleContext();        final JavaRuleViolation violation = new JavaRuleViolation(null, context, node, null);        assertEquals("x", violation.getVariableName());    }    private ASTCompilationUnit parse(final String code) {        final LanguageVersionHandler languageVersionHandler = LanguageRegistry.getLanguage(JavaLanguageModule.NAME)                .getDefaultVersion().getLanguageVersionHandler();        final ParserOptions options = languageVersionHandler.getDefaultParserOptions();        final ASTCompilationUnit ast = (ASTCompilationUnit) languageVersionHandler.getParser(options).parse(null,                new StringReader(code));        // set scope of AST nodes        ast.jjtAccept(new ScopeAndDeclarationFinder(), null);        return ast;    }    /**     * Tests that the method name is taken correctly from the given node.     *      * @see <a href="https://sourceforge.net/p/pmd/bugs/1250/">#1250</a>     */    @Test    public void testMethodName() {        ASTCompilationUnit ast = parse("class Foo { void bar(int x) {} }");        ASTMethodDeclaration md = ast.getFirstDescendantOfType(ASTMethodDeclaration.class);        final RuleContext context = new RuleContext();        final JavaRuleViolation violation = new JavaRuleViolation(null, context, md, null);        assertEquals("bar", violation.getMethodName());    }    /**     * Tests that the class name is taken correctly, even if the node is outside     * of a class scope, e.g. a import declaration.     *      * @see <a href="https://sourceforge.net/p/pmd/bugs/1529/">#1529</a>     */    @Test    public void testPackageAndClassName() {        ASTCompilationUnit ast = parse("package pkg; import java.util.List; public class Foo { }");        ASTImportDeclaration importNode = ast.getFirstDescendantOfType(ASTImportDeclaration.class);        JavaRuleViolation violation = new JavaRuleViolation(null, new RuleContext(), importNode, null);        assertEquals("pkg", violation.getPackageName());        assertEquals("Foo", violation.getClassName());    }    @Test    public void testPackageAndEnumName() {        ASTCompilationUnit ast = parse("package pkg; import java.util.List; public enum FooE { }");        ASTImportDeclaration importNode = ast.getFirstDescendantOfType(ASTImportDeclaration.class);        JavaRuleViolation violation = new JavaRuleViolation(null, new RuleContext(), importNode, null);        assertEquals("pkg", violation.getPackageName());        assertEquals("FooE", violation.getClassName());    }    @Test    public void testDefaultPackageAndClassName() {        ASTCompilationUnit ast = parse("import java.util.List; public class Foo { }");        ASTImportDeclaration importNode = ast.getFirstDescendantOfType(ASTImportDeclaration.class);        JavaRuleViolation violation = new JavaRuleViolation(null, new RuleContext(), importNode, null);        assertEquals("", violation.getPackageName());        assertEquals("Foo", violation.getClassName());    }    @Test    public void testPackageAndMultipleClassesName() {        ASTCompilationUnit ast = parse("package pkg; import java.util.List; class Foo { } public class Bar { }");        ASTImportDeclaration importNode = ast.getFirstDescendantOfType(ASTImportDeclaration.class);        JavaRuleViolation violation = new JavaRuleViolation(null, new RuleContext(), importNode, null);        assertEquals("pkg", violation.getPackageName());        assertEquals("Bar", violation.getClassName());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertTrue;import java.util.Set;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ParserTst;public class ASTPrimarySuffixTest extends ParserTst {    @Test    public void testArrayDereference() {        Set<ASTPrimarySuffix> ops = getNodes(ASTPrimarySuffix.class, TEST1);        assertTrue(ops.iterator().next().isArrayDereference());    }    @Test    public void testArguments() {        Set<ASTPrimarySuffix> ops = getNodes(ASTPrimarySuffix.class, TEST2);        assertTrue(ops.iterator().next().isArguments());    }    private static final String TEST1 = "public class Foo {" + PMD.EOL + "  {x[0] = 2;}" + PMD.EOL + "}";    private static final String TEST2 = "public class Foo {" + PMD.EOL + "  {foo(a);}" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.Set;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ParserTst;public class ASTLiteralTest extends ParserTst {    @Test    public void testIsStringLiteral() {        Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST1);        assertTrue((literals.iterator().next()).isStringLiteral());    }    @Test    public void testIsNotStringLiteral() {        Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST2);        assertFalse((literals.iterator().next()).isStringLiteral());    }    @Test    public void testIsIntIntLiteral() {        Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST3);        assertTrue((literals.iterator().next()).isIntLiteral());    }    @Test    public void testIsIntLongLiteral() {        Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST4);        assertTrue((literals.iterator().next()).isLongLiteral());    }    @Test    public void testIsFloatFloatLiteral() {        Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST5);        assertTrue((literals.iterator().next()).isFloatLiteral());    }    @Test    public void testIsFloatDoubleLiteral() {        Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST6);        assertTrue((literals.iterator().next()).isDoubleLiteral());    }    @Test    public void testIsCharLiteral() {        Set<ASTLiteral> literals = getNodes(ASTLiteral.class, TEST7);        assertTrue((literals.iterator().next()).isCharLiteral());    }    @Test    public void testStringUnicodeEscapesNotEscaped() {        ASTLiteral literal = new ASTLiteral(1);        literal.setStringLiteral();        literal.setImage("abcüabc");        literal.testingOnlySetBeginColumn(1);        literal.testingOnlySetEndColumn(7);        assertEquals("abcüabc", literal.getEscapedStringLiteral());        assertEquals("abcüabc", literal.getImage());    }    @Test    public void testStringUnicodeEscapesInvalid() {        ASTLiteral literal = new ASTLiteral(1);        literal.setStringLiteral();        literal.setImage("abc\\uXYZAabc");        literal.testingOnlySetBeginColumn(1);        literal.testingOnlySetEndColumn(12);        assertEquals("abc\\uXYZAabc", literal.getEscapedStringLiteral());        assertEquals("abc\\uXYZAabc", literal.getImage());    }    @Test    public void testStringUnicodeEscapesValid() {        ASTLiteral literal = new ASTLiteral(1);        literal.setStringLiteral();        literal.setImage("abc\u1234abc");        literal.testingOnlySetBeginColumn(1);        literal.testingOnlySetEndColumn(12);        assertEquals("abc\\u1234abc", literal.getEscapedStringLiteral());        assertEquals("abcሴabc", literal.getImage());    }    @Test    public void testCharacterUnicodeEscapesValid() {        ASTLiteral literal = new ASTLiteral(1);        literal.setCharLiteral();        literal.setImage("\u0030");        literal.testingOnlySetBeginColumn(1);        literal.testingOnlySetEndColumn(6);        assertEquals("\\u0030", literal.getEscapedStringLiteral());        assertEquals("0", literal.getImage());    }    private static final String TEST1 = "public class Foo {" + PMD.EOL + "  String x = \"foo\";" + PMD.EOL + "}";    private static final String TEST2 = "public class Foo {" + PMD.EOL + "  int x = 42;" + PMD.EOL + "}";    private static final String TEST3 = "public class Foo {" + PMD.EOL + "  int x = 42;" + PMD.EOL + "}";    private static final String TEST4 = "public class Foo {" + PMD.EOL + "  long x = 42L;" + PMD.EOL + "}";    private static final String TEST5 = "public class Foo {" + PMD.EOL + "  float x = 3.14159f;" + PMD.EOL + "}";    private static final String TEST6 = "public class Foo {" + PMD.EOL + "  double x = 3.14159;" + PMD.EOL + "}";    private static final String TEST7 = "public class Foo {" + PMD.EOL + "  char x = 'x';" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertEquals;import java.util.Set;import org.junit.Test;import net.sourceforge.pmd.lang.java.ParserTst;public class ClassDeclTest extends ParserTst {    @Test    public void testPublic() {        String[] access = { "public" };        ASTClassOrInterfaceDeclaration acd = getClassDecl(access);        verifyFlags(acd, true, false, false, false);    }    @Test    public void testAbstract() {        String[] access = { "abstract" };        ASTClassOrInterfaceDeclaration acd = getClassDecl(access);        verifyFlags(acd, false, true, false, false);    }    @Test    public void testFinal() {        String[] access = { "final" };        ASTClassOrInterfaceDeclaration acd = getClassDecl(access);        verifyFlags(acd, false, false, true, false);    }    @Test    public void testStrict() {        String[] access = { "strictfp" };        ASTClassOrInterfaceDeclaration acd = getClassDecl(access);        verifyFlags(acd, false, false, false, true);    }    @Test    public void testPublicFinal() {        String[] access = { "public", "final" };        ASTClassOrInterfaceDeclaration acd = getClassDecl(access);        verifyFlags(acd, true, false, true, false);    }    public void verifyFlags(ASTClassOrInterfaceDeclaration acd, boolean bPublic, boolean bAbstract, boolean bFinal,            boolean bStrict) {        assertEquals("Public: ", bPublic, acd.isPublic());        assertEquals("Abstract: ", bAbstract, acd.isAbstract());        assertEquals("Final: ", bFinal, acd.isFinal());        assertEquals("Strict: ", bStrict, acd.isStrictfp());    }    public ASTClassOrInterfaceDeclaration getClassDecl(String[] access) {        String javaCode = "";        for (int i = 0; i < access.length; i++) {            javaCode += access[i] + " ";        }        javaCode += " class Test { } ";        Set<ASTClassOrInterfaceDeclaration> classes = getNodes(ASTClassOrInterfaceDeclaration.class, javaCode);        assertEquals("Wrong number of classes", 1, classes.size());        return classes.iterator().next();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.util.Set;import org.junit.Test;import net.sourceforge.pmd.lang.java.ParserTst;public class FieldDeclTest extends ParserTst {    public String makeAccessJavaCode(String[] access) {        String result = "public class Test { ";        for (int i = 0; i < access.length; i++) {            result += access[i] + " ";        }        return result + " int j;  }";    }    public ASTFieldDeclaration getFieldDecl(String[] access) {        Set<ASTFieldDeclaration> fields = getNodes(ASTFieldDeclaration.class, makeAccessJavaCode(access));        assertEquals("Wrong number of fields", 1, fields.size());        return fields.iterator().next();    }    @Test    public void testPublic() {        String[] access = { "public" };        ASTFieldDeclaration afd = getFieldDecl(access);        assertTrue("Expecting field to be public.", afd.isPublic());    }    @Test    public void testProtected() {        String[] access = { "protected" };        ASTFieldDeclaration afd = getFieldDecl(access);        assertTrue("Expecting field to be protected.", afd.isProtected());    }    @Test    public void testPrivate() {        String[] access = { "private" };        ASTFieldDeclaration afd = getFieldDecl(access);        assertTrue("Expecting field to be private.", afd.isPrivate());    }    @Test    public void testStatic() {        String[] access = { "private", "static" };        ASTFieldDeclaration afd = getFieldDecl(access);        assertTrue("Expecting field to be static.", afd.isStatic());        assertTrue("Expecting field to be private.", afd.isPrivate());    }    @Test    public void testFinal() {        String[] access = { "public", "final" };        ASTFieldDeclaration afd = getFieldDecl(access);        assertTrue("Expecting field to be final.", afd.isFinal());        assertTrue("Expecting field to be public.", afd.isPublic());    }    @Test    public void testTransient() {        String[] access = { "private", "transient" };        ASTFieldDeclaration afd = getFieldDecl(access);        assertTrue("Expecting field to be private.", afd.isPrivate());        assertTrue("Expecting field to be transient.", afd.isTransient());    }    @Test    public void testVolatile() {        String[] access = { "private", "volatile" };        ASTFieldDeclaration afd = getFieldDecl(access);        assertTrue("Expecting field to be volatile.", afd.isVolatile());        assertTrue("Expecting field to be private.", afd.isPrivate());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import org.junit.Test;import net.sourceforge.pmd.lang.java.ParserTst;public class ASTBlockStatementTest extends ParserTst {    @Test    public void testIsAllocation() {        ASTBlockStatement bs = new ASTBlockStatement(0);        bs.jjtAddChild(new ASTAllocationExpression(1), 0);        assertTrue(bs.isAllocation());    }    @Test    public void testIsAllocation2() {        ASTBlockStatement bs = new ASTBlockStatement(0);        bs.jjtAddChild(new ASTAssertStatement(1), 0);        assertFalse(bs.isAllocation());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.util.Set;import org.junit.Test;import net.sourceforge.pmd.lang.java.ParserTst;public class MethodDeclTest extends ParserTst {    @Test    public void testPublic() {        String[] access = { "public" };        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be public.", amd.isPublic());    }    @Test    public void testPrivate() {        String[] access = { "private" };        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be private.", amd.isPrivate());    }    @Test    public void testProtected() {        String[] access = { "protected" };        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be protected.", amd.isProtected());    }    @Test    public void testFinal() {        String[] access = { "public", "final" };        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be final.", amd.isFinal());        assertTrue("Expecting method to be public.", amd.isPublic());    }    @Test    public void testSynchronized() {        String[] access = { "public", "synchronized" };        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be synchronized.", amd.isSynchronized());        assertTrue("Expecting method to be public.", amd.isPublic());    }    @Test    public void testAbstract() {        String[] access = { "public", "abstract" };        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be abstract.", amd.isAbstract());        assertTrue("Expecting method to be public.", amd.isPublic());    }    @Test    public void testNative() {        String[] access = { "private", "native" };        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be native.", amd.isNative());        assertTrue("Expecting method to be private.", amd.isPrivate());    }    @Test    public void testStrict() {        String[] access = { "public", "strictfp" };        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be strict.", amd.isStrictfp());        assertTrue("Expecting method to be public.", amd.isPublic());    }    public ASTMethodDeclaration getMethodDecl(String[] access) {        String javaCode = "public class Test { ";        for (int i = 0; i < access.length; i++) {            javaCode += access[i] + " ";        }        javaCode += " void stuff() { } }";        Set<ASTMethodDeclaration> methods = getNodes(ASTMethodDeclaration.class, javaCode);        assertEquals("Wrong number of methods", 1, methods.size());        return methods.iterator().next();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.util.Set;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.lang.java.ParserTst;public class ASTImportDeclarationTest extends ParserTst {    @Test    public void testImportOnDemand() {        Set<ASTImportDeclaration> ops = getNodes(ASTImportDeclaration.class, TEST1);        assertTrue(ops.iterator().next().isImportOnDemand());    }    @Test    public void testGetImportedNameNode() {        ASTImportDeclaration i = getNodes(ASTImportDeclaration.class, TEST2).iterator().next();        assertEquals("foo.bar.Baz", i.getImportedName());    }    @Test    public void testStaticImport() {        Set<ASTImportDeclaration> ops = getNodes(ASTImportDeclaration.class, TEST3);        ASTImportDeclaration i = ops.iterator().next();        assertTrue(i.isStatic());    }    @Test(expected = ParseException.class)    public void testStaticImportFailsWithJDK14() {        getNodes(LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.4"), ASTImportDeclaration.class,                TEST3);    }    private static final String TEST1 = "import foo.bar.*;" + PMD.EOL + "public class Foo {}";    private static final String TEST2 = "import foo.bar.Baz;" + PMD.EOL + "public class Foo {}";    private static final String TEST3 = "import static foo.bar.Baz;" + PMD.EOL + "public class Foo {}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.lang.java.ParserTst;public class ASTAnnotationTest extends ParserTst {    @Test    public void testAnnotationSucceedsWithDefaultMode() {        getNodes(ASTAnnotation.class, TEST1);    }    @Test(expected = ParseException.class)    public void testAnnotationFailsWithJDK14() {        getNodes(LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.4"), ASTAnnotation.class, TEST1);    }    @Test    public void testAnnotationSucceedsWithJDK15() {        getNodes(LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"), ASTAnnotation.class, TEST1);    }    private static final String TEST1 = "public class Foo extends Buz {" + PMD.EOL + " @Override" + PMD.EOL            + " void bar() {" + PMD.EOL + "  // overrides a superclass method" + PMD.EOL + " }" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertTrue;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ParserTst;public class ASTVariableDeclaratorIdTest extends ParserTst {    @Test    public void testIsExceptionBlockParameter() {        ASTTryStatement tryNode = new ASTTryStatement(1);        ASTBlock block = new ASTBlock(2);        ASTVariableDeclaratorId v = new ASTVariableDeclaratorId(3);        v.jjtSetParent(block);        block.jjtSetParent(tryNode);        assertTrue(v.isExceptionBlockParameter());    }    @Test    public void testTypeNameNode() {        ASTCompilationUnit acu = super.getNodes(ASTCompilationUnit.class, TYPE_NAME_NODE).iterator().next();        ASTVariableDeclaratorId id = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0);        ASTClassOrInterfaceType name = (ASTClassOrInterfaceType) id.getTypeNameNode().jjtGetChild(0);        assertEquals("String", name.getImage());    }    @Test    public void testAnnotations() {        ASTCompilationUnit acu = super.getNodes(ASTCompilationUnit.class, TEST_ANNOTATIONS).iterator().next();        ASTVariableDeclaratorId id = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0);        ASTClassOrInterfaceType name = (ASTClassOrInterfaceType) id.getTypeNameNode().jjtGetChild(0);        assertEquals("String", name.getImage());    }    @Test    public void testLambdaWithType() throws Exception {        ASTCompilationUnit acu = parseJava18(TEST_LAMBDA_WITH_TYPE);        ASTVariableDeclaratorId f = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(1);        assertEquals("File", f.getTypeNode().getTypeImage());        assertEquals("File", f.getTypeNameNode().jjtGetChild(0).getImage());    }    @Test    public void testLambdaWithoutType() throws Exception {        ASTCompilationUnit acu = parseJava18(TEST_LAMBDA_WITHOUT_TYPE);        ASTVariableDeclaratorId f = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(1);        assertNull(f.getTypeNode());        assertNull(f.getTypeNameNode());    }    private static final String TYPE_NAME_NODE = "public class Test {" + PMD.EOL + "  private String bar;" + PMD.EOL            + "}";    private static final String TEST_ANNOTATIONS = "public class Foo {" + PMD.EOL            + "    public void bar(@A1 @A2 String s) {}" + PMD.EOL + "}";    private static final String TEST_LAMBDA_WITH_TYPE = "public class Foo {\n" + "    public void bar() {\n"            + "        FileFilter java = (File f) -> f.getName().endsWith(\".java\");\n" + "    }\n" + "}\n";    private static final String TEST_LAMBDA_WITHOUT_TYPE = "public class Foo {\n" + "    public void bar() {\n"            + "        FileFilter java2 = f -> f.getName().endsWith(\".java\");\n" + "    }\n" + "}\n";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTVariableDeclaratorIdTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.fail;import java.io.IOException;import java.io.InputStream;import org.apache.commons.io.IOUtils;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ParserTst;public class ParserCornersTest extends ParserTst {    /**     * #1107 PMD 5.0.4 couldn't parse call of parent outer java class method     * from inner class.     */    @Test    public void testInnerOuterClass() {        parseJava17("/**\n" + " * @author azagorulko\n" + " *\n" + " */\n"                + "public class TestInnerClassCallsOuterParent {\n" + "\n" + "    public void test() {\n"                + "        new Runnable() {\n" + "            @Override\n" + "            public void run() {\n"                + "                TestInnerClassCallsOuterParent.super.toString();\n" + "            }\n"                + "        };\n" + "    }\n" + "}\n");    }    @Test    public final void testGetFirstASTNameImageNull() {        parseJava14(ABSTRACT_METHOD_LEVEL_CLASS_DECL);    }    @Test    public final void testCastLookaheadProblem() {        parseJava14(CAST_LOOKAHEAD_PROBLEM);    }    /**     * Tests a specific generic notation for calling methods. See:     * https://jira.codehaus.org/browse/MPMD-139     */    @Test    public void testGenericsProblem() {        parseJava15(GENERICS_PROBLEM);        parseJava17(GENERICS_PROBLEM);    }    @Test    public void testParsersCases15() {        String test15 = readAsString("/net/sourceforge/pmd/ast/ParserCornerCases.java");        parseJava15(test15);    }    @Test    public void testParsersCases17() {        String test17 = readAsString("/net/sourceforge/pmd/ast/ParserCornerCases17.java");        parseJava17(test17);    }    @Test    public void testParsersCases18() throws Exception {        String test18 = readAsString("/net/sourceforge/pmd/ast/ParserCornerCases18.java");        ASTCompilationUnit cu = parseJava18(test18);        Assert.assertEquals(21, cu.findChildNodesWithXPath("//FormalParameter").size());        Assert.assertEquals(4,                cu.findChildNodesWithXPath("//FormalParameter[@ExplicitReceiverParameter='true']").size());        Assert.assertEquals(17,                cu.findChildNodesWithXPath("//FormalParameter[@ExplicitReceiverParameter='false']").size());    }    /**     * Test for https://sourceforge.net/p/pmd/bugs/1333/     */    @Test    public void testLambdaBug1333() {        parseJava18("final class Bug1333 {\n"                + "    private static final Logger LOG = LoggerFactory.getLogger(Foo.class);\n" + "\n"                + "    public void deleteDirectoriesByNamePattern() {\n"                + "        delete(path -> deleteDirectory(path));\n" + "    }\n" + "\n"                + "    private void delete(Consumer<? super String> consumer) {\n"                + "        LOG.debug(consumer.toString());\n" + "    }\n" + "\n"                + "    private void deleteDirectory(String path) {\n" + "        LOG.debug(path);\n" + "    }\n" + "}");    }    @Test    public void testLambdaBug1470() throws Exception {        String code = IOUtils.toString(ParserCornersTest.class.getResourceAsStream("LambdaBug1470.java"), "UTF-8");        parseJava18(code);    }    /**     * Test for https://sourceforge.net/p/pmd/bugs/1355/     */    @Test    public void emptyFileJustComment() {        parseJava18("// just a comment");    }    @Test    public void testMultipleExceptionCatching() {        String code = "public class Foo { public void bar() { "                + "try { System.out.println(); } catch (RuntimeException | IOException e) {} } }";        try {            parseJava15(code);            fail("Expected exception");        } catch (ParseException e) {            assertEquals(                    "Line 1, Column 94: Cannot catch multiple exceptions when running in JDK inferior to 1.7 mode!",                    e.getMessage());        }        try {            parseJava17(code);            // no exception expected        } catch (ParseException e) {            fail();        }    }    @Test    public void testBug1429ParseError() throws Exception {        String c = IOUtils.toString(this.getClass().getResourceAsStream("Bug1429.java"));        parseJava18(c);    }    @Test    public void testBug1530ParseError() throws Exception {        String c = IOUtils.toString(this.getClass().getResourceAsStream("Bug1530.java"));        parseJava18(c);    }        @Test    public void testGitHubBug207() throws Exception {        String c = IOUtils.toString(this.getClass().getResourceAsStream("GitHubBug207.java"));        parseJava18(c);    }    @Test    public void testBug206() throws Exception {        String code = "public @interface Foo {" + PMD.EOL            + "static final ThreadLocal<Interner<Integer>> interner =" + PMD.EOL            + "    ThreadLocal.withInitial(Interners::newStrongInterner);" + PMD.EOL            + "}";        parseJava18(code);    }    @Test    public void testGitHubBug208ParseError() throws Exception {        String c = IOUtils.toString(this.getClass().getResourceAsStream("GitHubBug208.java"));        parseJava15(c);    }        @Test    public void testGitHubBug257NonExistingCast() throws Exception {        String code = "public class Test {" + PMD.EOL                + "     public static void main(String[] args) {" + PMD.EOL                + "         double a = 4.0;" + PMD.EOL                + "         double b = 2.0;" + PMD.EOL                + "         double result = Math.sqrt((a)   - b);" + PMD.EOL                + "         System.out.println(result);" + PMD.EOL                + "     }" + PMD.EOL                + "}";        ASTCompilationUnit compilationUnit = parseJava15(code);        assertEquals("A cast was found when none expected", 0, compilationUnit.findDescendantsOfType(ASTCastExpression.class).size());    }    @Test    public void testGitHubBug309() throws Exception {        String code = readAsString("GitHubBug309.java");        ASTCompilationUnit compilationUnit = parseJava18(code);        assertNotNull(compilationUnit);    }    /**     * This triggered bug #1484 UnusedLocalVariable - false positive -     * parenthesis     *      * @throws Exception     */    @Test    public void stringConcatentationShouldNotBeCast() throws Exception {        String code = "public class Test {\n" + "    public static void main(String[] args) {\n"                + "        System.out.println(\"X\" + (args) + \"Y\");\n" + "    }\n" + "}";        ASTCompilationUnit cu = parseJava18(code);        Assert.assertEquals(0, cu.findDescendantsOfType(ASTCastExpression.class).size());    }    private String readAsString(String resource) {        InputStream in = ParserCornersTest.class.getResourceAsStream(resource);        try {            return IOUtils.toString(in);        } catch (IOException e) {            throw new RuntimeException(e);        } finally {            IOUtils.closeQuietly(in);        }    }    private static final String GENERICS_PROBLEM = "public class Test {" + PMD.EOL + " public void test() {" + PMD.EOL            + "   String o = super.<String> doStuff(\"\");" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String ABSTRACT_METHOD_LEVEL_CLASS_DECL = "public class Test {" + PMD.EOL + "  void bar() {"            + PMD.EOL + "   abstract class X { public abstract void f(); }" + PMD.EOL            + "   class Y extends X { public void f() {" + PMD.EOL + "    new Y().f();" + PMD.EOL + "   }}" + PMD.EOL            + "  }" + PMD.EOL + "}";    private static final String CAST_LOOKAHEAD_PROBLEM = "public class BadClass {" + PMD.EOL + "  public Class foo() {"            + PMD.EOL + "    return (byte[].class);" + PMD.EOL + "  }" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertEquals;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ParserTst;public class ASTLocalVariableDeclarationTest extends ParserTst {    @Test    public void testSingleDimArray() {        ASTCompilationUnit cu = parseJava14(TEST1);        ASTLocalVariableDeclaration node = cu.findDescendantsOfType(ASTLocalVariableDeclaration.class).get(0);        assertEquals(1, node.getArrayDepth());    }    @Test    public void testMultDimArray() {        ASTCompilationUnit cu = parseJava14(TEST2);        ASTLocalVariableDeclaration node = cu.findDescendantsOfType(ASTLocalVariableDeclaration.class).get(0);        assertEquals(2, node.getArrayDepth());    }    @Test    public void testMultDimArraySplitBraces() {        ASTCompilationUnit cu = parseJava14(TEST3);        ASTLocalVariableDeclaration node = cu.findDescendantsOfType(ASTLocalVariableDeclaration.class).get(0);        assertEquals(3, node.getArrayDepth());    }    private static final String TEST1 = "class Foo {" + PMD.EOL + " void bar() {int x[] = null;}" + PMD.EOL + "}";    private static final String TEST2 = "class Foo {" + PMD.EOL + " void bar() {int x[][] = null;}" + PMD.EOL + "}";    private static final String TEST3 = "class Foo {" + PMD.EOL + " void bar() {int[] x[][] = null;}" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNull;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ParserTst;/** * Created on Jan 19, 2005  * @author mgriffa */public class ASTThrowStatementTest extends ParserTst {    @Test    public final void testGetFirstASTNameImageNull() {        ASTThrowStatement t = getNodes(ASTThrowStatement.class, NULL_NAME).iterator().next();        assertNull(t.getFirstClassOrInterfaceTypeImage());    }    @Test    public final void testGetFirstASTNameImageNew() {        ASTThrowStatement t = getNodes(ASTThrowStatement.class, OK_NAME).iterator().next();        assertEquals("FooException", t.getFirstClassOrInterfaceTypeImage());    }    private static final String NULL_NAME = "public class Test {" + PMD.EOL + "  void bar() {" + PMD.EOL + "   throw e;"            + PMD.EOL + "  }" + PMD.EOL + "}";    private static final String OK_NAME = "public class Test {" + PMD.EOL + "  void bar() {" + PMD.EOL            + "   throw new FooException();" + PMD.EOL + "  }" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ParserTst;public class ASTFieldDeclarationTest extends ParserTst {    @Test    public void testIsArray() {        ASTCompilationUnit cu = parseJava14(TEST1);        Dimensionable node = cu.findDescendantsOfType(ASTFieldDeclaration.class).get(0);        assertTrue(node.isArray());        assertEquals(1, node.getArrayDepth());    }    @Test    public void testMultiDimensionalArray() {        ASTCompilationUnit cu = parseJava14(TEST2);        Dimensionable node = cu.findDescendantsOfType(ASTFieldDeclaration.class).get(0);        assertEquals(3, node.getArrayDepth());    }    @Test    public void testIsSyntacticallyPublic() {        ASTCompilationUnit cu = parseJava14(TEST3);        ASTFieldDeclaration node = cu.findDescendantsOfType(ASTFieldDeclaration.class).get(0);        assertFalse(node.isSyntacticallyPublic());        assertFalse(node.isPackagePrivate());        assertFalse(node.isPrivate());        assertFalse(node.isProtected());        assertTrue(node.isFinal());        assertTrue(node.isStatic());        assertTrue(node.isPublic());    }    @Test    public void testWithEnum() {        ASTCompilationUnit cu = parseJava15(TEST4);        ASTFieldDeclaration node = cu.findDescendantsOfType(ASTFieldDeclaration.class).get(0);        assertFalse(node.isInterfaceMember());    }    @Test    public void testWithAnnotation() {        ASTCompilationUnit cu = parseJava15(TEST5);        ASTFieldDeclaration node = cu.findDescendantsOfType(ASTFieldDeclaration.class).get(0);        assertFalse(node.isInterfaceMember());        assertTrue(node.isAnnotationMember());    }    private static final String TEST1 = "class Foo {" + PMD.EOL + " String[] foo;" + PMD.EOL + "}";    private static final String TEST2 = "class Foo {" + PMD.EOL + " String[][][] foo;" + PMD.EOL + "}";    private static final String TEST3 = "interface Foo {" + PMD.EOL + " int BAR = 6;" + PMD.EOL + "}";    private static final String TEST4 = "public enum Foo {" + PMD.EOL + " FOO(1);" + PMD.EOL + " private int x;"            + PMD.EOL + "}";    private static final String TEST5 = "public @interface Foo {" + PMD.EOL + " int BAR = 6;" + PMD.EOL + "}";    @Test    public void testGetVariableName() {        int id = 0;        ASTFieldDeclaration n = new ASTFieldDeclaration(id++);        ASTType t = new ASTType(id++);        ASTVariableDeclarator decl = new ASTVariableDeclarator(id++);        ASTVariableDeclaratorId declid = new ASTVariableDeclaratorId(id++);        n.jjtAddChild(t, 0);        t.jjtAddChild(decl, 0);        decl.jjtAddChild(declid, 0);        declid.setImage("foo");        assertEquals("foo", n.getVariableName());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ParserTst;public class ASTInitializerTest extends ParserTst {    @Test    public void testDontCrashOnBlockStatement() {        getNodes(ASTInitializer.class, TEST1);    }    private static final String TEST1 = "public class Foo {" + PMD.EOL + " {" + PMD.EOL + "   x = 5;" + PMD.EOL + " }"            + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.Set;import org.junit.Test;import net.sourceforge.pmd.lang.java.ParserTst;public class AccessNodeTest extends ParserTst {    public static class MyAccessNode extends AbstractJavaAccessNode {        public MyAccessNode(int i) {            super(i);        }        public MyAccessNode(JavaParser parser, int i) {            super(parser, i);        }    }    @Test    public void testModifiersOnClassDecl() {        Set<ASTClassOrInterfaceDeclaration> ops = getNodes(ASTClassOrInterfaceDeclaration.class, TEST1);        assertTrue(ops.iterator().next().isPublic());    }    private static final String TEST1 = "public class Foo {}";    @Test    public void testStatic() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not static.", node.isStatic());        node.setStatic(true);        assertTrue("Node set to static, not static.", node.isStatic());    }    @Test    public void testPublic() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not public.", node.isPublic());        node.setPublic(true);        assertTrue("Node set to public, not public.", node.isPublic());    }    @Test    public void testProtected() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not protected.", node.isProtected());        node.setProtected(true);        assertTrue("Node set to protected, not protected.", node.isProtected());    }    @Test    public void testPrivate() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not private.", node.isPrivate());        node.setPrivate(true);        assertTrue("Node set to private, not private.", node.isPrivate());    }    @Test    public void testFinal() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not final.", node.isFinal());        node.setFinal(true);        assertTrue("Node set to final, not final.", node.isFinal());    }    @Test    public void testSynchronized() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not synchronized.", node.isSynchronized());        node.setSynchronized(true);        assertTrue("Node set to synchronized, not synchronized.", node.isSynchronized());    }    @Test    public void testVolatile() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not volatile.", node.isVolatile());        node.setVolatile(true);        assertTrue("Node set to volatile, not volatile.", node.isVolatile());    }    @Test    public void testTransient() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not transient.", node.isTransient());        node.setTransient(true);        assertTrue("Node set to transient, not transient.", node.isTransient());    }    @Test    public void testNative() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not native.", node.isNative());        node.setNative(true);        assertTrue("Node set to native, not native.", node.isNative());    }    @Test    public void testAbstract() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not abstract.", node.isAbstract());        node.setAbstract(true);        assertTrue("Node set to abstract, not abstract.", node.isAbstract());    }    @Test    public void testStrict() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not strict.", node.isStrictfp());        node.setStrictfp(true);        assertTrue("Node set to strict, not strict.", node.isStrictfp());    }    @Test    public void testPackagePrivate() {        AccessNode node = new MyAccessNode(1);        assertTrue("Node should default to package private.", node.isPackagePrivate());        node.setPrivate(true);        assertFalse("Node set to private, still package private.", node.isPackagePrivate());        node = new MyAccessNode(1);        node.setPublic(true);        assertFalse("Node set to public, still package private.", node.isPackagePrivate());        node = new MyAccessNode(1);        node.setProtected(true);        assertFalse("Node set to protected, still package private.", node.isPackagePrivate());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertEquals;import java.util.Set;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ParserTst;public class ASTPackageDeclarationTest extends ParserTst {    private static final String PACKAGE_INFO_ANNOTATED = "@Deprecated" + PMD.EOL + "package net.sourceforge.pmd.foobar;"            + PMD.EOL;    /**     * Regression test for bug 3524607.     */    @Test    public void testPackageName() {        Set<ASTPackageDeclaration> nodes = getNodes(ASTPackageDeclaration.class, PACKAGE_INFO_ANNOTATED);        assertEquals(1, nodes.size());        ASTPackageDeclaration packageNode = nodes.iterator().next();        assertEquals("net.sourceforge.pmd.foobar", packageNode.getPackageNameImage());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertEquals;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ParserTst;public class EncodingTest extends ParserTst {    @Test    public void testDecodingOfUTF8() throws Exception {        ASTCompilationUnit acu = parseJava14(TEST_UTF8);        String methodName = acu.findDescendantsOfType(ASTMethodDeclarator.class).get(0).getImage();        assertEquals("é", methodName);    }    private static final String TEST_UTF8 = "class Foo {" + PMD.EOL + "  void é() {}" + PMD.EOL + "  void fiddle() {}"            + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.Set;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ParserTst;public class ASTBooleanLiteralTest extends ParserTst {    @Test    public void testTrue() {        Set<ASTBooleanLiteral> ops = getNodes(ASTBooleanLiteral.class, TEST1);        ASTBooleanLiteral b = ops.iterator().next();        assertTrue(b.isTrue());    }    @Test    public void testFalse() {        Set<ASTBooleanLiteral> ops = getNodes(ASTBooleanLiteral.class, TEST2);        ASTBooleanLiteral b = ops.iterator().next();        assertFalse(b.isTrue());    }    private static final String TEST1 = "class Foo { " + PMD.EOL + " boolean bar = true; " + PMD.EOL + "} ";    private static final String TEST2 = "class Foo { " + PMD.EOL + " boolean bar = false; " + PMD.EOL + "} ";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.Set;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ParserTst;public class ASTSwitchLabelTest extends ParserTst {    @Test    public void testDefaultOff() {        Set<ASTSwitchLabel> ops = getNodes(ASTSwitchLabel.class, TEST1);        assertFalse(ops.iterator().next().isDefault());    }    @Test    public void testDefaultSet() {        Set<ASTSwitchLabel> ops = getNodes(ASTSwitchLabel.class, TEST2);        assertTrue(ops.iterator().next().isDefault());    }    private static final String TEST1 = "public class Foo {" + PMD.EOL + " void bar() {" + PMD.EOL + "  switch (x) {"            + PMD.EOL + "   case 1: y = 2;" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST2 = "public class Foo {" + PMD.EOL + " void bar() {" + PMD.EOL + "  switch (x) {"            + PMD.EOL + "   default: y = 2;" + PMD.EOL + "  }" + PMD.EOL + " }" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertEquals;import org.junit.Test;public class ASTMethodDeclarationTest {    @Test    public void testGetVariableName() {        int id = 0;        ASTMethodDeclaration md = new ASTMethodDeclaration(id++);        ASTMethodDeclarator de = new ASTMethodDeclarator(id++);        de.setImage("foo");        md.jjtAddChild(de, 0);        assertEquals("foo", md.getMethodName());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertSame;import static org.junit.Assert.assertTrue;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Set;import org.jaxen.JaxenException;import org.junit.Ignore;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.java.ParserTst;public class SimpleNodeTest extends ParserTst {    @Test    public void testMethodDiffLines() {        Set<ASTMethodDeclaration> methods = getNodes(ASTMethodDeclaration.class, METHOD_DIFF_LINES);        verifyNode(methods.iterator().next(), 2, 9, 4, 2);    }    @Test    public void testMethodSameLine() {        Set<ASTMethodDeclaration> methods = getNodes(ASTMethodDeclaration.class, METHOD_SAME_LINE);        verifyNode(methods.iterator().next(), 2, 9, 2, 21);    }    @Test    public void testNoLookahead() {        String code = NO_LOOKAHEAD; // 1, 8 -> 1, 20        Set<ASTClassOrInterfaceDeclaration> uCD = getNodes(ASTClassOrInterfaceDeclaration.class, code);        verifyNode(uCD.iterator().next(), 1, 8, 1, 20);    }    @Test    public void testHasExplicitExtends() {        String code = HAS_EXPLICIT_EXTENDS;        ASTClassOrInterfaceDeclaration ucd = getNodes(ASTClassOrInterfaceDeclaration.class, code).iterator().next();        assertTrue(ucd.jjtGetChild(0) instanceof ASTExtendsList);    }    @Test    public void testNoExplicitExtends() {        String code = NO_EXPLICIT_EXTENDS;        ASTClassOrInterfaceDeclaration ucd = getNodes(ASTClassOrInterfaceDeclaration.class, code).iterator().next();        assertFalse(ucd.jjtGetChild(0) instanceof ASTExtendsList);    }    @Test    public void testHasExplicitImplements() {        String code = HAS_EXPLICIT_IMPLEMENTS;        ASTClassOrInterfaceDeclaration ucd = getNodes(ASTClassOrInterfaceDeclaration.class, code).iterator().next();        assertTrue(ucd.jjtGetChild(0) instanceof ASTImplementsList);    }    @Test    public void testNoExplicitImplements() {        String code = NO_EXPLICIT_IMPLEMENTS;        ASTClassOrInterfaceDeclaration ucd = getNodes(ASTClassOrInterfaceDeclaration.class, code).iterator().next();        assertFalse(ucd.jjtGetChild(0) instanceof ASTImplementsList);    }    @Test    public void testColumnsOnQualifiedName() {        Set<ASTName> name = getNodes(ASTName.class, QUALIFIED_NAME);        Iterator<ASTName> i = name.iterator();        while (i.hasNext()) {            Node node = i.next();            if (node.getImage().equals("java.io.File")) {                verifyNode(node, 1, 8, 1, 19);            }        }    }    @Test    public void testLineNumbersForNameSplitOverTwoLines() {        Set<ASTName> name = getNodes(ASTName.class, BROKEN_LINE_IN_NAME);        Iterator<ASTName> i = name.iterator();        while (i.hasNext()) {            Node node = i.next();            if (node.getImage().equals("java.io.File")) {                verifyNode(node, 1, 8, 2, 4);            }            if (node.getImage().equals("Foo")) {                verifyNode(node, 2, 15, 2, 18);            }        }    }    @Test    public void testLineNumbersAreSetOnAllSiblings() {        for (ASTBlock b : getNodes(ASTBlock.class, LINE_NUMBERS_ON_SIBLINGS)) {            assertTrue(b.getBeginLine() > 0);        }        for (ASTVariableInitializer b : getNodes(ASTVariableInitializer.class, LINE_NUMBERS_ON_SIBLINGS)) {            assertTrue(b.getBeginLine() > 0);        }        for (ASTExpression b : getNodes(ASTExpression.class, LINE_NUMBERS_ON_SIBLINGS)) {            assertTrue(b.getBeginLine() > 0);        }    }    @Test    public void testFindDescendantsOfType() {        ASTBlock block = new ASTBlock(2);        block.jjtAddChild(new ASTReturnStatement(1), 0);        assertEquals(1, block.findDescendantsOfType(ASTReturnStatement.class).size());    }    @Test    public void testFindDescendantsOfTypeMultiple() {        ASTBlock block = new ASTBlock(1);        block.jjtAddChild(new ASTBlockStatement(2), 0);        block.jjtAddChild(new ASTBlockStatement(3), 1);        List<ASTBlockStatement> nodes = block.findDescendantsOfType(ASTBlockStatement.class);        assertEquals(2, nodes.size());    }    @Test    public void testFindDescendantsOfTypeRecurse() {        ASTBlock block = new ASTBlock(1);        ASTBlock childBlock = new ASTBlock(2);        block.jjtAddChild(childBlock, 0);        childBlock.jjtAddChild(new ASTMethodDeclaration(3), 0);        List<ASTMethodDeclaration> nodes = block.findDescendantsOfType(ASTMethodDeclaration.class);        assertEquals(1, nodes.size());    }    @Test    public void testGetFirstChild() {        ASTBlock block = new ASTBlock(1);        ASTStatement x = new ASTStatement(2);        block.jjtAddChild(x, 0);        block.jjtAddChild(new ASTStatement(3), 1);        Node n = block.getFirstDescendantOfType(ASTStatement.class);        assertNotNull(n);        assertTrue(n instanceof ASTStatement);        assertEquals(x, n);    }    @Test    public void testGetFirstChildNested() {        ASTBlock block = new ASTBlock(1);        ASTStatement x = new ASTStatement(2);        ASTAssignmentOperator x1 = new ASTAssignmentOperator(4);        x.jjtAddChild(x1, 0);        block.jjtAddChild(x, 0);        block.jjtAddChild(new ASTStatement(3), 1);        Node n = block.getFirstDescendantOfType(ASTAssignmentOperator.class);        assertNotNull(n);        assertTrue(n instanceof ASTAssignmentOperator);        assertEquals(x1, n);    }    @Test    public void testGetFirstChildNestedDeeper() {        ASTBlock block = new ASTBlock(1);        ASTStatement x = new ASTStatement(2);        ASTAssignmentOperator x1 = new ASTAssignmentOperator(4);        ASTName x2 = new ASTName(5);        x.jjtAddChild(x1, 0);        x1.jjtAddChild(x2, 0);        block.jjtAddChild(x, 0);        block.jjtAddChild(new ASTStatement(3), 1);        Node n = block.getFirstDescendantOfType(ASTName.class);        assertNotNull(n);        assertTrue(n instanceof ASTName);        assertEquals(x2, n);    }    @Test    public void testParentMethods() {        ASTCompilationUnit u = parseJava14(TEST1);        ASTMethodDeclarator d = u.getFirstDescendantOfType(ASTMethodDeclarator.class);        assertSame("getFirstParentOfType ASTMethodDeclaration", d.jjtGetParent(),                d.getFirstParentOfType(ASTMethodDeclaration.class));        assertNull("getFirstParentOfType ASTName", d.getFirstParentOfType(ASTName.class));        assertSame("getNthParent 1", d.jjtGetParent(), d.getNthParent(1));        assertSame("getNthParent 2", d.jjtGetParent().jjtGetParent(), d.getNthParent(2));        assertSame("getNthParent 6", u, d.getNthParent(6));        assertNull("getNthParent 7", d.getNthParent(7));        assertNull("getNthParent 8", d.getNthParent(8));    }    private static final String TEST1 = "public class Test {" + PMD.EOL + "  void bar(String s) {" + PMD.EOL            + "   s = s.toLowerCase();" + PMD.EOL + "  }" + PMD.EOL + "}";    @Ignore    @Test    public void testContainsNoInner() {        ASTCompilationUnit c = getNodes(ASTCompilationUnit.class, CONTAINS_NO_INNER).iterator().next();        List<ASTFieldDeclaration> res = new ArrayList<>();        c.findDescendantsOfType(ASTFieldDeclaration.class, res, false);        assertTrue(res.isEmpty());        /*         * String expectedXml =         * "<CompilationUnit BeginColumn=\"1\" BeginLine=\"5\" EndColumn=\"1\" EndLine=\"5\">"         * +         * "<TypeDeclaration BeginColumn=\"1\" BeginLine=\"1\" EndColumn=\"1\" EndLine=\"5\">"         * +         * "<ClassOrInterfaceDeclaration Abstract=\"false\" BeginColumn=\"8\" BeginLine=\"1\" EndColumn=\"1\" "         * +         * "EndLine=\"5\" Final=\"false\" Image=\"Test\" Interface=\"false\" Native=\"false\" Nested=\"false\" PackagePrivate=\"false\" Private=\"false\" Protected=\"false\" Public=\"true\" Static=\"false\" Strictfp=\"false\" Synchronized=\"false\" Transient=\"false\" Volatile=\"false\">"         * +         * "<ClassOrInterfaceBody BeginColumn=\"19\" BeginLine=\"1\" EndColumn=\"1\" EndLine=\"5\">"         * +         * "<ClassOrInterfaceBodyDeclaration AnonymousInnerClass=\"false\" BeginColumn=\"3\" BeginLine=\"2\" EndColumn=\"3\" EndLine=\"4\">"         * +         * "<ClassOrInterfaceDeclaration Abstract=\"false\" BeginColumn=\"10\" BeginLine=\"2\" EndColumn=\"3\" EndLine=\"4\" Final=\"false\" "         * +         * "Image=\"Inner\" Interface=\"false\" Native=\"false\" Nested=\"true\" PackagePrivate=\"false\" Private=\"false\" Protected=\"false\" "         * +         * "Public=\"true\" Static=\"false\" Strictfp=\"false\" Synchronized=\"false\" Transient=\"false\" Volatile=\"false\">"         * +         * "<ClassOrInterfaceBody BeginColumn=\"22\" BeginLine=\"2\" EndColumn=\"3\" EndLine=\"4\">"         * +         * "<ClassOrInterfaceBodyDeclaration AnonymousInnerClass=\"false\" BeginColumn=\"4\" BeginLine=\"3\" EndColumn=\"11\" EndLine=\"3\">"         * +         * "<FieldDeclaration Abstract=\"false\" Array=\"false\" ArrayDepth=\"0\" BeginColumn=\"4\" BeginLine=\"3\" EndColumn=\"11\" EndLine=\"3\" Final=\"false\" Native=\"false\" PackagePrivate=\"true\" Private=\"false\" Protected=\"false\" Public=\"false\" Static=\"false\" Strictfp=\"false\" Synchronized=\"false\" Transient=\"false\" VariableName=\"foo\" Volatile=\"false\"><Type Array=\"false\" ArrayDepth=\"0\" BeginColumn=\"4\" BeginLine=\"3\" EndColumn=\"6\" EndLine=\"3\">"         * +         * "<PrimitiveType Array=\"false\" ArrayDepth=\"0\" BeginColumn=\"4\" BeginLine=\"3\" Boolean=\"false\" EndColumn=\"6\" EndLine=\"3\" Image=\"int\"/>"         * + "</Type>" +         * "<VariableDeclarator BeginColumn=\"8\" BeginLine=\"3\" EndColumn=\"10\" EndLine=\"3\">"         * +         * "<VariableDeclaratorId Array=\"false\" ArrayDepth=\"0\" BeginColumn=\"8\" BeginLine=\"3\" EndColumn=\"10\" EndLine=\"3\" ExceptionBlockParameter=\"false\" Image=\"foo\"/>"         * +         * "</VariableDeclarator></FieldDeclaration></ClassOrInterfaceBodyDeclaration></ClassOrInterfaceBody>"         * +         * "</ClassOrInterfaceDeclaration></ClassOrInterfaceBodyDeclaration></ClassOrInterfaceBody></ClassOrInterfaceDeclaration>"         * + "</TypeDeclaration></CompilationUnit>"; assertEquals( expectedXml,         * getXmlString( c ) );         */ }    @Test    public void testContainsNoInnerWithAnonInner() {        ASTCompilationUnit c = getNodes(ASTCompilationUnit.class, CONTAINS_NO_INNER_WITH_ANON_INNER).iterator().next();        List<ASTFieldDeclaration> res = new ArrayList<>();        c.findDescendantsOfType(ASTFieldDeclaration.class, res, false);        assertTrue(res.isEmpty());    }    @Test    public void testContainsChildOfType() {        ASTClassOrInterfaceDeclaration c = getNodes(ASTClassOrInterfaceDeclaration.class, CONTAINS_CHILDREN_OF_TYPE)                .iterator().next();        assertTrue(c.hasDescendantOfType(ASTFieldDeclaration.class));    }    @Test    public void testXPathNodeSelect() throws JaxenException {        ASTClassOrInterfaceDeclaration c = getNodes(ASTClassOrInterfaceDeclaration.class, TEST_XPATH).iterator().next();        List<Node> nodes = c.findChildNodesWithXPath("//FieldDeclaration");        assertEquals(2, nodes.size());        assertTrue(nodes.get(0) instanceof ASTFieldDeclaration);        assertTrue(c.hasDescendantMatchingXPath("//FieldDeclaration"));        assertFalse(c.hasDescendantMatchingXPath("//MethodDeclaration"));    }    @Test    public void testUserData() {        ASTClassOrInterfaceDeclaration c = getNodes(ASTClassOrInterfaceDeclaration.class, HAS_EXPLICIT_EXTENDS)                .iterator().next();        assertNull(c.getUserData());        c.setUserData("foo");        assertEquals("foo", c.getUserData());        c.setUserData(null);        assertNull(c.getUserData());    }    private void verifyNode(Node node, int beginLine, int beginCol, int endLine, int endCol) {        assertEquals("Unexpected beginning line: ", beginLine, node.getBeginLine());        assertEquals("Unexpected beginning column: ", beginCol, node.getBeginColumn());        assertEquals("Unexpected ending line:", endLine, node.getEndLine());        assertEquals("Unexpected ending column:", endCol, node.getEndColumn());    }    private static final String HAS_EXPLICIT_EXTENDS = "public class Test extends Foo {}";    private static final String NO_EXPLICIT_EXTENDS = "public class Test {}";    private static final String HAS_EXPLICIT_IMPLEMENTS = "public class Test implements Foo {}";    private static final String NO_EXPLICIT_IMPLEMENTS = "public class Test {}";    private static final String METHOD_SAME_LINE = "public class Test {" + PMD.EOL + " public void foo() {}" + PMD.EOL            + "}";    private static final String QUALIFIED_NAME = "import java.io.File;" + PMD.EOL + "public class Foo{}";    private static final String BROKEN_LINE_IN_NAME = "import java.io." + PMD.EOL + "File;" + PMD.EOL            + "public class Foo{}";    private static final String LINE_NUMBERS_ON_SIBLINGS = "public class Foo {" + PMD.EOL + " void bar() {" + PMD.EOL            + "  try {" + PMD.EOL + "  } catch (Exception1 e) {" + PMD.EOL + "   int x =2;" + PMD.EOL + "  }" + PMD.EOL            + " if (x != null) {}" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String NO_LOOKAHEAD = "public class Foo { }";    private static final String METHOD_DIFF_LINES = "public class Test {" + PMD.EOL + " public void foo() {" + PMD.EOL            + "  int x;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String CONTAINS_CHILDREN_OF_TYPE = "public class Test {" + PMD.EOL + "  int x;" + PMD.EOL            + "}";    private static final String CONTAINS_NO_INNER = "public class Test {" + PMD.EOL + "  public class Inner {" + PMD.EOL            + "   int foo;" + PMD.EOL + "  }" + PMD.EOL + "}";    private static final String CONTAINS_NO_INNER_WITH_ANON_INNER = "public class Test {" + PMD.EOL + "  void bar() {"            + PMD.EOL + "   foo(new Fuz() { int x = 2;});" + PMD.EOL + "  }" + PMD.EOL + "}";    private static final String TEST_XPATH = "public class Test {" + PMD.EOL + "  int x = 2;" + PMD.EOL            + "  int y = 42;" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import java.io.IOException;import java.nio.charset.StandardCharsets;import org.apache.commons.io.IOUtils;import org.junit.Test;import net.sourceforge.pmd.lang.java.ParserTst;public class JDKVersionTest extends ParserTst {    private static String loadSource(String name) {        try {            return IOUtils.toString(JDKVersionTest.class.getResourceAsStream("jdkversiontests/" + name),                    StandardCharsets.UTF_8);        } catch (IOException e) {            throw new RuntimeException(e);        }    }    // enum keyword/identifier    @Test(expected = ParseException.class)    public void testEnumAsKeywordShouldFailWith14() {        parseJava15(loadSource("jdk14_enum.java"));    }    @Test    public void testEnumAsIdentifierShouldPassWith14() {        parseJava14(loadSource("jdk14_enum.java"));    }    @Test    public void testEnumAsKeywordShouldPassWith15() {        parseJava15(loadSource("jdk15_enum.java"));    }    @Test(expected = ParseException.class)    public void testEnumAsIdentifierShouldFailWith15() {        parseJava15(loadSource("jdk14_enum.java"));    }    // enum keyword/identifier    // assert keyword/identifier    @Test    public void testAssertAsKeywordVariantsSucceedWith14() {        parseJava14(loadSource("assert_test1.java"));        parseJava14(loadSource("assert_test2.java"));        parseJava14(loadSource("assert_test3.java"));        parseJava14(loadSource("assert_test4.java"));    }    @Test(expected = ParseException.class)    public void testAssertAsVariableDeclIdentifierFailsWith14() {        parseJava14(loadSource("assert_test5.java"));    }    @Test(expected = ParseException.class)    public void testAssertAsMethodNameIdentifierFailsWith14() {        parseJava14(loadSource("assert_test7.java"));    }    @Test    public void testAssertAsIdentifierSucceedsWith13() {        parseJava13(loadSource("assert_test5.java"));    }    @Test(expected = ParseException.class)    public void testAssertAsKeywordFailsWith13() {        parseJava13(loadSource("assert_test6.java"));    }    // assert keyword/identifier    @Test    public void testVarargsShouldPassWith15() {        parseJava15(loadSource("jdk15_varargs.java"));    }    @Test(expected = ParseException.class)    public void testVarargsShouldFailWith14() {        parseJava14(loadSource("jdk15_varargs.java"));    }    @Test    public void testJDK15ForLoopSyntaxShouldPassWith15() {        parseJava15(loadSource("jdk15_forloop.java"));    }    @Test    public void testJDK15ForLoopSyntaxWithModifiers() {        parseJava15(loadSource("jdk15_forloop_with_modifier.java"));    }    @Test(expected = ParseException.class)    public void testJDK15ForLoopShouldFailWith14() {        parseJava14(loadSource("jdk15_forloop.java"));    }    @Test    public void testJDK15GenericsSyntaxShouldPassWith15() {        parseJava15(loadSource("jdk15_generics.java"));    }    @Test    public void testVariousParserBugs() {        parseJava15(loadSource("fields_bug.java"));        parseJava15(loadSource("gt_bug.java"));        parseJava15(loadSource("annotations_bug.java"));        parseJava15(loadSource("constant_field_in_annotation_bug.java"));        parseJava15(loadSource("generic_in_field.java"));    }    @Test    public void testNestedClassInMethodBug() {        parseJava15(loadSource("inner_bug.java"));        parseJava15(loadSource("inner_bug2.java"));    }    @Test    public void testGenericsInMethodCall() {        parseJava15(loadSource("generic_in_method_call.java"));    }    @Test    public void testGenericINAnnotation() {        parseJava15(loadSource("generic_in_annotation.java"));    }    @Test    public void testGenericReturnType() {        parseJava15(loadSource("generic_return_type.java"));    }    @Test    public void testMultipleGenerics() {        // See java/lang/concurrent/CopyOnWriteArraySet        parseJava15(loadSource("funky_generics.java"));        // See java/lang/concurrent/ConcurrentHashMap        parseJava15(loadSource("multiple_generics.java"));    }    @Test    public void testAnnotatedParams() {        parseJava15(loadSource("annotated_params.java"));    }    @Test    public void testAnnotatedLocals() {        parseJava15(loadSource("annotated_locals.java"));    }    @Test    public void testAssertAsIdentifierSucceedsWith13Test2() {        parseJava13(loadSource("assert_test5_a.java"));    }    @Test    public final void testBinaryAndUnderscoresInNumericalLiterals() {        parseJava17(loadSource("jdk17_numerical_literals.java"));    }    @Test    public final void testStringInSwitch() {        parseJava17(loadSource("jdk17_string_in_switch.java"));    }    @Test    public final void testGenericDiamond() {        parseJava17(loadSource("jdk17_generic_diamond.java"));    }    @Test    public final void testTryWithResources() {        parseJava17(loadSource("jdk17_try_with_resources.java"));    }    @Test    public final void testTryWithResourcesSemi() {        parseJava17(loadSource("jdk17_try_with_resources_semi.java"));    }    @Test    public final void testTryWithResourcesMulti() {        parseJava17(loadSource("jdk17_try_with_resources_multi.java"));    }    @Test    public final void testTryWithResourcesWithAnnotations() {        parseJava17(loadSource("jdk17_try_with_resources_with_annotations.java"));    }    @Test    public final void testMulticatch() {        parseJava17(loadSource("jdk17_multicatch.java"));    }    @Test    public final void testMulticatchWithAnnotations() {        parseJava17(loadSource("jdk17_multicatch_with_annotations.java"));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.Set;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ParserTst;public class ASTAssignmentOperatorTest extends ParserTst {    @Test    public void testSimpleAssignmentRecognized() {        Set<ASTAssignmentOperator> ops = super.getNodes(ASTAssignmentOperator.class, TEST1);        assertFalse((ops.iterator().next()).isCompound());    }    @Test    public void testCompoundAssignmentPlusRecognized() {        Set<ASTAssignmentOperator> ops = super.getNodes(ASTAssignmentOperator.class, TEST2);        assertTrue((ops.iterator().next()).isCompound());    }    @Test    public void testCompoundAssignmentMultRecognized() {        Set<ASTAssignmentOperator> ops = super.getNodes(ASTAssignmentOperator.class, TEST3);        assertTrue((ops.iterator().next()).isCompound());    }    private static final String TEST1 = "public class Foo {" + PMD.EOL + " void bar() {" + PMD.EOL + "  int x;"            + PMD.EOL + "  x=2;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST2 = "public class Foo {" + PMD.EOL + " void bar() {" + PMD.EOL + "  int x;"            + PMD.EOL + "  x += 2;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST3 = "public class Foo {" + PMD.EOL + " void bar() {" + PMD.EOL + "  int x;"            + PMD.EOL + "  x *= 2;" + PMD.EOL + " }" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.Iterator;import java.util.Set;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.lang.java.ParserTst;public class ASTFormalParameterTest extends ParserTst {    @Test    public void testVarargs() {        int nrOfVarArgs = 0;        int nrOfNoVarArgs = 0;        Set<ASTFormalParameter> ops = getNodes(LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"),                ASTFormalParameter.class, TEST1);        for (Iterator<ASTFormalParameter> iter = ops.iterator(); iter.hasNext();) {            ASTFormalParameter b = iter.next();            ASTVariableDeclaratorId variableDeclId = b.getFirstDescendantOfType(ASTVariableDeclaratorId.class);            if (!"x".equals(variableDeclId.getImage())) {                assertTrue(b.isVarargs());                nrOfVarArgs++;            } else {                assertFalse(b.isVarargs());                nrOfNoVarArgs++;            }        }        // Ensure that both possibilities are tested        assertEquals(1, nrOfVarArgs);        assertEquals(1, nrOfNoVarArgs);    }    private static final String TEST1 = "class Foo {" + PMD.EOL + " void bar(int x, int... others) {}" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java;import static org.junit.Assert.assertEquals;import org.junit.Test;import net.sourceforge.pmd.FooRule;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;import net.sourceforge.pmd.testframework.RuleTst;public class SuppressWarningsTest extends RuleTst {    private static class BarRule extends AbstractJavaRule {        @Override        public Object visit(ASTCompilationUnit cu, Object ctx) {            // Convoluted rule to make sure the violation is reported for the            // ASTCompilationUnit node            for (ASTClassOrInterfaceDeclaration c : cu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class)) {                if (c.getImage().equalsIgnoreCase("bar")) {                    addViolation(ctx, cu);                }            }            return super.visit(cu, ctx);        }        @Override        public String getName() {            return "NoBar";        }    }    @Test    public void testClassLevelSuppression() {        Report rpt = new Report();        runTestFromString(TEST1, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(0, rpt.size());        runTestFromString(TEST2, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(0, rpt.size());    }    @Test    public void testInheritedSuppression() {        Report rpt = new Report();        runTestFromString(TEST3, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(0, rpt.size());    }    @Test    public void testMethodLevelSuppression() {        Report rpt = new Report();        runTestFromString(TEST4, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(1, rpt.size());    }    @Test    public void testConstructorLevelSuppression() {        Report rpt = new Report();        runTestFromString(TEST5, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(0, rpt.size());    }    @Test    public void testFieldLevelSuppression() {        Report rpt = new Report();        runTestFromString(TEST6, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(1, rpt.size());    }    @Test    public void testParameterLevelSuppression() {        Report rpt = new Report();        runTestFromString(TEST7, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(1, rpt.size());    }    @Test    public void testLocalVariableLevelSuppression() {        Report rpt = new Report();        runTestFromString(TEST8, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(1, rpt.size());    }    @Test    public void testSpecificSuppression() {        Report rpt = new Report();        runTestFromString(TEST9, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(1, rpt.size());    }    @Test    public void testSpecificSuppressionValue1() {        Report rpt = new Report();        runTestFromString(TEST9_VALUE1, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(1, rpt.size());    }    @Test    public void testSpecificSuppressionValue2() {        Report rpt = new Report();        runTestFromString(TEST9_VALUE2, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(1, rpt.size());    }    @Test    public void testSpecificSuppressionValue3() {        Report rpt = new Report();        runTestFromString(TEST9_VALUE3, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(1, rpt.size());    }    @Test    public void testSpecificSuppressionMulitpleValues1() {        Report rpt = new Report();        runTestFromString(TEST9_MULTIPLE_VALUES_1, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(0, rpt.size());    }    @Test    public void testSpecificSuppressionMulitpleValues2() {        Report rpt = new Report();        runTestFromString(TEST9_MULTIPLE_VALUES_2, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(0, rpt.size());    }    @Test    public void testNoSuppressionBlank() {        Report rpt = new Report();        runTestFromString(TEST10, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(2, rpt.size());    }    @Test    public void testNoSuppressionSomethingElseS() {        Report rpt = new Report();        runTestFromString(TEST11, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(2, rpt.size());    }    @Test    public void testSuppressAll() {        Report rpt = new Report();        runTestFromString(TEST12, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(0, rpt.size());    }    @Test    public void testSpecificSuppressionAtTopLevel() {        Report rpt = new Report();        runTestFromString(TEST13, new BarRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals(0, rpt.size());    }    private static final String TEST1 = "@SuppressWarnings(\"PMD\")" + PMD.EOL + "public class Foo {}";    private static final String TEST2 = "@SuppressWarnings(\"PMD\")" + PMD.EOL + "public class Foo {" + PMD.EOL            + " void bar() {" + PMD.EOL + "  int foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST3 = "public class Baz {" + PMD.EOL + " @SuppressWarnings(\"PMD\")" + PMD.EOL            + " public class Bar {" + PMD.EOL + "  void bar() {" + PMD.EOL + "   int foo;" + PMD.EOL + "  }" + PMD.EOL            + " }" + PMD.EOL + "}";    private static final String TEST4 = "public class Foo {" + PMD.EOL + " @SuppressWarnings(\"PMD\")" + PMD.EOL            + " void bar() {" + PMD.EOL + "  int foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST5 = "public class Bar {" + PMD.EOL + " @SuppressWarnings(\"PMD\")" + PMD.EOL            + " public Bar() {" + PMD.EOL + "  int foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST6 = "public class Bar {" + PMD.EOL + " @SuppressWarnings(\"PMD\")" + PMD.EOL            + " int foo;" + PMD.EOL + " void bar() {" + PMD.EOL + "  int foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST7 = "public class Bar {" + PMD.EOL + " int foo;" + PMD.EOL            + " void bar(@SuppressWarnings(\"PMD\") int foo) {}" + PMD.EOL + "}";    private static final String TEST8 = "public class Bar {" + PMD.EOL + " int foo;" + PMD.EOL + " void bar() {"            + PMD.EOL + "  @SuppressWarnings(\"PMD\") int foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST9 = "public class Bar {" + PMD.EOL + " int foo;" + PMD.EOL + " void bar() {"            + PMD.EOL + "  @SuppressWarnings(\"PMD.NoFoo\") int foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST9_VALUE1 = "public class Bar {" + PMD.EOL + " int foo;" + PMD.EOL + " void bar() {"            + PMD.EOL + "  @SuppressWarnings(value = \"PMD.NoFoo\") int foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST9_VALUE2 = "public class Bar {" + PMD.EOL + " int foo;" + PMD.EOL + " void bar() {"            + PMD.EOL + "  @SuppressWarnings({\"PMD.NoFoo\"}) int foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST9_VALUE3 = "public class Bar {" + PMD.EOL + " int foo;" + PMD.EOL + " void bar() {"            + PMD.EOL + "  @SuppressWarnings(value = {\"PMD.NoFoo\"}) int foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST9_MULTIPLE_VALUES_1 = "@SuppressWarnings({\"PMD.NoFoo\", \"PMD.NoBar\"})" + PMD.EOL            + "public class Bar {" + PMD.EOL + " int foo;" + PMD.EOL + " void bar() {" + PMD.EOL + "  int foo;"            + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST9_MULTIPLE_VALUES_2 = "@SuppressWarnings(value = {\"PMD.NoFoo\", \"PMD.NoBar\"})"            + PMD.EOL + "public class Bar {" + PMD.EOL + " int foo;" + PMD.EOL + " void bar() {" + PMD.EOL            + "  int foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST10 = "public class Bar {" + PMD.EOL + " int foo;" + PMD.EOL + " void bar() {"            + PMD.EOL + "  @SuppressWarnings(\"\") int foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST11 = "public class Bar {" + PMD.EOL + " int foo;" + PMD.EOL + " void bar() {"            + PMD.EOL + "  @SuppressWarnings(\"SomethingElse\") int foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST12 = "public class Bar {" + PMD.EOL + " @SuppressWarnings(\"all\") int foo;"            + PMD.EOL + "}";    private static final String TEST13 = "@SuppressWarnings(\"PMD.NoBar\")" + PMD.EOL + "public class Bar {" + PMD.EOL            + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import java.io.IOException;import java.util.regex.Pattern;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.cli.BaseCPDCLITest;/** * Unit test for {@link CPDCommandLineInterface}. * */public class CPDCommandLineInterfaceTest extends BaseCPDCLITest {    /**     * Test ignore identifiers argument.     */    @Test    public void testIgnoreIdentifiers() throws Exception {        runCPD("--minimum-tokens", "34", "--language", "java", "--files",                "src/test/resources/net/sourceforge/pmd/cpd/clitest/", "--ignore-identifiers");        String out = getOutput();        Assert.assertTrue(out.contains("Found a 7 line (36 tokens) duplication"));        Assert.assertEquals(4, Integer.parseInt(System.getProperty(CPDCommandLineInterface.STATUS_CODE_PROPERTY)));    }    /**     * Test ignore identifiers argument with failOnViolation=false     */    @Test    public void testIgnoreIdentifiersFailOnViolationFalse() throws Exception {        runCPD("--minimum-tokens", "34", "--language", "java", "--files",                "src/test/resources/net/sourceforge/pmd/cpd/clitest/", "--ignore-identifiers", "--failOnViolation",                "false");        String out = getOutput();        Assert.assertTrue(out.contains("Found a 7 line (36 tokens) duplication"));        Assert.assertEquals(0, Integer.parseInt(System.getProperty(CPDCommandLineInterface.STATUS_CODE_PROPERTY)));    }    /**     * Test excludes option.     */    @Test    public void testExcludes() throws Exception {        runCPD("--minimum-tokens", "34", "--language", "java", "--ignore-identifiers", "--files",                "src/test/resources/net/sourceforge/pmd/cpd/clitest/", "--exclude",                "src/test/resources/net/sourceforge/pmd/cpd/clitest/File2.java");        String out = getOutput();        Assert.assertFalse(out.contains("Found a 7 line (34 tokens) duplication"));        Assert.assertEquals(0, Integer.parseInt(System.getProperty(CPDCommandLineInterface.STATUS_CODE_PROPERTY)));    }    /**     * #1144 CPD encoding argument has no effect     */    @Test    public void testEncodingOption() throws Exception {        String origEncoding = System.getProperty("file.encoding");        // set the default encoding under Windows        System.setProperty("file.encoding", "Cp1252");        runCPD("--minimum-tokens", "34", "--language", "java", "--files",                "src/test/resources/net/sourceforge/pmd/cpd/clitest/", "--ignore-identifiers", "--format", "xml",                // request UTF-8 for CPD                "--encoding", "UTF-8");        // reset default encoding        System.setProperty("file.encoding", origEncoding);        String out = getOutput();        Assert.assertTrue(out.startsWith("<?xml version=\"1.0\" encoding=\"UTF-8\"?>"));        Assert.assertTrue(Pattern.compile("System\\.out\\.println\\([ij] \\+ \"ä\"\\);").matcher(out).find());        Assert.assertEquals(4, Integer.parseInt(System.getProperty(CPDCommandLineInterface.STATUS_CODE_PROPERTY)));    }    /**     * See: https://sourceforge.net/p/pmd/bugs/1178/     *      * @throws IOException     *             any error     */    @Test    public void testBrokenAndValidFile() throws IOException {        runCPD("--minimum-tokens", "10", "--language", "java", "--files",                "src/test/resources/net/sourceforge/pmd/cpd/badandgood/", "--format", "text", "--skip-lexical-errors");        String out = getOutput();        Assert.assertTrue(                Pattern.compile("Skipping .*?BadFile\\.java\\. Reason: Lexical error in file").matcher(out).find());        Assert.assertTrue(out.contains("Found a 5 line (13 tokens) duplication"));        Assert.assertEquals(4, Integer.parseInt(System.getProperty(CPDCommandLineInterface.STATUS_CODE_PROPERTY)));    }    @Test    public void testFormatXmlWithoutEncoding() throws Exception {        runCPD("--minimum-tokens", "10", "--language", "java", "--files",                "src/test/resources/net/sourceforge/pmd/cpd/clitest/", "--format", "xml");        String out = getOutput();        Assert.assertTrue(out.contains("<duplication lines=\"3\" tokens=\"10\">"));        Assert.assertEquals(4, Integer.parseInt(System.getProperty(CPDCommandLineInterface.STATUS_CODE_PROPERTY)));    }    @Test    public void testCSVFormat() throws Exception {        runCPD("--minimum-tokens", "100", "--files", "src/test/resources/net/sourceforge/pmd/cpd/badandgood/",                "--language", "c", "--format", "csv");        String out = getOutput();        Assert.assertFalse(out.contains("Couldn't instantiate renderer"));        Assert.assertEquals(0, Integer.parseInt(System.getProperty(CPDCommandLineInterface.STATUS_CODE_PROPERTY)));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import java.io.IOException;import java.util.List;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.JavaParserConstants;public class JavaTokensTokenizerTest {    @Test    public void test1() throws IOException {        Tokenizer tokenizer = new JavaTokenizer();        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader("public class Foo {}"));        Tokens tokens = new Tokens();        tokenizer.tokenize(sourceCode, tokens);        assertEquals(6, tokens.size());        assertEquals("public class Foo {}", sourceCode.getSlice(1, 1));    }    @Test    public void testCommentsIgnored() throws IOException {        Tokenizer tokenizer = new JavaTokenizer();        SourceCode sourceCode = new SourceCode(                new SourceCode.StringCodeLoader("public class Foo { // class Bar */ \n }"));        Tokens tokens = new Tokens();        tokenizer.tokenize(sourceCode, tokens);        assertEquals(6, tokens.size());    }    @Test    public void test2() throws IOException {        Tokenizer t = new JavaTokenizer();        String data = "public class Foo {" + PMD.EOL + "public void bar() {}" + PMD.EOL + "public void buz() {}"                + PMD.EOL + "}";        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(data));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        assertEquals("public class Foo {" + PMD.EOL + "public void bar() {}", sourceCode.getSlice(1, 2));    }    @Test    public void testDiscardSemicolons() throws IOException {        Tokenizer t = new JavaTokenizer();        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader("public class Foo {private int x;}"));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        assertEquals(9, tokens.size());    }    @Test    public void testDiscardImports() throws IOException {        Tokenizer t = new JavaTokenizer();        SourceCode sourceCode = new SourceCode(                new SourceCode.StringCodeLoader("import java.io.File;" + PMD.EOL + "public class Foo {}"));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        assertEquals(6, tokens.size());    }    @Test    public void testDiscardPkgStmts() throws IOException {        Tokenizer t = new JavaTokenizer();        SourceCode sourceCode = new SourceCode(                new SourceCode.StringCodeLoader("package foo.bar.baz;" + PMD.EOL + "public class Foo {}"));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        assertEquals(6, tokens.size());    }    @Test    public void testDiscardSimpleOneLineAnnotation() throws IOException {        JavaTokenizer t = new JavaTokenizer();        t.setIgnoreAnnotations(true);        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(                "package foo.bar.baz;" + PMD.EOL + "@MyAnnotation" + PMD.EOL + "public class Foo {}"));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        assertEquals(6, tokens.size());    }    @Test    public void testIgnoreComments() {        JavaTokenizer t = new JavaTokenizer();        t.setIgnoreAnnotations(false);        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader("package foo.bar.baz;" + PMD.EOL                + "/*****" + PMD.EOL + " * ugh" + PMD.EOL + " *****/" + PMD.EOL + "public class Foo {}"));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        assertEquals(6, tokens.size());    }    @Test    public void testDiscardOneLineAnnotationWithParams() throws IOException {        JavaTokenizer t = new JavaTokenizer();        t.setIgnoreAnnotations(true);        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(                "package foo.bar.baz;" + PMD.EOL + "@ MyAnnotation (\"ugh\")" + PMD.EOL + "@NamedQueries({" + PMD.EOL                        + "@NamedQuery(" + PMD.EOL + ")})" + PMD.EOL + "public class Foo {" + PMD.EOL + "}"));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        TokenEntry.getEOF();        assertEquals(6, tokens.size());    }    @Test    public void testIgnoreBetweenSpecialComments() throws IOException {        JavaTokenizer t = new JavaTokenizer();        t.setIgnoreAnnotations(false);        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader("package foo.bar.baz;" + PMD.EOL                + "// CPD-OFF" + PMD.EOL + "// CPD-OFF" + PMD.EOL                + "@ MyAnnotation (\"ugh\")" + PMD.EOL + "@NamedQueries({" + PMD.EOL + "@NamedQuery(" + PMD.EOL + ")})"                + PMD.EOL + "public class Foo {" + "// CPD-ON" + PMD.EOL                + "}"        ));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        TokenEntry.getEOF();        assertEquals(2, tokens.size()); // 2 tokens: "}" + EOF    }    @Test    public void testIgnoreBetweenSpecialCommentsMultiple() throws IOException {        JavaTokenizer t = new JavaTokenizer();        t.setIgnoreAnnotations(false);        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader("package foo.bar.baz;" + PMD.EOL                + "// CPD-OFF" + PMD.EOL + "// another irrelevant comment" + PMD.EOL                + "@ MyAnnotation (\"ugh\")" + PMD.EOL + "@NamedQueries({" + PMD.EOL + "@NamedQuery(" + PMD.EOL + ")})"                + PMD.EOL + "public class Foo {" + "// CPD-ON" + PMD.EOL                + "}"        ));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        TokenEntry.getEOF();        assertEquals(2, tokens.size()); // 2 tokens: "}" + EOF    }    @Test    public void testIgnoreBetweenSpecialCommentsMultiline() throws IOException {        JavaTokenizer t = new JavaTokenizer();        t.setIgnoreAnnotations(false);        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader("package foo.bar.baz;" + PMD.EOL                + "/* " + PMD.EOL + " * CPD-OFF" + PMD.EOL + "*/" + PMD.EOL                + "@ MyAnnotation (\"ugh\")" + PMD.EOL + "@NamedQueries({" + PMD.EOL + "@NamedQuery(" + PMD.EOL + ")})"                + PMD.EOL + "public class Foo {" + PMD.EOL                + "/* " + PMD.EOL + " * CPD-ON" + PMD.EOL + "*/" + PMD.EOL                + "}"        ));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        TokenEntry.getEOF();        assertEquals(2, tokens.size()); // 2 tokens: "}" + EOF    }    @Test    public void testIgnoreBetweenSpecialAnnotation() throws IOException {        JavaTokenizer t = new JavaTokenizer();        t.setIgnoreAnnotations(false);        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader("package foo.bar.baz;" + PMD.EOL                + "@SuppressWarnings({\"woof\",\"CPD-START\"})" + PMD.EOL + "@SuppressWarnings(\"CPD-START\")" + PMD.EOL                + "@ MyAnnotation (\"ugh\")" + PMD.EOL + "@NamedQueries({" + PMD.EOL + "@NamedQuery(" + PMD.EOL + ")})"                + PMD.EOL + "public class Foo {}" + "@SuppressWarnings({\"ugh\",\"CPD-END\"})" + PMD.EOL        ));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        TokenEntry.getEOF();        assertEquals(10, tokens.size());    }    @Test    public void testIgnoreBetweenSpecialAnnotationAndIgnoreAnnotations() throws IOException {        JavaTokenizer t = new JavaTokenizer();        t.setIgnoreAnnotations(true);        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader("package foo.bar.baz;" + PMD.EOL                + "@SuppressWarnings({\"woof\",\"CPD-START\"})" + PMD.EOL + "@SuppressWarnings(\"CPD-START\")" + PMD.EOL                + "@ MyAnnotation (\"ugh\")" + PMD.EOL + "@NamedQueries({" + PMD.EOL + "@NamedQuery(" + PMD.EOL + ")})"                + PMD.EOL + "public class Foo {}" + PMD.EOL + "@SuppressWarnings({\"ugh\",\"CPD-END\"})" + PMD.EOL        ));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        TokenEntry.getEOF();        assertEquals(1, tokens.size());    }    @Test    public void testIgnoreIdentifiersDontAffectConstructors() throws IOException {        JavaTokenizer t = new JavaTokenizer();        t.setIgnoreAnnotations(false);        t.setIgnoreIdentifiers(true);        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader("package foo.bar.baz;" + PMD.EOL                + "public class Foo extends Bar {" + PMD.EOL + "private Foo notAConstructor;" + PMD.EOL                + "public Foo(int i) { super(i); }" + PMD.EOL + "private Foo(int i, String s) { super(i, s); }"                + PMD.EOL + "/* default */ Foo(int i, String s, Object o) { super(i, s, o); }" + PMD.EOL                + "private static class Inner {" + PMD.EOL + "Inner() { System.out.println(\"Guess who?\"); }" + PMD.EOL                + "}" + PMD.EOL + "}" + PMD.EOL        ));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        TokenEntry.getEOF();        List<TokenEntry> tokenList = tokens.getTokens();        // Member variable of type Foo        assertEquals(String.valueOf(JavaParserConstants.IDENTIFIER), tokenList.get(7).toString());        // Public constructor        assertEquals("Foo", tokenList.get(10).toString());        // Private constructor        assertEquals("Foo", tokenList.get(22).toString());        // Package-private constructor        assertEquals("Foo", tokenList.get(38).toString());        // Inner class constructor        assertEquals("Inner", tokenList.get(64).toString());    }    @Test    public void testIgnoreIdentifiersHandlesEnums() throws IOException {        JavaTokenizer t = new JavaTokenizer();        t.setIgnoreAnnotations(false);        t.setIgnoreIdentifiers(true);        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(                "package foo.bar.baz;" + PMD.EOL + "public enum Foo {" + PMD.EOL + "BAR(1)," + PMD.EOL + "BAZ(2);"                        + PMD.EOL + "Foo(int val) {" + PMD.EOL + "}" + PMD.EOL + "}" + PMD.EOL        ));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        TokenEntry.getEOF();        List<TokenEntry> tokenList = tokens.getTokens();        // Enum member        assertEquals(String.valueOf(JavaParserConstants.IDENTIFIER), tokenList.get(4).toString());        assertEquals(String.valueOf(JavaParserConstants.IDENTIFIER), tokenList.get(9).toString());        // Enum constructor        assertEquals("Foo", tokenList.get(13).toString());    }    @Test    public void testIgnoreIdentifiersWithClassKeyword() throws IOException {        JavaTokenizer t = new JavaTokenizer();        t.setIgnoreAnnotations(false);        t.setIgnoreIdentifiers(true);        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(                "package foo.bar.baz;" + PMD.EOL + "public class Foo {" + PMD.EOL + "Foo() {" + PMD.EOL                        + "}" + PMD.EOL + "public void bar() {" + PMD.EOL + "Bar.baz(Foo.class, () -> {});"                        + PMD.EOL + "}" + PMD.EOL + "}" + PMD.EOL        ));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        TokenEntry.getEOF();        List<TokenEntry> tokenList = tokens.getTokens();        // Class constructor        assertEquals("Foo", tokenList.get(4).toString());        assertEquals(String.valueOf(JavaParserConstants.IDENTIFIER), tokenList.get(11).toString());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import org.junit.Test;import net.sourceforge.pmd.PMD;public class MatchAlgorithmTest {    private static final String LINE_1 = "public class Foo { ";    private static final String LINE_2 = " public void bar() {";    private static final String LINE_3 = "  System.out.println(\"hello\");";    private static final String LINE_4 = "  System.out.println(\"hello\");";    private static final String LINE_5 = "  int i = 5";    private static final String LINE_6 = "  System.out.print(\"hello\");";    private static final String LINE_7 = " }";    private static final String LINE_8 = "}";    private static String getSampleCode() {        return LINE_1 + PMD.EOL + LINE_2 + PMD.EOL + LINE_3 + PMD.EOL + LINE_4 + PMD.EOL + LINE_5 + PMD.EOL + LINE_6                + PMD.EOL + LINE_7 + PMD.EOL + LINE_8;    }    @Test    public void testSimple() {        JavaTokenizer tokenizer = new JavaTokenizer();        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(getSampleCode(), "Foo.java"));        Tokens tokens = new Tokens();        TokenEntry.clearImages();        tokenizer.tokenize(sourceCode, tokens);        assertEquals(41, tokens.size());        Map<String, SourceCode> codeMap = new HashMap<>();        codeMap.put("Foo.java", sourceCode);        MatchAlgorithm matchAlgorithm = new MatchAlgorithm(codeMap, tokens, 5);        matchAlgorithm.findMatches();        Iterator<Match> matches = matchAlgorithm.matches();        Match match = matches.next();        assertFalse(matches.hasNext());        Iterator<Mark> marks = match.iterator();        Mark mark1 = marks.next();        Mark mark2 = marks.next();        assertFalse(marks.hasNext());        assertEquals(3, mark1.getBeginLine());        assertEquals("Foo.java", mark1.getFilename());        assertEquals(LINE_3, mark1.getSourceCodeSlice());        assertEquals(4, mark2.getBeginLine());        assertEquals("Foo.java", mark2.getFilename());        assertEquals(LINE_4, mark2.getSourceCodeSlice());    }    @Test    public void testIgnore() {        JavaTokenizer tokenizer = new JavaTokenizer();        tokenizer.setIgnoreLiterals(true);        tokenizer.setIgnoreIdentifiers(true);        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(getSampleCode(), "Foo.java"));        Tokens tokens = new Tokens();        TokenEntry.clearImages();        tokenizer.tokenize(sourceCode, tokens);        Map<String, SourceCode> codeMap = new HashMap<>();        codeMap.put("Foo.java", sourceCode);        MatchAlgorithm matchAlgorithm = new MatchAlgorithm(codeMap, tokens, 5);        matchAlgorithm.findMatches();        Iterator<Match> matches = matchAlgorithm.matches();        Match match = matches.next();        assertFalse(matches.hasNext());        Iterator<Mark> marks = match.iterator();        marks.next();        marks.next();        marks.next();        assertFalse(marks.hasNext());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ant;import java.io.File;import java.lang.reflect.Field;import java.nio.charset.Charset;import java.util.Locale;import java.util.Objects;import org.apache.commons.io.FileUtils;import org.junit.Assert;import org.junit.Rule;import org.junit.Test;import org.junit.contrib.java.lang.system.RestoreSystemProperties;import org.junit.rules.ExternalResource;import org.junit.rules.TestRule;public class PMDTaskTest extends AbstractAntTestHelper {    public PMDTaskTest() {        super.antTestScriptFilename = "pmdtasktest.xml";    }    @Test    public void testNoFormattersValidation() {        executeTarget("testNoFormattersValidation");        assertOutputContaining("Fields should be declared at the top of the class");    }    @Test    public void testNestedRuleset() {        executeTarget("testNestedRuleset");        assertOutputContaining("Avoid really long methods");        assertOutputContaining("Fields should be declared at the");    }    @Test    public void testFormatterWithProperties() {        executeTarget("testFormatterWithProperties");        assertOutputContaining("Avoid really long methods");        assertOutputContaining("Fields should be declared at the");        assertOutputContaining("link_prefix");        assertOutputContaining("line_prefix");    }    @Test    public void testAbstractNames() {        executeTarget("testAbstractNames");        assertOutputContaining("Avoid really long methods");        assertOutputContaining("Fields should be declared at the");    }    @Test    public void testAbstractNamesInNestedRuleset() {        executeTarget("testAbstractNamesInNestedRuleset");        assertOutputContaining("Avoid really long methods");        assertOutputContaining("Fields should be declared at the");    }    @Test    public void testCommaInRulesetfiles() {        executeTarget("testCommaInRulesetfiles");        assertOutputContaining("Avoid really long methods");        assertOutputContaining("Fields should be declared at the");    }    @Test    public void testRelativeRulesets() {        executeTarget("testRelativeRulesets");        assertOutputContaining("Avoid really long methods");        assertOutputContaining("Fields should be declared at the");    }    @Test    public void testRelativeRulesetsInRulesetfiles() {        executeTarget("testRelativeRulesetsInRulesetfiles");        assertOutputContaining("Avoid really long methods");        assertOutputContaining("Fields should be declared at");    }    @Test    public void testExplicitRuleInRuleSet() {        executeTarget("testExplicitRuleInRuleSet");        assertOutputContaining("Avoid really long methods");    }    @Test    public void testClasspath() {        executeTarget("testClasspath");    }    @Rule    public final TestRule restoreSystemProperties = new RestoreSystemProperties();    @Rule    public final TestRule restoreLocale = new ExternalResource() {        private Locale originalLocale;        @Override        protected void before() throws Throwable {            originalLocale = Locale.getDefault();        }        @Override        protected void after() {            Locale.setDefault(originalLocale);        }    };    // See http://stackoverflow.com/questions/361975/setting-the-default-java-character-encoding and http://stackoverflow.com/a/14987992/1169968    private static void setDefaultCharset(String charsetName) {        try {            System.setProperty("file.encoding", charsetName);            Field charset = Charset.class.getDeclaredField("defaultCharset");            charset.setAccessible(true);            charset.set(null, null);            Objects.requireNonNull(Charset.defaultCharset());        } catch (Exception e) {            throw new RuntimeException(e);        }    }    @Rule    public final TestRule restoreDefaultCharset = new ExternalResource() {        private Charset defaultCharset;        @Override        protected void before() throws Throwable {            defaultCharset = Charset.defaultCharset();        }        @Override        protected void after() {            setDefaultCharset(defaultCharset.name());        }    };    @Test    public void testFormatterEncodingWithXML() throws Exception {        Locale.setDefault(Locale.FRENCH);        setDefaultCharset("cp1252");        executeTarget("testFormatterEncodingWithXML");        String report = FileUtils.readFileToString(new File("target/testFormatterEncodingWithXML-pmd.xml"), "UTF-8");        Assert.assertTrue(report.contains("unusedVariableWithÜmlaut"));    }    @Test    public void testFormatterEncodingWithXMLConsole() throws Exception {        setDefaultCharset("cp1252");        executeTarget("testFormatterEncodingWithXMLConsole");        String report = buildRule.getOutput();        Assert.assertTrue(report.startsWith("<?xml version=\"1.0\" encoding=\"windows-1252\"?>"));        Assert.assertTrue(report.contains("unusedVariableWith&#xdc;mlaut"));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.jaxen;import org.junit.Test;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.lang.rule.XPathRule;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import net.sourceforge.pmd.testframework.TestDescriptor;public class RegexpAcceptanceTest extends SimpleAggregatorTst {    private static final String XPATH = "//ClassOrInterfaceDeclaration[matches(@Image, 'F?o')]";    @Test    public void testSimple() {        Rule r = new XPathRule(XPATH);        r.setLanguage(LanguageRegistry.getLanguage(JavaLanguageModule.NAME));        r.setMessage("");        TestDescriptor[] testDescriptors = extractTestsFromXml(r, "RegexpAcceptance");        for (TestDescriptor testDescriptor : testDescriptors) {            testDescriptor.setReinitializeRule(false);        }        runTests(testDescriptors);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.jaxen;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertSame;import static org.junit.Assert.fail;import java.util.Iterator;import java.util.List;import org.jaxen.BaseXPath;import org.jaxen.JaxenException;import org.jaxen.UnsupportedAxisException;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression;import net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix;import net.sourceforge.pmd.lang.java.ast.ASTStatement;import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;import net.sourceforge.pmd.testframework.RuleTst;public class DocumentNavigatorTest extends RuleTst {    private TestRule rule;    private class TestRule extends AbstractJavaRule {        private Node compilationUnit;        private Node importDeclaration;        private Node statement;        private Node primaryPrefix;        private Node primaryExpression;        /**         * @see net.sourceforge.pmd.lang.java.ast.JavaParserVisitor#visit(ASTCompilationUnit,         *      Object)         */        public Object visit(ASTCompilationUnit node, Object data) {            this.compilationUnit = node;            return super.visit(node, data);        }        public Object visit(ASTImportDeclaration node, Object data) {            this.importDeclaration = node;            return super.visit(node, data);        }        public Object visit(ASTStatement node, Object data) {            this.statement = node;            return super.visit(node, data);        }        public Object visit(ASTPrimaryPrefix node, Object data) {            this.primaryPrefix = node;            return super.visit(node, data);        }        public Object visit(ASTPrimaryExpression node, Object data) {            this.primaryExpression = node;            return super.visit(node, data);        }    }    @Before    public void setUp() throws Exception {        try {            rule = new TestRule();            runTestFromString(TEST, rule, new Report(),                    LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getDefaultVersion());        } catch (Throwable xx) {            xx.printStackTrace();            fail();        }    }    @Test    public void testChildAxisIterator() {        DocumentNavigator nav = new DocumentNavigator();        Iterator<Node> iter = nav.getChildAxisIterator(rule.compilationUnit);        assertSame(rule.compilationUnit.jjtGetChild(0), iter.next());        assertSame(rule.compilationUnit.jjtGetChild(1), iter.next());        assertFalse(iter.hasNext());    }    @Test    public void testParentAxisIterator() {        DocumentNavigator nav = new DocumentNavigator();        Iterator<Node> iter = nav.getParentAxisIterator(rule.importDeclaration);        assertSame(rule.importDeclaration.jjtGetParent(), iter.next());        assertFalse(iter.hasNext());    }    @Test    public void testParentAxisIterator2() {        DocumentNavigator nav = new DocumentNavigator();        Iterator<Node> iter = nav.getParentAxisIterator(rule.compilationUnit);        assertFalse(iter.hasNext());    }    @Test    public void testDescendantAxisIterator() throws UnsupportedAxisException {        DocumentNavigator nav = new DocumentNavigator();        Iterator<?> iter = nav.getDescendantAxisIterator(rule.statement);        Node statementExpression = rule.statement.jjtGetChild(0);        assertSame(statementExpression, iter.next());        Node primaryExpression = statementExpression.jjtGetChild(0);        assertSame(primaryExpression, iter.next());        Node primaryPrefix = primaryExpression.jjtGetChild(0);        assertSame(primaryPrefix, iter.next());        Node primarySuffix = primaryExpression.jjtGetChild(1);        // assertSame(primarySuffix, iter.next());        Node name = primaryPrefix.jjtGetChild(0);        // assertSame(name, iter.next());        Node arguments = primarySuffix.jjtGetChild(0);        // assertSame(arguments, iter.next());        // assertFalse(iter.hasNext());    }    @Test    public void testDescendantAxisIterator2() throws UnsupportedAxisException {        DocumentNavigator nav = new DocumentNavigator();        Iterator<?> iter = nav.getDescendantAxisIterator(rule.primaryPrefix);        Node name = rule.primaryPrefix.jjtGetChild(0);        assertSame(name, iter.next());        assertFalse(iter.hasNext());    }    @Test    public void testFollowingSiblingAxisIterator() {        DocumentNavigator nav = new DocumentNavigator();        Iterator<Node> iter = nav.getFollowingSiblingAxisIterator(rule.primaryExpression.jjtGetChild(0));        assertSame(rule.primaryExpression.jjtGetChild(1), iter.next());        assertFalse(iter.hasNext());    }    @Test    public void testFollowingSiblingAxisIterator2() {        DocumentNavigator nav = new DocumentNavigator();        Iterator<Node> iter = nav.getFollowingSiblingAxisIterator(rule.primaryExpression.jjtGetChild(1));        assertFalse(iter.hasNext());    }    @Test    public void testPrecedingSiblingAxisIterator() {        DocumentNavigator nav = new DocumentNavigator();        Iterator<Node> iter = nav.getPrecedingSiblingAxisIterator(rule.primaryExpression.jjtGetChild(1));        assertSame(rule.primaryExpression.jjtGetChild(0), iter.next());        assertFalse(iter.hasNext());    }    @Test    public void testPrecedingSiblingAxisIterator2() {        DocumentNavigator nav = new DocumentNavigator();        Iterator<Node> iter = nav.getPrecedingSiblingAxisIterator(rule.primaryExpression.jjtGetChild(0));        assertFalse(iter.hasNext());    }    @Test    public void testXPath() throws JaxenException {        BaseXPath xPath = new BaseXPath(".//*", new DocumentNavigator());        List<?> matches = xPath.selectNodes(rule.statement);        assertEquals(6, matches.size());    }    @Test    public void testXPath2() throws JaxenException {        BaseXPath xPath = new BaseXPath(".//*", new DocumentNavigator());        List<?> matches = xPath.selectNodes(rule.importDeclaration);        assertEquals(1, matches.size());    }    public static final String TEST = "import java.io.*;" + PMD.EOL + "public class Foo {" + PMD.EOL + " public Foo() {"            + PMD.EOL + "  try {" + PMD.EOL + "   FileReader fr = new FileReader(\"/dev/null\");" + PMD.EOL            + "  } catch (Exception e) {}" + PMD.EOL + "  try {" + PMD.EOL            + "   FileReader fr = new FileReader(\"/dev/null\");" + PMD.EOL + "  } catch (Exception e) {" + PMD.EOL            + "   e.printStackTrace();" + PMD.EOL + "   // this shouldn't show up on the report" + PMD.EOL + "  }"            + PMD.EOL + " }" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.typeresolution;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.fail;import java.util.Map;import org.junit.Before;import org.junit.Ignore;import org.junit.Test;import net.sourceforge.pmd.lang.java.typeresolution.PMDASMClassLoader;public class PMDASMClassLoaderTest {    private PMDASMClassLoader cl;    @Before    public void setUp() throws Exception {        cl = PMDASMClassLoader.getInstance(getClass().getClassLoader());    }    @Test    public void testLoadClassWithImportOnDemand() throws Exception {        String className = "net.sourceforge.pmd.typeresolution.ClassWithImportOnDemand";        Class<?> clazz = cl.loadClass(className);        assertNotNull(clazz);        Map<String, String> imports = cl.getImportedClasses(className);        assertNotNull(imports);        assertEquals("java.util.List", imports.get("List"));        assertEquals("java.util.ArrayList", imports.get("ArrayList"));        assertEquals("java.lang.Object", imports.get("Object"));        assertEquals("net.sourceforge.pmd.typeresolution.ClassWithImportOnDemand",                imports.get("ClassWithImportOnDemand"));    }    @Test    public void testClassWithImportInnerOnDemand() throws Exception {        String className = "net.sourceforge.pmd.typeresolution.ClassWithImportInnerOnDemand";        Class<?> clazz = cl.loadClass(className);        assertNotNull(clazz);        Map<String, String> imports = cl.getImportedClasses(className);        assertNotNull(imports);        assertEquals("java.util.Iterator", imports.get("Iterator"));        assertEquals("java.util.Map", imports.get("Map"));        assertEquals("java.util.Set", imports.get("Set"));        assertEquals("java.util.Map$Entry", imports.get("Entry"));        assertEquals("java.util.Map$Entry", imports.get("Map$Entry"));        assertEquals("java.lang.Object", imports.get("Object"));        assertEquals("java.util.StringTokenizer", imports.get("StringTokenizer"));        assertEquals("net.sourceforge.pmd.typeresolution.ClassWithImportInnerOnDemand",                imports.get("ClassWithImportInnerOnDemand"));    }    /**     * Unit test for bug 3546093.     *     * @throws Exception     *             any error     */    @Test    public void testCachingOfNotFoundClasses() throws Exception {        MockedClassLoader mockedClassloader = new MockedClassLoader();        PMDASMClassLoader cl = PMDASMClassLoader.getInstance(mockedClassloader);        String notExistingClassname = "that.clazz.doesnot.Exist";        try {            cl.loadClass(notExistingClassname);            fail();        } catch (ClassNotFoundException e) {            // expected        }        try {            cl.loadClass(notExistingClassname);            fail();        } catch (ClassNotFoundException e) {            // expected        }        assertEquals(1, mockedClassloader.findClassCalls);    }    private static class MockedClassLoader extends ClassLoader {        int findClassCalls = 0;        @Override        protected Class<?> findClass(String name) throws ClassNotFoundException {            findClassCalls++;            return super.findClass(name);        }    }    /**     * With this test you can verify, how much memory could be consumed by the     * dontBother cache.     *      * @throws Exception     *             any error     */    @Ignore    @Test    public void testCachingMemoryConsumption() throws Exception {        MockedClassLoader mockedClassLoader = new MockedClassLoader();        PMDASMClassLoader cl = PMDASMClassLoader.getInstance(mockedClassLoader);        Runtime runtime = Runtime.getRuntime();        System.gc();        long usedBytesBefore = runtime.totalMemory() - runtime.freeMemory();        for (long i = 0; i < 3000; i++) {            try {                cl.loadClass("com.very.long.package.name.and.structure.MyClass" + i);            } catch (ClassNotFoundException e) {                // expected            }        }        long usedBytesAfter = runtime.totalMemory() - runtime.freeMemory();        System.out.println((usedBytesAfter - usedBytesBefore) / (1024.0 * 1024.0) + " mb needed");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.typeresolution;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNull;import java.io.IOException;import java.io.InputStream;import java.io.StringReader;import java.util.ArrayList;import java.util.List;import java.util.StringTokenizer;import org.apache.commons.io.IOUtils;import org.jaxen.JaxenException;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersionHandler;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;import net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTExpression;import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;import net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTLiteral;import net.sourceforge.pmd.lang.java.ast.ASTName;import net.sourceforge.pmd.lang.java.ast.ASTNullLiteral;import net.sourceforge.pmd.lang.java.ast.ASTReferenceType;import net.sourceforge.pmd.lang.java.ast.ASTStatementExpression;import net.sourceforge.pmd.lang.java.ast.ASTType;import net.sourceforge.pmd.lang.java.ast.ASTTypeDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.lang.java.ast.TypeNode;import net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration;import net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver;import net.sourceforge.pmd.typeresolution.testdata.AnonymousInnerClass;import net.sourceforge.pmd.typeresolution.testdata.ArrayListFound;import net.sourceforge.pmd.typeresolution.testdata.DefaultJavaLangImport;import net.sourceforge.pmd.typeresolution.testdata.EnumWithAnonymousInnerClass;import net.sourceforge.pmd.typeresolution.testdata.ExtraTopLevelClass;import net.sourceforge.pmd.typeresolution.testdata.InnerClass;import net.sourceforge.pmd.typeresolution.testdata.Literals;import net.sourceforge.pmd.typeresolution.testdata.Operators;import net.sourceforge.pmd.typeresolution.testdata.Promotion;public class ClassTypeResolverTest {    @Test    public void testClassNameExists() {        ClassTypeResolver classTypeResolver = new ClassTypeResolver();        assertEquals(true, classTypeResolver.classNameExists("java.lang.System"));        assertEquals(false, classTypeResolver.classNameExists("im.sure.that.this.does.not.Exist"));        assertEquals(true, classTypeResolver.classNameExists("java.awt.List"));    }    @Test    public void acceptanceTest() {        ASTCompilationUnit acu = parseAndTypeResolveForClass15(ArrayListFound.class);        assertEquals(ArrayListFound.class, acu.getFirstDescendantOfType(ASTTypeDeclaration.class).getType());        assertEquals(ArrayListFound.class,                acu.getFirstDescendantOfType(ASTClassOrInterfaceDeclaration.class).getType());        ASTImportDeclaration id = acu.getFirstDescendantOfType(ASTImportDeclaration.class);        assertEquals("java.util", id.getPackage().getName());        assertEquals(ArrayList.class, id.getType());        assertEquals(ArrayList.class, acu.getFirstDescendantOfType(ASTClassOrInterfaceType.class).getType());        assertEquals(ArrayList.class, acu.getFirstDescendantOfType(ASTReferenceType.class).getType());        assertEquals(ArrayList.class, acu.getFirstDescendantOfType(ASTType.class).getType());        assertEquals(ArrayList.class, acu.getFirstDescendantOfType(ASTVariableDeclaratorId.class).getType());        assertEquals(ArrayList.class, acu.getFirstDescendantOfType(ASTVariableDeclarator.class).getType());        assertEquals(ArrayList.class, acu.getFirstDescendantOfType(ASTFieldDeclaration.class).getType());        acu = parseAndTypeResolveForClass15(DefaultJavaLangImport.class);        assertEquals(String.class, acu.getFirstDescendantOfType(ASTClassOrInterfaceType.class).getType());        assertEquals(Override.class, acu.findDescendantsOfType(ASTName.class).get(1).getType());    }    /**     * See bug #1138 Anonymous inner class in enum causes NPE     */    @Test    public void testEnumAnonymousInnerClass() {        ASTCompilationUnit acu = parseAndTypeResolveForClass15(EnumWithAnonymousInnerClass.class);        Class<?> inner = acu.getFirstDescendantOfType(ASTAllocationExpression.class)                .getFirstDescendantOfType(ASTClassOrInterfaceType.class).getType();        assertEquals("net.sourceforge.pmd.typeresolution.testdata.EnumWithAnonymousInnerClass$1", inner.getName());    }    @Test    public void testExtraTopLevelClass() throws ClassNotFoundException {        ASTCompilationUnit acu = parseAndTypeResolveForClass15(ExtraTopLevelClass.class);        Class<?> theExtraTopLevelClass = Class                .forName("net.sourceforge.pmd.typeresolution.testdata.TheExtraTopLevelClass");        // First class        ASTTypeDeclaration typeDeclaration = (ASTTypeDeclaration) acu.jjtGetChild(1);        assertEquals(ExtraTopLevelClass.class, typeDeclaration.getType());        assertEquals(ExtraTopLevelClass.class,                typeDeclaration.getFirstDescendantOfType(ASTClassOrInterfaceDeclaration.class).getType());        // Second class        typeDeclaration = (ASTTypeDeclaration) acu.jjtGetChild(2);        assertEquals(theExtraTopLevelClass, typeDeclaration.getType());        assertEquals(theExtraTopLevelClass,                typeDeclaration.getFirstDescendantOfType(ASTClassOrInterfaceDeclaration.class).getType());    }    @Test    public void testInnerClass() throws ClassNotFoundException {        ASTCompilationUnit acu = parseAndTypeResolveForClass15(InnerClass.class);        Class<?> theInnerClass = Class.forName("net.sourceforge.pmd.typeresolution.testdata.InnerClass$TheInnerClass");        // Outer class        ASTTypeDeclaration typeDeclaration = acu.getFirstDescendantOfType(ASTTypeDeclaration.class);        assertEquals(InnerClass.class, typeDeclaration.getType());        ASTClassOrInterfaceDeclaration outerClassDeclaration = typeDeclaration                .getFirstDescendantOfType(ASTClassOrInterfaceDeclaration.class);        assertEquals(InnerClass.class, outerClassDeclaration.getType());        // Inner class        assertEquals(theInnerClass,                outerClassDeclaration.getFirstDescendantOfType(ASTClassOrInterfaceDeclaration.class).getType());        // Method parameter as inner class        ASTFormalParameter formalParameter = typeDeclaration.getFirstDescendantOfType(ASTFormalParameter.class);        assertEquals(theInnerClass, formalParameter.getTypeNode().getType());    }    /**     * If we don't have the auxclasspath, we might not find the inner class. In     * that case, we'll need to search by name for a match.     *      * @throws Exception     */    @Test    public void testInnerClassNotCompiled() throws Exception {        Node acu = parseAndTypeResolveForString("public class TestInnerClass {\n" + "    public void foo() {\n"                + "        Statement statement = new Statement();\n" + "    }\n" + "    static class Statement {\n"                + "    }\n" + "}", "1.8");        ASTClassOrInterfaceType statement = acu.getFirstDescendantOfType(ASTClassOrInterfaceType.class);        Assert.assertTrue(statement.isReferenceToClassSameCompilationUnit());    }    @Test    public void testAnonymousInnerClass() throws ClassNotFoundException {        ASTCompilationUnit acu = parseAndTypeResolveForClass15(AnonymousInnerClass.class);        Class<?> theAnonymousInnerClass = Class                .forName("net.sourceforge.pmd.typeresolution.testdata.AnonymousInnerClass$1");        // Outer class        ASTTypeDeclaration typeDeclaration = acu.getFirstDescendantOfType(ASTTypeDeclaration.class);        assertEquals(AnonymousInnerClass.class, typeDeclaration.getType());        ASTClassOrInterfaceDeclaration outerClassDeclaration = typeDeclaration                .getFirstDescendantOfType(ASTClassOrInterfaceDeclaration.class);        assertEquals(AnonymousInnerClass.class, outerClassDeclaration.getType());        // Anonymous Inner class        assertEquals(theAnonymousInnerClass,                outerClassDeclaration.getFirstDescendantOfType(ASTAllocationExpression.class).getType());    }    @Test    public void testLiterals() throws JaxenException {        ASTCompilationUnit acu = parseAndTypeResolveForClass15(Literals.class);        List<ASTLiteral> literals = convertList(acu.findChildNodesWithXPath("//Literal"), ASTLiteral.class);        int index = 0;        // String s = "s";        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(String.class, literals.get(index++).getType());        // boolean boolean1 = false;        assertEquals(Boolean.TYPE, literals.get(index).getFirstDescendantOfType(ASTBooleanLiteral.class).getType());        assertEquals(Boolean.TYPE, literals.get(index++).getType());        // boolean boolean2 = true;        assertEquals(Boolean.TYPE, literals.get(index).getFirstDescendantOfType(ASTBooleanLiteral.class).getType());        assertEquals(Boolean.TYPE, literals.get(index++).getType());        // Object obj = null;        assertNull(literals.get(index).getFirstDescendantOfType(ASTNullLiteral.class).getType());        assertNull(literals.get(index++).getType());        // byte byte1 = 0;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // byte byte2 = 0x0F;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // byte byte3 = -007;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // short short1 = 0;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // short short2 = 0x0F;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // short short3 = -007;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // char char1 = 0;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // char char2 = 0x0F;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // char char3 = 007;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // char char4 = 'a';        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Character.TYPE, literals.get(index++).getType());        // int int1 = 0;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // int int2 = 0x0F;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // int int3 = -007;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // int int4 = 'a';        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Character.TYPE, literals.get(index++).getType());        // long long1 = 0;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // long long2 = 0x0F;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // long long3 = -007;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // long long4 = 0L;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Long.TYPE, literals.get(index++).getType());        // long long5 = 0x0Fl;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Long.TYPE, literals.get(index++).getType());        // long long6 = -007L;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Long.TYPE, literals.get(index++).getType());        // long long7 = 'a';        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Character.TYPE, literals.get(index++).getType());        // float float1 = 0.0f;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Float.TYPE, literals.get(index++).getType());        // float float2 = -10e+01f;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Float.TYPE, literals.get(index++).getType());        // float float3 = 0x08.08p3f;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Float.TYPE, literals.get(index++).getType());        // float float4 = 0xFF;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // float float5 = 'a';        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Character.TYPE, literals.get(index++).getType());        // double double1 = 0.0;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Double.TYPE, literals.get(index++).getType());        // double double2 = -10e+01;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Double.TYPE, literals.get(index++).getType());        // double double3 = 0x08.08p3;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Double.TYPE, literals.get(index++).getType());        // double double4 = 0xFF;        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Integer.TYPE, literals.get(index++).getType());        // double double5 = 'a';        assertEquals(0, literals.get(index).jjtGetNumChildren());        assertEquals(Character.TYPE, literals.get(index++).getType());        // Make sure we got them all.        assertEquals("All literals not tested", index, literals.size());    }    @Test    public void testUnaryNumericPromotion() throws JaxenException {        ASTCompilationUnit acu = parseAndTypeResolveForClass15(Promotion.class);        List<ASTExpression> expressions = convertList(                acu.findChildNodesWithXPath(                        "//Block[preceding-sibling::MethodDeclarator[@Image = 'unaryNumericPromotion']]//Expression[UnaryExpression]"),                ASTExpression.class);        int index = 0;        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Float.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        // Make sure we got them all.        assertEquals("All expressions not tested", index, expressions.size());    }    @Test    public void testBinaryNumericPromotion() throws JaxenException {        ASTCompilationUnit acu = parseAndTypeResolveForClass15(Promotion.class);        List<ASTExpression> expressions = convertList(                acu.findChildNodesWithXPath(                        "//Block[preceding-sibling::MethodDeclarator[@Image = 'binaryNumericPromotion']]//Expression[AdditiveExpression]"),                ASTExpression.class);        int index = 0;        // LHS = byte        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Float.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        // LHS = short        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Float.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        // LHS = char        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Float.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        // LHS = int        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Float.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        // LHS = long        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Float.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        // LHS = float        assertEquals(Float.TYPE, expressions.get(index++).getType());        assertEquals(Float.TYPE, expressions.get(index++).getType());        assertEquals(Float.TYPE, expressions.get(index++).getType());        assertEquals(Float.TYPE, expressions.get(index++).getType());        assertEquals(Float.TYPE, expressions.get(index++).getType());        assertEquals(Float.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        // LHS = double        assertEquals(Double.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        // Make sure we got them all.        assertEquals("All expressions not tested", index, expressions.size());    }    @Test    public void testBinaryStringPromotion() throws JaxenException {        ASTCompilationUnit acu = parseAndTypeResolveForClass15(Promotion.class);        List<ASTExpression> expressions = convertList(                acu.findChildNodesWithXPath(                        "//Block[preceding-sibling::MethodDeclarator[@Image = 'binaryStringPromotion']]//Expression"),                ASTExpression.class);        int index = 0;        assertEquals(String.class, expressions.get(index++).getType());        assertEquals(String.class, expressions.get(index++).getType());        assertEquals(String.class, expressions.get(index++).getType());        assertEquals(String.class, expressions.get(index++).getType());        assertEquals(String.class, expressions.get(index++).getType());        // Make sure we got them all.        assertEquals("All expressions not tested", index, expressions.size());    }    @Test    public void testUnaryLogicalOperators() throws JaxenException {        ASTCompilationUnit acu = parseAndTypeResolveForClass15(Operators.class);        List<ASTExpression> expressions = convertList(                acu.findChildNodesWithXPath(                        "//Block[preceding-sibling::MethodDeclarator[@Image = 'unaryLogicalOperators']]//Expression"),                ASTExpression.class);        int index = 0;        assertEquals(Boolean.TYPE, expressions.get(index++).getType());        assertEquals(Boolean.TYPE, expressions.get(index++).getType());        // Make sure we got them all.        assertEquals("All expressions not tested", index, expressions.size());    }    @Test    public void testBinaryLogicalOperators() throws JaxenException {        ASTCompilationUnit acu = parseAndTypeResolveForClass15(Operators.class);        List<ASTExpression> expressions = convertList(                acu.findChildNodesWithXPath(                        "//Block[preceding-sibling::MethodDeclarator[@Image = 'binaryLogicalOperators']]//Expression"),                ASTExpression.class);        int index = 0;        assertEquals(Boolean.TYPE, expressions.get(index++).getType());        assertEquals(Boolean.TYPE, expressions.get(index++).getType());        assertEquals(Boolean.TYPE, expressions.get(index++).getType());        assertEquals(Boolean.TYPE, expressions.get(index++).getType());        assertEquals(Boolean.TYPE, expressions.get(index++).getType());        assertEquals(Boolean.TYPE, expressions.get(index++).getType());        assertEquals(Boolean.TYPE, expressions.get(index++).getType());        assertEquals(Boolean.TYPE, expressions.get(index++).getType());        assertEquals(Boolean.TYPE, expressions.get(index++).getType());        assertEquals(Boolean.TYPE, expressions.get(index++).getType());        assertEquals(Boolean.TYPE, expressions.get(index++).getType());        assertEquals(Boolean.TYPE, expressions.get(index++).getType());        assertEquals(Boolean.TYPE, expressions.get(index++).getType());        // Make sure we got them all.        assertEquals("All expressions not tested", index, expressions.size());    }    @Test    public void testUnaryNumericOperators() throws JaxenException {        ASTCompilationUnit acu = parseAndTypeResolveForClass15(Operators.class);        List<TypeNode> expressions = new ArrayList<>();        expressions.addAll(convertList(                acu.findChildNodesWithXPath(                        "//Block[preceding-sibling::MethodDeclarator[@Image = 'unaryNumericOperators']]//Expression"),                TypeNode.class));        expressions.addAll(convertList(                acu.findChildNodesWithXPath(                        "//Block[preceding-sibling::MethodDeclarator[@Image = 'unaryNumericOperators']]//PostfixExpression"),                TypeNode.class));        expressions.addAll(convertList(                acu.findChildNodesWithXPath(                        "//Block[preceding-sibling::MethodDeclarator[@Image = 'unaryNumericOperators']]//PreIncrementExpression"),                TypeNode.class));        expressions.addAll(convertList(                acu.findChildNodesWithXPath(                        "//Block[preceding-sibling::MethodDeclarator[@Image = 'unaryNumericOperators']]//PreDecrementExpression"),                TypeNode.class));        int index = 0;        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        assertEquals(Double.TYPE, expressions.get(index++).getType());        // Make sure we got them all.        assertEquals("All expressions not tested", index, expressions.size());    }    private static <T> List<T> convertList(List<Node> nodes, Class<T> target) {        List<T> converted = new ArrayList<>();        for (Node n : nodes) {            converted.add(target.cast(n));        }        return converted;    }    @Test    public void testBinaryNumericOperators() throws JaxenException {        ASTCompilationUnit acu = parseAndTypeResolveForClass15(Operators.class);        List<ASTExpression> expressions = convertList(                acu.findChildNodesWithXPath(                        "//Block[preceding-sibling::MethodDeclarator[@Image = 'binaryNumericOperators']]//Expression"),                ASTExpression.class);        int index = 0;        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        assertEquals(Integer.TYPE, expressions.get(index++).getType());        // Make sure we got them all.        assertEquals("All expressions not tested", index, expressions.size());    }    @Test    public void testAssignmentOperators() throws JaxenException {        ASTCompilationUnit acu = parseAndTypeResolveForClass15(Operators.class);        List<ASTStatementExpression> expressions = convertList(                acu.findChildNodesWithXPath(                        "//Block[preceding-sibling::MethodDeclarator[@Image = 'assignmentOperators']]//StatementExpression"),                ASTStatementExpression.class);        int index = 0;        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        assertEquals(Long.TYPE, expressions.get(index++).getType());        // Make sure we got them all.        assertEquals("All expressions not tested", index, expressions.size());    }    /**     * The type should be filled also on the ASTVariableDeclaratorId node, not     * only on the variable name declaration.     */    @Test    public void testFullyQualifiedType() {        String source = "public class Foo {\n" + "    public void bar() {\n"                + "        java.util.StringTokenizer st = new StringTokenizer(\"a.b.c.d\", \".\");\n"                + "        while (st.hasMoreTokens()) {\n" + "            System.out.println(st.nextToken());\n"                + "        }\n" + "    }\n" + "}";        ASTCompilationUnit acu = parseAndTypeResolveForString(source, "1.5");        List<ASTName> names = acu.findDescendantsOfType(ASTName.class);        ASTName theStringTokenizer = null;        for (ASTName name : names) {            if (name.hasImageEqualTo("st.hasMoreTokens")) {                theStringTokenizer = name;                break;            }        }        Assert.assertNotNull(theStringTokenizer);        VariableNameDeclaration declaration = (VariableNameDeclaration) theStringTokenizer.getNameDeclaration();        Assert.assertNotNull(declaration);        Assert.assertEquals("java.util.StringTokenizer", declaration.getTypeImage());        Assert.assertNotNull(declaration.getType());        Assert.assertSame(StringTokenizer.class, declaration.getType());        ASTVariableDeclaratorId id = (ASTVariableDeclaratorId) declaration.getNode();        Assert.assertNotNull(id.getType());        Assert.assertSame(StringTokenizer.class, id.getType());    }    private ASTCompilationUnit parseAndTypeResolveForClass15(Class<?> clazz) {        return parseAndTypeResolveForClass(clazz, "1.5");    }    // Note: If you're using Eclipse or some other IDE to run this test, you    // _must_ have the src/test/java folder in    // the classpath. Normally the IDE doesn't put source directories themselves    // directly in the classpath, only    // the output directories are in the classpath.    private ASTCompilationUnit parseAndTypeResolveForClass(Class<?> clazz, String version) {        String sourceFile = clazz.getName().replace('.', '/') + ".java";        InputStream is = ClassTypeResolverTest.class.getClassLoader().getResourceAsStream(sourceFile);        if (is == null) {            throw new IllegalArgumentException("Unable to find source file " + sourceFile + " for " + clazz);        }        String source;        try {            source = IOUtils.toString(is);        } catch (IOException e) {            throw new RuntimeException(e);        }        return parseAndTypeResolveForString(source, version);    }    private ASTCompilationUnit parseAndTypeResolveForString(String source, String version) {        LanguageVersionHandler languageVersionHandler = LanguageRegistry.getLanguage(JavaLanguageModule.NAME)                .getVersion(version).getLanguageVersionHandler();        ASTCompilationUnit acu = (ASTCompilationUnit) languageVersionHandler                .getParser(languageVersionHandler.getDefaultParserOptions()).parse(null, new StringReader(source));        languageVersionHandler.getSymbolFacade().start(acu);        languageVersionHandler.getTypeResolutionFacade(ClassTypeResolverTest.class.getClassLoader()).start(acu);        return acu;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cli;import static org.junit.Assert.assertTrue;import java.io.File;import java.util.regex.Pattern;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.util.FileUtil;/** * @author Romain Pelisse &lt;belaran@gmail.com&gt; *  */public class CLITest extends BaseCLITest {    @Test    public void minimalArgs() {        String[] args = { "-d", SOURCE_FOLDER, "-f", "text", "-R", "java-unnecessary,java-design", };        runTest(args, "minimalArgs");    }    @Test    public void minimumPriority() {        String[] args = { "-d", SOURCE_FOLDER, "-f", "text", "-R", "java-design", "-min", "1", };        runTest(args, "minimumPriority");    }    @Test    public void usingDebug() {        String[] args = { "-d", SOURCE_FOLDER, "-f", "text", "-R", "java-design", "-debug", };        runTest(args, "minimalArgsWithDebug");    }    @Test    public void changeJavaVersion() {        String[] args = { "-d", SOURCE_FOLDER, "-f", "text", "-R", "java-design", "-version", "1.5", "-language",            "java", "-debug", };        String resultFilename = runTest(args, "chgJavaVersion");        assertTrue("Invalid Java version",                FileUtil.findPatternInFile(new File(resultFilename), "Using Java version: Java 1.5"));    }    @Test    public void exitStatusNoViolations() {        String[] args = { "-d", SOURCE_FOLDER, "-f", "text", "-R", "java-design", };        runTest(args, "exitStatusNoViolations");    }    @Test    public void exitStatusWithViolations() {        String[] args = { "-d", SOURCE_FOLDER, "-f", "text", "-R", "java-empty", };        String resultFilename = runTest(args, "exitStatusWithViolations", 4);        assertTrue(FileUtil.findPatternInFile(new File(resultFilename), "Avoid empty if"));    }    @Test    public void exitStatusWithViolationsAndWithoutFailOnViolations() {        String[] args = { "-d", SOURCE_FOLDER, "-f", "text", "-R", "java-empty", "-failOnViolation", "false", };        String resultFilename = runTest(args, "exitStatusWithViolationsAndWithoutFailOnViolations", 0);        assertTrue(FileUtil.findPatternInFile(new File(resultFilename), "Avoid empty if"));    }    /**     * See https://sourceforge.net/p/pmd/bugs/1231/     */    @Test    public void testWrongRuleset() throws Exception {        String[] args = { "-d", SOURCE_FOLDER, "-f", "text", "-R", "java-designn", };        String filename = TEST_OUPUT_DIRECTORY + "testWrongRuleset.txt";        createTestOutputFile(filename);        runPMDWith(args);        Assert.assertEquals(1, getStatusCode());        assertTrue(FileUtil.findPatternInFile(new File(filename),                "Can't find resource 'null' for rule 'java-designn'." + "  Make sure the resource is a valid file"));    }    /**     * See https://sourceforge.net/p/pmd/bugs/1231/     */    @Test    public void testWrongRulesetWithRulename() throws Exception {        String[] args = { "-d", SOURCE_FOLDER, "-f", "text", "-R", "java-designn/UseCollectionIsEmpty", };        String filename = TEST_OUPUT_DIRECTORY + "testWrongRuleset.txt";        createTestOutputFile(filename);        runPMDWith(args);        Assert.assertEquals(1, getStatusCode());        assertTrue(FileUtil.findPatternInFile(new File(filename),                "Can't find resource 'null' for rule " + "'java-designn/UseCollectionIsEmpty'."));    }    /**     * See https://sourceforge.net/p/pmd/bugs/1231/     */    @Test    public void testWrongRulename() throws Exception {        String[] args = { "-d", SOURCE_FOLDER, "-f", "text", "-R", "java-design/ThisRuleDoesNotExist", };        String filename = TEST_OUPUT_DIRECTORY + "testWrongRuleset.txt";        createTestOutputFile(filename);        runPMDWith(args);        Assert.assertEquals(1, getStatusCode());        assertTrue(FileUtil.findPatternInFile(new File(filename), Pattern                .quote("No rules found. Maybe you mispelled a rule name?" + " (java-design/ThisRuleDoesNotExist)")));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import java.io.File;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.LanguageVersionDiscoverer;import net.sourceforge.pmd.lang.java.JavaLanguageModule;public class LanguageVersionDiscovererTest {    /**     * Test on Java file with default options.     */    @Test    public void testJavaFileUsingDefaults() {        LanguageVersionDiscoverer discoverer = new LanguageVersionDiscoverer();        File javaFile = new File("/path/to/MyClass.java");        LanguageVersion languageVersion = discoverer.getDefaultLanguageVersionForFile(javaFile);        assertEquals("LanguageVersion must be Java 1.8 !",                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.8"), languageVersion);    }    /**     * Test on Java file with Java version set to 1.4.     */    @Test    public void testJavaFileUsing14() {        LanguageVersionDiscoverer discoverer = new LanguageVersionDiscoverer();        discoverer.setDefaultLanguageVersion(LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.4"));        File javaFile = new File("/path/to/MyClass.java");        LanguageVersion languageVersion = discoverer.getDefaultLanguageVersionForFile(javaFile);        assertEquals("LanguageVersion must be Java 1.4!",                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.4"), languageVersion);    }    @Test    public void testLanguageVersionDiscoverer() {        PMDConfiguration configuration = new PMDConfiguration();        LanguageVersionDiscoverer languageVersionDiscoverer = configuration.getLanguageVersionDiscoverer();        assertEquals("Default Java version", LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.8"),                languageVersionDiscoverer                        .getDefaultLanguageVersion(LanguageRegistry.getLanguage(JavaLanguageModule.NAME)));        configuration                .setDefaultLanguageVersion(LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertEquals("Modified Java version", LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"),                languageVersionDiscoverer                        .getDefaultLanguageVersion(LanguageRegistry.getLanguage(JavaLanguageModule.NAME)));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.java.JavaLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection data() {        return Arrays.asList(new Object[][] {            { JavaLanguageModule.NAME, JavaLanguageModule.TERSE_NAME, "1.3",                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.3"), },            { JavaLanguageModule.NAME, JavaLanguageModule.TERSE_NAME, "1.4",                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.4"), },            { JavaLanguageModule.NAME, JavaLanguageModule.TERSE_NAME, "1.5",                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"), },            { JavaLanguageModule.NAME, JavaLanguageModule.TERSE_NAME, "1.6",                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.6"), },            { JavaLanguageModule.NAME, JavaLanguageModule.TERSE_NAME, "1.7",                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.7"), },            { JavaLanguageModule.NAME, JavaLanguageModule.TERSE_NAME, "1.8",                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.8"), },            // this one won't be found: case sensitive!            { "JAVA", "JAVA", "1.7", null, }, });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.testframework.RuleTst;public class ReportTest extends RuleTst {    private LanguageVersion defaultLanguage = LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getDefaultVersion();    @Test    public void testBasic() {        Report r = new Report();        runTestFromString(TEST1, new FooRule(), r, defaultLanguage);        assertFalse(r.isEmpty());    }    @Test    public void testExclusionsInReportWithRuleViolationSuppressRegex() {        Report rpt = new Report();        Rule rule = new FooRule();        rule.setProperty(Rule.VIOLATION_SUPPRESS_REGEX_DESCRIPTOR, ".*No Foo.*");        runTestFromString(TEST1, rule, rpt, defaultLanguage);        assertTrue(rpt.isEmpty());        assertEquals(1, rpt.getSuppressedRuleViolations().size());    }    @Test    public void testExclusionsInReportWithRuleViolationSuppressXPath() {        Report rpt = new Report();        Rule rule = new FooRule();        rule.setProperty(Rule.VIOLATION_SUPPRESS_XPATH_DESCRIPTOR, ".[@Image = 'Foo']");        runTestFromString(TEST1, rule, rpt, defaultLanguage);        assertTrue(rpt.isEmpty());        assertEquals(1, rpt.getSuppressedRuleViolations().size());    }    @Test    public void testExclusionsInReportWithAnnotations() {        Report rpt = new Report();        runTestFromString(TEST2, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertTrue(rpt.isEmpty());        assertEquals(1, rpt.getSuppressedRuleViolations().size());    }    @Test    public void testExclusionsInReportWithAnnotationsFullName() {        Report rpt = new Report();        runTestFromString(TEST2_FULL, new FooRule(), rpt,                LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getVersion("1.5"));        assertTrue(rpt.isEmpty());        assertEquals(1, rpt.getSuppressedRuleViolations().size());    }    @Test    public void testExclusionsInReportWithNOPMD() {        Report rpt = new Report();        runTestFromString(TEST3, new FooRule(), rpt, defaultLanguage);        assertTrue(rpt.isEmpty());        assertEquals(1, rpt.getSuppressedRuleViolations().size());    }    private static final String TEST1 = "public class Foo {}" + PMD.EOL;    private static final String TEST2 = "@SuppressWarnings(\"PMD\")" + PMD.EOL + "public class Foo {}";    private static final String TEST2_FULL = "@java.lang.SuppressWarnings(\"PMD\")" + PMD.EOL + "public class Foo {}";    private static final String TEST3 = "public class Foo {} // NOPMD";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertNull;import org.junit.Test;/** * Test java's rulesets */public class RuleSetFactoryTest extends AbstractRuleSetFactoryTest {    @Test    public void testExclusionOfUselessParantheses() throws RuleSetNotFoundException {        RuleSetReferenceId ref = createRuleSetReferenceId(                "<?xml version=\"1.0\"?>\n" + "<ruleset name=\"Custom ruleset for tests\"\n"                        + "    xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n"                        + "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"                        + "    xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\n"                        + "  <description>Custom ruleset for tests</description>\n"                        + "  <rule ref=\"rulesets/java/unnecessary.xml\">\n"                        + "    <exclude name=\"UselessParentheses\"/>\n" + "  </rule>\n" + "</ruleset>\n");        RuleSetFactory ruleSetFactory = new RuleSetFactory();        RuleSet ruleset = ruleSetFactory.createRuleSet(ref);        Rule rule = ruleset.getRuleByName("UselessParentheses");        assertNull(rule);    }    /**     * Makes sure that the internal dogfood.xml ruleset is valid and doesn't     * reference any unknown rules.     *      * @throws RuleSetNotFoundException     *             if dogfood couldn't be found at all     */    @Test    public void testDogfoodRuleset() throws RuleSetNotFoundException {        RuleSetReferenceId ref = RuleSetReferenceId.parse("rulesets/internal/dogfood.xml").get(0);        RuleSetFactory ruleSetFactory = new RuleSetFactory();        RuleSet ruleset = ruleSetFactory.createRuleSet(ref);        assertNotNull(ruleset);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.io.StringReader;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.java.JavaLanguageModule;import net.sourceforge.pmd.testframework.RuleTst;import net.sourceforge.pmd.testframework.TestDescriptor;public class ExcludeLinesTest extends RuleTst {    private Rule rule;    @Before    public void setUp() {        rule = findRule("java-unusedcode", "UnusedLocalVariable");    }    @Test    public void testAcceptance() {        runTest(new TestDescriptor(TEST1, "NOPMD should work", 0, rule));        runTest(new TestDescriptor(TEST2, "Should fail without exclude marker", 1, rule));    }    @Test    public void testAlternateMarker() throws Exception {        PMD p = new PMD();        p.getConfiguration().setSuppressMarker("FOOBAR");        RuleContext ctx = new RuleContext();        Report r = new Report();        ctx.setReport(r);        ctx.setSourceCodeFilename("n/a");        ctx.setLanguageVersion(LanguageRegistry.getLanguage(JavaLanguageModule.NAME).getDefaultVersion());        RuleSet rules = new RuleSetFactory().createSingleRuleRuleSet(rule);        p.getSourceCodeProcessor().processSourceCode(new StringReader(TEST3), new RuleSets(rules), ctx);        assertTrue(r.isEmpty());        assertEquals(r.getSuppressedRuleViolations().size(), 1);    }    private static final String TEST1 = "public class Foo {" + PMD.EOL + " void foo() {" + PMD.EOL + "  int x; //NOPMD "            + PMD.EOL + " } " + PMD.EOL + "}";    private static final String TEST2 = "public class Foo {" + PMD.EOL + " void foo() {" + PMD.EOL + "  int x;"            + PMD.EOL + " } " + PMD.EOL + "}";    private static final String TEST3 = "public class Foo {" + PMD.EOL + " void foo() {" + PMD.EOL            + "  int x; // FOOBAR" + PMD.EOL + " } " + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.jsp.rule.basic;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class BasicRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "jsp-basic";    @Override    public void setUp() {        addRule(RULESET, "DuplicateJspImports");        addRule(RULESET, "IframeMissingSrcAttribute");        addRule(RULESET, "JspEncoding");        addRule(RULESET, "NoClassAttribute");        addRule(RULESET, "NoHtmlComments");        addRule(RULESET, "NoInlineScript");        addRule(RULESET, "NoInlineStyleInformation");        addRule(RULESET, "NoJspForward");        addRule(RULESET, "NoLongScripts");        addRule(RULESET, "NoScriptlets");        addRule(RULESET, "NoUnsanitizedJSPExpression");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.jsp.rule.basicjsf;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class BasicJsfRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "jsp-basic-jsf";    @Override    public void setUp() {        addRule(RULESET, "DontNestJsfInJstlIteration");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.jsp.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Iterator;import java.util.List;import java.util.Set;import org.junit.Ignore;import org.junit.Test;import net.sourceforge.pmd.lang.ast.Node;/** * Test parsing of a JSP in document style, by checking the generated AST. * * @author pieter_van_raemdonck - Application Engineers NV/SA - www.ae.be * */public class JspDocStyleTest extends AbstractJspNodesTst {    /**     * Smoke test for JSP parser.     */    @Test    public void testSimplestJsp() {        assertNumberOfNodes(ASTElement.class, TEST_SIMPLEST_HTML, 1);    }    /**     * Test the information on a Element and Attribute.     */    @Test    public void testElementAttributeAndNamespace() {        Set<JspNode> nodes = getNodes(null, TEST_ELEMENT_AND_NAMESPACE);        Set<ASTElement> elementNodes = getNodesOfType(ASTElement.class, nodes);        assertEquals("One element node expected!", 1, elementNodes.size());        ASTElement element = elementNodes.iterator().next();        assertEquals("Correct name expected!", "h:html", element.getName());        assertEquals("Has namespace prefix!", true, element.isHasNamespacePrefix());        assertEquals("Element is empty!", true, element.isEmpty());        assertEquals("Correct namespace prefix of element expected!", "h", element.getNamespacePrefix());        assertEquals("Correct local name of element expected!", "html", element.getLocalName());        Set<ASTAttribute> attributeNodes = getNodesOfType(ASTAttribute.class, nodes);        assertEquals("One attribute node expected!", 1, attributeNodes.size());        ASTAttribute attribute = attributeNodes.iterator().next();        assertEquals("Correct name expected!", "MyNsPrefix:MyAttr", attribute.getName());        assertEquals("Has namespace prefix!", true, attribute.isHasNamespacePrefix());        assertEquals("Correct namespace prefix of element expected!", "MyNsPrefix", attribute.getNamespacePrefix());        assertEquals("Correct local name of element expected!", "MyAttr", attribute.getLocalName());    }    /**     * Test exposing a bug of parsing error when having a hash as last character     * in an attribute value.     *     */    @Test    public void testAttributeValueContainingHash() {        Set<JspNode> nodes = getNodes(null, TEST_ATTRIBUTE_VALUE_CONTAINING_HASH);        Set<ASTAttribute> attributes = getNodesOfType(ASTAttribute.class, nodes);        assertEquals("Three attributes expected!", 3, attributes.size());        List<ASTAttribute> attrsList = new ArrayList<>(attributes);        Collections.sort(attrsList, new Comparator<ASTAttribute>() {            public int compare(ASTAttribute arg0, ASTAttribute arg1) {                return arg0.getName().compareTo(arg1.getName());            }        });        ASTAttribute attr = attrsList.get(0);        assertEquals("Correct attribute name expected!", "foo", attr.getName());        assertEquals("Correct attribute value expected!", "CREATE",                attr.getFirstDescendantOfType(ASTAttributeValue.class).getImage());        attr = attrsList.get(1);        assertEquals("Correct attribute name expected!", "href", attr.getName());        assertEquals("Correct attribute value expected!", "#",                attr.getFirstDescendantOfType(ASTAttributeValue.class).getImage());        attr = attrsList.get(2);        assertEquals("Correct attribute name expected!", "something", attr.getName());        assertEquals("Correct attribute value expected!", "#yes#",                attr.getFirstDescendantOfType(ASTAttributeValue.class).getImage());    }    /**     * Test correct parsing of CDATA.     */    @Test    public void testCData() {        Set<ASTCData> cdataNodes = getNodes(ASTCData.class, TEST_CDATA);        assertEquals("One CDATA node expected!", 1, cdataNodes.size());        ASTCData cdata = cdataNodes.iterator().next();        assertEquals("Content incorrectly parsed!", " some <cdata> ]] ]> ", cdata.getImage());    }    /**     * Test parsing of Doctype declaration.     */    @Test    public void testDoctype() {        Set<JspNode> nodes = getNodes(null, TEST_DOCTYPE);        Set<ASTDoctypeDeclaration> docTypeDeclarations = getNodesOfType(ASTDoctypeDeclaration.class, nodes);        assertEquals("One doctype declaration expected!", 1, docTypeDeclarations.size());        ASTDoctypeDeclaration docTypeDecl = docTypeDeclarations.iterator().next();        assertEquals("Correct doctype-name expected!", "html", docTypeDecl.getName());        Set<ASTDoctypeExternalId> externalIds = getNodesOfType(ASTDoctypeExternalId.class, nodes);        assertEquals("One doctype external id expected!", 1, externalIds.size());        ASTDoctypeExternalId externalId = externalIds.iterator().next();        assertEquals("Correct external public id expected!", "-//W3C//DTD XHTML 1.1//EN", externalId.getPublicId());        assertEquals("Correct external uri expected!", "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd",                externalId.getUri());    }    /**     * Test parsing of a XML comment.     *     */    @Test    public void testComment() {        Set<ASTCommentTag> comments = getNodes(ASTCommentTag.class, TEST_COMMENT);        assertEquals("One comment expected!", 1, comments.size());        ASTCommentTag comment = comments.iterator().next();        assertEquals("Correct comment content expected!", "comment", comment.getImage());    }    /**     * Test parsing of HTML &lt;script&gt; element.     */    @Test    public void testHtmlScript() {        Set<ASTHtmlScript> scripts = getNodes(ASTHtmlScript.class, TEST_HTML_SCRIPT);        assertEquals("One script expected!", 1, scripts.size());        ASTHtmlScript script = scripts.iterator().next();        assertEquals("Correct script content expected!", "Script!", script.getImage());    }    /**     * Test parsing of HTML &lt;script src="x"/&gt; element. It might not be valid     * html but it is likely to appear in .JSP files.     */    @Test    public void testImportHtmlScript() {        Set<ASTHtmlScript> scripts = getNodes(ASTHtmlScript.class, TEST_IMPORT_JAVASCRIPT);        assertEquals("One script expected!", 1, scripts.size());        ASTHtmlScript script = scripts.iterator().next();        List<ASTAttributeValue> value = script.findDescendantsOfType(ASTAttributeValue.class);        assertEquals("filename.js", value.get(0).getImage());    }    /**     * Test parsing of HTML &lt;script&gt; element.     */    @Test    public void testHtmlScriptWithAttribute() {        Set<ASTHtmlScript> scripts = getNodes(ASTHtmlScript.class, TEST_HTML_SCRIPT_WITH_ATTRIBUTE);        assertEquals("One script expected!", 1, scripts.size());        ASTHtmlScript script = scripts.iterator().next();        assertEquals("Correct script content expected!", "Script!", script.getImage());        List<ASTAttributeValue> attrs = script.findDescendantsOfType(ASTAttributeValue.class);        assertTrue("text/javascript".equals(attrs.get(0).getImage()));    }    /**     * A complex script containing HTML comments, escapes, quotes, etc.     */    @Test    public void testComplexHtmlScript() {        Set<ASTHtmlScript> script = getNodes(ASTHtmlScript.class, TEST_COMPLEX_SCRIPT);        assertEquals("One script expected!", 1, script.size());        ASTHtmlScript next = script.iterator().next();        assertTrue(next.getImage().contains("<!--"));        Set<ASTCommentTag> comments = getNodes(ASTCommentTag.class, TEST_COMPLEX_SCRIPT);        assertEquals("One comment expected!", 1, comments.size());    }    /**     * Test parsing of HTML &lt;script&gt; element.     */    @Test    public void testInlineCss() {        Set<ASTElement> scripts = getNodes(ASTElement.class, TEST_INLINE_STYLE);        assertEquals("Three elements expected!", 3, scripts.size());    }    /**     * Test parsing of HTML text within element.     */    @Test    public void testTextInTag() {        Set<ASTText> scripts = getNodes(ASTText.class, TEST_TEXT_IN_TAG);        assertEquals("One text chunk expected!", 1, scripts.size());        ASTText script = scripts.iterator().next();        assertEquals("Correct content expected!", " some text ", script.getImage());    }    /**     * Test parsing of HTML with no spaces between tags. Parser is likely in     * this scenario.     */    @Test    public void noSpacesBetweenTags() {        Set<ASTElement> scripts = getNodes(ASTElement.class, TEST_TAGS_NO_SPACE);        assertEquals("Two tags expected!", 2, scripts.size());        List<ASTElement> elmts = sortNodesByName(scripts);        Iterator<ASTElement> iterator = elmts.iterator();        ASTElement script = iterator.next();        assertEquals("Correct content expected!", "a", script.getName());        script = iterator.next();        assertEquals("Correct content expected!", "b", script.getName());    }    /**     * the $ sign might trick the parser into thinking an EL is next. He should     * be able to treat it as plain text     */    @Test    public void unclosedTagsWithDollar() {        Set<ASTText> scripts = getNodes(ASTText.class, TEST_TAGS_WITH_DOLLAR);        assertEquals("Two text chunks expected!", 2, scripts.size());        ASTText script = scripts.iterator().next();        assertEquals("Correct content expected!", " $ ", script.getImage());    }    /**     * Make sure EL expressions aren't treated as plain text when they are     * around unclosed tags.     */    @Test    public void unclosedTagsWithELWithin() {        Set<ASTElExpression> scripts = getNodes(ASTElExpression.class, TEST_TAGS_WITH_EL_WITHIN);        assertEquals("Two EL expressions expected!", 2, scripts.size());        List<ASTElExpression> exprs = sortByImage(scripts);        Iterator<ASTElExpression> iterator = exprs.iterator();        ASTElExpression script = iterator.next();        assertEquals("Correct content expected!", "expr1", script.getImage());        script = iterator.next();        assertEquals("Correct content expected!", "expr2", script.getImage());    }    /**     * Make sure mixed expressions don't confuse the parser     */    @Test    public void mixedExpressions() {        Set<ASTJspExpression> exprs = getNodes(ASTJspExpression.class, TEST_TAGS_WITH_MIXED_EXPRESSIONS);        assertEquals("One JSP expression expected!", 1, exprs.size());        assertEquals("Image of expression should be \"expr\"", "expr", exprs.iterator().next().getImage());        Set<ASTElExpression> els = getNodes(ASTElExpression.class, TEST_TAGS_WITH_MIXED_EXPRESSIONS);        assertEquals("Two EL expression expected!", 2, els.size());        assertEquals("Image of el should be \"expr\"", "expr", els.iterator().next().getImage());        Set<ASTUnparsedText> unparsedtexts = getNodes(ASTUnparsedText.class, TEST_TAGS_WITH_MIXED_EXPRESSIONS);        List<ASTUnparsedText> sortedUnparsedTxts = sortByImage(unparsedtexts);        assertEquals("Two unparsed texts expected!", 2, sortedUnparsedTxts.size());        Iterator<ASTUnparsedText> iterator = sortedUnparsedTxts.iterator();        assertEquals("Image of text should be \"\\${expr}\"", " \\${expr} ", iterator.next().getImage());        assertEquals("Image of text should be \" aaa \"", " aaa ", iterator.next().getImage());        // ASTText should contain the text between two tags.        Set<ASTText> texts = getNodes(ASTText.class, TEST_TAGS_WITH_MIXED_EXPRESSIONS);        List<ASTText> sortedTxts = sortByImage(texts);        assertEquals("Two regular texts expected!", 2, sortedTxts.size());        Iterator<ASTText> iterator2 = sortedTxts.iterator();        assertEquals("Image of text should be \"\\${expr}\"", " \\${expr} ", iterator2.next().getImage());        assertEquals("Image of text should be all text between two nodes" + " \"  aaa ${expr}#{expr} \"",                " aaa ${expr}#{expr}", iterator2.next().getImage());    }    /**     * Make sure JSP expressions are properly detected when they are next to     * unclosed tags.     */    @Test    public void unclosedTagsWithJspExpressionWithin() {        Set<ASTJspExpression> scripts = getNodes(ASTJspExpression.class, TEST_TAGS_WITH_EXPRESSION_WITHIN);        assertEquals("Two JSP expressions expected!", 2, scripts.size());        ASTJspExpression script = scripts.iterator().next();        assertEquals("Correct content expected!", "expr", script.getImage());    }    /**     * A dangling unopened ( just &lt;/closed&gt; ) tag should not influence the     * parsing.     */    @Test    @Ignore // sadly the number of    // <opening> tags has to be >= then the number of </closing> tags    public void textBetweenUnopenedTag() {        Set<ASTText> scripts = getNodes(ASTText.class, TEST_TEXT_WITH_UNOPENED_TAG);        assertEquals("Two text chunks expected!", 2, scripts.size());        ASTText script = scripts.iterator().next();        assertEquals("Correct content expected!", "$", script.getImage());    }    /**     * Parser should be able to handle documents which start or end with     * unparsed text     */    @Test    @Ignore // sadly the number of    // <opening> tags has to be >= then the number of </closing> tags    public void textMultipleClosingTags() {        Set<ASTText> scripts = getNodes(ASTText.class, TEST_MULTIPLE_CLOSING_TAGS);        assertEquals("Four text chunks expected!", 4, scripts.size());        ASTText script = scripts.iterator().next();        assertEquals("Correct content expected!", " some text ", script.getImage());    }    /**     * Test parsing of HTML &lt;script&gt; element.     */    @Test    public void textAfterOpenAndClosedTag() {        Set<ASTElement> nodes = getNodes(ASTElement.class, TEST_TEXT_AFTER_OPEN_AND_CLOSED_TAG);        assertEquals("Two elements expected!", 2, nodes.size());        List<ASTElement> elmts = sortNodesByName(nodes);        assertEquals("First element should be a", "a", elmts.get(0).getName());        assertFalse("first element should be closed", elmts.get(0).isUnclosed());        assertEquals("Second element should be b", "b", elmts.get(1).getName());        assertTrue("Second element should not be closed", elmts.get(1).isUnclosed());        Set<ASTText> text = getNodes(ASTText.class, TEST_TEXT_AFTER_OPEN_AND_CLOSED_TAG);        assertEquals("Two text chunks expected!", 2, text.size());    }    @Test    public void quoteEL() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_QUOTE_EL);        assertEquals("One attribute expected!", 1, attributes.size());        ASTAttributeValue attr = attributes.iterator().next();        assertEquals("Expected to detect proper value for attribute!", "${something}", attr.getImage());    }    @Test    public void quoteExpression() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_QUOTE_EXPRESSION);        assertEquals("One attribute expected!", 1, attributes.size());        ASTAttributeValue attr = attributes.iterator().next();        assertEquals("Expected to detect proper value for attribute!", "<%=something%>", attr.getImage());    }    @Test    @Ignore // tags contain quotes and break attribute parsing    public void quoteTagInAttribute() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_QUOTE_TAG_IN_ATTR);        assertEquals("One attribute expected!", 1, attributes.size());        ASTAttributeValue attr = attributes.iterator().next();        assertEquals("Expected to detect proper value for attribute!", "<bean:write name=\"x\" property=\"z\">",                attr.getImage());    }    /**     * smoke test for a non-quoted attribute value     */    @Test    public void noQuoteAttrValue() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_NO_QUOTE_ATTR);        assertEquals("One attribute expected!", 1, attributes.size());        ASTAttributeValue attr = attributes.iterator().next();        assertEquals("Expected to detect proper value for attribute!", "yes|", attr.getImage());    }    /**     * tests whether JSP el is properly detected as attribute value     */    @Test    public void noQuoteAttrWithJspEL() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_NO_QUOTE_ATTR_WITH_EL);        assertEquals("two attributes expected!", 2, attributes.size());        Iterator<ASTAttributeValue> iterator = attributes.iterator();        ASTAttributeValue attr2 = iterator.next();        if ("url".equals(attr2.getImage())) {            // we have to employ this nasty work-around            // in order to ensure that we check the proper attribute            attr2 = iterator.next();        }        assertEquals("Expected to detect proper value for EL in attribute!", "${something}", attr2.getImage());    }    /**     * tests whether parse correctly detects presence of JSP expression &lt;%= %&gt;     * within an non-quoted attribute value     */    @Test    public void noQuoteAttrWithJspExpression() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_NO_QUOTE_ATTR_WITH_EXPRESSION);        assertEquals("One attribute expected!", 1, attributes.size());        ASTAttributeValue attr = attributes.iterator().next();        assertEquals("Expected to detect proper value for attribute!", "<%=something%>", attr.getImage());    }    /**     * tests whether parse correctly interprets empty non quote attribute     */    @Test    public void noQuoteAttrEmpty() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_NO_QUOTE_EMPTY_ATTR);        assertEquals("two attributes expected!", 2, attributes.size());        Iterator<ASTAttributeValue> iterator = attributes.iterator();        ASTAttributeValue attr = iterator.next();        if ("http://someHost:/some_URL".equals(attr.getImage())) {            // we have to employ this nasty work-around            // in order to ensure that we check the proper attribute            attr = iterator.next();        }        assertEquals("Expected to detect proper value for attribute!", "", attr.getImage());    }    /**     * tests whether parse correctly interprets an cr lf instead of an attribute     */    @Test    public void noQuoteAttrCrLf() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_NO_QUOTE_CR_LF_ATTR);        assertEquals("One attribute expected!", 2, attributes.size());        Iterator<ASTAttributeValue> iterator = attributes.iterator();        ASTAttributeValue attr = iterator.next();        if ("http://someHost:/some_URL".equals(attr.getImage())) {            // we have to employ this nasty work-around            // in order to ensure that we check the proper attribute            attr = iterator.next();        }        assertEquals("Expected to detect proper value for attribute!", "\r\n", attr.getImage());    }    /**     * tests whether parse correctly interprets an tab instead of an attribute     */    @Test    public void noQuoteAttrTab() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_NO_QUOTE_TAB_ATTR);        assertEquals("One attribute expected!", 1, attributes.size());        Iterator<ASTAttributeValue> iterator = attributes.iterator();        ASTAttributeValue attr = iterator.next();        assertEquals("Expected to detect proper value for attribute!", "\t", attr.getImage());    }    /**     * tests whether parse does not fail in the presence of unclosed JSP     * expression &lt;%= within an non-quoted attribute value     */    @Test    public void noQuoteAttrWithMalformedJspExpression() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_NO_QUOTE_ATTR_WITH_MALFORMED_EXPR);        assertEquals("One attribute expected!", 1, attributes.size());        ASTAttributeValue attr = attributes.iterator().next();        assertEquals("Expected to detect proper value for attribute!", "<%=something", attr.getImage());    }    /**     * test a no quote attribute value which contains a scriptlet &lt;% %&gt; within     * its value     */    @Test    @Ignore // nice test for future development    public void noQuoteAttrWithScriptletInValue() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_NO_QUOTE_ATTR_WITH_SCRIPTLET);        assertEquals("One attribute expected!", 1, attributes.size());        ASTAttributeValue attr = attributes.iterator().next();        assertEquals("Expected to detect proper value for attribute!", "<% String a = \"1\";%>", attr.getImage());    }    /**     * test a no quote attribute value can contain a tag (e.g.     * attr=&lt;bean:write property="value" /&gt;)     *      */    @Test    @Ignore // nice test for future development    public void noQuoteAttrWithBeanWriteTagAsValue() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_NO_QUOTE_TAG_IN_ATTR);        assertEquals("One attribute expected!", 1, attributes.size());        ASTAttributeValue attr = attributes.iterator().next();        assertEquals("Expected to detect proper value for attribute!", "<% String a = \"1\";%>", attr.getImage());    }    /**     * test a quote attribute value can contain a tag (e.g.     * attr="&lt;bean:write property="value" /&gt;" ) Not sure if it's legal JSP code     * but most JSP engine accept and properly treat this value at runtime     */    @Test    @Ignore // nice test for future development    public void quoteAttrWithBeanWriteTagAsValue() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_NO_QUOTE_TAG_IN_ATTR);        assertEquals("One attribute expected!", 1, attributes.size());        ASTAttributeValue attr = attributes.iterator().next();        assertEquals("Expected to detect proper value for attribute!", "<% String a = \"1\";%>", attr.getImage());    }    /**     * test a no quote attribute value which contains the EL dollar sign $     * within its value     */    @Test    @Ignore // nice test for future development    public void noQuoteAttrWithDollarSignInValue() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_NO_QUOTE_ATTR_WITH_DOLLAR);        assertEquals("One attribute expected!", 2, attributes.size());        ASTAttributeValue attr = attributes.iterator().next();        assertEquals("Expected to detect proper value for attribute!", "${something", attr.getImage());    }    /**     * test a no quote attribute value which contains the EL sharp sign # within     * its value     */    @Test    @Ignore // nice test for future development    public void noQuoteAttrWithSharpSymbolInValue() {        Set<ASTAttributeValue> attributes = getNodes(ASTAttributeValue.class, TEST_NO_QUOTE_ATTR_WITH_HASH);        assertEquals("One attribute expected!", 1, attributes.size());        ASTAttributeValue attr = attributes.iterator().next();        assertEquals("Expected to detect proper value for attribute!", "#{something", attr.getImage());    }    @Test    public void unclosedTag() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_UNCLOSED_SIMPLE);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("2 tags expected", 2, elements.size());        assertEquals("First element should be sorted tag:if", "tag:if", sortedElmnts.get(0).getName());        assertEquals("Second element should be tag:someTag", "tag:someTag", sortedElmnts.get(1).getName());        assertTrue(sortedElmnts.get(0).isEmpty());        assertTrue(sortedElmnts.get(0).isUnclosed());        assertFalse(sortedElmnts.get(1).isEmpty());        assertFalse(sortedElmnts.get(1).isUnclosed());    }    @Test    public void unclosedTagAndNoQuotesForAttribute() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_UNCLOSED_NO_QUOTE_ATTR);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("2 tags expected", 2, elements.size());        assertEquals("First element should be sorted tag:if", "tag:if", sortedElmnts.get(0).getName());        assertEquals("Second element should be tag:someTag", "tag:someTag", sortedElmnts.get(1).getName());        assertTrue(sortedElmnts.get(0).isEmpty());        assertTrue(sortedElmnts.get(0).isUnclosed());        assertFalse(sortedElmnts.get(1).isEmpty());        assertFalse(sortedElmnts.get(1).isUnclosed());    }    @Test    public void unclosedTagMultipleLevels() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_UNCLOSED_MULTIPLE_LEVELS);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("3 tags expected", 3, elements.size());        assertEquals("First element should be sorted tag:someTag", "tag:someTag", sortedElmnts.get(0).getName());        assertEquals("Second element should be tag:someTag", "tag:someTag", sortedElmnts.get(1).getName());        assertEquals("Third element should be tag:x", "tag:x", sortedElmnts.get(2).getName());        assertFalse(sortedElmnts.get(0).isEmpty());        assertFalse(sortedElmnts.get(0).isUnclosed());        assertTrue(sortedElmnts.get(1).isEmpty());        assertTrue(sortedElmnts.get(1).isUnclosed());        assertFalse(sortedElmnts.get(2).isEmpty());        assertFalse(sortedElmnts.get(2).isUnclosed());    }    /**     * &lt;html&gt; &lt;a1&gt; &lt;a2/&gt; &lt;b/&gt; &lt;/a1&gt; &lt;/html&gt;     */    @Test    public void nestedEmptyTags() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_MULTIPLE_EMPTY_TAGS);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("4 tags expected", 4, elements.size());        assertEquals("First element should a1", "a1", sortedElmnts.get(0).getName());        assertEquals("Second element should be a2", "a2", sortedElmnts.get(1).getName());        assertEquals("Third element should be b", "b", sortedElmnts.get(2).getName());        assertEquals("Third element should be html", "html", sortedElmnts.get(3).getName());        // a1        assertFalse(sortedElmnts.get(0).isEmpty());        assertFalse(sortedElmnts.get(0).isUnclosed());        // a2        assertTrue(sortedElmnts.get(1).isEmpty());        assertFalse(sortedElmnts.get(1).isUnclosed());        // b        assertTrue(sortedElmnts.get(2).isEmpty());        assertFalse(sortedElmnts.get(2).isUnclosed());        // html        assertFalse(sortedElmnts.get(3).isEmpty());        assertFalse(sortedElmnts.get(3).isUnclosed());    }    /**     * &lt;html&gt; &lt;a1&gt; &lt;a2&gt; &lt;a3&gt; &lt;/a2&gt; &lt;/a1&gt; &lt;b/&gt; &lt;a4/&gt; &lt;/html&gt;     */    @Test    public void nestedMultipleTags() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_MULTIPLE_NESTED_TAGS);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("4 tags expected", 6, elements.size());        assertEquals("First element should a1", "a1", sortedElmnts.get(0).getName());        assertEquals("Second element should be a2", "a2", sortedElmnts.get(1).getName());        assertEquals("Third element should be a3", "a3", sortedElmnts.get(2).getName());        assertEquals("Forth element should be a4", "a4", sortedElmnts.get(3).getName());        assertEquals("Fifth element should be b", "b", sortedElmnts.get(4).getName());        assertEquals("Sixth element should be html", "html", sortedElmnts.get(5).getName());        // a1 not empty and closed        assertFalse(sortedElmnts.get(0).isEmpty());        assertFalse(sortedElmnts.get(0).isUnclosed());        // a2 not empty and closed        assertFalse(sortedElmnts.get(1).isEmpty());        assertFalse(sortedElmnts.get(1).isUnclosed());        // a3 empty and not closed        assertTrue(sortedElmnts.get(2).isEmpty());        assertTrue(sortedElmnts.get(2).isUnclosed());        // a4 empty but closed        assertTrue(sortedElmnts.get(3).isEmpty());        assertFalse(sortedElmnts.get(3).isUnclosed());        // b empty but closed        assertTrue(sortedElmnts.get(4).isEmpty());        assertFalse(sortedElmnts.get(4).isUnclosed());        // html not empty and closed        assertFalse(sortedElmnts.get(5).isEmpty());        assertFalse(sortedElmnts.get(5).isUnclosed());    }    /**     * will test &lt;x&gt; &lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/x&gt; &lt;/a&gt; &lt;/x&gt; .      * Here x is the first tag to be closed thus rendering the next close of a (&lt;/a&gt;)     * to be disregarded.      */    @Test    public void unclosedParentTagClosedBeforeChild() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_UNCLOSED_END_AFTER_PARENT_CLOSE);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("4 tags expected", 4, elements.size());        assertEquals("First element should be 'a'", "a", sortedElmnts.get(0).getName());        assertEquals("Second element should be b", "b", sortedElmnts.get(1).getName());        assertEquals("Third element should be b", "b", sortedElmnts.get(2).getName());        assertEquals("Forth element should be x", "x", sortedElmnts.get(3).getName());        // a        assertTrue(sortedElmnts.get(0).isEmpty());        assertTrue(sortedElmnts.get(0).isUnclosed());        // b        assertTrue(sortedElmnts.get(1).isEmpty());        assertTrue(sortedElmnts.get(1).isUnclosed());        // b        assertTrue(sortedElmnts.get(2).isEmpty());        assertTrue(sortedElmnts.get(2).isUnclosed());        // x        assertFalse(sortedElmnts.get(3).isEmpty());        assertFalse(sortedElmnts.get(3).isUnclosed());    }    /**     * &lt;x&gt; &lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/z&gt; &lt;/a&gt; &lt;/x&gt; An unmatched closing of 'z' appears     * randomly in the document. This should be disregarded and structure of     * children and parents should not be influenced. in other words &lt;/a&gt; should     * close the first &lt;a&gt; tag , &lt;/x&gt; should close the first &lt;x&gt;, etc.     */    @Test    public void unmatchedTagDoesNotInfluenceStructure() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_UNCLOSED_UNMATCHED_CLOSING_TAG);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("4 tags expected", 4, elements.size());        assertEquals("First element should be 'a'", "a", sortedElmnts.get(0).getName());        assertEquals("Second element should be b", "b", sortedElmnts.get(1).getName());        assertEquals("Third element should be b", "b", sortedElmnts.get(2).getName());        assertEquals("Forth element should be x", "x", sortedElmnts.get(3).getName());        // a is not empty and closed        assertFalse(sortedElmnts.get(0).isEmpty());        assertFalse(sortedElmnts.get(0).isUnclosed());        // b empty and unclosed        assertTrue(sortedElmnts.get(1).isEmpty());        assertTrue(sortedElmnts.get(1).isUnclosed());        // b empty and unclosed        assertTrue(sortedElmnts.get(2).isEmpty());        assertTrue(sortedElmnts.get(2).isUnclosed());        // x not empty and closed        assertFalse(sortedElmnts.get(3).isEmpty());        assertFalse(sortedElmnts.get(3).isUnclosed());    }    /**     * &lt;a&gt; &lt;x&gt; &lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/z&gt; &lt;/a&gt; &lt;/x&gt;     * An unmatched closing of 'z' appears randomly in the document. This     * should be disregarded and structure of children and parents should not be influenced.     * Also un unclosed &lt;a&gt; tag appears at the start of the document     */    @Test    public void unclosedStartTagWithUnmatchedCloseOfDifferentTag() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_UNCLOSED_START_TAG_WITH_UNMATCHED_CLOSE);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("5 tags expected", 5, elements.size());        assertEquals("First element should be 'a'", "a", sortedElmnts.get(0).getName());        assertEquals("Second element should be a", "a", sortedElmnts.get(1).getName());        assertEquals("Third element should be b", "b", sortedElmnts.get(2).getName());        assertEquals("Forth element should be b", "b", sortedElmnts.get(3).getName());        assertEquals("Fifth element should be x", "x", sortedElmnts.get(4).getName());        // first a is empty and unclosed        assertTrue(sortedElmnts.get(0).isEmpty());        assertTrue(sortedElmnts.get(0).isUnclosed());        // second a not empty and closed        assertFalse(sortedElmnts.get(1).isEmpty());        assertFalse(sortedElmnts.get(1).isUnclosed());        // b empty and unclosed        assertTrue(sortedElmnts.get(2).isEmpty());        assertTrue(sortedElmnts.get(2).isUnclosed());        // b empty and unclosed        assertTrue(sortedElmnts.get(3).isEmpty());        assertTrue(sortedElmnts.get(3).isUnclosed());        // x not empty and closed        assertFalse(sortedElmnts.get(4).isEmpty());        assertFalse(sortedElmnts.get(4).isUnclosed());    }    /**     * {@link #TEST_UNCLOSED_END_OF_DOC}     * &lt;tag:x&gt; &lt;tag:y&gt;      * Tests whether parser breaks on no closed tags at all     */    // This is yet to be improved. If a closing tag does not    // exist no tags will be marked as empty :(    @Ignore    @Test    public void unclosedEndOfDoc() {        Set<ASTElement> elements = getNodes(ASTElement.class, TEST_UNCLOSED_END_OF_DOC);        List<ASTElement> sortedElmnts = sortNodesByName(elements);        assertEquals("2 tags expected", 2, elements.size());        assertEquals("First element should be 'tag:x'", "tag:x", sortedElmnts.get(0).getName());        assertEquals("Second element should be tag:y", "tag:y", sortedElmnts.get(1).getName());        // b        // assertTrue(sortedElmnts.get(0).isEmpty());        assertTrue(sortedElmnts.get(0).isUnclosed());        // b        assertTrue(sortedElmnts.get(1).isEmpty());        assertTrue(sortedElmnts.get(1).isUnclosed());    }    /**     * will sort the AST element in list in alphabetical order and if tag name     * is the same it will sort against o1.getBeginColumn() +""+     * o1.getBeginLine(). so first criteria is the name, then the second is the     * column +""+line string.     *      * @param elements     * @return     */    private List<ASTElement> sortNodesByName(Set<ASTElement> elements) {        List<ASTElement> list = new ArrayList<>();        list.addAll(elements);        Collections.sort(list, new Comparator<ASTElement>() {            public int compare(ASTElement o1, ASTElement o2) {                if (o1.getName() == null) {                    return Integer.MIN_VALUE;                }                if (o2.getName() == null) {                    return Integer.MAX_VALUE;                }                if (o1.getName().equals(o2.getName())) {                    String o1Value = o1.getBeginColumn() + "" + o1.getBeginLine();                    String o2Value = o2.getBeginColumn() + "" + o2.getBeginLine();                    return o1Value.compareTo(o2Value);                }                return o1.getName().compareTo(o2.getName());            }        });        return list;    }    /**     * will sort the AST node by the image name.     *      * @param elements     * @return     */    private <T extends Node> List<T> sortByImage(Set<T> elements) {        List<T> list = new ArrayList<>();        list.addAll(elements);        Collections.sort(list, new Comparator<Node>() {            public int compare(Node o1, Node o2) {                if (o1.getImage() == null) {                    return Integer.MIN_VALUE;                }                if (o2.getImage() == null) {                    return Integer.MAX_VALUE;                }                if (o1.getImage().equals(o2.getImage())) {                    String o1Value = o1.getBeginColumn() + "" + o1.getBeginLine();                    String o2Value = o2.getBeginColumn() + "" + o2.getBeginLine();                    return o1Value.compareTo(o2Value);                }                return o1.getImage().compareTo(o2.getImage());            }        });        return list;    }    private static final String TEST_SIMPLEST_HTML = "<html/>";    private static final String TEST_ELEMENT_AND_NAMESPACE = "<h:html MyNsPrefix:MyAttr='MyValue'/>";    private static final String TEST_CDATA = "<html><![CDATA[ some <cdata> ]] ]> ]]></html>";    private static final String TEST_DOCTYPE = "<?xml version=\"1.0\" standalone='yes'?>\n"            + "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" "            + "\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n" + "<greeting>Hello, world!</greeting>";    private static final String TEST_COMMENT = "<html><!-- comment --></html>";    private static final String TEST_ATTRIBUTE_VALUE_CONTAINING_HASH = "<tag:if something=\"#yes#\" foo=\"CREATE\">  <a href=\"#\">foo</a> </tag:if>";    private static final String TEST_HTML_SCRIPT = "<html><head><script>Script!</script></head></html>";    private static final String TEST_IMPORT_JAVASCRIPT = "<html><head><script src=\"filename.js\" type=\"text/javascript\"/></head></html>";    private static final String TEST_HTML_SCRIPT_WITH_ATTRIBUTE = "<html><head><script type=\"text/javascript\">Script!</script></head></html>";    private static final String TEST_COMPLEX_SCRIPT = "<HTML><BODY><!--Java Script-->"            + "<SCRIPT language='JavaScript' type='text/javascript'>" + "<!--function calcDays(){"            + " date1 = date1.split(\"-\");  date2 = date2.split(\"-\");"            + " var sDate = new Date(date1[0]+\"/\"+date1[1]+\"/\"+date1[2]);"            + " var eDate = new Date(date2[0]+\"/\"+date2[1]+\"/\"+date2[2]);" + " onload=calcDays;//-->"            + "</SCRIPT></BODY></HTML>;";    private static final String TEST_INLINE_STYLE = "<html><head><style> div { color:red; } </style></head></html>";    private static final String TEST_TEXT_IN_TAG = "<a> some text </a>";    private static final String TEST_TAGS_NO_SPACE = "<a><b></a>";    private static final String TEST_TAGS_WITH_DOLLAR = "<a> $ <b> $ </a>";    private static final String TEST_TAGS_WITH_EL_WITHIN = "<a>#{expr1}<b>${expr2}</a>";    private static final String TEST_TAGS_WITH_MIXED_EXPRESSIONS = "<a> aaa ${expr} #{expr} <%=expr%> <b> \\${expr} </a>";    private static final String TEST_TAGS_WITH_EXPRESSION_WITHIN = "<a> <%=expr%> <b> <%=expr%> </a>";    private static final String TEST_TEXT_AFTER_OPEN_AND_CLOSED_TAG = "<a> some text <b> some text </a>";    private static final String TEST_TEXT_WITH_UNOPENED_TAG = "<a> some text </b> some text </a>";    private static final String TEST_MULTIPLE_CLOSING_TAGS = "<a> some text </b> </b> </b> some text </a>";    private static final String TEST_QUOTE_EL = "<tag:if something=\"${something}\" > </tag:if>";    private static final String TEST_QUOTE_EXPRESSION = "<tag:if something=\"<%=something%>\" >  </tag:if>";    private static final String TEST_QUOTE_TAG_IN_ATTR = "<tag:if something=\"<bean:write name=\"x\" property=\"z\">\" >  "            + "<a href=http://someHost:/some_URL >foo</a> </tag:if>";    private static final String TEST_NO_QUOTE_ATTR = "<tag:if something=yes| > </tag:if>";    private static final String TEST_NO_QUOTE_EMPTY_ATTR = "<tag:if something= >  <a href=http://someHost:/some_URL >foo</a> </tag:if>";    private static final String TEST_NO_QUOTE_TAG_IN_ATTR = "<tag:if something=<bean:write name=\"x\" property=\"z\"> >  <a href=http://someHost:/some_URL >foo</a> </tag:if>";    private static final String TEST_NO_QUOTE_CR_LF_ATTR = "<tag:if something=\r\n >  <a href=http://someHost:/some_URL >foo</a> </tag:if>";    private static final String TEST_NO_QUOTE_TAB_ATTR = "<tag:if something=\t >   </tag:if>";    private static final String TEST_NO_QUOTE_ATTR_WITH_EL = "<tag:if something=${something} >  <a href=url >foo</a> </tag:if>";    private static final String TEST_NO_QUOTE_ATTR_WITH_EXPRESSION = "<tag:if something=<%=something%> >  </tag:if>";    /**     * same as {@link #TEST_NO_QUOTE_ATTR_WITH_EXPRESSION} only expression is     * not properly closed     */    private static final String TEST_NO_QUOTE_ATTR_WITH_MALFORMED_EXPR = "<tag:if something=<%=something >  </tag:if>";    private static final String TEST_NO_QUOTE_ATTR_WITH_SCRIPTLET = "<tag:if something=<% String a = \"1\";%>x >  </tag:if>";    private static final String TEST_NO_QUOTE_ATTR_WITH_DOLLAR = "<tag:if something=${something >  <a href=${ >foo</a> </tag:if>";    private static final String TEST_NO_QUOTE_ATTR_WITH_HASH = "<tag:if something=#{something >  <a href=#{url} >foo</a> </tag:if>";    private static final String TEST_UNCLOSED_SIMPLE = "<tag:someTag> <tag:if someting=\"x\" > </tag:someTag>";    /**     * someTag is closed just once     */    private static final String TEST_UNCLOSED_MULTIPLE_LEVELS = "<tag:x> <tag:someTag> <tag:someTag someting=\"x\" > </tag:someTag> </tag:x>";    /**     * nested empty tags     */    private static final String TEST_MULTIPLE_EMPTY_TAGS = "<html> <a1> <a2/> <b/> </a1> </html>";    /**     * multiple nested tags with some tags unclosed     */    private static final String TEST_MULTIPLE_NESTED_TAGS = "<html> <a1> <a2> <a3> </a2> </a1> <b/> <a4/> </html>";    /**     * </x> will close before </a>, thus leaving <a> to remain unclosed     */    private static final String TEST_UNCLOSED_END_AFTER_PARENT_CLOSE = "<x> <a> <b> <b> </x> </a> aa </x> bb </x>";    /**     * </z> is just a dangling closing tag not matching any parent. The parser     * should disregard it     */    private static final String TEST_UNCLOSED_UNMATCHED_CLOSING_TAG = "<x> <a> <b> <b> </z> </a> </x>";    /**     * First <a> tag does not close. The first closing of </a> will match the     * second opening of a. Another rogue </z> is there for testing compliance     */    private static final String TEST_UNCLOSED_START_TAG_WITH_UNMATCHED_CLOSE = "<a> <x> <a> <b> <b> </z> </a> </x>";    private static final String TEST_UNCLOSED_END_OF_DOC = "<tag:x> <tag:y>";    private static final String TEST_UNCLOSED_NO_QUOTE_ATTR = "<tag:someTag> <tag:if someting=x > </tag:someTag>";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.jsp.ast;import static org.junit.Assert.assertEquals;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;import java.util.Set;import org.junit.Test;public class JspPageStyleTest extends AbstractJspNodesTst {    /**     * Test parsing of a JSP comment.     */    @Test    public void testComment() {        Set<ASTJspComment> comments = getNodes(ASTJspComment.class, JSP_COMMENT);        assertEquals("One comment expected!", 1, comments.size());        ASTJspComment comment = comments.iterator().next();        assertEquals("Correct comment content expected!", "some comment", comment.getImage());    }    /**     * Test parsing a JSP directive.     */    @Test    public void testDirective() {        Set<JspNode> nodes = getNodes(null, JSP_DIRECTIVE);        Set<ASTJspDirective> directives = getNodesOfType(ASTJspDirective.class, nodes);        assertEquals("One directive expected!", 1, directives.size());        ASTJspDirective directive = directives.iterator().next();        assertEquals("Correct directive name expected!", "page", directive.getName());        Set<ASTJspDirectiveAttribute> directiveAttrs = getNodesOfType(ASTJspDirectiveAttribute.class, nodes);        assertEquals("Two directive attributes expected!", 2, directiveAttrs.size());        List<ASTJspDirectiveAttribute> attrsList = new ArrayList<>(directiveAttrs);        Collections.sort(attrsList, new Comparator<ASTJspDirectiveAttribute>() {            public int compare(ASTJspDirectiveAttribute arg0, ASTJspDirectiveAttribute arg1) {                return arg0.getName().compareTo(arg1.getName());            }        });        ASTJspDirectiveAttribute attr = attrsList.get(0);        assertEquals("Correct directive attribute name expected!", "language", attr.getName());        assertEquals("Correct directive attribute value expected!", "java", attr.getValue());        attr = attrsList.get(1);        assertEquals("Correct directive attribute name expected!", "session", attr.getName());        assertEquals("Correct directive attribute value expected!", "true", attr.getValue());    }    /**     * Test parsing of a JSP declaration.     */    @Test    public void testDeclaration() {        Set<ASTJspDeclaration> declarations = getNodes(ASTJspDeclaration.class, JSP_DECLARATION);        assertEquals("One declaration expected!", 1, declarations.size());        ASTJspDeclaration declaration = declarations.iterator().next();        assertEquals("Correct declaration content expected!", "String someString = \"s\";", declaration.getImage());    }    /**     * Test parsing of a JSP scriptlet.     */    @Test    public void testScriptlet() {        Set<ASTJspScriptlet> scriptlets = getNodes(ASTJspScriptlet.class, JSP_SCRIPTLET);        assertEquals("One scriptlet expected!", 1, scriptlets.size());        ASTJspScriptlet scriptlet = scriptlets.iterator().next();        assertEquals("Correct scriptlet content expected!", "someString = someString + \"suffix\";",                scriptlet.getImage());    }    /**     * Test parsing of a JSP expression.     */    @Test    public void testExpression() {        Set<ASTJspExpression> expressions = getNodes(ASTJspExpression.class, JSP_EXPRESSION);        assertEquals("One expression expected!", 1, expressions.size());        ASTJspExpression expression = expressions.iterator().next();        assertEquals("Correct expression content expected!", "someString", expression.getImage());    }    /**     * Test parsing of a JSP expression in an attribute.     */    @Test    public void testExpressionInAttribute() {        Set<ASTJspExpressionInAttribute> expressions = getNodes(ASTJspExpressionInAttribute.class,                JSP_EXPRESSION_IN_ATTRIBUTE);        assertEquals("One expression expected!", 1, expressions.size());        ASTJspExpressionInAttribute expression = expressions.iterator().next();        assertEquals("Correct expression content expected!", "style.getClass()", expression.getImage());    }    /**     * Test parsing of a EL expression.     */    @Test    public void testElExpression() {        Set<ASTElExpression> expressions = getNodes(ASTElExpression.class, JSP_EL_EXPRESSION);        assertEquals("One expression expected!", 1, expressions.size());        ASTElExpression expression = expressions.iterator().next();        assertEquals("Correct expression content expected!", "myBean.get(\"${ World }\")", expression.getImage());    }    /**     * Test parsing of a EL expression in an attribute.     */    @Test    public void testElExpressionInAttribute() {        Set<ASTElExpression> expressions = getNodes(ASTElExpression.class, JSP_EL_EXPRESSION_IN_ATTRIBUTE);        assertEquals("One expression expected!", 1, expressions.size());        ASTElExpression expression = expressions.iterator().next();        assertEquals("Correct expression content expected!", "myValidator.find(\"'jsp'\")", expression.getImage());    }    /**     * Test parsing of a EL expression in an attribute.     */    @Test    public void testJsfValueBinding() {        Set<ASTValueBinding> valueBindings = getNodes(ASTValueBinding.class, JSF_VALUE_BINDING);        assertEquals("One value binding expected!", 1, valueBindings.size());        ASTValueBinding valueBinding = valueBindings.iterator().next();        assertEquals("Correct expression content expected!", "myValidator.find(\"'jsf'\")", valueBinding.getImage());    }    private static final String JSP_COMMENT = "<html> <%-- some comment --%> </html>";    private static final String JSP_DIRECTIVE = "<html> <%@ page language=\"java\" session='true'%> </html>";    private static final String JSP_DECLARATION = "<html><%! String someString = \"s\"; %></html>";    private static final String JSP_SCRIPTLET = "<html> <% someString = someString + \"suffix\"; %> </html>";    private static final String JSP_EXPRESSION = "<html><head><title> <%= someString %> </title></head></html>";    private static final String JSP_EXPRESSION_IN_ATTRIBUTE = "<html> <body> <p class='<%= style.getClass() %>'> Hello </p> </body> </html>";    private static final String JSP_EL_EXPRESSION = "<html><title>Hello ${myBean.get(\"${ World }\") } .jsp</title></html>";    private static final String JSP_EL_EXPRESSION_IN_ATTRIBUTE = "<html> <f:validator type=\"get('type').${myValidator.find(\"'jsp'\")}\" /> </html>";    private static final String JSF_VALUE_BINDING = "<html> <body> <p class='#{myValidator.find(\"'jsf'\")}'> Hello </p> </body> </html>";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(JspPageStyleTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.jsp.ast;import static org.junit.Assert.assertEquals;import java.io.StringReader;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.PMDException;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSetFactory;import net.sourceforge.pmd.RuleSets;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.jsp.JspLanguageModule;import net.sourceforge.pmd.lang.rule.XPathRule;import net.sourceforge.pmd.testframework.RuleTst;public class XPathJspRuleTest extends RuleTst {    /**     * Test matching a XPath expression against a JSP source.     * @throws PMDException      */    @Test    public void testExpressionMatching() throws PMDException {        Rule rule = new XPathRule(XPATH_EXPRESSION);        rule.setMessage("Test");        rule.setLanguage(LanguageRegistry.getLanguage(JspLanguageModule.NAME));        RuleSet rules = new RuleSetFactory().createSingleRuleRuleSet(rule);        RuleContext ctx = new RuleContext();        Report report = new Report();        ctx.setReport(report);        ctx.setSourceCodeFilename("n/a");        ctx.setLanguageVersion(LanguageRegistry.getLanguage(JspLanguageModule.NAME).getDefaultVersion());        PMD p = new PMD();        p.getSourceCodeProcessor().processSourceCode(new StringReader(MATCH), new RuleSets(rules), ctx);        assertEquals("One violation expected!", 1, report.size());        RuleViolation rv = report.iterator().next();        assertEquals(1, rv.getBeginLine());    }    private static final String MATCH = "<html><hr/></html>";    private static final String XPATH_EXPRESSION = "//Element [@Name='hr']";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.jsp.ast;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import org.junit.Before;import org.junit.Test;public class OpenTagRegisterTest {    private OpenTagRegister tagList;    private int elmId = 0;    @Before    public void newRegister() {        tagList = new OpenTagRegister();    }    /**     * &lt;a&gt; &lt;b&gt; &lt;/a&gt;     */    @Test    public void testSimpleNesting() {        ASTElement elm = element("a");        ASTElement elm2 = element("b");        tagList.openTag(elm);        tagList.openTag(elm2);        tagList.closeTag(elm);        assertFalse(elm.isUnclosed());        assertTrue(elm2.isUnclosed());    }    /**     * &lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/a&gt;     */    @Test    public void doubleNesting() {        ASTElement elm = element("a");        ASTElement elm2 = element("b");        ASTElement elm3 = element("b");        tagList.openTag(elm);        tagList.openTag(elm2);        tagList.openTag(elm3);        tagList.closeTag(elm);        assertFalse(elm.isUnclosed());        assertTrue(elm2.isUnclosed());        assertTrue(elm3.isUnclosed());    }    /**     * &lt;x&gt; &lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/x&gt; &lt;/a&gt; &lt;/x&gt;     */    @Test    public void unopenedTags() {        ASTElement elm = element("x");        ASTElement elm2 = element("a");        ASTElement elm3 = element("b");        ASTElement elm4 = element("b");        tagList.openTag(elm);        tagList.openTag(elm2);        tagList.openTag(elm3);        tagList.openTag(elm4);        tagList.closeTag(elm);        tagList.closeTag(elm2);        tagList.closeTag(elm3);        tagList.closeTag(elm);        assertFalse(elm.isUnclosed());        assertTrue(elm2.isUnclosed());        assertTrue(elm3.isUnclosed());        assertTrue(elm4.isUnclosed());    }    /**     * &lt;x&gt; &lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/z&gt; &lt;/a&gt; &lt;/x&gt;     *      */    @Test    public void interleavedTags() {        ASTElement elm = element("x");        ASTElement elm2 = element("a");        ASTElement elm3 = element("b");        ASTElement elm4 = element("b");        ASTElement elm5 = element("z");        tagList.openTag(elm);        tagList.openTag(elm2);        tagList.openTag(elm3);        tagList.openTag(elm4); // open b        tagList.closeTag(elm5); // close z        tagList.closeTag(elm2); // close a        tagList.closeTag(elm); // close x        assertFalse(elm.isUnclosed()); // x is closed        assertFalse(elm2.isUnclosed()); // a is closed        assertTrue(elm3.isUnclosed());        assertTrue(elm4.isUnclosed());        // elm5 ???    }    /**     * &lt;a&gt; &lt;x&gt; &lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/z&gt; &lt;/a&gt; &lt;/x&gt;     */    @Test    public void openedIsolatedTag() {        ASTElement a = element("a");        ASTElement x = element("x");        ASTElement a2 = element("a");        ASTElement b = element("b");        ASTElement b2 = element("b");        ASTElement z = element("z");        tagList.openTag(a);        tagList.openTag(x);        tagList.openTag(a2);        tagList.openTag(b);        tagList.openTag(b2);        tagList.closeTag(z); // close z        tagList.closeTag(a2); // close second a        tagList.closeTag(x); // close x        assertTrue(a.isUnclosed()); // first a is unclosed        assertFalse(x.isUnclosed()); // x is closed        assertFalse(a2.isUnclosed()); // a is closed        assertTrue(b.isUnclosed());        assertTrue(b2.isUnclosed());    }    private ASTElement element(String name) {        ASTElement elm = new ASTElement(elmId++);        elm.setName(name);        return elm;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.jsp;import java.io.StringReader;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersionHandler;import net.sourceforge.pmd.lang.Parser;import net.sourceforge.pmd.lang.ast.Node;/** * Unit test for JSP parsing. * */public class JspParserTest {    /**     * Verifies bug #939 Jsp parser fails on $     */    @Test    public void testParseDollar() {        Node node = parse(                "<span class=\"CostUnit\">$</span><span class=\"CostMain\">129</span><span class=\"CostFrac\">.00</span>");        Assert.assertNotNull(node);    }    private Node parse(String code) {        LanguageVersionHandler jspLang = LanguageRegistry.getLanguage(JspLanguageModule.NAME).getDefaultVersion()                .getLanguageVersionHandler();        Parser parser = jspLang.getParser(jspLang.getDefaultParserOptions());        Node node = parser.parse(null, new StringReader(code));        return node;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import java.io.File;import org.junit.Test;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.LanguageVersionDiscoverer;import net.sourceforge.pmd.lang.jsp.JspLanguageModule;public class LanguageVersionDiscovererTest {    /**     * Test on JSP file.     */    @Test    public void testJspFile() {        LanguageVersionDiscoverer discoverer = new LanguageVersionDiscoverer();        File jspFile = new File("/path/to/MyPage.jsp");        LanguageVersion languageVersion = discoverer.getDefaultLanguageVersionForFile(jspFile);        assertEquals("LanguageVersion must be JSP!",                LanguageRegistry.getLanguage(JspLanguageModule.NAME).getDefaultVersion(), languageVersion);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.jsp.JspLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] { { JspLanguageModule.NAME, JspLanguageModule.TERSE_NAME, "",            LanguageRegistry.getLanguage(JspLanguageModule.NAME).getDefaultVersion(), }, });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;/** * Test jsp's rulesets */public class RuleSetFactoryTest extends AbstractRuleSetFactoryTest {    // no additional tests yet}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import java.io.IOException;import java.nio.charset.StandardCharsets;import org.apache.commons.io.IOUtils;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.testframework.AbstractTokenizerTest;/** * @author rpelisse * */public class FortranTokenizerTest extends AbstractTokenizerTest {    @Before    @Override    public void buildTokenizer() throws IOException {        this.tokenizer = new FortranTokenizer();        this.sourceCode = new SourceCode(new SourceCode.StringCodeLoader(this.getSampleCode(), "sample.for"));    }    @Override    public String getSampleCode() throws IOException {        return IOUtils.toString(FortranTokenizerTest.class.getResourceAsStream("sample.for"), StandardCharsets.UTF_8);    }    @Test    public void tokenizeTest() throws IOException {        this.expectedTokenCount = 434;        super.tokenizeTest();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.fortran.FortranLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] {            {                FortranLanguageModule.NAME,                FortranLanguageModule.TERSE_NAME,                "",                LanguageRegistry.getLanguage(FortranLanguageModule.NAME).getDefaultVersion(),            },        });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.util.designer;import static org.junit.Assert.assertEquals;import org.junit.Test;import net.sourceforge.pmd.lang.DummyLanguageModule;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.ast.Node;/** * Unit tests for {@link Designer} */public class DesignerTest {    /**     * Unit test for https://sourceforge.net/p/pmd/bugs/1168/     */    @Test    public void testCopyXmlToClipboard() {        Node compilationUnit = Designer.getCompilationUnit(                LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getDefaultVersion().getLanguageVersionHandler(),                "doesn't matter");        String xml = Designer.getXmlTreeCode(compilationUnit);        assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"                + "<dummyNode BeginColumn=\"1\" BeginLine=\"1\" EndColumn=\"0\" EndLine=\"0\" FindBoundary=\"false\"\n"                + "           Image=\"Foo\"\n" + "           SingleLine=\"false\"/>", xml);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.util.database;import javax.xml.transform.Source;import org.junit.Assert;import org.junit.Test;/** * * @author sturton */public class ResourceResolverTest {    /**     * Test of resolve method, of class ResourceResolver.     */    @Test    public void testResolve() throws Exception {        System.out.println("resolve");        String href = "";        String base = "";        ResourceResolver instance = new ResourceResolver();        Source expResult = null;        Source result = instance.resolve(href, base);        Assert.assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.util.database;import java.io.File;import java.io.FileOutputStream;import java.io.PrintStream;import java.util.Map.Entry;import java.util.Properties;import java.util.ResourceBundle;import org.apache.commons.io.IOUtils;import org.junit.After;import org.junit.Assert;import org.junit.Before;import org.junit.Test;/** * * @author sturton */public class DBTypeTest {    private File absoluteFile;    private Properties testProperties;    private Properties includeProperties;    @Before    public void setUp() throws Exception {        testProperties = new Properties();        testProperties.put("prop1", "value1");        testProperties.put("prop2", "value2");        testProperties.put("prop3", "value3");        includeProperties = new Properties();        includeProperties.putAll(testProperties);        includeProperties.put("prop3", "include3");        PrintStream printStream = null;        try {            absoluteFile = File.createTempFile("dbtypetest", ".properties");            FileOutputStream fileOutputStream = new FileOutputStream(absoluteFile);            printStream = new PrintStream(fileOutputStream);            for (Entry<?, ?> entry : testProperties.entrySet()) {                printStream.printf("%s=%s\n", entry.getKey(), entry.getValue());            }        } finally {            IOUtils.closeQuietly(printStream);        }    }    @After    public void tearDown() throws Exception {        testProperties = null;        absoluteFile.delete();    }    /**     * Test of getProperties method, of class DBType.     */    @Test    public void testGetPropertiesFromFile() throws Exception {        System.out.println("getPropertiesFromFile");        DBType instance = new DBType(absoluteFile.getAbsolutePath());        Properties expResult = testProperties;        Properties result = instance.getProperties();        Assert.assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getProperties method, of class DBType.     */    @Test    public void testGetProperties() throws Exception {        System.out.println("testGetProperties");        DBType instance = new DBType("test");        Properties expResult = testProperties;        System.out.println("testGetProperties: expected results " + testProperties);        Properties result = instance.getProperties();        System.out.println("testGetProperties: actual results " + result);        Assert.assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getProperties method, of class DBType.     */    @Test    public void testGetIncludeProperties() throws Exception {        System.out.println("testGetIncludeProperties");        DBType instance = new DBType("include");        Properties expResult = includeProperties;        System.out.println("testGetIncludeProperties: expected results " + includeProperties);        Properties result = instance.getProperties();        System.out.println("testGetIncludeProperties: actual results " + result);        Assert.assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getResourceBundleAsProperties method, of class DBType.     */    @Test    public void testAsProperties() {        System.out.println("asProperties");        ResourceBundle bundle = ResourceBundle.getBundle(DBType.class.getPackage().getName() + ".test");        Properties expResult = testProperties;        Properties result = DBType.getResourceBundleAsProperties(bundle);        Assert.assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.util.database;import java.io.InputStream;import org.junit.Assert;import org.junit.Test;/** * * @author sturton */public class ResourceLoaderTest {    /**     * Test of getResourceStream method, of class ResourceLoader.     */    @Test    public void testGetResourceStream() throws Exception {        System.out.println("getResourceStream");        String path = "";        ResourceLoader instance = new ResourceLoader();        InputStream expResult = null;        InputStream result = instance.getResourceStream(path);        Assert.assertNotNull(result);        // assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.util.database;import static org.junit.Assert.assertEquals;import java.net.URI;import java.net.URISyntaxException;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import org.junit.Test;/** * * @author sturton */public class DBURITest {    /**     * URI with minimum information, relying on defaults in     * testdefaults.properties     */    static final String C_TEST_DEFAULTS = "jdbc:oracle:testdefault://192.168.100.21:1521/ORCL";    /*     * Expected values from testdefaults.properties     */    static final String C_DEFAULT_USER = "scott";    static final String C_DEFAULT_PASSWORD = "tiger";    static final String C_DEFAULT_LANGUAGES = "java,plsql";    static final String C_DEFAULT_SCHEMAS = "scott,system";    static final String C_DEFAULT_SOURCE_CODE_TYPES = "table,view";    static final String C_DEFAULT_SOURCE_CODE_NAMES = "emp,dept";    static final String C_DEFAULT_CHARACTERSET = "utf8";    /**     * Fully specified URI, overriding defaults in testdefaults.properties     */    static final String C_TEST_EXPLICIT = "jdbc:oracle:testdefault:system/oracle@//192.168.100.21:1521/ORCL?characterset=us7ascii&schemas=scott,hr,sh,system&sourcecodetypes=procedures,functions,triggers,package,types&languages=plsql,java&sourcecodenames=PKG_%25%25,PRC_%25%25";    /*     * Expected values from testdefaults.properties, with values overridden by     * URI query parameters     */    static final String C_EXPLICIT_USER = "system";    static final String C_EXPLICIT_PASSWORD = "oracle";    static final String C_EXPLICIT_LANGUAGES = "plsql,java";    static final String C_EXPLICIT_SCHEMAS = "scott,hr,sh,system";    static final String C_EXPLICIT_SOURCE_CODE_TYPES = "procedures,functions,triggers,package,types";    static final String C_EXPLICIT_SOURCE_CODE_NAMES = "PKG_%%,PRC_%%";    static final String C_EXPLICIT_CHARACTERSET = "us7ascii";    static final String C_TEST_URI = "test?param1=x%261&param2=&param3=";    static final String C_ORACLE_OCI_1 = "jdbc:oracle:oci:system/oracle@//192.168.100.21:1521/ORCL";    static final String C_ORACLE_OCI_2 = "jdbc:oracle:oci:system/oracle@//192.168.100.21:1521/ORCL?characterset=utf8&schemas=scott,hr,sh,system&sourcecodetypes=procedures,functions,triggers,package,types&languages=plsql,java";    static final String C_ORACLE_OCI_3 = "jdbc:oracle:oci:system/oracle@//myserver.com:1521/customer_db?characterset=utf8&schemas=scott,hr,sh,system&sourcecodetypes=procedures,functions,triggers,package,types&languages=plsql,java&sourcecodenames=PKG_%25%25,PRC_%25%25";    static final String C_ORACLE_THIN_1 = "jdbc:oracle:thin:system/oracle@//192.168.100.21:1521/ORCL";    static final String C_ORACLE_THIN_2 = "jdbc:oracle:thin:system/oracle@//192.168.100.21:1521/ORCL?characterset=utf8&schemas=scott,hr,sh,system&sourcecodetypes=procedures,functions,triggers,package,types&languages=plsql,java";    static final String C_ORACLE_THIN_3 = "jdbc:oracle:thin:system/oracle@//myserver.com:1521/customer_db?characterset=utf8&schemas=scott,hr,sh,system&sourcecodetypes=procedures,functions,triggers,package,types&languages=plsql,java&sourcecodenames=PKG_%25%25,PRC_%25%25";    static final String C_POSTGRES_1 = "jdbc:postgresql://host/database";    static final String C_HTTP = "http://localhost:80?characterset=utf8&schemas=scott,hr,sh,system&sourcecodetypes=procedures,functions,triggers,package,types&languages=plsql,java";    static void dump(String description, URI dburi) {        System.err.printf(                "Test %s\n: isOpaque=%s, isAbsolute=%s Scheme=%s,\n SchemeSpecificPart=%s,\n Host=%s,\n Port=%s,\n Path=%s,\n Fragment=%s,\n Query=%s\n",                description, dburi.isOpaque(), dburi.isAbsolute(), dburi.getScheme(), dburi.getSchemeSpecificPart(),                dburi.getHost(), dburi.getPort(), dburi.getPath(), dburi.getFragment(), dburi.getQuery());        String query = dburi.getQuery();        if (null != query && !"".equals(query)) {            String[] params = query.split("&");            Map<String, String> map = new HashMap<>();            for (String param : params) {                String[] splits = param.split("=");                String name = splits[0];                String value = null;                if (splits.length > 1) {                    value = splits[1];                }                map.put(name, value);                System.err.printf("name=%s,value=%s\n", name, value);            }        }        // return map;    }    /**     * Test of dump method, of class DBURI.     */    @Test    public void testDump() throws URISyntaxException, Exception {        System.out.println("dump");        String description = "";        DBURI dburi = new DBURI(C_TEST_URI);        DBURI.dump(description, dburi.getUri());        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getUri method, of class DBURI.     */    @Test    public void testGetUri() throws URISyntaxException, Exception {        System.out.println("getUri");        DBURI instance = new DBURI(C_ORACLE_OCI_1);        URI expResult = new URI(C_ORACLE_OCI_1);        URI result = instance.getUri();        assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of setUri method, of class DBURI.     */    @Test    public void testSetUri() throws URISyntaxException, Exception {        System.out.println("setUri");        URI uri = new URI(C_ORACLE_OCI_1);        DBURI instance = new DBURI(C_TEST_URI);        instance.setUri(uri);        assertEquals(uri, instance.getUri());        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getDbType method, of class DBURI.     */    @Test    public void testGetDbType() throws URISyntaxException, Exception {        System.out.println("getDbType");        DBURI instance = new DBURI(C_POSTGRES_1);        DBType expResult = new DBType("postgresql");        DBType result = instance.getDbType();        // assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getDbType method, of class DBURI.     */    @Test    public void testGetDbType2() throws URISyntaxException, Exception {        System.out.println("getDbType");        DBURI instance = new DBURI(C_ORACLE_OCI_1);        DBType expResult = new DBType("oci");        DBType result = instance.getDbType();        // assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of setDbType method, of class DBURI.     */    @Test    public void testSetDbType() throws URISyntaxException, Exception {        System.out.println("setDbType");        DBURI instance = new DBURI(C_ORACLE_OCI_2);        DBType dbType = new DBType("postgresql");        instance.setDbType(dbType);        assertEquals(dbType, instance.getDbType());        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getSchemasList method, of class DBURI.     */    @Test    public void testGetSchemasList() throws URISyntaxException, Exception {        System.out.println("getSchemasList");        DBURI instance = new DBURI(C_ORACLE_OCI_2);        List<String> expResult;        expResult = Arrays.asList("scott,hr,sh,system".split(","));        List<String> result = instance.getSchemasList();        assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of setSchemasList method, of class DBURI.     */    @Test    public void testSetSchemasList() throws URISyntaxException, Exception {        System.out.println("setSchemasList");        List<String> schemasList = Arrays.asList("scott,hr,sh,system".split(","));        DBURI instance = new DBURI(C_ORACLE_OCI_1);        instance.setSchemasList(schemasList);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getSourceCodeTypesList method, of class DBURI.     */    @Test    public void testGetSourceCodeTypesList() throws URISyntaxException, Exception {        System.out.println("getSourceCodeTypesList");        DBURI instance = new DBURI(C_ORACLE_OCI_2);        List<String> expResult = Arrays.asList("procedures,functions,triggers,package,types".split(","));        List<String> result = instance.getSourceCodeTypesList();        assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of setSourceCodeTypesList method, of class DBURI.     */    @Test    public void testSetSourceCodeTypesList() throws URISyntaxException, Exception {        System.out.println("setSourceCodeTypesList");        List<String> sourcecodetypesList = Arrays.asList("procedures,functions,triggers,package,types".split(","));        DBURI instance = new DBURI(C_ORACLE_OCI_1);        instance.setSourceCodeTypesList(sourcecodetypesList);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getSourceCodeNamesList method, of class DBURI.     */    @Test    public void testGetSourceCodeNamesList() throws URISyntaxException, Exception {        System.out.println("getSourceCodeNamesList");        DBURI instance = new DBURI(C_ORACLE_OCI_3);        List<String> expResult = Arrays.asList("PKG_%%,PRC_%%".split(","));        List<String> result = instance.getSourceCodeNamesList();        assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of setSourceCodeNamesList method, of class DBURI.     */    @Test    public void testSetSourceCodeNamesList() throws URISyntaxException, Exception {        System.out.println("setSourceCodeNamesList");        List<String> sourceCodeNamesList = Arrays.asList("PKG_%%,TRG_%%".split(","));        DBURI instance = new DBURI(C_ORACLE_OCI_2);        instance.setSourceCodeNamesList(sourceCodeNamesList);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getLanguagesList method, of class DBURI.     */    @Test    public void testGetLanguagesList() throws URISyntaxException, Exception {        System.out.println("getLanguagesList");        DBURI instance = new DBURI(C_ORACLE_OCI_2);        List<String> expResult = Arrays.asList("plsql,java".split(","));        List<String> result = instance.getLanguagesList();        assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of setLanguagesList method, of class DBURI.     */    @Test    public void testSetLanguagesList() throws URISyntaxException, Exception {        System.out.println("setLanguagesList");        List<String> languagesList = Arrays.asList("plsql,java".split(","));        DBURI instance = new DBURI(C_ORACLE_OCI_2);        instance.setLanguagesList(languagesList);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getDriverClass method, of class DBURI.     */    @Test    public void testGetDriverClass() throws URISyntaxException, Exception {        System.out.println("getDriverClass");        DBURI instance = new DBURI(C_ORACLE_OCI_1);        String expResult = "oracle.jdbc.OracleDriver";        String result = instance.getDriverClass();        System.out.println("testGetDriverClass: driverClass=" + result);        assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getDriverClass method, of class DBURI.     */    @Test    public void testGetThinDriverClass() throws URISyntaxException, Exception {        System.out.println("getThinDriverClass");        DBURI instance = new DBURI(C_ORACLE_THIN_1);        String expResult = "oracle.jdbc.OracleDriver";        String result = instance.getDriverClass();        System.out.println("testGetThinDriverClass: driverClass=" + result);        System.out.println("testGetThinDriverClass: getDbType().getProperties() follows");        System.out                .println("testGetThinDriverClass: getDbType().getProperties()=" + instance.getDbType().getProperties());        assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of setDriverClass method, of class DBURI.     */    @Test    public void testSetDriverClass() throws URISyntaxException, Exception {        System.out.println("setDriverClass");        String driverClass = "oracle.jdbc.driver.OracleDriver";        DBURI instance = new DBURI(C_ORACLE_OCI_1);        instance.setDriverClass(driverClass);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getCharacterSet method, of class DBURI.     */    @Test    public void testGetCharacterSet() throws URISyntaxException, Exception {        System.out.println("getCharacterSet");        DBURI instance = new DBURI(C_ORACLE_OCI_2);        String expResult = "utf8";        String result = instance.getCharacterSet();        assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of setCharacterSet method, of class DBURI.     */    @Test    public void testSetCharacterSet() throws URISyntaxException, Exception {        System.out.println("setCharacterSet");        String characterSet = "utf8";        DBURI instance = new DBURI(C_POSTGRES_1);        instance.setCharacterSet(characterSet);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getSourceCodeType method, of class DBURI.     */    @Test    public void testGetSourceCodeType() throws URISyntaxException, Exception {        System.out.println("getSourceCodeType");        DBURI instance = new DBURI(C_ORACLE_OCI_1);        int expResult = 2005; // CLOB        int result = instance.getSourceCodeType();        assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of setSourceCodeType method, of class DBURI.     */    @Test    public void testSetSourceCodeType() throws URISyntaxException, Exception {        System.out.println("setSourceCodeType");        int sourceCodeType = 5;        DBURI instance = new DBURI(C_ORACLE_OCI_1);        instance.setSourceCodeType(sourceCodeType);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getSubprotocol method, of class DBURI.     */    @Test    public void testGetSubprotocol() throws URISyntaxException, Exception {        System.out.println("getSubprotocol");        DBURI instance = new DBURI(C_ORACLE_OCI_2);        String expResult = "oracle";        String result = instance.getSubprotocol();        assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of setSubprotocol method, of class DBURI.     */    public void testSetSubprotocol() throws URISyntaxException, Exception {        System.out.println("setSubprotocol");        DBURI instance = new DBURI(C_ORACLE_OCI_2);        String subprotocol = "oracle";        instance.setSubprotocol(subprotocol);        String result = instance.getSubprotocol();        assertEquals(subprotocol, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getSubnamePrefix method, of class DBURI.     */    @Test    public void testGetSubnamePrefix() throws URISyntaxException, Exception {        System.out.println("getSubnamePrefix");        DBURI instance = new DBURI(C_ORACLE_OCI_2);        String expResult = "oci";        String result = instance.getSubnamePrefix();        assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of setSubnamePrefix method, of class DBURI.     */    @Test    public void testSetSubnamePrefix() throws URISyntaxException, Exception {        System.out.println("setSubnamePrefix");        String subnamePrefix = "oci8";        DBURI instance = new DBURI(C_ORACLE_OCI_2);        instance.setSubnamePrefix(subnamePrefix);        String result = instance.getSubnamePrefix();        assertEquals(subnamePrefix, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getParameters method, of class DBURI.     */    @Test    public void testGetParameters() throws URISyntaxException, Exception {        System.out.println("getParameters");        DBURI instance = new DBURI(C_TEST_URI);        Map<String, String> expResult = new HashMap<>();        expResult.put("param1", "x&1");        expResult.put("param2", null);        expResult.put("param3", null);        Map<String, String> result = instance.getParameters();        assertEquals(expResult, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of setParameters method, of class DBURI.     */    @Test    public void testSetParameters() throws URISyntaxException, Exception {        System.out.println("setParameters");        Map<String, String> parameters = new HashMap<>();        parameters.put("param1", "x%FFF");        parameters.put("param2", "IAmParameter2");        parameters.put("param3", "IAmParameter3");        DBURI instance = new DBURI(C_TEST_URI);        instance.setParameters(parameters);        // TODO review the generated test code and remove the default call to        // fail.        assertEquals(parameters, instance.getParameters());    }    /**     * Verify that default languages are returned if non are provided in the     * DBURI.     */    @Test    public void testDefaultLanguagesList() throws URISyntaxException, Exception {        System.out.println("testDefaultLanguagesList");        List<String> defaultLanguagesList = Arrays.asList(C_DEFAULT_LANGUAGES.split(","));        DBURI instance = new DBURI(C_TEST_DEFAULTS);        List<String> result = instance.getLanguagesList();        assertEquals(defaultLanguagesList, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Verify that default CharacterSet are returned if non are provided in the     * DBURI.     */    @Test    public void testDefaultCharacterSet() throws URISyntaxException, Exception {        System.out.println("testDefaultCharacterSet");        DBURI instance = new DBURI(C_TEST_DEFAULTS);        String result = instance.getCharacterSet();        assertEquals(C_DEFAULT_CHARACTERSET, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Verify that default languages are returned if non are provided in the     * DBURI.     */    @Test    public void testDefaultSchemasList() throws URISyntaxException, Exception {        System.out.println("testDefaultSchemasList");        List<String> defaultSchemasList = Arrays.asList(C_DEFAULT_SCHEMAS.split(","));        DBURI instance = new DBURI(C_TEST_DEFAULTS);        List<String> result = instance.getSchemasList();        assertEquals(defaultSchemasList, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Verify that default Source Code Types are returned if non are provided in     * the DBURI.     */    @Test    public void testDefaultSourceCodeTypesList() throws URISyntaxException, Exception {        System.out.println("testDefaultSourceCodeTypesList");        List<String> defaultSourceCodeTypesList = Arrays.asList(C_DEFAULT_SOURCE_CODE_TYPES.split(","));        DBURI instance = new DBURI(C_TEST_DEFAULTS);        List<String> result = instance.getSourceCodeTypesList();        assertEquals(defaultSourceCodeTypesList, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Verify that default languages are returned if non are provided in the     * DBURI.     */    @Test    public void testDefaultSourceCodeNamesList() throws URISyntaxException, Exception {        System.out.println("testDefaultSourceCodeNamesList");        List<String> defaultSourceCodeNamesList = Arrays.asList(C_DEFAULT_SOURCE_CODE_NAMES.split(","));        DBURI instance = new DBURI(C_TEST_DEFAULTS);        List<String> result = instance.getSourceCodeNamesList();        assertEquals(defaultSourceCodeNamesList, result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Verify that languages are returned if provided in the DBURI.     */    @Test    public void testExplicitLanguagesList() throws URISyntaxException, Exception {        System.out.println("testExplicitLanguagesList");        List<String> defaultLanguagesList = Arrays.asList(C_EXPLICIT_LANGUAGES.split(","));        DBURI instance = new DBURI(C_TEST_EXPLICIT);        List<String> result = instance.getLanguagesList();        assertEquals(defaultLanguagesList, result);        // TODO review the generated test code and remove the call to fail.        // fail("The test case is a prototype.");    }    /**     * Verify that CharacterSet are returned if provided in the DBURI.     */    @Test    public void testExplicitCharacterSet() throws URISyntaxException, Exception {        System.out.println("testExplicitCharacterSet");        DBURI instance = new DBURI(C_TEST_EXPLICIT);        String result = instance.getCharacterSet();        assertEquals(C_EXPLICIT_CHARACTERSET, result);        // TODO review the generated test code and remove the call to fail.        // fail("The test case is a prototype.");    }    /**     * Verify that languages are returned if provided in the DBURI.     */    @Test    public void testExplicitSchemasList() throws URISyntaxException, Exception {        System.out.println("testExplicitSchemasList");        List<String> defaultSchemasList = Arrays.asList(C_EXPLICIT_SCHEMAS.split(","));        DBURI instance = new DBURI(C_TEST_EXPLICIT);        List<String> result = instance.getSchemasList();        assertEquals(defaultSchemasList, result);        // TODO review the generated test code and remove the call to fail.        // fail("The test case is a prototype.");    }    /**     * Verify that Source Code Types are returned if provided in the DBURI.     */    @Test    public void testExplicitSourceCodeTypesList() throws URISyntaxException, Exception {        System.out.println("testExplicitSourceCodeTypesList");        List<String> defaultSourceCodeTypesList = Arrays.asList(C_EXPLICIT_SOURCE_CODE_TYPES.split(","));        DBURI instance = new DBURI(C_TEST_EXPLICIT);        List<String> result = instance.getSourceCodeTypesList();        assertEquals(defaultSourceCodeTypesList, result);        // TODO review the generated test code and remove the call to fail.        // fail("The test case is a prototype.");    }    /**     * Verify that languages are returned if provided in the DBURI.     */    @Test    public void testExplicitSourceCodeNamesList() throws URISyntaxException, Exception {        System.out.println("testExplicitSourceCodeNamesList");        List<String> defaultSourceCodeNamesList = Arrays.asList(C_EXPLICIT_SOURCE_CODE_NAMES.split(","));        DBURI instance = new DBURI(C_TEST_EXPLICIT);        List<String> result = instance.getSourceCodeNamesList();        assertEquals(defaultSourceCodeNamesList, result);        // TODO review the generated test code and remove the call to fail.        // fail("The test case is a prototype.");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.util.database;import java.io.IOException;import java.io.Reader;import java.net.URISyntaxException;import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.SQLException;import java.util.List;import java.util.Properties;import java.util.logging.Level;import java.util.logging.Logger;import org.junit.Assert;import org.junit.Ignore;import org.junit.Test;/** * * @author sturton */@Ignorepublic class DBMSMetadataTest {    static final String C_ORACLE_THIN_1 = "jdbc:oracle:thin:scott/tiger@//192.168.100.21:5521/customer_db?characterset=utf8&schemas=scott,hr,sh,system&objectTypes=procedures,functions,triggers,package,types&languages=plsql,java&name=PKG_%25%7C%7CPRC_%25";    static final String C_ORACLE_THIN_3 = "jdbc:oracle:thin:scott/oracle@//192.168.100.21:1521/orcl?characterset=utf8&schemas=scott,hr,sh,system&objectTypes=procedures,functions,triggers,package,types&languages=plsql,java&name=PKG_%25%7C%7CPRC_%25";    static final String C_ORACLE_THIN_4 = "jdbc:oracle:thin:system/oracle@//192.168.100.21:1521/ORCL?characterset=utf8&schemas=scott,hr,sh,system&objectTypes=procedures,functions,triggers,package,types&languages=plsql,java&name=PKG_%25%7C%7CPRC_%25";    static final String C_ORACLE_THIN_5 = "jdbc:oracle:thin:@//192.168.100.21:1521/ORCL?characterset=utf8&schemas=scott,hr,sh,system&objectTypes=procedures,functions,triggers,package,types&languages=plsql,java&name=PKG_%25%7C%7CPRC_%25&amp;user=system&amp;password=oracle";    /**     * URI with minimum information, relying on defaults in     * testdefaults.properties     */    static final String C_TEST_DEFAULTS = "jdbc:oracle:testdefault://192.168.100.21:1521/ORCL";    private DBURI dbURI;    private DBURI dbURI4;    private DBURI dbURI5;    private DBURI dbURIDefault;    public DBMSMetadataTest() throws URISyntaxException, Exception {        dbURI = new DBURI(C_ORACLE_THIN_3);        dbURI4 = new DBURI(C_ORACLE_THIN_4);        dbURI5 = new DBURI(C_ORACLE_THIN_5);        dbURIDefault = new DBURI(C_TEST_DEFAULTS);    }    /**     * Convert Readers to Strings for eay output and comparison.     */    private static String getStringFromReader(Reader reader) throws IOException {        StringBuilder stringBuilder = new StringBuilder(1024);        char[] charArray = new char[1024];        int readChars;        while ((readChars = reader.read(charArray)) > 0) {            System.out.println("Reader.read(CharArray)==" + readChars);            stringBuilder.append(charArray, 0, readChars);        }        reader.close();        return stringBuilder.toString();    }    /**     * Dump ResultSet     */    private static void dumpResultSet(ResultSet resultSet, String description) {        try {            ResultSetMetaData metaData = resultSet.getMetaData();            int columnCount = metaData.getColumnCount();            System.out.format("ResultSet \"%s\" has %d columns and contains ...\n[", description, columnCount);            /*             * Walk through the column names, writing out a header line             */            for (int columnNumber = 1; columnNumber <= columnCount; columnNumber++) {                System.out.format("%s%s", ((columnNumber > 1) ? "," : ""), metaData.getColumnName(columnNumber));            }            System.out.format("\n");            // Output each row            while (resultSet.next()) {                /*                 * Walk through the columns of this row, writing out a row line                 */                for (int columnNumber = 1; columnNumber <= columnCount; columnNumber++) {                    System.out.format("%s%s", ((columnNumber > 0) ? "," : ""), resultSet.getString(columnNumber));                }                System.out.format("\n");            }        } catch (SQLException ex) {            Logger.getLogger(DBMSMetadataTest.class.getName()).log(Level.SEVERE, null, ex);        }        System.out.format("...\n]\n");    }    /**     * Verify getConnection method, of class DBMSMetadata.     */    @org.junit.Test    public void testGetConnection() throws Exception {        System.out.println("getConnection");        String driverClass = dbURI.getDriverClass();        System.out.println("driverClass==" + driverClass);        System.out.println("URL==" + dbURI.getURL());        Class.forName(driverClass);        Object object = DriverManager.getDriver(dbURI.getURL());        // Object object = DriverManager.getDriver(C_ORACLE_OCI_3) ;        Properties properties = new Properties();        properties.put("user", "system");        properties.put("password", "oracle");        Connection expResult = DriverManager.getDriver(dbURI.getURL()).connect(dbURI.getURL(), properties);        DBMSMetadata instance = new DBMSMetadata(dbURI);        Connection result = instance.getConnection();        Assert.assertNotNull(result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Verify getConnection method, of class DBMSMetadata.     */    @Test    public void testGetConnectionWithConnectionParameters() throws Exception {        System.out.println("getConnection");        String driverClass = dbURI5.getDriverClass();        System.out.println("driverClass==" + driverClass);        System.out.println("URL==" + dbURI5.getURL());        Class.forName(driverClass);        Object object = DriverManager.getDriver(dbURI5.getURL());        // Object object = DriverManager.getDriver(C_ORACLE_OCI_3) ;        Properties properties = new Properties();        properties.putAll(dbURI5.getParameters());        Connection expResult = DriverManager.getDriver(dbURI5.getURL()).connect(dbURI5.getURL(), properties);        DBMSMetadata instance = new DBMSMetadata(dbURI5);        Connection result = instance.getConnection();        Assert.assertNotNull(result);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Test of getSourceCode method, of class DBMSMetadata.     */    @Test    public void testGetSourceCode() throws Exception {        System.out.println("getSourceCode");        // String objectType = "PACKAGE";        // String name = "DBMS_REPCAT_AUTH";        // String schema = "SYSTEM";        String objectType = "TABLE";        String name = "EMP";        String schema = "SCOTT";        System.out.println("dbURI.driverClass==" + dbURI.getDriverClass());        System.out.println("dbURI.URL==" + dbURI.getURL());        System.out.println("dbURI.getDBType.getProperties()==" + dbURI.getDbType().getProperties());        System.out.println("dbURI.getDBType.getSourceCodeReturnType()==" + dbURI.getDbType().getSourceCodeReturnType());        System.out.println("dbURI.getDBType.getProperties()=="                + dbURI.getDbType().getProperties().getProperty("getSourceCodeStatement"));        DBMSMetadata instance = new DBMSMetadata(dbURI);        Reader expResult = null;        Reader result = instance.getSourceCode(objectType, name, schema);        /*         * StringBuilder stringBuilder = new StringBuilder(1024); char[]         * charArray = new char[1024]; int readChars = 0; while(( readChars =         * result.read(charArray)) > 0 ) {         * System.out.println("Reader.read(CharArray)=="+readChars);         * stringBuilder.append(charArray, 0, readChars); } result.close();         *         * System.out.println("getSourceCode()==\""+stringBuilder.toString()+         * "\"" );         *         * assertTrue(stringBuilder.toString().startsWith("\n  CREATE "));         */        String resultString = getStringFromReader(result);        System.out.println("getSourceCode()==\"" + resultString);        // TODO review the generated test code and remove the default call to        // fail.        // fail("The test case is a prototype.");    }    /**     * Verify getSchemas method, of class DBMSMetadata.     */    @Test    public void testGetSchemas() throws Exception {        System.out.println("getSchemas");        DBURI testURI = dbURI4;        String driverClass = testURI.getDriverClass();        System.out.println("driverClass==" + driverClass);        System.out.println("URL==" + testURI.getURL());        Class.forName(driverClass);        Object object = DriverManager.getDriver(testURI.getURL());        // Object object = DriverManager.getDriver(C_ORACLE_OCI_3) ;        Properties properties = new Properties();        properties.put("user", "system");        properties.put("password", "oracle");        Connection expResult = DriverManager.getDriver(testURI.getURL()).connect(testURI.getURL(), properties);        DBMSMetadata instance = new DBMSMetadata(testURI);        Connection result = instance.getConnection();        Assert.assertNotNull(result);        ResultSet allSchemas = result.getMetaData().getSchemas();        dumpResultSet(allSchemas, "All Schemas");        ResultSet allCatalogues = result.getMetaData().getCatalogs();        dumpResultSet(allCatalogues, "All Catalogues");        String catalog = null;        String schemasPattern = "PHPDEMO";        String tablesPattern = null;        String proceduresPattern = null;        // Not until Java6 ResultSet matchedSchemas =        // result.getMetaData().getSchemas(catalog, schemasPattern) ;        // Not until Java6 dumpResultSet (matchedSchemas, "Matched Schemas") ;        ResultSet matchedTables = result.getMetaData().getTables(catalog, schemasPattern, tablesPattern, null);        dumpResultSet(matchedTables, "Matched Tables");        ResultSet matchedProcedures = result.getMetaData().getProcedures(catalog, schemasPattern, proceduresPattern);        dumpResultSet(matchedProcedures, "Matched Procedures");        System.out.format("testURI=%s,\ngetParameters()=%s\n", C_ORACLE_THIN_4, testURI.getParameters());        System.out.format(                "testURI=%s,\ngetSchemasList()=%s\n,getSourceCodeTypesList()=%s\n,getSourceCodeNmesList()=%s\n",                testURI, testURI.getSchemasList(), testURI.getSourceCodeTypesList(), testURI.getSourceCodeNamesList());    }    /**     * Verify getSchemas method, of class DBMSMetadata.     */    @Test    public void testGetSourceObjectList() throws Exception {        System.out.println("getConnection");        DBURI testURI = dbURI4;        String driverClass = testURI.getDriverClass();        System.out.println("driverClass==" + driverClass);        System.out.println("URL==" + testURI.getURL());        Class.forName(driverClass);        Object object = DriverManager.getDriver(testURI.getURL());        // Object object = DriverManager.getDriver(C_ORACLE_OCI_3) ;        Properties properties = new Properties();        properties.put("user", "system");        properties.put("password", "oracle");        Connection expResult = DriverManager.getDriver(testURI.getURL()).connect(testURI.getURL(), properties);        DBMSMetadata instance = new DBMSMetadata(testURI);        Connection result = instance.getConnection();        Assert.assertNotNull(result);        List<SourceObject> sourceObjectList = instance.getSourceObjectList();        Assert.assertNotNull(sourceObjectList);        System.out.format("testURI=%s,\ngetParameters()=%s\n", C_ORACLE_THIN_4, testURI.getParameters());        System.out.format(                "testURI=%s,\ngetSchemasList()=%s\n,getSourceCodeTypesList()=%s\n,getSourceCodeNmesList()=%s\n",                testURI, testURI.getSchemasList(), testURI.getSourceCodeTypesList(), testURI.getSourceCodeNamesList());        System.out.printf("sourceObjectList ...\n");        for (SourceObject sourceObject : sourceObjectList) {            System.out.printf("sourceObject=%s\n", sourceObject);            System.out.printf("sourceCode=[%s]\n", getStringFromReader(instance.getSourceCode(sourceObject)));        }    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.util.filter;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import org.junit.Test;public class RegexStringFilterTest {    @Test    public void testFilterAbsoluteWithExtension() {        String pattern = "C:/workspace/project/X.java";        verifyFilterFalse("same relative path w/ extension", pattern, "X.java");        verifyFilterFalse("same relative path w/o extension", pattern, "X");        verifyFilterFalse("different relative path w/ extension", pattern, "Y.java");        verifyFilterFalse("different relative path w/o extension", pattern, "Y");        verifyFilterTrue("same absolute path w/ extension", pattern, "C:/workspace/project/X.java");        verifyFilterFalse("same absolute path w/o extension", pattern, "C:/workspace/project/X");        verifyFilterFalse("different absolute path w/ extension", pattern, "C:/workspace/project/Y.java");        verifyFilterFalse("different absolute path w/o extension", pattern, "C:/workspace/project/Y");    }    @Test    public void testFilterAbsoluteWithoutExtension() {        String pattern = "C:/workspace/project/X";        verifyFilterFalse("same relative path w/ extension", pattern, "X.java");        verifyFilterFalse("same relative path w/o extension", pattern, "X");        verifyFilterFalse("different relative path w/ extension", pattern, "Y.java");        verifyFilterFalse("different relative path w/o extension", pattern, "Y");        verifyFilterFalse("same absolute path w/ extension", pattern, "C:/workspace/project/X.java");        verifyFilterTrue("same absolute path w/o extension", pattern, "C:/workspace/project/X");        verifyFilterFalse("different absolute path w/ extension", pattern, "C:/workspace/project/Y.java");        verifyFilterFalse("different absolute path w/o extension", pattern, "C:/workspace/project/Y");    }    @Test    public void testFilterRelativeWithExtension() {        String pattern = ".*X.java";        verifyFilterTrue("same relative path w/ extension", pattern, "X.java");        verifyFilterFalse("same relative path w/o extension", pattern, "X");        verifyFilterFalse("different relative path w/ extension", pattern, "Y.java");        verifyFilterFalse("different relative path w/o extension", pattern, "Y");        verifyFilterTrue("same absolute path w/ extension", pattern, "C:/workspace/project/X.java");        verifyFilterFalse("same absolute path w/o extension", pattern, "C:/workspace/project/X");        verifyFilterFalse("different absolute path w/ extension", pattern, "C:/workspace/project/Y.java");        verifyFilterFalse("different absolute path w/o extension", pattern, "C:/workspace/project/Y");    }    @Test    public void testFilterRelativeWithoutExtension() {        String pattern = ".*X";        verifyFilterFalse("same relative path w/ extension", pattern, "X.java");        verifyFilterTrue("same relative path w/o extension", pattern, "X");        verifyFilterFalse("different relative path w/ extension", pattern, "Y.java");        verifyFilterFalse("different relative path w/o extension", pattern, "Y");        verifyFilterFalse("same absolute path w/ extension", pattern, "C:/workspace/project/X.java");        verifyFilterTrue("same absolute path w/o extension", pattern, "C:/workspace/project/X");        verifyFilterFalse("different absolute path w/ extension", pattern, "C:/workspace/project/Y.java");        verifyFilterFalse("different absolute path w/o extension", pattern, "C:/workspace/project/Y");    }    @Test    public void testEndsWith() {        // These patterns cannot be optimized to use String.endsWith        verifyEndsWith("no literal path", ".*", null);        verifyEndsWith("not ends with", "x", null);        verifyEndsWith("glob on end", ".*XXX.*", null);        verifyEndsWith("special character \\", ".*X\\Y", null);        verifyEndsWith("special character [", ".*X[Y", null);        verifyEndsWith("special character (", ".*X(Y", null);        verifyEndsWith("special character *", ".*X*Y", null);        verifyEndsWith("special character ?", ".*X?Y", null);        verifyEndsWith("special character +", ".*X+Y", null);        verifyEndsWith("special character |", ".*X|Y", null);        verifyEndsWith("special character {", ".*X{Y", null);        verifyEndsWith("special character $", ".*X$Y", null);        verifyEndsWith("too many .", ".*X.Y.java", null);        // These patterns can be optimized to use String.endsWith        verifyEndsWith("unescaped .", ".*X.java", "X.java");        verifyEndsWith("escaped .", ".*X\\.java", "X.java");        verifyEndsWith("no extension", ".*X", "X");        verifyEndsWith("begin anchor, unescaped .", "^.*X.java", "X.java");        verifyEndsWith("begin anchor, escaped .", "^.*X\\.java", "X.java");        verifyEndsWith("begin anchor, no extension", "^.*X", "X");        verifyEndsWith("end anchor, unescaped .", ".*X.java$", "X.java");        verifyEndsWith("end anchor, escaped .", ".*X\\.java$", "X.java");        verifyEndsWith("end anchor, no extension", ".*X$", "X");        verifyEndsWith("begin and end anchors, unescaped .", "^.*X.java$", "X.java");        verifyEndsWith("begin and end anchors, escaped .", "^.*X\\.java$", "X.java");        verifyEndsWith("begin and end anchors, no extension", "^.*X$", "X");    }    private static void verifyFilterTrue(final String message, final String pattern, final String file) {        assertTrue("filter: " + message, new RegexStringFilter(pattern).filter(file));    }    private static void verifyFilterFalse(final String message, final String pattern, final String file) {        assertFalse("filter: " + message, new RegexStringFilter(pattern).filter(file));    }    private static void verifyEndsWith(final String message, final String pattern, final String endsWith) {        assertEquals("endsWith: " + message, endsWith, new RegexStringFilter(pattern).getEndsWith());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(RegexStringFilterTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.util;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.NoSuchElementException;import org.junit.Before;import org.junit.Test;public class CompoundListTest {    private List<String> l1;    private List<String> l2;    private Iterator<String> iterator;    @Before    public void setUp() {        l1 = new ArrayList<>();        l1.add("1");        l1.add("2");        l2 = new ArrayList<>();        l2.add("3");        l2.add("4");        iterator = new CompoundIterator<>(l1.iterator(), l2.iterator());    }    @Test    public void testHappyPath() {        assertTrue(iterator.hasNext());        assertEquals("1", iterator.next());        assertTrue(iterator.hasNext());        assertEquals("2", iterator.next());        assertTrue(iterator.hasNext());        assertEquals("3", iterator.next());        assertTrue(iterator.hasNext());        assertEquals("4", iterator.next());        assertFalse(iterator.hasNext());        assertEquals(2, l1.size());        assertEquals(2, l2.size());    }    @Test    public void testHappyPathRemove() {        assertTrue(iterator.hasNext());        assertEquals("1", iterator.next());        iterator.remove();        assertTrue(iterator.hasNext());        assertEquals("2", iterator.next());        assertTrue(iterator.hasNext());        assertEquals("3", iterator.next());        iterator.remove();        assertTrue(iterator.hasNext());        assertEquals("4", iterator.next());        assertFalse(iterator.hasNext());        assertEquals(1, l1.size());        assertEquals("2", l1.get(0));        assertEquals(1, l2.size());        assertEquals("4", l2.get(0));    }    @Test    public void testEmpty() {        Iterator<?> iterator = new CompoundIterator();        assertFalse(iterator.hasNext());    }    @Test(expected = NoSuchElementException.class)    public void testEmptyBadNext() {        Iterator<?> iterator = new CompoundIterator();        iterator.next();    }    @Test(expected = IllegalStateException.class)    public void testEmptyBadRemove() {        Iterator<?> iterator = new CompoundIterator();        iterator.remove();    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(CompoundListTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.util;import static org.junit.Assert.fail;import java.util.HashMap;import java.util.List;import java.util.Map;import org.junit.Assert;import org.junit.Test;/** * Evaluates all major functionality of the TypeMap class. * * @author Brian Remedios */public class TypeMapTest {    @Test    public void testAddClassOfQ() {        TypeMap map = new TypeMap(2);        map.add(List.class);        try {            map.add(java.awt.List.class);        } catch (IllegalArgumentException ex) {            return; // caught ok        }        fail("Uncaught error inserting type with same root names");    }    @Test    public void testContainsClassOfQ() {        TypeMap map = new TypeMap(2);        map.add(String.class);        map.add(List.class);        Assert.assertTrue(map.contains(String.class));        Assert.assertTrue(map.contains(List.class));        Assert.assertFalse(map.contains(Map.class));    }    @Test    public void testContainsString() {        TypeMap map = new TypeMap(2);        map.add(String.class);        map.add(List.class);        Assert.assertTrue(map.contains("String"));        Assert.assertTrue(map.contains("java.lang.String"));    }    @Test    public void testTypeFor() {        TypeMap map = new TypeMap(2);        map.add(String.class);        map.add(List.class);        Assert.assertTrue(map.typeFor("String") == String.class);        Assert.assertTrue(map.typeFor("java.lang.String") == String.class);        Assert.assertTrue(map.typeFor("List") == List.class);        Assert.assertTrue(map.typeFor("java.util.List") == List.class);    }    @Test    public void testSize() {        TypeMap map = new TypeMap(4);        map.add(String.class);        map.add(HashMap.class);        map.add(Integer.class);        Assert.assertTrue(map.size() == 6);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.util;import static org.junit.Assert.assertEquals;import java.util.Collection;import org.junit.Test;import net.sourceforge.pmd.ReadableDurationTest;/** * * @author Brian Remedios */public class DateTimeUtilTest {    @Test    public void testConversions() {        Collection<Object[]> stringNumberPairs = ReadableDurationTest.data();        for (Object[] stringAndNumber : stringNumberPairs) {            String result = (String) stringAndNumber[0];            Integer milliseconds = (Integer) stringAndNumber[1];            assertEquals(result, DateTimeUtil.asHoursMinutesSeconds(milliseconds));        }    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(DateTimeUtilTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.util;import static org.junit.Assert.assertEquals;import org.junit.Test;public class StringUtilTest {    @Test    public void testReplaceWithOneChar() {        assertEquals("faa", StringUtil.replaceString("foo", 'o', "a"));    }    @Test    public void testReplaceWithMultipleChars() {        assertEquals("faaaa", StringUtil.replaceString("foo", 'o', "aa"));    }    @Test    public void testReplaceStringWithString() {        assertEquals("foo]]&gt;bar", StringUtil.replaceString("foo]]>bar", "]]>", "]]&gt;"));    }    @Test    public void testReplaceStringWithString2() {        assertEquals("replaceString didn't work with a >", "foobar",                StringUtil.replaceString("foobar", "]]>", "]]&gt;"));    }    @Test    public void testReplaceWithNull() {        assertEquals("replaceString didn't work with a char", "f", StringUtil.replaceString("foo", 'o', null));    }    /**     * Usually you would set the system property     * "net.sourceforge.pmd.supportUTF8" to either "no" or "yes", to switch UTF8     * support.     *     * e.g.     * <code>System.setProperty("net.sourceforge.pmd.supportUTF8","yes");</code>     */    @Test    public void testUTF8NotSupported() {        StringBuilder sb = new StringBuilder();        String test = "é";        StringUtil.appendXmlEscaped(sb, test, false);        assertEquals("&#xe9;", sb.toString());    }    @Test    public void testUTF8NotSupportedSurrogates() {        // D8 34 DD 1E -> U+1D11E        StringBuilder sb = new StringBuilder();        String test = new String(new char[] {0xd834, 0xdd1e});        StringUtil.appendXmlEscaped(sb, test, false);        assertEquals("&#x1d11e;", sb.toString());    }    @Test    public void testUTF8Supported() {        StringBuilder sb = new StringBuilder();        String test = "é";        StringUtil.appendXmlEscaped(sb, test, true);        assertEquals("é", sb.toString());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(StringUtilTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.processor;import java.io.ByteArrayInputStream;import java.io.IOException;import java.io.InputStream;import java.util.ArrayList;import java.util.Collections;import java.util.List;import java.util.concurrent.atomic.AtomicInteger;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.PMDConfiguration;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RuleSetFactory;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.ThreadSafeReportListener;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.rule.AbstractRule;import net.sourceforge.pmd.renderers.Renderer;import net.sourceforge.pmd.stat.Metric;import net.sourceforge.pmd.util.datasource.DataSource;public class MultiThreadProcessorTest {    @Test    public void testRulesThreadSafety() {        PMDConfiguration configuration = new PMDConfiguration();        configuration.setRuleSets("rulesets/MultiThreadProcessorTest/basic.xml");        configuration.setThreads(2);        List<DataSource> files = new ArrayList<>();        files.add(new StringDataSource("file1-violation.dummy", "ABC"));        files.add(new StringDataSource("file2-foo.dummy", "DEF"));        SimpleReportListener reportListener = new SimpleReportListener();        RuleContext ctx = new RuleContext();        ctx.getReport().addListener(reportListener);        MultiThreadProcessor processor = new MultiThreadProcessor(configuration);        RuleSetFactory ruleSetFactory = new RuleSetFactory();        processor.processFiles(ruleSetFactory, files, ctx, Collections.<Renderer>emptyList());        // if the rule is not executed, then maybe a        // ConcurrentModificationException happened        Assert.assertEquals("Test rule has not been executed", 2, NotThreadSafeRule.count.get());        // if the violation is not reported, then the rule instances have been        // shared between the threads        Assert.assertEquals("Missing violation", 1, reportListener.violations.get());    }    private static class StringDataSource implements DataSource {        private final String data;        private final String name;        StringDataSource(String name, String data) {            this.name = name;            this.data = data;        }        @Override        public InputStream getInputStream() throws IOException {            return new ByteArrayInputStream(data.getBytes("UTF-8"));        }        @Override        public String getNiceFileName(boolean shortNames, String inputFileName) {            return name;        }    }    public static class NotThreadSafeRule extends AbstractRule {        public static AtomicInteger count = new AtomicInteger(0);        private boolean hasViolation; // this variable will be overridden        // between the threads        @Override        public void apply(List<? extends Node> nodes, RuleContext ctx) {            count.incrementAndGet();            if (ctx.getSourceCodeFilename().contains("violation")) {                hasViolation = true;            } else {                letTheOtherThreadRun(10);                hasViolation = false;            }            letTheOtherThreadRun(100);            if (hasViolation) {                addViolation(ctx, nodes.get(0));            }        }        private void letTheOtherThreadRun(int millis) {            try {                Thread.yield();                Thread.sleep(millis);            } catch (InterruptedException e) {                // ignored            }        }    }    private static class SimpleReportListener implements ThreadSafeReportListener {        public AtomicInteger violations = new AtomicInteger(0);        @Override        public void ruleViolationAdded(RuleViolation ruleViolation) {            violations.incrementAndGet();        }        @Override        public void metricAdded(Metric metric) {        }    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html *//** * <copyright> *  Copyright 1997-2002 BBNT Solutions, LLC *  under sponsorship of the Defense Advanced Research Projects Agency (DARPA). * *  This program is free software; you can redistribute it and/or modify *  it under the terms of the Cougaar Open Source License as published by *  DARPA on the Cougaar Open Source Website (www.cougaar.org). * *  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS *  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS, *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR *  PERFORMANCE OF THE COUGAAR SOFTWARE. * </copyright> * * Created on Aug 26, 2002 */package net.sourceforge.pmd.stat;import static net.sourceforge.pmd.lang.rule.stat.StatisticalRule.MINIMUM_DESCRIPTOR;import static net.sourceforge.pmd.lang.rule.stat.StatisticalRule.SIGMA_DESCRIPTOR;import static net.sourceforge.pmd.lang.rule.stat.StatisticalRule.TOP_SCORE_DESCRIPTOR;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.util.ArrayList;import java.util.Collections;import java.util.Iterator;import java.util.List;import java.util.Random;import org.junit.Before;import org.junit.Ignore;import org.junit.Test;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.lang.DummyLanguageModule;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.ast.DummyNode;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.rule.stat.StatisticalRule;import junit.framework.AssertionFailedError;/** * This class tests the Statistical Rules in PMD. * * <p>The idea is, that we fill up 999 datapoints into the Stat Rule, and then * throw random parameters at it.</p> * * <p>The three parameters which are checked are: sigma - # Sigmas over the mean. * topscore - Only the top 5 or so items. minimum - Only things of score 10 or * better</p> * * <p>When more than one parameter is lumped together, then we expect the one which * would return the fewest to determine what gets sent back.</p> * * <p>So, we throw each collection of parameters, where each one is a different * order into the system. We check the results off of what the smallest value * should be.</p> * * <p>If you are going to work with StatisticalRule any, please bump the * "NUM_TESTS" number up to something like 128. That way you are more likely to * identify problems. It is set low now to make building and running tests * easier (when we aren't touching the file.)</p> * * <p>Note also, that when verifying the Sigma, I wasn't quite able to determine * how many results it would return (it would vary from -2 to 2 of what I * expected.) That is what the delta parameter on the verify method takes. If * you can figure it out exactly, (without stealing code from the StatRule) then * feel free to change it and tighten the deltas.</p> */public class StatisticalRuleTest {    private static final int POINTS = 100;    private DataPoint[] points = new DataPoint[POINTS];    private MockStatisticalRule ruleUnderTest = null;    // FIXME - why/when was this added. It was never set.    private String testName = "";    private Random random = new Random();    public static final double MAX_MINIMUM = POINTS;    public static final double NO_MINIMUM = -1.0;    public static final double MAX_SIGMA = 5.0;    public static final double NO_SIGMA = -1.0;    public static final int MIN_TOPSCORE = 0;    public static final int NO_TOPSCORE = -1;    public static final double MEAN = 49.5;    public static final double SIGMA = 29.0115;    public static final int NUM_TESTS = 1;    public static final double DELTA = 0.005;    @Before    public void setUp() {        ruleUnderTest = new MockStatisticalRule();        if (testName.endsWith("0")) {            for (int i = 0; i < POINTS; i++) {                points[i] = new DataPoint();                points[i].setScore(1.0 * i);                DummyNode s = new DummyNode(1);                s.testingOnlySetBeginLine(i);                s.testingOnlySetBeginColumn(1);                points[i].setNode(s);                points[i].setMessage("DataPoint[" + Integer.toString(i) + "]");                ruleUnderTest.addDataPoint(points[i]);            }        } else if (testName.endsWith("1")) {            for (int i = POINTS - 1; i >= 0; i--) {                points[i] = new DataPoint();                points[i].setScore(1.0 * i);                DummyNode s = new DummyNode(1);                s.testingOnlySetBeginLine(i);                s.testingOnlySetBeginColumn(1);                points[i].setNode(s);                points[i].setMessage("DataPoint[" + Integer.toString(i) + "]");                ruleUnderTest.addDataPoint(points[i]);            }        } else {            List<DataPoint> lPoints = new ArrayList<>();            for (int i = 0; i < POINTS; i++) {                points[i] = new DataPoint();                points[i].setScore(1.0 * i);                DummyNode s = new DummyNode(1);                s.testingOnlySetBeginLine(i);                s.testingOnlySetBeginColumn(1);                s.testingOnlySetBeginColumn(1);                points[i].setNode(s);                points[i].setMessage("DataPoint[" + Integer.toString(i) + "]");                lPoints.add(points[i]);            }            Collections.shuffle(lPoints);            for (int i = 0; i < POINTS; i++) {                ruleUnderTest.addDataPoint(lPoints.get(i));            }        }    }    /**     * This test verifies that the Stat rule creates a Metric, with the proper     * values.     */    @Test    public void testMetrics() {        Report report = makeReport(ruleUnderTest);        Iterator<Metric> metrics = report.metrics();        assertTrue(metrics.hasNext());        Metric m = metrics.next();        assertEquals("net.sourceforge.pmd.stat.MockStatisticalRule", m.getMetricName());        assertEquals(0.0, m.getLowValue(), 0.05);        assertEquals(POINTS - 1.0, m.getHighValue(), 0.05);        assertEquals(MEAN, m.getAverage(), 0.05);        assertEquals(SIGMA, m.getStandardDeviation(), 0.05);    }    /**     * This returns a Random value for Sigma which will return some values.     */    public double randomSigma() {        return random.nextDouble() * 1.0;    }    /**     * This returns a Random value for Sigma which value is greater than the     * parameter.     */    public double randomSigma(int minimum) {        double minSigma = ((POINTS - 1 - minimum) - MEAN) / SIGMA;        if ((minSigma <= 0) || (minSigma > 2)) {            return randomSigma();        }        return minSigma + (random.nextDouble() * (2 - minSigma));    }    /**     * This returns the expected number of results when the Sigma rating is the     * smallest.     */    public int expectedSigma(double sigma) {        long expectedMin = Math.round(MEAN + (sigma * SIGMA));        if (((POINTS - 1) - expectedMin) < 0) {            return 0;        }        return (POINTS - 1) - (int) expectedMin;    }    /**     * This generates a random minimum value for testing.     */    public double randomMinimum() {        return random.nextDouble() * (POINTS - 1);    }    /**     * This generates a random minimum value for which fewer results would be     * returned.     */    public double randomMinimum(int minimum) {        double diffTarget = 1.0 * (POINTS - 1 - minimum);        return (random.nextDouble() * minimum) + diffTarget;    }    /**     * This returns the expected number of reports.     *     * <p>If the Minimum comes in at 521.569 then we expect 522, 523, ... 999 will     * pass.</p>     */    public int expectedMinimum(double minimum) {        Double d = Double.valueOf(minimum);        return POINTS - 1 - d.intValue();    }    @Test    public void testExpectedMinimum() {        for (int i = 0; i < POINTS - 1; i++) {            assertEquals("Integer Min", POINTS - 1 - i, expectedMinimum(i * 1.0));            assertEquals("Double Min", POINTS - 1 - i, expectedMinimum((i * 1.0) + 0.5));        }    }    /**     * This returns a random value for Top Score.     */    public int randomTopScore() {        return random.nextInt(POINTS - 1);    }    /**     * This will return a random value for the Top Score which will return more     * than the minimum provided.     */    public int randomTopScore(double target) {        if (target < 0) {            return 0;        }        return random.nextInt(Double.valueOf(target).intValue());    }    /**     * This will return the expected number of results with the given Top Score.     */    public int expectedTopScore(int target) {        return target;    }    // Test Single Datapoint    @Test    public void testSingleDatapoint() {        StatisticalRule rule = new MockStatisticalRule();        DataPoint point = new DataPoint();        point.setScore(POINTS + 1.0);        DummyNode s = new DummyNode(1);        s.testingOnlySetBeginLine(POINTS + 1);        s.testingOnlySetBeginColumn(1);        point.setNode(s);        point.setMessage("SingleDataPoint");        rule.setProperty(MINIMUM_DESCRIPTOR, (double) POINTS);        rule.addDataPoint(point);        Report report = makeReport(rule);        assertEquals("Expecting only one result", 1, report.size());    }    // Okay, we have three properties we need to    // test in Combination:    // S = Sigma    // T = Top Score    // M = Minimum    //    // They are listed in decreasing order of what    // to expect.    //    // Thus testSM() should have the Sigma less than    // the minimum, so we expect the Minimum # of results.    //    @Test    public void testS() {        verifyResults(MAX_SIGMA, NO_MINIMUM, NO_TOPSCORE, 0, 2);        for (int i = 0; i < NUM_TESTS; i++) {            double sigma = randomSigma();            verifyResults(sigma, -1.0, -1, expectedSigma(sigma), 2);        }    }    @Test    public void testS1() {        testS();    }    @Test    public void testS2() {        testS();    }    @Test    public void testS3() {        testS();    }    @Test    public void testS4() {        testS();    }    @Test    public void testS5() {        testS();    }    @Test    public void testT() {        verifyResults(NO_SIGMA, NO_MINIMUM, MIN_TOPSCORE, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            int topScore = randomTopScore();            verifyResults(-1.0, -1.0, topScore, expectedTopScore(topScore), 0);        }    }    @Test    public void testT1() {        testT();    }    @Test    public void testT2() {        testT();    }    @Test    public void testT3() {        testT();    }    @Test    public void testT4() {        testT();    }    @Test    public void testT5() {        testT();    }    @Test    public void testM() {        verifyResults(NO_SIGMA, MAX_MINIMUM, NO_TOPSCORE, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            double minimum = randomMinimum();            verifyResults(-1.0, minimum, -1, expectedMinimum(minimum), 0);        }    }    @Test    public void testM1() {        testM();    }    @Test    public void testM2() {        testM();    }    @Test    public void testM3() {        testM();    }    @Test    public void testM4() {        testM();    }    @Test    public void testM5() {        testM();    }    @Test    public void testST() {        verifyResults(randomSigma(), NO_MINIMUM, MIN_TOPSCORE, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            double sigma = randomSigma();            int topScore = randomTopScore(expectedSigma(sigma));            verifyResults(sigma, NO_MINIMUM, topScore, expectedTopScore(topScore), 0);        }    }    @Test    public void testST1() {        testST();    }    @Test    public void testST2() {        testST();    }    @Test    public void testST3() {        testST();    }    @Test    public void testST4() {        testST();    }    @Test    public void testST5() {        testST();    }    @Test    public void testTS() {        verifyResults(MAX_SIGMA, NO_MINIMUM, randomTopScore(), 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            int topScore = randomTopScore();            double sigma = randomSigma(expectedTopScore(topScore));            verifyResults(sigma, -1.0, topScore, expectedSigma(sigma), 2);        }    }    @Test    public void testTS1() {        testTS();    }    @Test    public void testTS2() {        testTS();    }    @Test    public void testTS3() {        testTS();    }    @Test    public void testTS4() {        testTS();    }    @Test    public void testTS5() {        testTS();    }    @Test    public void testSM() {        verifyResults(randomSigma(), MAX_MINIMUM, NO_TOPSCORE, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            double sigma = randomSigma();            double minimum = randomMinimum(expectedSigma(sigma));            verifyResults(sigma, minimum, -1, expectedMinimum(minimum), 0);        }    }    @Test    public void testSM1() {        testSM();    }    @Test    public void testSM2() {        testSM();    }    @Test    public void testSM3() {        testSM();    }    @Test    public void testSM4() {        testSM();    }    @Test    public void testSM5() {        testSM();    }    @Test    public void testMS() {        verifyResults(MAX_SIGMA, randomMinimum(), NO_TOPSCORE, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            double minimum = randomMinimum();            double sigma = randomSigma(expectedMinimum(minimum));            verifyResults(sigma, minimum, -1, expectedSigma(sigma), 2);        }    }    @Test    public void testMS1() {        testMS();    }    @Test    public void testMS2() {        testMS();    }    @Test    public void testMS3() {        testMS();    }    @Test    public void testMS4() {        testMS();    }    @Test    public void testMS5() {        testMS();    }    @Test    public void testTM() {        verifyResults(NO_SIGMA, MAX_MINIMUM, randomTopScore(), 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            int topScore = randomTopScore();            double minimum = randomMinimum(expectedTopScore(topScore));            verifyResults(NO_SIGMA, minimum, topScore, expectedMinimum(minimum), 0);        }    }    @Test    public void testTM1() {        testTM();    }    @Test    public void testTM2() {        testTM();    }    @Test    public void testTM3() {        testTM();    }    @Test    public void testTM4() {        testTM();    }    @Test    public void testTM5() {        testTM();    }    @Test    public void testMT() {        verifyResults(NO_SIGMA, randomMinimum(), MIN_TOPSCORE, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            double minimum = randomMinimum();            int topScore = randomTopScore(expectedMinimum(minimum));            verifyResults(NO_SIGMA, minimum, topScore, expectedTopScore(topScore), 0);        }    }    @Test    public void testMT1() {        testMT();    }    @Test    public void testMT2() {        testMT();    }    @Test    public void testMT3() {        testMT();    }    @Test    public void testMT4() {        testMT();    }    @Test    public void testMT5() {        testMT();    }    @Test    public void testSTM() {        double sigma = randomSigma();        verifyResults(sigma, MAX_MINIMUM, randomTopScore(expectedSigma(sigma)), 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            sigma = randomSigma();            int topScore = randomTopScore(expectedSigma(sigma));            double minimum = randomMinimum(expectedTopScore(topScore));            verifyResults(sigma, minimum, topScore, expectedMinimum(minimum), 0);        }    }    @Test    public void testSTM1() {        testSTM();    }    @Test    public void testSTM2() {        testSTM();    }    @Test    public void testSTM3() {        testSTM();    }    @Test    public void testSTM4() {        testSTM();    }    @Test    public void testSTM5() {        testSTM();    }    @Test    public void testSMT() {        double sigma = randomSigma();        verifyResults(sigma, randomMinimum(expectedSigma(sigma)), MIN_TOPSCORE, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            sigma = randomSigma();            double minimum = randomMinimum(expectedSigma(sigma));            int topScore = randomTopScore(expectedMinimum(minimum));            verifyResults(sigma, minimum, topScore, expectedTopScore(topScore), 0);        }    }    @Test    public void testSMT1() {        testSMT();    }    @Test    public void testSMT2() {        testSMT();    }    @Test    public void testSMT3() {        testSMT();    }    @Test    public void testSMT4() {        testSMT();    }    @Test    public void testSMT5() {        testSMT();    }    @Test    // because of random failures during continuous integration,    // tests are disabled in regress mode until somebody figures out    // what the tests are supposed to measure and why they sometime fail    @Ignore("random failures during continuous integration")    public void testTSM() {        int topScore = randomTopScore();        verifyResults(randomSigma(expectedTopScore(topScore)), MAX_MINIMUM, topScore, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            topScore = randomTopScore();            double sigma = randomSigma(expectedTopScore(topScore));            double minimum = randomMinimum(expectedSigma(sigma));            verifyResults(sigma, minimum, topScore, expectedMinimum(minimum), 0);        }    }    @Test    @Ignore("random failures during continuous integration")    public void testTSM1() {        testTSM();    }    @Test    @Ignore("random failures during continuous integration")    public void testTSM2() {        testTSM();    }    @Test    @Ignore("random failures during continuous integration")    public void testTSM3() {        testTSM();    }    @Test    @Ignore("random failures during continuous integration")    public void testTSM4() {        testTSM();    }    @Test    @Ignore("random failures during continuous integration")    public void testTSM5() {        testTSM();    }    @Test    public void testTMS() {        int topScore = randomTopScore();        verifyResults(MAX_SIGMA, randomMinimum(expectedTopScore(topScore)), topScore, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            topScore = randomTopScore();            double minimum = randomMinimum(expectedTopScore(topScore));            double sigma = randomSigma(expectedMinimum(minimum));            verifyResults(sigma, minimum, topScore, expectedSigma(sigma), 2);        }    }    @Test    public void testTMS1() {        testTMS();    }    @Test    public void testTMS2() {        testTMS();    }    @Test    public void testTMS3() {        testTMS();    }    @Test    public void testTMS4() {        testTMS();    }    @Test    public void testTMS5() {        testTMS();    }    /**     * Verifies what happens when you pass these parameters into the thing.     * DELTA is the amount of error allowed. Usually DELTA is only used for     * Sigma, as we really can't calculate it exactly.     */    public void verifyResults(double sigma, double minimum, int topScore, int expected, int delta) {        try {            setUp();            if (sigma >= 0) {                ruleUnderTest.setProperty(SIGMA_DESCRIPTOR, sigma);            }            if (minimum >= 0) {                ruleUnderTest.setProperty(MINIMUM_DESCRIPTOR, minimum);            }            if (topScore >= 0) {                ruleUnderTest.setProperty(TOP_SCORE_DESCRIPTOR, topScore);            }            Report report = makeReport(ruleUnderTest);            if (delta == 0) {                assertEquals(                        "Unexpected number of results: sigma= " + Double.toString(sigma) + " min= "                                + Double.toString(minimum) + " topscore= " + Integer.toString(topScore),                        expected, report.size());            } else {                String assertStr = "Unexpected number of results: sigma= " + Double.toString(sigma) + " min= "                        + Double.toString(minimum) + " topscore= " + Integer.toString(topScore) + " expected= "                        + Integer.toString(expected) + " +/- " + Integer.toString(delta) + " actual-result= "                        + report.size();                assertTrue(assertStr, report.size() >= (expected - delta));                assertTrue(assertStr, report.size() <= (expected + delta));            }        } catch (AssertionFailedError afe) {            System.err.println("******** " + testName + " ***********");            if (sigma != NO_SIGMA) {                System.err.println(                        "SIGMA: " + Double.toString(sigma) + " EXPECT: " + Integer.toString(expectedSigma(sigma)));            }            if (minimum != NO_MINIMUM) {                System.err.println(                        "MIN: " + Double.toString(minimum) + " EXPECT: " + Integer.toString(expectedMinimum(minimum)));            }            if (topScore != NO_TOPSCORE) {                System.err.println("TOP: " + Integer.toString(topScore) + " EXPECT: "                        + Integer.toString(expectedTopScore(topScore)));            }            throw afe;        }    }    public Report makeReport(Rule rule) {        List<Node> list = new ArrayList<>();        Report report = new Report();        RuleContext ctx = new RuleContext();        ctx.setReport(report);        ctx.setSourceCodeFilename(testName);        ctx.setLanguageVersion(LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getDefaultVersion());        rule.apply(list, ctx);        return report;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html *//** * <copyright> *  Copyright 1997-2002 BBNT Solutions, LLC *  under sponsorship of the Defense Advanced Research Projects Agency (DARPA). * *  This program is free software; you can redistribute it and/or modify *  it under the terms of the Cougaar Open Source License as published by *  DARPA on the Cougaar Open Source Website (www.cougaar.org). * *  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS *  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS, *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR *  PERFORMANCE OF THE COUGAAR SOFTWARE. * </copyright> * * Created on Aug 26, 2002 */package net.sourceforge.pmd.stat;import static org.junit.Assert.assertEquals;import java.util.Random;import org.junit.Test;/** * @author David Dixon-Peugh */public class MetricTest {    private String testName = "";    private Random random = new Random();    @Test    public void testGetMetricName() {        Metric metric = new Metric(testName, 0, 0.0, 0.0, 0.0, 0.0, 0.0);        assertEquals(testName, metric.getMetricName());    }    @Test    public void testGetCount() {        int count = random.nextInt();        Metric metric = new Metric(testName, count, 0.0, 0.0, 0.0, 0.0, 0.0);        assertEquals(count, metric.getCount());    }    @Test    public void testGetTotal() {        double total = random.nextDouble();        Metric metric = new Metric(testName, 0, total, 0.0, 0.0, 0.0, 0.0);        assertEquals(total, metric.getTotal(), 0.05);    }    @Test    public void testGetLowValue() {        double low = random.nextDouble();        Metric metric = new Metric(testName, 0, 0.0, low, 0.0, 0.0, 0.0);        assertEquals(low, metric.getLowValue(), 0.05);    }    @Test    public void testGetHighValue() {        double high = random.nextDouble();        Metric metric = new Metric(testName, 0, 0.0, 0.0, high, 0.0, 0.0);        assertEquals(high, metric.getHighValue(), 0.05);    }    @Test    public void testGetAverage() {        double mean = random.nextDouble();        Metric metric = new Metric(testName, 0, 0.0, 0.0, 0.0, mean, 0.0);        assertEquals(mean, metric.getAverage(), 0.05);    }    @Test    public void testGetStandardDeviation() {        double stdev = random.nextDouble();        Metric metric = new Metric(testName, 0, 0.0, 0.0, 0.0, 0.0, stdev);        assertEquals(stdev, metric.getStandardDeviation(), 0.05);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cache;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertTrue;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.when;import java.io.File;import java.io.IOException;import java.net.MalformedURLException;import java.net.URL;import java.net.URLClassLoader;import java.nio.file.Files;import java.nio.file.Paths;import java.util.Collections;import java.util.List;import org.junit.Before;import org.junit.Rule;import org.junit.Test;import org.junit.rules.TemporaryFolder;import org.mockito.Mockito;import net.sourceforge.pmd.RuleSets;import net.sourceforge.pmd.RuleViolation;public class FileAnalysisCacheTest {        @Rule    public TemporaryFolder tempFolder = new TemporaryFolder();        private File unexistingCacheFile;    private File newCacheFile;    private File emptyCacheFile;        private File sourceFile;        @Before    public void setUp() throws IOException {        unexistingCacheFile = new File(tempFolder.getRoot(), "non-existing-file.cache");        newCacheFile = new File(tempFolder.getRoot(), "pmd-analysis.cache");        emptyCacheFile = tempFolder.newFile();        sourceFile = tempFolder.newFile("Source.java");    }    @Test    public void testLoadFromNonExistingFile() throws IOException {        final FileAnalysisCache cache = new FileAnalysisCache(unexistingCacheFile);        assertNotNull("Cache creation from non existing file failed.", cache);    }        @Test    public void testLoadFromEmptyFile() throws IOException {        final FileAnalysisCache cache = new FileAnalysisCache(emptyCacheFile);        assertNotNull("Cache creation from empty file failed.", cache);    }        @Test    public void testLoadFromDirectoryShouldntThrow() throws IOException {        new FileAnalysisCache(tempFolder.getRoot());    }        @Test    public void testLoadFromUnreadableFileShouldntThrow() throws IOException {        emptyCacheFile.setReadable(false);        new FileAnalysisCache(emptyCacheFile);    }    @Test    public void testStoreCreatesFile() {        final FileAnalysisCache cache = new FileAnalysisCache(unexistingCacheFile);        cache.persist();        assertTrue("Cache file doesn't exist after store", unexistingCacheFile.exists());    }    @Test    public void testStoreOnUnwritableFileShouldntThrow() {        emptyCacheFile.setWritable(false);        final FileAnalysisCache cache = new FileAnalysisCache(emptyCacheFile);        cache.persist();    }    @Test    public void testStorePersistsFilesWithViolations() {        final FileAnalysisCache cache = new FileAnalysisCache(newCacheFile);        cache.isUpToDate(sourceFile);        final RuleViolation rv = mock(RuleViolation.class, Mockito.RETURNS_SMART_NULLS);        when(rv.getFilename()).thenReturn(sourceFile.getPath());        final net.sourceforge.pmd.Rule rule = mock(net.sourceforge.pmd.Rule.class, Mockito.RETURNS_SMART_NULLS);        when(rv.getRule()).thenReturn(rule);        cache.ruleViolationAdded(rv);        cache.persist();        final FileAnalysisCache reloadedCache = new FileAnalysisCache(newCacheFile);        assertTrue("Cache believes unmodified file with violations is not up to date",                reloadedCache.isUpToDate(sourceFile));                final List<RuleViolation> cachedViolations = reloadedCache.getCachedViolations(sourceFile);        assertEquals("Cached rule violations count mismatch", 1, cachedViolations.size());    }    @Test    public void testCacheValidityWithNoChanges() {        final RuleSets rs = mock(RuleSets.class);        final URLClassLoader cl = mock(URLClassLoader.class);        setupCacheWithFiles(newCacheFile, rs, cl, sourceFile);        final FileAnalysisCache reloadedCache = new FileAnalysisCache(newCacheFile);        reloadedCache.checkValidity(rs, cl);        assertTrue("Cache believes unmodified file is not up to date without ruleset / classpath changes",                reloadedCache.isUpToDate(sourceFile));    }    @Test    public void testRulesetChangeInvalidatesCache() {        final RuleSets rs = mock(RuleSets.class);        final URLClassLoader cl = mock(URLClassLoader.class);                setupCacheWithFiles(newCacheFile, rs, cl, sourceFile);                final FileAnalysisCache reloadedCache = new FileAnalysisCache(newCacheFile);        when(rs.getChecksum()).thenReturn(1L);        reloadedCache.checkValidity(rs, cl);        assertFalse("Cache believes unmodified file is up to date after ruleset changed",                reloadedCache.isUpToDate(sourceFile));    }        @Test    public void testClasspathChangeWithoutDFAorTypeResolutionDoesNotInvalidatesCache() throws MalformedURLException, IOException {        final RuleSets rs = mock(RuleSets.class);        final URLClassLoader cl = mock(URLClassLoader.class);                setupCacheWithFiles(newCacheFile, rs, cl, sourceFile);                final FileAnalysisCache reloadedCache = new FileAnalysisCache(newCacheFile);        when(cl.getURLs()).thenReturn(new URL[] { tempFolder.newFile().toURI().toURL(), });        reloadedCache.checkValidity(rs, cl);        assertTrue("Cache believes unmodified file is not up to date after classpath changed when no rule cares",                reloadedCache.isUpToDate(sourceFile));    }    @Test    public void testClasspathChangeInvalidatesCache() throws MalformedURLException, IOException {        final RuleSets rs = mock(RuleSets.class);        final URLClassLoader cl = mock(URLClassLoader.class);                setupCacheWithFiles(newCacheFile, rs, cl, sourceFile);                final FileAnalysisCache reloadedCache = new FileAnalysisCache(newCacheFile);        when(cl.getURLs()).thenReturn(new URL[] { tempFolder.newFile().toURI().toURL(), });        final net.sourceforge.pmd.Rule r = mock(net.sourceforge.pmd.Rule.class);        when(r.usesDFA()).thenReturn(true);        when(rs.getAllRules()).thenReturn(Collections.singleton(r));        reloadedCache.checkValidity(rs, cl);        assertFalse("Cache believes unmodified file is up to date after classpath changed",                reloadedCache.isUpToDate(sourceFile));    }    @Test    public void testUnknownFileIsNotUpToDate() throws IOException {        final FileAnalysisCache cache = new FileAnalysisCache(newCacheFile);        assertFalse("Cache believes an unknown file is up to date",                cache.isUpToDate(sourceFile));    }    @Test    public void testFileIsUpToDate() throws IOException {        setupCacheWithFiles(newCacheFile, mock(RuleSets.class), mock(ClassLoader.class), sourceFile);                final FileAnalysisCache cache = new FileAnalysisCache(newCacheFile);        assertTrue("Cache believes a known, unchanged file is not up to date",                cache.isUpToDate(sourceFile));    }        @Test    public void testFileIsNotUpToDateWhenEdited() throws IOException {        setupCacheWithFiles(newCacheFile, mock(RuleSets.class), mock(ClassLoader.class), sourceFile);                // Edit the file        Files.write(Paths.get(sourceFile.getAbsolutePath()), "some text".getBytes());                final FileAnalysisCache cache = new FileAnalysisCache(newCacheFile);        assertFalse("Cache believes a known, changed file is up to date",                cache.isUpToDate(sourceFile));    }    private void setupCacheWithFiles(final File cacheFile, final RuleSets ruleSets,            final ClassLoader classLoader, final File... files) {        // Setup a cache file with an entry for an empty Source.java with no violations        final FileAnalysisCache cache = new FileAnalysisCache(cacheFile);        cache.checkValidity(ruleSets, classLoader);                for (final File f : files) {            cache.isUpToDate(f);        }        cache.persist();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.dfa.report;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.when;import org.junit.Test;import net.sourceforge.pmd.RuleViolation;/** * @author Philip Graf */public final class ViolationNodeTest {    /**     * Verifies that two violations nodes with equal     * {@code filename, beginLine, endLine, beginColumn, endColumn} and     * {@code variableName} are equal.     */    @Test    public void testEqualsNodeWithTwoEqualViolations() {        final ViolationNode node1 = createViolationNode("Foo.java", 1, 1, 5, 15, "");        final ViolationNode node2 = createViolationNode("Foo.java", 1, 1, 5, 15, "");        assertTrue("Two equal violations should result in equal nodes", node1.equalsNode(node2));    }    /**     * Verifies that two violations nodes with different {@code filename} are     * not equal.     */    @Test    public void testEqualsNodeWithTwoDifferentViolationsDifferentFilename() {        final ViolationNode node1 = createViolationNode("Foo.java", 1, 1, 5, 15, "");        final ViolationNode node2 = createViolationNode("Bar.java", 1, 1, 5, 15, "");        assertFalse("Two violations with different filename should result in not equal nodes", node1.equalsNode(node2));    }    /**     * Verifies that two violations nodes with different {@code beginLine} are     * not equal.     */    @Test    public void testEqualsNodeWithTwoDifferentViolationsDifferentBeginLine() {        final ViolationNode node1 = createViolationNode("Foo.java", 1, 2, 5, 15, "");        final ViolationNode node2 = createViolationNode("Foo.java", 2, 2, 5, 15, "");        assertFalse("Two violations with different beginLine should result in not equal nodes",                node1.equalsNode(node2));    }    /**     * Verifies that two violations nodes with different {@code endLine} are not     * equal.     */    @Test    public void testEqualsNodeWithTwoDifferentViolationsDifferentEndLine() {        final ViolationNode node1 = createViolationNode("Foo.java", 1, 1, 5, 15, "");        final ViolationNode node2 = createViolationNode("Foo.java", 1, 2, 5, 15, "");        assertFalse("Two violations with different endLine should result in not equal nodes", node1.equalsNode(node2));    }    /**     * Verifies that two violations nodes with different {@code beginColumn} are     * not equal.     */    @Test    public void testEqualsNodeWithTwoDifferentViolationsDifferentBeginColumn() {        final ViolationNode node1 = createViolationNode("Foo.java", 1, 1, 5, 15, "");        final ViolationNode node2 = createViolationNode("Foo.java", 1, 1, 7, 15, "");        assertFalse("Two violations with different beginColumn should result in not equal nodes",                node1.equalsNode(node2));    }    /**     * Verifies that two violations nodes with different {@code endColumn} are     * not equal.     */    @Test    public void testEqualsNodeWithTwoDifferentViolationsDifferentEndColumn() {        final ViolationNode node1 = createViolationNode("Foo.java", 1, 1, 5, 15, "");        final ViolationNode node2 = createViolationNode("Foo.java", 1, 1, 5, 17, "");        assertFalse("Two violations with different end column should result in not equal nodes",                node1.equalsNode(node2));    }    /**     * Verifies that two violations with different {@code variableName} are not     * equal.     */    @Test    public void testEqualsNodeWithTwoDifferentViolationsDifferentVariableName() {        final ViolationNode node1 = createViolationNode("Foo.java", 1, 1, 5, 15, "a");        final ViolationNode node2 = createViolationNode("Foo.java", 1, 1, 5, 15, "b");        assertFalse("Two violations with different variableName should result in not equal nodes",                node1.equalsNode(node2));    }    private ViolationNode createViolationNode(final String filename, final int beginLine, final int endLine,            final int beginColumn, final int endColumn, final String variableName) {        final RuleViolation violation = mock(RuleViolation.class);        when(violation.getFilename()).thenReturn(filename);        when(violation.getBeginLine()).thenReturn(beginLine);        when(violation.getEndLine()).thenReturn(endLine);        when(violation.getBeginColumn()).thenReturn(beginColumn);        when(violation.getEndColumn()).thenReturn(endColumn);        when(violation.getVariableName()).thenReturn(variableName);        return new ViolationNode(violation);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.symboltable;import static org.junit.Assert.assertEquals;import java.util.ArrayList;import java.util.List;import org.junit.Test;import net.sourceforge.pmd.util.SearchFunction;public class ApplierTest {    private static class MyFunction implements SearchFunction<Object> {        private int numCallbacks = 0;        private final int maxCallbacks;        MyFunction(int maxCallbacks) {            this.maxCallbacks = maxCallbacks;        }        @Override        public boolean applyTo(Object o) {            this.numCallbacks++;            return numCallbacks < maxCallbacks;        }        public int getNumCallbacks() {            return this.numCallbacks;        }    }    @Test    public void testSimple() {        MyFunction f = new MyFunction(Integer.MAX_VALUE);        List<Object> l = new ArrayList<>();        l.add(new Object());        l.add(new Object());        l.add(new Object());        Applier.apply(f, l.iterator());        assertEquals(l.size(), f.getNumCallbacks());    }    @Test    public void testLimit() {        MyFunction f = new MyFunction(2);        List<Object> l = new ArrayList<>();        l.add(new Object());        l.add(new Object());        l.add(new Object());        Applier.apply(f, l.iterator());        assertEquals(2, f.getNumCallbacks());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ApplierTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.ast.xpath;import java.util.HashMap;import java.util.Map;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.lang.ast.DummyNode;/** * Unit test for {@link AttributeAxisIterator} */public class AttributeAxisIteratorTest {    /**     * Test hasNext and next.     */    @Test    public void testAttributeAxisIterator() {        DummyNode dummyNode = new DummyNode(1);        dummyNode.testingOnlySetBeginLine(1);        dummyNode.testingOnlySetBeginColumn(1);        AttributeAxisIterator it = new AttributeAxisIterator(dummyNode);        Map<String, Attribute> atts = new HashMap<>();        while (it.hasNext()) {            Attribute attribute = it.next();            atts.put(attribute.getName(), attribute);        }        Assert.assertEquals(7, atts.size());        Assert.assertTrue(atts.containsKey("BeginColumn"));        Assert.assertTrue(atts.containsKey("BeginLine"));        Assert.assertTrue(atts.containsKey("FindBoundary"));        Assert.assertTrue(atts.containsKey("Image"));        Assert.assertTrue(atts.containsKey("SingleLine"));        Assert.assertTrue(atts.containsKey("EndColumn"));        Assert.assertTrue(atts.containsKey("EndLine"));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.ast.xpath;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertSame;import static org.junit.Assert.fail;import org.junit.Test;import net.sourceforge.pmd.lang.ast.DummyNode;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.ast.RootNode;/** * Unit test for {@link DocumentNavigator} */public class DocumentNavigatorTest {    private static class DummyRootNode extends DummyNode implements RootNode {        DummyRootNode(int id) {            super(id);        }    }    @Test    public void getDocumentNode() {        DocumentNavigator nav = new DocumentNavigator();        try {            nav.getDocumentNode(null);            fail();        } catch (RuntimeException e) {            assertNotNull(e);        }        Node root = new DummyRootNode(1);        Node n = new DummyNode(1);        root.jjtAddChild(n, 0);        n.jjtSetParent(root);        assertSame(root, nav.getDocumentNode(n));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.ast;import static org.junit.Assert.assertEquals;import org.junit.Test;/** * Unit test for {@link SourceCodePositioner}. */public class SourceCodePositionerTest {    private static final String SOURCE_CODE = "abcd\ndefghi\n\njklmn\nopq";    /**     * Tests whether the lines and columns are calculated correctly.     */    @Test    public void testLineNumberFromOffset() {        SourceCodePositioner positioner = new SourceCodePositioner(SOURCE_CODE);        int offset;        offset = SOURCE_CODE.indexOf('a');        assertEquals(1, positioner.lineNumberFromOffset(offset));        assertEquals(1, positioner.columnFromOffset(1, offset));        offset = SOURCE_CODE.indexOf('b');        assertEquals(1, positioner.lineNumberFromOffset(offset));        assertEquals(2, positioner.columnFromOffset(1, offset));        offset = SOURCE_CODE.indexOf('e');        assertEquals(2, positioner.lineNumberFromOffset(offset));        assertEquals(2, positioner.columnFromOffset(2, offset));        offset = SOURCE_CODE.indexOf('q');        assertEquals(5, positioner.lineNumberFromOffset(offset));        assertEquals(3, positioner.columnFromOffset(5, offset));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang;import org.junit.Assert;import org.junit.Test;public class LanguageRegistryTest {    @Test    public void getDefaultLanguageTest() {        Language defaultLanguage = LanguageRegistry.getDefaultLanguage();        Assert.assertNotNull(defaultLanguage);        // as we don't have java language in this test, we get the first        // available language now -> DummyLanguage        Assert.assertSame(DummyLanguageModule.class, defaultLanguage.getClass());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang;import org.junit.Assert;import org.junit.Test;public class BaseLanguageModuleTest {    @Test    public void testHashCodeEquals() {        Language l1 = new DummyLanguageModule();        Language l1a = new DummyLanguageModule();        Language l2 = new Dummy2LanguageModule();        Assert.assertEquals(l1.hashCode(), l1a.hashCode());        Assert.assertNotEquals(l1.hashCode(), l2.hashCode());        Assert.assertEquals(l1, l1a);        Assert.assertNotEquals(l1, l2);    }    @Test    public void testCompareTo() {        Language l1 = new DummyLanguageModule();        Language l2 = new Dummy2LanguageModule();        Assert.assertTrue(l1.compareTo(l2) < 0);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.properties;import java.util.Comparator;import java.util.HashMap;import java.util.Map;import java.util.Observer;import java.util.Set;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.TypeMultiProperty;import net.sourceforge.pmd.lang.rule.properties.TypeProperty;/** * Evaluates the functionality of the TypeProperty descriptor by testing its * ability to catch creation errors (illegal args), flag invalid Type values per * the allowable packages, and serialize/deserialize groups of types onto/from a * string buffer. * * We're using java.lang classes for 'normal' constructors and applying * java.util types as ones we expect to fail. * * @author Brian Remedios */public class TypePropertyTest extends AbstractPropertyDescriptorTester {    private static final Class[] JAVA_LANG_CLASSES = new Class[] { String.class, Integer.class, Thread.class,        Object.class, Runtime.class, };    private static final Class[] JAVA_UTIL_CLASSES = new Class[] { HashMap.class, Map.class, Comparator.class, Set.class,        Observer.class, };    public TypePropertyTest() {        super("Class");    }    /**     * Method createValue.     *     * @param count     *            int     * @return Object     */    @Override    protected Object createValue(int count) {        if (count == 1) {            return randomChoice(JAVA_LANG_CLASSES);        }        Object[] values = new Object[count];        for (int i = 0; i < values.length; i++) {            values[i] = createValue(1);        }        return values;    }    /**     * Method createBadValue.     *     * @param count     *            int     * @return Object     */    @Override    protected Object createBadValue(int count) {        if (count == 1) {            return randomChoice(JAVA_UTIL_CLASSES);        }        Object[] values = new Object[count];        for (int i = 0; i < values.length; i++) {            values[i] = createBadValue(1);        }        return values;    }    /**     * Method createProperty.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createProperty(boolean multiValue) {        return multiValue                ? new TypeMultiProperty("testType", "Test type property", JAVA_LANG_CLASSES, new String[] { "java.lang" },                        1.0f)                : new TypeProperty("testType", "Test type property", JAVA_LANG_CLASSES[0], new String[] { "java.lang" },                        1.0f);    }    /**     * Method createProperty.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createBadProperty(boolean multiValue) {        return multiValue                ? new TypeMultiProperty("testType", "Test type property", new Class[] { Set.class },                        new String[] { "java.lang" }, 1.0f)                : new TypeProperty("testType", "Test type property", JAVA_LANG_CLASSES[0], new String[] { "java.util" },                        1.0f);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.properties;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertTrue;import java.lang.reflect.Method;import java.util.HashMap;import org.junit.Test;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.MethodMultiProperty;import net.sourceforge.pmd.lang.rule.properties.MethodProperty;import net.sourceforge.pmd.util.ClassUtil;/** * Evaluates the functionality of the MethodProperty descriptor by testing its * ability to catch creation errors (illegal args), flag invalid methods per the * allowable packages, and serialize/deserialize groups of methods onto/from a * string buffer. * * We're using methods from java.lang classes for 'normal' constructors and * applying ones from java.util types as ones we expect to fail. * * @author Brian Remedios */public class MethodPropertyTest extends AbstractPropertyDescriptorTester {    private static final String[] METHOD_SIGNATURES = new String[] { "String#indexOf(int)", "String#substring(int,int)",        "java.lang.String#substring(int,int)", "Integer#parseInt(String)", "java.util.HashMap#put(Object,Object)",        "HashMap#containsKey(Object)", };    public MethodPropertyTest() {        super("Method");    }    @Test    public void testAsStringOn() {        Method method = null;        for (int i = 0; i < METHOD_SIGNATURES.length; i++) {            method = MethodProperty.methodFrom(METHOD_SIGNATURES[i], MethodProperty.CLASS_METHOD_DELIMITER,                    MethodProperty.METHOD_ARG_DELIMITER);            assertNotNull("Unable to identify method: " + METHOD_SIGNATURES[i], method);        }    }    @Test    public void testAsMethodOn() {        Method[] methods = new Method[METHOD_SIGNATURES.length];        for (int i = 0; i < METHOD_SIGNATURES.length; i++) {            methods[i] = MethodProperty.methodFrom(METHOD_SIGNATURES[i], MethodProperty.CLASS_METHOD_DELIMITER,                    MethodProperty.METHOD_ARG_DELIMITER);            assertNotNull("Unable to identify method: " + METHOD_SIGNATURES[i], methods[i]);        }        String translatedMethod = null;        for (int i = 0; i < methods.length; i++) {            translatedMethod = MethodProperty.asStringFor(methods[i]);            assertTrue("Translated method does not match", ClassUtil.withoutPackageName(METHOD_SIGNATURES[i])                    .equals(ClassUtil.withoutPackageName(translatedMethod)));        }    }    @Override    protected PropertyDescriptor createBadProperty(boolean multiValue) {        Method[] methods = String.class.getDeclaredMethods();        return multiValue                ? new MethodMultiProperty("methodProperty", "asdf", new Method[] { methods[2], methods[3] },                        new String[] { "java.util" }, 1.0f)                : new MethodProperty("methodProperty", "asdf", methods[1], new String[] { "java.util" }, 1.0f);    }    @Override    protected Object createBadValue(int count) {        Method[] allMethods = HashMap.class.getDeclaredMethods();        if (count == 1) {            return randomChoice(allMethods);        }        Method[] methods = new Method[count];        for (int i = 0; i < count; i++) {            methods[i] = allMethods[i];        }        return methods;    }    @Override    protected PropertyDescriptor createProperty(boolean multiValue) {        Method[] methods = String.class.getDeclaredMethods();        return multiValue                ? new MethodMultiProperty("methodProperty", "asdf", new Method[] { methods[2], methods[3] },                        new String[] { "java.lang" }, 1.0f)                : new MethodProperty("methodProperty", "asdf", methods[1], new String[] { "java.lang" }, 1.0f);    }    @Override    protected Object createValue(int count) {        Method[] allMethods = String.class.getDeclaredMethods();        if (count == 1) {            return randomChoice(allMethods);        }        Method[] methods = new Method[count];        for (int i = 0; i < count; i++) {            methods[i] = allMethods[i];        }        return methods;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.properties;import org.junit.Test;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.BooleanMultiProperty;import net.sourceforge.pmd.lang.rule.properties.BooleanProperty;/** * @author Brian Remedios */public class BooleanPropertyTest extends AbstractPropertyDescriptorTester {    public BooleanPropertyTest() {        super("Boolean");    }    /**     * Method createValue.     *     * @param valueCount     *            int     * @return Object     */    @Override    protected Object createValue(int valueCount) {        if (valueCount == 1) {            return System.currentTimeMillis() % 1 > 0 ? Boolean.TRUE : Boolean.FALSE;        }        Boolean[] values = new Boolean[valueCount];        for (int i = 0; i < values.length; i++) {            values[i] = (Boolean) createValue(1);        }        return values;    }    @Override    @Test    public void testErrorForBad() {        // override, cannot create a 'bad' boolean per se    }    @Override    protected Object createBadValue(int count) {        return null;    }    /**     * Method createProperty.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createProperty(boolean multiValue) {        return multiValue ? new BooleanMultiProperty("testBoolean", "Test boolean property",                new Boolean[] { false, true, true }, 1.0f)                : new BooleanProperty("testBoolean", "Test boolean property", false, 1.0f);    }    /**     * Method createBadProperty.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createBadProperty(boolean multiValue) {        return multiValue                ? new BooleanMultiProperty("", "Test boolean property", new Boolean[] { false, true, true }, 1.0f)                : new BooleanProperty("testBoolean", "", false, 1.0f);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.properties;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.StringMultiProperty;import net.sourceforge.pmd.lang.rule.properties.StringProperty;/** * Evaluates the functionality of the StringProperty descriptor by testing its * ability to catch creation errors (illegal args), flag invalid strings per any * specified expressions, and serialize/deserialize groups of strings onto/from * a string buffer. * * @author Brian Remedios */public class StringPropertyTest extends AbstractPropertyDescriptorTester {    private static final int MAX_STRING_LENGTH = 52;    private static final char DELIMITER = '|';    private static final char[] CHARSET = filter(ALL_CHARS.toCharArray(), DELIMITER);    public StringPropertyTest() {        super("String");    }    /**     * Method createValue.     *     * @param count     *            int     * @return Object     */    @Override    protected Object createValue(int count) {        if (count == 1) {            return newString();        }        String[] values = new String[count];        for (int i = 0; i < count; i++) {            values[i] = (String) createValue(1);        }        return values;    }    /**     * Method createBadValue.     *     * @param count     *            int     * @return Object     */    @Override    protected Object createBadValue(int count) {        if (count == 1) {            return null;        }        Object[] values = new Object[count];        for (int i = 0; i < count; i++) {            values[i] = createBadValue(1);        }        return values;    }    /**     * Method newString.     *     * @return String     */    private String newString() {        int strLength = randomInt(0, MAX_STRING_LENGTH);        char[] chars = new char[strLength];        for (int i = 0; i < chars.length; i++) {            chars[i] = randomCharIn(CHARSET);        }        return new String(chars);    }    /**     * Method randomCharIn.     *     * @param chars     *            char[]     * @return char     */    private char randomCharIn(char[] chars) {        return randomChar(chars);    }    /**     * Method createProperty.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createProperty(boolean multiValue) {        return multiValue ? new StringMultiProperty("testString", "Test string property",                new String[] { "hello", "world" }, 1.0f, DELIMITER)                : new StringProperty("testString", "Test string property", "brian", 1.0f);    }    /**     * Method createBadProperty.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createBadProperty(boolean multiValue) {        return multiValue                ? new StringMultiProperty("testString", "Test string property",                        new String[] { "hello", "world", "a" + DELIMITER + "b" }, 1.0f, DELIMITER)                : new StringProperty("", "Test string property", "brian", 1.0f);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.properties;import org.junit.Test;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.CharacterMultiProperty;import net.sourceforge.pmd.lang.rule.properties.CharacterProperty;/** * Evaluates the functionality of the CharacterProperty descriptor by testing * its ability to catch creation errors (illegal args), flag invalid characters, * and serialize/deserialize any default values. * * @author Brian Remedios */public class CharacterPropertyTest extends AbstractPropertyDescriptorTester {    private static final char DELIMITER = '|';    private static final char[] CHARSET = filter(ALL_CHARS.toCharArray(), DELIMITER);    public CharacterPropertyTest() {        super("Character");    }    /**     * Method createValue.     *     * @param count     *            int     * @return Object     */    @Override    protected Object createValue(int count) {        if (count == 1) {            return new Character(randomChar(CHARSET));        }        Character[] values = new Character[count];        for (int i = 0; i < values.length; i++) {            values[i] = (Character) createValue(1);        }        return values;    }    /**     * Method createBadValue.     *     * @param count     *            int     * @return Object     */    @Override    protected Object createBadValue(int count) {        if (count == 1) {            return null;        }        Character[] values = new Character[count];        for (int i = 0; i < values.length; i++) {            values[i] = (Character) createBadValue(1);        }        return values;    }    @Override    @Test    public void testErrorForBad() {    } // not until char properties use illegal chars    /**     * Method createProperty.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createProperty(boolean multiValue) {        return multiValue                ? new CharacterMultiProperty("testCharacter", "Test character property",                        new Character[] { 'a', 'b', 'c' }, 1.0f, DELIMITER)                : new CharacterProperty("testCharacter", "Test character property", 'a', 1.0f);    }    /**     * Creates a bad property that is missing either its name or description or     * includes a delimiter in the set of legal values.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createBadProperty(boolean multiValue) {        return multiValue                ? new CharacterMultiProperty("testCharacter", "Test character property",                        new Character[] { 'a', 'b', 'c' }, 1.0f, DELIMITER)                : new CharacterProperty("", "Test character property", 'a', 1.0f);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.properties;import org.junit.Test;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.IntegerMultiProperty;import net.sourceforge.pmd.lang.rule.properties.IntegerProperty;/** * Evaluates the functionality of the IntegerProperty descriptor by testing its * ability to catch creation errors (illegal args), flag out-of-range test * values, and serialize/deserialize groups of integers onto/from a string * buffer. * * @author Brian Remedios */public class IntegerPropertyTest extends AbstractPropertyDescriptorTester {    private static final int MIN = 1;    private static final int MAX = 12;    private static final int SHIFT = 3;    public IntegerPropertyTest() {        super("Integer");    }    /**     * Method createValue.     *     * @param count     *            int     * @return Object     */    @Override    protected Object createValue(int count) {        if (count == 1) {            return Integer.valueOf(randomInt(MIN, MAX));        }        Integer[] values = new Integer[count];        for (int i = 0; i < values.length; i++) {            values[i] = (Integer) createValue(1);        }        return values;    }    /**     * Creates and returns (count) number of out-of-range Integer values     *     * @param count     *            int     * @return Object     */    @Override    protected Object createBadValue(int count) {        if (count == 1) {            return Integer.valueOf(randomBool() ? randomInt(MIN - SHIFT, MIN) : randomInt(MAX, MAX + SHIFT));        }        Integer[] values = new Integer[count];        for (int i = 0; i < values.length; i++) {            values[i] = (Integer) createBadValue(1);        }        return values;    }    @Override    @Test    public void testErrorForBad() {    } // not until int properties get ranges    /**     * Method createProperty.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createProperty(boolean multiValue) {        return multiValue                ? new IntegerMultiProperty("testInteger", "Test integer property", MIN, MAX,                        new Integer[] { MIN, MIN + 1, MAX - 1, MAX }, 1.0f)                : new IntegerProperty("testInteger", "Test integer property", MIN, MAX, MAX - 1, 1.0f);    }    /**     * Method createBadProperty.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createBadProperty(boolean multiValue) {        return multiValue ? new IntegerMultiProperty("testInteger", "", MIN, MAX, new Integer[] { MIN - 1, MAX }, 1.0f)                : new IntegerProperty("", "Test integer property", MIN, MAX, MAX + 1, 1.0f);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.properties;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.FloatMultiProperty;import net.sourceforge.pmd.lang.rule.properties.FloatProperty;/** * Evaluates the functionality of the FloatProperty descriptor by testing its * ability to catch creation errors (illegal args), flag out-of-range test * values, and serialize/deserialize groups of float values onto/from a string * buffer. * * @author Brian Remedios */public class FloatPropertyTest extends AbstractPropertyDescriptorTester {    private static final float MIN = 1.0f;    private static final float MAX = 11.0f;    private static final float SHIFT = 3.0f;    public static FloatProperty randomProperty(int nameLength, int descLength, boolean multiValue) {        float defalt = randomFloat(0, 1000f);        return new FloatProperty(randomString(nameLength), randomString(descLength), defalt - 1000f, defalt + 1000,                defalt, 0f);    }    public FloatPropertyTest() {        super("Float");    }    /**     * Method createValue.     *     * @param count     *            int     * @return Object     */    @Override    protected Object createValue(int count) {        if (count == 1) {            return Float.valueOf(randomFloat(MIN, MAX));        }        Float[] values = new Float[count];        for (int i = 0; i < values.length; i++) {            values[i] = (Float) createValue(1);        }        return values;    }    /**     * Creates and returns (count) number of out-of-range float values     *     * @param count     *            int     * @return Object     */    @Override    protected Object createBadValue(int count) {        if (count == 1) {            return Float.valueOf(randomBool() ? randomFloat(MIN - SHIFT, MIN) : randomFloat(MAX, MAX + SHIFT));        }        Float[] values = new Float[count];        for (int i = 0; i < values.length; i++) {            values[i] = (Float) createBadValue(1);        }        return values;    }    /**     * Method createProperty.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createProperty(boolean multiValue) {        return multiValue ? new FloatMultiProperty("testFloat", "Test float property", MIN, MAX,                new Float[] { -1f, 0f, 1f, 2f }, 1.0f)                : new FloatProperty("testFloat", "Test float property", MIN, MAX, 9.0f, 1.0f);    }    /**     * Method createBadProperty.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createBadProperty(boolean multiValue) {        return multiValue ? new FloatMultiProperty("testFloat", "Test float property", 0f, 5f,                new Float[] { -1f, 0f, 1f, 2f }, 1.0f)                : new FloatProperty("testFloat", "Test float property", 5f, 4f, 9.0f, 1.0f);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.properties;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.DoubleMultiProperty;import net.sourceforge.pmd.lang.rule.properties.DoubleProperty;/** * Evaluates the functionality of the DoubleProperty descriptor by testing its * ability to catch creation errors (illegal args), flag out-of-range test * values, and serialize/deserialize groups of double values onto/from a string * buffer. * * @author Brian Remedios */public class DoublePropertyTest extends AbstractPropertyDescriptorTester {    private static final double MIN = -10.0;    private static final double MAX = 100.0;    private static final double SHIFT = 5.0;    public DoublePropertyTest() {        super("Double");    }    /**     * Creates and returns (count) number of legal Double values     *     * @param count     *            int     * @return Object     */    @Override    protected Object createValue(int count) {        if (count == 1) {            return Double.valueOf(randomDouble(MIN, MAX));        }        Double[] values = new Double[count];        for (int i = 0; i < values.length; i++) {            values[i] = (Double) createValue(1);        }        return values;    }    /**     * Creates and returns (count) number of out-of-range values     *     * @param count     *            int     * @return Object     */    @Override    protected Object createBadValue(int count) {        if (count == 1) {            return Double.valueOf(                    randomBool() ? randomDouble(MIN - SHIFT, MIN - 0.01) : randomDouble(MAX + 0.01, MAX + SHIFT));        }        Double[] values = new Double[count];        for (int i = 0; i < values.length; i++) {            values[i] = (Double) createBadValue(1);        }        return values;    }    /**     * Creates and returns a property with a (maxCount) value cardinality.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createProperty(boolean multiValue) {        return multiValue                ? new DoubleMultiProperty("testDouble", "Test double property", MIN, MAX,                        new Double[] { -1d, 0d, 1d, 2d }, 1.0f)                : new DoubleProperty("testDouble", "Test double property", MIN, MAX, 9.0, 1.0f);    }    /**     * Attempts to create a property with invalid constructor arguments.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createBadProperty(boolean multiValue) {        return multiValue                ? new DoubleMultiProperty("testDouble", "Test double property", MIN, MAX,                        new Double[] { MIN - SHIFT, MIN, MIN + SHIFT, MAX + SHIFT }, 1.0f)                : new DoubleProperty("testDouble", "Test double property", MAX, MIN, 9.0, 1.0f);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.properties;import static org.junit.Assert.assertArrayEquals;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertSame;import static org.junit.Assert.assertTrue;import org.junit.Before;import org.junit.Ignore;import org.junit.Test;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.cpd.ReportException;import net.sourceforge.pmd.util.CollectionUtil;import net.sourceforge.pmd.util.NumericConstants;/** * @author Brian Remedios */public class PropertyAccessorTest {    private Rule rule;    @Before    public void setUpSingleRule() {        rule = new NonRuleWithAllPropertyTypes();    }    @Test    public void testIntegers() {        rule.setProperty(NonRuleWithAllPropertyTypes.SINGLE_INT, NumericConstants.ZERO);        assertSame(rule.getProperty(NonRuleWithAllPropertyTypes.SINGLE_INT), 0);        rule.setProperty(NonRuleWithAllPropertyTypes.MULTI_INT,                new Integer[] { NumericConstants.ZERO, NumericConstants.ONE });        assertArrayEquals(rule.getProperty(NonRuleWithAllPropertyTypes.MULTI_INT), new Integer[] { 0, 1 });    }    @Test    public void testBooleans() {        rule.setProperty(NonRuleWithAllPropertyTypes.SINGLE_BOOL, Boolean.FALSE);        assertFalse(rule.getProperty(NonRuleWithAllPropertyTypes.SINGLE_BOOL));        rule.setProperty(NonRuleWithAllPropertyTypes.MULTI_BOOL, new Boolean[] { Boolean.TRUE, Boolean.FALSE });        assertArrayEquals(rule.getProperty(NonRuleWithAllPropertyTypes.MULTI_BOOL), new Boolean[] { true, false });    }    @Ignore    @Test    public void testFloats() throws ReportException {        /*         * rule.setProperty("singleFloat", new Float(0));         * assertTrue(rule.getFloatProperty("singleFloat") == 0f);         *         * rule.setProperties("multiBool", new Boolean[] {Boolean.TRUE,         * Boolean.FALSE});         * assertTrue(areEqual(rule.getBooleanProperties("multiBool"), new         * boolean[]{true, false}));         *         * boolean exceptionOccurred = false; try {         * rule.setProperties("singleBool", new Boolean[] {Boolean.TRUE,         * Boolean.FALSE}); } catch (Exception ex) { exceptionOccurred = true; }         * assertTrue(exceptionOccurred);         *         * exceptionOccurred = false; try { rule.setProperty("multiBool",         * Boolean.TRUE); } catch (Exception ex) { exceptionOccurred = true; }         * assertTrue(exceptionOccurred);         */    }    @Test    public void testStrings() {        rule.setProperty(NonRuleWithAllPropertyTypes.SINGLE_STR, "brian");        assertEquals(rule.getProperty(NonRuleWithAllPropertyTypes.SINGLE_STR), "brian");        rule.setProperty(NonRuleWithAllPropertyTypes.MULTI_STR, new String[] { "hello", "world" });        assertTrue(CollectionUtil.arraysAreEqual(rule.getProperty(NonRuleWithAllPropertyTypes.MULTI_STR),                new String[] { "hello", "world" }));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.properties;import java.util.ArrayList;import java.util.HashMap;import org.junit.Assume;import org.junit.Test;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.EnumeratedMultiProperty;import net.sourceforge.pmd.lang.rule.properties.EnumeratedProperty;/** * Evaluates the functionality of the EnumeratedProperty descriptor by testing * its ability to catch creation errors (illegal args), flag invalid selections, * and serialize/deserialize selection options. * * @author Brian Remedios */public class EnumeratedPropertyTest extends AbstractPropertyDescriptorTester {    private static final String[] KEYS = new String[] { "map", "emptyArray", "list", "string", };    private static final Object[] VALUES = new Object[] { new HashMap(), new Object[0], new ArrayList(),        "Hello World!", };    public EnumeratedPropertyTest() {        super("Enum");    }    /**     * Method createValue.     *     * @param count     *            int     * @return Object     */    @Override    protected Object createValue(int count) {        if (count == 1) {            return randomChoice(VALUES);        }        Object[] values = new Object[count];        for (int i = 0; i < values.length; i++) {            values[i] = createValue(1);        }        return values;    }    /**     * Returns a (count) number of values that are not in the set of legal     * values.     *     * @param count     *            int     * @return Object     */    @Override    protected Object createBadValue(int count) {        if (count == 1) {            return Integer.toString(randomInt()); // not in the set of values        }        Object[] values = new Object[count];        for (int i = 0; i < values.length; i++) {            values[i] = createBadValue(1);        }        return values;    }    /**     * Method createProperty.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createProperty(boolean multiValue) {        return multiValue                ? new EnumeratedMultiProperty<>("testEnumerations", "Test enumerations with complex types", KEYS,                        VALUES, new int[] { 0, 1 }, 1.0f)                : new EnumeratedProperty<>("testEnumerations", "Test enumerations with complex types", KEYS, VALUES, 0,                        1.0f);    }    /**     * Method createBadProperty.     *     * @param multiValue     *            boolean     * @return PropertyDescriptor     */    @Override    protected PropertyDescriptor createBadProperty(boolean multiValue) {        return multiValue                ? new EnumeratedMultiProperty<>("testEnumerations", "Test enumerations with complex types", KEYS,                        new Object[0], new int[] { 99 }, 1.0f)                : new EnumeratedProperty<>("testEnumerations", "Test enumerations with complex types", new String[0],                        VALUES, -1, 1.0f);    }    @Override    @Test    public void testFactorySingleValue() {        Assume.assumeTrue("The EnumeratedProperty is not implemented completely yet", false);    }    @Override    @Test    public void testFactoryMultiValueCustomDelimiter() {        Assume.assumeTrue("The EnumeratedProperty is not implemented completely yet", false);    }    @Override    @Test    public void testFactoryMultiValueDefaultDelimiter() {        Assume.assumeTrue("The EnumeratedProperty is not implemented completely yet", false);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertTrue;import org.junit.Test;public class LanguageFactoryTest {    @Test    public void testSimple() {        assertTrue(LanguageFactory.createLanguage("Cpddummy") instanceof CpddummyLanguage);        assertTrue(LanguageFactory.createLanguage("not_existing_language") instanceof AnyLanguage);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.Iterator;import org.junit.Test;public class MatchTest {    @Test    public void testSimple() {        int lineCount1 = 10;        String codeFragment1 = "code fragment";        Mark mark1 = createMark("public", "/var/Foo.java", 1, lineCount1, codeFragment1);        int lineCount2 = 20;        String codeFragment2 = "code fragment 2";        Mark mark2 = createMark("class", "/var/Foo.java", 1, lineCount2, codeFragment2);        Match match = new Match(1, mark1, mark2);        assertEquals(1, match.getTokenCount());        // Returns the line count of the first mark        assertEquals(lineCount1, match.getLineCount());        // Returns the source code of the first mark        assertEquals(codeFragment1, match.getSourceCodeSlice());        Iterator<Mark> i = match.iterator();        Mark occurrence1 = i.next();        Mark occurrence2 = i.next();        assertFalse(i.hasNext());        assertEquals(mark1, occurrence1);        assertEquals(lineCount1, occurrence1.getLineCount());        assertEquals(codeFragment1, occurrence1.getSourceCodeSlice());        assertEquals(mark2, occurrence2);        assertEquals(lineCount2, occurrence2.getLineCount());        assertEquals(codeFragment2, occurrence2.getSourceCodeSlice());    }    @Test    public void testCompareTo() {        Match m1 = new Match(1, new TokenEntry("public", "/var/Foo.java", 1),                new TokenEntry("class", "/var/Foo.java", 1));        Match m2 = new Match(2, new TokenEntry("Foo", "/var/Foo.java", 1), new TokenEntry("{", "/var/Foo.java", 1));        assertTrue(m2.compareTo(m1) < 0);    }    private Mark createMark(String image, String tokenSrcID, int beginLine, int lineCount, String code) {        Mark result = new Mark(new TokenEntry(image, tokenSrcID, beginLine));        result.setLineCount(lineCount);        result.setSourceCode(new SourceCode(new SourceCode.StringCodeLoader(code)));        return result;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(MatchTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import java.io.File;import java.util.ArrayList;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.cpd.SourceCode.FileCodeLoader;public class SourceCodeTest {    private static final String BASE_RESOURCE_PATH = "src/test/resources/net/sourceforge/pmd/cpd/files/";    private static final String SAMPLE_CODE = "Line 1\n" + "Line 2\n" + "Line 3\n" + "Line 4\n";    @Test    public void testSimple() throws Exception {        Tokenizer tokenizer = new AbstractTokenizer() {            {                this.stringToken = new ArrayList<>();                this.ignorableCharacter = new ArrayList<>();                this.ignorableStmt = new ArrayList<>();            }        };        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(SAMPLE_CODE, "Foo.java"));        assertEquals("Foo.java", sourceCode.getFileName());        tokenizer.tokenize(sourceCode, new Tokens());        assertEquals("Line 1", sourceCode.getSlice(1, 1));        assertEquals("Line 2", sourceCode.getSlice(2, 2));        assertEquals("Line 1" + PMD.EOL + "Line 2", sourceCode.getSlice(1, 2));    }    @Test    public void testEncodingDetectionFromBOM() throws Exception {        FileCodeLoader loader = new SourceCode.FileCodeLoader(new File(BASE_RESOURCE_PATH + "file_with_utf8_bom.java"),                "ISO-8859-1");        // The encoding detection is done when the reader is created        loader.getReader();        assertEquals("UTF-8", loader.getEncoding());    }    @Test    public void testEncodingIsNotChangedWhenThereIsNoBOM() throws Exception {        FileCodeLoader loader = new SourceCode.FileCodeLoader(                new File(BASE_RESOURCE_PATH + "file_with_ISO-8859-1_encoding.java"), "ISO-8859-1");        // The encoding detection is done when the reader is created        loader.getReader();        assertEquals("ISO-8859-1", loader.getEncoding());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import org.junit.Assert;import org.junit.Rule;import org.junit.Test;import org.junit.contrib.java.lang.system.LogMode;import org.junit.contrib.java.lang.system.RestoreSystemProperties;import org.junit.contrib.java.lang.system.StandardOutputStreamLog;import org.junit.rules.TestRule;import net.sourceforge.pmd.PMD;public class CPDCommandLineInterfaceTest {    @Rule    public final TestRule restoreSystemProperties = new RestoreSystemProperties();    @Rule    public final StandardOutputStreamLog log = new StandardOutputStreamLog(LogMode.LOG_ONLY);    @Test    public void testEmptyResultRendering() {        System.setProperty(CPDCommandLineInterface.NO_EXIT_AFTER_RUN, "true");        CPDCommandLineInterface.main(new String[] { "--minimum-tokens", "340", "--language", "java", "--files",            "src/test/resources/net/sourceforge/pmd/cpd/files/", "--format", "xml", });        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "\n" + "<pmd-cpd/>" + PMD.EOL, log.getLog());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import java.util.HashMap;import java.util.Map;import org.junit.Assert;import org.junit.Test;public class CPDConfigurationTest {    @Test    public void testRenderers() {        Map<String, Class<? extends Renderer>> renderersToTest = new HashMap<>();        renderersToTest.put("csv", CSVRenderer.class);        renderersToTest.put("xml", XMLRenderer.class);        renderersToTest.put("csv_with_linecount_per_file", CSVWithLinecountPerFileRenderer.class);        renderersToTest.put("vs", VSRenderer.class);        renderersToTest.put("text", SimpleRenderer.class);        for (Map.Entry<String, Class<? extends Renderer>> entry : renderersToTest.entrySet()) {            Renderer r = CPDConfiguration.getRendererFromString(entry.getKey(), "UTF-8");            Assert.assertNotNull(r);            Assert.assertSame(entry.getValue(), r.getClass());        }    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;import org.junit.Test;/** * @author Philippe T'Seyen */public class FileReporterTest {    @Test    public void testCreation() {        new FileReporter((String) null);        new FileReporter((File) null);    }    @Test    public void testEmptyReport() throws ReportException {        File reportFile = new File("report.tmp");        FileReporter fileReporter = new FileReporter(reportFile);        fileReporter.report("");        assertTrue(reportFile.exists());        assertEquals(0L, reportFile.length());        assertTrue(reportFile.delete());    }    @Test    public void testReport() throws ReportException, IOException {        String testString = "first line\nsecond line";        File reportFile = new File("report.tmp");        FileReporter fileReporter = new FileReporter(reportFile);        fileReporter.report(testString);        assertEquals(testString, readFile(reportFile));        assertTrue(reportFile.delete());    }    @Test(expected = ReportException.class)    public void testInvalidFile() throws ReportException {        File reportFile = new File("/invalid_folder/report.tmp");        FileReporter fileReporter = new FileReporter(reportFile);        fileReporter.report("");    }    private String readFile(File file) throws IOException {        BufferedReader reader = null;        try {            reader = new BufferedReader(new FileReader(file));            StringBuffer buffer = new StringBuffer();            String line = reader.readLine();            while (line != null) {                buffer.append(line);                line = reader.readLine();                if (line != null) {                    buffer.append('\n');                }            }            return buffer.toString();        } finally {            if (reader != null) {                reader.close();            }        }    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(FileReporterTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import org.junit.Test;import net.sourceforge.pmd.PMD;public class AnyTokenizerTest {    @Test    public void testMultiLineMacros() {        AnyTokenizer tokenizer = new AnyTokenizer();        SourceCode code = new SourceCode(new SourceCode.StringCodeLoader(TEST1));        Tokens tokens = new Tokens();        tokenizer.tokenize(code, tokens);        assertEquals(30, tokens.size());    }    private static final String TEST1 = "using System;" + PMD.EOL + "namespace HelloNameSpace {" + PMD.EOL + ""            + PMD.EOL + "    public class HelloWorld {" + PMD.EOL + "        static void Main(string[] args) {"            + PMD.EOL + "            Console.WriteLine(\"Hello World!\");" + PMD.EOL + "        }" + PMD.EOL + "    }"            + PMD.EOL + "}" + PMD.EOL;    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(AnyTokenizerTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import java.util.ArrayList;import java.util.List;import org.junit.Test;import net.sourceforge.pmd.PMD;public class CSVRendererTest {    @Test    public void testLineCountPerFile() {        Renderer renderer = new CSVRenderer(true);        List<Match> list = new ArrayList<>();        String codeFragment = "code\nfragment";        Mark mark1 = createMark("public", "/var/Foo.java", 48, 10, codeFragment);        Mark mark2 = createMark("stuff", "/var/Bar.java", 73, 20, codeFragment);        Match match = new Match(75, mark1, mark2);        list.add(match);        String report = renderer.render(list.iterator());        String expectedReport = "tokens,occurrences" + PMD.EOL + "75,2,48,10,/var/Foo.java,73,20,/var/Bar.java"                + PMD.EOL;        assertEquals(expectedReport, report);    }    @Test    public void testFilenameEscapes() {        Renderer renderer = new CSVRenderer();        List<Match> list = new ArrayList<>();        String codeFragment = "code\nfragment";        Mark mark1 = createMark("public", "/var,with,commas/Foo.java", 48, 10, codeFragment);        Mark mark2 = createMark("stuff", "/var,with,commas/Bar.java", 73, 20, codeFragment);        Match match = new Match(75, mark1, mark2);        list.add(match);        String report = renderer.render(list.iterator());        String expectedReport = "lines,tokens,occurrences" + PMD.EOL                + "10,75,2,48,\"/var,with,commas/Foo.java\",73,\"/var,with,commas/Bar.java\"" + PMD.EOL;        assertEquals(expectedReport, report);    }    private Mark createMark(String image, String tokenSrcID, int beginLine, int lineCount, String code) {        Mark result = new Mark(new TokenEntry(image, tokenSrcID, beginLine));        result.setLineCount(lineCount);        result.setSourceCode(new SourceCode(new SourceCode.StringCodeLoader(code)));        return result;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import org.junit.Test;import net.sourceforge.pmd.cpd.SourceCode.StringCodeLoader;public class MarkTest {    @Test    public void testSimple() {        String filename = "/var/Foo.java";        int beginLine = 1;        TokenEntry token = new TokenEntry("public", "/var/Foo.java", 1);        Mark mark = new Mark(token);        int lineCount = 10;        mark.setLineCount(lineCount);        String codeFragment = "code fragment";        mark.setSourceCode(new SourceCode(new StringCodeLoader(codeFragment)));        assertEquals(token, mark.getToken());        assertEquals(filename, mark.getFilename());        assertEquals(beginLine, mark.getBeginLine());        assertEquals(lineCount, mark.getLineCount());        assertEquals(beginLine + lineCount - 1, mark.getEndLine());        assertEquals(codeFragment, mark.getSourceCodeSlice());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(MarkTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.util.HashSet;import java.util.List;import java.util.Set;import org.apache.commons.io.FilenameUtils;import org.junit.Test;public class CPDFilelistTest {    @Test    public void testFilelist() {        CPDConfiguration arguments = new CPDConfiguration();        arguments.setLanguage(new CpddummyLanguage());        arguments.setFileListPath("src/test/resources/net/sourceforge/pmd/cpd/cli/filelist.txt");        CPD cpd = new CPD(arguments);        CPDCommandLineInterface.addSourceFilesToCPD(cpd, arguments);                List<String> paths = cpd.getSourcePaths();        assertEquals(2, paths.size());        Set<String> simpleNames = new HashSet<>();        for (String path : paths) {            simpleNames.add(FilenameUtils.getName(path));        }        assertTrue(simpleNames.contains("anotherfile.dummy"));        assertTrue(simpleNames.contains("somefile.dummy"));    }    @Test    public void testFilelistMultipleLines() {        CPDConfiguration arguments = new CPDConfiguration();        arguments.setLanguage(new CpddummyLanguage());        arguments.setFileListPath("src/test/resources/net/sourceforge/pmd/cpd/cli/filelist2.txt");        CPD cpd = new CPD(arguments);        CPDCommandLineInterface.addSourceFilesToCPD(cpd, arguments);                List<String> paths = cpd.getSourcePaths();        assertEquals(2, paths.size());        Set<String> simpleNames = new HashSet<>();        for (String path : paths) {            simpleNames.add(FilenameUtils.getName(path));        }        assertTrue(simpleNames.contains("anotherfile.dummy"));        assertTrue(simpleNames.contains("somefile.dummy"));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import org.junit.Test;public class TokenEntryTest {    @Test    public void testSimple() {        TokenEntry.clearImages();        TokenEntry mark = new TokenEntry("public", "/var/Foo.java", 1);        assertEquals(1, mark.getBeginLine());        assertEquals("/var/Foo.java", mark.getTokenSrcID());        assertEquals(0, mark.getIndex());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(TokenEntryTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import static org.junit.Assert.fail;import java.io.ByteArrayInputStream;import java.util.ArrayList;import java.util.List;import javax.xml.parsers.DocumentBuilderFactory;import org.junit.Test;import org.w3c.dom.Document;import org.w3c.dom.Node;import org.w3c.dom.NodeList;/** * @author Philippe T'Seyen * @author Romain Pelisse &lt;belaran@gmail.com&gt; * */public class XMLRendererTest {    private static final String ENCODING = (String) System.getProperties().get("file.encoding");    @Test    public void testWithNoDuplication() {        Renderer renderer = new XMLRenderer();        List<Match> list = new ArrayList<>();        String report = renderer.render(list.iterator());        try {            Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder()                    .parse(new ByteArrayInputStream(report.getBytes(ENCODING)));            NodeList nodes = doc.getChildNodes();            Node n = nodes.item(0);            assertEquals("pmd-cpd", n.getNodeName());            assertEquals(0, doc.getElementsByTagName("duplication").getLength());        } catch (Exception e) {            e.printStackTrace();            fail(e.getMessage());        }    }    @Test    public void testWithOneDuplication() {        Renderer renderer = new XMLRenderer();        List<Match> list = new ArrayList<>();        int lineCount = 6;        String codeFragment = "code\nfragment";        Mark mark1 = createMark("public", "/var/Foo.java", 1, lineCount, codeFragment);        Mark mark2 = createMark("stuff", "/var/Foo.java", 73, lineCount, codeFragment);        Match match = new Match(75, mark1, mark2);        list.add(match);        String report = renderer.render(list.iterator());        try {            Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder()                    .parse(new ByteArrayInputStream(report.getBytes(ENCODING)));            NodeList dupes = doc.getElementsByTagName("duplication");            assertEquals(1, dupes.getLength());            Node file = dupes.item(0).getFirstChild();            while (file != null && file.getNodeType() != Node.ELEMENT_NODE) {                file = file.getNextSibling();            }            if (file != null) {                assertEquals("1", file.getAttributes().getNamedItem("line").getNodeValue());                assertEquals("/var/Foo.java", file.getAttributes().getNamedItem("path").getNodeValue());                file = file.getNextSibling();                while (file != null && file.getNodeType() != Node.ELEMENT_NODE) {                    file = file.getNextSibling();                }            }            if (file != null) {                assertEquals("73", file.getAttributes().getNamedItem("line").getNodeValue());            }            assertEquals(1, doc.getElementsByTagName("codefragment").getLength());            assertEquals(codeFragment, doc.getElementsByTagName("codefragment").item(0).getTextContent());        } catch (Exception e) {            e.printStackTrace();            fail(e.getMessage());        }    }    @Test    public void testRenderWithMultipleMatch() {        Renderer renderer = new XMLRenderer();        List<Match> list = new ArrayList<>();        int lineCount1 = 6;        String codeFragment1 = "code fragment";        Mark mark1 = createMark("public", "/var/Foo.java", 48, lineCount1, codeFragment1);        Mark mark2 = createMark("void", "/var/Foo.java", 73, lineCount1, codeFragment1);        Match match1 = new Match(75, mark1, mark2);        int lineCount2 = 7;        String codeFragment2 = "code fragment 2";        Mark mark3 = createMark("void", "/var/Foo2.java", 49, lineCount2, codeFragment2);        Mark mark4 = createMark("stuff", "/var/Foo2.java", 74, lineCount2, codeFragment2);        Match match2 = new Match(76, mark3, mark4);        list.add(match1);        list.add(match2);        String report = renderer.render(list.iterator());        try {            Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder()                    .parse(new ByteArrayInputStream(report.getBytes(ENCODING)));            assertEquals(2, doc.getElementsByTagName("duplication").getLength());            assertEquals(4, doc.getElementsByTagName("file").getLength());        } catch (Exception e) {            e.printStackTrace();            fail(e.getMessage());        }    }    @Test    public void testRendererEncodedPath() {        Renderer renderer = new XMLRenderer();        List<Match> list = new ArrayList<>();        final String espaceChar = "&lt;";        Mark mark1 = createMark("public", "/var/F" + '<' + "oo.java", 48, 6, "code fragment");        Mark mark2 = createMark("void", "/var/F<oo.java", 73, 6, "code fragment");        Match match1 = new Match(75, mark1, mark2);        list.add(match1);        String report = renderer.render(list.iterator());        assertTrue(report.contains(espaceChar));    }    private Mark createMark(String image, String tokenSrcID, int beginLine, int lineCount, String code) {        Mark result = new Mark(new TokenEntry(image, tokenSrcID, beginLine));        result.setLineCount(lineCount);        result.setSourceCode(new SourceCode(new SourceCode.StringCodeLoader(code)));        return result;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(XMLRendererTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import java.io.File;import org.apache.commons.lang3.SystemUtils;import org.junit.Assert;import org.junit.Before;import org.junit.Test;/** * Unit test for {@link CPD} */public class CPDTest {    private static final String BASE_TEST_RESOURCE_PATH;    static {        if (new File("target/clover/test-classes").exists()) {            BASE_TEST_RESOURCE_PATH = "target/clover/test-classes/net/sourceforge/pmd/cpd/files/";        } else {            BASE_TEST_RESOURCE_PATH = "target/test-classes/net/sourceforge/pmd/cpd/files/";        }    }    private CPD cpd;    private boolean canTestSymLinks = false;    @Before    public void setup() throws Exception {        CPDConfiguration theConfiguration = new CPDConfiguration();        theConfiguration.postContruct();        cpd = new CPD(theConfiguration);        // Symlinks are not well supported under Windows - so the tests are        // simply not executed here.        canTestSymLinks = SystemUtils.IS_OS_UNIX;        prepareSymLinks();        if (!canTestSymLinks) {            System.err.println("*** Skipping unit tests with symlinks.");        }    }    /**     * As java doesn't support symlinks in zip files, maven does not, too. So,     * we are creating the symlinks manually here before the test.     *     * @throws Exception     *             any error     */    private void prepareSymLinks() throws Exception {        if (canTestSymLinks) {            Runtime runtime = Runtime.getRuntime();            if (!new File(BASE_TEST_RESOURCE_PATH, "symlink-for-real-file.txt").exists()) {                runtime.exec(new String[] { "ln", "-s", "real-file.txt",                    BASE_TEST_RESOURCE_PATH + "symlink-for-real-file.txt", }).waitFor();            }            if (!new File(BASE_TEST_RESOURCE_PATH, "this-is-a-broken-sym-link-for-test").exists()) {                runtime.exec(new String[] { "ln", "-s", "broken-sym-link",                    BASE_TEST_RESOURCE_PATH + "this-is-a-broken-sym-link-for-test", }).waitFor();            }        }    }    /**     * A broken symlink (which is basically a not existing file), should be     * skipped.     *     * @throws Exception     *             any error     */    @Test    public void testFileSectionWithBrokenSymlinks() throws Exception {        if (canTestSymLinks) {            NoFileAssertListener listener = new NoFileAssertListener(0);            cpd.setCpdListener(listener);            cpd.add(new File(BASE_TEST_RESOURCE_PATH, "this-is-a-broken-sym-link-for-test"));            listener.verify();        }    }    /**     * A file should be added only once - even if it was found twice, because of     * a sym link.     *     * @throws Exception     *             any error     */    @Test    public void testFileAddedAsSymlinkAndReal() throws Exception {        if (canTestSymLinks) {            NoFileAssertListener listener = new NoFileAssertListener(1);            cpd.setCpdListener(listener);            cpd.add(new File(BASE_TEST_RESOURCE_PATH, "real-file.txt"));            cpd.add(new File(BASE_TEST_RESOURCE_PATH, "symlink-for-real-file.txt"));            listener.verify();        }    }    /**     * Add a file with a relative path - should still be added and not be     * detected as a sym link.     *     * @throws Exception     *             any error     */    @Test    public void testFileAddedWithRelativePath() throws Exception {        NoFileAssertListener listener = new NoFileAssertListener(1);        cpd.setCpdListener(listener);        cpd.add(new File("./" + BASE_TEST_RESOURCE_PATH, "real-file.txt"));        listener.verify();    }    /**     * Simple listener that fails, if to many files were added and not skipped.     */    private static class NoFileAssertListener implements CPDListener {        private int expectedFilesCount;        private int files;        NoFileAssertListener(int expectedFilesCount) {            this.expectedFilesCount = expectedFilesCount;            this.files = 0;        }        @Override        public void addedFile(int fileCount, File file) {            files++;            if (files > expectedFilesCount) {                Assert.fail("File was added! - " + file);            }        }        @Override        public void phaseUpdate(int phase) {            // not needed for this test        }        public void verify() {            Assert.assertEquals("Expected " + expectedFilesCount + " files, but " + files + " have been added.",                    expectedFilesCount, files);        }    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ant;import static org.junit.Assert.fail;import org.apache.tools.ant.BuildException;import org.apache.tools.ant.BuildFileRule;import org.junit.Assert;import org.junit.Before;import org.junit.Rule;import org.junit.Test;public class PMDTaskTest {    @Rule    public final BuildFileRule buildRule = new BuildFileRule();    @Before    public void setUp() {        buildRule.configureProject("src/test/resources/net/sourceforge/pmd/ant/xml/pmdtasktest.xml");    }    @Test    public void testFormatterWithNoToFileAttribute() {        try {            buildRule.executeTarget("testFormatterWithNoToFileAttribute");            fail("This should throw an exception");        } catch (BuildException ex) {            Assert.assertEquals("toFile or toConsole needs to be specified in Formatter", ex.getMessage());        }    }    @Test    public void testNoRuleSets() {        try {            buildRule.executeTarget("testNoRuleSets");            fail("This should throw an exception");        } catch (BuildException ex) {            Assert.assertEquals("No rulesets specified", ex.getMessage());        }    }    @Test    public void testBasic() {        buildRule.executeTarget("testBasic");    }    @Test    public void testInvalidLanguageVersion() {        try {            buildRule.executeTarget("testInvalidLanguageVersion");            Assert.assertEquals(                    "The following language is not supported:<sourceLanguage name=\"java\" version=\"42\" />.",                    buildRule.getLog());            fail("This should throw an exception");        } catch (BuildException ex) {            Assert.assertEquals(                    "The following language is not supported:<sourceLanguage name=\"java\" version=\"42\" />.",                    ex.getMessage());        }    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ant;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import static org.junit.Assert.fail;import java.io.File;import org.junit.Test;import net.sourceforge.pmd.renderers.CSVRenderer;import net.sourceforge.pmd.renderers.HTMLRenderer;import net.sourceforge.pmd.renderers.TextRenderer;import net.sourceforge.pmd.renderers.XMLRenderer;public class FormatterTest {    @Test    public void testType() {        Formatter f = new Formatter();        f.setType("xml");        assertTrue(f.createRenderer() instanceof XMLRenderer);        f.setType("text");        assertTrue(f.createRenderer() instanceof TextRenderer);        f.setType("csv");        assertTrue(f.createRenderer() instanceof CSVRenderer);        f.setType("html");        assertTrue(f.createRenderer() instanceof HTMLRenderer);        try {            f.setType("FAIL");            f.createRenderer();            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException be) {            assertTrue(be.getMessage().startsWith("Can't find the custom format FAIL"));        }    }    @Test    public void testNull() {        Formatter f = new Formatter();        assertTrue("Formatter toFile should start off null!", f.isNoOutputSupplied());        f.setToFile(new File("foo"));        assertFalse("Formatter toFile should not be null!", f.isNoOutputSupplied());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ant;import static org.junit.Assert.assertTrue;import java.io.File;import org.apache.tools.ant.BuildFileRule;import org.junit.Before;import org.junit.Rule;import org.junit.Test;/** * * @author Romain Pelisse &lt;belaran@gmail.com&gt; * */public class CPDTaskTest {    @Rule    public final BuildFileRule buildRule = new BuildFileRule();    @Before    public void setUp() {        buildRule.configureProject("src/test/resources/net/sourceforge/pmd/ant/xml/cpdtasktest.xml");    }    @Test    public void testBasic() {        buildRule.executeTarget("testBasic");        // FIXME: This clearly needs to be improved - but I don't like to write        // test, so feel free to contribute :)        assertTrue(new File("target/cpd.ant.tests").exists());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.jaxen;import org.junit.Test;import net.sourceforge.pmd.lang.ast.DummyNode;import net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIterator;public class AttributeAxisIteratorTest {    @Test(expected = UnsupportedOperationException.class)    public void testRemove() {        DummyNode n = new DummyNode(0);        n.testingOnlySetBeginColumn(1);        n.testingOnlySetBeginLine(1);        AttributeAxisIterator iter = new AttributeAxisIterator(n);        iter.remove();    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(AttributeAxisIteratorTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.jaxen;import static org.junit.Assert.assertEquals;import java.lang.reflect.Method;import org.junit.Test;import net.sourceforge.pmd.lang.ast.DummyNode;import net.sourceforge.pmd.lang.ast.xpath.Attribute;public class AttributeTest {    @Test    public void testConstructor() {        DummyNode p = new DummyNode(1);        p.testingOnlySetBeginLine(5);        Method[] methods = p.getClass().getMethods();        Method m = null;        for (int i = 0; i < methods.length; i++) {            if (methods[i].getName().equals("getBeginLine")) {                m = methods[i];                break;            }        }        Attribute a = new Attribute(p, "BeginLine", m);        assertEquals("BeginLine", a.getName());        assertEquals(5, a.getValue());        assertEquals("5", a.getStringValue());        assertEquals(p, a.getParent());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(AttributeTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.jaxen;import static org.junit.Assert.assertTrue;import java.util.ArrayList;import java.util.List;import org.jaxen.Context;import org.jaxen.FunctionCallException;import org.junit.Test;import net.sourceforge.pmd.lang.ast.AbstractNode;import net.sourceforge.pmd.lang.ast.xpath.Attribute;import net.sourceforge.pmd.lang.xpath.MatchesFunction;public class MatchesFunctionTest {    public static class MyNode extends AbstractNode {        private String className;        public MyNode() {            super(1);        }        @Override        public String toString() {            return "MyNode";        }        public void setClassName(String className) {            this.className = className;        }        public String getClassName() {            return className;        }    }    @Test    public void testMatch() throws FunctionCallException, NoSuchMethodException {        MyNode myNode = new MyNode();        myNode.setClassName("Foo");        assertTrue(tryRegexp(myNode, "Foo") instanceof List);    }    @Test    public void testNoMatch() throws FunctionCallException, NoSuchMethodException {        MyNode myNode = new MyNode();        myNode.setClassName("bar");        assertTrue(tryRegexp(myNode, "Foo") instanceof Boolean);        myNode.setClassName("FobboBar");        assertTrue(tryRegexp(myNode, "Foo") instanceof Boolean);    }    private Object tryRegexp(MyNode myNode, String exp) throws FunctionCallException, NoSuchMethodException {        MatchesFunction function = new MatchesFunction();        List<Object> list = new ArrayList<>();        List<Attribute> attrs = new ArrayList<>();        attrs.add(new Attribute(myNode, "matches", myNode.getClass().getMethod("getClassName", new Class[0])));        list.add(attrs);        list.add(exp);        Context c = new Context(null);        c.setNodeSet(new ArrayList<>());        return function.call(c, list);    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(MatchesFunctionTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import net.sourceforge.pmd.PMD;public class CodeClimateRendererTest extends AbstractRendererTst {    @Override    public Renderer getRenderer() {        return new CodeClimateRenderer();    }    @Override    public String getExpected() {        return "{\"type\":\"issue\",\"check_name\":\"Foo\",\"description\":\"blah\","                + "\"content\":{\"body\":\"## Foo\\n\\nSince: PMD null\\n\\nPriority: Low\\n\\n"                + "[Categories](https://github.com/codeclimate/spec/blob/master/SPEC.md#categories): Style\\n\\n"                + "[Remediation Points](https://github.com/codeclimate/spec/blob/master/SPEC.md#remediation-points): 50000\\n\\n"                + "desc\\n\\n"                + "### [PMD properties](http://pmd.sourceforge.net/snapshot/customizing/pmd-developer.html)\\n\\n"                + "Name | Value | Description\\n" + "--- | --- | ---\\n"                + "violationSuppressRegex | | Suppress violations with messages matching a regular expression\\n"                + "violationSuppressXPath | | Suppress violations on nodes which match a given relative XPath expression.\\n"                + "\"},\"categories\":[\"Style\"],\"location\":{\"path\":\"n/a\",\"lines\":{\"begin\":1,\"end\":1}},\"severity\":\"info\",\"remediation_points\":50000}"                + "\u0000" + PMD.EOL;    }    @Override    public String getExpectedWithProperties() {        return "{\"type\":\"issue\",\"check_name\":\"Foo\",\"description\":\"blah\","                + "\"content\":{\"body\":\"## Foo\\n\\nSince: PMD null\\n\\nPriority: Low\\n\\n"                + "[Categories](https://github.com/codeclimate/spec/blob/master/SPEC.md#categories): Style\\n\\n"                + "[Remediation Points](https://github.com/codeclimate/spec/blob/master/SPEC.md#remediation-points): 50000\\n\\n"                + "desc\\n\\n"                + "### [PMD properties](http://pmd.sourceforge.net/snapshot/customizing/pmd-developer.html)\\n\\n"                + "Name | Value | Description\\n" + "--- | --- | ---\\n"                + "violationSuppressRegex | | Suppress violations with messages matching a regular expression\\n"                + "violationSuppressXPath | | Suppress violations on nodes which match a given relative XPath expression.\\n"                + "multiString | default1,default2 | multi string property\\n"                + "stringProperty | the string value\\nsecond line with 'quotes' | simple string property\\n"                + "\"},\"categories\":[\"Style\"],\"location\":{\"path\":\"n/a\",\"lines\":{\"begin\":1,\"end\":1}},\"severity\":\"info\",\"remediation_points\":50000}"                + "\u0000" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "";    }    @Override    public String getExpectedMultiple() {        return "{\"type\":\"issue\",\"check_name\":\"Foo\",\"description\":\"blah\","                + "\"content\":{\"body\":\"## Foo\\n\\nSince: PMD null\\n\\nPriority: Low\\n\\n"                + "[Categories](https://github.com/codeclimate/spec/blob/master/SPEC.md#categories): Style\\n\\n"                + "[Remediation Points](https://github.com/codeclimate/spec/blob/master/SPEC.md#remediation-points): 50000\\n\\n"                + "desc\\n\\n"                + "### [PMD properties](http://pmd.sourceforge.net/snapshot/customizing/pmd-developer.html)\\n\\n"                + "Name | Value | Description\\n" + "--- | --- | ---\\n"                + "violationSuppressRegex | | Suppress violations with messages matching a regular expression\\n"                + "violationSuppressXPath | | Suppress violations on nodes which match a given relative XPath expression.\\n"                + "\"},\"categories\":[\"Style\"],\"location\":{\"path\":\"n/a\",\"lines\":{\"begin\":1,\"end\":1}},\"severity\":\"info\",\"remediation_points\":50000}"                + "\u0000" + PMD.EOL + "{\"type\":\"issue\",\"check_name\":\"Foo\",\"description\":\"blah\","                + "\"content\":{\"body\":\"## Foo\\n\\nSince: PMD null\\n\\nPriority: Low\\n\\n"                + "[Categories](https://github.com/codeclimate/spec/blob/master/SPEC.md#categories): Style\\n\\n"                + "[Remediation Points](https://github.com/codeclimate/spec/blob/master/SPEC.md#remediation-points): 50000\\n\\n"                + "desc\\n\\n"                + "### [PMD properties](http://pmd.sourceforge.net/snapshot/customizing/pmd-developer.html)\\n\\n"                + "Name | Value | Description\\n" + "--- | --- | ---\\n"                + "violationSuppressRegex | | Suppress violations with messages matching a regular expression\\n"                + "violationSuppressXPath | | Suppress violations on nodes which match a given relative XPath expression.\\n"                + "\"},\"categories\":[\"Style\"],\"location\":{\"path\":\"n/a\",\"lines\":{\"begin\":1,\"end\":1}},\"severity\":\"info\",\"remediation_points\":50000}"                + "\u0000" + PMD.EOL;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report.ProcessingError;public class HTMLRendererTest extends AbstractRendererTst {    @Override    public Renderer getRenderer() {        return new HTMLRenderer();    }    @Override    public String getExpected() {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL                + "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL + "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL                + "<tr bgcolor=\"lightgrey\"> " + PMD.EOL + "<td align=\"center\">1</td>" + PMD.EOL                + "<td width=\"*%\">n/a</td>" + PMD.EOL + "<td align=\"center\" width=\"5%\">1</td>" + PMD.EOL                + "<td width=\"*\">blah</td>" + PMD.EOL + "</tr>" + PMD.EOL + "</table></body></html>" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL                + "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL + "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL                + "</table></body></html>" + PMD.EOL;    }    @Override    public String getExpectedMultiple() {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL                + "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL + "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL                + "<tr bgcolor=\"lightgrey\"> " + PMD.EOL + "<td align=\"center\">1</td>" + PMD.EOL                + "<td width=\"*%\">n/a</td>" + PMD.EOL + "<td align=\"center\" width=\"5%\">1</td>" + PMD.EOL                + "<td width=\"*\">blah</td>" + PMD.EOL + "</tr>" + PMD.EOL + "<tr> " + PMD.EOL                + "<td align=\"center\">2</td>" + PMD.EOL + "<td width=\"*%\">n/a</td>" + PMD.EOL                + "<td align=\"center\" width=\"5%\">1</td>" + PMD.EOL + "<td width=\"*\">blah</td>" + PMD.EOL + "</tr>"                + PMD.EOL + "</table></body></html>" + PMD.EOL;    }    @Override    public String getExpectedError(ProcessingError error) {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL                + "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL + "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL                + "</table><hr/><center><h3>Processing errors</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL + "<th>File</th><th>Problem</th></tr>" + PMD.EOL + "<tr bgcolor=\"lightgrey\"> " + PMD.EOL                + "<td>file</td>" + PMD.EOL + "<td>Error</td>" + PMD.EOL + "</tr>" + PMD.EOL + "</table></body></html>"                + PMD.EOL;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import net.sourceforge.pmd.PMD;public class IDEAJRendererTest extends AbstractRendererTst {    @Override    public Renderer getRenderer() {        Renderer result = new IDEAJRenderer();        result.setProperty(IDEAJRenderer.SOURCE_PATH, "");        result.setProperty(IDEAJRenderer.CLASS_AND_METHOD_NAME, "Foo <init>");        result.setProperty(IDEAJRenderer.FILE_NAME, "Foo.java");        return result;    }    @Override    public String getExpected() {        return "blah" + PMD.EOL + " at Foo <init>(Foo.java:1)" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "";    }    @Override    public String getExpectedMultiple() {        return "blah" + PMD.EOL + " at Foo <init>(Foo.java:1)" + PMD.EOL + "blah" + PMD.EOL                + " at Foo <init>(Foo.java:1)" + PMD.EOL;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import net.sourceforge.pmd.PMD;public class TextPadRendererTest extends AbstractRendererTst {    @Override    public Renderer getRenderer() {        return new TextPadRenderer();    }    @Override    public String getExpected() {        return "n/a(1,  Foo):  blah" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "";    }    @Override    public String getExpectedMultiple() {        return "n/a(1,  Foo):  blah" + PMD.EOL + "n/a(1,  Foo):  blah" + PMD.EOL;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(TextPadRendererTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import java.io.File;import java.io.FileNotFoundException;import java.io.Reader;import java.io.StringReader;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report.ProcessingError;public class PapariTextRendererTest extends AbstractRendererTst {    private static String naString = "n/a";    static {        naString = naString.substring(naString.lastIndexOf(File.separator) + 1);    }    @Override    public Renderer getRenderer() {        TextColorRenderer result = new TextColorRenderer() {            @Override            protected Reader getReader(String sourceFile) throws FileNotFoundException {                return new StringReader("public class Foo {}");            }        };        result.setProperty(TextColorRenderer.COLOR, "false");        return result;    }    @Override    public String getExpected() {        return "* file: n/a" + PMD.EOL + "    src:  " + naString + ":1:1" + PMD.EOL + "    rule: Foo" + PMD.EOL                + "    msg:  blah" + PMD.EOL + "    code: public class Foo {}" + PMD.EOL + PMD.EOL + PMD.EOL + PMD.EOL                + "Summary:" + PMD.EOL + PMD.EOL + " : 1" + PMD.EOL + "* warnings: 1" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return PMD.EOL + PMD.EOL + "Summary:" + PMD.EOL + PMD.EOL + "* warnings: 0" + PMD.EOL;    }    @Override    public String getExpectedMultiple() {        return "* file: n/a" + PMD.EOL + "    src:  " + naString + ":1:1" + PMD.EOL + "    rule: Foo" + PMD.EOL                + "    msg:  blah" + PMD.EOL + "    code: public class Foo {}" + PMD.EOL + PMD.EOL + "    src:  "                + naString + ":1:1" + PMD.EOL + "    rule: Foo" + PMD.EOL + "    msg:  blah" + PMD.EOL                + "    code: public class Foo {}" + PMD.EOL + PMD.EOL + PMD.EOL + PMD.EOL + "Summary:" + PMD.EOL                + PMD.EOL + " : 2" + PMD.EOL + "* warnings: 2" + PMD.EOL;    }    @Override    public String getExpectedError(ProcessingError error) {        return PMD.EOL + PMD.EOL + "Summary:" + PMD.EOL + PMD.EOL + "    err:  Error" + PMD.EOL + PMD.EOL                + "* errors:   0" + PMD.EOL + "* warnings: 0" + PMD.EOL;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(PapariTextRendererTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.FooRule;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.ReportTest;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.lang.ast.DummyNode;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.rule.ParametricRuleViolation;public class XSLTRendererTest {    @Test    public void testDefaultStylesheet() throws Exception {        XSLTRenderer renderer = new XSLTRenderer();        Report report = new Report();        DummyNode node = new DummyNode(1);        node.testingOnlySetBeginLine(1);        node.testingOnlySetBeginColumn(1);        RuleViolation rv = new ParametricRuleViolation<Node>(new FooRule(), new RuleContext(), node,                "violation message");        report.addRuleViolation(rv);        String result = ReportTest.render(renderer, report);        Assert.assertTrue(result.contains("violation message"));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import net.sourceforge.pmd.PMD;public class EmacsRendererTest extends AbstractRendererTst {    @Override    public Renderer getRenderer() {        return new EmacsRenderer();    }    @Override    public String getExpected() {        return "n/a:1: blah" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "";    }    @Override    public String getExpectedMultiple() {        return "n/a:1: blah" + PMD.EOL + "n/a:1: blah" + PMD.EOL;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report.ProcessingError;public class VBHTMLRendererTest extends AbstractRendererTst {    @Override    public Renderer getRenderer() {        return new VBHTMLRenderer();    }    @Override    public String getExpected() {        return "<html><head><title>PMD</title></head><style type=\"text/css\"><!--" + PMD.EOL                + "body { background-color: white; font-family:verdana, arial, helvetica, geneva; font-size: 16px; font-style: italic; color: black; }"                + PMD.EOL                + ".title { font-family: verdana, arial, helvetica,geneva; font-size: 12px; font-weight:bold; color: white; }"                + PMD.EOL                + ".body { font-family: verdana, arial, helvetica, geneva; font-size: 12px; font-weight:plain; color: black; }"                + PMD.EOL + "#TableHeader { background-color: #003366; }" + PMD.EOL                + "#RowColor1 { background-color: #eeeeee; }" + PMD.EOL + "#RowColor2 { background-color: white; }"                + PMD.EOL                + "--></style><body><center><table border=\"0\" width=\"80%\"><tr id=TableHeader><td colspan=\"2\"><font class=title>&nbsp;n/a</font></tr>"                + PMD.EOL                + "<tr id=RowColor2><td width=\"50\" align=\"right\"><font class=body>1&nbsp;&nbsp;&nbsp;</font></td><td><font class=body>blah</font></td></tr>"                + PMD.EOL + "</table><br></center></body></html>" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "<html><head><title>PMD</title></head><style type=\"text/css\"><!--" + PMD.EOL                + "body { background-color: white; font-family:verdana, arial, helvetica, geneva; font-size: 16px; font-style: italic; color: black; }"                + PMD.EOL                + ".title { font-family: verdana, arial, helvetica,geneva; font-size: 12px; font-weight:bold; color: white; }"                + PMD.EOL                + ".body { font-family: verdana, arial, helvetica, geneva; font-size: 12px; font-weight:plain; color: black; }"                + PMD.EOL + "#TableHeader { background-color: #003366; }" + PMD.EOL                + "#RowColor1 { background-color: #eeeeee; }" + PMD.EOL + "#RowColor2 { background-color: white; }"                + PMD.EOL + "--></style><body><center><br></center></body></html>" + PMD.EOL;    }    @Override    public String getExpectedMultiple() {        return "<html><head><title>PMD</title></head><style type=\"text/css\"><!--" + PMD.EOL                + "body { background-color: white; font-family:verdana, arial, helvetica, geneva; font-size: 16px; font-style: italic; color: black; }"                + PMD.EOL                + ".title { font-family: verdana, arial, helvetica,geneva; font-size: 12px; font-weight:bold; color: white; }"                + PMD.EOL                + ".body { font-family: verdana, arial, helvetica, geneva; font-size: 12px; font-weight:plain; color: black; }"                + PMD.EOL + "#TableHeader { background-color: #003366; }" + PMD.EOL                + "#RowColor1 { background-color: #eeeeee; }" + PMD.EOL + "#RowColor2 { background-color: white; }"                + PMD.EOL                + "--></style><body><center><table border=\"0\" width=\"80%\"><tr id=TableHeader><td colspan=\"2\"><font class=title>&nbsp;n/a</font></tr>"                + PMD.EOL                + "<tr id=RowColor2><td width=\"50\" align=\"right\"><font class=body>1&nbsp;&nbsp;&nbsp;</font></td><td><font class=body>blah</font></td></tr>"                + PMD.EOL                + "<tr id=RowColor1><td width=\"50\" align=\"right\"><font class=body>1&nbsp;&nbsp;&nbsp;</font></td><td><font class=body>blah</font></td></tr>"                + PMD.EOL + "</table><br></center></body></html>" + PMD.EOL;    }    @Override    public String getExpectedError(ProcessingError error) {        return "<html><head><title>PMD</title></head><style type=\"text/css\"><!--" + PMD.EOL                + "body { background-color: white; font-family:verdana, arial, helvetica, geneva; font-size: 16px; font-style: italic; color: black; }"                + PMD.EOL                + ".title { font-family: verdana, arial, helvetica,geneva; font-size: 12px; font-weight:bold; color: white; }"                + PMD.EOL                + ".body { font-family: verdana, arial, helvetica, geneva; font-size: 12px; font-weight:plain; color: black; }"                + PMD.EOL + "#TableHeader { background-color: #003366; }" + PMD.EOL                + "#RowColor1 { background-color: #eeeeee; }" + PMD.EOL + "#RowColor2 { background-color: white; }"                + PMD.EOL                + "--></style><body><center><br><table border=\"0\" width=\"80%\"><tr id=TableHeader><td><font class=title>&nbsp;Problems found</font></td></tr><tr id=RowColor2><td><font class=body>"                + error + "\"</font></td></tr></table></center></body></html>" + PMD.EOL;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(VBHTMLRendererTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report.ProcessingError;public class CSVRendererTest extends AbstractRendererTst {    @Override    public Renderer getRenderer() {        return new CSVRenderer();    }    @Override    public String getExpected() {        return "\"Problem\",\"Package\",\"File\",\"Priority\",\"Line\",\"Description\",\"Rule set\",\"Rule\"" + PMD.EOL                + "\"1\",\"\",\"n/a\",\"5\",\"1\",\"blah\",\"RuleSet\",\"Foo\"" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "\"Problem\",\"Package\",\"File\",\"Priority\",\"Line\",\"Description\",\"Rule set\",\"Rule\"" + PMD.EOL;    }    @Override    public String getExpectedMultiple() {        return "\"Problem\",\"Package\",\"File\",\"Priority\",\"Line\",\"Description\",\"Rule set\",\"Rule\"" + PMD.EOL                + "\"1\",\"\",\"n/a\",\"5\",\"1\",\"blah\",\"RuleSet\",\"Foo\"" + PMD.EOL                + "\"2\",\"\",\"n/a\",\"5\",\"1\",\"blah\",\"RuleSet\",\"Foo\"" + PMD.EOL;    }    @Override    public String getExpectedError(ProcessingError error) {        return "\"Problem\",\"Package\",\"File\",\"Priority\",\"Line\",\"Description\",\"Rule set\",\"Rule\"" + PMD.EOL;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(CSVRendererTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report.ProcessingError;public class TextRendererTest extends AbstractRendererTst {    @Override    public Renderer getRenderer() {        return new TextRenderer();    }    @Override    public String getExpected() {        return "n/a:1:\tblah" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "";    }    @Override    public String getExpectedMultiple() {        return "n/a:1:\tblah" + PMD.EOL + "n/a:1:\tblah" + PMD.EOL;    }    @Override    public String getExpectedError(ProcessingError error) {        return "file\t-\tError" + PMD.EOL;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import java.io.StringReader;import javax.xml.parsers.DocumentBuilderFactory;import org.junit.Assert;import org.junit.Test;import org.w3c.dom.Document;import org.w3c.dom.NodeList;import org.xml.sax.InputSource;import net.sourceforge.pmd.FooRule;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.Report.ProcessingError;import net.sourceforge.pmd.ReportTest;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.lang.ast.DummyNode;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.rule.ParametricRuleViolation;public class XMLRendererTest extends AbstractRendererTst {    @Override    public Renderer getRenderer() {        return new XMLRenderer();    }    @Override    public String getExpected() {        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + PMD.EOL + "<pmd version=\"" + PMD.VERSION                + "\" timestamp=\"2014-10-06T19:30:51.262\">" + PMD.EOL + "<file name=\"n/a\">" + PMD.EOL                + "<violation beginline=\"1\" endline=\"1\" begincolumn=\"1\" endcolumn=\"1\" rule=\"Foo\" ruleset=\"RuleSet\" priority=\"5\">"                + PMD.EOL + "blah" + PMD.EOL + "</violation>" + PMD.EOL + "</file>" + PMD.EOL + "</pmd>" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + PMD.EOL + "<pmd version=\"" + PMD.VERSION                + "\" timestamp=\"2014-10-06T19:30:51.262\">" + PMD.EOL + "</pmd>" + PMD.EOL;    }    @Override    public String getExpectedMultiple() {        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + PMD.EOL + "<pmd version=\"" + PMD.VERSION                + "\" timestamp=\"2014-10-06T19:30:51.239\">" + PMD.EOL + "<file name=\"n/a\">" + PMD.EOL                + "<violation beginline=\"1\" endline=\"1\" begincolumn=\"1\" endcolumn=\"1\" rule=\"Foo\" ruleset=\"RuleSet\" priority=\"5\">"                + PMD.EOL + "blah" + PMD.EOL + "</violation>" + PMD.EOL                + "<violation beginline=\"1\" endline=\"1\" begincolumn=\"1\" endcolumn=\"2\" rule=\"Foo\" ruleset=\"RuleSet\" priority=\"5\">"                + PMD.EOL + "blah" + PMD.EOL + "</violation>" + PMD.EOL + "</file>" + PMD.EOL + "</pmd>" + PMD.EOL;    }    @Override    public String getExpectedError(ProcessingError error) {        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + PMD.EOL + "<pmd version=\"" + PMD.VERSION                + "\" timestamp=\"2014-10-06T19:30:51.222\">" + PMD.EOL + "<error filename=\"file\" msg=\"Error\"/>"                + PMD.EOL + "</pmd>" + PMD.EOL;    }    @Override    public String filter(String expected) {        String result = expected.replaceAll(" timestamp=\"[^\"]+\">", " timestamp=\"\">");        return result;    }    private static RuleViolation createRuleViolation(String description) {        DummyNode node = new DummyNode(1);        node.testingOnlySetBeginLine(1);        node.testingOnlySetBeginColumn(1);        node.testingOnlySetEndLine(1);        node.testingOnlySetEndColumn(1);        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("n/a");        return new ParametricRuleViolation<Node>(new FooRule(), ctx, node, description);    }    private void verifyXmlEscaping(Renderer renderer, String shouldContain) throws Exception {        Report report = new Report();        String surrogatePair = "\ud801\udc1c";        String msg = "The String literal \"Tokenizer " + surrogatePair + "\" appears...";        report.addRuleViolation(createRuleViolation(msg));        String actual = ReportTest.render(renderer, report);        Assert.assertTrue(actual.contains(shouldContain));        Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder()                .parse(new InputSource(new StringReader(actual)));        NodeList violations = doc.getElementsByTagName("violation");        Assert.assertEquals(1, violations.getLength());        Assert.assertEquals(msg, violations.item(0).getTextContent().trim());    }    @Test    public void testXMLEscapingWithUTF8() throws Exception {        Renderer renderer = getRenderer();        renderer.setProperty(XMLRenderer.ENCODING, "UTF-8");        verifyXmlEscaping(renderer, "\ud801\udc1c");    }    @Test    public void testXMLEscapingWithoutUTF8() throws Exception {        Renderer renderer = getRenderer();        renderer.setProperty(XMLRenderer.ENCODING, "ISO-8859-1");        verifyXmlEscaping(renderer, "&#x1041c;");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import java.io.File;import java.io.IOException;import org.junit.After;import org.junit.Before;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report.ProcessingError;public class YAHTMLRendererTest extends AbstractRendererTst {    private String outputDir;    @Before    public void setUp() throws IOException {        outputDir = getTemporaryDirectory("pmdtest").getAbsolutePath();    }    @After    public void cleanUp() {        deleteDirectory(new File(outputDir));    }    private File getTemporaryDirectory(String prefix) throws IOException {        // TODO: move to util class?        File dir = File.createTempFile(prefix, "");        dir.delete();        dir.mkdir();        return dir;    }    private void deleteDirectory(File dir) {        // TODO: move to util class?        File[] a = dir.listFiles();        if (a != null) {            for (File f : a) {                if (f.isDirectory()) {                    deleteDirectory(f);                } else {                    f.delete();                }            }        }        dir.delete();    }    @Override    public Renderer getRenderer() {        Renderer result = new YAHTMLRenderer();        result.setProperty(YAHTMLRenderer.OUTPUT_DIR, outputDir);        return result;    }    @Override    public String getExpected() {        return "<h3 align=\"center\">The HTML files are located in '" + outputDir + "'.</h3>" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return getExpected();    }    @Override    public String getExpectedMultiple() {        return getExpected();    }    @Override    public String getExpectedError(ProcessingError error) {        return getExpected();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import static org.junit.Assert.assertEquals;import java.util.HashMap;import java.util.Map;import org.junit.Test;import net.sourceforge.pmd.FooRule;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.Report.ProcessingError;import net.sourceforge.pmd.ReportTest;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.rule.ParametricRuleViolation;public class SummaryHTMLRendererTest extends AbstractRendererTst {    @Override    public Renderer getRenderer() {        Renderer result = new SummaryHTMLRenderer();        result.setProperty(HTMLRenderer.LINK_PREFIX, "link_prefix");        result.setProperty(HTMLRenderer.LINE_PREFIX, "line_prefix");        return result;    }    @Override    public String getExpected() {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL + "<center><h2>Summary</h2></center>" + PMD.EOL                + "<table align=\"center\" cellspacing=\"0\" cellpadding=\"3\">" + PMD.EOL                + "<tr><th>Rule name</th><th>Number of violations</th></tr>" + PMD.EOL                + "<tr><td>Foo</td><td align=center>1</td></tr>" + PMD.EOL + "</table>" + PMD.EOL                + "<center><h2>Detail</h2></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL                + "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL + "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL                + "<tr bgcolor=\"lightgrey\"> " + PMD.EOL + "<td align=\"center\">1</td>" + PMD.EOL                + "<td width=\"*%\"><a href=\"link_prefixn/a.html#line_prefix1\">n/a</a></td>" + PMD.EOL                + "<td align=\"center\" width=\"5%\">1</td>" + PMD.EOL + "<td width=\"*\">blah</td>" + PMD.EOL + "</tr>"                + PMD.EOL + "</table></tr></table></body></html>" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL + "<center><h2>Summary</h2></center>" + PMD.EOL                + "<table align=\"center\" cellspacing=\"0\" cellpadding=\"3\">" + PMD.EOL                + "<tr><th>Rule name</th><th>Number of violations</th></tr>" + PMD.EOL + "</table>" + PMD.EOL                + "<center><h2>Detail</h2></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL                + "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL + "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL                + "</table></tr></table></body></html>" + PMD.EOL;    }    @Override    public String getExpectedMultiple() {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL + "<center><h2>Summary</h2></center>" + PMD.EOL                + "<table align=\"center\" cellspacing=\"0\" cellpadding=\"3\">" + PMD.EOL                + "<tr><th>Rule name</th><th>Number of violations</th></tr>" + PMD.EOL                + "<tr><td>Foo</td><td align=center>2</td></tr>" + PMD.EOL + "</table>" + PMD.EOL                + "<center><h2>Detail</h2></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL                + "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL + "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL                + "<tr bgcolor=\"lightgrey\"> " + PMD.EOL + "<td align=\"center\">1</td>" + PMD.EOL                + "<td width=\"*%\"><a href=\"link_prefixn/a.html#line_prefix1\">n/a</a></td>" + PMD.EOL                + "<td align=\"center\" width=\"5%\">1</td>" + PMD.EOL + "<td width=\"*\">blah</td>" + PMD.EOL + "</tr>"                + PMD.EOL + "<tr> " + PMD.EOL + "<td align=\"center\">2</td>" + PMD.EOL                + "<td width=\"*%\"><a href=\"link_prefixn/a.html#line_prefix1\">n/a</a></td>" + PMD.EOL                + "<td align=\"center\" width=\"5%\">1</td>" + PMD.EOL + "<td width=\"*\">blah</td>" + PMD.EOL + "</tr>"                + PMD.EOL + "</table></tr></table></body></html>" + PMD.EOL;    }    @Override    public String getExpectedError(ProcessingError error) {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL + "<center><h2>Summary</h2></center>" + PMD.EOL                + "<table align=\"center\" cellspacing=\"0\" cellpadding=\"3\">" + PMD.EOL                + "<tr><th>Rule name</th><th>Number of violations</th></tr>" + PMD.EOL + "</table>" + PMD.EOL                + "<center><h2>Detail</h2></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL                + "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL + "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL                + "</table><hr/><center><h3>Processing errors</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL + "<th>File</th><th>Problem</th></tr>" + PMD.EOL + "<tr bgcolor=\"lightgrey\"> " + PMD.EOL                + "<td>file</td>" + PMD.EOL + "<td>Error</td>" + PMD.EOL + "</tr>" + PMD.EOL                + "</table></tr></table></body></html>" + PMD.EOL;    }    @Test    public void testShowSuppressions() throws Exception {        Report rep = createEmptyReportWithSuppression();        Renderer renderer = getRenderer();        renderer.setShowSuppressedViolations(true);        String actual = ReportTest.render(renderer, rep);        assertEquals("<html><head><title>PMD</title></head><body>" + PMD.EOL + "<center><h2>Summary</h2></center>"                + PMD.EOL + "<table align=\"center\" cellspacing=\"0\" cellpadding=\"3\">" + PMD.EOL                + "<tr><th>Rule name</th><th>Number of violations</th></tr>" + PMD.EOL + "</table>" + PMD.EOL                + "<center><h2>Detail</h2></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL                + "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL + "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL                + "</table><hr/><center><h3>Suppressed warnings</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>"                + PMD.EOL + "<th>File</th><th>Line</th><th>Rule</th><th>NOPMD or Annotation</th><th>Reason</th></tr>"                + PMD.EOL + "<tr bgcolor=\"lightgrey\"> " + PMD.EOL + "<td align=\"left\"></td>" + PMD.EOL                + "<td align=\"center\">1</td>" + PMD.EOL + "<td align=\"center\">Foo</td>" + PMD.EOL                + "<td align=\"center\">NOPMD</td>" + PMD.EOL + "<td align=\"center\">test</td>" + PMD.EOL + "</tr>"                + PMD.EOL + "</table></tr></table></body></html>" + PMD.EOL, actual);    }    @Test    public void testHideSuppressions() throws Exception {        Report rep = createEmptyReportWithSuppression();        Renderer renderer = getRenderer();        renderer.setShowSuppressedViolations(false);        String actual = ReportTest.render(renderer, rep);        assertEquals(getExpectedEmpty(), actual);    }    private Report createEmptyReportWithSuppression() {        Report rep = new Report();        Map<Integer, String> suppressions = new HashMap<>();        suppressions.put(1, "test");        rep.suppress(suppressions);        RuleContext ctx = new RuleContext();        ParametricRuleViolation<Node> violation = new ParametricRuleViolation<>(new FooRule(), ctx, null,                "suppress test");        violation.setLines(1, 1);        rep.addRuleViolation(violation);        return rep;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cli;import java.util.HashSet;import java.util.List;import java.util.Set;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.PMDConfiguration;import net.sourceforge.pmd.lang.DummyLanguageModule;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.util.datasource.DataSource;public class PMDFilelistTest {    @Test    public void testGetApplicableFiles() {        Set<Language> languages = new HashSet<>();        languages.add(new DummyLanguageModule());        PMDConfiguration configuration = new PMDConfiguration();        configuration.setInputFilePath("src/test/resources/net/sourceforge/pmd/cli/filelist.txt");        List<DataSource> applicableFiles = PMD.getApplicableFiles(configuration, languages);        Assert.assertEquals(2, applicableFiles.size());        Assert.assertTrue(applicableFiles.get(0).getNiceFileName(false, "").endsWith("somefile.dummy"));        Assert.assertTrue(applicableFiles.get(1).getNiceFileName(false, "").endsWith("anotherfile.dummy"));    }    @Test    public void testGetApplicableFilesMultipleLines() {        Set<Language> languages = new HashSet<>();        languages.add(new DummyLanguageModule());        PMDConfiguration configuration = new PMDConfiguration();        configuration.setInputFilePath("src/test/resources/net/sourceforge/pmd/cli/filelist2.txt");        List<DataSource> applicableFiles = PMD.getApplicableFiles(configuration, languages);        Assert.assertEquals(3, applicableFiles.size());        Assert.assertTrue(applicableFiles.get(0).getNiceFileName(false, "").endsWith("somefile.dummy"));        Assert.assertTrue(applicableFiles.get(1).getNiceFileName(false, "").endsWith("anotherfile.dummy"));        Assert.assertTrue(applicableFiles.get(2).getNiceFileName(false, "").endsWith("somefile.dummy"));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cli;import org.junit.Assert;import org.junit.Before;import org.junit.Rule;import org.junit.Test;import org.junit.contrib.java.lang.system.ExpectedSystemExit;import org.junit.contrib.java.lang.system.RestoreSystemProperties;/** * Unit test for {@link PMDCommandLineInterface} */public class PMDCommandLineInterfaceTest {    @Rule    public final ExpectedSystemExit exit = ExpectedSystemExit.none();    @Rule // Restores system properties after test    public final RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();    @Before    public void clearSystemProperties() {        System.clearProperty(PMDCommandLineInterface.NO_EXIT_AFTER_RUN);        System.clearProperty(PMDCommandLineInterface.STATUS_CODE_PROPERTY);    }    @Test    public void testProperties() {        PMDParameters params = new PMDParameters();        String[] args = { "-d", "source_folder", "-f", "yahtml", "-P", "outputDir=output_folder", "-R", "java-empty", };        PMDCommandLineInterface.extractParameters(params, args, "PMD");        Assert.assertEquals("output_folder", params.getProperties().getProperty("outputDir"));    }    @Test    public void testMultipleProperties() {        PMDParameters params = new PMDParameters();        String[] args = { "-d", "source_folder", "-f", "ideaj", "-P", "sourcePath=/home/user/source/", "-P",            "fileName=Foo.java", "-P", "classAndMethodName=Foo.method", "-R", "java-empty", };        PMDCommandLineInterface.extractParameters(params, args, "PMD");        Assert.assertEquals("/home/user/source/", params.getProperties().getProperty("sourcePath"));        Assert.assertEquals("Foo.java", params.getProperties().getProperty("fileName"));        Assert.assertEquals("Foo.method", params.getProperties().getProperty("classAndMethodName"));    }    @Test    public void testSetStatusCodeOrExitDoExit() {        exit.expectSystemExitWithStatus(0);        PMDCommandLineInterface.setStatusCodeOrExit(0);    }    @Test    public void testSetStatusCodeOrExitSetStatus() {        System.setProperty(PMDCommandLineInterface.NO_EXIT_AFTER_RUN, "1");        PMDCommandLineInterface.setStatusCodeOrExit(0);        Assert.assertEquals(System.getProperty(PMDCommandLineInterface.STATUS_CODE_PROPERTY), "0");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cli;import org.apache.commons.lang3.reflect.FieldUtils;import org.junit.Assert;import org.junit.Test;public class PMDParametersTest {    @Test    public void testVersion() throws Exception {        PMDParameters parameters = new PMDParameters();        // no language set, uses default language        Assert.assertEquals("1.7", parameters.getVersion());        // now set lanuage        FieldUtils.writeDeclaredField(parameters, "language", "dummy2", true);        Assert.assertEquals("1.0", parameters.getVersion());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.io.ByteArrayInputStream;import java.io.InputStream;import java.io.Reader;import java.nio.charset.Charset;import org.apache.commons.io.IOUtils;import org.junit.Assert;import org.junit.Test;public class RuleSetFactoryCompatibilityTest {    private static final Charset ISO_8859_1 = Charset.forName("ISO-8859-1");    private static final Charset UTF_8 = Charset.forName("UTF-8");    @Test    public void testCorrectOldReference() throws Exception {        final String ruleset = "<?xml version=\"1.0\"?>\n" + "\n" + "<ruleset name=\"Test\"\n"                + "    xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n"                + "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"                + "    xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\n"                + "  <description>Test</description>\n" + "\n"                + " <rule ref=\"rulesets/dummy/notexisting.xml/DummyBasicMockRule\" />\n" + "</ruleset>\n";        RuleSetFactory factory = new RuleSetFactory();        factory.getCompatibilityFilter().addFilterRuleMoved("dummy", "notexisting", "basic", "DummyBasicMockRule");        RuleSet createdRuleSet = createRulesetFromString(ruleset, factory);        Assert.assertNotNull(createdRuleSet.getRuleByName("DummyBasicMockRule"));    }        @Test    public void testCorrectMovedAndRename() throws Exception {        final String ruleset = "<?xml version=\"1.0\"?>\n" + "\n" + "<ruleset name=\"Test\"\n"                + "    xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n"                + "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"                + "    xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\n"                + "  <description>Test</description>\n" + "\n"                + " <rule ref=\"rulesets/dummy/notexisting.xml/OldDummyBasicMockRule\" />\n" + "</ruleset>\n";        RuleSetFactoryCompatibility rsfc = new RuleSetFactoryCompatibility();        rsfc.addFilterRuleMoved("dummy", "notexisting", "basic", "OldDummyBasicMockRule");        rsfc.addFilterRuleRenamed("dummy", "basic", "OldDummyBasicMockRule", "NewNameForDummyBasicMockRule");        InputStream stream = new ByteArrayInputStream(ruleset.getBytes(ISO_8859_1));        Reader filtered = rsfc.filterRuleSetFile(stream);        String out = IOUtils.toString(filtered);                Assert.assertFalse(out.contains("notexisting.xml"));        Assert.assertFalse(out.contains("OldDummyBasicMockRule"));        Assert.assertTrue(out.contains("<rule ref=\"rulesets/dummy/basic.xml/NewNameForDummyBasicMockRule\" />"));    }    @Test    public void testExclusion() throws Exception {        final String ruleset = "<?xml version=\"1.0\"?>\n" + "\n" + "<ruleset name=\"Test\"\n"                + "    xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n"                + "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"                + "    xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\n"                + "  <description>Test</description>\n" + "\n" + " <rule ref=\"rulesets/dummy/basic.xml\">\n"                + "   <exclude name=\"OldNameOfSampleXPathRule\"/>\n" + " </rule>\n" + "</ruleset>\n";        RuleSetFactory factory = new RuleSetFactory();        factory.getCompatibilityFilter().addFilterRuleRenamed("dummy", "basic", "OldNameOfSampleXPathRule",                "SampleXPathRule");        RuleSet createdRuleSet = createRulesetFromString(ruleset, factory);        Assert.assertNotNull(createdRuleSet.getRuleByName("DummyBasicMockRule"));        Assert.assertNull(createdRuleSet.getRuleByName("SampleXPathRule"));    }    @Test    public void testFilter() throws Exception {        RuleSetFactoryCompatibility rsfc = new RuleSetFactoryCompatibility();        rsfc.addFilterRuleMoved("dummy", "notexisting", "basic", "DummyBasicMockRule");        rsfc.addFilterRuleRemoved("dummy", "basic", "DeletedRule");        rsfc.addFilterRuleRenamed("dummy", "basic", "OldNameOfBasicMockRule", "NewNameOfBasicMockRule");        String in = "<?xml version=\"1.0\"?>\n" + "\n" + "<ruleset name=\"Test\"\n"                + "    xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n"                + "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"                + "    xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\n"                + "  <description>Test</description>\n" + "\n"                + " <rule ref=\"rulesets/dummy/notexisting.xml/DummyBasicMockRule\" />\n"                + " <rule ref=\"rulesets/dummy/basic.xml/DeletedRule\" />\n"                + " <rule ref=\"rulesets/dummy/basic.xml/OldNameOfBasicMockRule\" />\n" + "</ruleset>\n";        InputStream stream = new ByteArrayInputStream(in.getBytes(ISO_8859_1));        Reader filtered = rsfc.filterRuleSetFile(stream);        String out = IOUtils.toString(filtered);        Assert.assertFalse(out.contains("notexisting.xml"));        Assert.assertTrue(out.contains("<rule ref=\"rulesets/dummy/basic.xml/DummyBasicMockRule\" />"));        Assert.assertFalse(out.contains("DeletedRule"));        Assert.assertFalse(out.contains("OldNameOfBasicMockRule"));        Assert.assertTrue(out.contains("<rule ref=\"rulesets/dummy/basic.xml/NewNameOfBasicMockRule\" />"));    }    @Test    public void testExclusionFilter() throws Exception {        RuleSetFactoryCompatibility rsfc = new RuleSetFactoryCompatibility();        rsfc.addFilterRuleRenamed("dummy", "basic", "AnotherOldNameOfBasicMockRule", "NewNameOfBasicMockRule");        String in = "<?xml version=\"1.0\"?>\n" + "\n" + "<ruleset name=\"Test\"\n"                + "    xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n"                + "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"                + "    xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\n"                + "  <description>Test</description>\n" + "\n" + " <rule ref=\"rulesets/dummy/basic.xml\">\n"                + "   <exclude name=\"AnotherOldNameOfBasicMockRule\"/>\n" + " </rule>\n" + "</ruleset>\n";        InputStream stream = new ByteArrayInputStream(in.getBytes(ISO_8859_1));        Reader filtered = rsfc.filterRuleSetFile(stream);        String out = IOUtils.toString(filtered);        Assert.assertFalse(out.contains("OldNameOfBasicMockRule"));        Assert.assertTrue(out.contains("<exclude name=\"NewNameOfBasicMockRule\" />"));    }    @Test    public void testEncoding() {        RuleSetFactoryCompatibility rsfc = new RuleSetFactoryCompatibility();        String testString;        testString = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><x></x>";        Assert.assertEquals("ISO-8859-1", rsfc.determineEncoding(testString.getBytes(ISO_8859_1)));        testString = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><x></x>";        Assert.assertEquals("UTF-8", rsfc.determineEncoding(testString.getBytes(ISO_8859_1)));    }    private RuleSet createRulesetFromString(final String ruleset, RuleSetFactory factory)            throws RuleSetNotFoundException {        return factory.createRuleSet(new RuleSetReferenceId(null) {            @Override            public InputStream getInputStream(ClassLoader classLoader) throws RuleSetNotFoundException {                return new ByteArrayInputStream(ruleset.getBytes(UTF_8));            }        });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import java.io.File;import org.junit.Test;import net.sourceforge.pmd.lang.DummyLanguageModule;import net.sourceforge.pmd.lang.LanguageFilenameFilter;import net.sourceforge.pmd.lang.LanguageRegistry;/** * Tests on FileSelector. * * @author pieter_van_raemdonck - Application Engineers NV/SA - www.ae.be */public class FileSelectorTest {    /**     * Test wanted selection of a source file.     */    @Test    public void testWantedFile() {        LanguageFilenameFilter fileSelector = new LanguageFilenameFilter(                LanguageRegistry.getLanguage(DummyLanguageModule.NAME));        File javaFile = new File("/path/to/myFile.dummy");        boolean selected = fileSelector.accept(javaFile.getParentFile(), javaFile.getName());        assertEquals("This file should be selected !", true, selected);    }    /**     * Test unwanted selection of a non source file.     */    @Test    public void testUnwantedFile() {        LanguageFilenameFilter fileSelector = new LanguageFilenameFilter(                LanguageRegistry.getLanguage(DummyLanguageModule.NAME));        File javaFile = new File("/path/to/myFile.txt");        boolean selected = fileSelector.accept(javaFile.getParentFile(), javaFile.getName());        assertEquals("Not-source file must not be selected!", false, selected);    }    /**     * Test unwanted selection of a java file.     */    @Test    public void testUnwantedJavaFile() {        LanguageFilenameFilter fileSelector = new LanguageFilenameFilter(                LanguageRegistry.getLanguage(DummyLanguageModule.NAME));        File javaFile = new File("/path/to/MyClass.java");        boolean selected = fileSelector.accept(javaFile.getParentFile(), javaFile.getName());        assertEquals("Unwanted java file must not be selected!", false, selected);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import java.util.Arrays;import java.util.Collection;import org.junit.Test;import org.junit.runner.RunWith;import org.junit.runners.Parameterized;import org.junit.runners.Parameterized.Parameters;import junit.framework.JUnit4TestAdapter;@RunWith(Parameterized.class)public class ReadableDurationTest {    private Integer value;    private String expected;    public ReadableDurationTest(String expected, Integer value) {        this.value = value;        this.expected = expected;    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] { { "0s", 35 }, { "25s", (25 * 1000) }, { "5m 0s", (60 * 1000 * 5) },            { "2h 0m 0s", (60 * 1000 * 120) }, });    }    @Test    public void test() {        assertEquals(expected, new Report.ReadableDuration(value).getTime());    }    public static junit.framework.Test suite() {        return new JUnit4TestAdapter(ReadableDurationTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertSame;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.List;import java.util.Random;import org.junit.Test;import net.sourceforge.pmd.lang.ast.DummyNode;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.rule.MockRule;import net.sourceforge.pmd.lang.rule.ParametricRuleViolation;import junit.framework.JUnit4TestAdapter;public class RuleViolationComparatorTest {    @Test    public void testComparator() {        Rule rule1 = new MockRule("name1", "desc", "msg", "rulesetname1");        Rule rule2 = new MockRule("name2", "desc", "msg", "rulesetname2");        // RuleViolations created in pre-sorted order        RuleViolation[] expectedOrder = new RuleViolation[12];        int index = 0;        // Different begin line        expectedOrder[index++] = createJavaRuleViolation(rule1, "file1", 10, "desc1", 0, 20, 80);        expectedOrder[index++] = createJavaRuleViolation(rule1, "file1", 20, "desc1", 0, 20, 80);        // Different description        expectedOrder[index++] = createJavaRuleViolation(rule1, "file2", 10, "desc1", 0, 20, 80);        expectedOrder[index++] = createJavaRuleViolation(rule1, "file2", 10, "desc2", 0, 20, 80);        // Different begin column        expectedOrder[index++] = createJavaRuleViolation(rule1, "file3", 10, "desc1", 0, 20, 80);        expectedOrder[index++] = createJavaRuleViolation(rule1, "file3", 10, "desc1", 10, 20, 80);        // Different end line        expectedOrder[index++] = createJavaRuleViolation(rule1, "file4", 10, "desc1", 0, 20, 80);        expectedOrder[index++] = createJavaRuleViolation(rule1, "file4", 10, "desc1", 0, 30, 80);        // Different end column        expectedOrder[index++] = createJavaRuleViolation(rule1, "file5", 10, "desc1", 0, 20, 80);        expectedOrder[index++] = createJavaRuleViolation(rule1, "file5", 10, "desc1", 0, 20, 90);        // Different rule name        expectedOrder[index++] = createJavaRuleViolation(rule1, "file6", 10, "desc1", 0, 20, 80);        expectedOrder[index++] = createJavaRuleViolation(rule2, "file6", 10, "desc1", 0, 20, 80);        // Randomize        List<RuleViolation> ruleViolations = new ArrayList<>(Arrays.asList(expectedOrder));        long seed = System.nanoTime();        Random random = new Random(seed);        Collections.shuffle(ruleViolations, random);        // Sort        Collections.sort(ruleViolations, RuleViolationComparator.INSTANCE);        // Check        int count = 0;        for (int i = 0; i < expectedOrder.length; i++) {            count++;            assertSame("Wrong RuleViolation " + i + ", usind seed: " + seed, expectedOrder[i], ruleViolations.get(i));        }        assertEquals("Missing assertion for every RuleViolation", expectedOrder.length, count);    }    private RuleViolation createJavaRuleViolation(Rule rule, String fileName, int beginLine, String description,            int beginColumn, int endLine, int endColumn) {        RuleContext ruleContext = new RuleContext();        ruleContext.setSourceCodeFilename(fileName);        DummyNode simpleNode = new DummyNode(1);        simpleNode.testingOnlySetBeginLine(beginLine);        simpleNode.testingOnlySetBeginColumn(beginColumn);        simpleNode.testingOnlySetEndLine(endLine);        simpleNode.testingOnlySetEndColumn(endColumn);        RuleViolation ruleViolation = new ParametricRuleViolation<Node>(rule, ruleContext, simpleNode, description);        return ruleViolation;    }    public static junit.framework.Test suite() {        return new JUnit4TestAdapter(RuleViolationComparatorTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertTrue;import org.junit.Test;import net.sourceforge.pmd.lang.Dummy2LanguageModule;import net.sourceforge.pmd.lang.DummyLanguageModule;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.rule.MockRule;import net.sourceforge.pmd.lang.rule.RuleReference;import net.sourceforge.pmd.lang.rule.properties.StringProperty;public class RuleReferenceTest {    @Test    public void testRuleSetReference() {        RuleReference ruleReference = new RuleReference();        RuleSetReference ruleSetReference = new RuleSetReference();        ruleReference.setRuleSetReference(ruleSetReference);        assertEquals("Not same rule set reference", ruleSetReference, ruleReference.getRuleSetReference());    }    @Test    public void testOverride() {        final StringProperty PROPERTY1_DESCRIPTOR = new StringProperty("property1", "Test property", null, 0f);        MockRule rule = new MockRule();        rule.definePropertyDescriptor(PROPERTY1_DESCRIPTOR);        rule.setLanguage(LanguageRegistry.getLanguage(Dummy2LanguageModule.NAME));        rule.setName("name1");        rule.setProperty(PROPERTY1_DESCRIPTOR, "value1");        rule.setMessage("message1");        rule.setDescription("description1");        rule.addExample("example1");        rule.setExternalInfoUrl("externalInfoUrl1");        rule.setPriority(RulePriority.HIGH);        final StringProperty PROPERTY2_DESCRIPTOR = new StringProperty("property2", "Test property", null, 0f);        RuleReference ruleReference = new RuleReference();        ruleReference.setRule(rule);        ruleReference.definePropertyDescriptor(PROPERTY2_DESCRIPTOR);        ruleReference.setLanguage(LanguageRegistry.getLanguage(DummyLanguageModule.NAME));        ruleReference                .setMinimumLanguageVersion(LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.3"));        ruleReference                .setMaximumLanguageVersion(LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.7"));        ruleReference.setDeprecated(true);        ruleReference.setName("name2");        ruleReference.setProperty(PROPERTY1_DESCRIPTOR, "value2");        ruleReference.setProperty(PROPERTY2_DESCRIPTOR, "value3");        ruleReference.setMessage("message2");        ruleReference.setDescription("description2");        ruleReference.addExample("example2");        ruleReference.setExternalInfoUrl("externalInfoUrl2");        ruleReference.setPriority(RulePriority.MEDIUM_HIGH);        assertEquals("Override failed", LanguageRegistry.getLanguage(DummyLanguageModule.NAME),                ruleReference.getLanguage());        assertEquals("Override failed", LanguageRegistry.getLanguage(DummyLanguageModule.NAME),                ruleReference.getOverriddenLanguage());        assertEquals("Override failed", LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.3"),                ruleReference.getMinimumLanguageVersion());        assertEquals("Override failed", LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.3"),                ruleReference.getOverriddenMinimumLanguageVersion());        assertEquals("Override failed", LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.7"),                ruleReference.getMaximumLanguageVersion());        assertEquals("Override failed", LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.7"),                ruleReference.getOverriddenMaximumLanguageVersion());        assertEquals("Override failed", false, ruleReference.getRule().isDeprecated());        assertEquals("Override failed", true, ruleReference.isDeprecated());        assertEquals("Override failed", true, ruleReference.isOverriddenDeprecated());        assertEquals("Override failed", "name2", ruleReference.getName());        assertEquals("Override failed", "name2", ruleReference.getOverriddenName());        assertEquals("Override failed", "value2", ruleReference.getProperty(PROPERTY1_DESCRIPTOR));        assertEquals("Override failed", "value3", ruleReference.getProperty(PROPERTY2_DESCRIPTOR));        assertTrue("Override failed", ruleReference.getPropertyDescriptors().contains(PROPERTY1_DESCRIPTOR));        assertTrue("Override failed", ruleReference.getPropertyDescriptors().contains(PROPERTY2_DESCRIPTOR));        assertFalse("Override failed", ruleReference.getOverriddenPropertyDescriptors().contains(PROPERTY1_DESCRIPTOR));        assertTrue("Override failed", ruleReference.getOverriddenPropertyDescriptors().contains(PROPERTY2_DESCRIPTOR));        assertTrue("Override failed",                ruleReference.getPropertiesByPropertyDescriptor().containsKey(PROPERTY1_DESCRIPTOR));        assertTrue("Override failed",                ruleReference.getPropertiesByPropertyDescriptor().containsKey(PROPERTY2_DESCRIPTOR));        assertTrue("Override failed",                ruleReference.getOverriddenPropertiesByPropertyDescriptor().containsKey(PROPERTY1_DESCRIPTOR));        assertTrue("Override failed",                ruleReference.getOverriddenPropertiesByPropertyDescriptor().containsKey(PROPERTY2_DESCRIPTOR));        assertEquals("Override failed", "message2", ruleReference.getMessage());        assertEquals("Override failed", "message2", ruleReference.getOverriddenMessage());        assertEquals("Override failed", "description2", ruleReference.getDescription());        assertEquals("Override failed", "description2", ruleReference.getOverriddenDescription());        assertEquals("Override failed", 2, ruleReference.getExamples().size());        assertEquals("Override failed", "example1", ruleReference.getExamples().get(0));        assertEquals("Override failed", "example2", ruleReference.getExamples().get(1));        assertEquals("Override failed", "example2", ruleReference.getOverriddenExamples().get(0));        assertEquals("Override failed", "externalInfoUrl2", ruleReference.getExternalInfoUrl());        assertEquals("Override failed", "externalInfoUrl2", ruleReference.getOverriddenExternalInfoUrl());        assertEquals("Override failed", RulePriority.MEDIUM_HIGH, ruleReference.getPriority());        assertEquals("Override failed", RulePriority.MEDIUM_HIGH, ruleReference.getOverriddenPriority());    }    @Test    public void testNotOverride() {        final StringProperty PROPERTY1_DESCRIPTOR = new StringProperty("property1", "Test property", null, 0f);        MockRule rule = new MockRule();        rule.definePropertyDescriptor(PROPERTY1_DESCRIPTOR);        rule.setLanguage(LanguageRegistry.getLanguage(DummyLanguageModule.NAME));        rule.setMinimumLanguageVersion(LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.3"));        rule.setMaximumLanguageVersion(LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.7"));        rule.setName("name1");        rule.setProperty(PROPERTY1_DESCRIPTOR, "value1");        rule.setMessage("message1");        rule.setDescription("description1");        rule.addExample("example1");        rule.setExternalInfoUrl("externalInfoUrl1");        rule.setPriority(RulePriority.HIGH);        RuleReference ruleReference = new RuleReference();        ruleReference.setRule(rule);        ruleReference.setLanguage(LanguageRegistry.getLanguage(DummyLanguageModule.NAME));        ruleReference                .setMinimumLanguageVersion(LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.3"));        ruleReference                .setMaximumLanguageVersion(LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.7"));        ruleReference.setDeprecated(false);        ruleReference.setName("name1");        ruleReference.setProperty(PROPERTY1_DESCRIPTOR, "value1");        ruleReference.setMessage("message1");        ruleReference.setDescription("description1");        ruleReference.addExample("example1");        ruleReference.setExternalInfoUrl("externalInfoUrl1");        ruleReference.setPriority(RulePriority.HIGH);        assertEquals("Override failed", LanguageRegistry.getLanguage(DummyLanguageModule.NAME),                ruleReference.getLanguage());        assertNull("Override failed", ruleReference.getOverriddenLanguage());        assertEquals("Override failed", LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.3"),                ruleReference.getMinimumLanguageVersion());        assertNull("Override failed", ruleReference.getOverriddenMinimumLanguageVersion());        assertEquals("Override failed", LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.7"),                ruleReference.getMaximumLanguageVersion());        assertNull("Override failed", ruleReference.getOverriddenMaximumLanguageVersion());        assertEquals("Override failed", false, ruleReference.isDeprecated());        assertNull("Override failed", ruleReference.isOverriddenDeprecated());        assertEquals("Override failed", "name1", ruleReference.getName());        assertNull("Override failed", ruleReference.getOverriddenName());        assertEquals("Override failed", "value1", ruleReference.getProperty(PROPERTY1_DESCRIPTOR));        assertEquals("Override failed", "message1", ruleReference.getMessage());        assertNull("Override failed", ruleReference.getOverriddenMessage());        assertEquals("Override failed", "description1", ruleReference.getDescription());        assertNull("Override failed", ruleReference.getOverriddenDescription());        assertEquals("Override failed", 1, ruleReference.getExamples().size());        assertEquals("Override failed", "example1", ruleReference.getExamples().get(0));        assertNull("Override failed", ruleReference.getOverriddenExamples());        assertEquals("Override failed", "externalInfoUrl1", ruleReference.getExternalInfoUrl());        assertNull("Override failed", ruleReference.getOverriddenExternalInfoUrl());        assertEquals("Override failed", RulePriority.HIGH, ruleReference.getPriority());        assertNull("Override failed", ruleReference.getOverriddenPriority());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.io.ByteArrayOutputStream;import java.util.Random;import org.junit.After;import org.junit.Assert;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.RuleSet.RuleSetBuilder;import net.sourceforge.pmd.lang.rule.RuleReference;/** * Unit test for {@link RuleSetWriter}. * */public class RuleSetWriterTest {    private ByteArrayOutputStream out;    private RuleSetWriter writer;    /**     * Prepare the output stream.     */    @Before    public void setupOutputStream() {        out = new ByteArrayOutputStream();        writer = new RuleSetWriter(out);    }    /**     * Closes the output stream at the end.     */    @After    public void cleanupStream() {        if (writer != null) {            writer.close();        }    }    /**     * Tests the exclude rule behavior. See bug #945.     *     * @throws Exception     *             any error     */    @Test    public void testWrite() throws Exception {        RuleSet braces = new RuleSetFactory().createRuleSet("net/sourceforge/pmd/TestRuleset1.xml");        RuleSet ruleSet = new RuleSetBuilder(new Random().nextLong())                .addRuleSetByReference(braces, true, "MockRule2")                .build();        writer.write(ruleSet);        String written = out.toString("UTF-8");        Assert.assertTrue(written.contains("<exclude name=\"MockRule2\""));    }    /**     * Unit test for #1312 see https://sourceforge.net/p/pmd/bugs/1312/     *     * @throws Exception     *             any error     */    @Test    public void testRuleReferenceOverriddenName() throws Exception {        RuleSetFactory ruleSetFactory = new RuleSetFactory();        RuleSet rs = ruleSetFactory.createRuleSet("dummy-basic");        RuleSetReference ruleSetReference = new RuleSetReference("rulesets/dummy/basic.xml");        RuleReference ruleRef = new RuleReference();        ruleRef.setRule(rs.getRuleByName("DummyBasicMockRule"));        ruleRef.setRuleSetReference(ruleSetReference);        ruleRef.setName("Foo"); // override the name        RuleSet ruleSet = ruleSetFactory.createSingleRuleRuleSet(ruleRef);        writer.write(ruleSet);        String written = out.toString("UTF-8");        Assert.assertTrue(written.contains("ref=\"rulesets/dummy/basic.xml/DummyBasicMockRule\""));    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.HashMap;import java.util.List;import java.util.Map;import org.junit.Test;import net.sourceforge.pmd.lang.DummyLanguageModule;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.ast.DummyNode;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.rule.AbstractRule;import net.sourceforge.pmd.lang.rule.ParametricRuleViolation;import net.sourceforge.pmd.lang.rule.properties.IntegerProperty;import net.sourceforge.pmd.lang.rule.properties.StringProperty;public class AbstractRuleTest {    private static class MyRule extends AbstractRule {        private static final StringProperty FOO_PROPERTY = new StringProperty("foo", "foo property", "x", 1.0f);        private static final StringProperty XPATH_PROPERTY = new StringProperty("xpath", "xpath property", "", 2.0f);        MyRule() {            definePropertyDescriptor(FOO_PROPERTY);            definePropertyDescriptor(XPATH_PROPERTY);            setName("MyRule");            setMessage("my rule msg");            setPriority(RulePriority.MEDIUM);            setProperty(FOO_PROPERTY, "value");        }        @Override        public void apply(List<? extends Node> nodes, RuleContext ctx) {        }    }    private static class MyOtherRule extends AbstractRule {        private static final PropertyDescriptor FOO_PROPERTY = new StringProperty("foo", "foo property", "x", 1.0f);        MyOtherRule() {            definePropertyDescriptor(FOO_PROPERTY);            setName("MyOtherRule");            setMessage("my other rule");            setPriority(RulePriority.MEDIUM);            setProperty(FOO_PROPERTY, "value");        }        @Override        public void apply(List<? extends Node> nodes, RuleContext ctx) {        }    }    @Test    public void testCreateRV() {        MyRule r = new MyRule();        r.setRuleSetName("foo");        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename");        DummyNode s = new DummyNode(1);        s.testingOnlySetBeginColumn(5);        s.testingOnlySetBeginLine(5);        RuleViolation rv = new ParametricRuleViolation(r, ctx, s, r.getMessage());        assertEquals("Line number mismatch!", 5, rv.getBeginLine());        assertEquals("Filename mismatch!", "filename", rv.getFilename());        assertEquals("Rule object mismatch!", r, rv.getRule());        assertEquals("Rule msg mismatch!", "my rule msg", rv.getDescription());        assertEquals("RuleSet name mismatch!", "foo", rv.getRule().getRuleSetName());    }    @Test    public void testCreateRV2() {        MyRule r = new MyRule();        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename");        DummyNode s = new DummyNode(1);        s.testingOnlySetBeginColumn(5);        s.testingOnlySetBeginLine(5);        RuleViolation rv = new ParametricRuleViolation(r, ctx, s, "specificdescription");        assertEquals("Line number mismatch!", 5, rv.getBeginLine());        assertEquals("Filename mismatch!", "filename", rv.getFilename());        assertEquals("Rule object mismatch!", r, rv.getRule());        assertEquals("Rule description mismatch!", "specificdescription", rv.getDescription());    }    @Test    public void testRuleWithVariableInMessage() {        MyRule r = new MyRule();        r.definePropertyDescriptor(new IntegerProperty("testInt", "description", 0, 100, 10, 0));        r.setMessage("Message ${packageName} ${className} ${methodName} ${variableName} ${testInt} ${noSuchProperty}");        RuleContext ctx = new RuleContext();        ctx.setLanguageVersion(LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getDefaultVersion());        ctx.setReport(new Report());        ctx.setSourceCodeFilename("filename");        DummyNode s = new DummyNode(1);        s.testingOnlySetBeginColumn(5);        s.testingOnlySetBeginLine(5);        s.setImage("TestImage");        r.addViolation(ctx, s);        RuleViolation rv = ctx.getReport().getViolationTree().iterator().next();        assertEquals("Message foo    10 ${noSuchProperty}", rv.getDescription());    }    @Test    public void testRuleSuppress() {        MyRule r = new MyRule();        RuleContext ctx = new RuleContext();        Map<Integer, String> m = new HashMap<>();        m.put(Integer.valueOf(5), "");        ctx.setReport(new Report());        ctx.getReport().suppress(m);        ctx.setSourceCodeFilename("filename");        DummyNode n = new DummyNode(1);        n.testingOnlySetBeginColumn(5);        n.testingOnlySetBeginLine(5);        RuleViolation rv = new ParametricRuleViolation(r, ctx, n, "specificdescription");        ctx.getReport().addRuleViolation(rv);        assertTrue(ctx.getReport().isEmpty());    }    @Test    public void testEquals1() {        MyRule r = new MyRule();        assertFalse("A rule is never equals to null!", r.equals(null));    }    @Test    public void testEquals2() {        MyRule r = new MyRule();        assertEquals("A rule must be equals to itself", r, r);    }    @Test    public void testEquals3() {        MyRule r1 = new MyRule();        MyRule r2 = new MyRule();        assertEquals("Two instances of the same rule are equal", r1, r2);        assertEquals("Hashcode for two instances of the same rule must be equal", r1.hashCode(), r2.hashCode());    }    @Test    public void testEquals4() {        MyRule myRule = new MyRule();        assertFalse("A rule cannot be equal to an object of another class", myRule.equals("MyRule"));    }    @Test    public void testEquals5() {        MyRule myRule = new MyRule();        MyOtherRule myOtherRule = new MyOtherRule();        assertFalse("Two rules from different classes cannot be equal", myRule.equals(myOtherRule));    }    @Test    public void testEquals6() {        MyRule r1 = new MyRule();        MyRule r2 = new MyRule();        r2.setName("MyRule2");        assertFalse("Rules with different names cannot be equal", r1.equals(r2));    }    @Test    public void testEquals7() {        MyRule r1 = new MyRule();        MyRule r2 = new MyRule();        r2.setPriority(RulePriority.HIGH);        assertFalse("Rules with different priority levels cannot be equal", r1.equals(r2));    }    @Test    public void testEquals8() {        MyRule r1 = new MyRule();        r1.setProperty(MyRule.XPATH_PROPERTY, "something");        MyRule r2 = new MyRule();        r2.setProperty(MyRule.XPATH_PROPERTY, "something else");        assertFalse("Rules with different properties values cannot be equal", r1.equals(r2));    }    @Test    public void testEquals9() {        MyRule r1 = new MyRule();        MyRule r2 = new MyRule();        r2.setProperty(MyRule.XPATH_PROPERTY, "something else");        assertFalse("Rules with different properties cannot be equal", r1.equals(r2));    }    @Test    public void testEquals10() {        MyRule r1 = new MyRule();        MyRule r2 = new MyRule();        r2.setMessage("another message");        assertEquals("Rules with different messages are still equal", r1, r2);        assertEquals("Rules that are equal must have the an equal hashcode", r1.hashCode(), r2.hashCode());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(AbstractRuleTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;import static com.github.tomakehurst.wiremock.client.WireMock.findAll;import static com.github.tomakehurst.wiremock.client.WireMock.get;import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;import static com.github.tomakehurst.wiremock.client.WireMock.head;import static com.github.tomakehurst.wiremock.client.WireMock.headRequestedFor;import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;import static com.github.tomakehurst.wiremock.client.WireMock.urlMatching;import static com.github.tomakehurst.wiremock.client.WireMock.verify;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.io.File;import java.io.InputStream;import java.util.List;import org.apache.commons.io.IOUtils;import org.junit.Test;import com.github.tomakehurst.wiremock.junit.WireMockRule;public class RuleSetReferenceIdTest {    private static void assertRuleSetReferenceId(final boolean expectedExternal, final String expectedRuleSetFileName,            final boolean expectedAllRules, final String expectedRuleName, final String expectedToString,            final RuleSetReferenceId reference) {        assertEquals("Wrong external", expectedExternal, reference.isExternal());        assertEquals("Wrong RuleSet file name", expectedRuleSetFileName, reference.getRuleSetFileName());        assertEquals("Wrong all Rule reference", expectedAllRules, reference.isAllRules());        assertEquals("Wrong Rule name", expectedRuleName, reference.getRuleName());        assertEquals("Wrong toString()", expectedToString, reference.toString());    }    @Test(expected = IllegalArgumentException.class)    public void testCommaInSingleId() {        new RuleSetReferenceId("bad,id");    }    @Test(expected = IllegalArgumentException.class)    public void testInternalWithInternal() {        new RuleSetReferenceId("SomeRule", new RuleSetReferenceId("SomeOtherRule"));    }    @Test(expected = IllegalArgumentException.class)    public void testExternalWithExternal() {        new RuleSetReferenceId("someruleset.xml/SomeRule", new RuleSetReferenceId("someruleset.xml/SomeOtherRule"));    }    @Test(expected = IllegalArgumentException.class)    public void testExternalWithInternal() {        new RuleSetReferenceId("someruleset.xml/SomeRule", new RuleSetReferenceId("SomeOtherRule"));    }    @Test    public void testInteralWithExternal() {        // This is okay        new RuleSetReferenceId("SomeRule", new RuleSetReferenceId("someruleset.xml/SomeOtherRule"));    }    @Test    public void testEmptyRuleSet() {        // This is representative of how the Test framework creates        // RuleSetReferenceId from static RuleSet XMLs        RuleSetReferenceId reference = new RuleSetReferenceId(null);        assertRuleSetReferenceId(true, null, true, null, "anonymous all Rule", reference);    }    @Test    public void testInternalWithExternalRuleSet() {        // This is representative of how the RuleSetFactory temporarily pairs an        // internal reference        // with an external reference.        RuleSetReferenceId internalRuleSetReferenceId = new RuleSetReferenceId("MockRuleName");        assertRuleSetReferenceId(false, null, false, "MockRuleName", "MockRuleName", internalRuleSetReferenceId);        RuleSetReferenceId externalRuleSetReferenceId = new RuleSetReferenceId("rulesets/java/basic.xml");        assertRuleSetReferenceId(true, "rulesets/java/basic.xml", true, null, "rulesets/java/basic.xml",                externalRuleSetReferenceId);        RuleSetReferenceId pairRuleSetReferenceId = new RuleSetReferenceId("MockRuleName", externalRuleSetReferenceId);        assertRuleSetReferenceId(true, "rulesets/java/basic.xml", false, "MockRuleName",                "rulesets/java/basic.xml/MockRuleName", pairRuleSetReferenceId);    }    @Test    public void testConstructorGivenHttpUrlIdSucceedsAndProcessesIdCorrectly() {        final String sonarRulesetUrlId = "http://localhost:54321/profiles/export?format=pmd&language=java&name=Sonar%2520way";        RuleSetReferenceId ruleSetReferenceId = new RuleSetReferenceId("  " + sonarRulesetUrlId + "  ");        assertRuleSetReferenceId(true, sonarRulesetUrlId, true, null, sonarRulesetUrlId, ruleSetReferenceId);    }    @org.junit.Rule    public WireMockRule wireMockRule = new WireMockRule(0);    @Test    public void testConstructorGivenHttpUrlInputStream() throws Exception {        String path = "/profiles/export?format=pmd&language=java&name=Sonar%2520way";        String rulesetUrl = "http://localhost:" + wireMockRule.port() + path;        stubFor(head(urlEqualTo(path)).willReturn(aResponse().withStatus(200)));        stubFor(get(urlEqualTo(path))                .willReturn(aResponse().withStatus(200).withHeader("Content-type", "text/xml").withBody("xyz")));        RuleSetReferenceId ruleSetReferenceId = new RuleSetReferenceId("  " + rulesetUrl + "  ");        assertRuleSetReferenceId(true, rulesetUrl, true, null, rulesetUrl, ruleSetReferenceId);        try (InputStream inputStream = ruleSetReferenceId.getInputStream(RuleSetReferenceIdTest.class.getClassLoader());) {            String loaded = IOUtils.toString(inputStream, "UTF-8");            assertEquals("xyz", loaded);        }        verify(1, headRequestedFor(urlEqualTo(path)));        verify(0, headRequestedFor(urlEqualTo("/profiles")));        verify(1, getRequestedFor(urlEqualTo(path)));        assertEquals(1, findAll(headRequestedFor(urlMatching(".*"))).size());        assertEquals(1, findAll(getRequestedFor(urlMatching(".*"))).size());    }    @Test    public void testConstructorGivenHttpUrlSingleRuleInputStream() throws Exception {        String path = "/profiles/export?format=pmd&language=java&name=Sonar%2520way";        String completePath = path + "/DummyBasicMockRule";        String hostpart = "http://localhost:" + wireMockRule.port();        String basicRuleSet = IOUtils                .toString(RuleSetReferenceId.class.getResourceAsStream("/rulesets/dummy/basic.xml"));        stubFor(head(urlEqualTo(completePath)).willReturn(aResponse().withStatus(404)));        stubFor(head(urlEqualTo(path)).willReturn(aResponse().withStatus(200).withHeader("Content-type", "text/xml")));        stubFor(get(urlEqualTo(path))                .willReturn(aResponse().withStatus(200).withHeader("Content-type", "text/xml").withBody(basicRuleSet)));        RuleSetReferenceId ruleSetReferenceId = new RuleSetReferenceId("  " + hostpart + completePath + "  ");        assertRuleSetReferenceId(true, hostpart + path, false, "DummyBasicMockRule", hostpart + completePath,                ruleSetReferenceId);        try (InputStream inputStream = ruleSetReferenceId.getInputStream(RuleSetReferenceIdTest.class.getClassLoader());) {            String loaded = IOUtils.toString(inputStream, "UTF-8");            assertEquals(basicRuleSet, loaded);        }        verify(1, headRequestedFor(urlEqualTo(completePath)));        verify(1, headRequestedFor(urlEqualTo(path)));        verify(1, getRequestedFor(urlEqualTo(path)));        verify(0, getRequestedFor(urlEqualTo(completePath)));        assertEquals(2, findAll(headRequestedFor(urlMatching(".*"))).size());        assertEquals(1, findAll(getRequestedFor(urlMatching(".*"))).size());    }    @Test    public void testOneSimpleRuleSet() {        List<RuleSetReferenceId> references = RuleSetReferenceId.parse("dummy-basic");        assertEquals(1, references.size());        assertRuleSetReferenceId(true, "rulesets/dummy/basic.xml", true, null, "rulesets/dummy/basic.xml",                references.get(0));    }    @Test    public void testMultipleSimpleRuleSet() {        List<RuleSetReferenceId> references = RuleSetReferenceId.parse("dummy-unusedcode,dummy-basic");        assertEquals(2, references.size());        assertRuleSetReferenceId(true, "rulesets/dummy/unusedcode.xml", true, null, "rulesets/dummy/unusedcode.xml",                references.get(0));        assertRuleSetReferenceId(true, "rulesets/dummy/basic.xml", true, null, "rulesets/dummy/basic.xml",                references.get(1));    }    /**     * See https://sourceforge.net/p/pmd/bugs/1201/     */    @Test    public void testMultipleRulesWithSpaces() {        List<RuleSetReferenceId> references = RuleSetReferenceId.parse("dummy-basic, dummy-unusedcode, dummy2-basic");        assertEquals(3, references.size());        assertRuleSetReferenceId(true, "rulesets/dummy/basic.xml", true, null, "rulesets/dummy/basic.xml",                references.get(0));        assertRuleSetReferenceId(true, "rulesets/dummy/unusedcode.xml", true, null, "rulesets/dummy/unusedcode.xml",                references.get(1));        assertRuleSetReferenceId(true, "rulesets/dummy2/basic.xml", true, null, "rulesets/dummy2/basic.xml",                references.get(2));    }    @Test    public void testOneReleaseRuleSet() {        List<RuleSetReferenceId> references = RuleSetReferenceId.parse("50");        assertEquals(1, references.size());        assertRuleSetReferenceId(true, "rulesets/releases/50.xml", true, null, "rulesets/releases/50.xml",                references.get(0));    }    @Test    public void testOneFullRuleSet() {        List<RuleSetReferenceId> references = RuleSetReferenceId.parse("rulesets/java/unusedcode.xml");        assertEquals(1, references.size());        assertRuleSetReferenceId(true, "rulesets/java/unusedcode.xml", true, null, "rulesets/java/unusedcode.xml",                references.get(0));    }    @Test    public void testOneFullRuleSetURL() {        List<RuleSetReferenceId> references = RuleSetReferenceId.parse("file://somepath/rulesets/java/unusedcode.xml");        assertEquals(1, references.size());        assertRuleSetReferenceId(true, "file://somepath/rulesets/java/unusedcode.xml", true, null,                "file://somepath/rulesets/java/unusedcode.xml", references.get(0));    }    @Test    public void testMultipleFullRuleSet() {        List<RuleSetReferenceId> references = RuleSetReferenceId                .parse("rulesets/java/unusedcode.xml,rulesets/java/basic.xml");        assertEquals(2, references.size());        assertRuleSetReferenceId(true, "rulesets/java/unusedcode.xml", true, null, "rulesets/java/unusedcode.xml",                references.get(0));        assertRuleSetReferenceId(true, "rulesets/java/basic.xml", true, null, "rulesets/java/basic.xml",                references.get(1));    }    @Test    public void testMixRuleSet() {        List<RuleSetReferenceId> references = RuleSetReferenceId.parse("rulesets/dummy/unusedcode.xml,dummy2-basic");        assertEquals(2, references.size());        assertRuleSetReferenceId(true, "rulesets/dummy/unusedcode.xml", true, null, "rulesets/dummy/unusedcode.xml",                references.get(0));        assertRuleSetReferenceId(true, "rulesets/dummy2/basic.xml", true, null, "rulesets/dummy2/basic.xml",                references.get(1));    }    @Test    public void testUnknownRuleSet() {        List<RuleSetReferenceId> references = RuleSetReferenceId.parse("nonexistant.xml");        assertEquals(1, references.size());        assertRuleSetReferenceId(true, "nonexistant.xml", true, null, "nonexistant.xml", references.get(0));    }    @Test    public void testUnknownAndSimpleRuleSet() {        List<RuleSetReferenceId> references = RuleSetReferenceId.parse("dummy-basic,nonexistant.xml");        assertEquals(2, references.size());        assertRuleSetReferenceId(true, "rulesets/dummy/basic.xml", true, null, "rulesets/dummy/basic.xml",                references.get(0));        assertRuleSetReferenceId(true, "nonexistant.xml", true, null, "nonexistant.xml", references.get(1));    }    @Test    public void testSimpleRuleSetAndRule() {        List<RuleSetReferenceId> references = RuleSetReferenceId.parse("dummy-basic/DummyBasicMockRule");        assertEquals(1, references.size());        assertRuleSetReferenceId(true, "rulesets/dummy/basic.xml", false, "DummyBasicMockRule",                "rulesets/dummy/basic.xml/DummyBasicMockRule", references.get(0));    }    @Test    public void testFullRuleSetAndRule() {        List<RuleSetReferenceId> references = RuleSetReferenceId.parse("rulesets/java/basic.xml/EmptyCatchBlock");        assertEquals(1, references.size());        assertRuleSetReferenceId(true, "rulesets/java/basic.xml", false, "EmptyCatchBlock",                "rulesets/java/basic.xml/EmptyCatchBlock", references.get(0));    }    @Test    public void testFullRuleSetURLAndRule() {        List<RuleSetReferenceId> references = RuleSetReferenceId                .parse("file://somepath/rulesets/java/unusedcode.xml/EmptyCatchBlock");        assertEquals(1, references.size());        assertRuleSetReferenceId(true, "file://somepath/rulesets/java/unusedcode.xml", false, "EmptyCatchBlock",                "file://somepath/rulesets/java/unusedcode.xml/EmptyCatchBlock", references.get(0));    }    @Test    public void testInternalRuleSetAndRule() {        List<RuleSetReferenceId> references = RuleSetReferenceId.parse("EmptyCatchBlock");        assertEquals(1, references.size());        assertRuleSetReferenceId(false, null, false, "EmptyCatchBlock", "EmptyCatchBlock", references.get(0));    }    @Test    public void testRelativePathRuleSet() {        List<RuleSetReferenceId> references = RuleSetReferenceId.parse("pmd/pmd-ruleset.xml");        assertEquals(1, references.size());        assertRuleSetReferenceId(true, "pmd/pmd-ruleset.xml", true, null, "pmd/pmd-ruleset.xml", references.get(0));    }    @Test    public void testAbsolutePathRuleSet() {        List<RuleSetReferenceId> references = RuleSetReferenceId.parse("/home/foo/pmd/pmd-ruleset.xml");        assertEquals(1, references.size());        assertRuleSetReferenceId(true, "/home/foo/pmd/pmd-ruleset.xml", true, null, "/home/foo/pmd/pmd-ruleset.xml",                references.get(0));    }    @Test    public void testFooRules() throws Exception {        String fooRulesFile = new File("./src/test/resources/net/sourceforge/pmd/rulesets/foo-project/foo-rules")                .getCanonicalPath();        List<RuleSetReferenceId> references = RuleSetReferenceId.parse(fooRulesFile);        assertEquals(1, references.size());        assertRuleSetReferenceId(true, fooRulesFile, true, null, fooRulesFile, references.get(0));    }    @Test    public void testNullRulesetString() throws Exception {        List<RuleSetReferenceId> references = RuleSetReferenceId.parse(null);        assertTrue(references.isEmpty());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(RuleSetReferenceIdTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertTrue;import java.io.File;import java.util.ArrayList;import java.util.Collection;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Random;import java.util.Set;import org.junit.Test;import net.sourceforge.pmd.RuleSet.RuleSetBuilder;import net.sourceforge.pmd.lang.Dummy2LanguageModule;import net.sourceforge.pmd.lang.DummyLanguageModule;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.ast.DummyNode;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.rule.MockRule;import net.sourceforge.pmd.lang.rule.RuleReference;public class RuleSetTest {    @Test    public void testNoDFA() {        MockRule mock = new MockRule("name", "desc", "msg", "rulesetname");        mock.setLanguage(LanguageRegistry.getLanguage(DummyLanguageModule.NAME));        RuleSet rs = new RuleSetFactory().createSingleRuleRuleSet(mock);        assertFalse(rs.usesDFA(LanguageRegistry.getLanguage(DummyLanguageModule.NAME)));    }    @Test    public void testIncludesRuleWithDFA() {        MockRule mock = new MockRule("name", "desc", "msg", "rulesetname");        mock.setLanguage(LanguageRegistry.getLanguage(DummyLanguageModule.NAME));        mock.setUsesDFA();        RuleSet rs = new RuleSetFactory().createSingleRuleRuleSet(mock);        assertTrue(rs.usesDFA(LanguageRegistry.getLanguage(DummyLanguageModule.NAME)));    }    @Test    public void testAccessors() {        RuleSet rs = new RuleSetBuilder(new Random().nextLong())                .withFileName("baz")                .withName("foo")                .withDescription("bar")                .build();        assertEquals("file name mismatch", "baz", rs.getFileName());        assertEquals("name mismatch", "foo", rs.getName());        assertEquals("description mismatch", "bar", rs.getDescription());    }    @Test    public void testGetRuleByName() {        MockRule mock = new MockRule("name", "desc", "msg", "rulesetname");        RuleSet rs = new RuleSetFactory().createSingleRuleRuleSet(mock);        assertEquals("unable to fetch rule by name", mock, rs.getRuleByName("name"));    }    @Test    public void testGetRuleByName2() {        MockRule mock = new MockRule("name", "desc", "msg", "rulesetname");        RuleSet rs = new RuleSetFactory().createSingleRuleRuleSet(mock);        assertNull("the rule FooRule must not be found!", rs.getRuleByName("FooRule"));    }    @Test    public void testRuleList() {        MockRule rule = new MockRule("name", "desc", "msg", "rulesetname");        RuleSet ruleset = new RuleSetFactory().createSingleRuleRuleSet(rule);        assertEquals("Size of RuleSet isn't one.", 1, ruleset.size());        Collection<Rule> rules = ruleset.getRules();        Iterator<Rule> i = rules.iterator();        assertTrue("Empty Set", i.hasNext());        assertEquals("Returned set of wrong size.", 1, rules.size());        assertEquals("Rule isn't in ruleset.", rule, i.next());    }    @Test    public void testAddRuleSet() {        RuleSet set1 = new RuleSetBuilder(new Random().nextLong())                .addRule(new MockRule("name", "desc", "msg", "rulesetname"))                .build();        RuleSet set2 = new RuleSetBuilder(new Random().nextLong())                .addRule(new MockRule("name2", "desc", "msg", "rulesetname"))                .addRuleSet(set1)                .build();        assertEquals("ruleset size wrong", 2, set2.size());    }    @Test(expected = RuntimeException.class)    public void testAddRuleSetByReferenceBad() {        RuleSet set1 = new RuleSetBuilder(new Random().nextLong())                .addRule(new MockRule("name", "desc", "msg", "rulesetname"))                .build();        RuleSet set2 = new RuleSetBuilder(new Random().nextLong())                .addRule(new MockRule("name2", "desc", "msg", "rulesetname"))                .addRuleSetByReference(set1, false)                .build();    }    @Test    public void testAddRuleSetByReferenceAllRule() {        RuleSet set2 = new RuleSetBuilder(new Random().nextLong())                .withFileName("foo")                .addRule(new MockRule("name", "desc", "msg", "rulesetname"))                .addRule(new MockRule("name2", "desc", "msg", "rulesetname"))                .build();        RuleSet set1 = new RuleSetBuilder(new Random().nextLong())                .addRuleSetByReference(set2, true)                .build();        assertEquals("wrong rule size", 2, set1.getRules().size());        for (Rule rule : set1.getRules()) {            assertTrue("not a rule reference", rule instanceof RuleReference);            RuleReference ruleReference = (RuleReference) rule;            assertEquals("wrong ruleset file name", "foo", ruleReference.getRuleSetReference().getRuleSetFileName());            assertTrue("not all rule reference", ruleReference.getRuleSetReference().isAllRules());        }    }    @Test    public void testAddRuleSetByReferenceSingleRule() {        RuleSet set2 = new RuleSetBuilder(new Random().nextLong())                .withFileName("foo")                .addRule(new MockRule("name", "desc", "msg", "rulesetname"))                .addRule(new MockRule("name2", "desc", "msg", "rulesetname"))                .build();        RuleSet set1 = new RuleSetBuilder(new Random().nextLong())                .addRuleSetByReference(set2, false)                .build();        assertEquals("wrong rule size", 2, set1.getRules().size());        for (Rule rule : set1.getRules()) {            assertTrue("not a rule reference", rule instanceof RuleReference);            RuleReference ruleReference = (RuleReference) rule;            assertEquals("wrong ruleset file name", "foo", ruleReference.getRuleSetReference().getRuleSetFileName());            assertFalse("should not be all rule reference", ruleReference.getRuleSetReference().isAllRules());        }    }    @Test    public void testApply0Rules() throws Exception {        RuleSet ruleset = new RuleSetBuilder(new Random().nextLong()).build();        verifyRuleSet(ruleset, 0, new HashSet<RuleViolation>());    }    @Test    public void testEquals1() {        RuleSet s = new RuleSetBuilder(new Random().nextLong()).build();        assertFalse("A ruleset cannot be equals to null", s.equals(null));    }    @Test    @SuppressWarnings("PMD.UseAssertEqualsInsteadOfAssertTrue")    public void testEquals2() {        RuleSet s = new RuleSetBuilder(new Random().nextLong()).build();        assertTrue("A rulset must be equals to itself", s.equals(s));    }    @Test    public void testEquals3() {        RuleSet s = new RuleSetBuilder(new Random().nextLong())                .withName("basic rules")                .build();        assertFalse("A ruleset cannot be equals to another kind of object", s.equals("basic rules"));    }    @Test    public void testEquals4() {        RuleSet s1 = new RuleSetBuilder(new Random().nextLong())                .withName("my ruleset")                .addRule(new MockRule("name", "desc", "msg", "rulesetname"))                .build();        RuleSet s2 = new RuleSetBuilder(new Random().nextLong())                .withName("my ruleset")                .addRule(new MockRule("name", "desc", "msg", "rulesetname"))                .build();        assertEquals("2 rulesets with same name and rules must be equals", s1, s2);        assertEquals("Equals rulesets must have the same hashcode", s1.hashCode(), s2.hashCode());    }    @Test    public void testEquals5() {        RuleSet s1 = new RuleSetBuilder(new Random().nextLong())                .withName("my ruleset")                .addRule(new MockRule("name", "desc", "msg", "rulesetname"))                .build();        RuleSet s2 = new RuleSetBuilder(new Random().nextLong())                .withName("my other ruleset")                .addRule(new MockRule("name", "desc", "msg", "rulesetname"))                .build();        assertFalse("2 rulesets with different name but same rules must not be equals", s1.equals(s2));    }    @Test    public void testEquals6() {        RuleSet s1 = new RuleSetBuilder(new Random().nextLong())                .withName("my ruleset")                .addRule(new MockRule("name", "desc", "msg", "rulesetname"))                .build();        RuleSet s2 = new RuleSetBuilder(new Random().nextLong())                .withName("my ruleset")                .addRule(new MockRule("other rule", "desc", "msg", "rulesetname"))                .build();        assertFalse("2 rulesets with same name but different rules must not be equals", s1.equals(s2));    }    @Test    public void testLanguageApplies() {        Rule rule = new MockRule();        rule.setLanguage(LanguageRegistry.getLanguage(DummyLanguageModule.NAME));        assertFalse("Different languages should not apply",                RuleSet.applies(rule, LanguageRegistry.getLanguage(Dummy2LanguageModule.NAME).getDefaultVersion()));        rule.setLanguage(LanguageRegistry.getLanguage(DummyLanguageModule.NAME));        assertTrue("Same language with no min/max should apply",                RuleSet.applies(rule, LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.5")));        rule.setMinimumLanguageVersion(LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.5"));        assertTrue("Same language with valid min only should apply",                RuleSet.applies(rule, LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.5")));        rule.setMaximumLanguageVersion(LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.6"));        assertTrue("Same language with valid min and max should apply",                RuleSet.applies(rule, LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.5")));        assertFalse("Same language with outside range of min/max should not apply",                RuleSet.applies(rule, LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.4")));        assertFalse("Same language with outside range of min/max should not apply",                RuleSet.applies(rule, LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.7")));    }    @Test    public void testAddExcludePattern() {        RuleSet ruleSet = new RuleSetBuilder(new Random().nextLong())                .addExcludePattern("*")                .build();        assertNotNull("Exclude patterns", ruleSet.getExcludePatterns());        assertEquals("Invalid number of patterns", 1, ruleSet.getExcludePatterns().size());                RuleSet ruleSet2 = new RuleSetBuilder(new Random().nextLong())                .addExcludePattern("*")                .addExcludePattern("*") // try to create a duplicate                .build();        assertEquals("Invalid number of patterns", 1, ruleSet2.getExcludePatterns().size());        assertEquals("Exclude pattern", "*", ruleSet2.getExcludePatterns().get(0));        assertNotNull("Include patterns", ruleSet2.getIncludePatterns());        assertEquals("Invalid number of include patterns", 0, ruleSet2.getIncludePatterns().size());    }    @Test    public void testAddExcludePatterns() {        RuleSet ruleSet = new RuleSetBuilder(new Random().nextLong())                .addExcludePattern("*")                .addExcludePattern(".*")                .build();        RuleSet ruleSet2 = new RuleSetBuilder(new Random().nextLong())                .addExcludePatterns(ruleSet.getExcludePatterns())                .build();        assertNotNull("Exclude patterns", ruleSet2.getExcludePatterns());        assertEquals("Invalid number of patterns", 2, ruleSet2.getExcludePatterns().size());                RuleSet ruleSet3 = new RuleSetBuilder(new Random().nextLong())                .addExcludePattern("*")                .addExcludePattern(".*")                .addExcludePattern(".*") // try to create a duplicate                .build();        assertEquals("Invalid number of patterns", 2, ruleSet3.getExcludePatterns().size());        assertEquals("Exclude pattern", "*", ruleSet3.getExcludePatterns().get(0));        assertEquals("Exclude pattern", ".*", ruleSet3.getExcludePatterns().get(1));        assertNotNull("Include patterns", ruleSet3.getIncludePatterns());        assertEquals("Invalid number of include patterns", 0, ruleSet3.getIncludePatterns().size());    }    @Test    public void testSetExcludePatterns() {        List<String> excludePatterns = new ArrayList<>();        excludePatterns.add("*");        excludePatterns.add(".*");        RuleSet ruleSet = new RuleSetBuilder(new Random().nextLong())                .setExcludePatterns(excludePatterns)                .build();        assertNotNull("Exclude patterns", ruleSet.getExcludePatterns());        assertEquals("Invalid number of exclude patterns", 2, ruleSet.getExcludePatterns().size());        assertEquals("Exclude pattern", "*", ruleSet.getExcludePatterns().get(0));        assertEquals("Exclude pattern", ".*", ruleSet.getExcludePatterns().get(1));        assertNotNull("Include patterns", ruleSet.getIncludePatterns());        assertEquals("Invalid number of include patterns", 0, ruleSet.getIncludePatterns().size());    }    @Test    public void testAddIncludePattern() {        RuleSet ruleSet = new RuleSetBuilder(new Random().nextLong())                .addIncludePattern("*")                .build();        assertNotNull("Include patterns", ruleSet.getIncludePatterns());        assertEquals("Invalid number of patterns", 1, ruleSet.getIncludePatterns().size());        assertEquals("Include pattern", "*", ruleSet.getIncludePatterns().get(0));        assertNotNull("Exclude patterns", ruleSet.getExcludePatterns());        assertEquals("Invalid number of exclude patterns", 0, ruleSet.getExcludePatterns().size());    }    @Test    public void testAddIncludePatterns() {        RuleSet ruleSet = new RuleSetBuilder(new Random().nextLong())                .addIncludePattern("*")                .addIncludePattern(".*")                .build();        RuleSet ruleSet2 = new RuleSetBuilder(new Random().nextLong())                .addIncludePatterns(ruleSet.getIncludePatterns())                .build();        assertNotNull("Include patterns", ruleSet2.getIncludePatterns());        assertEquals("Invalid number of patterns", 2, ruleSet2.getIncludePatterns().size());        assertEquals("Include pattern", "*", ruleSet2.getIncludePatterns().get(0));        assertEquals("Include pattern", ".*", ruleSet2.getIncludePatterns().get(1));        assertNotNull("Exclude patterns", ruleSet.getExcludePatterns());        assertEquals("Invalid number of exclude patterns", 0, ruleSet.getExcludePatterns().size());    }    @Test    public void testSetIncludePatterns() {        List<String> includePatterns = new ArrayList<>();        includePatterns.add("*");        includePatterns.add(".*");        RuleSet ruleSet = new RuleSetBuilder(new Random().nextLong())                .setIncludePatterns(includePatterns)                .build();        assertNotNull("Include patterns", ruleSet.getIncludePatterns());        assertEquals("Invalid number of include patterns", 2, ruleSet.getIncludePatterns().size());        assertEquals("Include pattern", "*", ruleSet.getIncludePatterns().get(0));        assertEquals("Include pattern", ".*", ruleSet.getIncludePatterns().get(1));        assertNotNull("Exclude patterns", ruleSet.getExcludePatterns());        assertEquals("Invalid number of exclude patterns", 0, ruleSet.getExcludePatterns().size());    }    @Test    public void testIncludeExcludeApplies() {        File file = new File("C:\\myworkspace\\project\\some\\random\\package\\RandomClass.java");        RuleSet ruleSet = new RuleSetBuilder(new Random().nextLong()).build();        assertTrue("No patterns", ruleSet.applies(file));        ruleSet = new RuleSetBuilder(new Random().nextLong())                .addExcludePattern("nomatch")                .build();        assertTrue("Non-matching exclude", ruleSet.applies(file));        ruleSet = new RuleSetBuilder(new Random().nextLong())                .addExcludePattern("nomatch")                .addExcludePattern(".*/package/.*")                .build();        assertFalse("Matching exclude", ruleSet.applies(file));        ruleSet = new RuleSetBuilder(new Random().nextLong())                .addExcludePattern("nomatch")                .addExcludePattern(".*/package/.*")                .addIncludePattern(".*/randomX/.*")                .build();        assertFalse("Non-matching include", ruleSet.applies(file));        ruleSet = new RuleSetBuilder(new Random().nextLong())                .addExcludePattern("nomatch")                .addExcludePattern(".*/package/.*")                .addIncludePattern(".*/randomX/.*")                .addIncludePattern(".*/random/.*")                .build();        assertTrue("Matching include", ruleSet.applies(file));    }    @Test    public void testIncludeExcludeMultipleRuleSetWithRuleChainApplies() throws PMDException {        File file = new File("C:\\myworkspace\\project\\some\\random\\package\\RandomClass.java");        Rule rule = new FooRule();        rule.setName("FooRule1");        rule.setLanguage(LanguageRegistry.getLanguage(DummyLanguageModule.NAME));        rule.addRuleChainVisit("dummyNode");        assertTrue("RuleChain rule", rule.usesRuleChain());        RuleSet ruleSet1 = new RuleSetBuilder(new Random().nextLong())                .withName("RuleSet1")                .addRule(rule)                .build();        RuleSet ruleSet2 = new RuleSetBuilder(new Random().nextLong())                .withName("RuleSet2")                .addRule(rule)                .build();        RuleSets ruleSets = new RuleSets();        ruleSets.addRuleSet(ruleSet1);        ruleSets.addRuleSet(ruleSet2);        // Two violations        PMD p = new PMD();        RuleContext ctx = new RuleContext();        Report r = new Report();        ctx.setReport(r);        ctx.setSourceCodeFilename(file.getName());        ctx.setSourceCodeFile(file);        ctx.setLanguageVersion(LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getDefaultVersion());        ruleSets.apply(makeCompilationUnits(), ctx, LanguageRegistry.getLanguage(DummyLanguageModule.NAME));        assertEquals("Violations", 2, r.size());        // One violation        ruleSet1 = new RuleSetBuilder(new Random().nextLong())                .withName("RuleSet1")                .addExcludePattern(".*/package/.*")                .addRule(rule)                .build();        ruleSets = new RuleSets();        ruleSets.addRuleSet(ruleSet1);        ruleSets.addRuleSet(ruleSet2);        r = new Report();        ctx.setReport(r);        ruleSets.apply(makeCompilationUnits(), ctx, LanguageRegistry.getLanguage(DummyLanguageModule.NAME));        assertEquals("Violations", 1, r.size());    }    private void verifyRuleSet(RuleSet ruleset, int size, Set<RuleViolation> values) {        RuleContext context = new RuleContext();        Set<RuleViolation> reportedValues = new HashSet<>();        context.setReport(new Report());        ruleset.apply(makeCompilationUnits(), context);        assertEquals("Invalid number of Violations Reported", size, context.getReport().size());        Iterator<RuleViolation> violations = context.getReport().iterator();        while (violations.hasNext()) {            RuleViolation violation = violations.next();            reportedValues.add(violation);            assertTrue("Unexpected Violation Returned: " + violation, values.contains(violation));        }        Iterator<RuleViolation> expected = values.iterator();        while (expected.hasNext()) {            RuleViolation violation = expected.next();            assertTrue("Expected Violation not Returned: " + violation, reportedValues.contains(violation));        }    }    private List<Node> makeCompilationUnits() {        List<Node> nodes = new ArrayList<>();        DummyNode node = new DummyNode(1);        node.testingOnlySetBeginLine(1);        node.testingOnlySetBeginColumn(1);        node.setImage("Foo");        nodes.add(node);        return nodes;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.io.IOException;import java.io.StringWriter;import java.util.Iterator;import java.util.Map;import org.junit.Test;import net.sourceforge.pmd.lang.ast.DummyNode;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.rule.MockRule;import net.sourceforge.pmd.lang.rule.ParametricRuleViolation;import net.sourceforge.pmd.renderers.Renderer;import net.sourceforge.pmd.renderers.XMLRenderer;import net.sourceforge.pmd.stat.Metric;public class ReportTest implements ReportListener {    private boolean violationSemaphore;    private boolean metricSemaphore;    @Override    public void ruleViolationAdded(RuleViolation ruleViolation) {        violationSemaphore = true;    }    @Override    public void metricAdded(Metric metric) {        metricSemaphore = true;    }    @Test    public void testMetric0() {        Report r = new Report();        assertFalse("Default report shouldn't contain metrics", r.hasMetrics());    }    @Test    public void testMetric1() {        Report r = new Report();        assertFalse("Default report shouldn't contain metrics", r.hasMetrics());        r.addMetric(new Metric("m1", 0, 0.0, 1.0, 2.0, 3.0, 4.0));        assertTrue("Expected metrics weren't there", r.hasMetrics());        Iterator<Metric> ms = r.metrics();        assertTrue("Should have some metrics in there now", ms.hasNext());        Object o = ms.next();        assertTrue("Expected Metric, got " + o.getClass(), o instanceof Metric);        Metric m = (Metric) o;        assertEquals("metric name mismatch", "m1", m.getMetricName());        assertEquals("wrong low value", 1.0, m.getLowValue(), 0.05);        assertEquals("wrong high value", 2.0, m.getHighValue(), 0.05);        assertEquals("wrong avg value", 3.0, m.getAverage(), 0.05);        assertEquals("wrong std dev value", 4.0, m.getStandardDeviation(), 0.05);    }    // Files are grouped together now.    @Test    public void testSortedReportFile() throws IOException {        Report r = new Report();        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("foo");        Node s = getNode(10, 5);        Rule rule1 = new MockRule("name", "desc", "msg", "rulesetname");        r.addRuleViolation(new ParametricRuleViolation<>(rule1, ctx, s, rule1.getMessage()));        ctx.setSourceCodeFilename("bar");        Node s1 = getNode(10, 5);        Rule rule2 = new MockRule("name", "desc", "msg", "rulesetname");        r.addRuleViolation(new ParametricRuleViolation<>(rule2, ctx, s1, rule2.getMessage()));        Renderer rend = new XMLRenderer();        String result = render(rend, r);        assertTrue("sort order wrong", result.indexOf("bar") < result.indexOf("foo"));    }    @Test    public void testSortedReportLine() throws IOException {        Report r = new Report();        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("foo1");        Node s = getNode(10, 5);        Rule rule1 = new MockRule("rule2", "rule2", "msg", "rulesetname");        r.addRuleViolation(new ParametricRuleViolation<>(rule1, ctx, s, rule1.getMessage()));        ctx.setSourceCodeFilename("foo2");        Node s1 = getNode(20, 5);        Rule rule2 = new MockRule("rule1", "rule1", "msg", "rulesetname");        r.addRuleViolation(new ParametricRuleViolation<>(rule2, ctx, s1, rule2.getMessage()));        Renderer rend = new XMLRenderer();        String result = render(rend, r);        assertTrue("sort order wrong", result.indexOf("rule2") < result.indexOf("rule1"));    }    @Test    public void testListener() {        Report rpt = new Report();        rpt.addListener(this);        violationSemaphore = false;        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("file");        Node s = getNode(5, 5);        Rule rule1 = new MockRule("name", "desc", "msg", "rulesetname");        rpt.addRuleViolation(new ParametricRuleViolation<>(rule1, ctx, s, rule1.getMessage()));        assertTrue(violationSemaphore);        metricSemaphore = false;        rpt.addMetric(new Metric("test", 0, 0.0, 0.0, 0.0, 0.0, 0.0));        assertTrue("no metric", metricSemaphore);    }    @Test    public void testSummary() {        Report r = new Report();        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("foo1");        Node s = getNode(5, 5);        Rule rule = new MockRule("name", "desc", "msg", "rulesetname");        r.addRuleViolation(new ParametricRuleViolation<>(rule, ctx, s, rule.getMessage()));        ctx.setSourceCodeFilename("foo2");        Rule mr = new MockRule("rule1", "rule1", "msg", "rulesetname");        Node s1 = getNode(20, 5);        Node s2 = getNode(30, 5);        r.addRuleViolation(new ParametricRuleViolation<>(mr, ctx, s1, mr.getMessage()));        r.addRuleViolation(new ParametricRuleViolation<>(mr, ctx, s2, mr.getMessage()));        Map<String, Integer> summary = r.getSummary();        assertEquals(summary.keySet().size(), 2);        assertTrue(summary.values().contains(Integer.valueOf(1)));        assertTrue(summary.values().contains(Integer.valueOf(2)));    }    @Test    public void testTreeIterator() {        Report r = new Report();        RuleContext ctx = new RuleContext();        Rule rule = new MockRule("name", "desc", "msg", "rulesetname");        Node node1 = getNode(5, 5, true);        r.addRuleViolation(new ParametricRuleViolation<>(rule, ctx, node1, rule.getMessage()));        Node node2 = getNode(5, 6, true);        r.addRuleViolation(new ParametricRuleViolation<>(rule, ctx, node2, rule.getMessage()));        Iterator<RuleViolation> violations = r.iterator();        int violationCount = 0;        while (violations.hasNext()) {            violations.next();            violationCount++;        }        assertEquals(2, violationCount);        Iterator<RuleViolation> treeIterator = r.treeIterator();        int treeCount = 0;        while (treeIterator.hasNext()) {            treeIterator.next();            treeCount++;        }        assertEquals(2, treeCount);    }    private static Node getNode(int line, int column) {        DummyNode s = new DummyNode(2);        DummyNode parent = new DummyNode(1);        parent.testingOnlySetBeginLine(line);        parent.testingOnlySetBeginColumn(column);        s.jjtSetParent(parent);        s.testingOnlySetBeginLine(10);        s.testingOnlySetBeginColumn(5);        return s;    }    private static Node getNode(int line, int column, boolean nextLine) {        DummyNode s = (DummyNode) getNode(line, column);        if (nextLine) {            s.testingOnlySetBeginLine(line + 1);            s.testingOnlySetBeginColumn(column + 4);        }        return s;    }    public static String render(Renderer renderer, Report report) throws IOException {        StringWriter writer = new StringWriter();        renderer.setWriter(writer);        renderer.start();        renderer.renderFileReport(report);        renderer.end();        return writer.toString();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertSame;import static org.junit.Assert.assertTrue;import java.io.File;import java.io.IOException;import java.net.URL;import java.util.Properties;import org.junit.Test;import net.sourceforge.pmd.cache.FileAnalysisCache;import net.sourceforge.pmd.cache.NoopAnalysisCache;import net.sourceforge.pmd.renderers.CSVRenderer;import net.sourceforge.pmd.renderers.Renderer;import net.sourceforge.pmd.util.ClasspathClassLoader;public class ConfigurationTest {    @Test    public void testSuppressMarker() {        PMDConfiguration configuration = new PMDConfiguration();        assertEquals("Default suppress marker", PMD.SUPPRESS_MARKER, configuration.getSuppressMarker());        configuration.setSuppressMarker("CUSTOM_MARKER");        assertEquals("Changed suppress marker", "CUSTOM_MARKER", configuration.getSuppressMarker());    }    @Test    public void testThreads() {        PMDConfiguration configuration = new PMDConfiguration();        assertEquals("Default threads", Runtime.getRuntime().availableProcessors(), configuration.getThreads());        configuration.setThreads(0);        assertEquals("Changed threads", 0, configuration.getThreads());    }    @Test    public void testClassLoader() throws IOException {        PMDConfiguration configuration = new PMDConfiguration();        assertEquals("Default ClassLoader", PMDConfiguration.class.getClassLoader(), configuration.getClassLoader());        configuration.prependClasspath("some.jar");        assertEquals("Prepended ClassLoader class", ClasspathClassLoader.class,                configuration.getClassLoader().getClass());        URL[] urls = ((ClasspathClassLoader) configuration.getClassLoader()).getURLs();        assertEquals("urls length", 1, urls.length);        assertTrue("url[0]", urls[0].toString().endsWith("/some.jar"));        assertEquals("parent classLoader", PMDConfiguration.class.getClassLoader(),                configuration.getClassLoader().getParent());        configuration.setClassLoader(null);        assertEquals("Revert to default ClassLoader", PMDConfiguration.class.getClassLoader(),                configuration.getClassLoader());    }    @Test    public void testRuleSets() {        PMDConfiguration configuration = new PMDConfiguration();        assertEquals("Default RuleSets", null, configuration.getRuleSets());        configuration.setRuleSets("/rulesets/basic.xml");        assertEquals("Changed RuleSets", "/rulesets/basic.xml", configuration.getRuleSets());    }    @Test    public void testMinimumPriority() {        PMDConfiguration configuration = new PMDConfiguration();        assertEquals("Default minimum priority", RulePriority.LOW, configuration.getMinimumPriority());        configuration.setMinimumPriority(RulePriority.HIGH);        assertEquals("Changed minimum priority", RulePriority.HIGH, configuration.getMinimumPriority());    }    @Test    public void testSourceEncoding() {        PMDConfiguration configuration = new PMDConfiguration();        assertEquals("Default source encoding", System.getProperty("file.encoding"), configuration.getSourceEncoding());        configuration.setSourceEncoding("some_other_encoding");        assertEquals("Changed source encoding", "some_other_encoding", configuration.getSourceEncoding());    }    @Test    public void testInputPaths() {        PMDConfiguration configuration = new PMDConfiguration();        assertEquals("Default input paths", null, configuration.getInputPaths());        configuration.setInputPaths("a,b,c");        assertEquals("Changed input paths", "a,b,c", configuration.getInputPaths());    }    @Test    public void testReportShortNames() {        PMDConfiguration configuration = new PMDConfiguration();        assertEquals("Default report short names", false, configuration.isReportShortNames());        configuration.setReportShortNames(true);        assertEquals("Changed report short names", true, configuration.isReportShortNames());    }    @Test    public void testReportFormat() {        PMDConfiguration configuration = new PMDConfiguration();        assertEquals("Default report format", null, configuration.getReportFormat());        configuration.setReportFormat("csv");        assertEquals("Changed report format", "csv", configuration.getReportFormat());    }    @Test    public void testCreateRenderer() {        PMDConfiguration configuration = new PMDConfiguration();        configuration.setReportFormat("csv");        Renderer renderer = configuration.createRenderer();        assertEquals("Renderer class", CSVRenderer.class, renderer.getClass());        assertEquals("Default renderer show suppressed violations", false, renderer.isShowSuppressedViolations());        configuration.setShowSuppressedViolations(true);        renderer = configuration.createRenderer();        assertEquals("Renderer class", CSVRenderer.class, renderer.getClass());        assertEquals("Changed renderer show suppressed violations", true, renderer.isShowSuppressedViolations());    }    @Test    public void testReportFile() {        PMDConfiguration configuration = new PMDConfiguration();        assertEquals("Default report file", null, configuration.getReportFile());        configuration.setReportFile("somefile");        assertEquals("Changed report file", "somefile", configuration.getReportFile());    }    @Test    public void testShowSuppressedViolations() {        PMDConfiguration configuration = new PMDConfiguration();        assertEquals("Default show suppressed violations", false, configuration.isShowSuppressedViolations());        configuration.setShowSuppressedViolations(true);        assertEquals("Changed show suppressed violations", true, configuration.isShowSuppressedViolations());    }    @Test    public void testReportProperties() {        PMDConfiguration configuration = new PMDConfiguration();        assertEquals("Default report properties size", 0, configuration.getReportProperties().size());        configuration.getReportProperties().put("key", "value");        assertEquals("Changed report properties size", 1, configuration.getReportProperties().size());        assertEquals("Changed report properties value", "value", configuration.getReportProperties().get("key"));        configuration.setReportProperties(new Properties());        assertEquals("Replaced report properties size", 0, configuration.getReportProperties().size());    }    @Test    public void testDebug() {        PMDConfiguration configuration = new PMDConfiguration();        assertEquals("Default debug", false, configuration.isDebug());        configuration.setDebug(true);        assertEquals("Changed debug", true, configuration.isDebug());    }    @Test    public void testStressTest() {        PMDConfiguration configuration = new PMDConfiguration();        assertEquals("Default stress test", false, configuration.isStressTest());        configuration.setStressTest(true);        assertEquals("Changed stress test", true, configuration.isStressTest());    }    @Test    public void testBenchmark() {        PMDConfiguration configuration = new PMDConfiguration();        assertEquals("Default benchmark", false, configuration.isBenchmark());        configuration.setBenchmark(true);        assertEquals("Changed benchmark", true, configuration.isBenchmark());    }    @Test    public void testAnalysisCache() throws IOException {        final PMDConfiguration configuration = new PMDConfiguration();        assertNotNull("Default cache is null", configuration.getAnalysisCache());        assertTrue("Default cache is not a noop", configuration.getAnalysisCache() instanceof NoopAnalysisCache);        configuration.setAnalysisCache(null);        assertNotNull("Default cache was set to null", configuration.getAnalysisCache());        final File cacheFile = File.createTempFile("pmd-", ".cache");        cacheFile.deleteOnExit();        final FileAnalysisCache analysisCache = new FileAnalysisCache(cacheFile);        configuration.setAnalysisCache(analysisCache);        assertSame("Confgured cache not stored", analysisCache, configuration.getAnalysisCache());    }    @Test    public void testAnalysisCacheLocation() throws IOException {        final PMDConfiguration configuration = new PMDConfiguration();        configuration.setAnalysisCacheLocation(null);        assertNotNull("Null cache location accepted", configuration.getAnalysisCache());        assertTrue("Null cache location accepted", configuration.getAnalysisCache() instanceof NoopAnalysisCache);        configuration.setAnalysisCacheLocation("pmd.cache");        assertNotNull("Not null cache location produces null cache", configuration.getAnalysisCache());        assertTrue("File cache location doesn't produce a file cache",                configuration.getAnalysisCache() instanceof FileAnalysisCache);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertNotSame;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertTrue;import java.io.ByteArrayInputStream;import java.io.InputStream;import java.io.UnsupportedEncodingException;import java.util.HashSet;import java.util.Set;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.lang.DummyLanguageModule;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.rule.MockRule;import net.sourceforge.pmd.lang.rule.RuleReference;import net.sourceforge.pmd.util.ResourceLoader;public class RuleSetFactoryTest {    @Test    public void testRuleSetFileName() throws RuleSetNotFoundException {        RuleSet rs = loadRuleSet(EMPTY_RULESET);        assertNull("RuleSet file name not expected", rs.getFileName());        RuleSetFactory rsf = new RuleSetFactory();        rs = rsf.createRuleSet("net/sourceforge/pmd/TestRuleset1.xml");        assertEquals("wrong RuleSet file name", rs.getFileName(), "net/sourceforge/pmd/TestRuleset1.xml");    }    @Test    public void testNoRuleSetFileName() throws RuleSetNotFoundException {        RuleSet rs = loadRuleSet(EMPTY_RULESET);        assertNull("RuleSet file name not expected", rs.getFileName());    }    @Test    public void testRefs() throws Exception {        RuleSetFactory rsf = new RuleSetFactory();        RuleSet rs = rsf.createRuleSet("net/sourceforge/pmd/TestRuleset1.xml");        assertNotNull(rs.getRuleByName("TestRuleRef"));    }    @Test    public void testExtendedReferences() throws Exception {        InputStream in = ResourceLoader.loadResourceAsStream("net/sourceforge/pmd/rulesets/reference-ruleset.xml",                this.getClass().getClassLoader());        Assert.assertNotNull("Test ruleset not found - can't continue with test!", in);        in.close();        RuleSetFactory rsf = new RuleSetFactory();        RuleSets rs = rsf.createRuleSets("net/sourceforge/pmd/rulesets/reference-ruleset.xml");        // added by referencing a complete ruleset (TestRuleset1.xml)        assertNotNull(rs.getRuleByName("MockRule1"));        assertNotNull(rs.getRuleByName("MockRule2"));        assertNotNull(rs.getRuleByName("MockRule3"));        assertNotNull(rs.getRuleByName("TestRuleRef"));        // added by specific reference        assertNotNull(rs.getRuleByName("TestRule"));        // this is from TestRuleset2.xml, but not referenced        assertNull(rs.getRuleByName("TestRule2Ruleset2"));        Rule mockRule3 = rs.getRuleByName("MockRule3");        assertEquals("Overridden message", mockRule3.getMessage());        assertEquals(2, mockRule3.getPriority().getPriority());        Rule mockRule2 = rs.getRuleByName("MockRule2");        assertEquals("Just combine them!", mockRule2.getMessage());        // assert that MockRule2 is only once added to the ruleset, so that it        // really        // overwrites the configuration inherited from TestRuleset1.xml        assertEquals(1, countRule(rs, "MockRule2"));        Rule mockRule1 = rs.getRuleByName("MockRule1");        assertNotNull(mockRule1);        PropertyDescriptor<?> prop = mockRule1.getPropertyDescriptor("testIntProperty");        Object property = mockRule1.getProperty(prop);        assertEquals("5", String.valueOf(property));        // included from TestRuleset3.xml        assertNotNull(rs.getRuleByName("Ruleset3Rule2"));        // excluded from TestRuleset3.xml        assertNull(rs.getRuleByName("Ruleset3Rule1"));        // overridden to 5        Rule ruleset4Rule1 = rs.getRuleByName("Ruleset4Rule1");        assertNotNull(ruleset4Rule1);        assertEquals(5, ruleset4Rule1.getPriority().getPriority());        assertEquals(1, countRule(rs, "Ruleset4Rule1"));        // priority overridden for whole TestRuleset4 group        Rule ruleset4Rule2 = rs.getRuleByName("Ruleset4Rule2");        assertNotNull(ruleset4Rule2);        assertEquals(2, ruleset4Rule2.getPriority().getPriority());    }    private int countRule(RuleSets rs, String ruleName) {        int count = 0;        for (Rule r : rs.getAllRules()) {            if (ruleName.equals(r.getName())) {                count++;            }        }        return count;    }    @Test(expected = RuleSetNotFoundException.class)    public void testRuleSetNotFound() throws RuleSetNotFoundException {        RuleSetFactory rsf = new RuleSetFactory();        rsf.createRuleSet("fooooo");    }    @Test    public void testCreateEmptyRuleSet() throws RuleSetNotFoundException {        RuleSet rs = loadRuleSet(EMPTY_RULESET);        assertEquals("test", rs.getName());        assertEquals(0, rs.size());    }    @Test    public void testSingleRule() throws RuleSetNotFoundException {        RuleSet rs = loadRuleSet(SINGLE_RULE);        assertEquals(1, rs.size());        Rule r = rs.getRules().iterator().next();        assertEquals("MockRuleName", r.getName());        assertEquals("net.sourceforge.pmd.lang.rule.MockRule", r.getRuleClass());        assertEquals("avoid the mock rule", r.getMessage());    }    @Test    public void testMultipleRules() throws RuleSetNotFoundException {        RuleSet rs = loadRuleSet(MULTIPLE_RULES);        assertEquals(2, rs.size());        Set<String> expected = new HashSet<>();        expected.add("MockRuleName1");        expected.add("MockRuleName2");        for (Rule rule : rs.getRules()) {            assertTrue(expected.contains(rule.getName()));        }    }    @Test    public void testSingleRuleWithPriority() throws RuleSetNotFoundException {        assertEquals(RulePriority.MEDIUM, loadFirstRule(PRIORITY).getPriority());    }    @Test    @SuppressWarnings("unchecked")    public void testProps() throws RuleSetNotFoundException {        Rule r = loadFirstRule(PROPERTIES);        assertEquals("bar", r.getProperty((PropertyDescriptor<String>) r.getPropertyDescriptor("fooString")));        assertEquals(new Integer(3), r.getProperty((PropertyDescriptor<Integer>) r.getPropertyDescriptor("fooInt")));        assertTrue(r.getProperty((PropertyDescriptor<Boolean>) r.getPropertyDescriptor("fooBoolean")));        assertEquals(3.0d, r.getProperty((PropertyDescriptor<Double>) r.getPropertyDescriptor("fooDouble")), 0.05);        assertNull(r.getPropertyDescriptor("BuggleFish"));        assertNotSame(r.getDescription().indexOf("testdesc2"), -1);    }    @Test    public void testStringMultiPropertyDefaultDelimiter() throws Exception {        Rule r = loadFirstRule("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<ruleset>\n"                + "     <rule name=\"myRule\" message=\"Do not place to this package. Move to \n"                + "{0} package/s instead.\" \n" + "class=\"net.sourceforge.pmd.lang.rule.XPathRule\" "                + "language=\"dummy\">\n" + "         <description>Please move your class to the right folder(rest \n"                + "folder)</description>\n" + "         <priority>2</priority>\n" + "         <properties>\n"                + "             <property name=\"packageRegEx\" value=\"com.aptsssss|com.abc\" \n"                + "type=\"String[]\" description=\"valid packages\"/>\n" + "         </properties>" + "</rule>"                + "</ruleset>");        PropertyDescriptor<?> prop = r.getPropertyDescriptor("packageRegEx");        String[] values = (String[]) r.getProperty(prop);        Assert.assertArrayEquals(new String[] { "com.aptsssss", "com.abc" }, values);    }    @Test    public void testStringMultiPropertyDelimiter() throws Exception {        Rule r = loadFirstRule("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<ruleset>\n"                + "     <rule name=\"myRule\" message=\"Do not place to this package. Move to \n"                + "{0} package/s instead.\" \n" + "class=\"net.sourceforge.pmd.lang.rule.XPathRule\" "                + "language=\"dummy\">\n" + "         <description>Please move your class to the right folder(rest \n"                + "folder)</description>\n" + "         <priority>2</priority>\n" + "         <properties>\n"                + "             <property name=\"packageRegEx\" value=\"com.aptsssss,com.abc\" \n"                + "type=\"String[]\" delimiter=\",\" description=\"valid packages\"/>\n" + "         </properties>"                + "</rule>" + "</ruleset>");        PropertyDescriptor<?> prop = r.getPropertyDescriptor("packageRegEx");        String[] values = (String[]) r.getProperty(prop);        Assert.assertArrayEquals(new String[] { "com.aptsssss", "com.abc" }, values);    }    @Test    public void testRuleSetWithDeprecatedRule() throws Exception {        RuleSet rs = loadRuleSet("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<ruleset>\n"                + "     <rule deprecated=\"true\" ref=\"rulesets/dummy/basic.xml/DummyBasicMockRule\"/>"                + "</ruleset>");        Assert.assertEquals(1, rs.getRules().size());        Rule rule = rs.getRuleByName("DummyBasicMockRule");        Assert.assertNotNull(rule);    }    @Test    public void testRuleSetWithDeprecatedButRenamedRule() throws Exception {        RuleSet rs = loadRuleSet("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<ruleset>\n"                + "     <rule deprecated=\"true\" ref=\"NewName\" name=\"OldName\"/>"                + "     <rule name=\"NewName\" message=\"m\" class=\"net.sourceforge.pmd.lang.rule.XPathRule\" language=\"dummy\">"                + "         <description>d</description>\n" + "         <priority>2</priority>\n" + "     </rule>"                + "</ruleset>");        Assert.assertEquals(1, rs.getRules().size());        Rule rule = rs.getRuleByName("NewName");        Assert.assertNotNull(rule);        Assert.assertNull(rs.getRuleByName("OldName"));    }    @Test    public void testRuleSetReferencesADeprecatedRenamedRule() throws Exception {        RuleSet rs = loadRuleSet("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<ruleset>\n"                + "     <rule ref=\"rulesets/dummy/basic.xml/OldNameOfDummyBasicMockRule\"/>" + "</ruleset>");        Assert.assertEquals(1, rs.getRules().size());        Rule rule = rs.getRuleByName("OldNameOfDummyBasicMockRule");        Assert.assertNotNull(rule);    }    @Test    @SuppressWarnings("unchecked")    public void testXPath() throws RuleSetNotFoundException {        Rule r = loadFirstRule(XPATH);        PropertyDescriptor<String> xpathProperty = (PropertyDescriptor<String>) r.getPropertyDescriptor("xpath");        assertNotNull("xpath property descriptor", xpathProperty);        assertNotSame(r.getProperty(xpathProperty).indexOf(" //Block "), -1);    }    @Test    public void testFacadesOffByDefault() throws RuleSetNotFoundException {        Rule r = loadFirstRule(XPATH);        assertFalse(r.usesDFA());    }    @Test    public void testDFAFlag() throws RuleSetNotFoundException {        assertTrue(loadFirstRule(DFA).usesDFA());    }    @Test    public void testExternalReferenceOverride() throws RuleSetNotFoundException {        Rule r = loadFirstRule(REF_OVERRIDE);        assertEquals("TestNameOverride", r.getName());        assertEquals("Test message override", r.getMessage());        assertEquals("Test description override", r.getDescription());        assertEquals("Test that both example are stored", 2, r.getExamples().size());        assertEquals("Test example override", r.getExamples().get(1));        assertEquals(RulePriority.MEDIUM, r.getPriority());        PropertyDescriptor<?> test2Descriptor = r.getPropertyDescriptor("test2");        assertNotNull("test2 descriptor", test2Descriptor);        assertEquals("override2", r.getProperty(test2Descriptor));        PropertyDescriptor<?> test3Descriptor = r.getPropertyDescriptor("test3");        assertNotNull("test3 descriptor", test3Descriptor);        assertEquals("override3", r.getProperty(test3Descriptor));        PropertyDescriptor<?> test4Descriptor = r.getPropertyDescriptor("test4");        assertNotNull("test3 descriptor", test4Descriptor);        assertEquals("new property", r.getProperty(test4Descriptor));    }    @Test    public void testReferenceInternalToInternal() throws RuleSetNotFoundException {        RuleSet ruleSet = loadRuleSet(REF_INTERNAL_TO_INTERNAL);        Rule rule = ruleSet.getRuleByName("MockRuleName");        assertNotNull("Could not find Rule MockRuleName", rule);        Rule ruleRef = ruleSet.getRuleByName("MockRuleNameRef");        assertNotNull("Could not find Rule MockRuleNameRef", ruleRef);    }    @Test    public void testReferenceInternalToInternalChain() throws RuleSetNotFoundException {        RuleSet ruleSet = loadRuleSet(REF_INTERNAL_TO_INTERNAL_CHAIN);        Rule rule = ruleSet.getRuleByName("MockRuleName");        assertNotNull("Could not find Rule MockRuleName", rule);        Rule ruleRef = ruleSet.getRuleByName("MockRuleNameRef");        assertNotNull("Could not find Rule MockRuleNameRef", ruleRef);        Rule ruleRefRef = ruleSet.getRuleByName("MockRuleNameRefRef");        assertNotNull("Could not find Rule MockRuleNameRefRef", ruleRefRef);    }    @Test    public void testReferenceInternalToExternal() throws RuleSetNotFoundException {        RuleSet ruleSet = loadRuleSet(REF_INTERNAL_TO_EXTERNAL);        Rule rule = ruleSet.getRuleByName("ExternalRefRuleName");        assertNotNull("Could not find Rule ExternalRefRuleName", rule);        Rule ruleRef = ruleSet.getRuleByName("ExternalRefRuleNameRef");        assertNotNull("Could not find Rule ExternalRefRuleNameRef", ruleRef);    }    @Test    public void testReferenceInternalToExternalChain() throws RuleSetNotFoundException {        RuleSet ruleSet = loadRuleSet(REF_INTERNAL_TO_EXTERNAL_CHAIN);        Rule rule = ruleSet.getRuleByName("ExternalRefRuleName");        assertNotNull("Could not find Rule ExternalRefRuleName", rule);        Rule ruleRef = ruleSet.getRuleByName("ExternalRefRuleNameRef");        assertNotNull("Could not find Rule ExternalRefRuleNameRef", ruleRef);        Rule ruleRefRef = ruleSet.getRuleByName("ExternalRefRuleNameRefRef");        assertNotNull("Could not find Rule ExternalRefRuleNameRefRef", ruleRefRef);    }    @Test    public void testReferencePriority() throws RuleSetNotFoundException {        RuleSetFactory rsf = new RuleSetFactory(getClass().getClassLoader(), RulePriority.LOW, false, true);        RuleSet ruleSet = rsf.createRuleSet(createRuleSetReferenceId(REF_INTERNAL_TO_INTERNAL_CHAIN));        assertEquals("Number of Rules", 3, ruleSet.getRules().size());        assertNotNull(ruleSet.getRuleByName("MockRuleName"));        assertNotNull(ruleSet.getRuleByName("MockRuleNameRef"));        assertNotNull(ruleSet.getRuleByName("MockRuleNameRefRef"));        rsf = new RuleSetFactory(getClass().getClassLoader(), RulePriority.MEDIUM_HIGH, false, true);        ruleSet = rsf.createRuleSet(createRuleSetReferenceId(REF_INTERNAL_TO_INTERNAL_CHAIN));        assertEquals("Number of Rules", 2, ruleSet.getRules().size());        assertNotNull(ruleSet.getRuleByName("MockRuleNameRef"));        assertNotNull(ruleSet.getRuleByName("MockRuleNameRefRef"));        rsf = new RuleSetFactory(getClass().getClassLoader(), RulePriority.HIGH, false, true);        ruleSet = rsf.createRuleSet(createRuleSetReferenceId(REF_INTERNAL_TO_INTERNAL_CHAIN));        assertEquals("Number of Rules", 1, ruleSet.getRules().size());        assertNotNull(ruleSet.getRuleByName("MockRuleNameRefRef"));        rsf = new RuleSetFactory(getClass().getClassLoader(), RulePriority.LOW, false, true);        ruleSet = rsf.createRuleSet(createRuleSetReferenceId(REF_INTERNAL_TO_EXTERNAL_CHAIN));        assertEquals("Number of Rules", 3, ruleSet.getRules().size());        assertNotNull(ruleSet.getRuleByName("ExternalRefRuleName"));        assertNotNull(ruleSet.getRuleByName("ExternalRefRuleNameRef"));        assertNotNull(ruleSet.getRuleByName("ExternalRefRuleNameRefRef"));        rsf = new RuleSetFactory(getClass().getClassLoader(), RulePriority.MEDIUM_HIGH, false, true);        ruleSet = rsf.createRuleSet(createRuleSetReferenceId(REF_INTERNAL_TO_EXTERNAL_CHAIN));        assertEquals("Number of Rules", 2, ruleSet.getRules().size());        assertNotNull(ruleSet.getRuleByName("ExternalRefRuleNameRef"));        assertNotNull(ruleSet.getRuleByName("ExternalRefRuleNameRefRef"));        rsf = new RuleSetFactory(getClass().getClassLoader(), RulePriority.HIGH, false, true);        ruleSet = rsf.createRuleSet(createRuleSetReferenceId(REF_INTERNAL_TO_EXTERNAL_CHAIN));        assertEquals("Number of Rules", 1, ruleSet.getRules().size());        assertNotNull(ruleSet.getRuleByName("ExternalRefRuleNameRefRef"));    }    @Test    public void testOverrideMessage() throws RuleSetNotFoundException {        Rule r = loadFirstRule(REF_OVERRIDE_ORIGINAL_NAME);        assertEquals("TestMessageOverride", r.getMessage());    }    @Test    public void testOverrideMessageOneElem() throws RuleSetNotFoundException {        Rule r = loadFirstRule(REF_OVERRIDE_ORIGINAL_NAME_ONE_ELEM);        assertEquals("TestMessageOverride", r.getMessage());    }    @Test(expected = IllegalArgumentException.class)    public void testIncorrectExternalRef() throws IllegalArgumentException, RuleSetNotFoundException {        loadFirstRule(REF_MISPELLED_XREF);    }    @Test    public void testSetPriority() throws RuleSetNotFoundException {        RuleSetFactory rsf = new RuleSetFactory(getClass().getClassLoader(), RulePriority.MEDIUM_HIGH, false, true);        assertEquals(0, rsf.createRuleSet(createRuleSetReferenceId(SINGLE_RULE)).size());        rsf = new RuleSetFactory(getClass().getClassLoader(), RulePriority.MEDIUM_LOW, false, true);        assertEquals(1, rsf.createRuleSet(createRuleSetReferenceId(SINGLE_RULE)).size());    }    @Test    public void testLanguage() throws RuleSetNotFoundException {        Rule r = loadFirstRule(LANGUAGE);        assertEquals(LanguageRegistry.getLanguage(DummyLanguageModule.NAME), r.getLanguage());    }    @Test(expected = IllegalArgumentException.class)    public void testIncorrectLanguage() throws RuleSetNotFoundException {        loadFirstRule(INCORRECT_LANGUAGE);    }    @Test    public void testMinimumLanugageVersion() throws RuleSetNotFoundException {        Rule r = loadFirstRule(MINIMUM_LANGUAGE_VERSION);        assertEquals(LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.4"),                r.getMinimumLanguageVersion());    }    @Test(expected = IllegalArgumentException.class)    public void testIncorrectMinimumLanugageVersion() throws RuleSetNotFoundException {        loadFirstRule(INCORRECT_MINIMUM_LANGUAGE_VERSION);    }    @Test    public void testMaximumLanugageVersion() throws RuleSetNotFoundException {        Rule r = loadFirstRule(MAXIMUM_LANGUAGE_VERSION);        assertEquals(LanguageRegistry.getLanguage(DummyLanguageModule.NAME).getVersion("1.7"),                r.getMaximumLanguageVersion());    }    @Test(expected = IllegalArgumentException.class)    public void testIncorrectMaximumLanugageVersion() throws RuleSetNotFoundException {        loadFirstRule(INCORRECT_MAXIMUM_LANGUAGE_VERSION);    }    @Test(expected = IllegalArgumentException.class)    public void testInvertedMinimumMaximumLanugageVersions() throws RuleSetNotFoundException {        loadFirstRule(INVERTED_MINIMUM_MAXIMUM_LANGUAGE_VERSIONS);    }    @Test    public void testDirectDeprecatedRule() throws RuleSetNotFoundException {        Rule r = loadFirstRule(DIRECT_DEPRECATED_RULE);        assertNotNull("Direct Deprecated Rule", r);    }    @Test    public void testReferenceToDeprecatedRule() throws RuleSetNotFoundException {        Rule r = loadFirstRule(REFERENCE_TO_DEPRECATED_RULE);        assertNotNull("Reference to Deprecated Rule", r);        assertTrue("Rule Reference", r instanceof RuleReference);        assertFalse("Not deprecated", r.isDeprecated());        assertTrue("Original Rule Deprecated", ((RuleReference) r).getRule().isDeprecated());        assertEquals("Rule name", r.getName(), DEPRECATED_RULE_NAME);    }    @Test    public void testRuleSetReferenceWithDeprecatedRule() throws RuleSetNotFoundException {        RuleSet ruleSet = loadRuleSet(REFERENCE_TO_RULESET_WITH_DEPRECATED_RULE);        assertNotNull("RuleSet", ruleSet);        assertFalse("RuleSet empty", ruleSet.getRules().isEmpty());        // No deprecated Rules should be loaded when loading an entire RuleSet        // by reference.        Rule r = ruleSet.getRuleByName(DEPRECATED_RULE_NAME);        assertNull("Deprecated Rule Reference", r);        for (Rule rule : ruleSet.getRules()) {            assertFalse("Rule not deprecated", rule.isDeprecated());        }    }    @Test    public void testExternalReferences() throws RuleSetNotFoundException {        RuleSet rs = loadRuleSet(EXTERNAL_REFERENCE_RULE_SET);        assertEquals(1, rs.size());        assertEquals(MockRule.class.getName(), rs.getRuleByName("MockRule").getRuleClass());    }    @Test    public void testIncludeExcludePatterns() throws RuleSetNotFoundException {        RuleSet ruleSet = loadRuleSet(INCLUDE_EXCLUDE_RULESET);        assertNotNull("Include patterns", ruleSet.getIncludePatterns());        assertEquals("Include patterns size", 2, ruleSet.getIncludePatterns().size());        assertEquals("Include pattern #1", "include1", ruleSet.getIncludePatterns().get(0));        assertEquals("Include pattern #2", "include2", ruleSet.getIncludePatterns().get(1));        assertNotNull("Exclude patterns", ruleSet.getExcludePatterns());        assertEquals("Exclude patterns size", 3, ruleSet.getExcludePatterns().size());        assertEquals("Exclude pattern #1", "exclude1", ruleSet.getExcludePatterns().get(0));        assertEquals("Exclude pattern #2", "exclude2", ruleSet.getExcludePatterns().get(1));        assertEquals("Exclude pattern #3", "exclude3", ruleSet.getExcludePatterns().get(2));    }    /**     * Rule reference can't be resolved - ref is used instead of class and the     * class is old (pmd 4.3 and not pmd 5).     *     * @throws Exception     *             any error     */    @Test(expected = RuleSetNotFoundException.class)    public void testBug1202() throws Exception {        RuleSetReferenceId ref = createRuleSetReferenceId("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<ruleset>\n"                + "  <rule ref=\"net.sourceforge.pmd.rules.XPathRule\">\n" + "    <priority>1</priority>\n"                + "    <properties>\n" + "      <property name=\"xpath\" value=\"//TypeDeclaration\" />\n"                + "      <property name=\"message\" value=\"Foo\" />\n" + "    </properties>\n" + "  </rule>\n"                + "</ruleset>\n");        RuleSetFactory ruleSetFactory = new RuleSetFactory();        ruleSetFactory.createRuleSet(ref);    }    /**     * See https://sourceforge.net/p/pmd/bugs/1225/     *     * @throws Exception     *             any error     */    @Test    public void testEmptyRuleSetFile() throws Exception {        RuleSetReferenceId ref = createRuleSetReferenceId("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "\n"                + "<ruleset name=\"Custom ruleset\" xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n"                + "    xmlns:xsi=\"http:www.w3.org/2001/XMLSchema-instance\"\n"                + "    xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\n"                + "    <description>PMD Ruleset.</description>\n" + "\n"                + "    <exclude-pattern>.*Test.*</exclude-pattern>\n" + "\n" + "</ruleset>\n");        RuleSetFactory ruleSetFactory = new RuleSetFactory();        RuleSet ruleset = ruleSetFactory.createRuleSet(ref);        assertEquals(0, ruleset.getRules().size());    }    /**     * See https://sourceforge.net/p/pmd/bugs/1231/     *     * @throws Exception     *             any error     */    @Test(expected = IllegalArgumentException.class)    public void testWrongRuleNameReferenced() throws Exception {        RuleSetReferenceId ref = createRuleSetReferenceId("<?xml version=\"1.0\"?>\n"                + "<ruleset name=\"Custom ruleset for tests\"\n"                + "    xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n"                + "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"                + "    xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\n"                + "  <description>Custom ruleset for tests</description>\n"                + "  <rule ref=\"net/sourceforge/pmd/TestRuleset1.xml/ThisRuleDoesNotExist\"/>\n" + "</ruleset>\n");        RuleSetFactory ruleSetFactory = new RuleSetFactory();        ruleSetFactory.createRuleSet(ref);    }    /**     * Unit test for #1312 see https://sourceforge.net/p/pmd/bugs/1312/     *     * @throws Exception     *             any error     */    @Test    public void testRuleReferenceWithNameOverridden() throws Exception {        RuleSetReferenceId ref = createRuleSetReferenceId("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"                + "<ruleset xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n"                + "         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"                + "         name=\"pmd-eclipse\"\n"                + "         xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\n"                + "   <description>PMD Plugin preferences rule set</description>\n" + "\n"                + "<rule name=\"OverriddenDummyBasicMockRule\"\n"                + "    ref=\"rulesets/dummy/basic.xml/DummyBasicMockRule\">\n" + "</rule>\n" + "\n" + "</ruleset>");        RuleSetFactory ruleSetFactory = new RuleSetFactory();        RuleSet rs = ruleSetFactory.createRuleSet(ref);        Rule r = rs.getRules().toArray(new Rule[1])[0];        assertEquals("OverriddenDummyBasicMockRule", r.getName());        RuleReference ruleRef = (RuleReference) r;        assertEquals("DummyBasicMockRule", ruleRef.getRule().getName());    }    /**     * See https://sourceforge.net/p/pmd/bugs/1231/     *     * @throws Exception     *             any error     */    @Test(expected = IllegalArgumentException.class)    public void testWrongRuleNameExcluded() throws Exception {        RuleSetReferenceId ref = createRuleSetReferenceId(                "<?xml version=\"1.0\"?>\n" + "<ruleset name=\"Custom ruleset for tests\"\n"                        + "    xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n"                        + "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"                        + "    xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\n"                        + "  <description>Custom ruleset for tests</description>\n"                        + "  <rule ref=\"net/sourceforge/pmd/TestRuleset1.xml\">\n"                        + "    <exclude name=\"ThisRuleDoesNotExist\"/>\n" + "  </rule>\n" + "</ruleset>\n");        RuleSetFactory ruleSetFactory = new RuleSetFactory();        ruleSetFactory.createRuleSet(ref);    }    /**     * This unit test manifests the current behavior - which might change in the     * future. See #1537.     *     * Currently, if a ruleset is imported twice, the excludes of the first     * import are ignored. Duplicated rules are silently ignored.     *     * @throws Exception     *             any error     * @see <a href="https://sourceforge.net/p/pmd/bugs/1537/">#1537 Implement     *      strict ruleset parsing</a>     * @see <a href=     *      "http://stackoverflow.com/questions/40299075/custom-pmd-ruleset-not-working">stackoverflow     *      - custom ruleset not working</a>     */    @Test    public void testExcludeAndImportTwice() throws Exception {        RuleSetReferenceId ref1 = createRuleSetReferenceId(                "<?xml version=\"1.0\"?>\n" + "<ruleset name=\"Custom ruleset for tests\"\n"                        + "    xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n"                        + "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"                        + "    xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\n"                        + "  <description>Custom ruleset for tests</description>\n"                        + "  <rule ref=\"rulesets/dummy/basic.xml\">\n" + "    <exclude name=\"DummyBasicMockRule\"/>\n"                        + "  </rule>\n" + "</ruleset>\n");        RuleSetFactory ruleSetFactory = new RuleSetFactory();        RuleSet ruleset = ruleSetFactory.createRuleSet(ref1);        Assert.assertNull(ruleset.getRuleByName("DummyBasicMockRule"));        RuleSetReferenceId ref2 = createRuleSetReferenceId(                "<?xml version=\"1.0\"?>\n" + "<ruleset name=\"Custom ruleset for tests\"\n"                        + "    xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n"                        + "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"                        + "    xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\n"                        + "  <description>Custom ruleset for tests</description>\n"                        + "  <rule ref=\"rulesets/dummy/basic.xml\">\n" + "    <exclude name=\"DummyBasicMockRule\"/>\n"                        + "  </rule>\n" + "  <rule ref=\"rulesets/dummy/basic.xml\"/>\n" + "</ruleset>\n");        RuleSetFactory ruleSetFactory2 = new RuleSetFactory();        RuleSet ruleset2 = ruleSetFactory2.createRuleSet(ref2);        Assert.assertNotNull(ruleset2.getRuleByName("DummyBasicMockRule"));        RuleSetReferenceId ref3 = createRuleSetReferenceId(                "<?xml version=\"1.0\"?>\n" + "<ruleset name=\"Custom ruleset for tests\"\n"                        + "    xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n"                        + "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"                        + "    xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\n"                        + "  <description>Custom ruleset for tests</description>\n"                        + "  <rule ref=\"rulesets/dummy/basic.xml\"/>\n" + "  <rule ref=\"rulesets/dummy/basic.xml\">\n"                        + "    <exclude name=\"DummyBasicMockRule\"/>\n" + "  </rule>\n" + "</ruleset>\n");        RuleSetFactory ruleSetFactory3 = new RuleSetFactory();        RuleSet ruleset3 = ruleSetFactory3.createRuleSet(ref3);        Assert.assertNotNull(ruleset3.getRuleByName("DummyBasicMockRule"));    }    private static final String REF_OVERRIDE_ORIGINAL_NAME = "<?xml version=\"1.0\"?>" + PMD.EOL            + "<ruleset name=\"test\">" + PMD.EOL + " <description>testdesc</description>" + PMD.EOL + " <rule "            + PMD.EOL + "  ref=\"net/sourceforge/pmd/TestRuleset1.xml/MockRule1\" message=\"TestMessageOverride\"> "            + PMD.EOL + " </rule>" + PMD.EOL + "</ruleset>";    private static final String REF_MISPELLED_XREF = "<?xml version=\"1.0\"?>" + PMD.EOL + "<ruleset name=\"test\">"            + PMD.EOL + " <description>testdesc</description>" + PMD.EOL + " <rule " + PMD.EOL            + "  ref=\"net/sourceforge/pmd/TestRuleset1.xml/FooMockRule1\"> " + PMD.EOL + " </rule>" + PMD.EOL            + "</ruleset>";    private static final String REF_OVERRIDE_ORIGINAL_NAME_ONE_ELEM = "<?xml version=\"1.0\"?>" + PMD.EOL            + "<ruleset name=\"test\">" + PMD.EOL + " <description>testdesc</description>" + PMD.EOL            + " <rule ref=\"net/sourceforge/pmd/TestRuleset1.xml/MockRule1\" message=\"TestMessageOverride\"/> "            + PMD.EOL + "</ruleset>";    private static final String REF_OVERRIDE = "<?xml version=\"1.0\"?>" + PMD.EOL + "<ruleset name=\"test\">" + PMD.EOL            + " <description>testdesc</description>" + PMD.EOL + " <rule " + PMD.EOL            + "  ref=\"net/sourceforge/pmd/TestRuleset1.xml/MockRule1\" " + PMD.EOL + "  name=\"TestNameOverride\" "            + PMD.EOL + "  message=\"Test message override\"> " + PMD.EOL            + "  <description>Test description override</description>" + PMD.EOL            + "  <example>Test example override</example>" + PMD.EOL + "  <priority>3</priority>" + PMD.EOL            + "  <properties>" + PMD.EOL            + "   <property name=\"test2\" description=\"test2\" type=\"String\" value=\"override2\"/>" + PMD.EOL            + "   <property name=\"test3\" description=\"test3\" type=\"String\"><value>override3</value></property>"            + PMD.EOL + "   <property name=\"test4\" description=\"test4\" type=\"String\" value=\"new property\"/>"            + PMD.EOL + "  </properties>" + PMD.EOL + " </rule>" + PMD.EOL + "</ruleset>";    private static final String REF_INTERNAL_TO_INTERNAL = "<?xml version=\"1.0\"?>" + PMD.EOL            + "<ruleset name=\"test\">" + PMD.EOL + " <description>testdesc</description>" + PMD.EOL + "<rule "            + PMD.EOL + "name=\"MockRuleName\" " + PMD.EOL + "message=\"avoid the mock rule\" " + PMD.EOL            + "class=\"net.sourceforge.pmd.lang.rule.MockRule\">" + PMD.EOL + "</rule>"            + " <rule ref=\"MockRuleName\" name=\"MockRuleNameRef\"/> " + PMD.EOL + "</ruleset>";    private static final String REF_INTERNAL_TO_INTERNAL_CHAIN = "<?xml version=\"1.0\"?>" + PMD.EOL            + "<ruleset name=\"test\">" + PMD.EOL + " <description>testdesc</description>" + PMD.EOL + "<rule "            + PMD.EOL + "name=\"MockRuleName\" " + PMD.EOL + "message=\"avoid the mock rule\" " + PMD.EOL            + "class=\"net.sourceforge.pmd.lang.rule.MockRule\">" + PMD.EOL + "</rule>"            + " <rule ref=\"MockRuleName\" name=\"MockRuleNameRef\"><priority>2</priority></rule> " + PMD.EOL            + " <rule ref=\"MockRuleNameRef\" name=\"MockRuleNameRefRef\"><priority>1</priority></rule> " + PMD.EOL            + "</ruleset>";    private static final String REF_INTERNAL_TO_EXTERNAL = "<?xml version=\"1.0\"?>" + PMD.EOL            + "<ruleset name=\"test\">" + PMD.EOL + " <description>testdesc</description>" + PMD.EOL + "<rule "            + PMD.EOL + "name=\"ExternalRefRuleName\" " + PMD.EOL            + "ref=\"net/sourceforge/pmd/TestRuleset1.xml/MockRule1\"/>" + PMD.EOL            + " <rule ref=\"ExternalRefRuleName\" name=\"ExternalRefRuleNameRef\"/> " + PMD.EOL + "</ruleset>";    private static final String REF_INTERNAL_TO_EXTERNAL_CHAIN = "<?xml version=\"1.0\"?>" + PMD.EOL            + "<ruleset name=\"test\">" + PMD.EOL + " <description>testdesc</description>" + PMD.EOL + "<rule "            + PMD.EOL + "name=\"ExternalRefRuleName\" " + PMD.EOL            + "ref=\"net/sourceforge/pmd/TestRuleset2.xml/TestRule\"/>" + PMD.EOL            + " <rule ref=\"ExternalRefRuleName\" name=\"ExternalRefRuleNameRef\"><priority>2</priority></rule> "            + PMD.EOL            + " <rule ref=\"ExternalRefRuleNameRef\" name=\"ExternalRefRuleNameRefRef\"><priority>1</priority></rule> "            + PMD.EOL + "</ruleset>";    private static final String EMPTY_RULESET = "<?xml version=\"1.0\"?>" + PMD.EOL + "<ruleset name=\"test\">"            + PMD.EOL + "<description>testdesc</description>" + PMD.EOL + "</ruleset>";    private static final String SINGLE_RULE = "<?xml version=\"1.0\"?>" + PMD.EOL + "<ruleset name=\"test\">" + PMD.EOL            + "<description>testdesc</description>" + PMD.EOL + "<rule " + PMD.EOL + "name=\"MockRuleName\" " + PMD.EOL            + "message=\"avoid the mock rule\" " + PMD.EOL + "class=\"net.sourceforge.pmd.lang.rule.MockRule\">"            + "<priority>3</priority>" + PMD.EOL + "</rule></ruleset>";    private static final String MULTIPLE_RULES = "<?xml version=\"1.0\"?>" + PMD.EOL + "<ruleset name=\"test\">"            + PMD.EOL + "<description>testdesc</description>" + PMD.EOL + "<rule name=\"MockRuleName1\" " + PMD.EOL            + "message=\"avoid the mock rule\" " + PMD.EOL + "class=\"net.sourceforge.pmd.lang.rule.MockRule\">"            + PMD.EOL + "</rule>" + PMD.EOL + "<rule name=\"MockRuleName2\" " + PMD.EOL            + "message=\"avoid the mock rule\" " + PMD.EOL + "class=\"net.sourceforge.pmd.lang.rule.MockRule\">"            + PMD.EOL + "</rule></ruleset>";    private static final String PROPERTIES = "<?xml version=\"1.0\"?>" + PMD.EOL + "<ruleset name=\"test\">" + PMD.EOL            + "<description>testdesc</description>" + PMD.EOL + "<rule name=\"MockRuleName\" " + PMD.EOL            + "message=\"avoid the mock rule\" " + PMD.EOL + "class=\"net.sourceforge.pmd.lang.rule.MockRule\">"            + PMD.EOL + "<description>testdesc2</description>" + PMD.EOL + "<properties>" + PMD.EOL            + "<property name=\"fooBoolean\" description=\"test\" type=\"Boolean\" value=\"true\" />" + PMD.EOL            + "<property name=\"fooChar\" description=\"test\" type=\"Character\" value=\"B\" />" + PMD.EOL            + "<property name=\"fooInt\" description=\"test\" type=\"Integer\" min=\"1\" max=\"10\" value=\"3\" />"            + PMD.EOL            + "<property name=\"fooFloat\" description=\"test\" type=\"Float\" min=\"1.0\" max=\"1.0\" value=\"1.0\"  />"            + PMD.EOL            + "<property name=\"fooDouble\" description=\"test\" type=\"Double\" min=\"1.0\" max=\"9.0\" value=\"3.0\"  />"            + PMD.EOL + "<property name=\"fooString\" description=\"test\" type=\"String\" value=\"bar\" />" + PMD.EOL            + "</properties>" + PMD.EOL + "</rule></ruleset>";    private static final String XPATH = "<?xml version=\"1.0\"?>" + PMD.EOL + "<ruleset name=\"test\">" + PMD.EOL            + "<description>testdesc</description>" + PMD.EOL + "<rule name=\"MockRuleName\" " + PMD.EOL            + "message=\"avoid the mock rule\" " + PMD.EOL + "class=\"net.sourceforge.pmd.lang.rule.MockRule\">"            + "<priority>3</priority>" + PMD.EOL + PMD.EOL + "<description>testdesc2</description>" + PMD.EOL            + "<properties>" + PMD.EOL + "<property name=\"xpath\" description=\"test\" type=\"String\">" + PMD.EOL            + "<value>" + PMD.EOL + "<![CDATA[ //Block ]]>" + PMD.EOL + "</value>" + PMD.EOL + "</property>" + PMD.EOL            + "</properties>" + PMD.EOL + "</rule></ruleset>";    private static final String PRIORITY = "<?xml version=\"1.0\"?>" + PMD.EOL + "<ruleset name=\"test\">" + PMD.EOL            + "<description>testdesc</description>" + PMD.EOL + "<rule " + PMD.EOL + "name=\"MockRuleName\" " + PMD.EOL            + "message=\"avoid the mock rule\" " + PMD.EOL + "class=\"net.sourceforge.pmd.lang.rule.MockRule\">"            + "<priority>3</priority>" + PMD.EOL + "</rule></ruleset>";    private static final String LANGUAGE = "<?xml version=\"1.0\"?>" + PMD.EOL + "<ruleset name=\"test\">" + PMD.EOL            + "<description>testdesc</description>" + PMD.EOL + "<rule " + PMD.EOL + "name=\"MockRuleName\" " + PMD.EOL            + "message=\"avoid the mock rule\" " + PMD.EOL            + "class=\"net.sourceforge.pmd.lang.rule.MockRule\" language=\"dummy\">" + PMD.EOL + "</rule></ruleset>";    private static final String INCORRECT_LANGUAGE = "<?xml version=\"1.0\"?>" + PMD.EOL + "<ruleset name=\"test\">"            + PMD.EOL + "<description>testdesc</description>" + PMD.EOL + "<rule " + PMD.EOL + "name=\"MockRuleName\" "            + PMD.EOL + "message=\"avoid the mock rule\" " + PMD.EOL            + "class=\"net.sourceforge.pmd.lang.rule.MockRule\"" + PMD.EOL + " language=\"bogus\">" + PMD.EOL            + "</rule></ruleset>";    private static final String MINIMUM_LANGUAGE_VERSION = "<?xml version=\"1.0\"?>" + PMD.EOL            + "<ruleset name=\"test\">" + PMD.EOL + "<description>testdesc</description>" + PMD.EOL + "<rule " + PMD.EOL            + "name=\"MockRuleName\" " + PMD.EOL + "message=\"avoid the mock rule\" " + PMD.EOL            + "class=\"net.sourceforge.pmd.lang.rule.MockRule\"" + PMD.EOL + " language=\"dummy\"" + PMD.EOL            + " minimumLanguageVersion=\"1.4\">" + PMD.EOL + "</rule></ruleset>";    private static final String INCORRECT_MINIMUM_LANGUAGE_VERSION = "<?xml version=\"1.0\"?>" + PMD.EOL            + "<ruleset name=\"test\">" + PMD.EOL + "<description>testdesc</description>" + PMD.EOL + "<rule " + PMD.EOL            + "name=\"MockRuleName\" " + PMD.EOL + "message=\"avoid the mock rule\" " + PMD.EOL            + "class=\"net.sourceforge.pmd.lang.rule.MockRule\"" + PMD.EOL + " language=\"dummy\"" + PMD.EOL            + " minimumLanguageVersion=\"bogus\">" + PMD.EOL + "</rule></ruleset>";    private static final String MAXIMUM_LANGUAGE_VERSION = "<?xml version=\"1.0\"?>" + PMD.EOL            + "<ruleset name=\"test\">" + PMD.EOL + "<description>testdesc</description>" + PMD.EOL + "<rule " + PMD.EOL            + "name=\"MockRuleName\" " + PMD.EOL + "message=\"avoid the mock rule\" " + PMD.EOL            + "class=\"net.sourceforge.pmd.lang.rule.MockRule\"" + PMD.EOL + " language=\"dummy\"" + PMD.EOL            + " maximumLanguageVersion=\"1.7\">" + PMD.EOL + "</rule></ruleset>";    private static final String INCORRECT_MAXIMUM_LANGUAGE_VERSION = "<?xml version=\"1.0\"?>" + PMD.EOL            + "<ruleset name=\"test\">" + PMD.EOL + "<description>testdesc</description>" + PMD.EOL + "<rule " + PMD.EOL            + "name=\"MockRuleName\" " + PMD.EOL + "message=\"avoid the mock rule\" " + PMD.EOL            + "class=\"net.sourceforge.pmd.lang.rule.MockRule\"" + PMD.EOL + " language=\"dummy\"" + PMD.EOL            + " maximumLanguageVersion=\"bogus\">" + PMD.EOL + "</rule></ruleset>";    private static final String INVERTED_MINIMUM_MAXIMUM_LANGUAGE_VERSIONS = "<?xml version=\"1.0\"?>" + PMD.EOL            + "<ruleset name=\"test\">" + PMD.EOL + "<description>testdesc</description>" + PMD.EOL + "<rule " + PMD.EOL            + "name=\"MockRuleName\" " + PMD.EOL + "message=\"avoid the mock rule\" " + PMD.EOL            + "class=\"net.sourceforge.pmd.lang.rule.MockRule\" " + PMD.EOL + "language=\"dummy\"" + PMD.EOL            + " minimumLanguageVersion=\"1.7\"" + PMD.EOL + "maximumLanguageVersion=\"1.4\">" + PMD.EOL            + "</rule></ruleset>";    private static final String DIRECT_DEPRECATED_RULE = "<?xml version=\"1.0\"?>" + PMD.EOL + "<ruleset name=\"test\">"            + PMD.EOL + "<description>testdesc</description>" + PMD.EOL + "<rule " + PMD.EOL + "name=\"MockRuleName\" "            + PMD.EOL + "message=\"avoid the mock rule\" " + PMD.EOL            + "class=\"net.sourceforge.pmd.lang.rule.MockRule\" deprecated=\"true\">" + PMD.EOL + "</rule></ruleset>";    // Note: Update this RuleSet name to a different RuleSet with deprecated    // Rules when the Rules are finally removed.    private static final String DEPRECATED_RULE_RULESET_NAME = "net/sourceforge/pmd/TestRuleset1.xml";    // Note: Update this Rule name to a different deprecated Rule when the one    // listed here is finally removed.    private static final String DEPRECATED_RULE_NAME = "MockRule3";    private static final String REFERENCE_TO_DEPRECATED_RULE = "<?xml version=\"1.0\"?>" + PMD.EOL            + "<ruleset name=\"test\">" + PMD.EOL + "<description>testdesc</description>" + PMD.EOL + "<rule " + PMD.EOL            + "ref=\"" + DEPRECATED_RULE_RULESET_NAME + "/" + DEPRECATED_RULE_NAME + "\">" + PMD.EOL            + "</rule></ruleset>";    private static final String REFERENCE_TO_RULESET_WITH_DEPRECATED_RULE = "<?xml version=\"1.0\"?>" + PMD.EOL            + "<ruleset name=\"test\">" + PMD.EOL + "<description>testdesc</description>" + PMD.EOL + "<rule " + PMD.EOL            + "ref=\"" + DEPRECATED_RULE_RULESET_NAME + "\">" + PMD.EOL + "</rule></ruleset>";    private static final String DFA = "<?xml version=\"1.0\"?>" + PMD.EOL + "<ruleset name=\"test\">" + PMD.EOL            + "<description>testdesc</description>" + PMD.EOL + "<rule " + PMD.EOL + "name=\"MockRuleName\" " + PMD.EOL            + "message=\"avoid the mock rule\" " + PMD.EOL + "dfa=\"true\" " + PMD.EOL            + "class=\"net.sourceforge.pmd.lang.rule.MockRule\">" + "<priority>3</priority>" + PMD.EOL            + "</rule></ruleset>";    private static final String INCLUDE_EXCLUDE_RULESET = "<?xml version=\"1.0\"?>" + PMD.EOL            + "<ruleset name=\"test\">" + PMD.EOL + "<description>testdesc</description>" + PMD.EOL            + "<include-pattern>include1</include-pattern>" + PMD.EOL + "<include-pattern>include2</include-pattern>"            + PMD.EOL + "<exclude-pattern>exclude1</exclude-pattern>" + PMD.EOL            + "<exclude-pattern>exclude2</exclude-pattern>" + PMD.EOL + "<exclude-pattern>exclude3</exclude-pattern>"            + PMD.EOL + "</ruleset>";    private static final String EXTERNAL_REFERENCE_RULE_SET = "<?xml version=\"1.0\"?>" + PMD.EOL            + "<ruleset name=\"test\">" + PMD.EOL + "<description>testdesc</description>" + PMD.EOL            + "<rule ref=\"net/sourceforge/pmd/external-reference-ruleset.xml/MockRule\"/>" + PMD.EOL + "</ruleset>";    private Rule loadFirstRule(String ruleSetXml) throws RuleSetNotFoundException {        RuleSet rs = loadRuleSet(ruleSetXml);        return rs.getRules().iterator().next();    }    private RuleSet loadRuleSet(String ruleSetXml) throws RuleSetNotFoundException {        RuleSetFactory rsf = new RuleSetFactory();        return rsf.createRuleSet(createRuleSetReferenceId(ruleSetXml));    }    private static RuleSetReferenceId createRuleSetReferenceId(final String ruleSetXml) {        return new RuleSetReferenceId(null) {            @Override            public InputStream getInputStream(ClassLoader classLoader) throws RuleSetNotFoundException {                try {                    return new ByteArrayInputStream(ruleSetXml.getBytes("UTF-8"));                } catch (UnsupportedEncodingException e) {                    return null;                }            }        };    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertSame;import static org.junit.Assert.assertTrue;import java.io.File;import org.junit.Test;import junit.framework.JUnit4TestAdapter;public class RuleContextTest {    @Test    public void testReport() {        RuleContext ctx = new RuleContext();        assertEquals(0, ctx.getReport().size());        Report r = new Report();        ctx.setReport(r);        Report r2 = ctx.getReport();        assertEquals("report object mismatch", r, r2);    }    @Test    public void testSourceCodeFilename() {        RuleContext ctx = new RuleContext();        assertNull("filename should be null", ctx.getSourceCodeFilename());        ctx.setSourceCodeFilename("foo");        assertEquals("filename mismatch", "foo", ctx.getSourceCodeFilename());    }    @Test    public void testSourceCodeFile() {        RuleContext ctx = new RuleContext();        assertNull("file should be null", ctx.getSourceCodeFile());        ctx.setSourceCodeFile(new File("somefile.java"));        assertEquals("filename mismatch", new File("somefile.java"), ctx.getSourceCodeFile());    }    @Test    public void testAttributes() {        RuleContext ctx1 = new RuleContext();        Object obj1 = new Object();        Object obj2 = new Object();        assertNull("attribute should be null", ctx1.getAttribute("attribute"));        boolean set = ctx1.setAttribute("attribute", obj1);        assertTrue("attribute should have been set", set);        assertNotNull("attribute should not be null", ctx1.getAttribute("attribute"));        assertSame("attribute should be expected instance", ctx1.getAttribute("attribute"), obj1);        set = ctx1.setAttribute("attribute", obj2);        assertFalse("attribute should not have been set", set);        assertSame("attribute should be expected instance", ctx1.getAttribute("attribute"), obj1);        Object value = ctx1.removeAttribute("attribute");        assertSame("attribute value should be expected instance", value, obj1);        assertNull("attribute should be null", ctx1.getAttribute("attribute"));    }    @Test    public void testSharedAttributes() {        RuleContext ctx1 = new RuleContext();        RuleContext ctx2 = new RuleContext(ctx1);        StringBuilder obj1 = new StringBuilder();        StringBuilder obj2 = new StringBuilder();        ctx1.setAttribute("attribute1", obj1);        ctx2.setAttribute("attribute2", obj2);        assertNotNull("attribute should not be null", ctx1.getAttribute("attribute1"));        assertNotNull("attribute should not be null", ctx1.getAttribute("attribute2"));        assertNotNull("attribute should not be null", ctx2.getAttribute("attribute1"));        assertNotNull("attribute should not be null", ctx2.getAttribute("attribute2"));        assertSame("attribute should be expected instance", ctx1.getAttribute("attribute1"), obj1);        assertSame("attribute should be expected instance", ctx1.getAttribute("attribute2"), obj2);        assertSame("attribute should be expected instance", ctx2.getAttribute("attribute1"), obj1);        assertSame("attribute should be expected instance", ctx2.getAttribute("attribute2"), obj2);        ctx1.removeAttribute("attribute1");        assertNull("attribute should be null", ctx1.getAttribute("attribute1"));        assertNull("attribute should be null", ctx2.getAttribute("attribute1"));        assertNotNull("attribute should not be null", ctx1.getAttribute("attribute2"));        assertNotNull("attribute should not be null", ctx2.getAttribute("attribute2"));        StringBuilder value = (StringBuilder) ctx1.getAttribute("attribute2");        assertEquals("attribute value should be empty", "", value.toString());        value.append("x");        StringBuilder value1 = (StringBuilder) ctx1.getAttribute("attribute2");        assertEquals("attribute value should be 'x'", "x", value1.toString());        StringBuilder value2 = (StringBuilder) ctx2.getAttribute("attribute2");        assertEquals("attribute value should be 'x'", "x", value2.toString());    }    public static junit.framework.Test suite() {        return new JUnit4TestAdapter(RuleContextTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import org.junit.Ignore;import org.junit.Test;import net.sourceforge.pmd.lang.ast.DummyNode;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.rule.MockRule;import net.sourceforge.pmd.lang.rule.ParametricRuleViolation;import junit.framework.JUnit4TestAdapter;public class RuleViolationTest {    @Test    public void testConstructor1() {        Rule rule = new MockRule("name", "desc", "msg", "rulesetname");        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename");        DummyNode s = new DummyNode(1);        s.testingOnlySetBeginLine(2);        s.testingOnlySetBeginColumn(1);        RuleViolation r = new ParametricRuleViolation<Node>(rule, ctx, s, rule.getMessage());        assertEquals("object mismatch", rule, r.getRule());        assertEquals("line number is wrong", 2, r.getBeginLine());        assertEquals("filename is wrong", "filename", r.getFilename());    }    @Test    public void testConstructor2() {        Rule rule = new MockRule("name", "desc", "msg", "rulesetname");        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename");        DummyNode s = new DummyNode(1);        s.testingOnlySetBeginLine(2);        s.testingOnlySetBeginColumn(1);        RuleViolation r = new ParametricRuleViolation<Node>(rule, ctx, s, "description");        assertEquals("object mismatch", rule, r.getRule());        assertEquals("line number is wrong", 2, r.getBeginLine());        assertEquals("filename is wrong", "filename", r.getFilename());        assertEquals("description is wrong", "description", r.getDescription());    }    @Test    public void testComparatorWithDifferentFilenames() {        Rule rule = new MockRule("name", "desc", "msg", "rulesetname");        RuleViolationComparator comp = RuleViolationComparator.INSTANCE;        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename1");        DummyNode s = new DummyNode(1);        s.testingOnlySetBeginLine(10);        s.testingOnlySetBeginColumn(1);        RuleViolation r1 = new ParametricRuleViolation<Node>(rule, ctx, s, "description");        ctx.setSourceCodeFilename("filename2");        DummyNode s1 = new DummyNode(1);        s1.testingOnlySetBeginLine(10);        s1.testingOnlySetBeginColumn(1);        RuleViolation r2 = new ParametricRuleViolation<Node>(rule, ctx, s1, "description");        assertEquals(-1, comp.compare(r1, r2));        assertEquals(1, comp.compare(r2, r1));    }    @Test    public void testComparatorWithSameFileDifferentLines() {        Rule rule = new MockRule("name", "desc", "msg", "rulesetname");        RuleViolationComparator comp = RuleViolationComparator.INSTANCE;        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename");        DummyNode s = new DummyNode(1);        s.testingOnlySetBeginLine(10);        s.testingOnlySetBeginColumn(1);        DummyNode s1 = new DummyNode(1);        s1.testingOnlySetBeginLine(20);        s1.testingOnlySetBeginColumn(1);        RuleViolation r1 = new ParametricRuleViolation<Node>(rule, ctx, s, "description");        RuleViolation r2 = new ParametricRuleViolation<Node>(rule, ctx, s1, "description");        assertTrue(comp.compare(r1, r2) < 0);        assertTrue(comp.compare(r2, r1) > 0);    }    @Ignore    @Test    public void testComparatorWithSameFileSameLines() {        Rule rule = new MockRule("name", "desc", "msg", "rulesetname");        RuleViolationComparator comp = RuleViolationComparator.INSTANCE;        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename");        DummyNode s = new DummyNode(1);        s.testingOnlySetBeginLine(10);        s.testingOnlySetBeginColumn(1);        DummyNode s1 = new DummyNode(1);        s1.testingOnlySetBeginLine(10);        s1.testingOnlySetBeginColumn(1);        RuleViolation r1 = new ParametricRuleViolation<Node>(rule, ctx, s, "description");        RuleViolation r2 = new ParametricRuleViolation<Node>(rule, ctx, s1, "description");        assertEquals(1, comp.compare(r1, r2));        assertEquals(1, comp.compare(r2, r1));    }    public static junit.framework.Test suite() {        return new JUnit4TestAdapter(RuleViolationTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import java.io.IOException;import org.apache.commons.io.IOUtils;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.testframework.AbstractTokenizerTest;public class MatlabTokenizerTest extends AbstractTokenizerTest {    private static final String FILENAME = "sample-matlab.m";    @Before    @Override    public void buildTokenizer() throws IOException {        this.tokenizer = new MatlabTokenizer();        this.sourceCode = new SourceCode(new SourceCode.StringCodeLoader(this.getSampleCode(), FILENAME));    }    @Override    public String getSampleCode() throws IOException {        return IOUtils.toString(MatlabTokenizer.class.getResourceAsStream(FILENAME));    }    @Test    public void tokenizeTest() throws IOException {        this.expectedTokenCount = 3925;        super.tokenizeTest();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.matlab.MatlabLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] { { MatlabLanguageModule.NAME, MatlabLanguageModule.TERSE_NAME, "",            LanguageRegistry.getLanguage(MatlabLanguageModule.NAME).getDefaultVersion(), }, });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import java.io.IOException;import java.nio.charset.StandardCharsets;import org.apache.commons.io.IOUtils;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.testframework.AbstractTokenizerTest;public class RubyTokenizerTest extends AbstractTokenizerTest {    @Before    @Override    public void buildTokenizer() {        this.tokenizer = new RubyTokenizer();        this.sourceCode = new SourceCode(new SourceCode.StringCodeLoader(this.getSampleCode(), "server.rb"));    }    @Override    public String getSampleCode() {        try {            return IOUtils.toString(RubyTokenizerTest.class.getResourceAsStream("server.rb"), StandardCharsets.UTF_8);        } catch (IOException e) {            throw new RuntimeException(e);        }    }    @Test    public void tokenizeTest() throws IOException {        this.expectedTokenCount = 30;        super.tokenizeTest();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.ruby.RubyLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] { { RubyLanguageModule.NAME, RubyLanguageModule.TERSE_NAME, "",            LanguageRegistry.getLanguage(RubyLanguageModule.NAME).getDefaultVersion(), }, });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import java.io.File;import java.io.IOException;import org.apache.commons.io.FileUtils;import org.apache.commons.io.IOUtils;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.sonar.plugins.scala.cpd.ScalaTokenizer;import net.sourceforge.pmd.testframework.AbstractTokenizerTest;public class ScalaTokenizerTest extends AbstractTokenizerTest {    private static final String ENCODING = "UTF-8";    private static final String FILENAME = "sample-LiftActor.scala";    private File tempFile;    @Before    @Override    public void buildTokenizer() throws IOException {        createTempFileOnDisk();        this.tokenizer = new ScalaTokenizer();        this.sourceCode = new SourceCode(new SourceCode.FileCodeLoader(tempFile, "UTF-8"));    }    private void createTempFileOnDisk() throws IOException {        this.tempFile = File.createTempFile("scala-tokenizer-test-", ".scala");        FileUtils.writeStringToFile(tempFile, getSampleCode(), ENCODING);    }    @Override    public String getSampleCode() throws IOException {        return IOUtils.toString(ScalaTokenizer.class.getResourceAsStream(FILENAME), ENCODING);    }    @Test    public void tokenizeTest() throws IOException {        this.expectedTokenCount = 2591;        super.tokenizeTest();    }    @After    public void cleanUp() {        FileUtils.deleteQuietly(this.tempFile);        this.tempFile = null;    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.scala.ScalaLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] { { ScalaLanguageModule.NAME, ScalaLanguageModule.TERSE_NAME, "",            LanguageRegistry.getLanguage(ScalaLanguageModule.NAME).getDefaultVersion(), }, });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.cpp;import static org.junit.Assert.assertEquals;import java.io.IOException;import java.io.StringReader;import org.junit.Test;public class ContinuationReaderTest {    @Test    public void testHappyPath() throws IOException {        assertEquals("empty", "", filter(""));        assertEquals("anything", "anything", filter("anything"));        assertEquals("partial: BS", "\\", filter("\\"));        assertEquals("partial: BS LF", "\\\r", filter("\\\r"));        assertEquals("full: BS CR", "", filter("\\\n"));        assertEquals("full: BS LF CR", "", filter("\\\r\n"));        assertEquals("partial: BS: prefix", "prefix\\", filter("prefix\\"));        assertEquals("partial: BS LF: prefix", "prefix\\\r", filter("prefix\\\r"));        assertEquals("full: BS CR: prefix", "prefix", filter("prefix\\\n"));        assertEquals("full: BS LF CR: prefix", "prefix", filter("prefix\\\r\n"));        assertEquals("partial: BS: suffix", "\\suffix", filter("\\suffix"));        assertEquals("partial: BS LF: suffix", "\\\rsuffix", filter("\\\rsuffix"));        assertEquals("full: BS CR: suffix", "suffix", filter("\\\nsuffix"));        assertEquals("full: BS LF CR: suffix", "suffix", filter("\\\r\nsuffix"));        assertEquals("partial: BS: prefix, suffix", "prefix\\suffix", filter("prefix\\suffix"));        assertEquals("partial: BS LF: prefix, suffix", "prefix\\\rsuffix", filter("prefix\\\rsuffix"));        assertEquals("full: BS CR: prefix, suffix", "prefixsuffix", filter("prefix\\\nsuffix"));        assertEquals("full: BS LF CR: prefix, suffix", "prefixsuffix", filter("prefix\\\r\nsuffix"));        assertEquals("complex mixed", "abc", filter("a\\\r\nb\\\n\\\n\\\r\nc"));    }    private static String filter(String s) throws IOException {        ContinuationReader reader = new ContinuationReader(new StringReader(s));        try {            StringBuilder buf = new StringBuilder();            int c;            while ((c = reader.read()) >= 0) {                buf.append((char) c);            }            return buf.toString();        } finally {            reader.close();        }    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.util.Properties;import org.apache.commons.io.IOUtils;import org.junit.Test;import net.sourceforge.pmd.PMD;public class CPPTokenizerTest {    @Test    public void testUTFwithBOM() {        Tokens tokens = parse("\ufeffint start()\n{ int ret = 1;\nreturn ret;\n}\n");        assertTrue(TokenEntry.getEOF() != tokens.getTokens().get(0));        assertEquals(15, tokens.size());    }    @Test    public void testUnicodeSupport() {        String code = "\ufeff" + "#include <iostream>\n" + "#include <string>\n" + "\n" + "// example\n" + "\n"                + "int main()\n" + "{\n" + "    std::string text(\"ąęćśźńó\");\n" + "    std::cout << text;\n"                + "    return 0;\n" + "}\n";        Tokens tokens = parse(code);        assertTrue(TokenEntry.getEOF() != tokens.getTokens().get(0));        assertEquals(24, tokens.size());    }    @Test    public void testMultiLineMacros() {        Tokens tokens = parse(TEST1);        assertEquals(7, tokens.size());    }    @Test    public void testDollarSignInIdentifier() {        parse(TEST2);    }    @Test    public void testDollarSignStartingIdentifier() {        parse(TEST3);    }    @Test    public void testWideCharacters() {        parse(TEST4);    }    @Test    public void testContinuationIntraToken() {        Tokens tokens = parse(TEST5);        assertEquals(7, tokens.size());    }    @Test    public void testContinuationInterToken() {        Tokens tokens = parse(TEST6);        assertEquals(17, tokens.size());    }    @Test    public void testTokenizerWithSkipBlocks() throws Exception {        String test = IOUtils.toString(CPPTokenizerTest.class.getResourceAsStream("cpp/cpp_with_asm.cpp"));        Tokens tokens = parse(test, true);        assertEquals(19, tokens.size());    }    @Test    public void testTokenizerWithSkipBlocksPattern() throws Exception {        String test = IOUtils.toString(CPPTokenizerTest.class.getResourceAsStream("cpp/cpp_with_asm.cpp"));        Tokens tokens = parse(test, true, "#if debug|#endif");        assertEquals(31, tokens.size());    }    @Test    public void testTokenizerWithoutSkipBlocks() throws Exception {        String test = IOUtils.toString(CPPTokenizerTest.class.getResourceAsStream("cpp/cpp_with_asm.cpp"));        Tokens tokens = parse(test, false);        assertEquals(37, tokens.size());    }    @Test    // ASM code containing the '@' character    public void testAsmWithAtSign() {        Tokens tokens = parse(TEST7);        assertEquals(22, tokens.size());    }    @Test    public void testEOLCommentInPreprocessingDirective() {        parse("#define LSTFVLES_CPP  //*" + PMD.EOL);    }    @Test    public void testEmptyCharacter() {        Tokens tokens = parse("std::wstring wsMessage( sMessage.length(), L'');" + PMD.EOL);        assertEquals(15, tokens.size());    }    @Test    public void testHexCharacter() {        Tokens tokens = parse("if (*pbuf == '\\0x05')" + PMD.EOL);        assertEquals(8, tokens.size());    }    @Test    public void testWhiteSpaceEscape() {        Tokens tokens = parse("szPath = m_sdcacheDir + _T(\"\\    oMedia\");" + PMD.EOL);        assertEquals(10, tokens.size());    }    @Test    public void testRawStringLiteral() {        String code = "const char* const KDefaultConfig = R\"(\n" + "    [Sinks.1]\n" + "    Destination=Console\n"                + "    AutoFlush=true\n"                + "    Format=\"[%TimeStamp%] %ThreadId% %QueryIdHigh% %QueryIdLow% %LoggerFile%:%Line% (%Severity%) - %Message%\"\n"                + "    Filter=\"%Severity% >= WRN\"\n" + ")\";\n";        Tokens tokens = parse(code);        assertTrue(TokenEntry.getEOF() != tokens.getTokens().get(0));        assertEquals(9, tokens.size());    }    private Tokens parse(String snippet) {        return parse(snippet, false);    }    private Tokens parse(String snippet, boolean skipBlocks) {        return parse(snippet, skipBlocks, null);    }    private Tokens parse(String snippet, boolean skipBlocks, String skipPattern) {        Properties properties = new Properties();        properties.setProperty(Tokenizer.OPTION_SKIP_BLOCKS, Boolean.toString(skipBlocks));        if (skipPattern != null) {            properties.setProperty(Tokenizer.OPTION_SKIP_BLOCKS_PATTERN, skipPattern);        }        CPPTokenizer tokenizer = new CPPTokenizer();        tokenizer.setProperties(properties);        SourceCode code = new SourceCode(new SourceCode.StringCodeLoader(snippet));        Tokens tokens = new Tokens();        tokenizer.tokenize(code, tokens);        return tokens;    }    private static final String TEST1 = "#define FOO a +\\" + PMD.EOL + "            b +\\" + PMD.EOL            + "            c +\\" + PMD.EOL + "            d +\\" + PMD.EOL + "            e +\\" + PMD.EOL            + "            f +\\" + PMD.EOL + "            g" + PMD.EOL + " void main() {}";    private static final String TEST2 = " void main() { int x$y = 42; }";    private static final String TEST3 = " void main() { int $x = 42; }";    private static final String TEST4 = " void main() { char x = L'a'; }";    private static final String TEST5 = "v\\" + PMD.EOL + "o\\" + PMD.EOL + "i\\" + PMD.EOL + "d\\" + PMD.EOL + " \\"            + PMD.EOL + "m\\" + PMD.EOL + "a\\" + PMD.EOL + "i\\" + PMD.EOL + "n\\" + PMD.EOL + "(\\" + PMD.EOL + ")\\"            + PMD.EOL + " \\" + PMD.EOL + "{\\" + PMD.EOL + " \\" + PMD.EOL + "}\\" + PMD.EOL;    private static final String TEST6 = "#include <iostream>" + PMD.EOL + PMD.EOL + "int main()" + PMD.EOL + "{"            + PMD.EOL + "   std::cout << \"Hello, \" \\" + PMD.EOL + "                \"world!\\n\";" + PMD.EOL            + "   return 0;" + PMD.EOL + "}";    private static final String TEST7 = "asm void eSPI_boot()" + PMD.EOL + "{" + PMD.EOL + "  // setup stack pointer"            + PMD.EOL + "  lis r1, _stack_addr@h" + PMD.EOL + "  ori r1, r1, _stack_addr@l" + PMD.EOL + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.cpp.CppLanguageModule;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][] {            {                CppLanguageModule.NAME,                CppLanguageModule.TERSE_NAME,                "",                LanguageRegistry.getLanguage(CppLanguageModule.NAME).getDefaultVersion(),            },        });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.apex.rule.style;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class StyleRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "apex-style";    @Override    public void setUp() {        addRule(RULESET, "AvoidGlobalModifier");        addRule(RULESET, "AvoidLogicInTrigger");        addRule(RULESET, "ClassNamingConventions");        addRule(RULESET, "MethodNamingConventions");        addRule(RULESET, "VariableNamingConventions");        addRule(RULESET, "MethodWithSameNameAsEnclosingClass");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.apex.rule.complexity;import java.io.StringReader;import java.util.Arrays;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.Parser;import net.sourceforge.pmd.lang.ParserOptions;import net.sourceforge.pmd.lang.apex.ApexLanguageModule;import net.sourceforge.pmd.lang.ast.Node;public class StdCyclomaticComplexityRuleTest {    /**     * Make sure the entry stack is empty, if show classes complexity is     * disabled.     *     * @see <a href="https://sourceforge.net/p/pmd/bugs/1501/">bug #1501</a>     */    @Test    public void entryStackMustBeEmpty() {        StdCyclomaticComplexityRule rule = new StdCyclomaticComplexityRule();        rule.setProperty(StdCyclomaticComplexityRule.SHOW_CLASSES_COMPLEXITY_DESCRIPTOR, Boolean.FALSE);        RuleContext ctx = new RuleContext();        LanguageVersion javaLanguageVersion = LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getDefaultVersion();        ParserOptions parserOptions = javaLanguageVersion.getLanguageVersionHandler().getDefaultParserOptions();        Parser parser = javaLanguageVersion.getLanguageVersionHandler().getParser(parserOptions);        Node node = parser.parse("test", new StringReader("public class SampleClass {}"));        rule.apply(Arrays.asList(node), ctx);        Assert.assertTrue(rule.entryStack.isEmpty());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.apex.rule.complexity;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class ComplexityRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "apex-complexity";    @Override    public void setUp() {        addRule(RULESET, "AvoidDeeplyNestedIfStmts");        addRule(RULESET, "ExcessiveClassLength");        addRule(RULESET, "ExcessiveParameterList");        addRule(RULESET, "ExcessivePublicCount");        addRule(RULESET, "NcssConstructorCount");        addRule(RULESET, "NcssMethodCount");        addRule(RULESET, "NcssTypeCount");        addRule(RULESET, "StdCyclomaticComplexity");        addRule(RULESET, "TooManyFields");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.apex.rule.security;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class SecurityRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "apex-security";    @Override    public void setUp() {        addRule(RULESET, "ApexBadCrypto");        addRule(RULESET, "ApexXSSFromEscapeFalse");        addRule(RULESET, "ApexXSSFromURLParam");        addRule(RULESET, "ApexCSRF");        addRule(RULESET, "ApexOpenRedirect");        addRule(RULESET, "ApexSOQLInjection");        addRule(RULESET, "ApexSharingViolations");        addRule(RULESET, "ApexInsecureEndpoint");        addRule(RULESET, "ApexCRUDViolation");        addRule(RULESET, "ApexDangerousMethods");        addRule(RULESET, "ApexSuggestUsingNamedCred");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.apex.rule.performance;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class PerformanceRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "apex-performance";    @Override    public void setUp() {        addRule(RULESET, "AvoidSoqlInLoops");        addRule(RULESET, "AvoidDmlStatementsInLoops");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.apex.rule.braces;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;public class BracesRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "apex-braces";    @Override    public void setUp() {        addRule(RULESET, "ForLoopsMustUseBraces");        addRule(RULESET, "IfElseStmtsMustUseBraces");        addRule(RULESET, "IfStmtsMustUseBraces");        addRule(RULESET, "WhileLoopsMustUseBraces");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.apex.rule.apexunit;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;/** * @author a.subramanian */public class ApexUnitRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "apex-apexunit";    @Override    public void setUp() {        addRule(RULESET, "ApexUnitTestClassShouldHaveAsserts");        addRule(RULESET, "ApexUnitTestShouldNotUseSeeAllDataTrue");    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.apex.ast;import static net.sourceforge.pmd.lang.apex.ast.ApexParserTestHelpers.parse;import org.junit.Assert;import org.junit.Test;import apex.jorje.semantic.ast.compilation.Compilation;public class ASTUserTriggerTest {    @Test    public void testTriggerName() {        ApexNode<Compilation> node = parse("trigger HelloWorldTrigger on Book__c (before insert) {\n"                + "   Book__c[] books = Trigger.new;\n" + "   MyHelloWorld.applyDiscount(books);\n" + "}\n");        Assert.assertSame(ASTUserTrigger.class, node.getClass());        Assert.assertEquals("HelloWorldTrigger", node.getImage());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.apex.ast;import static net.sourceforge.pmd.lang.apex.ast.ApexParserTestHelpers.parse;import static org.junit.Assert.assertEquals;import java.io.File;import java.util.List;import org.apache.commons.io.FileUtils;import org.apache.commons.io.IOUtils;import org.junit.Assert;import org.junit.Test;import net.sourceforge.pmd.lang.ast.Node;import apex.jorje.semantic.ast.compilation.Compilation;public class ApexParserTest {    @Test    public void understandsSimpleFile() {        // Setup        String code = "@isTest\n public class SimpleClass {\n" + "    @isTest\n public static void testAnything() {\n"                + "        \n" + "    }\n" + "}";        // Exercise        ApexNode<Compilation> rootNode = parse(code);        // Verify        List<ASTMethod> methods = rootNode.findDescendantsOfType(ASTMethod.class);        assertEquals(4, methods.size());    }    private String testCodeForLineNumbers =              "public class SimpleClass {\n" // line 1            + "    public void method1() {\n" // line 2            + "        System.out.println(\"abc\");\n" // line 3            + "        // this is a comment\n" // line 4            + "    }\n" // line 5            + "}\n"; // line 6    @Test    public void verifyLineColumNumbers() {        ApexNode<Compilation> rootNode = parse(testCodeForLineNumbers);        assertLineNumbersForTestCode(rootNode);    }    @Test    public void verifyLineColumNumbersWithWindowsLineEndings() {        String windowsLineEndings = testCodeForLineNumbers.replaceAll(" \n", "\r\n");        ApexNode<Compilation> rootNode = parse(windowsLineEndings);        assertLineNumbersForTestCode(rootNode);    }    private void assertLineNumbersForTestCode(ApexNode<Compilation> rootNode) {        // whole source code, well from the beginning of the class        // name Modifier of the class - doesn't work. This node just        // sees the identifier ("SimpleClass")        // assertPosition(rootNode.jjtGetChild(0), 1, 1, 1, 6);        // "public"        assertPosition(rootNode, 1, 14, 6, 2);        // "method1" - starts with identifier until end of its block statement        Node method1 = rootNode.jjtGetChild(1);        assertPosition(method1, 2, 17, 5, 5);        // Modifier of method1 - doesn't work. This node just sees the        // identifier ("method1")        // assertPosition(method1.jjtGetChild(0), 2, 17, 2, 20); // "public" for        // method1        // BlockStatement - the whole method body        Node blockStatement = method1.jjtGetChild(1);        assertPosition(blockStatement, 2, 27, 5, 5);        // the expression ("System.out...")        Node expressionStatement = blockStatement.jjtGetChild(0);        assertPosition(expressionStatement, 3, 9, 3, 34);    }    @Test    public void verifyEndLine() {        String code = "public class SimpleClass {\n" // line 1                + "    public void method1() {\n" // line 2                + "    }\n" // line 3                + "    public void method2() {\n" // line 4                + "    }\n" // line 5                + "}\n"; // line 6        ApexNode<Compilation> rootNode = parse(code);        Node method1 = rootNode.jjtGetChild(1);        assertEquals("Wrong begin line", 2, method1.getBeginLine());        assertEquals("Wrong end line", 3, method1.getEndLine());        Node method2 = rootNode.jjtGetChild(2);        assertEquals("Wrong begin line", 4, method2.getBeginLine());        assertEquals("Wrong end line", 5, method2.getEndLine());    }    @Test    public void parsesRealWorldClasses() throws Exception {        File directory = new File("src/test/resources");        File[] fList = directory.listFiles();        for (File file : fList) {            if (file.isFile() && file.getName().endsWith(".cls")) {                String sourceCode = FileUtils.readFileToString(file);                ApexNode<Compilation> rootNode = parse(sourceCode);                Assert.assertNotNull(rootNode);            }        }    }    /**     * See bug #1485     *      * @see <a href="https://sourceforge.net/p/pmd/bugs/1485/">#1485</a>     */    @Test    public void stackOverflowDuringClassParsing() throws Exception {        String source = IOUtils.toString(ApexParserTest.class.getResourceAsStream("StackOverflowClass.cls"));        ApexNode<Compilation> rootNode = parse(source);        Assert.assertNotNull(rootNode);        int count = visitPosition(rootNode, 0);        Assert.assertEquals(586, count);    }    private int visitPosition(Node node, int count) {        int result = count + 1;        Assert.assertTrue(node.getBeginLine() > 0);        Assert.assertTrue(node.getBeginColumn() > 0);        Assert.assertTrue(node.getEndLine() > 0);        Assert.assertTrue(node.getEndColumn() > 0);        for (int i = 0; i < node.jjtGetNumChildren(); i++) {            result = visitPosition(node.jjtGetChild(i), result);        }        return result;    }    // TEST HELPER    private static void assertPosition(Node node, int beginLine, int beginColumn, int endLine, int endColumn) {        assertEquals("Wrong begin line", beginLine, node.getBeginLine());        assertEquals("Wrong begin column", beginColumn, node.getBeginColumn());        assertEquals("Wrong end line", endLine, node.getEndLine());        assertEquals("Wrong end column", endColumn, node.getEndColumn());    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.apex;import static org.junit.Assert.assertEquals;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;import net.sourceforge.pmd.testframework.RuleTst;public class SuppressWarningsTest extends RuleTst {    private static class BarRule extends AbstractApexRule {        @Override        public Object visit(ASTUserClass clazz, Object ctx) {            if (clazz.getImage().equalsIgnoreCase("bar")) {                addViolation(ctx, clazz);            }            return super.visit(clazz, ctx);        }        @Override        public String getName() {            return "NoBar";        }    }    @Test    public void testClassLevelSuppression() {        Report rpt = new Report();        runTestFromString(TEST1, new FooRule(), rpt,                LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getVersion("35"));        assertEquals(0, rpt.size());        runTestFromString(TEST2, new FooRule(), rpt,                LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getVersion("35"));        assertEquals(0, rpt.size());    }    @Test    public void testInheritedSuppression() {        Report rpt = new Report();        runTestFromString(TEST3, new FooRule(), rpt,                LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getVersion("35"));        assertEquals(0, rpt.size());    }    @Test    public void testMethodLevelSuppression() {        Report rpt = new Report();        runTestFromString(TEST4, new FooRule(), rpt,                LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getVersion("35"));        assertEquals(1, rpt.size());    }    @Test    public void testConstructorLevelSuppression() {        Report rpt = new Report();        runTestFromString(TEST5, new FooRule(), rpt,                LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getVersion("35"));        assertEquals(0, rpt.size());    }    @Test    public void testFieldLevelSuppression() {        Report rpt = new Report();        runTestFromString(TEST6, new FooRule(), rpt,                LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getVersion("35"));        assertEquals(1, rpt.size());    }    @Test    public void testParameterLevelSuppression() {        Report rpt = new Report();        runTestFromString(TEST7, new FooRule(), rpt,                LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getVersion("35"));        assertEquals(1, rpt.size());    }    @Test    public void testLocalVariableLevelSuppression() {        Report rpt = new Report();        runTestFromString(TEST8, new FooRule(), rpt,                LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getVersion("35"));        assertEquals(1, rpt.size());    }    @Test    public void testSpecificSuppression() {        Report rpt = new Report();        runTestFromString(TEST9, new FooRule(), rpt,                LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getVersion("35"));        assertEquals(1, rpt.size());    }    @Test    public void testSpecificSuppressionMulitpleValues() {        Report rpt = new Report();        runTestFromString(TEST9_MULTIPLE_VALUES, new FooRule(), rpt,                LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getVersion("35"));        assertEquals(0, rpt.size());    }    @Test    public void testNoSuppressionBlank() {        Report rpt = new Report();        runTestFromString(TEST10, new FooRule(), rpt,                LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getVersion("35"));        assertEquals(2, rpt.size());    }    @Test    public void testNoSuppressionSomethingElseS() {        Report rpt = new Report();        runTestFromString(TEST11, new FooRule(), rpt,                LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getVersion("35"));        assertEquals(2, rpt.size());    }    @Test    public void testSuppressAll() {        Report rpt = new Report();        runTestFromString(TEST12, new FooRule(), rpt,                LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getVersion("35"));        assertEquals(0, rpt.size());    }    @Test    public void testSpecificSuppressionAtTopLevel() {        Report rpt = new Report();        runTestFromString(TEST13, new BarRule(), rpt,                LanguageRegistry.getLanguage(ApexLanguageModule.NAME).getVersion("35"));        assertEquals(0, rpt.size());    }    private static final String TEST1 = "@SuppressWarnings('PMD')" + PMD.EOL + "public class Foo {}";    private static final String TEST2 = "@SuppressWarnings('PMD')" + PMD.EOL + "public class Foo {" + PMD.EOL            + " void bar() {" + PMD.EOL + "  Integer foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST3 = "public class Baz {" + PMD.EOL + " @SuppressWarnings('PMD')" + PMD.EOL            + " public class Bar {" + PMD.EOL + "  void bar() {" + PMD.EOL + "   Integer foo;" + PMD.EOL + "  }" + PMD.EOL            + " }" + PMD.EOL + "}";    private static final String TEST4 = "public class Foo {" + PMD.EOL + " @SuppressWarnings('PMD')" + PMD.EOL            + " void bar() {" + PMD.EOL + "  Integer foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST5 = "public class Bar {" + PMD.EOL + " @SuppressWarnings('PMD')" + PMD.EOL            + " public Bar() {" + PMD.EOL + "  Integer foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST6 = "public class Bar {" + PMD.EOL + " @SuppressWarnings('PMD')" + PMD.EOL            + " Integer foo;" + PMD.EOL + " void bar() {" + PMD.EOL + "  Integer foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST7 = "public class Bar {" + PMD.EOL + " Integer foo;" + PMD.EOL            + " void bar(@SuppressWarnings('PMD') Integer foo) {}" + PMD.EOL + "}";    private static final String TEST8 = "public class Bar {" + PMD.EOL + " Integer foo;" + PMD.EOL + " void bar() {"            + PMD.EOL + "  @SuppressWarnings('PMD') Integer foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST9 = "public class Bar {" + PMD.EOL + " Integer foo;" + PMD.EOL + " void bar() {"            + PMD.EOL + "  @SuppressWarnings('PMD.NoFoo') Integer foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST9_MULTIPLE_VALUES = "@SuppressWarnings('PMD.NoFoo, PMD.NoBar')"            + PMD.EOL + "public class Bar {" + PMD.EOL + " Integer foo;" + PMD.EOL + " void bar() {" + PMD.EOL            + "  Integer foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST10 = "public class Bar {" + PMD.EOL + " Integer foo;" + PMD.EOL + " void bar() {"            + PMD.EOL + "  @SuppressWarnings('') Integer foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST11 = "public class Bar {" + PMD.EOL + " Integer foo;" + PMD.EOL + " void bar() {"            + PMD.EOL + "  @SuppressWarnings('SomethingElse') Integer foo;" + PMD.EOL + " }" + PMD.EOL + "}";    private static final String TEST12 = "public class Bar {" + PMD.EOL + " @SuppressWarnings('all') Integer foo;"            + PMD.EOL + "}";    private static final String TEST13 = "@SuppressWarnings('PMD.NoBar')" + PMD.EOL + "public class Bar {" + PMD.EOL            + "}";}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.apex;import java.util.Arrays;import java.util.Collection;import org.junit.runners.Parameterized.Parameters;import net.sourceforge.pmd.AbstractLanguageVersionTest;import net.sourceforge.pmd.lang.LanguageRegistry;import net.sourceforge.pmd.lang.LanguageVersion;public class LanguageVersionTest extends AbstractLanguageVersionTest {    public LanguageVersionTest(String name, String terseName, String version, LanguageVersion expected) {        super(name, terseName, version, expected);    }    @Parameters    public static Collection<?> data() {        return Arrays.asList(new Object[][] { { ApexLanguageModule.NAME, ApexLanguageModule.TERSE_NAME, "35",            LanguageRegistry.getLanguage("Apex").getVersion("35"), }, });    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.apex;import static org.junit.Assert.assertNotNull;import org.junit.Test;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSetFactory;public class DefaultRulesetTest {    @Test    public void loadDefaultRuleset() throws Exception {        RuleSetFactory factory = new RuleSetFactory();        RuleSet ruleset = factory.createRuleSet("rulesets/apex/ruleset.xml");        assertNotNull(ruleset);    }}