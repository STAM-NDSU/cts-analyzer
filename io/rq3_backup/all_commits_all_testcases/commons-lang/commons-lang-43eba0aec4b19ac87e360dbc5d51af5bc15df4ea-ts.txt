/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.mutable;import junit.framework.Test;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @version $Id: MutableLongTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $ * @see MutableLong */public class MutableLongTest extends MutableNumberTest {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(MutableLongTest.class);    }    public MutableLongTest(String testName) {        super(testName);    }    public MutableNumber getMutableNumber(double value) {        return new MutableLong((long)value);    }    // ----------------------------------------------------------------    // Converters    // ----------------------------------------------------------------        public byte byteValue(double value) {        return (byte)(long)value;    }    public short shortValue(double value) {        return (short)(long)value;    }    public int intValue(double value) {        return (int)(long)value;    }    public long longValue(double value) {        return (long)value;    }    public float floatValue(double value) {        return (long)value;    }    public double doubleValue(double value) {        return (long)value;    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.mutable;import junit.framework.Test;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @version $Id: MutableIntegerTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $ * @see MutableInteger */public class MutableIntegerTest extends MutableNumberTest {    public MutableIntegerTest(String testName) {        super(testName);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(MutableIntegerTest.class);    }    public MutableNumber getMutableNumber(double value) {        return new MutableInteger((int)value);    }    // ----------------------------------------------------------------    //  Converters    // ----------------------------------------------------------------    public byte byteValue(double value) {        return (byte)(int)value;    }    public double doubleValue(double value) {        return (int)value;    }    public float floatValue(double value) {        return (int)value;    }    public int intValue(double value) {        return (int)value;    }    public long longValue(double value) {        return (int)value;    }    public short shortValue(double value) {        return (short)(int)value;    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.mutable;import junit.framework.Test;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @version $Id: MutableShortTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $ * @see MutableShort */public class MutableShortTest extends MutableNumberTest {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(MutableShortTest.class);    }    public MutableShortTest(String testName) {        super(testName);    }    // ----------------------------------------------------------------    //  Converters    // ----------------------------------------------------------------    public MutableNumber getMutableNumber(double value) {        return new MutableShort((short)value);    }    public byte byteValue(double value) {        return (byte)(short)value;    }    public short shortValue(double value) {        return (short)value;    }    public int intValue(double value) {        return (short)value;    }    public long longValue(double value) {        return (short)value;    }    public float floatValue(double value) {        return (short)value;    }    public double doubleValue(double value) {        return (short)value;    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.mutable;import junit.framework.TestCase;/** * JUnit tests. * * @version $Id: MutableNumberTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $ * @see MutableNumber */public abstract class MutableNumberTest extends TestCase {    public MutableNumberTest(String testName) {        super(testName);    }    /**     * Gets an instance to test.     * @param value the value of the number.     * @return a <code>MutableNumber</code>     */    public abstract MutableNumber getMutableNumber(double value);    // ----------------------------------------------------------------    // Converters    // ----------------------------------------------------------------    public abstract byte byteValue(double value);    public abstract short shortValue(double value);    public abstract int intValue(double value);    public abstract long longValue(double value);    public abstract float floatValue(double value);    public abstract double doubleValue(double value);    //  ----------------------------------------------------------------    // Tests    // ----------------------------------------------------------------    public void testCompareTo() {        final double num = 0;        final MutableNumber mutNum = getMutableNumber(num);        assertEquals("Equality", 0, mutNum.compareTo(new Double(num)));        assertEquals(            "Less than",            -1,            mutNum.compareTo(new Double(Double.POSITIVE_INFINITY)));        assertEquals(            "Greater than",            1,            mutNum.compareTo(new Double(Double.NEGATIVE_INFINITY)));    }    public void testPrimitiveAccessors() {        testPrimitiveAccessors(0);        testPrimitiveAccessors(Double.MAX_VALUE);        testPrimitiveAccessors(-Double.MAX_VALUE);        testPrimitiveAccessors(Float.MAX_VALUE);        testPrimitiveAccessors(-Float.MAX_VALUE);        testPrimitiveAccessors(Long.MAX_VALUE);        testPrimitiveAccessors(Long.MIN_VALUE);        testPrimitiveAccessors(Integer.MAX_VALUE);        testPrimitiveAccessors(Integer.MIN_VALUE);        testPrimitiveAccessors(Short.MAX_VALUE);        testPrimitiveAccessors(Short.MIN_VALUE);        testPrimitiveAccessors(Byte.MAX_VALUE);        testPrimitiveAccessors(Byte.MIN_VALUE);    }    public void XtestObjectAccessors() {        testObjectAccessors(0);        testObjectAccessors(Double.MAX_VALUE);        testObjectAccessors(-Double.MAX_VALUE);        testObjectAccessors(Float.MAX_VALUE);        testObjectAccessors(-Float.MAX_VALUE);        testObjectAccessors(Long.MAX_VALUE);        testObjectAccessors(Long.MIN_VALUE);        testObjectAccessors(Integer.MAX_VALUE);        testObjectAccessors(Integer.MIN_VALUE);        testObjectAccessors(Short.MAX_VALUE);        testObjectAccessors(Short.MIN_VALUE);        testObjectAccessors(Byte.MAX_VALUE);        testObjectAccessors(Byte.MIN_VALUE);    }    public void testSetValue() {        setValueAndTestAccessors(Double.MAX_VALUE);        setValueAndTestAccessors(-Double.MAX_VALUE);        setValueAndTestAccessors(Float.MAX_VALUE);        setValueAndTestAccessors(-Float.MAX_VALUE);        setValueAndTestAccessors(Long.MAX_VALUE);        setValueAndTestAccessors(Long.MIN_VALUE);        setValueAndTestAccessors(Integer.MAX_VALUE);        setValueAndTestAccessors(Integer.MIN_VALUE);        setValueAndTestAccessors(Short.MAX_VALUE);        setValueAndTestAccessors(Short.MIN_VALUE);        setValueAndTestAccessors(Byte.MAX_VALUE);        setValueAndTestAccessors(Byte.MIN_VALUE);    }    // ----------------------------------------------------------------    // Private methods    // ----------------------------------------------------------------    private void setValueAndTestAccessors(double num) {        final MutableNumber mutNum = getMutableNumber(0);        mutNum.setValue(new Double(num));        testPrimitiveAccessors(mutNum, num);        //testObjectAccessors(mutNum, num);    }    private void testPrimitiveAccessors(double num) {        testPrimitiveAccessors(getMutableNumber(num), num);    }    private void testPrimitiveAccessors(MutableNumber mutNum, double num) {        assertEquals("byte comparison", byteValue(num), mutNum.byteValue());        assertEquals("short comparison", shortValue(num), mutNum.shortValue());        assertEquals("int comparison", intValue(num), mutNum.intValue());        assertEquals("long comparison", longValue(num), mutNum.longValue());        assertEquals(            "float comparison",            floatValue(num),            mutNum.floatValue(),            0);        assertEquals(            "double comparison",            doubleValue(num),            mutNum.doubleValue(),            0);    }    private void testObjectAccessors(double num) {        testObjectAccessors(getMutableNumber(num), num);    }    private void testObjectAccessors(MutableNumber mutNum, double num) {        assertEquals(            "byte comparison",            new Byte(byteValue(num)),            mutNum.getValue());        assertEquals(            "short comparison",            new Short(shortValue(num)),            mutNum.getValue());        assertEquals(            "int comparison",            new Integer(intValue(num)),            mutNum.getValue());        assertEquals(            "long comparison",            new Long(longValue(num)),            mutNum.getValue());        assertEquals(            "float comparison",            new Float(floatValue(num)),            mutNum.getValue());        assertEquals(            "double comparison",            new Double(doubleValue(num)),            mutNum.getValue());    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.mutable;import junit.framework.Test;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @version $Id: MutableFloatTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $ * @see MutableFloat */public class MutableFloatTest extends MutableNumberTest {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(MutableFloatTest.class);    }    /**     * @param testName     */    public MutableFloatTest(String testName) {        super(testName);    }    public MutableNumber getMutableNumber(double value) {        return new MutableFloat((float)value);    }    //  Converters    // ----------------------------------------------------------------    public byte byteValue(double value) {        return (byte)(float)value;    }    public short shortValue(double value) {        return (short)(float)value;    }    public int intValue(double value) {        return (int)(float)value;    }    public long longValue(double value) {        return (long)(float)value;    }    public float floatValue(double value) {        return (float)value;    }    public double doubleValue(double value) {        return (float)value;    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.mutable;import junit.framework.Test;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @version $Id: MutableDoubleTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $ * @see MutableDouble */public class MutableDoubleTest extends MutableNumberTest {    public static void main(String[] args) {        TestRunner.run(suite());    }        public static Test suite() {        return new TestSuite(MutableDoubleTest.class);    }    public MutableDoubleTest(String testName) {        super(testName);    }    public MutableNumber getMutableNumber(double value) {        return new MutableDouble(value);    }    // Converters    // ----------------------------------------------------------------        public byte byteValue(double value) {        return (byte)value;    }    public short shortValue(double value) {        return (short)value;    }    public int intValue(double value) {        return (int)value;    }    public long longValue(double value) {        return (long)value;    }    public float floatValue(double value) {        return (float)value;    }    public double doubleValue(double value) {        return value;    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.mutable;import junit.framework.Test;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @version $Id: MutableByteTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $ * @see MutableByte */public class MutableByteTest extends MutableNumberTest {    public static void main(String[] args) {        TestRunner.run(suite());    }        public static Test suite() {        return new TestSuite(MutableByteTest.class);    }    public MutableByteTest(String testName) {        super(testName);    }    public MutableNumber getMutableNumber(double value) {        return new MutableByte((byte)value);    }    // ----------------------------------------------------------------    //  Converters    // ----------------------------------------------------------------    public byte byteValue(double value) {        return (byte)value;    }    public short shortValue(double value) {        return (byte)value;    }    public int intValue(double value) {        return (byte)value;    }    public long longValue(double value) {        return (byte)value;    }    public float floatValue(double value) {        return (byte)value;    }    public double doubleValue(double value) {        return (byte)value;    }} // MutableByteTest
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.enum;import java.util.Iterator;import java.util.List;import java.util.Map;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import org.apache.commons.lang.SerializationUtils;/** * Test cases for the {@link Enum} class. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id: ValuedEnumTest.java,v 1.7 2004/02/18 23:22:29 ggregory Exp $ */public final class ValuedEnumTest extends TestCase {    public ValuedEnumTest(String name) {        super(name);    }    public void setUp() {    }    public static Test suite() {        TestSuite suite = new TestSuite(ValuedEnumTest.class);        suite.setName("ValuedEnum Tests");        return suite;    }    public void testName() {        assertEquals("Red", ValuedColorEnum.RED.getName());        assertEquals("Green", ValuedColorEnum.GREEN.getName());        assertEquals("Blue", ValuedColorEnum.BLUE.getName());    }    public void testValue() {        assertEquals(1, ValuedColorEnum.RED.getValue());        assertEquals(2, ValuedColorEnum.GREEN.getValue());        assertEquals(3, ValuedColorEnum.BLUE.getValue());    }    public void testCompareTo() {        assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.BLUE) == 0);        assertTrue(ValuedColorEnum.RED.compareTo(ValuedColorEnum.BLUE) < 0);        assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.RED) > 0);    }    public void testEquals() {        assertSame(ValuedColorEnum.RED, ValuedColorEnum.RED);        assertSame(ValuedColorEnum.getEnum("Red"), ValuedColorEnum.RED);    }    public void testToString() {        String toString = ValuedColorEnum.RED.toString();        assertEquals("ValuedColorEnum[Red=1]", toString);        assertSame(toString, ValuedColorEnum.RED.toString());    }    public void testIterator() {        Iterator it = ValuedColorEnum.iterator();        assertSame(ValuedColorEnum.RED, it.next());        assertSame(ValuedColorEnum.GREEN, it.next());        assertSame(ValuedColorEnum.BLUE, it.next());    }    public void testList() {        List list = ValuedColorEnum.getEnumList();                assertNotNull(list);                assertEquals( list.size(),         ValuedColorEnum.getEnumMap().keySet().size());                Iterator it = list.iterator();        assertSame(ValuedColorEnum.RED, it.next());        assertSame(ValuedColorEnum.GREEN, it.next());        assertSame(ValuedColorEnum.BLUE, it.next());    }    public void testMap() {        Map map = ValuedColorEnum.getEnumMap();                assertNotNull(map);                assertEquals( map.keySet().size(),         ValuedColorEnum.getEnumList().size());                 assertTrue(map.containsValue(ValuedColorEnum.RED));        assertTrue(map.containsValue(ValuedColorEnum.GREEN));        assertTrue(map.containsValue(ValuedColorEnum.BLUE));        assertSame(ValuedColorEnum.RED, map.get("Red"));        assertSame(ValuedColorEnum.GREEN, map.get("Green"));        assertSame(ValuedColorEnum.BLUE, map.get("Blue"));    }    public void testGet() {        assertSame(ValuedColorEnum.RED, ValuedColorEnum.getEnum("Red"));        assertSame(ValuedColorEnum.GREEN, ValuedColorEnum.getEnum("Green"));        assertSame(ValuedColorEnum.BLUE, ValuedColorEnum.getEnum("Blue"));        assertSame(null, ValuedColorEnum.getEnum("Pink"));    }    public void testGetValue() {        assertSame(ValuedColorEnum.RED, ValuedColorEnum.getEnum(1));        assertSame(ValuedColorEnum.GREEN, ValuedColorEnum.getEnum(2));        assertSame(ValuedColorEnum.BLUE, ValuedColorEnum.getEnum(3));        assertSame(null, ValuedColorEnum.getEnum(4));    }    public void testSerialization() {        assertSame(ValuedColorEnum.RED, SerializationUtils.clone(ValuedColorEnum.RED));        assertSame(ValuedColorEnum.GREEN, SerializationUtils.clone(ValuedColorEnum.GREEN));        assertSame(ValuedColorEnum.BLUE, SerializationUtils.clone(ValuedColorEnum.BLUE));    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.enum;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import junit.framework.AssertionFailedError;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import org.apache.commons.lang.ClassUtilsTest;import org.apache.commons.lang.SerializationUtils;/** * Test cases for the {@link Enum} class. * * @author Stephen Colebourne * @author Gary D. Gregory * @version $Id: EnumTest.java,v 1.17 2004/02/18 23:01:51 ggregory Exp $ */public final class EnumTest extends TestCase {    public EnumTest(String name) {        super(name);    }    public void setUp() {    }    public static Test suite() {        TestSuite suite = new TestSuite(EnumTest.class);        suite.setName("Enum Tests");        return suite;    }    public void testName() {        assertEquals("Red", ColorEnum.RED.getName());        assertEquals("Green", ColorEnum.GREEN.getName());        assertEquals("Blue", ColorEnum.BLUE.getName());    }    public void testCompareTo() {        assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.BLUE) == 0);        assertTrue(ColorEnum.RED.compareTo(ColorEnum.BLUE) > 0);        assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.RED) < 0);        try {            ColorEnum.RED.compareTo(null);            fail();        } catch (NullPointerException ex) {}        try {            ColorEnum.RED.compareTo(new Object());            fail();        } catch (ClassCastException ex) {}    }    public void testEquals() {        assertSame(ColorEnum.RED, ColorEnum.RED);        assertSame(ColorEnum.getEnum("Red"), ColorEnum.RED);        assertEquals(false, ColorEnum.RED.equals(null));        assertEquals(true, ColorEnum.RED.equals(ColorEnum.RED));        assertEquals(true, ColorEnum.RED.equals(ColorEnum.getEnum("Red")));    }    public void testHashCode() {        assertEquals(ColorEnum.RED.hashCode(), ColorEnum.RED.hashCode());        assertEquals(7 + ColorEnum.class.hashCode() + 3 * "Red".hashCode(), ColorEnum.RED.hashCode());    }    public void testToString() {        String toString = ColorEnum.RED.toString();        assertEquals("ColorEnum[Red]", toString);        assertSame(toString, ColorEnum.RED.toString());    }    public void testIterator() {        Iterator it = ColorEnum.iterator();        assertSame(ColorEnum.RED, it.next());        assertSame(ColorEnum.GREEN, it.next());        assertSame(ColorEnum.BLUE, it.next());    }    public void testList() {        List list = new ArrayList(ColorEnum.getEnumList());                assertNotNull(list);                assertEquals( list.size(),        ColorEnum.getEnumMap().keySet().size());                Iterator it = list.iterator();        assertSame(ColorEnum.RED, it.next());        assertSame(ColorEnum.GREEN, it.next());        assertSame(ColorEnum.BLUE, it.next());    }    public void testMap() {        Map map = new HashMap(ColorEnum.getEnumMap());                assertNotNull(map);        assertTrue(map.containsValue(ColorEnum.RED));        assertTrue(map.containsValue(ColorEnum.GREEN));        assertTrue(map.containsValue(ColorEnum.BLUE));        assertSame(ColorEnum.RED, map.get("Red"));        assertSame(ColorEnum.GREEN, map.get("Green"));        assertSame(ColorEnum.BLUE, map.get("Blue"));        assertEquals( map.keySet().size(),                        ColorEnum.getEnumList().size());    }    public void testGet() {        assertSame(ColorEnum.RED, ColorEnum.getEnum("Red"));        assertSame(ColorEnum.GREEN, ColorEnum.getEnum("Green"));        assertSame(ColorEnum.BLUE, ColorEnum.getEnum("Blue"));        assertSame(null, ColorEnum.getEnum("Pink"));    }    public void testSerialization() {        int hashCode = ColorEnum.RED.hashCode();        assertSame(ColorEnum.RED, SerializationUtils.clone(ColorEnum.RED));        assertEquals(hashCode, SerializationUtils.clone(ColorEnum.RED).hashCode());        assertSame(ColorEnum.GREEN, SerializationUtils.clone(ColorEnum.GREEN));        assertSame(ColorEnum.BLUE, SerializationUtils.clone(ColorEnum.BLUE));    }    public void testBroken1() {        try {            Broken1Enum.RED.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testBroken2() {        try {            Broken2Enum.RED.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testBroken3() {        try {            Broken3Enum.RED.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testBroken1Operation() {        try {            Broken1OperationEnum.PLUS.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testBroken2Operation() {        try {            Broken2OperationEnum.PLUS.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testBroken3Operation() {        try {            Broken3OperationEnum.PLUS.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testBroken4Operation() {        try {            Broken4OperationEnum.PLUS.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testBroken5Operation() {        try {            Broken5OperationEnum.PLUS.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testOperationGet() {        assertSame(OperationEnum.PLUS, OperationEnum.getEnum("Plus"));        assertSame(OperationEnum.MINUS, OperationEnum.getEnum("Minus"));        assertSame(null, OperationEnum.getEnum("Pink"));    }    public void testOperationSerialization() {        assertSame(OperationEnum.PLUS, SerializationUtils.clone(OperationEnum.PLUS));        assertSame(OperationEnum.MINUS, SerializationUtils.clone(OperationEnum.MINUS));    }    public void testOperationToString() {        assertEquals("OperationEnum[Plus]", OperationEnum.PLUS.toString());    }    public void testOperationList() {        List list = OperationEnum.getEnumList();        assertNotNull(list);        assertEquals(2, list.size());        assertEquals(list.size(), OperationEnum.getEnumMap().keySet().size());                Iterator it = list.iterator();        assertSame(OperationEnum.PLUS, it.next());        assertSame(OperationEnum.MINUS, it.next());    }    public void testOperationMap() {        Map map = OperationEnum.getEnumMap();        assertNotNull(map);        assertEquals(map.keySet().size(), OperationEnum.getEnumList().size());                assertTrue(map.containsValue(OperationEnum.PLUS));        assertTrue(map.containsValue(OperationEnum.MINUS));        assertSame(OperationEnum.PLUS, map.get("Plus"));        assertSame(OperationEnum.MINUS, map.get("Minus"));    }    public void testOperationCalculation() {        assertEquals(3, OperationEnum.PLUS.eval(1, 2));        assertEquals(-1, OperationEnum.MINUS.eval(1, 2));    }        //-----------------------------------------------------------------------    public void testExtended1Get() {        assertSame(Extended1Enum.ALPHA, Extended1Enum.getEnum("Alpha"));        assertSame(Extended1Enum.BETA, Extended1Enum.getEnum("Beta"));        assertSame(null, Extended1Enum.getEnum("Gamma"));        assertSame(null, Extended1Enum.getEnum("Delta"));    }                public void testExtended2Get() {        assertSame(Extended1Enum.ALPHA, Extended2Enum.ALPHA);        assertSame(Extended1Enum.BETA, Extended2Enum.BETA);                assertSame(Extended2Enum.ALPHA, Extended2Enum.getEnum("Alpha"));        assertSame(Extended2Enum.BETA, Extended2Enum.getEnum("Beta"));        assertSame(Extended2Enum.GAMMA, Extended2Enum.getEnum("Gamma"));        assertSame(null, Extended2Enum.getEnum("Delta"));    }    public void testExtended3Get() {        assertSame(Extended2Enum.ALPHA, Extended3Enum.ALPHA);        assertSame(Extended2Enum.BETA, Extended3Enum.BETA);        assertSame(Extended2Enum.GAMMA, Extended3Enum.GAMMA);                assertSame(Extended3Enum.ALPHA, Extended3Enum.getEnum("Alpha"));        assertSame(Extended3Enum.BETA, Extended3Enum.getEnum("Beta"));        assertSame(Extended3Enum.GAMMA, Extended3Enum.getEnum("Gamma"));        assertSame(Extended3Enum.DELTA, Extended3Enum.getEnum("Delta"));    }    public void testExtendedSerialization() {        assertSame(Extended1Enum.ALPHA, SerializationUtils.clone(Extended1Enum.ALPHA));        assertSame(Extended1Enum.BETA, SerializationUtils.clone(Extended1Enum.BETA));        assertSame(Extended2Enum.GAMMA, SerializationUtils.clone(Extended2Enum.GAMMA));        assertSame(Extended3Enum.DELTA, SerializationUtils.clone(Extended3Enum.DELTA));    }    public void testExtendedToString() {        assertEquals("Extended1Enum[Alpha]", Extended1Enum.ALPHA.toString());        assertEquals("Extended1Enum[Beta]", Extended1Enum.BETA.toString());                assertEquals("Extended1Enum[Alpha]", Extended2Enum.ALPHA.toString());        assertEquals("Extended1Enum[Beta]", Extended2Enum.BETA.toString());        assertEquals("Extended2Enum[Gamma]", Extended2Enum.GAMMA.toString());                assertEquals("Extended1Enum[Alpha]", Extended3Enum.ALPHA.toString());        assertEquals("Extended1Enum[Beta]", Extended3Enum.BETA.toString());        assertEquals("Extended2Enum[Gamma]", Extended3Enum.GAMMA.toString());        assertEquals("Extended3Enum[Delta]", Extended3Enum.DELTA.toString());    }    public void testExtended1List() {        List list = Extended1Enum.getEnumList();        assertNotNull(list);        assertEquals(2, list.size());        assertEquals(list.size(), Extended1Enum.getEnumMap().keySet().size());                Iterator it = list.iterator();        assertSame(Extended1Enum.ALPHA, it.next());        assertSame(Extended1Enum.BETA, it.next());    }    public void testExtended2List() {        List list = Extended2Enum.getEnumList();        assertNotNull(list);        assertEquals(3, list.size());        assertEquals(list.size(), Extended2Enum.getEnumMap().keySet().size());                Iterator it = list.iterator();        assertSame(Extended2Enum.ALPHA, it.next());        assertSame(Extended2Enum.BETA, it.next());        assertSame(Extended2Enum.GAMMA, it.next());    }    public void testExtended3List() {        List list = Extended3Enum.getEnumList();        assertNotNull(list);        assertEquals(4, list.size());        assertEquals(list.size(), Extended3Enum.getEnumMap().keySet().size());                Iterator it = list.iterator();        assertSame(Extended3Enum.ALPHA, it.next());        assertSame(Extended3Enum.BETA, it.next());        assertSame(Extended3Enum.GAMMA, it.next());        assertSame(Extended3Enum.DELTA, it.next());    }    public void testExtended1Map() {        Map map = Extended1Enum.getEnumMap();        assertNotNull(map);        assertEquals(map.keySet().size(), Extended1Enum.getEnumList().size());                assertTrue(map.containsValue(Extended1Enum.ALPHA));        assertTrue(map.containsValue(Extended1Enum.BETA));        assertSame(Extended1Enum.ALPHA, map.get("Alpha"));        assertSame(Extended1Enum.BETA, map.get("Beta"));    }    public void testExtended2Map() {        Map map = Extended2Enum.getEnumMap();        assertNotNull(map);        assertEquals(map.keySet().size(), Extended2Enum.getEnumList().size());                assertTrue(map.containsValue(Extended2Enum.ALPHA));        assertTrue(map.containsValue(Extended2Enum.BETA));        assertTrue(map.containsValue(Extended2Enum.GAMMA));        assertSame(Extended2Enum.ALPHA, map.get("Alpha"));        assertSame(Extended2Enum.BETA, map.get("Beta"));        assertSame(Extended2Enum.GAMMA, map.get("Gamma"));    }    public void testExtended3Map() {        Map map = Extended3Enum.getEnumMap();        assertNotNull(map);        assertEquals(map.keySet().size(), Extended3Enum.getEnumList().size());                assertTrue(map.containsValue(Extended3Enum.ALPHA));        assertTrue(map.containsValue(Extended3Enum.BETA));        assertTrue(map.containsValue(Extended3Enum.GAMMA));        assertTrue(map.containsValue(Extended3Enum.DELTA));        assertSame(Extended3Enum.ALPHA, map.get("Alpha"));        assertSame(Extended3Enum.BETA, map.get("Beta"));        assertSame(Extended3Enum.GAMMA, map.get("Gamma"));        assertSame(Extended3Enum.DELTA, map.get("Delta"));    }    //-----------------------------------------------------------------------    public void testNested() {        List list = new ArrayList(Nest.ColorEnum.getEnumList());        assertEquals(3, list.size());  // all is well        Iterator it = list.iterator();        assertSame(Nest.ColorEnum.RED, it.next());        assertSame(Nest.ColorEnum.GREEN, it.next());        assertSame(Nest.ColorEnum.BLUE, it.next());        // This nesting works because the enum constants are defined in the SAME        // class as the getEnumList(). It just acts as a normal enum.    }    public void testNestedBroken() {        List list = new ArrayList(NestBroken.ColorEnum.getEnumList());        try {            assertEquals(0, list.size());  // no enums!!!             // this is BROKEN because the enum constants are defined in a DIFFERENT            // class from getEnumList(). Once NestBroken class is referenced,            // and thus class loaded with its enum constants, the getEnumList works:        } catch (AssertionFailedError ex) {            // this actually works and isn't broken on Linux SunJDK1.4.1, so...            assertEquals(3, list.size());        }        new NestBroken();        list = new ArrayList(NestBroken.ColorEnum.getEnumList());        assertEquals(3, list.size());  // all is well!!!        Iterator it = list.iterator();        assertSame(NestBroken.RED, it.next());        assertSame(NestBroken.GREEN, it.next());        assertSame(NestBroken.BLUE, it.next());    }    public void testNestedLinked() {        List list = new ArrayList(NestLinked.ColorEnum.getEnumList());        assertEquals(3, list.size());  // all is well        Iterator it = list.iterator();        assertSame(NestLinked.RED, it.next());        assertSame(NestLinked.GREEN, it.next());        assertSame(NestLinked.BLUE, it.next());        // This nesting works because a static block in the enum class forces a        // class load of the outer class which defines the enum constants.    }    public void testNestedReferenced() {        List list = new ArrayList(NestReferenced.ColorEnum.getEnumList());        assertEquals(3, list.size());  // all is well        Iterator it = list.iterator();        assertSame(NestReferenced.RED, it.next());        assertSame(NestReferenced.GREEN, it.next());        assertSame(NestReferenced.BLUE, it.next());        // This nesting works because the enum constants are actually defined in        // the SAME class as the getEnumList(). The references in the outer class        // are just extra references.    }        public void testColorEnumEqualsWithDifferentClassLoaders() throws SecurityException, IllegalArgumentException,            ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.BLUE);        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.GREEN);        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.RED);    }    void testEqualsTrueWithDifferentClassLoaders(ColorEnum colorEnum) throws ClassNotFoundException, SecurityException,            NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {        // Sanity checks:        assertTrue(colorEnum.equals(colorEnum));        assertNotNull(ColorEnum.class.getClassLoader());        // set up:        ClassLoader classLoader = ClassUtilsTest.newSystemClassLoader();        Object enumObjectFromOtherClassLoader = this.getColorEnum(classLoader, colorEnum.getName());        // the real test, part 1.        try {            ColorEnum testCase = (ColorEnum) enumObjectFromOtherClassLoader;            fail("Should have thrown a ClassCastException for " + testCase);        } catch (ClassCastException e) {            // normal.        }        // the real test, part 2.        assertEquals("The two objects should match even though they are from different class loaders", colorEnum,                enumObjectFromOtherClassLoader);        // the real test, part 3.        int falseCount = 0;        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {            ColorEnum element = (ColorEnum) iter.next();            if (!colorEnum.equals(element)) {                falseCount++;                assertFalse(enumObjectFromOtherClassLoader.equals(element));            }        }        assertEquals(ColorEnum.getEnumList().size() - 1, falseCount);    }    Object getColorEnum(ClassLoader classLoader, String color) throws ClassNotFoundException, SecurityException,            NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {        // Sanity check:        ColorEnum.RED.equals(ColorEnum.RED);        assertNotNull(ColorEnum.class.getClassLoader());        // set up:        assertNotNull(classLoader);        assertFalse(classLoader.equals(ColorEnum.class.getClassLoader()));        Class otherColorEnumClass = classLoader.loadClass("org.apache.commons.lang.enum.ColorEnum");        assertNotNull(otherColorEnumClass);        assertNotNull(otherColorEnumClass.getClassLoader());        assertTrue(classLoader.equals(otherColorEnumClass.getClassLoader()));        assertFalse(otherColorEnumClass.getClassLoader().equals(ColorEnum.class.getClassLoader()));        Method method = otherColorEnumClass.getMethod("getEnum", new Class[]{String.class});        Object enumObject = method.invoke(otherColorEnumClass, new Object[]{color});        assertNotNull(enumObject);        assertFalse(ColorEnum.class.equals(enumObject.getClass()));        assertFalse(ColorEnum.class == enumObject.getClass());        return enumObject;    }    public void testEqualsToWrongInstance() {        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {            ColorEnum element = (ColorEnum) iter.next();            this.testEqualsToWrongInstance(element);        }    }    void testEqualsToWrongInstance(ColorEnum colorEnum) {        assertEquals(false, colorEnum.equals("test"));        assertEquals(false, colorEnum.equals(new Integer(1)));        assertEquals(false, colorEnum.equals(new Boolean(true)));        assertEquals(false, colorEnum.equals(new StringBuffer("test")));        assertEquals(false, colorEnum.equals(new Object()));        assertEquals(false, colorEnum.equals(null));        assertEquals(false, colorEnum.equals(""));        assertEquals(false, colorEnum.equals(ColorEnum.getEnum(null)));        assertEquals(false, colorEnum.equals(ColorEnum.getEnum("")));        assertEquals(false, colorEnum.equals(ColorEnum.getEnum("This ColorEnum does not exist.")));    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.enum;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.Iterator;import java.util.List;import java.util.Map;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Test cases for the {@link Enum} class. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id: EnumUtilsTest.java,v 1.7 2004/02/18 23:01:51 ggregory Exp $ */public final class EnumUtilsTest extends TestCase {    public EnumUtilsTest(String name) {        super(name);    }    public void setUp() {    }    public static Test suite() {        TestSuite suite = new TestSuite(EnumUtilsTest.class);        suite.setName("EnumUtils Tests");        return suite;    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new EnumUtils());        Constructor[] cons = EnumUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(EnumUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(EnumUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testIterator() {        Iterator it = EnumUtils.iterator(ColorEnum.class);        assertSame(ColorEnum.RED, it.next());        assertSame(ColorEnum.GREEN, it.next());        assertSame(ColorEnum.BLUE, it.next());        it = EnumUtils.iterator(DummyEnum.class);        assertEquals(false, it.hasNext());    }    public void testIteratorEx() {        try {            EnumUtils.iterator(null);            fail();        } catch (IllegalArgumentException ex) {}        try {            EnumUtils.iterator(Object.class);            fail();        } catch (IllegalArgumentException ex) {}    }    //-----------------------------------------------------------------------    public void testList() {        List list = EnumUtils.getEnumList(ColorEnum.class);        Iterator it = list.iterator();        assertSame(ColorEnum.RED, it.next());        assertSame(ColorEnum.GREEN, it.next());        assertSame(ColorEnum.BLUE, it.next());        list = EnumUtils.getEnumList(DummyEnum.class);        assertEquals(0, list.size());    }    public void testListEx() {        try {            EnumUtils.getEnumList(null);            fail();        } catch (IllegalArgumentException ex) {}        try {            EnumUtils.getEnumList(Object.class);            fail();        } catch (IllegalArgumentException ex) {}    }    //-----------------------------------------------------------------------    public void testMap() {        Map map = EnumUtils.getEnumMap(ColorEnum.class);        assertTrue(map.containsValue(ColorEnum.RED));        assertTrue(map.containsValue(ColorEnum.GREEN));        assertTrue(map.containsValue(ColorEnum.BLUE));        assertSame(ColorEnum.RED, map.get("Red"));        assertSame(ColorEnum.GREEN, map.get("Green"));        assertSame(ColorEnum.BLUE, map.get("Blue"));        map = EnumUtils.getEnumMap(DummyEnum.class);        assertEquals(0, map.size());    }    public void testMapEx() {        try {            EnumUtils.getEnumMap(null);            fail();        } catch (IllegalArgumentException ex) {}        try {            EnumUtils.getEnumMap(Object.class);            fail();        } catch (IllegalArgumentException ex) {}    }    //-----------------------------------------------------------------------    public void testGet() {        assertSame(ColorEnum.RED, EnumUtils.getEnum(ColorEnum.class, "Red"));        assertSame(ColorEnum.GREEN, EnumUtils.getEnum(ColorEnum.class, "Green"));        assertSame(ColorEnum.BLUE, EnumUtils.getEnum(ColorEnum.class, "Blue"));        assertSame(null, EnumUtils.getEnum(ColorEnum.class, "Pink"));        assertSame(null, EnumUtils.getEnum(DummyEnum.class, "Pink"));    }    public void testGetEx() {        try {            EnumUtils.getEnum(null, "");            fail();        } catch (IllegalArgumentException ex) {}        try {            EnumUtils.getEnum(Object.class, "Red");            fail();        } catch (IllegalArgumentException ex) {}    }    //-----------------------------------------------------------------------    public void testGetValue() {        assertSame(ValuedColorEnum.RED, EnumUtils.getEnum(ValuedColorEnum.class, 1));        assertSame(ValuedColorEnum.GREEN, EnumUtils.getEnum(ValuedColorEnum.class, 2));        assertSame(ValuedColorEnum.BLUE, EnumUtils.getEnum(ValuedColorEnum.class, 3));        assertSame(null, EnumUtils.getEnum(ValuedColorEnum.class, 4));        assertSame(null, EnumUtils.getEnum(DummyEnum.class, 5));    }    public void testGetValueEx() {        try {            EnumUtils.getEnum(null, 0);            fail();        } catch (IllegalArgumentException ex) {}        try {            EnumUtils.getEnum(Object.class, 2);            fail();        } catch (IllegalArgumentException ex) {}    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.time;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * TestCase for StopWatch. * * @author Stephen Colebourne * @version $Id: StopWatchTest.java,v 1.7 2004/02/18 23:03:03 ggregory Exp $ */public class StopWatchTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(StopWatchTest.class);    suite.setName("StopWatch Tests");        return suite;    }    public StopWatchTest(String s) {        super(s);    }    //-----------------------------------------------------------------------    public void testStopWatchSimple(){        StopWatch watch = new StopWatch();        watch.start();            try {Thread.sleep(550);} catch (InterruptedException ex) {}        watch.stop();        long time = watch.getTime();        assertEquals(time, watch.getTime());                assertTrue(time >= 500);        assertTrue(time < 700);                watch.reset();        assertEquals(0, watch.getTime());    }        public void testStopWatchSimpleGet(){        StopWatch watch = new StopWatch();        assertEquals(0, watch.getTime());        assertEquals("0:00:00.000", watch.toString());                watch.start();            try {Thread.sleep(500);} catch (InterruptedException ex) {}        assertTrue(watch.getTime() < 2000);    }        public void testStopWatchSplit(){        StopWatch watch = new StopWatch();        watch.start();            try {Thread.sleep(550);} catch (InterruptedException ex) {}        watch.split();        long splitTime = watch.getTime();            try {Thread.sleep(550);} catch (InterruptedException ex) {}        watch.unsplit();            try {Thread.sleep(550);} catch (InterruptedException ex) {}        watch.stop();        long totalTime = watch.getTime();        //        System.err.println(splitTime +"  "+totalTime);        assertTrue(splitTime >= 500);        assertTrue(splitTime < 700);        assertTrue(totalTime >= 1500);        assertTrue(totalTime < 1900);    }        public void testStopWatchSuspend(){        StopWatch watch = new StopWatch();        watch.start();            try {Thread.sleep(550);} catch (InterruptedException ex) {}        watch.suspend();        long suspendTime = watch.getTime();            try {Thread.sleep(550);} catch (InterruptedException ex) {}        watch.resume();            try {Thread.sleep(550);} catch (InterruptedException ex) {}        watch.stop();        long totalTime = watch.getTime();        //        System.err.println(suspendTime +"  "+totalTime);        assertTrue(suspendTime >= 500);        assertTrue(suspendTime < 700);        assertTrue(totalTime >= 1000);        assertTrue(totalTime < 1300);    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.time;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.Calendar;import java.util.TimeZone;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * TestCase for DurationFormatUtils. * * @author Apache Ant - DateUtilsTest * @author <a href="mailto:sbailliez@apache.org">Stephane Bailliez</a> * @author <a href="mailto:stefan.bodewig@epost.de">Stefan Bodewig</a> * @author Stephen Colebourne * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> */public class DurationFormatUtilsTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(DurationFormatUtilsTest.class);    suite.setName("DurationFormatUtils Tests");        return suite;    }    public DurationFormatUtilsTest(String s) {        super(s);    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new DurationFormatUtils());        Constructor[] cons = DurationFormatUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(false, Modifier.isPublic(DurationFormatUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(DurationFormatUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testFormatWords(){        String text = null;                text = DurationFormatUtils.formatWords(50*1000, true, false);        assertEquals("50 seconds", text);        text = DurationFormatUtils.formatWords(65*1000, true, false);        assertEquals("1 minute 5 seconds", text);        text = DurationFormatUtils.formatWords(120*1000, true, false);        assertEquals("2 minutes 0 seconds", text);        text = DurationFormatUtils.formatWords(121*1000, true, false);        assertEquals("2 minutes 1 second", text);        text = DurationFormatUtils.formatWords(72*60*1000, true, false);        assertEquals("1 hour 12 minutes 0 seconds", text);        text = DurationFormatUtils.formatWords(24*60*60*1000, true, false);        assertEquals("1 day 0 hours 0 minutes 0 seconds", text);                text = DurationFormatUtils.formatWords(50*1000, true, true);        assertEquals("50 seconds", text);        text = DurationFormatUtils.formatWords(65*1000, true, true);        assertEquals("1 minute 5 seconds", text);        text = DurationFormatUtils.formatWords(120*1000, true, true);        assertEquals("2 minutes", text);        text = DurationFormatUtils.formatWords(121*1000, true, true);        assertEquals("2 minutes 1 second", text);        text = DurationFormatUtils.formatWords(72*60*1000, true, true);        assertEquals("1 hour 12 minutes", text);        text = DurationFormatUtils.formatWords(24*60*60*1000, true, true);        assertEquals("1 day", text);                text = DurationFormatUtils.formatWords(50*1000, false, true);        assertEquals("0 days 0 hours 0 minutes 50 seconds", text);        text = DurationFormatUtils.formatWords(65*1000, false, true);        assertEquals("0 days 0 hours 1 minute 5 seconds", text);        text = DurationFormatUtils.formatWords(120*1000, false, true);        assertEquals("0 days 0 hours 2 minutes", text);        text = DurationFormatUtils.formatWords(121*1000, false, true);        assertEquals("0 days 0 hours 2 minutes 1 second", text);        text = DurationFormatUtils.formatWords(72*60*1000, false, true);        assertEquals("0 days 1 hour 12 minutes", text);        text = DurationFormatUtils.formatWords(24*60*60*1000, false, true);        assertEquals("1 day", text);                text = DurationFormatUtils.formatWords(50*1000, false, false);        assertEquals("0 days 0 hours 0 minutes 50 seconds", text);        text = DurationFormatUtils.formatWords(65*1000, false, false);        assertEquals("0 days 0 hours 1 minute 5 seconds", text);        text = DurationFormatUtils.formatWords(120*1000, false, false);        assertEquals("0 days 0 hours 2 minutes 0 seconds", text);        text = DurationFormatUtils.formatWords(121*1000, false, false);        assertEquals("0 days 0 hours 2 minutes 1 second", text);        text = DurationFormatUtils.formatWords(72*60*1000, false, false);        assertEquals("0 days 1 hour 12 minutes 0 seconds", text);        text = DurationFormatUtils.formatWords(48*60*60*1000 + 72*60*1000 , false, false);        assertEquals("2 days 1 hour 12 minutes 0 seconds", text);    }    public void testFormatISOStyle(){        long time = 0;        assertEquals("0:00:00.000", DurationFormatUtils.formatISO(time));                time = 1;        assertEquals("0:00:00.001", DurationFormatUtils.formatISO(time));                time = 15;        assertEquals("0:00:00.015", DurationFormatUtils.formatISO(time));                time = 165;        assertEquals("0:00:00.165", DurationFormatUtils.formatISO(time));                time = 1675;        assertEquals("0:00:01.675", DurationFormatUtils.formatISO(time));                time = 13465;        assertEquals("0:00:13.465", DurationFormatUtils.formatISO(time));                time = 72789;        assertEquals("0:01:12.789", DurationFormatUtils.formatISO(time));                time = 12789 + 32 * 60000;        assertEquals("0:32:12.789", DurationFormatUtils.formatISO(time));                time = 12789 + 62 * 60000;        assertEquals("1:02:12.789", DurationFormatUtils.formatISO(time));    }    public void testISODurationFormat(){        TimeZone timeZone = TimeZone.getTimeZone("GMT-3");        Calendar cal = Calendar.getInstance(timeZone);        cal.set(2002, 1, 23, 9, 11, 12);        cal.set(Calendar.MILLISECOND, 1);        String text;        // repeat a test from testDateTimeISO to compare extended and not extended.        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);        assertEquals("2002-02-23T09:11:12-03:00", text);        // test fixture is the same as above, but now with extended format.        text = DurationFormatUtils.ISO_EXTENDED_FORMAT.format(cal);        assertEquals("P2002Y2M23DT9H11M12.1S", text);        // test fixture from example in http://www.w3.org/TR/xmlschema-2/#duration        cal.set(1, 1, 3, 10, 30, 0);        cal.set(Calendar.MILLISECOND, 0);        text = DurationFormatUtils.ISO_EXTENDED_FORMAT.format(cal);        assertEquals("P1Y2M3DT10H30M0.0S", text);        // want a way to say 'don't print the seconds in format()' or other fields for that matter:        //assertEquals("P1Y2M3DT10H30M", text);    }    }
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.time;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.Iterator;import java.util.Locale;import java.util.NoSuchElementException;import java.util.TimeZone;import junit.framework.AssertionFailedError;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.time.DateUtils}. * * @author <a href="mailto:sergek@lokitech.com">Serge Knystautas</a> * @author <a href="mailto:steve@mungoknotwise.com">Steven Caswell</a> */public class DateUtilsTest extends TestCase {    DateFormat dateParser = null;    DateFormat dateTimeParser = null;    DateFormat timeZoneDateParser = null;    Date date1 = null;    Date date2 = null;    Date date3 = null;    Date date4 = null;    Date date5 = null;    Date date6 = null;    Date date7 = null;    Date date8 = null;    Calendar cal1 = null;    Calendar cal2 = null;    Calendar cal3 = null;    Calendar cal4 = null;    Calendar cal5 = null;    Calendar cal6 = null;    Calendar cal7 = null;    Calendar cal8 = null;    TimeZone zone = null;    TimeZone defaultZone = null;    public DateUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(DateUtilsTest.class);    suite.setName("DateUtils Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();        dateParser = new SimpleDateFormat("MMM dd, yyyy", Locale.ENGLISH);        dateTimeParser = new SimpleDateFormat("MMM dd, yyyy H:mm:ss.SSS", Locale.ENGLISH);        date1 = dateTimeParser.parse("February 12, 2002 12:34:56.789");        date2 = dateTimeParser.parse("November 18, 2001 1:23:11.321");        defaultZone = TimeZone.getDefault();        zone = TimeZone.getTimeZone("MET");        TimeZone.setDefault(zone);        dateTimeParser.setTimeZone(zone);        date3 = dateTimeParser.parse("March 30, 2003 05:30:45.000");        date4 = dateTimeParser.parse("March 30, 2003 01:10:00.000");        date5 = dateTimeParser.parse("March 30, 2003 01:40:00.000");        date6 = dateTimeParser.parse("March 30, 2003 02:10:00.000");        date7 = dateTimeParser.parse("March 30, 2003 02:40:00.000");        date8 = dateTimeParser.parse("October 26, 2003 05:30:45.000");        dateTimeParser.setTimeZone(defaultZone);        TimeZone.setDefault(defaultZone);        cal1 = Calendar.getInstance();        cal1.setTime(date1);        cal2 = Calendar.getInstance();        cal2.setTime(date2);        TimeZone.setDefault(zone);        cal3 = Calendar.getInstance();        cal3.setTime(date3);        cal4 = Calendar.getInstance();        cal4.setTime(date4);        cal5 = Calendar.getInstance();        cal5.setTime(date5);        cal6 = Calendar.getInstance();        cal6.setTime(date6);        cal7 = Calendar.getInstance();        cal7.setTime(date7);        cal8 = Calendar.getInstance();        cal8.setTime(date8);        TimeZone.setDefault(defaultZone);    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new DateUtils());        Constructor[] cons = DateUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(DateUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(DateUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    /**     * Tests various values with the round method     */    public void testRound() throws Exception {        // tests for public static Date round(Date date, int field)        assertEquals("round year-1 failed",                dateParser.parse("January 1, 2002"),                DateUtils.round(date1, Calendar.YEAR));        assertEquals("round year-2 failed",                dateParser.parse("January 1, 2002"),                DateUtils.round(date2, Calendar.YEAR));        assertEquals("round month-1 failed",                dateParser.parse("February 1, 2002"),                DateUtils.round(date1, Calendar.MONTH));        assertEquals("round month-2 failed",                dateParser.parse("December 1, 2001"),                DateUtils.round(date2, Calendar.MONTH));        assertEquals("round semimonth-1 failed",                dateParser.parse("February 16, 2002"),                DateUtils.round(date1, DateUtils.SEMI_MONTH));        assertEquals("round semimonth-2 failed",                dateParser.parse("November 16, 2001"),                DateUtils.round(date2, DateUtils.SEMI_MONTH));        assertEquals("round date-1 failed",                dateParser.parse("February 13, 2002"),                DateUtils.round(date1, Calendar.DATE));        assertEquals("round date-2 failed",                dateParser.parse("November 18, 2001"),                DateUtils.round(date2, Calendar.DATE));        assertEquals("round hour-1 failed",                dateTimeParser.parse("February 12, 2002 13:00:00.000"),                DateUtils.round(date1, Calendar.HOUR));        assertEquals("round hour-2 failed",                dateTimeParser.parse("November 18, 2001 1:00:00.000"),                DateUtils.round(date2, Calendar.HOUR));        assertEquals("round minute-1 failed",                dateTimeParser.parse("February 12, 2002 12:35:00.000"),                DateUtils.round(date1, Calendar.MINUTE));        assertEquals("round minute-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:00.000"),                DateUtils.round(date2, Calendar.MINUTE));        assertEquals("round second-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:57.000"),                DateUtils.round(date1, Calendar.SECOND));        assertEquals("round second-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:11.000"),                DateUtils.round(date2, Calendar.SECOND));        // tests for public static Date round(Object date, int field)        assertEquals("round year-1 failed",                dateParser.parse("January 1, 2002"),                DateUtils.round((Object) date1, Calendar.YEAR));        assertEquals("round year-2 failed",                dateParser.parse("January 1, 2002"),                DateUtils.round((Object) date2, Calendar.YEAR));        assertEquals("round month-1 failed",                dateParser.parse("February 1, 2002"),                DateUtils.round((Object) date1, Calendar.MONTH));        assertEquals("round month-2 failed",                dateParser.parse("December 1, 2001"),                DateUtils.round((Object) date2, Calendar.MONTH));        assertEquals("round semimonth-1 failed",                dateParser.parse("February 16, 2002"),                DateUtils.round((Object) date1, DateUtils.SEMI_MONTH));        assertEquals("round semimonth-2 failed",                dateParser.parse("November 16, 2001"),                DateUtils.round((Object) date2, DateUtils.SEMI_MONTH));        assertEquals("round date-1 failed",                dateParser.parse("February 13, 2002"),                DateUtils.round((Object) date1, Calendar.DATE));        assertEquals("round date-2 failed",                dateParser.parse("November 18, 2001"),                DateUtils.round((Object) date2, Calendar.DATE));        assertEquals("round hour-1 failed",                dateTimeParser.parse("February 12, 2002 13:00:00.000"),                DateUtils.round((Object) date1, Calendar.HOUR));        assertEquals("round hour-2 failed",                dateTimeParser.parse("November 18, 2001 1:00:00.000"),                DateUtils.round((Object) date2, Calendar.HOUR));        assertEquals("round minute-1 failed",                dateTimeParser.parse("February 12, 2002 12:35:00.000"),                DateUtils.round((Object) date1, Calendar.MINUTE));        assertEquals("round minute-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:00.000"),                DateUtils.round((Object) date2, Calendar.MINUTE));        assertEquals("round second-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:57.000"),                DateUtils.round((Object) date1, Calendar.SECOND));        assertEquals("round second-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:11.000"),                DateUtils.round((Object) date2, Calendar.SECOND));        assertEquals("round calendar second-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:57.000"),                DateUtils.round((Object) cal1, Calendar.SECOND));        assertEquals("round calendar second-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:11.000"),                DateUtils.round((Object) cal2, Calendar.SECOND));        try {            DateUtils.round((Date) null, Calendar.SECOND);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.round((Calendar) null, Calendar.SECOND);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.round((Object) null, Calendar.SECOND);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.round("", Calendar.SECOND);            fail();        } catch (ClassCastException ex) {}        try {            DateUtils.round(date1, -9999);            fail();        } catch(IllegalArgumentException ex) {}                // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560        // Test rounding across the beginning of daylight saving time        TimeZone.setDefault(zone);        dateTimeParser.setTimeZone(zone);        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round(date4, Calendar.DATE));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round((Object) cal4, Calendar.DATE));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round(date5, Calendar.DATE));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round((Object) cal5, Calendar.DATE));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round(date6, Calendar.DATE));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round((Object) cal6, Calendar.DATE));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round(date7, Calendar.DATE));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round((Object) cal7, Calendar.DATE));                assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 01:00:00.000"),                DateUtils.round(date4, Calendar.HOUR_OF_DAY));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 01:00:00.000"),                DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 03:00:00.000"),                DateUtils.round(date5, Calendar.HOUR_OF_DAY));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 03:00:00.000"),                DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 03:00:00.000"),                DateUtils.round(date6, Calendar.HOUR_OF_DAY));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 03:00:00.000"),                DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 04:00:00.000"),                DateUtils.round(date7, Calendar.HOUR_OF_DAY));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 04:00:00.000"),                DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY));        TimeZone.setDefault(defaultZone);        dateTimeParser.setTimeZone(defaultZone);    }    /**     * Tests various values with the trunc method     */    public void testTruncate() throws Exception {        // tests public static Date truncate(Date date, int field)        assertEquals("truncate year-1 failed",                dateParser.parse("January 1, 2002"),                DateUtils.truncate(date1, Calendar.YEAR));        assertEquals("truncate year-2 failed",                dateParser.parse("January 1, 2001"),                DateUtils.truncate(date2, Calendar.YEAR));        assertEquals("truncate month-1 failed",                dateParser.parse("February 1, 2002"),                DateUtils.truncate(date1, Calendar.MONTH));        assertEquals("truncate month-2 failed",                dateParser.parse("November 1, 2001"),                DateUtils.truncate(date2, Calendar.MONTH));        assertEquals("truncate semimonth-1 failed",                dateParser.parse("February 1, 2002"),                DateUtils.truncate(date1, DateUtils.SEMI_MONTH));        assertEquals("truncate semimonth-2 failed",                dateParser.parse("November 16, 2001"),                DateUtils.truncate(date2, DateUtils.SEMI_MONTH));        assertEquals("truncate date-1 failed",                dateParser.parse("February 12, 2002"),                DateUtils.truncate(date1, Calendar.DATE));        assertEquals("truncate date-2 failed",                dateParser.parse("November 18, 2001"),                DateUtils.truncate(date2, Calendar.DATE));        assertEquals("truncate hour-1 failed",                dateTimeParser.parse("February 12, 2002 12:00:00.000"),                DateUtils.truncate(date1, Calendar.HOUR));        assertEquals("truncate hour-2 failed",                dateTimeParser.parse("November 18, 2001 1:00:00.000"),                DateUtils.truncate(date2, Calendar.HOUR));        assertEquals("truncate minute-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:00.000"),                DateUtils.truncate(date1, Calendar.MINUTE));        assertEquals("truncate minute-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:00.000"),                DateUtils.truncate(date2, Calendar.MINUTE));        assertEquals("truncate second-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:56.000"),                DateUtils.truncate(date1, Calendar.SECOND));        assertEquals("truncate second-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:11.000"),                DateUtils.truncate(date2, Calendar.SECOND));        // tests public static Date truncate(Object date, int field)        assertEquals("truncate year-1 failed",                dateParser.parse("January 1, 2002"),                DateUtils.truncate((Object) date1, Calendar.YEAR));        assertEquals("truncate year-2 failed",                dateParser.parse("January 1, 2001"),                DateUtils.truncate((Object) date2, Calendar.YEAR));        assertEquals("truncate month-1 failed",                dateParser.parse("February 1, 2002"),                DateUtils.truncate((Object) date1, Calendar.MONTH));        assertEquals("truncate month-2 failed",                dateParser.parse("November 1, 2001"),                DateUtils.truncate((Object) date2, Calendar.MONTH));        assertEquals("truncate semimonth-1 failed",                dateParser.parse("February 1, 2002"),                DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH));        assertEquals("truncate semimonth-2 failed",                dateParser.parse("November 16, 2001"),                DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH));        assertEquals("truncate date-1 failed",                dateParser.parse("February 12, 2002"),                DateUtils.truncate((Object) date1, Calendar.DATE));        assertEquals("truncate date-2 failed",                dateParser.parse("November 18, 2001"),                DateUtils.truncate((Object) date2, Calendar.DATE));        assertEquals("truncate hour-1 failed",                dateTimeParser.parse("February 12, 2002 12:00:00.000"),                DateUtils.truncate((Object) date1, Calendar.HOUR));        assertEquals("truncate hour-2 failed",                dateTimeParser.parse("November 18, 2001 1:00:00.000"),                DateUtils.truncate((Object) date2, Calendar.HOUR));        assertEquals("truncate minute-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:00.000"),                DateUtils.truncate((Object) date1, Calendar.MINUTE));        assertEquals("truncate minute-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:00.000"),                DateUtils.truncate((Object) date2, Calendar.MINUTE));        assertEquals("truncate second-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:56.000"),                DateUtils.truncate((Object) date1, Calendar.SECOND));        assertEquals("truncate second-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:11.000"),                DateUtils.truncate((Object) date2, Calendar.SECOND));                assertEquals("truncate calendar second-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:56.000"),                DateUtils.truncate((Object) cal1, Calendar.SECOND));        assertEquals("truncate calendar second-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:11.000"),                DateUtils.truncate((Object) cal2, Calendar.SECOND));                try {            DateUtils.truncate((Date) null, Calendar.SECOND);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.truncate((Calendar) null, Calendar.SECOND);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.truncate((Object) null, Calendar.SECOND);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.truncate("", Calendar.SECOND);            fail();        } catch (ClassCastException ex) {}        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560        // Test truncate across beginning of daylight saving time        TimeZone.setDefault(zone);        dateTimeParser.setTimeZone(zone);        assertEquals("truncate MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.truncate(date3, Calendar.DATE));        assertEquals("truncate MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.truncate((Object) cal3, Calendar.DATE));        // Test truncate across end of daylight saving time        assertEquals("truncate MET date across DST change-over",                dateTimeParser.parse("October 26, 2003 00:00:00.000"),                DateUtils.truncate(date8, Calendar.DATE));        assertEquals("truncate MET date across DST change-over",                dateTimeParser.parse("October 26, 2003 00:00:00.000"),                DateUtils.truncate((Object) cal8, Calendar.DATE));        TimeZone.setDefault(defaultZone);        dateTimeParser.setTimeZone(defaultZone);    }    // TODO: Decide whether this code is removed or goes into 2.1    /*     * Tests the parse method, which is supposed to handle various strings     * as flexibly as CVS supports.    public void testParseCVS() throws Exception {        try {            DateUtils.parseCVS(null);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.parseCVS("gobbledegook");            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.parseCVS("ago");            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.parseCVS("1 junk ago");            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.parseCVS("1month ago");            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.parseCVS("last month");            fail();        } catch (IllegalArgumentException ex) {}        //This is difficult to test since the "now" used in the        //  parse function cannot be controlled.  We could possibly control        //  it by trying before and after and making sure the value we expect        //  is between the two values calculated.        //For now we're just using the custom assertEquals that takes a delta        Calendar now = null;        // M/dd/yy H:mm:ss z        now = Calendar.getInstance();        now.set(Calendar.MILLISECOND, 0);        assertEquals("parseCVS format M/dd/yy H:mm:ss z",                  now, DateUtils.parseCVS(new SimpleDateFormat("M/dd/yy H:mm:ss z").format(now.getTime())), 50);        // MMM d, yyyy h:mm a        now = Calendar.getInstance();        now.set(Calendar.MILLISECOND, 0);        now.set(Calendar.SECOND, 0);        assertEquals("parseCVS format MMM d, yyyy h:mm a",                  now, DateUtils.parseCVS(new SimpleDateFormat("MMM d, yyyy h:mm a").format(now.getTime())), 50);        // h:mm z        //        // This format is difficult to test using the current time because the        // parseCVS method applies the default date of January 1, 1970 to the        // parsed time. The most straightforward way to test the parse is to        // pass in a known value, and test the output against this know value.        //         now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("16:30 GMT"));        assertEquals("parseCVS format h:mm z 16:30 GMT",                   now, DateUtils.parseCVS("16:30 GMT"), 50);        now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("16:30 EST"));        assertEquals("parseCVS format h:mm z 16:30 EST",                   now, DateUtils.parseCVS("16:30 EST"), 50);        now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("16:30 GMT-05:00"));        assertEquals("parseCVS format h:mm z 16:30 GMT-05:00",                   now, DateUtils.parseCVS("16:30 GMT-05:00"), 50);        now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("16:30 GMT+01:00"));        assertEquals("parseCVS format h:mm z 16:30 GMT+01:00",                   now, DateUtils.parseCVS("16:30 GMT+01:00"), 50);                now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("06:30 GMT"));        assertEquals("parseCVS format h:mm z 06:30 GMT",                   now, DateUtils.parseCVS("06:30 GMT"), 50);        now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("06:30 EST"));        assertEquals("parseCVS format h:mm z 06:30 EST",                   now, DateUtils.parseCVS("06:30 EST"), 50);        now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("06:30 GMT-05:00"));        assertEquals("parseCVS format h:mm z 06:30 GMT-05:00",                   now, DateUtils.parseCVS("06:30 GMT-05:00"), 50);        now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("06:30 GMT+01:00"));        assertEquals("parseCVS format h:mm z 06:30 GMT+01:00",                   now, DateUtils.parseCVS("06:30 GMT+01:00"), 50);                now = Calendar.getInstance();        now.add(Calendar.WEEK_OF_MONTH, -1);        assertEquals("parseCVS a week ago",                now, DateUtils.parseCVS("a week ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.WEEK_OF_MONTH, -1);        assertEquals("parseCVS an week ago",                now, DateUtils.parseCVS("an week ago"), 50);                now = Calendar.getInstance();        now.add(Calendar.DAY_OF_MONTH, -14);        assertEquals("parseCVS 1 fortnight ago",                now, DateUtils.parseCVS("1 fortnight ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.DAY_OF_MONTH, -14);        assertEquals("parseCVS 1 fortnights ago",                now, DateUtils.parseCVS("1 fortnights ago"), 50);                now = Calendar.getInstance();        now.add(Calendar.MINUTE, -1);        assertEquals("parseCVS 1 minute ago",                now, DateUtils.parseCVS("1 minute ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.MINUTE, -8);        assertEquals("parseCVS 8 minutes ago",                now, DateUtils.parseCVS("8 minutes ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.MILLISECOND, -1);        assertEquals("parseCVS 1 millisecond ago",                now, DateUtils.parseCVS("1 millisecond ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.MILLISECOND, -100);        assertEquals("parseCVS 1 milliseconds ago",                now, DateUtils.parseCVS("100 milliseconds ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.SECOND, -30);        assertEquals("parseCVS 30 second ago",                now, DateUtils.parseCVS("30 second ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.SECOND, -30);        assertEquals("parseCVS 30 seconds ago",                now, DateUtils.parseCVS("30 seconds ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.HOUR, -2);        assertEquals("parseCVS 2 hour ago",                now, DateUtils.parseCVS("2 hour ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.HOUR, -2);        assertEquals("parseCVS 2 hours ago",                now, DateUtils.parseCVS("2 hours ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.DAY_OF_MONTH, -2);        assertEquals("parseCVS 2 day ago",                now, DateUtils.parseCVS("2 day ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.DAY_OF_MONTH, -2);        assertEquals("parseCVS 2 days ago",                now, DateUtils.parseCVS("2 days ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.MONTH, -2);        assertEquals("parseCVS 2 month ago",                now, DateUtils.parseCVS("2 month ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.MONTH, -2);        assertEquals("parseCVS 2 months ago",                now, DateUtils.parseCVS("2 months ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.YEAR, -2);        assertEquals("parseCVS 2 year ago",                now, DateUtils.parseCVS("2 year ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.YEAR, -2);        assertEquals("parseCVS 2 years ago",                now, DateUtils.parseCVS("2 years ago"), 50);                now = Calendar.getInstance();        now.add(Calendar.DATE, -1);        assertEquals("parseCVS yesterday",                now, DateUtils.parseCVS("yesterday"), 50);        now = Calendar.getInstance();        now.add(Calendar.DATE, 1);        assertEquals("parseCVS tomorrow",                now, DateUtils.parseCVS("tomorrow"), 50);        now = Calendar.getInstance();        //Sunday would be 1, Saturday would be 7, so we walk back up to 6 days.        if (now.get(Calendar.DAY_OF_WEEK) == 1) {            //If Sunday already, we go back a full week            now.add(Calendar.DATE, -7);        } else {            now.add(Calendar.DATE, 1 - now.get(Calendar.DAY_OF_WEEK));        }        assertEquals("parseCVS last Sunday",                now, DateUtils.parseCVS("last Sunday"), 50);        now = Calendar.getInstance();        now.add(Calendar.DATE, -7);        assertEquals("parseCVS last week",                now, DateUtils.parseCVS("last week"), 50);                now = Calendar.getInstance();        //January would be 0, December would be 11, so we walk back up to 11 months        if (now.get(Calendar.MONTH) == 0) {            //If January already, we go back a full year            now.add(Calendar.MONTH, -12);        } else {            now.add(Calendar.MONTH, 0 - now.get(Calendar.MONTH));        }        assertEquals("parseCVS last January",                now, DateUtils.parseCVS("last January"), 50);    }     */    /**     * Tests the iterator exceptions     */    public void testIteratorEx() throws Exception {        try {            DateUtils.iterator(Calendar.getInstance(), -9999);        } catch (IllegalArgumentException ex) {}        try {            DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.iterator("", DateUtils.RANGE_WEEK_CENTER);            fail();        } catch (ClassCastException ex) {}    }    /**     * Tests the calendar iterator for week ranges     */    public void testWeekIterator() throws Exception {        Calendar now = Calendar.getInstance();        for (int i = 0; i< 7; i++) {            Calendar today = DateUtils.truncate(now, Calendar.DATE);            Calendar sunday = DateUtils.truncate(now, Calendar.DATE);            sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));            Calendar monday = DateUtils.truncate(now, Calendar.DATE);            if (monday.get(Calendar.DAY_OF_WEEK) == 1) {                //This is sunday... roll back 6 days                monday.add(Calendar.DATE, -6);            } else {                monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));            }            Calendar centered = DateUtils.truncate(now, Calendar.DATE);            centered.add(Calendar.DATE, -3);                        Iterator it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY);            assertWeekIterator(it, sunday);            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY);            assertWeekIterator(it, monday);            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE);            assertWeekIterator(it, today);            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);            assertWeekIterator(it, centered);                        it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER);            assertWeekIterator(it, centered);            it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER);            assertWeekIterator(it, centered);            try {                it.next();                fail();            } catch (NoSuchElementException ex) {}            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);            it.next();            try {                it.remove();            } catch( UnsupportedOperationException ex) {}                        now.add(Calendar.DATE,1);        }    }                /**     * Tests the calendar iterator for month-based ranges     */    public void testMonthIterator() throws Exception {        Iterator it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY);        assertWeekIterator(it,                dateParser.parse("January 27, 2002"),                dateParser.parse("March 2, 2002"));        it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY);        assertWeekIterator(it,                dateParser.parse("January 28, 2002"),                dateParser.parse("March 3, 2002"));        it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY);        assertWeekIterator(it,                dateParser.parse("October 28, 2001"),                dateParser.parse("December 1, 2001"));        it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY);        assertWeekIterator(it,                dateParser.parse("October 29, 2001"),                dateParser.parse("December 2, 2001"));    }    /**     * This checks that this is a 7 element iterator of Calendar objects     * that are dates (no time), and exactly 1 day spaced after each other.     */    private static void assertWeekIterator(Iterator it, Calendar start) {        Calendar end = (Calendar) start.clone();        end.add(Calendar.DATE, 6);        assertWeekIterator(it, start, end);    }    /**     * Convenience method for when working with Date objects     */    private static void assertWeekIterator(Iterator it, Date start, Date end) {        Calendar calStart = Calendar.getInstance();        calStart.setTime(start);        Calendar calEnd = Calendar.getInstance();        calEnd.setTime(end);        assertWeekIterator(it, calStart, calEnd);    }    /**     * This checks that this is a 7 divisble iterator of Calendar objects     * that are dates (no time), and exactly 1 day spaced after each other     * (in addition to the proper start and stop dates)     */    private static void assertWeekIterator(Iterator it, Calendar start, Calendar end) {        Calendar cal = (Calendar) it.next();        assertEquals("", start, cal, 0);        Calendar last = null;        int count = 1;        while (it.hasNext()) {            //Check this is just a date (no time component)            assertEquals("", cal, DateUtils.truncate(cal, Calendar.DATE), 0);            last = cal;            cal = (Calendar) it.next();            count++;            //Check that this is one day more than the last date            last.add(Calendar.DATE, 1);            assertEquals("", last, cal, 0);        }        if (count % 7 != 0) {            throw new AssertionFailedError("There were " + count + " days in this iterator");        }        assertEquals("", end, cal, 0);    }    /**     * Used to check that Calendar objects are close enough     * delta is in milliseconds     */    public static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {        if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {            throw new AssertionFailedError(                    message + " expected " + cal1.getTime() + " but got " + cal2.getTime());        }    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.time;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.GregorianCalendar;import java.util.Locale;import java.util.TimeZone;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.time.FastDateFormat}. * * @author Sean Schofield * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> * @author Fredrik Westermarck * @since 2.0 * @version $Id: FastDateFormatTest.java,v 1.9 2004/07/05 22:37:40 scolebourne Exp $ */public class FastDateFormatTest extends TestCase {    public FastDateFormatTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(FastDateFormatTest.class);        suite.setName("FastDateFormat Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    public void test_getInstance() {        FastDateFormat format1 = FastDateFormat.getInstance();        FastDateFormat format2 = FastDateFormat.getInstance();        assertSame(format1, format2);        assertEquals(new SimpleDateFormat().toPattern(), format1.getPattern());    }    public void test_getInstance_String() {        FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy");        FastDateFormat format2 = FastDateFormat.getInstance("MM-DD-yyyy");        FastDateFormat format3 = FastDateFormat.getInstance("MM-DD-yyyy");        assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);        assertSame(format2, format3);        assertEquals("MM/DD/yyyy", format1.getPattern());        assertEquals(TimeZone.getDefault(), format1.getTimeZone());        assertEquals(TimeZone.getDefault(), format2.getTimeZone());        assertEquals(false, format1.getTimeZoneOverridesCalendar());        assertEquals(false, format2.getTimeZoneOverridesCalendar());    }    public void test_getInstance_String_TimeZone() {        Locale realDefaultLocale = Locale.getDefault();        TimeZone realDefaultZone = TimeZone.getDefault();        try {            Locale.setDefault(Locale.US);            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));            FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy",                    TimeZone.getTimeZone("Atlantic/Reykjavik"));            FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy");            FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault());            FastDateFormat format4 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault());            FastDateFormat format5 = FastDateFormat.getInstance("MM-DD-yyyy", TimeZone.getDefault());            FastDateFormat format6 = FastDateFormat.getInstance("MM-DD-yyyy");            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);            assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone());            assertEquals(true, format1.getTimeZoneOverridesCalendar());            assertEquals(TimeZone.getDefault(), format2.getTimeZone());            assertEquals(false, format2.getTimeZoneOverridesCalendar());            assertSame(format3, format4);            assertTrue(format3 != format5); // -- junit 3.8 version -- assertFalse(format3 == format5);            assertTrue(format4 != format6); // -- junit 3.8 version -- assertFalse(format3 == format5);        } finally {            Locale.setDefault(realDefaultLocale);            TimeZone.setDefault(realDefaultZone);        }    }    public void test_getInstance_String_Locale() {        Locale realDefaultLocale = Locale.getDefault();        try {            Locale.setDefault(Locale.US);            FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY);            FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy");            FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY);            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);            assertSame(format1, format3);            assertSame(Locale.GERMANY, format1.getLocale());        } finally {            Locale.setDefault(realDefaultLocale);        }    }    public void test_getInstance_String_TimeZone_Locale() {        Locale realDefaultLocale = Locale.getDefault();        TimeZone realDefaultZone = TimeZone.getDefault();        try {            Locale.setDefault(Locale.US);            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));            FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy",                    TimeZone.getTimeZone("Atlantic/Reykjavik"), Locale.GERMANY);            FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY);            FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy",                    TimeZone.getDefault(), Locale.GERMANY);            assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2);            assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone());            assertEquals(TimeZone.getDefault(), format2.getTimeZone());            assertEquals(TimeZone.getDefault(), format3.getTimeZone());            assertEquals(true, format1.getTimeZoneOverridesCalendar());            assertEquals(false, format2.getTimeZoneOverridesCalendar());            assertEquals(true, format3.getTimeZoneOverridesCalendar());            assertEquals(Locale.GERMANY, format1.getLocale());            assertEquals(Locale.GERMANY, format2.getLocale());            assertEquals(Locale.GERMANY, format3.getLocale());        } finally {            Locale.setDefault(realDefaultLocale);            TimeZone.setDefault(realDefaultZone);        }    }    public void testFormat() {        Locale realDefaultLocale = Locale.getDefault();        TimeZone realDefaultZone = TimeZone.getDefault();        try {            Locale.setDefault(Locale.US);            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));            FastDateFormat fdf = null;            SimpleDateFormat sdf = null;            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);            Date date1 = cal1.getTime();            Date date2 = cal2.getTime();            long millis1 = date1.getTime();            long millis2 = date2.getTime();            fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");            sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");            assertEquals(sdf.format(date1), fdf.format(date1));            assertEquals("2003-01-10T15:33:20", fdf.format(date1));            assertEquals("2003-01-10T15:33:20", fdf.format(cal1));            assertEquals("2003-01-10T15:33:20", fdf.format(millis1));            assertEquals("2003-07-10T09:00:00", fdf.format(date2));            assertEquals("2003-07-10T09:00:00", fdf.format(cal2));            assertEquals("2003-07-10T09:00:00", fdf.format(millis2));            fdf = FastDateFormat.getInstance("Z");            assertEquals("-0500", fdf.format(date1));            assertEquals("-0500", fdf.format(cal1));            assertEquals("-0500", fdf.format(millis1));            fdf = FastDateFormat.getInstance("Z");            assertEquals("-0400", fdf.format(date2));            assertEquals("-0400", fdf.format(cal2));            assertEquals("-0400", fdf.format(millis2));            fdf = FastDateFormat.getInstance("ZZ");            assertEquals("-05:00", fdf.format(date1));            assertEquals("-05:00", fdf.format(cal1));            assertEquals("-05:00", fdf.format(millis1));            fdf = FastDateFormat.getInstance("ZZ");            assertEquals("-04:00", fdf.format(date2));            assertEquals("-04:00", fdf.format(cal2));            assertEquals("-04:00", fdf.format(millis2));            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";            fdf = FastDateFormat.getInstance(pattern);            sdf = new SimpleDateFormat(pattern);            assertEquals(sdf.format(date1), fdf.format(date1));            assertEquals(sdf.format(date2), fdf.format(date2));        } finally {            Locale.setDefault(realDefaultLocale);            TimeZone.setDefault(realDefaultZone);        }    }    /**     * Test case for {@link FastDateFormat#getDateInstance(int, java.util.Locale)}.     */    public void testShortDateStyleWithLocales() {        Locale usLocale = Locale.US;        Locale swedishLocale = new Locale("sv", "SE");        Calendar cal = Calendar.getInstance();        cal.set(2004, 1, 3);        FastDateFormat fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, usLocale);        assertEquals("2/3/04", fdf.format(cal));        fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, swedishLocale);        assertEquals("2004-02-03", fdf.format(cal));    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.time;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.Calendar;import java.util.TimeZone;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * TestCase for DateFormatUtils. * * @author Apache Ant - DateUtilsTest * @author <a href="mailto:sbailliez@apache.org">Stephane Bailliez</a> * @author <a href="mailto:stefan.bodewig@epost.de">Stefan Bodewig</a> * @author Stephen Colebourne * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> */public class DateFormatUtilsTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(DateFormatUtilsTest.class);    suite.setName("DateFormatUtils Tests");        return suite;    }    public DateFormatUtilsTest(String s) {        super(s);    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new DateFormatUtils());        Constructor[] cons = DateFormatUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(DateFormatUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(DateFormatUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testDateTimeISO(){        TimeZone timeZone = TimeZone.getTimeZone("GMT-3");        Calendar cal = Calendar.getInstance(timeZone);        cal.set(2002,1,23,9,11,12);        String text = DateFormatUtils.format(cal.getTime(),                         DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23T09:11:12", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                       DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23T09:11:12", text);        text = DateFormatUtils.ISO_DATETIME_FORMAT.format(cal);        assertEquals("2002-02-23T09:11:12", text);                text = DateFormatUtils.format(cal.getTime(),                       DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23T09:11:12-03:00", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                       DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23T09:11:12-03:00", text);        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);        assertEquals("2002-02-23T09:11:12-03:00", text);    }    public void testDateISO(){        TimeZone timeZone = TimeZone.getTimeZone("GMT-3");        Calendar cal = Calendar.getInstance(timeZone);        cal.set(2002,1,23,10,11,12);        String text = DateFormatUtils.format(cal.getTime(),                         DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                         DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23", text);        text = DateFormatUtils.ISO_DATE_FORMAT.format(cal);        assertEquals("2002-02-23", text);                text = DateFormatUtils.format(cal.getTime(),                       DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23-03:00", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                       DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23-03:00", text);        text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal);        assertEquals("2002-02-23-03:00", text);    }    public void testTimeISO(){        TimeZone timeZone = TimeZone.getTimeZone("GMT-3");        Calendar cal = Calendar.getInstance(timeZone);        cal.set(2002,1,23,10,11,12);        String text = DateFormatUtils.format(cal.getTime(),                         DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);        assertEquals("T10:11:12", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                         DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);        assertEquals("T10:11:12", text);        text = DateFormatUtils.ISO_TIME_FORMAT.format(cal);        assertEquals("T10:11:12", text);                text = DateFormatUtils.format(cal.getTime(),                       DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("T10:11:12-03:00", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                       DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("T10:11:12-03:00", text);        text = DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal);        assertEquals("T10:11:12-03:00", text);    }    public void testTimeNoTISO(){        TimeZone timeZone = TimeZone.getTimeZone("GMT-3");        Calendar cal = Calendar.getInstance(timeZone);        cal.set(2002,1,23,10,11,12);        String text = DateFormatUtils.format(cal.getTime(),                         DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);        assertEquals("10:11:12", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                         DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);        assertEquals("10:11:12", text);        text = DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(cal);        assertEquals("10:11:12", text);                text = DateFormatUtils.format(cal.getTime(),                       DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("10:11:12-03:00", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                       DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("10:11:12-03:00", text);        text = DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.format(cal);        assertEquals("10:11:12-03:00", text);    }    public void testSMTP(){        TimeZone timeZone = TimeZone.getTimeZone("GMT-3");        Calendar cal = Calendar.getInstance(timeZone);        cal.set(2003,5,8,10,11,12);        String text = DateFormatUtils.format(cal.getTime(),                         DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());        assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                         DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());        assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text);        text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal);        assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text);                // format UTC        text = DateFormatUtils.formatUTC(cal.getTime().getTime(),                         DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());        assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text);    }}
/* * Copyright 2002,2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.math;import junit.framework.Test;import junit.framework.TestSuite;/** * Test cases for the {@link DoubleRange} class. * * @author Stephen Colebourne * @version $Id: DoubleRangeTest.java,v 1.6 2004/02/18 23:02:38 ggregory Exp $ */public final class DoubleRangeTest extends AbstractRangeTest {    public DoubleRangeTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(DoubleRangeTest.class);        suite.setName("DoubleRange Tests");        return suite;    }        public void setUp() {        super.setUp();        tenToTwenty = new DoubleRange(double10, double20);        otherRange = new NumberRange(ten, twenty);    }    protected Range createRange(Integer integer1, Integer integer2) {        return new DoubleRange(integer1, integer2);    }    protected Range createRange(Integer integer) {        return new NumberRange(integer);    }        //--------------------------------------------------------------------------    public void testConstructor1a() {        DoubleRange nr = new DoubleRange(8d);        assertEquals(double8, nr.getMinimumNumber());        assertEquals(double8, nr.getMaximumNumber());                try {            new DoubleRange(Double.NaN);            fail();        } catch (IllegalArgumentException ex) {}    }        public void testConstructor1b() {        DoubleRange nr = new DoubleRange(double8);        assertSame(double8, nr.getMinimumNumber());        assertSame(double8, nr.getMaximumNumber());                Range r = new DoubleRange(nonComparable);                try {            new DoubleRange(null);            fail();        } catch (IllegalArgumentException ex) {}        try {            new DoubleRange(new Double(Double.NaN));            fail();        } catch (IllegalArgumentException ex) {}    }        public void testConstructor2a() {        DoubleRange nr = new DoubleRange(8d, 10d);        assertEquals(double8, nr.getMinimumNumber());        assertEquals(double10, nr.getMaximumNumber());                nr = new DoubleRange(10d, 8d);        assertEquals(double8, nr.getMinimumNumber());        assertEquals(double10, nr.getMaximumNumber());                try {            new DoubleRange(Double.NaN, 8d);            fail();        } catch (IllegalArgumentException ex) {}    }    public void testConstructor2b() {        DoubleRange nr = new DoubleRange(double8, double10);        assertSame(double8, nr.getMinimumNumber());        assertSame(double10, nr.getMaximumNumber());                nr = new DoubleRange(double10, double8);        assertSame(double8, nr.getMinimumNumber());        assertSame(double10, nr.getMaximumNumber());                nr = new DoubleRange(double8, double10);        assertSame(double8, nr.getMinimumNumber());        assertEquals(double10, nr.getMaximumNumber());                // not null        try {            new DoubleRange(double8, null);            fail();        } catch (IllegalArgumentException ex) {}        try {            new DoubleRange(null, double8);            fail();        } catch (IllegalArgumentException ex) {}        try {            new DoubleRange(null, null);            fail();        } catch (IllegalArgumentException ex) {}                try {            new DoubleRange(new Double(Double.NaN), double10);            fail();        } catch (IllegalArgumentException ex) {}    }    //--------------------------------------------------------------------------    public void testContainsNumber() {        assertEquals(false, tenToTwenty.containsNumber(null));        assertEquals(true, tenToTwenty.containsNumber(nonComparable));                assertEquals(false, tenToTwenty.containsNumber(five));        assertEquals(true, tenToTwenty.containsNumber(ten));        assertEquals(true, tenToTwenty.containsNumber(fifteen));        assertEquals(true, tenToTwenty.containsNumber(twenty));        assertEquals(false, tenToTwenty.containsNumber(twentyFive));                assertEquals(false, tenToTwenty.containsNumber(long8));        assertEquals(true, tenToTwenty.containsNumber(long10));        assertEquals(true, tenToTwenty.containsNumber(long12));        assertEquals(true, tenToTwenty.containsNumber(long20));        assertEquals(false, tenToTwenty.containsNumber(long21));                assertEquals(false, tenToTwenty.containsNumber(double8));        assertEquals(true, tenToTwenty.containsNumber(double10));        assertEquals(true, tenToTwenty.containsNumber(double12));        assertEquals(true, tenToTwenty.containsNumber(double20));        assertEquals(false, tenToTwenty.containsNumber(double21));                assertEquals(false, tenToTwenty.containsNumber(float8));        assertEquals(true, tenToTwenty.containsNumber(float10));        assertEquals(true, tenToTwenty.containsNumber(float12));        assertEquals(true, tenToTwenty.containsNumber(float20));        assertEquals(false, tenToTwenty.containsNumber(float21));    }    public void testToString() {        String str = tenToTwenty.toString();        assertEquals("Range[10.0,20.0]", str);        assertSame(str, tenToTwenty.toString());        assertEquals("Range[-20.0,-10.0]", createRange(new Integer(-20), new Integer(-10)).toString());    }        //--------------------------------------------------------------------------    }
/* * Copyright 2002,2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.math;import junit.framework.Test;import junit.framework.TestSuite;/** * Test cases for the {@link LongRange} class. * * @author Stephen Colebourne * @version $Id: LongRangeTest.java,v 1.5 2004/02/18 23:02:38 ggregory Exp $ */public final class LongRangeTest extends AbstractRangeTest {    public LongRangeTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(LongRangeTest.class);        suite.setName("LongRange Tests");        return suite;    }        public void setUp() {        super.setUp();        tenToTwenty = new LongRange(long10, long20);        otherRange = new NumberRange(ten, twenty);    }    protected Range createRange(Integer integer1, Integer integer2) {        return new LongRange(integer1, integer2);    }    protected Range createRange(Integer integer) {        return new NumberRange(integer);    }        //--------------------------------------------------------------------------    public void testConstructor1a() {        LongRange nr = new LongRange(8L);        assertEquals(long8, nr.getMinimumNumber());        assertEquals(long8, nr.getMaximumNumber());    }        public void testConstructor1b() {        LongRange nr = new LongRange(long8);        assertSame(long8, nr.getMinimumNumber());        assertSame(long8, nr.getMaximumNumber());                Range r = new LongRange(nonComparable);                try {            new LongRange(null);            fail();        } catch (IllegalArgumentException ex) {}    }        public void testConstructor2a() {        LongRange nr = new LongRange(8L, 10L);        assertEquals(long8, nr.getMinimumNumber());        assertEquals(long10, nr.getMaximumNumber());                nr = new LongRange(10L, 8L);        assertEquals(long8, nr.getMinimumNumber());        assertEquals(long10, nr.getMaximumNumber());    }    public void testConstructor2b() {        LongRange nr = new LongRange(long8, long10);        assertSame(long8, nr.getMinimumNumber());        assertSame(long10, nr.getMaximumNumber());                nr = new LongRange(long10, long8);        assertSame(long8, nr.getMinimumNumber());        assertSame(long10, nr.getMaximumNumber());                nr = new LongRange(long8, long10);        assertSame(long8, nr.getMinimumNumber());        assertEquals(long10, nr.getMaximumNumber());                // not null        try {            new LongRange(long8, null);            fail();        } catch (IllegalArgumentException ex) {}        try {            new LongRange(null, long8);            fail();        } catch (IllegalArgumentException ex) {}        try {            new LongRange(null, null);            fail();        } catch (IllegalArgumentException ex) {}    }    //--------------------------------------------------------------------------    public void testContainsNumber() {        assertEquals(false, tenToTwenty.containsNumber(null));        assertEquals(true, tenToTwenty.containsNumber(nonComparable));                assertEquals(false, tenToTwenty.containsNumber(five));        assertEquals(true, tenToTwenty.containsNumber(ten));        assertEquals(true, tenToTwenty.containsNumber(fifteen));        assertEquals(true, tenToTwenty.containsNumber(twenty));        assertEquals(false, tenToTwenty.containsNumber(twentyFive));                assertEquals(false, tenToTwenty.containsNumber(long8));        assertEquals(true, tenToTwenty.containsNumber(long10));        assertEquals(true, tenToTwenty.containsNumber(long12));        assertEquals(true, tenToTwenty.containsNumber(long20));        assertEquals(false, tenToTwenty.containsNumber(long21));                assertEquals(false, tenToTwenty.containsNumber(double8));        assertEquals(true, tenToTwenty.containsNumber(double10));        assertEquals(true, tenToTwenty.containsNumber(double12));        assertEquals(true, tenToTwenty.containsNumber(double20));        assertEquals(false, tenToTwenty.containsNumber(double21));                assertEquals(false, tenToTwenty.containsNumber(float8));        assertEquals(true, tenToTwenty.containsNumber(float10));        assertEquals(true, tenToTwenty.containsNumber(float12));        assertEquals(true, tenToTwenty.containsNumber(float20));        assertEquals(false, tenToTwenty.containsNumber(float21));    }    public void testContainsLongBig() {        LongRange big = new LongRange(Long.MAX_VALUE, Long.MAX_VALUE- 2);        assertEquals(true, big.containsLong(Long.MAX_VALUE - 1));        assertEquals(false, big.containsLong(Long.MAX_VALUE - 3));    }    //--------------------------------------------------------------------------    }
/* * Copyright 2002,2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.math;import junit.framework.Test;import junit.framework.TestSuite;/** * Test cases for the {@link IntRange} class. * * @author Stephen Colebourne * @author Janek Bogucki * @author Phil Steitz * @version $Id: IntRangeTest.java,v 1.7 2004/02/18 23:02:38 ggregory Exp $ */public final class IntRangeTest extends AbstractRangeTest {    public IntRangeTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(IntRangeTest.class);        suite.setName("IntRange Tests");        return suite;    }        public void setUp() {        super.setUp();        tenToTwenty = new IntRange(ten, twenty);        otherRange = new NumberRange(ten, twenty);    }    protected Range createRange(Integer integer1, Integer integer2) {        return new IntRange(integer1, integer2);    }    protected Range createRange(Integer integer) {        return new NumberRange(integer);    }        //--------------------------------------------------------------------------    public void testConstructor1a() {        IntRange nr = new IntRange(5);        assertEquals(five, nr.getMinimumNumber());        assertEquals(five, nr.getMaximumNumber());    }        public void testConstructor1b() {        IntRange nr = new IntRange(five);        assertSame(five, nr.getMinimumNumber());        assertSame(five, nr.getMaximumNumber());                Range r = new IntRange(nonComparable);                try {            new IntRange(null);            fail();        } catch (IllegalArgumentException ex) {}    }        public void testConstructor2a() {        IntRange nr = new IntRange(5, 10);        assertEquals(five, nr.getMinimumNumber());        assertEquals(ten, nr.getMaximumNumber());                nr = new IntRange(5, 10);        assertEquals(five, nr.getMinimumNumber());        assertEquals(ten, nr.getMaximumNumber());    }    public void testConstructor2b() {        IntRange nr = new IntRange(five, ten);        assertSame(five, nr.getMinimumNumber());        assertSame(ten, nr.getMaximumNumber());                nr = new IntRange(ten, five);        assertSame(five, nr.getMinimumNumber());        assertSame(ten, nr.getMaximumNumber());                nr = new IntRange(five, long10);        assertSame(five, nr.getMinimumNumber());        assertEquals(ten, nr.getMaximumNumber());                // test non Integer, for full coverage        Long fiveL = new Long(5L);        Long tenL = new Long(10L);        nr = new IntRange(fiveL, tenL);        assertEquals(five, nr.getMinimumNumber());        assertEquals(ten, nr.getMaximumNumber());        nr = new IntRange(tenL, fiveL);        assertEquals(five, nr.getMinimumNumber());        assertEquals(ten, nr.getMaximumNumber());                // not null        try {            new IntRange(five, null);            fail();        } catch (IllegalArgumentException ex) {}        try {            new IntRange(null, five);            fail();        } catch (IllegalArgumentException ex) {}        try {            new IntRange(null, null);            fail();        } catch (IllegalArgumentException ex) {}    }    //--------------------------------------------------------------------------    public void testContainsNumber() {        assertEquals(false, tenToTwenty.containsNumber(null));        assertEquals(true, tenToTwenty.containsNumber(nonComparable));                assertEquals(false, tenToTwenty.containsNumber(five));        assertEquals(true, tenToTwenty.containsNumber(ten));        assertEquals(true, tenToTwenty.containsNumber(fifteen));        assertEquals(true, tenToTwenty.containsNumber(twenty));        assertEquals(false, tenToTwenty.containsNumber(twentyFive));                assertEquals(false, tenToTwenty.containsNumber(long8));        assertEquals(true, tenToTwenty.containsNumber(long10));        assertEquals(true, tenToTwenty.containsNumber(long12));        assertEquals(true, tenToTwenty.containsNumber(long20));        assertEquals(false, tenToTwenty.containsNumber(long21));                assertEquals(false, tenToTwenty.containsNumber(double8));        assertEquals(true, tenToTwenty.containsNumber(double10));        assertEquals(true, tenToTwenty.containsNumber(double12));        assertEquals(true, tenToTwenty.containsNumber(double20));        assertEquals(false, tenToTwenty.containsNumber(double21));                assertEquals(false, tenToTwenty.containsNumber(float8));        assertEquals(true, tenToTwenty.containsNumber(float10));        assertEquals(true, tenToTwenty.containsNumber(float12));        assertEquals(true, tenToTwenty.containsNumber(float20));        assertEquals(false, tenToTwenty.containsNumber(float21));    }    public void testContainsIntegerBig() {        IntRange big = new IntRange(Integer.MAX_VALUE, Integer.MAX_VALUE- 2);        assertEquals(true, big.containsInteger(Integer.MAX_VALUE - 1));        assertEquals(false, big.containsInteger(Integer.MAX_VALUE - 3));    }    //--------------------------------------------------------------------------    }
/* * Copyright 2002,2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.math;import junit.framework.Test;import junit.framework.TestSuite;/** * Test cases for the {@link FloatRange} class. * * @author Stephen Colebourne * @version $Id: FloatRangeTest.java,v 1.6 2004/02/18 23:02:38 ggregory Exp $ */public final class FloatRangeTest extends AbstractRangeTest {    public FloatRangeTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(FloatRangeTest.class);        suite.setName("FloatRange Tests");        return suite;    }        public void setUp() {        super.setUp();        tenToTwenty = new FloatRange(float10, float20);        otherRange = new NumberRange(ten, twenty);    }    protected Range createRange(Integer integer1, Integer integer2) {        return new FloatRange(integer1, integer2);    }    protected Range createRange(Integer integer) {        return new NumberRange(integer);    }        //--------------------------------------------------------------------------    public void testConstructor1a() {        FloatRange nr = new FloatRange(8f);        assertEquals(float8, nr.getMinimumNumber());        assertEquals(float8, nr.getMaximumNumber());                try {            new FloatRange(Float.NaN);            fail();        } catch (IllegalArgumentException ex) {}    }        public void testConstructor1b() {        FloatRange nr = new FloatRange(float8);        assertSame(float8, nr.getMinimumNumber());        assertSame(float8, nr.getMaximumNumber());                Range r = new FloatRange(nonComparable);                try {            new FloatRange(null);            fail();        } catch (IllegalArgumentException ex) {}        try {            new FloatRange(new Double(Double.NaN));            fail();        } catch (IllegalArgumentException ex) {}    }        public void testConstructor2a() {        FloatRange nr = new FloatRange(8f, 10f);        assertEquals(float8, nr.getMinimumNumber());        assertEquals(float10, nr.getMaximumNumber());                nr = new FloatRange(10f, 8f);        assertEquals(float8, nr.getMinimumNumber());        assertEquals(float10, nr.getMaximumNumber());                try {            new FloatRange(Float.NaN, 8f);            fail();        } catch (IllegalArgumentException ex) {}    }    public void testConstructor2b() {        FloatRange nr = new FloatRange(float8, float10);        assertSame(float8, nr.getMinimumNumber());        assertSame(float10, nr.getMaximumNumber());                nr = new FloatRange(float10, float8);        assertSame(float8, nr.getMinimumNumber());        assertSame(float10, nr.getMaximumNumber());                nr = new FloatRange(float8, float10);        assertSame(float8, nr.getMinimumNumber());        assertEquals(float10, nr.getMaximumNumber());                // not null        try {            new FloatRange(float8, null);            fail();        } catch (IllegalArgumentException ex) {}        try {            new FloatRange(null, float8);            fail();        } catch (IllegalArgumentException ex) {}        try {            new FloatRange(null, null);            fail();        } catch (IllegalArgumentException ex) {}                try {            new FloatRange(new Double(Double.NaN), float10);            fail();        } catch (IllegalArgumentException ex) {}    }    //--------------------------------------------------------------------------    public void testContainsNumber() {        assertEquals(false, tenToTwenty.containsNumber(null));        assertEquals(true, tenToTwenty.containsNumber(nonComparable));                assertEquals(false, tenToTwenty.containsNumber(five));        assertEquals(true, tenToTwenty.containsNumber(ten));        assertEquals(true, tenToTwenty.containsNumber(fifteen));        assertEquals(true, tenToTwenty.containsNumber(twenty));        assertEquals(false, tenToTwenty.containsNumber(twentyFive));                assertEquals(false, tenToTwenty.containsNumber(long8));        assertEquals(true, tenToTwenty.containsNumber(long10));        assertEquals(true, tenToTwenty.containsNumber(long12));        assertEquals(true, tenToTwenty.containsNumber(long20));        assertEquals(false, tenToTwenty.containsNumber(long21));                assertEquals(false, tenToTwenty.containsNumber(double8));        assertEquals(true, tenToTwenty.containsNumber(double10));        assertEquals(true, tenToTwenty.containsNumber(double12));        assertEquals(true, tenToTwenty.containsNumber(double20));        assertEquals(false, tenToTwenty.containsNumber(double21));                assertEquals(false, tenToTwenty.containsNumber(float8));        assertEquals(true, tenToTwenty.containsNumber(float10));        assertEquals(true, tenToTwenty.containsNumber(float12));        assertEquals(true, tenToTwenty.containsNumber(float20));        assertEquals(false, tenToTwenty.containsNumber(float21));    }    public void testToString() {        String str = tenToTwenty.toString();        assertEquals("Range[10.0,20.0]", str);        assertSame(str, tenToTwenty.toString());        assertEquals("Range[-20.0,-10.0]", createRange(new Integer(-20), new Integer(-10)).toString());    }        //--------------------------------------------------------------------------    }
/* * Copyright 2002,2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.math;import junit.framework.TestCase;/** * Test cases for the {@link Range} classes. * * @author Stephen Colebourne * @version $Id: AbstractRangeTest.java,v 1.6 2004/02/18 23:02:38 ggregory Exp $ */public abstract class AbstractRangeTest extends TestCase {    protected Range tenToTwenty;    protected Range otherRange;        protected Integer five;    protected Integer ten;    protected Integer twelve;    protected Integer fifteen;    protected Integer twenty;    protected Integer twentyFive;    protected Long long8;    protected Long long10;    protected Long long12;    protected Long long20;    protected Long long21;    protected Double double8;    protected Double double10;    protected Double double12;    protected Double double20;    protected Double double21;    protected Float float8;    protected Float float10;    protected Float float12;    protected Float float20;    protected Float float21;        private static class InnerNumber extends Number {        public double doubleValue() {            return 12d;        }        public float floatValue() {            return 12f;        }        public int intValue() {            return 12;        }        public long longValue() {            return 12L;        }    }        protected InnerNumber nonComparable = new InnerNumber();    public AbstractRangeTest(String name) {        super(name);    }    public void setUp() {        five        = new Integer(5);        ten         = new Integer(10);        twelve      = new Integer(12);        fifteen     = new Integer(15);        twenty      = new Integer(20);        twentyFive  = new Integer(25);        long8       = new Long(8);        long10      = new Long(10);        long12      = new Long(12);        long20      = new Long(20);        long21      = new Long(21);        double8     = new Double(8);        double10    = new Double(10);        double12    = new Double(12);        double20    = new Double(20);        double21    = new Double(21);        float8      = new Float(8);        float10     = new Float(10);        float12     = new Float(12);        float20     = new Float(20);        float21     = new Float(21);    }    //--------------------------------------------------------------------------    public void testGetMinimum() {        assertEquals(10L, tenToTwenty.getMinimumLong());        assertEquals(10, tenToTwenty.getMinimumInteger());        assertEquals(10d, tenToTwenty.getMinimumDouble(), 0.00001d);        assertEquals(10f, tenToTwenty.getMinimumFloat(), 0.00001f);    }        public void testGetMaximum() {        assertEquals(20L, tenToTwenty.getMaximumLong());        assertEquals(20, tenToTwenty.getMaximumInteger());        assertEquals(20d, tenToTwenty.getMaximumDouble(), 0.00001d);        assertEquals(20f, tenToTwenty.getMaximumFloat(), 0.00001f);    }    //--------------------------------------------------------------------------    public void testContainsLong() {        assertEquals(false, tenToTwenty.containsLong(null));        assertEquals(true, tenToTwenty.containsLong(nonComparable));                assertEquals(false, tenToTwenty.containsLong(five));        assertEquals(true, tenToTwenty.containsLong(ten));        assertEquals(true, tenToTwenty.containsLong(fifteen));        assertEquals(true, tenToTwenty.containsLong(twenty));        assertEquals(false, tenToTwenty.containsLong(twentyFive));                assertEquals(false, tenToTwenty.containsLong(long8));        assertEquals(true, tenToTwenty.containsLong(long10));        assertEquals(true, tenToTwenty.containsLong(long12));        assertEquals(true, tenToTwenty.containsLong(long20));        assertEquals(false, tenToTwenty.containsLong(long21));                assertEquals(false, tenToTwenty.containsLong(double8));        assertEquals(true, tenToTwenty.containsLong(double10));        assertEquals(true, tenToTwenty.containsLong(double12));        assertEquals(true, tenToTwenty.containsLong(double20));        assertEquals(false, tenToTwenty.containsLong(double21));                assertEquals(false, tenToTwenty.containsLong(float8));        assertEquals(true, tenToTwenty.containsLong(float10));        assertEquals(true, tenToTwenty.containsLong(float12));        assertEquals(true, tenToTwenty.containsLong(float20));        assertEquals(false, tenToTwenty.containsLong(float21));                assertEquals(false, tenToTwenty.containsLong(9L));        assertEquals(true, tenToTwenty.containsLong(10L));        assertEquals(true, tenToTwenty.containsLong(15L));        assertEquals(true, tenToTwenty.containsLong(20L));        assertEquals(false, tenToTwenty.containsLong(21L));    }            public void testContainsInteger() {        assertEquals(false, tenToTwenty.containsInteger(null));        assertEquals(true, tenToTwenty.containsInteger(nonComparable));                assertEquals(false, tenToTwenty.containsInteger(five));        assertEquals(true, tenToTwenty.containsInteger(ten));        assertEquals(true, tenToTwenty.containsInteger(fifteen));        assertEquals(true, tenToTwenty.containsInteger(twenty));        assertEquals(false, tenToTwenty.containsInteger(twentyFive));                assertEquals(false, tenToTwenty.containsInteger(long8));        assertEquals(true, tenToTwenty.containsInteger(long10));        assertEquals(true, tenToTwenty.containsInteger(long12));        assertEquals(true, tenToTwenty.containsInteger(long20));        assertEquals(false, tenToTwenty.containsInteger(long21));                assertEquals(false, tenToTwenty.containsInteger(double8));        assertEquals(true, tenToTwenty.containsInteger(double10));        assertEquals(true, tenToTwenty.containsInteger(double12));        assertEquals(true, tenToTwenty.containsInteger(double20));        assertEquals(false, tenToTwenty.containsInteger(double21));                assertEquals(false, tenToTwenty.containsInteger(float8));        assertEquals(true, tenToTwenty.containsInteger(float10));        assertEquals(true, tenToTwenty.containsInteger(float12));        assertEquals(true, tenToTwenty.containsInteger(float20));        assertEquals(false, tenToTwenty.containsInteger(float21));                assertEquals(false, tenToTwenty.containsInteger(9));        assertEquals(true, tenToTwenty.containsInteger(10));        assertEquals(true, tenToTwenty.containsInteger(15));        assertEquals(true, tenToTwenty.containsInteger(20));        assertEquals(false, tenToTwenty.containsInteger(21));    }    public void testContainsDouble() {        assertEquals(false, tenToTwenty.containsDouble(null));        assertEquals(true, tenToTwenty.containsDouble(nonComparable));                assertEquals(false, tenToTwenty.containsDouble(five));        assertEquals(true, tenToTwenty.containsDouble(ten));        assertEquals(true, tenToTwenty.containsDouble(fifteen));        assertEquals(true, tenToTwenty.containsDouble(twenty));        assertEquals(false, tenToTwenty.containsDouble(twentyFive));                assertEquals(false, tenToTwenty.containsDouble(long8));        assertEquals(true, tenToTwenty.containsDouble(long10));        assertEquals(true, tenToTwenty.containsDouble(long12));        assertEquals(true, tenToTwenty.containsDouble(long20));        assertEquals(false, tenToTwenty.containsDouble(long21));                assertEquals(false, tenToTwenty.containsDouble(double8));        assertEquals(true, tenToTwenty.containsDouble(double10));        assertEquals(true, tenToTwenty.containsDouble(double12));        assertEquals(true, tenToTwenty.containsDouble(double20));        assertEquals(false, tenToTwenty.containsDouble(double21));                assertEquals(false, tenToTwenty.containsDouble(float8));        assertEquals(true, tenToTwenty.containsDouble(float10));        assertEquals(true, tenToTwenty.containsDouble(float12));        assertEquals(true, tenToTwenty.containsDouble(float20));        assertEquals(false, tenToTwenty.containsDouble(float21));                assertEquals(false, tenToTwenty.containsDouble(9d));        assertEquals(true, tenToTwenty.containsDouble(10d));        assertEquals(true, tenToTwenty.containsDouble(15d));        assertEquals(true, tenToTwenty.containsDouble(20d));        assertEquals(false, tenToTwenty.containsDouble(21d));    }    public void testContainsFloat() {        assertEquals(false, tenToTwenty.containsFloat(null));        assertEquals(true, tenToTwenty.containsFloat(nonComparable));                assertEquals(false, tenToTwenty.containsFloat(five));        assertEquals(true, tenToTwenty.containsFloat(ten));        assertEquals(true, tenToTwenty.containsFloat(fifteen));        assertEquals(true, tenToTwenty.containsFloat(twenty));        assertEquals(false, tenToTwenty.containsFloat(twentyFive));                assertEquals(false, tenToTwenty.containsFloat(long8));        assertEquals(true, tenToTwenty.containsFloat(long10));        assertEquals(true, tenToTwenty.containsFloat(long12));        assertEquals(true, tenToTwenty.containsFloat(long20));        assertEquals(false, tenToTwenty.containsFloat(long21));                assertEquals(false, tenToTwenty.containsFloat(double8));        assertEquals(true, tenToTwenty.containsFloat(double10));        assertEquals(true, tenToTwenty.containsFloat(double12));        assertEquals(true, tenToTwenty.containsFloat(double20));        assertEquals(false, tenToTwenty.containsFloat(double21));                assertEquals(false, tenToTwenty.containsFloat(float8));        assertEquals(true, tenToTwenty.containsFloat(float10));        assertEquals(true, tenToTwenty.containsFloat(float12));        assertEquals(true, tenToTwenty.containsFloat(float20));        assertEquals(false, tenToTwenty.containsFloat(float21));                assertEquals(false, tenToTwenty.containsFloat(9f));        assertEquals(true, tenToTwenty.containsFloat(10f));        assertEquals(true, tenToTwenty.containsFloat(15f));        assertEquals(true, tenToTwenty.containsFloat(20f));        assertEquals(false, tenToTwenty.containsFloat(21f));    }    //--------------------------------------------------------------------------    public void testContainsRange() {        assertEquals(false, tenToTwenty.containsRange(null));        assertEquals(false, tenToTwenty.containsRange(createRange(five, five)));        assertEquals(false, tenToTwenty.containsRange(createRange(five, ten)));        assertEquals(false, tenToTwenty.containsRange(createRange(five, twelve)));        assertEquals(false, tenToTwenty.containsRange(createRange(five, fifteen)));        assertEquals(false, tenToTwenty.containsRange(createRange(five, twenty)));        assertEquals(false, tenToTwenty.containsRange(createRange(five, twentyFive)));                assertEquals(true, tenToTwenty.containsRange(createRange(ten, ten)));        assertEquals(true, tenToTwenty.containsRange(createRange(ten, twelve)));        assertEquals(true, tenToTwenty.containsRange(createRange(ten, fifteen)));        assertEquals(true, tenToTwenty.containsRange(createRange(ten, twenty)));        assertEquals(false, tenToTwenty.containsRange(createRange(ten, twentyFive)));                assertEquals(true, tenToTwenty.containsRange(createRange(twelve, twelve)));        assertEquals(true, tenToTwenty.containsRange(createRange(twelve, fifteen)));        assertEquals(true, tenToTwenty.containsRange(createRange(twelve, twenty)));        assertEquals(false, tenToTwenty.containsRange(createRange(twelve, twentyFive)));                assertEquals(true, tenToTwenty.containsRange(createRange(fifteen, fifteen)));        assertEquals(true, tenToTwenty.containsRange(createRange(fifteen, twenty)));        assertEquals(false, tenToTwenty.containsRange(createRange(fifteen, twentyFive)));                assertEquals(true, tenToTwenty.containsRange(createRange(twenty, twenty)));        assertEquals(false, tenToTwenty.containsRange(createRange(twenty, twentyFive)));                assertEquals(false, tenToTwenty.containsRange(createRange(twentyFive, twentyFive)));    }    public void testOverlapsRange() {        assertEquals(false, tenToTwenty.overlapsRange(null));        assertEquals(false, tenToTwenty.overlapsRange(createRange(five, five)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, ten)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twelve)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, fifteen)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twenty)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twentyFive)));                assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, ten)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twelve)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, fifteen)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twenty)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twentyFive)));                assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twelve)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, fifteen)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twenty)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twentyFive)));                assertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, fifteen)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, twenty)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, twentyFive)));                assertEquals(true, tenToTwenty.overlapsRange(createRange(twenty, twenty)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(twenty, twentyFive)));                assertEquals(false, tenToTwenty.overlapsRange(createRange(twentyFive, twentyFive)));    }    //--------------------------------------------------------------------------    public void testEquals() {        assertEquals(false, tenToTwenty.equals(createRange(ten, fifteen)));        assertEquals(false, tenToTwenty.equals(createRange(ten, twentyFive)));                assertEquals(false, tenToTwenty.equals(createRange(fifteen, twenty)));        assertEquals(false, tenToTwenty.equals(createRange(five, twenty)));                assertEquals(false, tenToTwenty.equals(createRange(five, ten)));        assertEquals(false, tenToTwenty.equals(createRange(ten)));        assertEquals(true, tenToTwenty.equals(tenToTwenty));        assertEquals(true, tenToTwenty.equals(createRange(ten, twenty)));        assertEquals(true, tenToTwenty.equals(createRange(twenty, ten)));                assertEquals(false, tenToTwenty.equals(null));        assertEquals(false, tenToTwenty.equals(new Object()));        assertEquals(false, tenToTwenty.equals(otherRange));    }    public void testHashCode() {        assertEquals(tenToTwenty.hashCode(), tenToTwenty.hashCode());        assertTrue(tenToTwenty.hashCode() != 0);    }        public void testToString() {        String str = tenToTwenty.toString();        assertEquals("Range[10,20]", str);        assertSame(str, tenToTwenty.toString());        assertEquals("Range[-20,-10]", createRange(new Integer(-20), new Integer(-10)).toString());    }    protected abstract Range createRange(Integer integer);    protected abstract Range createRange(Integer integer1, Integer integer2);}
/* * Copyright 2002,2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.math;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Test cases for the {@link Fraction} classes. * * @author Stephen Colebourne * @version $Id: FractionTest.java,v 1.6 2004/02/18 23:02:38 ggregory Exp $ */public class FractionTest extends TestCase {        private static final int SKIP = 53;    public FractionTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(FractionTest.class);        suite.setName("Fraction Tests");        return suite;    }        public void setUp() {    }    //--------------------------------------------------------------------------        public void testConstants() {        assertEquals(0, Fraction.ZERO.getNumerator());        assertEquals(1, Fraction.ZERO.getDenominator());                assertEquals(1, Fraction.ONE.getNumerator());        assertEquals(1, Fraction.ONE.getDenominator());                assertEquals(1, Fraction.ONE_HALF.getNumerator());        assertEquals(2, Fraction.ONE_HALF.getDenominator());                assertEquals(1, Fraction.ONE_THIRD.getNumerator());        assertEquals(3, Fraction.ONE_THIRD.getDenominator());                assertEquals(2, Fraction.TWO_THIRDS.getNumerator());        assertEquals(3, Fraction.TWO_THIRDS.getDenominator());                assertEquals(1, Fraction.ONE_QUARTER.getNumerator());        assertEquals(4, Fraction.ONE_QUARTER.getDenominator());                assertEquals(2, Fraction.TWO_QUARTERS.getNumerator());        assertEquals(4, Fraction.TWO_QUARTERS.getDenominator());                assertEquals(3, Fraction.THREE_QUARTERS.getNumerator());        assertEquals(4, Fraction.THREE_QUARTERS.getDenominator());                assertEquals(1, Fraction.ONE_FIFTH.getNumerator());        assertEquals(5, Fraction.ONE_FIFTH.getDenominator());                assertEquals(2, Fraction.TWO_FIFTHS.getNumerator());        assertEquals(5, Fraction.TWO_FIFTHS.getDenominator());                assertEquals(3, Fraction.THREE_FIFTHS.getNumerator());        assertEquals(5, Fraction.THREE_FIFTHS.getDenominator());                assertEquals(4, Fraction.FOUR_FIFTHS.getNumerator());        assertEquals(5, Fraction.FOUR_FIFTHS.getDenominator());    }        public void testFactory_int_int() {        Fraction f = null;                // zero        f = Fraction.getFraction(0, 1);        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getFraction(0, 2);        assertEquals(0, f.getNumerator());        assertEquals(2, f.getDenominator());                // normal        f = Fraction.getFraction(1, 1);        assertEquals(1, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getFraction(2, 1);        assertEquals(2, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getFraction(23, 345);        assertEquals(23, f.getNumerator());        assertEquals(345, f.getDenominator());                // improper        f = Fraction.getFraction(22, 7);        assertEquals(22, f.getNumerator());        assertEquals(7, f.getDenominator());                // negatives        f = Fraction.getFraction(-6, 10);        assertEquals(-6, f.getNumerator());        assertEquals(10, f.getDenominator());                f = Fraction.getFraction(6, -10);        assertEquals(-6, f.getNumerator());        assertEquals(10, f.getDenominator());                f = Fraction.getFraction(-6, -10);        assertEquals(6, f.getNumerator());        assertEquals(10, f.getDenominator());                // zero denominator        try {            f = Fraction.getFraction(1, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(2, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(-3, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}    }    public void testFactory_int_int_int() {        Fraction f = null;                // zero        f = Fraction.getFraction(0, 0, 2);        assertEquals(0, f.getNumerator());        assertEquals(2, f.getDenominator());                f = Fraction.getFraction(2, 0, 2);        assertEquals(4, f.getNumerator());        assertEquals(2, f.getDenominator());                f = Fraction.getFraction(0, 1, 2);        assertEquals(1, f.getNumerator());        assertEquals(2, f.getDenominator());                // normal        f = Fraction.getFraction(1, 1, 2);        assertEquals(3, f.getNumerator());        assertEquals(2, f.getDenominator());                // negatives        try {            f = Fraction.getFraction(1, -6, -10);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        try {            f = Fraction.getFraction(1, -6, -10);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        try {            f = Fraction.getFraction(1, -6, -10);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                // negative whole        f = Fraction.getFraction(-1, 6, 10);        assertEquals(-16, f.getNumerator());        assertEquals(10, f.getDenominator());                try {            f = Fraction.getFraction(-1, -6, 10);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        try {            f = Fraction.getFraction(-1, 6, -10);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(-1, -6, -10);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                // zero denominator        try {            f = Fraction.getFraction(0, 1, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(1, 2, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(-1, -3, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(Integer.MAX_VALUE, 1, 2);             fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(-Integer.MAX_VALUE, 1, 2);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}    }    public void testReducedFactory_int_int() {        Fraction f = null;                // zero        f = Fraction.getReducedFraction(0, 1);        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                // normal        f = Fraction.getReducedFraction(1, 1);        assertEquals(1, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getReducedFraction(2, 1);        assertEquals(2, f.getNumerator());        assertEquals(1, f.getDenominator());                // improper        f = Fraction.getReducedFraction(22, 7);        assertEquals(22, f.getNumerator());        assertEquals(7, f.getDenominator());                // negatives        f = Fraction.getReducedFraction(-6, 10);        assertEquals(-3, f.getNumerator());        assertEquals(5, f.getDenominator());                f = Fraction.getReducedFraction(6, -10);        assertEquals(-3, f.getNumerator());        assertEquals(5, f.getDenominator());                f = Fraction.getReducedFraction(-6, -10);        assertEquals(3, f.getNumerator());        assertEquals(5, f.getDenominator());                // zero denominator        try {            f = Fraction.getReducedFraction(1, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getReducedFraction(2, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getReducedFraction(-3, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        // reduced                f = Fraction.getReducedFraction(0, 2);        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getReducedFraction(2, 2);        assertEquals(1, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getReducedFraction(2, 4);        assertEquals(1, f.getNumerator());        assertEquals(2, f.getDenominator());                f = Fraction.getReducedFraction(15, 10);        assertEquals(3, f.getNumerator());        assertEquals(2, f.getDenominator());                f = Fraction.getReducedFraction(121, 22);        assertEquals(11, f.getNumerator());        assertEquals(2, f.getDenominator());    }    public void testFactory_double() {        Fraction f = null;                try {            f = Fraction.getFraction(Double.NaN);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(Double.POSITIVE_INFINITY);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(Double.NEGATIVE_INFINITY);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction((double) Integer.MAX_VALUE + 1);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                // zero        f = Fraction.getFraction(0.0d);        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                // one        f = Fraction.getFraction(1.0d);        assertEquals(1, f.getNumerator());        assertEquals(1, f.getDenominator());                // one half        f = Fraction.getFraction(0.5d);        assertEquals(1, f.getNumerator());        assertEquals(2, f.getDenominator());                // negative        f = Fraction.getFraction(-0.875d);        assertEquals(-7, f.getNumerator());        assertEquals(8, f.getDenominator());                // over 1        f = Fraction.getFraction(1.25d);        assertEquals(5, f.getNumerator());        assertEquals(4, f.getDenominator());                // two thirds        f = Fraction.getFraction(0.66666d);        assertEquals(2, f.getNumerator());        assertEquals(3, f.getDenominator());                // small        f = Fraction.getFraction(1.0d/10001d);        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                // normal        Fraction f2 = null;        int remainder, number1, number2 = 0;        for (int i = 1; i <= 100; i++) {  // denominator            for (int j = 1; j <= i; j++) {  // numerator                try {                    f = Fraction.getFraction((double) j / (double) i);                } catch (ArithmeticException ex) {                    System.err.println(j + " " + i);                    throw ex;                }                f2 = Fraction.getReducedFraction(j, i);                assertEquals(f2.getNumerator(), f.getNumerator());                assertEquals(f2.getDenominator(), f.getDenominator());            }        }        // save time by skipping some tests!  (        for (int i = 1001; i <= 10000; i+=SKIP) {  // denominator            for (int j = 1; j <= i; j++) {  // numerator                try {                    f = Fraction.getFraction((double) j / (double) i);                } catch (ArithmeticException ex) {                    System.err.println(j + " " + i);                    throw ex;                }                f2 = Fraction.getReducedFraction(j, i);                assertEquals(f2.getNumerator(), f.getNumerator());                assertEquals(f2.getDenominator(), f.getDenominator());            }        }    }    public void testFactory_String() {        try {            Fraction.getFraction(null);            fail("expecting ArithmeticException");        } catch (IllegalArgumentException ex) {}    }            public void testFactory_String_double() {        Fraction f = null;                f = Fraction.getFraction("0.0");        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getFraction("0.2");        assertEquals(1, f.getNumerator());        assertEquals(5, f.getDenominator());                f = Fraction.getFraction("0.5");        assertEquals(1, f.getNumerator());        assertEquals(2, f.getDenominator());                f = Fraction.getFraction("0.66666");        assertEquals(2, f.getNumerator());        assertEquals(3, f.getDenominator());                try {            f = Fraction.getFraction("2.3R");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction("2147483648"); // too big            fail("Expecting NumberFormatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction(".");        } catch (NumberFormatException ex) {}    }    public void testFactory_String_proper() {        Fraction f = null;                f = Fraction.getFraction("0 0/1");        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getFraction("1 1/5");        assertEquals(6, f.getNumerator());        assertEquals(5, f.getDenominator());                f = Fraction.getFraction("7 1/2");        assertEquals(15, f.getNumerator());        assertEquals(2, f.getDenominator());                f = Fraction.getFraction("1 2/4");        assertEquals(6, f.getNumerator());        assertEquals(4, f.getDenominator());                try {            f = Fraction.getFraction("2 3");            fail("expecting NumberFomatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction("a 3");            fail("expecting NumberFomatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction("2 b/4");            fail("expecting NumberFomatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction("2 ");            fail("expecting NumberFomatException");        } catch (NumberFormatException ex) {}        try {            f = Fraction.getFraction(" 3");            fail("expecting NumberFomatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction(" ");            fail("expecting NumberFomatException");        } catch (NumberFormatException ex) {}    }    public void testFactory_String_improper() {        Fraction f = null;                f = Fraction.getFraction("0/1");        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getFraction("1/5");        assertEquals(1, f.getNumerator());        assertEquals(5, f.getDenominator());                f = Fraction.getFraction("1/2");        assertEquals(1, f.getNumerator());        assertEquals(2, f.getDenominator());                f = Fraction.getFraction("2/3");        assertEquals(2, f.getNumerator());        assertEquals(3, f.getDenominator());                f = Fraction.getFraction("7/3");        assertEquals(7, f.getNumerator());        assertEquals(3, f.getDenominator());                f = Fraction.getFraction("2/4");        assertEquals(2, f.getNumerator());        assertEquals(4, f.getDenominator());                try {            f = Fraction.getFraction("2/d");            fail("expecting NumberFomatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction("2e/3");            fail("expecting NumberFomatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction("2/");            fail("expecting NumberFomatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction("/");            fail("expecting NumberFomatException");        } catch (NumberFormatException ex) {}    }    public void testGets() {        Fraction f = null;                f = Fraction.getFraction(3, 5, 6);        assertEquals(23, f.getNumerator());        assertEquals(3, f.getProperWhole());        assertEquals(5, f.getProperNumerator());        assertEquals(6, f.getDenominator());                f = Fraction.getFraction(-3, 5, 6);        assertEquals(-23, f.getNumerator());        assertEquals(-3, f.getProperWhole());        assertEquals(5, f.getProperNumerator());        assertEquals(6, f.getDenominator());    }                public void testConversions() {        Fraction f = null;                f = Fraction.getFraction(3, 7, 8);        assertEquals(3, f.intValue());        assertEquals(3L, f.longValue());        assertEquals(3.875f, f.floatValue(), 0.00001f);        assertEquals(3.875d, f.doubleValue(), 0.00001d);    }        public void testReduce() {        Fraction f = null;                f = Fraction.getFraction(50, 75);        f = f.reduce();        assertEquals(2, f.getNumerator());        assertEquals(3, f.getDenominator());    }        public void testInvert() {        Fraction f = null;                f = Fraction.getFraction(50, 75);        f = f.invert();        assertEquals(75, f.getNumerator());        assertEquals(50, f.getDenominator());                f = Fraction.getFraction(4, 3);        f = f.invert();        assertEquals(3, f.getNumerator());        assertEquals(4, f.getDenominator());                f = Fraction.getFraction(0, 3);        try {            f = f.invert();        } catch (ArithmeticException ex) {}    }        public void testNegate() {        Fraction f = null;                f = Fraction.getFraction(50, 75);        f = f.negate();        assertEquals(-50, f.getNumerator());        assertEquals(75, f.getDenominator());                f = Fraction.getFraction(-50, 75);        f = f.negate();        assertEquals(50, f.getNumerator());        assertEquals(75, f.getDenominator());    }        public void testAbs() {        Fraction f = null;                f = Fraction.getFraction(50, 75);        f = f.abs();        assertEquals(50, f.getNumerator());        assertEquals(75, f.getDenominator());                f = Fraction.getFraction(-50, 75);        f = f.abs();        assertEquals(50, f.getNumerator());        assertEquals(75, f.getDenominator());    }        public void testPow() {        Fraction f = null;                f = Fraction.getFraction(3, 5);        assertEquals(Fraction.ONE, f.pow(0));                f = Fraction.getFraction(3, 5);        assertSame(f, f.pow(1));        f = Fraction.getFraction(3, 5);        f = f.pow(2);        assertEquals(9, f.getNumerator());        assertEquals(25, f.getDenominator());                f = Fraction.getFraction(3, 5);        f = f.pow(3);        assertEquals(27, f.getNumerator());        assertEquals(125, f.getDenominator());                f = Fraction.getFraction(3, 5);        f = f.pow(-1);        assertEquals(5, f.getNumerator());        assertEquals(3, f.getDenominator());                f = Fraction.getFraction(3, 5);        f = f.pow(-2);        assertEquals(25, f.getNumerator());        assertEquals(9, f.getDenominator());                f = Fraction.getFraction(Integer.MAX_VALUE);        try {            f = f.pow(2);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}    }        public void testAdd() {        Fraction f = null;        Fraction f1 = null;        Fraction f2 = null;                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(1, 5);        f = f1.add(f2);        assertEquals(4, f.getNumerator());        assertEquals(5, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(2, 5);        f = f1.add(f2);        assertEquals(1, f.getNumerator());        assertEquals(1, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(3, 5);        f = f1.add(f2);        assertEquals(6, f.getNumerator());        assertEquals(5, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(-4, 5);        f = f1.add(f2);        assertEquals(-1, f.getNumerator());        assertEquals(5, f.getDenominator());                f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);        f2 = Fraction.ONE;        f = f1.add(f2);        assertEquals(Integer.MAX_VALUE, f.getNumerator());        assertEquals(1, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(1, 2);        f = f1.add(f2);        assertEquals(11, f.getNumerator());        assertEquals(10, f.getDenominator());                f1 = Fraction.getFraction(3, 8);        f2 = Fraction.getFraction(1, 6);        f = f1.add(f2);        assertEquals(13, f.getNumerator());        assertEquals(24, f.getDenominator());                f1 = Fraction.getFraction(0, 5);        f2 = Fraction.getFraction(1, 5);        f = f1.add(f2);        assertSame(f2, f);        f = f2.add(f1);        assertSame(f2, f);                try {            f.add(null);            fail("expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {}                f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);        f2 = Fraction.ONE;        f = f1.add(f2);        assertEquals(Integer.MAX_VALUE, f.getNumerator());        assertEquals(1, f.getDenominator());                try {            f = f.add(Fraction.ONE); // should overflow            fail("expecting ArithmeticException but got: " + f.toString());        } catch (ArithmeticException ex) {}                try {            f= Fraction.getFraction(-Integer.MAX_VALUE, 1);            f = f.add(f);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                }                public void testSubtract() {        Fraction f = null;        Fraction f1 = null;        Fraction f2 = null;                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(1, 5);        f = f1.subtract(f2);        assertEquals(2, f.getNumerator());        assertEquals(5, f.getDenominator());                f1 = Fraction.getFraction(7, 5);        f2 = Fraction.getFraction(2, 5);        f = f1.subtract(f2);        assertEquals(1, f.getNumerator());        assertEquals(1, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(3, 5);        f = f1.subtract(f2);        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(-4, 5);        f = f1.subtract(f2);        assertEquals(7, f.getNumerator());        assertEquals(5, f.getDenominator());                f1 = Fraction.getFraction(0, 5);        f2 = Fraction.getFraction(4, 5);        f = f1.subtract(f2);        assertEquals(-4, f.getNumerator());        assertEquals(5, f.getDenominator());                f1 = Fraction.getFraction(0, 5);        f2 = Fraction.getFraction(-4, 5);        f = f1.subtract(f2);        assertEquals(4, f.getNumerator());        assertEquals(5, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(1, 2);        f = f1.subtract(f2);        assertEquals(1, f.getNumerator());        assertEquals(10, f.getDenominator());                f1 = Fraction.getFraction(0, 5);        f2 = Fraction.getFraction(1, 5);        f = f2.subtract(f1);        assertSame(f2, f);                try {            f.subtract(null);            fail("expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {}                try {            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);            f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1);            f = f1.subtract(f2);            fail("expecting ArithmeticException");  //should overflow        } catch (ArithmeticException ex) {}                }                public void testMultiply() {        Fraction f = null;        Fraction f1 = null;        Fraction f2 = null;                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(2, 5);        f = f1.multiplyBy(f2);        assertEquals(6, f.getNumerator());        assertEquals(25, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(-2, 5);        f = f1.multiplyBy(f2);        assertEquals(-6, f.getNumerator());        assertEquals(25, f.getDenominator());                f1 = Fraction.getFraction(-3, 5);        f2 = Fraction.getFraction(-2, 5);        f = f1.multiplyBy(f2);        assertEquals(6, f.getNumerator());        assertEquals(25, f.getDenominator());                f1 = Fraction.getFraction(0, 5);        f2 = Fraction.getFraction(2, 7);        f = f1.multiplyBy(f2);        assertSame(Fraction.ZERO, f);                f1 = Fraction.getFraction(2, 7);        f2 = Fraction.ONE;        f = f1.multiplyBy(f2);        assertEquals(2, f.getNumerator());        assertEquals(7, f.getDenominator());                try {            f.multiplyBy(null);            fail("expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {}                try {            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);            f = f1.multiplyBy(f1);  // should overflow            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                    try {            f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);            f = f1.multiplyBy(f1);  // should overflow            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}    }                public void testDivide() {        Fraction f = null;        Fraction f1 = null;        Fraction f2 = null;                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(2, 5);        f = f1.divideBy(f2);        assertEquals(3, f.getNumerator());        assertEquals(2, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.ZERO;        try {            f = f1.divideBy(f2);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                f1 = Fraction.getFraction(0, 5);        f2 = Fraction.getFraction(2, 7);        f = f1.divideBy(f2);        assertSame(Fraction.ZERO, f);                f1 = Fraction.getFraction(2, 7);        f2 = Fraction.ONE;        f = f1.divideBy(f2);        assertEquals(2, f.getNumerator());        assertEquals(7, f.getDenominator());                f1 = Fraction.getFraction(1, Integer.MAX_VALUE);        f = f1.divideBy(f1);          assertEquals(1, f.getNumerator());        assertEquals(1, f.getDenominator());                try {            f.divideBy(null);            fail("IllegalArgumentException");        } catch (IllegalArgumentException ex) {}                try {            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);            f = f1.divideBy(f1.invert());  // should overflow            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        try {            f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);            f = f1.divideBy(f1.invert());  // should overflow            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}    }                public void testEquals() {        Fraction f1 = null;        Fraction f2 = null;                f1 = Fraction.getFraction(3, 5);        assertEquals(false, f1.equals(null));        assertEquals(false, f1.equals(new Object()));        assertEquals(false, f1.equals(new Integer(6)));                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(2, 5);        assertEquals(false, f1.equals(f2));        assertEquals(true, f1.equals(f1));        assertEquals(true, f2.equals(f2));                f2 = Fraction.getFraction(3, 5);        assertEquals(true, f1.equals(f2));                f2 = Fraction.getFraction(6, 10);        assertEquals(false, f1.equals(f2));    }        public void testHashCode() {        Fraction f1 = Fraction.getFraction(3, 5);        Fraction f2 = Fraction.getFraction(3, 5);                assertTrue(f1.hashCode() == f2.hashCode());                f2 = Fraction.getFraction(2, 5);        assertTrue(f1.hashCode() != f2.hashCode());                f2 = Fraction.getFraction(6, 10);        assertTrue(f1.hashCode() != f2.hashCode());    }        public void testCompareTo() {        Fraction f1 = null;        Fraction f2 = null;                f1 = Fraction.getFraction(3, 5);                try {            f1.compareTo(null);            fail("expecting NullPointerException");        } catch (NullPointerException ex) {}                try {            f1.compareTo(new Object());            fail("expecting ClassCastException");        } catch (ClassCastException ex) {}                f2 = Fraction.getFraction(2, 5);        assertTrue(f1.compareTo(f2) > 0);                f2 = Fraction.getFraction(4, 5);        assertTrue(f1.compareTo(f2) < 0);                f2 = Fraction.getFraction(3, 5);        assertTrue(f1.compareTo(f2) == 0);                f2 = Fraction.getFraction(6, 10);        assertTrue(f1.compareTo(f2) == 0);    }        public void testToString() {        Fraction f = null;        f = Fraction.getFraction(3, 5);        String str = f.toString();        assertEquals("3/5", str);        assertSame(str, f.toString());                f = Fraction.getFraction(7, 5);        assertEquals("7/5", f.toString());                        f = Fraction.getFraction(4, 2);        assertEquals("4/2", f.toString());                        f = Fraction.getFraction(0, 2);        assertEquals("0/2", f.toString());                        f = Fraction.getFraction(2, 2);        assertEquals("2/2", f.toString());            }        public void testToProperString() {        Fraction f = null;        f = Fraction.getFraction(3, 5);        String str = f.toProperString();        assertEquals("3/5", str);        assertSame(str, f.toProperString());                f = Fraction.getFraction(7, 5);        assertEquals("1 2/5", f.toProperString());                        f = Fraction.getFraction(14, 10);        assertEquals("1 4/10", f.toProperString());                        f = Fraction.getFraction(4, 2);        assertEquals("2", f.toProperString());                        f = Fraction.getFraction(0, 2);        assertEquals("0", f.toProperString());                        f = Fraction.getFraction(2, 2);        assertEquals("1", f.toProperString());                        f = Fraction.getFraction(-7, 5);        assertEquals("-1 2/5", f.toProperString());            }    }
/* * Copyright 2002,2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.math;import junit.framework.Test;import junit.framework.TestSuite;/** * Test cases for the {@link NumberRange} class. * * @author <a href="mailto:chrise@esha.com">Christopher Elkins</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Stephen Colebourne * @version $Id: NumberRangeTest.java,v 1.5 2004/02/18 23:02:38 ggregory Exp $ */public final class NumberRangeTest extends AbstractRangeTest {    public NumberRangeTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(NumberRangeTest.class);        suite.setName("NumberRange Tests");        return suite;    }        public void setUp() {        super.setUp();        tenToTwenty = new NumberRange(ten, twenty);        otherRange = new IntRange(ten, twenty);    }    protected Range createRange(Integer integer1, Integer integer2) {        return new NumberRange(integer1, integer2);    }    protected Range createRange(Integer integer) {        return new NumberRange(integer);    }    //--------------------------------------------------------------------------    public void testConstructor1() {        NumberRange nr = new NumberRange(five);        assertSame(five, nr.getMinimumNumber());        assertSame(five, nr.getMaximumNumber());                try {            new NumberRange(null);            fail();        } catch (IllegalArgumentException ex) {}        try {            new NumberRange(nonComparable);            fail();        } catch (IllegalArgumentException ex) {}    }        public void testConstructor2() {        NumberRange nr = new NumberRange(five, ten);        assertSame(five, nr.getMinimumNumber());        assertSame(ten, nr.getMaximumNumber());                nr = new NumberRange(ten, five);        assertSame(five, nr.getMinimumNumber());        assertSame(ten, nr.getMaximumNumber());                // not null        try {            new NumberRange(five, null);            fail();        } catch (IllegalArgumentException ex) {}        try {            new NumberRange(null, five);            fail();        } catch (IllegalArgumentException ex) {}        try {            new NumberRange(null, null);            fail();        } catch (IllegalArgumentException ex) {}                // no mixed types        try {            new NumberRange(five, long21);            fail();        } catch (IllegalArgumentException ex) {}                // must be comparable        try {            new NumberRange(nonComparable, nonComparable);            fail();        } catch (IllegalArgumentException ex) {}                // no double NaN        try {            new NumberRange(new Double(0), new Double(Double.NaN));            fail();        } catch (IllegalArgumentException ex) {}                try {            new NumberRange(new Double(Double.NaN), new Double(0));            fail();        } catch (IllegalArgumentException ex) {}                // no float NaN        try {            new NumberRange(new Float(0), new Float(Float.NaN));            fail();        } catch (IllegalArgumentException ex) {}                try {            new NumberRange(new Float(Float.NaN), new Float(0));            fail();        } catch (IllegalArgumentException ex) {}    }    //--------------------------------------------------------------------------    public void testContainsNumber() {        assertEquals(false, tenToTwenty.containsNumber(null));        assertEquals(false, tenToTwenty.containsNumber(five));        assertEquals(true, tenToTwenty.containsNumber(ten));        assertEquals(true, tenToTwenty.containsNumber(fifteen));        assertEquals(true, tenToTwenty.containsNumber(twenty));        assertEquals(false, tenToTwenty.containsNumber(twentyFive));                try {            tenToTwenty.containsNumber(long21);            fail();        } catch (IllegalArgumentException ex) {}    }    public void testContainsLongBig() {        // original NumberRange class failed this test        NumberRange big = new NumberRange(new Long(Long.MAX_VALUE), new Long(Long.MAX_VALUE- 2));        assertEquals(true, big.containsLong(Long.MAX_VALUE - 1));        assertEquals(false, big.containsLong(Long.MAX_VALUE - 3));    }    //--------------------------------------------------------------------------}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.math;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.math.BigDecimal;import java.math.BigInteger;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;import org.apache.commons.lang.SystemUtils;/** * Unit tests {@link org.apache.commons.lang.math.NumberUtils}. * * @author <a href="mailto:rand_mcneely@yahoo.com">Rand McNeely</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Eric Pugh * @author Phil Steitz * @author Stephen Colebourne * @author Matthew Hawthorne * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> * @version $Id: NumberUtilsTest.java,v 1.12 2004/02/18 23:22:30 ggregory Exp $ */public class NumberUtilsTest extends TestCase {    public NumberUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }        public static Test suite() {        TestSuite suite = new TestSuite(NumberUtilsTest.class);        suite.setName("NumberUtils Tests");        return suite;    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new NumberUtils());        Constructor[] cons = NumberUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(NumberUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(NumberUtils.class.getModifiers()));    }        //---------------------------------------------------------------------    /**     * Test for {@link NumberUtils#stringToInt(String)}.     */    public void testStringToIntString() {        assertTrue("stringToInt(String) 1 failed", NumberUtils.stringToInt("12345") == 12345);        assertTrue("stringToInt(String) 2 failed", NumberUtils.stringToInt("abc") == 0);        assertTrue("stringToInt(empty) failed", NumberUtils.stringToInt("") == 0);        assertTrue("stringToInt(null) failed", NumberUtils.stringToInt(null) == 0);    }    /**     * Test for {@link NumberUtils#toInt(String)}.     */    public void testToIntString() {        assertTrue("toInt(String) 1 failed", NumberUtils.toInt("12345") == 12345);        assertTrue("toInt(String) 2 failed", NumberUtils.toInt("abc") == 0);        assertTrue("toInt(empty) failed", NumberUtils.toInt("") == 0);        assertTrue("toInt(null) failed", NumberUtils.toInt(null) == 0);    }    /**     * Test for {@link NumberUtils#stringToInt(String, int)}.     */    public void testStringToIntStringI() {        assertTrue("stringToInt(String,int) 1 failed", NumberUtils.stringToInt("12345", 5) == 12345);        assertTrue("stringToInt(String,int) 2 failed", NumberUtils.stringToInt("1234.5", 5) == 5);    }    /**     * Test for {@link NumberUtils#toInt(String, int)}.     */    public void testToIntStringI() {        assertTrue("toInt(String,int) 1 failed", NumberUtils.toInt("12345", 5) == 12345);        assertTrue("toInt(String,int) 2 failed", NumberUtils.toInt("1234.5", 5) == 5);    }    /**     * Test for {@link NumberUtils#toLong(String)}.     */    public void testToLongString() {        assertTrue("toLong(String) 1 failed", NumberUtils.toLong("12345") == 12345l);        assertTrue("toLong(String) 2 failed", NumberUtils.toLong("abc") == 0l);        assertTrue("toLong(String) 3 failed", NumberUtils.toLong("1L") == 0l);        assertTrue("toLong(String) 4 failed", NumberUtils.toLong("1l") == 0l);        assertTrue("toLong(Long.MAX_VALUE) failed", NumberUtils.toLong(Long.MAX_VALUE+"") == Long.MAX_VALUE);        assertTrue("toLong(Long.MIN_VALUE) failed", NumberUtils.toLong(Long.MIN_VALUE+"") == Long.MIN_VALUE);        assertTrue("toLong(empty) failed", NumberUtils.toLong("") == 0l);        assertTrue("toLong(null) failed", NumberUtils.toLong(null) == 0l);    }    /**     * Test for {@link NumberUtils#toLong(String, long)}.     */    public void testToLongStringL() {        assertTrue("toLong(String,long) 1 failed", NumberUtils.toLong("12345", 5l) == 12345l);        assertTrue("toLong(String,long) 2 failed", NumberUtils.toLong("1234.5", 5l) == 5l);    }    /**     * Test for {@link NumberUtils#toFloat(String)}.     */    public void testToFloatString() {        assertTrue("toFloat(String) 1 failed", NumberUtils.toFloat("-1.2345") == -1.2345f);        assertTrue("toFloat(String) 2 failed", NumberUtils.toFloat("1.2345") == 1.2345f);        assertTrue("toFloat(String) 3 failed", NumberUtils.toFloat("abc") == 0.0f);        assertTrue("toFloat(Float.MAX_VALUE) failed", NumberUtils.toFloat(Float.MAX_VALUE+"") ==  Float.MAX_VALUE);        assertTrue("toFloat(Float.MIN_VALUE) failed", NumberUtils.toFloat(Float.MIN_VALUE+"") == Float.MIN_VALUE);        assertTrue("toFloat(empty) failed", NumberUtils.toFloat("") == 0.0f);        assertTrue("toFloat(null) failed", NumberUtils.toFloat(null) == 0.0f);    }    /**     * Test for {@link NumberUtils#toFloat(String, float)}.     */    public void testToFloatStringF() {        assertTrue("toFloat(String,int) 1 failed", NumberUtils.toFloat("1.2345", 5.1f) == 1.2345f);        assertTrue("toFloat(String,int) 2 failed", NumberUtils.toFloat("a", 5.0f) == 5.0f);    }    /**     * Test for {@link NumberUtils#toDouble(String)}.     */    public void testStringToDoubleString() {        assertTrue("toDouble(String) 1 failed", NumberUtils.toDouble("-1.2345") == -1.2345d);        assertTrue("toDouble(String) 2 failed", NumberUtils.toDouble("1.2345") == 1.2345d);        assertTrue("toDouble(String) 3 failed", NumberUtils.toDouble("abc") == 0.0d);        assertTrue("toDouble(Double.MAX_VALUE) failed", NumberUtils.toDouble(Double.MAX_VALUE+"") == Double.MAX_VALUE);        assertTrue("toDouble(Double.MIN_VALUE) failed", NumberUtils.toDouble(Double.MIN_VALUE+"") == Double.MIN_VALUE);        assertTrue("toDouble(empty) failed", NumberUtils.toDouble("") == 0.0d);        assertTrue("toDouble(null) failed", NumberUtils.toDouble(null) == 0.0d);    }    /**     * Test for {@link NumberUtils#toDouble(String, double)}.     */    public void testStringToDoubleStringD() {        assertTrue("toDouble(String,int) 1 failed", NumberUtils.toDouble("1.2345", 5.1d) == 1.2345d);        assertTrue("toDouble(String,int) 2 failed", NumberUtils.toDouble("a", 5.0d) == 5.0d);    }    public void testCreateNumber() {        //a lot of things can go wrong        assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));        assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));        assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));        assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber("" + (Integer.MAX_VALUE + 1L)));        assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));        assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());        assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());        assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));        assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));        assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));        assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));        assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                // jdk 1.2 doesn't support this. unsure about jdk 1.2.2        if(SystemUtils.isJavaVersionAtLeast(1.3f)) {             assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils.createNumber("1.1E-700F"));        }        assertEquals(            "createNumber(String) 16 failed",            new Long("10" + Integer.MAX_VALUE),            NumberUtils.createNumber("10" + Integer.MAX_VALUE + "L"));        assertEquals(            "createNumber(String) 17 failed",            new Long("10" + Integer.MAX_VALUE),            NumberUtils.createNumber("10" + Integer.MAX_VALUE));        assertEquals(            "createNumber(String) 18 failed",            new BigInteger("10" + Long.MAX_VALUE),            NumberUtils.createNumber("10" + Long.MAX_VALUE));    }    public void testCreateFloat() {        assertEquals("createFloat(String) failed", new Float("1234.5"), NumberUtils.createFloat("1234.5"));        assertEquals("createFloat(null) failed", null, NumberUtils.createFloat(null));        this.testCreateFloatFailure("");        this.testCreateFloatFailure(" ");        this.testCreateFloatFailure("\b\t\n\f\r");        // Funky whitespaces        this.testCreateFloatFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F");    }    protected void testCreateFloatFailure(String str) {        try {            Float value = NumberUtils.createFloat(str);            fail("createFloat(blank) failed: " + value);        } catch (NumberFormatException ex) {            // empty        }    }    public void testCreateDouble() {        assertEquals("createDouble(String) failed", new Double("1234.5"), NumberUtils.createDouble("1234.5"));        assertEquals("createDouble(null) failed", null, NumberUtils.createDouble(null));        this.testCreateDoubleFailure("");        this.testCreateDoubleFailure(" ");        this.testCreateDoubleFailure("\b\t\n\f\r");        // Funky whitespaces        this.testCreateDoubleFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F");    }    protected void testCreateDoubleFailure(String str) {        try {            Double value = NumberUtils.createDouble(str);            fail("createDouble(blank) failed: " + value);        } catch (NumberFormatException ex) {            // empty        }    }    public void testCreateInteger() {        assertEquals("createInteger(String) failed", new Integer("12345"), NumberUtils.createInteger("12345"));        assertEquals("createInteger(null) failed", null, NumberUtils.createInteger(null));        this.testCreateIntegerFailure("");        this.testCreateIntegerFailure(" ");        this.testCreateIntegerFailure("\b\t\n\f\r");        // Funky whitespaces        this.testCreateIntegerFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F");    }    protected void testCreateIntegerFailure(String str) {        try {            Integer value = NumberUtils.createInteger(str);            fail("createInteger(blank) failed: " + value);        } catch (NumberFormatException ex) {            // empty        }    }    public void testCreateLong() {        assertEquals("createLong(String) failed", new Long("12345"), NumberUtils.createLong("12345"));        assertEquals("createLong(null) failed", null, NumberUtils.createLong(null));        this.testCreateLongFailure("");        this.testCreateLongFailure(" ");        this.testCreateLongFailure("\b\t\n\f\r");        // Funky whitespaces        this.testCreateLongFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F");    }    protected void testCreateLongFailure(String str) {        try {            Long value = NumberUtils.createLong(str);            fail("createLong(blank) failed: " + value);        } catch (NumberFormatException ex) {            // empty        }    }    public void testCreateBigInteger() {        assertEquals("createBigInteger(String) failed", new BigInteger("12345"), NumberUtils.createBigInteger("12345"));        assertEquals("createBigInteger(null) failed", null, NumberUtils.createBigInteger(null));        this.testCreateBigIntegerFailure("");        this.testCreateBigIntegerFailure(" ");        this.testCreateBigIntegerFailure("\b\t\n\f\r");        // Funky whitespaces        this.testCreateBigIntegerFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F");    }    protected void testCreateBigIntegerFailure(String str) {        try {            BigInteger value = NumberUtils.createBigInteger(str);            fail("createBigInteger(blank) failed: " + value);        } catch (NumberFormatException ex) {            // empty        }    }    public void testCreateBigDecimal() {        assertEquals("createBigDecimal(String) failed", new BigDecimal("1234.5"), NumberUtils.createBigDecimal("1234.5"));        assertEquals("createBigDecimal(null) failed", null, NumberUtils.createBigDecimal(null));        this.testCreateBigDecimalFailure("");        this.testCreateBigDecimalFailure(" ");        this.testCreateBigDecimalFailure("\b\t\n\f\r");        // Funky whitespaces        this.testCreateBigDecimalFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F");    }    protected void testCreateBigDecimalFailure(String str) {        try {            BigDecimal value = NumberUtils.createBigDecimal(str);            fail("createBigDecimal(blank) failed: " + value);        } catch (NumberFormatException ex) {            // empty        }    }    // min/max tests    // ----------------------------------------------------------------------    public void testMinLong() {        final long[] l = null;        try {            NumberUtils.min(l);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.min(new long[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "min(long[]) failed for array length 1",            5,            NumberUtils.min(new long[] { 5 }));        assertEquals(            "min(long[]) failed for array length 2",            6,            NumberUtils.min(new long[] { 6, 9 }));        assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 }));        assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 }));    }    public void testMinInt() {        final int[] i = null;        try {            NumberUtils.min(i);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.min(new int[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "min(int[]) failed for array length 1",            5,            NumberUtils.min(new int[] { 5 }));        assertEquals(            "min(int[]) failed for array length 2",            6,            NumberUtils.min(new int[] { 6, 9 }));        assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 }));        assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 }));    }    public void testMinShort() {        final short[] s = null;        try {            NumberUtils.min(s);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.min(new short[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "min(short[]) failed for array length 1",            5,            NumberUtils.min(new short[] { 5 }));        assertEquals(            "min(short[]) failed for array length 2",            6,            NumberUtils.min(new short[] { 6, 9 }));        assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 }));        assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 }));    }    public void testMinDouble() {        final double[] d = null;        try {            NumberUtils.min(d);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.min(new double[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "min(double[]) failed for array length 1",            5.12,            NumberUtils.min(new double[] { 5.12 }),            0);        assertEquals(            "min(double[]) failed for array length 2",            6.23,            NumberUtils.min(new double[] { 6.23, 9.34 }),            0);        assertEquals(            "min(double[]) failed for array length 5",            -10.45,            NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }),            0);        assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001);        assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001);    }    public void testMinFloat() {        final float[] f = null;        try {            NumberUtils.min(f);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.min(new float[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "min(float[]) failed for array length 1",            5.9f,            NumberUtils.min(new float[] { 5.9f }),            0);        assertEquals(            "min(float[]) failed for array length 2",            6.8f,            NumberUtils.min(new float[] { 6.8f, 9.7f }),            0);        assertEquals(            "min(float[]) failed for array length 5",            -10.6f,            NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }),            0);        assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);        assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f);    }    public void testMaxLong() {        final long[] l = null;        try {            NumberUtils.max(l);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.max(new long[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "max(long[]) failed for array length 1",            5,            NumberUtils.max(new long[] { 5 }));        assertEquals(            "max(long[]) failed for array length 2",            9,            NumberUtils.max(new long[] { 6, 9 }));        assertEquals(            "max(long[]) failed for array length 5",            10,            NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));        assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));        assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 }));    }    public void testMaxInt() {        final int[] i = null;        try {            NumberUtils.max(i);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.max(new int[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "max(int[]) failed for array length 1",            5,            NumberUtils.max(new int[] { 5 }));        assertEquals(            "max(int[]) failed for array length 2",            9,            NumberUtils.max(new int[] { 6, 9 }));        assertEquals(            "max(int[]) failed for array length 5",            10,            NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));        assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));        assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 }));    }    public void testMaxShort() {        final short[] s = null;        try {            NumberUtils.max(s);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.max(new short[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "max(short[]) failed for array length 1",            5,            NumberUtils.max(new short[] { 5 }));        assertEquals(            "max(short[]) failed for array length 2",            9,            NumberUtils.max(new short[] { 6, 9 }));        assertEquals(            "max(short[]) failed for array length 5",            10,            NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));        assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));        assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 }));    }    public void testMaxDouble() {        final double[] d = null;        try {            NumberUtils.max(d);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.max(new double[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "max(double[]) failed for array length 1",            5.1f,            NumberUtils.max(new double[] { 5.1f }),            0);        assertEquals(            "max(double[]) failed for array length 2",            9.2f,            NumberUtils.max(new double[] { 6.3f, 9.2f }),            0);        assertEquals(            "max(double[]) failed for float length 5",            10.4f,            NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),            0);        assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001);        assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001);    }     public void testMaxFloat() {        final float[] f = null;        try {            NumberUtils.max(f);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.max(new float[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "max(float[]) failed for array length 1",            5.1f,            NumberUtils.max(new float[] { 5.1f }),            0);        assertEquals(            "max(float[]) failed for array length 2",            9.2f,            NumberUtils.max(new float[] { 6.3f, 9.2f }),            0);        assertEquals(            "max(float[]) failed for float length 5",            10.4f,            NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),            0);        assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);        assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f);    }    public void testMinimumLong() {        assertEquals("minimum(long,long,long) 1 failed", 12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L));        assertEquals("minimum(long,long,long) 2 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L));        assertEquals("minimum(long,long,long) 3 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L));        assertEquals("minimum(long,long,long) 4 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L));        assertEquals("minimum(long,long,long) 5 failed", 12345L, NumberUtils.min(12345L, 12345L, 12345L));    }    public void testMinimumInt() {        assertEquals("minimum(int,int,int) 1 failed", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2));        assertEquals("minimum(int,int,int) 2 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2));        assertEquals("minimum(int,int,int) 3 failed", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345));        assertEquals("minimum(int,int,int) 4 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345));        assertEquals("minimum(int,int,int) 5 failed", 12345, NumberUtils.min(12345, 12345, 12345));    }    public void testMinimumShort() {        short low = 1234;        short mid = 1234 + 1;        short high = 1234 + 2;        assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(low, mid, high));        assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(mid, low, high));        assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(mid, high, low));        assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(low, mid, low));    }    public void testMinimumByte() {        byte low = 123;        byte mid = 123 + 1;        byte high = 123 + 2;        assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, high));        assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, low, high));        assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, high, low));        assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, low));    }    public void testMinimumDouble() {        double low = 12.3;        double mid = 12.3 + 1;        double high = 12.3 + 2;        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001);        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001);        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001);        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001);        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001);    }    public void testMinimumFloat() {        float low = 12.3f;        float mid = 12.3f + 1;        float high = 12.3f + 2;        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f);        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f);        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f);        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f);        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f);    }    public void testMaximumLong() {        assertEquals("maximum(long,long,long) 1 failed", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L));        assertEquals("maximum(long,long,long) 2 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L));        assertEquals("maximum(long,long,long) 3 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L));        assertEquals("maximum(long,long,long) 4 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L));        assertEquals("maximum(long,long,long) 5 failed", 12345L, NumberUtils.max(12345L, 12345L, 12345L));    }    public void testMaximumInt() {        assertEquals("maximum(int,int,int) 1 failed", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2));        assertEquals("maximum(int,int,int) 2 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2));        assertEquals("maximum(int,int,int) 3 failed", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345));        assertEquals("maximum(int,int,int) 4 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345));        assertEquals("maximum(int,int,int) 5 failed", 12345, NumberUtils.max(12345, 12345, 12345));    }    public void testMaximumShort() {        short low = 1234;        short mid = 1234 + 1;        short high = 1234 + 2;        assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(low, mid, high));        assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, low, high));        assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, high, low));        assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(high, mid, high));    }    public void testMaximumByte() {        byte low = 123;        byte mid = 123 + 1;        byte high = 123 + 2;        assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(low, mid, high));        assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(mid, low, high));        assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(mid, high, low));        assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(high, mid, high));    }    public void testMaximumDouble() {        double low = 12.3;        double mid = 12.3 + 1;        double high = 12.3 + 2;        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001);        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001);        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001);        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001);        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001);    }    public void testMaximumFloat() {        float low = 12.3f;        float mid = 12.3f + 1;        float high = 12.3f + 2;        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f);        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f);        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f);        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f);        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f);    }    public void testCompareDouble() {        assertTrue(NumberUtils.compare(Double.NaN, Double.NaN) == 0);        assertTrue(NumberUtils.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);        assertTrue(NumberUtils.compare(Double.NaN, Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Double.NaN, 1.2d) == +1);        assertTrue(NumberUtils.compare(Double.NaN, 0.0d) == +1);        assertTrue(NumberUtils.compare(Double.NaN, -0.0d) == +1);        assertTrue(NumberUtils.compare(Double.NaN, -1.2d) == +1);        assertTrue(NumberUtils.compare(Double.NaN, -Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NaN) == -1);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 1.2d) == +1);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 0.0d) == +1);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -0.0d) == +1);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -1.2d) == +1);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(1.2d, Double.NaN) == -1);        assertTrue(NumberUtils.compare(1.2d, Double.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(1.2d, Double.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(1.2d, 1.2d) == 0);        assertTrue(NumberUtils.compare(1.2d, 0.0d) == +1);        assertTrue(NumberUtils.compare(1.2d, -0.0d) == +1);        assertTrue(NumberUtils.compare(1.2d, -1.2d) == +1);        assertTrue(NumberUtils.compare(1.2d, -Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(0.0d, Double.NaN) == -1);        assertTrue(NumberUtils.compare(0.0d, Double.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(0.0d, Double.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(0.0d, 1.2d) == -1);        assertTrue(NumberUtils.compare(0.0d, 0.0d) == 0);        assertTrue(NumberUtils.compare(0.0d, -0.0d) == +1);        assertTrue(NumberUtils.compare(0.0d, -1.2d) == +1);        assertTrue(NumberUtils.compare(0.0d, -Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(-0.0d, Double.NaN) == -1);        assertTrue(NumberUtils.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(-0.0d, Double.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(-0.0d, 1.2d) == -1);        assertTrue(NumberUtils.compare(-0.0d, 0.0d) == -1);        assertTrue(NumberUtils.compare(-0.0d, -0.0d) == 0);        assertTrue(NumberUtils.compare(-0.0d, -1.2d) == +1);        assertTrue(NumberUtils.compare(-0.0d, -Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(-1.2d, Double.NaN) == -1);        assertTrue(NumberUtils.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(-1.2d, Double.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(-1.2d, 1.2d) == -1);        assertTrue(NumberUtils.compare(-1.2d, 0.0d) == -1);        assertTrue(NumberUtils.compare(-1.2d, -0.0d) == -1);        assertTrue(NumberUtils.compare(-1.2d, -1.2d) == 0);        assertTrue(NumberUtils.compare(-1.2d, -Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NaN) == -1);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 1.2d) == -1);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 0.0d) == -1);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -0.0d) == -1);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -1.2d) == -1);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);    }    public void testCompareFloat() {        assertTrue(NumberUtils.compare(Float.NaN, Float.NaN) == 0);        assertTrue(NumberUtils.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);        assertTrue(NumberUtils.compare(Float.NaN, Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Float.NaN, 1.2f) == +1);        assertTrue(NumberUtils.compare(Float.NaN, 0.0f) == +1);        assertTrue(NumberUtils.compare(Float.NaN, -0.0f) == +1);        assertTrue(NumberUtils.compare(Float.NaN, -1.2f) == +1);        assertTrue(NumberUtils.compare(Float.NaN, -Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NaN) == -1);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 1.2f) == +1);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 0.0f) == +1);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -0.0f) == +1);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -1.2f) == +1);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(1.2f, Float.NaN) == -1);        assertTrue(NumberUtils.compare(1.2f, Float.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(1.2f, Float.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(1.2f, 1.2f) == 0);        assertTrue(NumberUtils.compare(1.2f, 0.0f) == +1);        assertTrue(NumberUtils.compare(1.2f, -0.0f) == +1);        assertTrue(NumberUtils.compare(1.2f, -1.2f) == +1);        assertTrue(NumberUtils.compare(1.2f, -Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(0.0f, Float.NaN) == -1);        assertTrue(NumberUtils.compare(0.0f, Float.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(0.0f, Float.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(0.0f, 1.2f) == -1);        assertTrue(NumberUtils.compare(0.0f, 0.0f) == 0);        assertTrue(NumberUtils.compare(0.0f, -0.0f) == +1);        assertTrue(NumberUtils.compare(0.0f, -1.2f) == +1);        assertTrue(NumberUtils.compare(0.0f, -Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(-0.0f, Float.NaN) == -1);        assertTrue(NumberUtils.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(-0.0f, Float.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(-0.0f, 1.2f) == -1);        assertTrue(NumberUtils.compare(-0.0f, 0.0f) == -1);        assertTrue(NumberUtils.compare(-0.0f, -0.0f) == 0);        assertTrue(NumberUtils.compare(-0.0f, -1.2f) == +1);        assertTrue(NumberUtils.compare(-0.0f, -Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(-1.2f, Float.NaN) == -1);        assertTrue(NumberUtils.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(-1.2f, Float.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(-1.2f, 1.2f) == -1);        assertTrue(NumberUtils.compare(-1.2f, 0.0f) == -1);        assertTrue(NumberUtils.compare(-1.2f, -0.0f) == -1);        assertTrue(NumberUtils.compare(-1.2f, -1.2f) == 0);        assertTrue(NumberUtils.compare(-1.2f, -Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NaN) == -1);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 1.2f) == -1);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 0.0f) == -1);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -0.0f) == -1);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -1.2f) == -1);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);    }    public void testIsDigits() {        assertEquals("isDigits(null) failed", false, NumberUtils.isDigits(null));        assertEquals("isDigits('') failed", false, NumberUtils.isDigits(""));        assertEquals("isDigits(String) failed", true, NumberUtils.isDigits("12345"));        assertEquals("isDigits(String) neg 1 failed", false, NumberUtils.isDigits("1234.5"));        assertEquals("isDigits(String) neg 3 failed", false, NumberUtils.isDigits("1ab"));        assertEquals("isDigits(String) neg 4 failed", false, NumberUtils.isDigits("abc"));    }        /**     * Tests isNumber(String) and tests that createNumber(String) returns     * a valid number iff isNumber(String) returns false.     */    public void testIsNumber() {        String val = "12345";        assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));        val = "1234.5";        assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));        val = ".12345";        assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));        val = "1234E5";        assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));        val = "1234E+5";        assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));        val = "1234E-5";        assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));        val = "123.4E5";        assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));        val = "-1234";        assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));        val = "-1234.5";        assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));        val = "-.12345";        assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));        val = "-1234E5";        assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));        val = "0";        assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));        val = "-0";        assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));        val = "01234";        assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));        val = "-01234";        assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));        val = "0xABC123";        assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));        val = "0x0";        assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));        val = "123.4E21D";        assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));        val = "-221.23F";        assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));        val = "22338L";        assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));        val = null;        assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));        val = "";        assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));        val = "--2.3";        assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));        val = ".12.3";        assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));        val = "-123E";        assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));        val = "-123E+-212";        assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));        val = "-123E2.12";        assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));        val = "0xGF";        assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));        val = "0xFAE-1";        assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));        val = ".";        assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));        val = "-0ABC123";        assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));        val = "123.4E-D";        assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));        val = "123.4ED";        assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));        val = "1234E5l";        assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));        val = "11a";        assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));         val = "1a";        assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));         val = "a";        assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));         val = "11g";        assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));         val = "11z";        assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));         val = "11def";        assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));         val = "11d11";        assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));         val = "11 11";        assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));        val = " 1111";        assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));        val = "1111 ";        assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));    }    private boolean checkCreateNumber(String val) {        try {            Object obj = NumberUtils.createNumber(val);            if (obj == null) {                return false;            }            return true;        } catch (NumberFormatException e) {            return false;       }    }    public void testConstants() {        assertTrue(NumberUtils.LONG_ZERO instanceof Long);        assertTrue(NumberUtils.LONG_ONE instanceof Long);        assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long);        assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer);        assertTrue(NumberUtils.INTEGER_ONE instanceof Integer);        assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer);        assertTrue(NumberUtils.SHORT_ZERO instanceof Short);        assertTrue(NumberUtils.SHORT_ONE instanceof Short);        assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short);        assertTrue(NumberUtils.BYTE_ZERO instanceof Byte);        assertTrue(NumberUtils.BYTE_ONE instanceof Byte);        assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte);        assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double);        assertTrue(NumberUtils.DOUBLE_ONE instanceof Double);        assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double);        assertTrue(NumberUtils.FLOAT_ZERO instanceof Float);        assertTrue(NumberUtils.FLOAT_ONE instanceof Float);        assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float);                assertTrue(NumberUtils.LONG_ZERO.longValue() == 0);        assertTrue(NumberUtils.LONG_ONE.longValue() == 1);        assertTrue(NumberUtils.LONG_MINUS_ONE.longValue() == -1);        assertTrue(NumberUtils.INTEGER_ZERO.intValue() == 0);        assertTrue(NumberUtils.INTEGER_ONE.intValue() == 1);        assertTrue(NumberUtils.INTEGER_MINUS_ONE.intValue() == -1);        assertTrue(NumberUtils.SHORT_ZERO.shortValue() == 0);        assertTrue(NumberUtils.SHORT_ONE.shortValue() == 1);        assertTrue(NumberUtils.SHORT_MINUS_ONE.shortValue() == -1);        assertTrue(NumberUtils.BYTE_ZERO.byteValue() == 0);        assertTrue(NumberUtils.BYTE_ONE.byteValue() == 1);        assertTrue(NumberUtils.BYTE_MINUS_ONE.byteValue() == -1);        assertTrue(NumberUtils.DOUBLE_ZERO.doubleValue() == 0.0d);        assertTrue(NumberUtils.DOUBLE_ONE.doubleValue() == 1.0d);        assertTrue(NumberUtils.DOUBLE_MINUS_ONE.doubleValue() == -1.0d);        assertTrue(NumberUtils.FLOAT_ZERO.floatValue() == 0.0f);        assertTrue(NumberUtils.FLOAT_ONE.floatValue() == 1.0f);        assertTrue(NumberUtils.FLOAT_MINUS_ONE.floatValue() == -1.0f);    }    }
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.math;import java.util.Random;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Test cases for the {@link RandomUtils} class. * * @author <a href="mailto:phil@steitz.com">Phil Steitz</a> * @version $Revision: 1.7 $ $Date: 2004/02/18 23:02:38 $ */public final class RandomUtilsTest extends TestCase {    public RandomUtilsTest(String name) {        super(name);    }        public void setUp() {    }        public static Test suite() {        TestSuite suite = new TestSuite(RandomUtilsTest.class);        suite.setName("RandomUtils Tests");        return suite;    }        /** test distribution of nextInt() */    public void testNextInt() {        tstNextInt(null);    }        /** test distribution of nextInt(Random) */    public void testNextInt2() {        Random rnd = new Random();        rnd.setSeed(System.currentTimeMillis());        tstNextInt(rnd);    }         /**      * Generate 1000 values for nextInt(bound) and compare     * the observed frequency counts to expected counts using     * a chi-square test.     * @param rnd Random to use if not null     */    private void tstNextInt(Random rnd) {        int bound = 0;        int result = 0;        // test boundary condition: n = Integer.MAX_VALUE;        bound = Integer.MAX_VALUE;        if (rnd == null) {            result = RandomUtils.nextInt(bound);        } else {            result = RandomUtils.nextInt(rnd,bound);        }              assertTrue("result less than bound",result < bound);        assertTrue("result non-negative",result >= 0);                // test uniformity -- use Chi-Square test at .01 level        bound = 4;        int[] expected = new int[] {250,250,250,250};        int[] observed = new int[] {0,0,0,0};        for (int i = 0; i < 1000; i ++) {            if (rnd == null) {                result = RandomUtils.nextInt(bound);            } else {                result = RandomUtils.nextInt(rnd,bound);            }                 assertTrue(result < bound);            assertTrue(result >= 0);            observed[result]++;        }         /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001         * Change to 11.34 for alpha = .01            */        assertTrue(            "chi-square test -- will fail about 1 in 1000 times",            chiSquare(expected,observed) < 16.27);                                                                }          /** test distribution of nextLong() */    public void testNextLong() {        tstNextLong(null);    }        /** test distribution of nextLong(Random) BROKEN     *  contract of nextLong(Random) is different from     * nextLong() */    public void testNextLong2() {        Random rnd = new Random();        rnd.setSeed(System.currentTimeMillis());        tstNextLong(rnd);    }         /**      * Generate 1000 values for nextLong and check that     * p(value < long.MAXVALUE/2) ~ 0.5. Use chi-square test     * with df = 2-1 = 1       * @param rnd Random to use if not null     */    private void tstNextLong(Random rnd) {        int[] expected = new int[] {500,500};        int[] observed = new int[] {0,0};        long result = 0;        long midPoint = Long.MAX_VALUE/2;        for (int i = 0; i < 1000; i ++) {            if (rnd == null) {                result = Math.abs(RandomUtils.nextLong());            } else {                result = Math.abs(RandomUtils.nextLong(rnd));            }              if (result < midPoint) {                observed[0]++;            } else {                observed[1]++;            }        }        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001         * Change to 6.64 for alpha = .01           */         assertTrue(            "chi-square test -- will fail about 1 in 1000 times",            chiSquare(expected,observed) < 10.83);     }                /** test distribution of nextBoolean() */    public void testNextBoolean() {        tstNextBoolean(null);    }        /** test distribution of nextBoolean(Random) */    public void testNextBoolean2() {        Random rnd = new Random();        rnd.setSeed(System.currentTimeMillis());        tstNextBoolean(rnd);    }        /**      * Generate 1000 values for nextBoolean and check that     * p(value = false) ~ 0.5. Use chi-square test     * with df = 2-1 = 1       * @param rnd Random to use if not null     */    private void tstNextBoolean(Random rnd) {        int[] expected = new int[] {500,500};        int[] observed = new int[] {0,0};        boolean result = false;        for (int i = 0; i < 1000; i ++) {            if (rnd == null) {                result = RandomUtils.nextBoolean();            } else {                result = RandomUtils.nextBoolean(rnd);            }                 if (result) {                observed[0]++;            } else {                observed[1]++;            }        }        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001         * Change to 6.64 for alpha = .01          */        assertTrue(            "chi-square test -- will fail about 1 in 1000 times",            chiSquare(expected,observed) < 10.83 );      }        /** test distribution of nextFloat() */    public void testNextFloat() {        tstNextFloat(null);    }        /** test distribution of nextFloat(Random) */    public void testNextFloat2() {        Random rnd = new Random();        rnd.setSeed(System.currentTimeMillis());        tstNextFloat(rnd);    }        /**      * Generate 1000 values for nextFloat and check that     * p(value < 0.5) ~ 0.5. Use chi-square test     * with df = 2-1 = 1       * @param rnd Random to use if not null     */    private void tstNextFloat(Random rnd) {        int[] expected = new int[] {500,500};        int[] observed = new int[] {0,0};        float result = 0;        for (int i = 0; i < 1000; i ++) {            if (rnd == null) {                result = RandomUtils.nextFloat();            } else {                result = RandomUtils.nextFloat(rnd);            }                 if (result < 0.5) {                observed[0]++;            } else {                observed[1]++;            }        }        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001         * Change to 6.64 for alpha = .01          */        assertTrue(            "chi-square test -- will fail about 1 in 1000 times",            chiSquare(expected,observed) < 10.83);      }        /** test distribution of nextDouble() */    public void testNextDouble() {        tstNextDouble(null);    }        /** test distribution of nextDouble(Random) */    public void testNextDouble2() {        Random rnd = new Random();        rnd.setSeed(System.currentTimeMillis());        tstNextDouble(rnd);    }        /**      * Generate 1000 values for nextFloat and check that     * p(value < 0.5) ~ 0.5. Use chi-square test     * with df = 2-1 = 1       * @param rnd Random to use if not null     */    private void tstNextDouble(Random rnd) {        int[] expected = new int[] {500,500};        int[] observed = new int[] {0,0};        double result = 0;        for (int i = 0; i < 1000; i ++) {            if (rnd == null) {                result = RandomUtils.nextDouble();            } else {                result = RandomUtils.nextDouble(rnd);            }                 if (result < 0.5) {                observed[0]++;            } else {                observed[1]++;            }        }        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001         * Change to 6.64 for alpha = .01          */        assertTrue(            "chi-square test -- will fail about 1 in 1000 times",            chiSquare(expected,observed) < 10.83);      }        /** make sure that setSeed fails */    public void testSetSeed() {        try {            RandomUtils.JVM_RANDOM.setSeed(1000);            fail("expecting UnsupportedOperationException");        } catch (UnsupportedOperationException ex) {            // empty        }    }        /**     * Computes Chi-Square statistic given observed and expected counts     * @param observed array of observed frequency counts     * @param expected array of expected frequency counts     */    private double chiSquare(int[] expected, int[] observed) {        double sumSq = 0.0d;        double dev = 0.0d;        for (int i = 0; i< observed.length; i++) {            dev = (double)(observed[i] - expected[i]);            sumSq += dev*dev/(double)expected[i];        }        return sumSq;    }           }
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.enums;import java.util.Iterator;import java.util.List;import java.util.Map;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import org.apache.commons.lang.SerializationUtils;/** * Test cases for the {@link Enum} class. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id: ValuedEnumTest.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $ */public final class ValuedEnumTest extends TestCase {    public ValuedEnumTest(String name) {        super(name);    }    public void setUp() {    }    public static Test suite() {        TestSuite suite = new TestSuite(ValuedEnumTest.class);        suite.setName("ValuedEnum Tests");        return suite;    }    public void testName() {        assertEquals("Red", ValuedColorEnum.RED.getName());        assertEquals("Green", ValuedColorEnum.GREEN.getName());        assertEquals("Blue", ValuedColorEnum.BLUE.getName());    }    public void testValue() {        assertEquals(1, ValuedColorEnum.RED.getValue());        assertEquals(2, ValuedColorEnum.GREEN.getValue());        assertEquals(3, ValuedColorEnum.BLUE.getValue());    }    public void testCompareTo() {        assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.BLUE) == 0);        assertTrue(ValuedColorEnum.RED.compareTo(ValuedColorEnum.BLUE) < 0);        assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.RED) > 0);    }    public void testEquals() {        assertSame(ValuedColorEnum.RED, ValuedColorEnum.RED);        assertSame(ValuedColorEnum.getEnum("Red"), ValuedColorEnum.RED);    }    public void testToString() {        String toString = ValuedColorEnum.RED.toString();        assertEquals("ValuedColorEnum[Red=1]", toString);        assertSame(toString, ValuedColorEnum.RED.toString());    }    public void testIterator() {        Iterator it = ValuedColorEnum.iterator();        assertSame(ValuedColorEnum.RED, it.next());        assertSame(ValuedColorEnum.GREEN, it.next());        assertSame(ValuedColorEnum.BLUE, it.next());    }    public void testList() {        List list = ValuedColorEnum.getEnumList();                assertNotNull(list);                assertEquals( list.size(),         ValuedColorEnum.getEnumMap().keySet().size());                Iterator it = list.iterator();        assertSame(ValuedColorEnum.RED, it.next());        assertSame(ValuedColorEnum.GREEN, it.next());        assertSame(ValuedColorEnum.BLUE, it.next());    }    public void testMap() {        Map map = ValuedColorEnum.getEnumMap();                assertNotNull(map);                assertEquals( map.keySet().size(),         ValuedColorEnum.getEnumList().size());                 assertTrue(map.containsValue(ValuedColorEnum.RED));        assertTrue(map.containsValue(ValuedColorEnum.GREEN));        assertTrue(map.containsValue(ValuedColorEnum.BLUE));        assertSame(ValuedColorEnum.RED, map.get("Red"));        assertSame(ValuedColorEnum.GREEN, map.get("Green"));        assertSame(ValuedColorEnum.BLUE, map.get("Blue"));    }    public void testGet() {        assertSame(ValuedColorEnum.RED, ValuedColorEnum.getEnum("Red"));        assertSame(ValuedColorEnum.GREEN, ValuedColorEnum.getEnum("Green"));        assertSame(ValuedColorEnum.BLUE, ValuedColorEnum.getEnum("Blue"));        assertSame(null, ValuedColorEnum.getEnum("Pink"));    }    public void testGetValue() {        assertSame(ValuedColorEnum.RED, ValuedColorEnum.getEnum(1));        assertSame(ValuedColorEnum.GREEN, ValuedColorEnum.getEnum(2));        assertSame(ValuedColorEnum.BLUE, ValuedColorEnum.getEnum(3));        assertSame(null, ValuedColorEnum.getEnum(4));    }    public void testSerialization() {        assertSame(ValuedColorEnum.RED, SerializationUtils.clone(ValuedColorEnum.RED));        assertSame(ValuedColorEnum.GREEN, SerializationUtils.clone(ValuedColorEnum.GREEN));        assertSame(ValuedColorEnum.BLUE, SerializationUtils.clone(ValuedColorEnum.BLUE));    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.enums;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import junit.framework.AssertionFailedError;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import org.apache.commons.lang.ClassUtilsTest;import org.apache.commons.lang.SerializationUtils;/** * Test cases for the {@link Enum} class. * * @author Stephen Colebourne * @author Gary D. Gregory * @version $Id: EnumTest.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $ */public final class EnumTest extends TestCase {    public EnumTest(String name) {        super(name);    }    public void setUp() {    }    public static Test suite() {        TestSuite suite = new TestSuite(EnumTest.class);        suite.setName("Enum Tests");        return suite;    }    public void testName() {        assertEquals("Red", ColorEnum.RED.getName());        assertEquals("Green", ColorEnum.GREEN.getName());        assertEquals("Blue", ColorEnum.BLUE.getName());    }    public void testCompareTo() {        assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.BLUE) == 0);        assertTrue(ColorEnum.RED.compareTo(ColorEnum.BLUE) > 0);        assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.RED) < 0);        try {            ColorEnum.RED.compareTo(null);            fail();        } catch (NullPointerException ex) {}        try {            ColorEnum.RED.compareTo(new Object());            fail();        } catch (ClassCastException ex) {}    }    public void testEquals() {        assertSame(ColorEnum.RED, ColorEnum.RED);        assertSame(ColorEnum.getEnum("Red"), ColorEnum.RED);        assertEquals(false, ColorEnum.RED.equals(null));        assertEquals(true, ColorEnum.RED.equals(ColorEnum.RED));        assertEquals(true, ColorEnum.RED.equals(ColorEnum.getEnum("Red")));    }    public void testHashCode() {        assertEquals(ColorEnum.RED.hashCode(), ColorEnum.RED.hashCode());        assertEquals(7 + ColorEnum.class.hashCode() + 3 * "Red".hashCode(), ColorEnum.RED.hashCode());    }    public void testToString() {        String toString = ColorEnum.RED.toString();        assertEquals("ColorEnum[Red]", toString);        assertSame(toString, ColorEnum.RED.toString());    }    public void testIterator() {        Iterator it = ColorEnum.iterator();        assertSame(ColorEnum.RED, it.next());        assertSame(ColorEnum.GREEN, it.next());        assertSame(ColorEnum.BLUE, it.next());    }    public void testList() {        List list = new ArrayList(ColorEnum.getEnumList());                assertNotNull(list);                assertEquals( list.size(),        ColorEnum.getEnumMap().keySet().size());                Iterator it = list.iterator();        assertSame(ColorEnum.RED, it.next());        assertSame(ColorEnum.GREEN, it.next());        assertSame(ColorEnum.BLUE, it.next());    }    public void testMap() {        Map map = new HashMap(ColorEnum.getEnumMap());                assertNotNull(map);        assertTrue(map.containsValue(ColorEnum.RED));        assertTrue(map.containsValue(ColorEnum.GREEN));        assertTrue(map.containsValue(ColorEnum.BLUE));        assertSame(ColorEnum.RED, map.get("Red"));        assertSame(ColorEnum.GREEN, map.get("Green"));        assertSame(ColorEnum.BLUE, map.get("Blue"));        assertEquals( map.keySet().size(),                        ColorEnum.getEnumList().size());    }    public void testGet() {        assertSame(ColorEnum.RED, ColorEnum.getEnum("Red"));        assertSame(ColorEnum.GREEN, ColorEnum.getEnum("Green"));        assertSame(ColorEnum.BLUE, ColorEnum.getEnum("Blue"));        assertSame(null, ColorEnum.getEnum("Pink"));    }    public void testSerialization() {        int hashCode = ColorEnum.RED.hashCode();        assertSame(ColorEnum.RED, SerializationUtils.clone(ColorEnum.RED));        assertEquals(hashCode, SerializationUtils.clone(ColorEnum.RED).hashCode());        assertSame(ColorEnum.GREEN, SerializationUtils.clone(ColorEnum.GREEN));        assertSame(ColorEnum.BLUE, SerializationUtils.clone(ColorEnum.BLUE));    }    public void testBroken1() {        try {            Broken1Enum.RED.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testBroken2() {        try {            Broken2Enum.RED.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testBroken3() {        try {            Broken3Enum.RED.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testBroken1Operation() {        try {            Broken1OperationEnum.PLUS.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testBroken2Operation() {        try {            Broken2OperationEnum.PLUS.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testBroken3Operation() {        try {            Broken3OperationEnum.PLUS.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testBroken4Operation() {        try {            Broken4OperationEnum.PLUS.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testBroken5Operation() {        try {            Broken5OperationEnum.PLUS.getName();            fail();        } catch (ExceptionInInitializerError ex) {            assertTrue(ex.getException() instanceof IllegalArgumentException);        }    }    public void testOperationGet() {        assertSame(OperationEnum.PLUS, OperationEnum.getEnum("Plus"));        assertSame(OperationEnum.MINUS, OperationEnum.getEnum("Minus"));        assertSame(null, OperationEnum.getEnum("Pink"));    }    public void testOperationSerialization() {        assertSame(OperationEnum.PLUS, SerializationUtils.clone(OperationEnum.PLUS));        assertSame(OperationEnum.MINUS, SerializationUtils.clone(OperationEnum.MINUS));    }    public void testOperationToString() {        assertEquals("OperationEnum[Plus]", OperationEnum.PLUS.toString());    }    public void testOperationList() {        List list = OperationEnum.getEnumList();        assertNotNull(list);        assertEquals(2, list.size());        assertEquals(list.size(), OperationEnum.getEnumMap().keySet().size());                Iterator it = list.iterator();        assertSame(OperationEnum.PLUS, it.next());        assertSame(OperationEnum.MINUS, it.next());    }    public void testOperationMap() {        Map map = OperationEnum.getEnumMap();        assertNotNull(map);        assertEquals(map.keySet().size(), OperationEnum.getEnumList().size());                assertTrue(map.containsValue(OperationEnum.PLUS));        assertTrue(map.containsValue(OperationEnum.MINUS));        assertSame(OperationEnum.PLUS, map.get("Plus"));        assertSame(OperationEnum.MINUS, map.get("Minus"));    }    public void testOperationCalculation() {        assertEquals(3, OperationEnum.PLUS.eval(1, 2));        assertEquals(-1, OperationEnum.MINUS.eval(1, 2));    }        //-----------------------------------------------------------------------    public void testExtended1Get() {        assertSame(Extended1Enum.ALPHA, Extended1Enum.getEnum("Alpha"));        assertSame(Extended1Enum.BETA, Extended1Enum.getEnum("Beta"));        assertSame(null, Extended1Enum.getEnum("Gamma"));        assertSame(null, Extended1Enum.getEnum("Delta"));    }                public void testExtended2Get() {        assertSame(Extended1Enum.ALPHA, Extended2Enum.ALPHA);        assertSame(Extended1Enum.BETA, Extended2Enum.BETA);                assertSame(Extended2Enum.ALPHA, Extended2Enum.getEnum("Alpha"));        assertSame(Extended2Enum.BETA, Extended2Enum.getEnum("Beta"));        assertSame(Extended2Enum.GAMMA, Extended2Enum.getEnum("Gamma"));        assertSame(null, Extended2Enum.getEnum("Delta"));    }    public void testExtended3Get() {        assertSame(Extended2Enum.ALPHA, Extended3Enum.ALPHA);        assertSame(Extended2Enum.BETA, Extended3Enum.BETA);        assertSame(Extended2Enum.GAMMA, Extended3Enum.GAMMA);                assertSame(Extended3Enum.ALPHA, Extended3Enum.getEnum("Alpha"));        assertSame(Extended3Enum.BETA, Extended3Enum.getEnum("Beta"));        assertSame(Extended3Enum.GAMMA, Extended3Enum.getEnum("Gamma"));        assertSame(Extended3Enum.DELTA, Extended3Enum.getEnum("Delta"));    }    public void testExtendedSerialization() {        assertSame(Extended1Enum.ALPHA, SerializationUtils.clone(Extended1Enum.ALPHA));        assertSame(Extended1Enum.BETA, SerializationUtils.clone(Extended1Enum.BETA));        assertSame(Extended2Enum.GAMMA, SerializationUtils.clone(Extended2Enum.GAMMA));        assertSame(Extended3Enum.DELTA, SerializationUtils.clone(Extended3Enum.DELTA));    }    public void testExtendedToString() {        assertEquals("Extended1Enum[Alpha]", Extended1Enum.ALPHA.toString());        assertEquals("Extended1Enum[Beta]", Extended1Enum.BETA.toString());                assertEquals("Extended1Enum[Alpha]", Extended2Enum.ALPHA.toString());        assertEquals("Extended1Enum[Beta]", Extended2Enum.BETA.toString());        assertEquals("Extended2Enum[Gamma]", Extended2Enum.GAMMA.toString());                assertEquals("Extended1Enum[Alpha]", Extended3Enum.ALPHA.toString());        assertEquals("Extended1Enum[Beta]", Extended3Enum.BETA.toString());        assertEquals("Extended2Enum[Gamma]", Extended3Enum.GAMMA.toString());        assertEquals("Extended3Enum[Delta]", Extended3Enum.DELTA.toString());    }    public void testExtended1List() {        List list = Extended1Enum.getEnumList();        assertNotNull(list);        assertEquals(2, list.size());        assertEquals(list.size(), Extended1Enum.getEnumMap().keySet().size());                Iterator it = list.iterator();        assertSame(Extended1Enum.ALPHA, it.next());        assertSame(Extended1Enum.BETA, it.next());    }    public void testExtended2List() {        List list = Extended2Enum.getEnumList();        assertNotNull(list);        assertEquals(3, list.size());        assertEquals(list.size(), Extended2Enum.getEnumMap().keySet().size());                Iterator it = list.iterator();        assertSame(Extended2Enum.ALPHA, it.next());        assertSame(Extended2Enum.BETA, it.next());        assertSame(Extended2Enum.GAMMA, it.next());    }    public void testExtended3List() {        List list = Extended3Enum.getEnumList();        assertNotNull(list);        assertEquals(4, list.size());        assertEquals(list.size(), Extended3Enum.getEnumMap().keySet().size());                Iterator it = list.iterator();        assertSame(Extended3Enum.ALPHA, it.next());        assertSame(Extended3Enum.BETA, it.next());        assertSame(Extended3Enum.GAMMA, it.next());        assertSame(Extended3Enum.DELTA, it.next());    }    public void testExtended1Map() {        Map map = Extended1Enum.getEnumMap();        assertNotNull(map);        assertEquals(map.keySet().size(), Extended1Enum.getEnumList().size());                assertTrue(map.containsValue(Extended1Enum.ALPHA));        assertTrue(map.containsValue(Extended1Enum.BETA));        assertSame(Extended1Enum.ALPHA, map.get("Alpha"));        assertSame(Extended1Enum.BETA, map.get("Beta"));    }    public void testExtended2Map() {        Map map = Extended2Enum.getEnumMap();        assertNotNull(map);        assertEquals(map.keySet().size(), Extended2Enum.getEnumList().size());                assertTrue(map.containsValue(Extended2Enum.ALPHA));        assertTrue(map.containsValue(Extended2Enum.BETA));        assertTrue(map.containsValue(Extended2Enum.GAMMA));        assertSame(Extended2Enum.ALPHA, map.get("Alpha"));        assertSame(Extended2Enum.BETA, map.get("Beta"));        assertSame(Extended2Enum.GAMMA, map.get("Gamma"));    }    public void testExtended3Map() {        Map map = Extended3Enum.getEnumMap();        assertNotNull(map);        assertEquals(map.keySet().size(), Extended3Enum.getEnumList().size());                assertTrue(map.containsValue(Extended3Enum.ALPHA));        assertTrue(map.containsValue(Extended3Enum.BETA));        assertTrue(map.containsValue(Extended3Enum.GAMMA));        assertTrue(map.containsValue(Extended3Enum.DELTA));        assertSame(Extended3Enum.ALPHA, map.get("Alpha"));        assertSame(Extended3Enum.BETA, map.get("Beta"));        assertSame(Extended3Enum.GAMMA, map.get("Gamma"));        assertSame(Extended3Enum.DELTA, map.get("Delta"));    }    //-----------------------------------------------------------------------    public void testNested() {        List list = new ArrayList(Nest.ColorEnum.getEnumList());        assertEquals(3, list.size());  // all is well        Iterator it = list.iterator();        assertSame(Nest.ColorEnum.RED, it.next());        assertSame(Nest.ColorEnum.GREEN, it.next());        assertSame(Nest.ColorEnum.BLUE, it.next());        // This nesting works because the enum constants are defined in the SAME        // class as the getEnumList(). It just acts as a normal enum.    }    public void testNestedBroken() {        List list = new ArrayList(NestBroken.ColorEnum.getEnumList());        try {            assertEquals(0, list.size());  // no enums!!!             // this is BROKEN because the enum constants are defined in a DIFFERENT            // class from getEnumList(). Once NestBroken class is referenced,            // and thus class loaded with its enum constants, the getEnumList works:        } catch (AssertionFailedError ex) {            // this actually works and isn't broken on Linux SunJDK1.4.1, so...            assertEquals(3, list.size());        }        new NestBroken();        list = new ArrayList(NestBroken.ColorEnum.getEnumList());        assertEquals(3, list.size());  // all is well!!!        Iterator it = list.iterator();        assertSame(NestBroken.RED, it.next());        assertSame(NestBroken.GREEN, it.next());        assertSame(NestBroken.BLUE, it.next());    }    public void testNestedLinked() {        List list = new ArrayList(NestLinked.ColorEnum.getEnumList());        assertEquals(3, list.size());  // all is well        Iterator it = list.iterator();        assertSame(NestLinked.RED, it.next());        assertSame(NestLinked.GREEN, it.next());        assertSame(NestLinked.BLUE, it.next());        // This nesting works because a static block in the enum class forces a        // class load of the outer class which defines the enum constants.    }    public void testNestedReferenced() {        List list = new ArrayList(NestReferenced.ColorEnum.getEnumList());        assertEquals(3, list.size());  // all is well        Iterator it = list.iterator();        assertSame(NestReferenced.RED, it.next());        assertSame(NestReferenced.GREEN, it.next());        assertSame(NestReferenced.BLUE, it.next());        // This nesting works because the enum constants are actually defined in        // the SAME class as the getEnumList(). The references in the outer class        // are just extra references.    }        public void testColorEnumEqualsWithDifferentClassLoaders() throws SecurityException, IllegalArgumentException,            ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.BLUE);        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.GREEN);        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.RED);    }    void testEqualsTrueWithDifferentClassLoaders(ColorEnum colorEnum) throws ClassNotFoundException, SecurityException,            NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {        // Sanity checks:        assertTrue(colorEnum.equals(colorEnum));        assertNotNull(ColorEnum.class.getClassLoader());        // set up:        ClassLoader classLoader = ClassUtilsTest.newSystemClassLoader();        Object enumObjectFromOtherClassLoader = this.getColorEnum(classLoader, colorEnum.getName());        // the real test, part 1.        try {            ColorEnum testCase = (ColorEnum) enumObjectFromOtherClassLoader;            fail("Should have thrown a ClassCastException for " + testCase);        } catch (ClassCastException e) {            // normal.        }        // the real test, part 2.        assertEquals("The two objects should match even though they are from different class loaders", colorEnum,                enumObjectFromOtherClassLoader);        // the real test, part 3.        int falseCount = 0;        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {            ColorEnum element = (ColorEnum) iter.next();            if (!colorEnum.equals(element)) {                falseCount++;                assertFalse(enumObjectFromOtherClassLoader.equals(element));            }        }        assertEquals(ColorEnum.getEnumList().size() - 1, falseCount);    }    Object getColorEnum(ClassLoader classLoader, String color) throws ClassNotFoundException, SecurityException,            NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {        // Sanity check:        ColorEnum.RED.equals(ColorEnum.RED);        assertNotNull(ColorEnum.class.getClassLoader());        // set up:        assertNotNull(classLoader);        assertFalse(classLoader.equals(ColorEnum.class.getClassLoader()));        Class otherColorEnumClass = classLoader.loadClass("org.apache.commons.lang.enums.ColorEnum");        assertNotNull(otherColorEnumClass);        assertNotNull(otherColorEnumClass.getClassLoader());        assertTrue(classLoader.equals(otherColorEnumClass.getClassLoader()));        assertFalse(otherColorEnumClass.getClassLoader().equals(ColorEnum.class.getClassLoader()));        Method method = otherColorEnumClass.getMethod("getEnum", new Class[]{String.class});        Object enumObject = method.invoke(otherColorEnumClass, new Object[]{color});        assertNotNull(enumObject);        assertFalse(ColorEnum.class.equals(enumObject.getClass()));        assertFalse(ColorEnum.class == enumObject.getClass());        return enumObject;    }    public void testEqualsToWrongInstance() {        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {            ColorEnum element = (ColorEnum) iter.next();            this.testEqualsToWrongInstance(element);        }    }    void testEqualsToWrongInstance(ColorEnum colorEnum) {        assertEquals(false, colorEnum.equals("test"));        assertEquals(false, colorEnum.equals(new Integer(1)));        assertEquals(false, colorEnum.equals(new Boolean(true)));        assertEquals(false, colorEnum.equals(new StringBuffer("test")));        assertEquals(false, colorEnum.equals(new Object()));        assertEquals(false, colorEnum.equals(null));        assertEquals(false, colorEnum.equals(""));        assertEquals(false, colorEnum.equals(ColorEnum.getEnum(null)));        assertEquals(false, colorEnum.equals(ColorEnum.getEnum("")));        assertEquals(false, colorEnum.equals(ColorEnum.getEnum("This ColorEnum does not exist.")));    }}
/* * Copyright 2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.enums;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Test cases for the {@link Enum} class equals method. * * @author Matthias Eichel * @author Stephen Colebourne * @version $Id: EnumEqualsTest.java,v 1.1 2004/06/01 20:54:57 scolebourne Exp $ */public final class EnumEqualsTest extends TestCase {    public EnumEqualsTest(String name) {        super(name);    }    public void setUp() {    }    public static Test suite() {        TestSuite suite = new TestSuite(EnumEqualsTest.class);        suite.setName("Enum equals Tests");        return suite;    }    //-----------------------------------------------------------------------    static final class CarColorEnum extends Enum {        public static final CarColorEnum BLACK = new CarColorEnum("black");        public static final CarColorEnum BROWN = new CarColorEnum("brown");        public static final CarColorEnum YELLOW = new CarColorEnum("yellow");        public static final CarColorEnum BLUE = new CarColorEnum("blue");        public static final CarColorEnum RED = new CarColorEnum("red");        private CarColorEnum(String enumAsString) {            super(enumAsString);        }    }    static final class TrafficlightColorEnum extends Enum {        public static final TrafficlightColorEnum RED = new TrafficlightColorEnum("red");        public static final TrafficlightColorEnum YELLOW = new TrafficlightColorEnum("yellow");        public static final TrafficlightColorEnum GREEN = new TrafficlightColorEnum("green");        private TrafficlightColorEnum(String enumAsString) {            super(enumAsString);        }    }    static class TotallyUnrelatedClass {        private final String name;        public TotallyUnrelatedClass(final String name) {            this.name = name;        }        public String getName() {            return name;        }    }    //-----------------------------------------------------------------------    public void testEquals() {        assertEquals(false, CarColorEnum.RED.equals(TrafficlightColorEnum.RED));        assertEquals(false, CarColorEnum.YELLOW.equals(TrafficlightColorEnum.YELLOW));                assertEquals(false, TrafficlightColorEnum.RED.equals(new TotallyUnrelatedClass("red")));        assertEquals(false, CarColorEnum.RED.equals(new TotallyUnrelatedClass("red")));                assertEquals(false, TrafficlightColorEnum.RED.equals(new TotallyUnrelatedClass("some")));        assertEquals(false, CarColorEnum.RED.equals(new TotallyUnrelatedClass("some")));    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.enums;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.Iterator;import java.util.List;import java.util.Map;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Test cases for the {@link Enum} class. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id: EnumUtilsTest.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $ */public final class EnumUtilsTest extends TestCase {    public EnumUtilsTest(String name) {        super(name);    }    public void setUp() {    }    public static Test suite() {        TestSuite suite = new TestSuite(EnumUtilsTest.class);        suite.setName("EnumUtils Tests");        return suite;    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new EnumUtils());        Constructor[] cons = EnumUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(EnumUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(EnumUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testIterator() {        Iterator it = EnumUtils.iterator(ColorEnum.class);        assertSame(ColorEnum.RED, it.next());        assertSame(ColorEnum.GREEN, it.next());        assertSame(ColorEnum.BLUE, it.next());        it = EnumUtils.iterator(DummyEnum.class);        assertEquals(false, it.hasNext());    }    public void testIteratorEx() {        try {            EnumUtils.iterator(null);            fail();        } catch (IllegalArgumentException ex) {}        try {            EnumUtils.iterator(Object.class);            fail();        } catch (IllegalArgumentException ex) {}    }    //-----------------------------------------------------------------------    public void testList() {        List list = EnumUtils.getEnumList(ColorEnum.class);        Iterator it = list.iterator();        assertSame(ColorEnum.RED, it.next());        assertSame(ColorEnum.GREEN, it.next());        assertSame(ColorEnum.BLUE, it.next());        list = EnumUtils.getEnumList(DummyEnum.class);        assertEquals(0, list.size());    }    public void testListEx() {        try {            EnumUtils.getEnumList(null);            fail();        } catch (IllegalArgumentException ex) {}        try {            EnumUtils.getEnumList(Object.class);            fail();        } catch (IllegalArgumentException ex) {}    }    //-----------------------------------------------------------------------    public void testMap() {        Map map = EnumUtils.getEnumMap(ColorEnum.class);        assertTrue(map.containsValue(ColorEnum.RED));        assertTrue(map.containsValue(ColorEnum.GREEN));        assertTrue(map.containsValue(ColorEnum.BLUE));        assertSame(ColorEnum.RED, map.get("Red"));        assertSame(ColorEnum.GREEN, map.get("Green"));        assertSame(ColorEnum.BLUE, map.get("Blue"));        map = EnumUtils.getEnumMap(DummyEnum.class);        assertEquals(0, map.size());    }    public void testMapEx() {        try {            EnumUtils.getEnumMap(null);            fail();        } catch (IllegalArgumentException ex) {}        try {            EnumUtils.getEnumMap(Object.class);            fail();        } catch (IllegalArgumentException ex) {}    }    //-----------------------------------------------------------------------    public void testGet() {        assertSame(ColorEnum.RED, EnumUtils.getEnum(ColorEnum.class, "Red"));        assertSame(ColorEnum.GREEN, EnumUtils.getEnum(ColorEnum.class, "Green"));        assertSame(ColorEnum.BLUE, EnumUtils.getEnum(ColorEnum.class, "Blue"));        assertSame(null, EnumUtils.getEnum(ColorEnum.class, "Pink"));        assertSame(null, EnumUtils.getEnum(DummyEnum.class, "Pink"));    }    public void testGetEx() {        try {            EnumUtils.getEnum(null, "");            fail();        } catch (IllegalArgumentException ex) {}        try {            EnumUtils.getEnum(Object.class, "Red");            fail();        } catch (IllegalArgumentException ex) {}    }    //-----------------------------------------------------------------------    public void testGetValue() {        assertSame(ValuedColorEnum.RED, EnumUtils.getEnum(ValuedColorEnum.class, 1));        assertSame(ValuedColorEnum.GREEN, EnumUtils.getEnum(ValuedColorEnum.class, 2));        assertSame(ValuedColorEnum.BLUE, EnumUtils.getEnum(ValuedColorEnum.class, 3));        assertSame(null, EnumUtils.getEnum(ValuedColorEnum.class, 4));        assertSame(null, EnumUtils.getEnum(DummyEnum.class, 5));    }    public void testGetValueEx() {        try {            EnumUtils.getEnum(null, 0);            fail();        } catch (IllegalArgumentException ex) {}        try {            EnumUtils.getEnum(Object.class, 2);            fail();        } catch (IllegalArgumentException ex) {}    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.util.ArrayList;import java.util.HashMap;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.builder.ToStringStyle}. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id: StandardToStringStyleTest.java,v 1.7 2004/02/18 23:00:51 ggregory Exp $ */public class StandardToStringStyleTest extends TestCase {    private final Integer base = new Integer(5);    private final String baseStr = "Integer";        private static final StandardToStringStyle STYLE = new StandardToStringStyle();        static {        STYLE.setUseShortClassName(true);        STYLE.setUseIdentityHashCode(false);        STYLE.setArrayStart("[");        STYLE.setArraySeparator(", ");        STYLE.setArrayEnd("]");        STYLE.setNullText("%NULL%");        STYLE.setSizeStartText("%SIZE=");        STYLE.setSizeEndText("%");        STYLE.setSummaryObjectStartText("%");        STYLE.setSummaryObjectEndText("%");    }        public StandardToStringStyleTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(StandardToStringStyleTest.class);        suite.setName("StandardToStringStyle Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();        ToStringBuilder.setDefaultStyle(STYLE);    }    protected void tearDown() throws Exception {        super.tearDown();        ToStringBuilder.setDefaultStyle(STYLE);    }    //----------------------------------------------------------------        public void testBlank() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());    }    public void testAppendSuper() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).appendSuper("Integer@8888[%NULL%]").toString());                assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());        assertEquals(baseStr + "[%NULL%,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[%NULL%]").append("a", "hello").toString());        assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());    }        public void testObject() {        Integer i3 = new Integer(3);        Integer i4 = new Integer(4);        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) null).toString());        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());        assertEquals(baseStr + "[a=%NULL%]", new ToStringBuilder(base).append("a", (Object) null).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());        assertEquals(baseStr + "[a=%Integer%]", new ToStringBuilder(base).append("a", i3, false).toString());        assertEquals(baseStr + "[a=%SIZE=0%]", new ToStringBuilder(base).append("a", new ArrayList(), false).toString());        assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList(), true).toString());        assertEquals(baseStr + "[a=%SIZE=0%]", new ToStringBuilder(base).append("a", new HashMap(), false).toString());        assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap(), true).toString());        assertEquals(baseStr + "[a=%SIZE=0%]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());        assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());    }    public void testLong() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());    }    public void testObjectArray() {        Object[] array = new Object[] {null, base, new int[] {3, 6}};        assertEquals(baseStr + "[[%NULL%, 5, [3, 6]]]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[[%NULL%, 5, [3, 6]]]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArray() {        long[] array = new long[] {1, 2, -3, 4};        assertEquals(baseStr + "[[1, 2, -3, 4]]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[[1, 2, -3, 4]]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArrayArray() {        long[][] array = new long[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[[[1, 2], %NULL%, [5]]]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[[[1, 2], %NULL%, [5]]]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) array).toString());    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.util.ArrayList;import java.util.HashMap;import junit.framework.TestCase;/** * Unit tests {@link org.apache.commons.lang.builder.ToStringStyle.SHORT_PREFIX_STYLE}. *  * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> * @version $Id: ShortPrefixToStringStyleTest.java,v 1.2 2004/02/18 23:00:51 ggregory Exp $ */public class ShortPrefixToStringStyleTest extends TestCase {    private final Integer base = new Integer(5);    private final String baseStr = "Integer";        protected void setUp() throws Exception {        super.setUp();        ToStringBuilder.setDefaultStyle(ToStringStyle.SHORT_PREFIX_STYLE);    }    protected void tearDown() throws Exception {        super.tearDown();        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);    }    //----------------------------------------------------------------        public void testBlank() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());    }    public void testAppendSuper() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());                assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());        assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());        assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());    }        public void testObject() {        Integer i3 = new Integer(3);        Integer i4 = new Integer(4);        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());        assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());        assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList(), false).toString());        assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList(), true).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap(), false).toString());        assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap(), true).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());        assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());    }    public void testLong() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());    }    public void testObjectArray() {        Object[] array = new Object[] {null, base, new int[] {3, 6}};        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArray() {        long[] array = new long[] {1, 2, -3, 4};        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArrayArray() {        long[][] array = new long[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    }
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.util.ArrayList;import java.util.HashMap;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.builder.DefaultToStringStyleTest}. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id: DefaultToStringStyleTest.java,v 1.6 2004/02/18 23:00:51 ggregory Exp $ */public class DefaultToStringStyleTest extends TestCase {    private final Integer base = new Integer(5);    private final String baseStr = base.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(base));        public DefaultToStringStyleTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(DefaultToStringStyleTest.class);        suite.setName("DefaultToStringStyle Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);    }    protected void tearDown() throws Exception {        super.tearDown();        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);    }    //----------------------------------------------------------------        public void testBlank() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());    }    public void testAppendSuper() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());                assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());        assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());        assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());    }        public void testObject() {        Integer i3 = new Integer(3);        Integer i4 = new Integer(4);        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());        assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());        assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList(), false).toString());        assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList(), true).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap(), false).toString());        assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap(), true).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());        assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());    }    public void testLong() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());    }    public void testObjectArray() {        Object[] array = new Object[] {null, base, new int[] {3, 6}};        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArray() {        long[] array = new long[] {1, 2, -3, 4};        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArrayArray() {        long[][] array = new long[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.builder.HashCodeBuilder}. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id: HashCodeBuilderTest.java,v 1.7 2004/02/18 23:00:51 ggregory Exp $ */public class HashCodeBuilderTest extends TestCase {    public HashCodeBuilderTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(HashCodeBuilderTest.class);        suite.setName("HashCodeBuilder Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructorEx1() {        try {            new HashCodeBuilder(0, 0);                    } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testConstructorEx2() {        try {            new HashCodeBuilder(2, 2);                    } catch (IllegalArgumentException ex) {            return;        }        fail();    }    static class TestObject {        private int a;        public TestObject(int a) {            this.a = a;        }        public boolean equals(Object o) {            if (o == this) {                return true;            }            if (!(o instanceof TestObject)) {                return false;            }            TestObject rhs = (TestObject) o;            return (a == rhs.a);        }        public void setA(int a) {            this.a = a;        }        public int getA() {            return a;        }    }    static class TestSubObject extends TestObject {        private int b;        transient private int t;        public TestSubObject() {            super(0);        }        public TestSubObject(int a, int b, int t) {            super(a);            this.b = b;            this.t = t;        }        public boolean equals(Object o) {            if (o == this) {                return true;            }            if (!(o instanceof TestSubObject)) {                return false;            }            TestSubObject rhs = (TestSubObject) o;            return super.equals(o) && (b == rhs.b);        }    }    public void testReflectionHashCode() {        assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0)));        assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456)));    }    public void testReflectionHierarchyHashCode() {        assertEquals(17 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0)));        assertEquals(17 * 37 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0), true));        assertEquals((17 * 37 + 7890) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890, 0)));        assertEquals(((17 * 37 + 7890) * 37 + 0) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890, 0), true));    }    public void testReflectionHierarchyHashCodeEx1() {        try {            HashCodeBuilder.reflectionHashCode(0, 0, new TestSubObject(0, 0, 0), true);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testReflectionHierarchyHashCodeEx2() {        try {            HashCodeBuilder.reflectionHashCode(2, 2, new TestSubObject(0, 0, 0), true);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testReflectionHashCodeEx1() {        try {            HashCodeBuilder.reflectionHashCode(0, 0, new TestObject(0), true);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testReflectionHashCodeEx2() {        try {            HashCodeBuilder.reflectionHashCode(2, 2, new TestObject(0), true);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testReflectionHashCodeEx3() {        try {            HashCodeBuilder.reflectionHashCode(13, 19, null, true);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testSuper() {        Object obj = new Object();        assertEquals(17 * 37 + (19 * 41 + obj.hashCode()), new HashCodeBuilder(17, 37).appendSuper(            new HashCodeBuilder(19, 41).append(obj).toHashCode()        ).toHashCode());    }    public void testObject() {        Object obj = null;        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj = new Object();        assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testLong() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long) 0L).toHashCode());        assertEquals(17 * 37 + (int) (123456789L ^ (123456789L >> 32)), new HashCodeBuilder(17, 37).append((long) 123456789L).toHashCode());    }    public void testInt() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int) 0).toHashCode());        assertEquals(17 * 37 + 123456, new HashCodeBuilder(17, 37).append((int) 123456).toHashCode());    }    public void testShort() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short) 0).toHashCode());        assertEquals(17 * 37 + 12345, new HashCodeBuilder(17, 37).append((short) 12345).toHashCode());    }    public void testChar() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char) 0).toHashCode());        assertEquals(17 * 37 + 1234, new HashCodeBuilder(17, 37).append((char) 1234).toHashCode());    }    public void testByte() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte) 0).toHashCode());        assertEquals(17 * 37 + 123, new HashCodeBuilder(17, 37).append((byte) 123).toHashCode());    }    public void testDouble() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double) 0d).toHashCode());        double d = 1234567.89;        long l = Double.doubleToLongBits(d);        assertEquals(17 * 37 + (int) (l ^ (l >> 32)), new HashCodeBuilder(17, 37).append(d).toHashCode());    }    public void testFloat() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode());        float f = 1234.89f;        int i = Float.floatToIntBits(f);        assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode());    }    public void testBoolean() {        assertEquals(17 * 37 + 0, new HashCodeBuilder(17, 37).append(true).toHashCode());        assertEquals(17 * 37 + 1, new HashCodeBuilder(17, 37).append(false).toHashCode());    }    public void testObjectArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode());        Object[] obj = new Object[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = new Object();        assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = new Object();        assertEquals( (17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testObjectArrayAsObject() {        Object[] obj = new Object[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = new Object();        assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = new Object();        assertEquals( (17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testLongArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode());        long[] obj = new long[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = 5L;        int h1 = (int) (5L ^ (5L >> 32));        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = 6L;        int h2 = (int) (6L ^ (6L >> 32));        assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testLongArrayAsObject() {        long[] obj = new long[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = 5L;        int h1 = (int) (5L ^ (5L >> 32));        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = 6L;        int h2 = (int) (6L ^ (6L >> 32));        assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testIntArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode());        int[] obj = new int[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = 6;        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testIntArrayAsObject() {        int[] obj = new int[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = 6;        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testShortArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode());        short[] obj = new short[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = (short) 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = (short) 6;        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testShortArrayAsObject() {        short[] obj = new short[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = (short) 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = (short) 6;        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testCharArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode());        char[] obj = new char[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = (char) 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = (char) 6;        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testCharArrayAsObject() {        char[] obj = new char[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = (char) 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = (char) 6;        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testByteArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode());        byte[] obj = new byte[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = (byte) 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = (byte) 6;        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testByteArrayAsObject() {        byte[] obj = new byte[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = (byte) 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = (byte) 6;        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testDoubleArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode());        double[] obj = new double[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = 5.4d;        long l1 = Double.doubleToLongBits(5.4d);        int h1 = (int) (l1 ^ (l1 >> 32));        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = 6.3d;        long l2 = Double.doubleToLongBits(6.3d);        int h2 = (int) (l2 ^ (l2 >> 32));        assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testDoubleArrayAsObject() {        double[] obj = new double[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = 5.4d;        long l1 = Double.doubleToLongBits(5.4d);        int h1 = (int) (l1 ^ (l1 >> 32));        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = 6.3d;        long l2 = Double.doubleToLongBits(6.3d);        int h2 = (int) (l2 ^ (l2 >> 32));        assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testFloatArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode());        float[] obj = new float[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = 5.4f;        int h1 = Float.floatToIntBits(5.4f);        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = 6.3f;        int h2 = Float.floatToIntBits(6.3f);        assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testFloatArrayAsObject() {        float[] obj = new float[2];        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = 5.4f;        int h1 = Float.floatToIntBits(5.4f);        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = 6.3f;        int h2 = Float.floatToIntBits(6.3f);        assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testBooleanArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode());        boolean[] obj = new boolean[2];        assertEquals((17 * 37 + 1) * 37 + 1 , new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = true;        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = false;        assertEquals( (17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testBooleanArrayAsObject() {        boolean[] obj = new boolean[2];        assertEquals((17 * 37 + 1) * 37 + 1 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = true;        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = false;        assertEquals( (17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testBooleanMultiArray() {        boolean[][] obj = new boolean[2][];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = new boolean[0];        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = new boolean[1];        assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = new boolean[2];        assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0][0] = true;        assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = new boolean[1];        assertEquals( (((17 * 37 + 0) * 37 + 1) * 37 + 1), new HashCodeBuilder(17, 37).append(obj).toHashCode());    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests for {@link org.apache.commons.lang.builder.ToStringBuilder}. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> * @author <a href="mailto:alex@apache.org">Alex Chaffee</a> * @version $Id: ToStringBuilderTest.java,v 1.15 2004/07/01 17:58:09 ggregory Exp $ */public class ToStringBuilderTest extends TestCase {    private final Integer base = new Integer(5);    private final String baseStr = base.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(base));        public ToStringBuilderTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(ToStringBuilderTest.class);        suite.setName("ToStringBuilder Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructorEx1() {        assertEquals("<null>", new ToStringBuilder(null).toString());    }    public void testConstructorEx2() {        assertEquals("<null>", new ToStringBuilder(null, null).toString());        new ToStringBuilder(this.base, null).toString();    }    public void testConstructorEx3() {        assertEquals("<null>", new ToStringBuilder(null, null, null).toString());        new ToStringBuilder(this.base, null, null);        new ToStringBuilder(this.base, ToStringStyle.DEFAULT_STYLE, null);    }    public void testGetSetDefault() {        try {            ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);            assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE, ToStringBuilder.getDefaultStyle());        } finally {            // reset for other tests            ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);        }    }    public void testSetDefaultEx() {        try {            ToStringBuilder.setDefaultStyle(null);                    } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testBlank() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());    }        /**     * Test wrapper for int primitive.     */    public void testReflectionInteger() {        assertEquals(baseStr + "[value=5]", ToStringBuilder.reflectionToString(base));    }    /**     * Test wrapper for char primitive.     */    public void testReflectionCharacter() {        Character c = new Character('A');        assertEquals(this.toBaseString(c) + "[value=A]", ToStringBuilder.reflectionToString(c));    }    /**     * Test wrapper for char boolean.     */    public void testReflectionBoolean() {        Boolean b;        b = Boolean.TRUE;        assertEquals(this.toBaseString(b) + "[value=true]", ToStringBuilder.reflectionToString(b));        b = Boolean.FALSE;        assertEquals(this.toBaseString(b) + "[value=false]", ToStringBuilder.reflectionToString(b));    }    /**     * Create the same toString() as Object.toString().     * @param o the object to create the string for.     * @return a String in the Object.toString format.     */    private String toBaseString(Object o) {        return o.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(o));    }        // Reflection Array tests        //    // Note on the following line of code repeated in the reflection array tests.    //    // assertReflectionArray("<null>", array);    //    // The expected value is not baseStr + "[<null>]" since array==null and is typed as Object.    // The null array does not carry array type information.    // If we added a primitive array type constructor and pile of associated methods,     // then type declaring type information could be carried forward. IMHO, null is null.    //    // Gary Gregory - 2003-03-12 - ggregory@seagullsw.com      //        public void assertReflectionArray(String expected, Object actual) {        if (actual == null) {            // Until ToStringBuilder supports null objects.            return;        }        assertEquals(expected, ToStringBuilder.reflectionToString(actual));        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null));        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, true));        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, false));    }    public void testReflectionObjectArray() {        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{<null>,5,{3,6}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }    public void testReflectionLongArray() {        long[] array = new long[] { 1, 2, -3, 4 };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }    public void testReflectionIntArray() {        int[] array = new int[] { 1, 2, -3, 4 };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }    public void testReflectionShortArray() {        short[] array = new short[] { 1, 2, -3, 4 };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }    public void testReflectionyteArray() {        byte[] array = new byte[] { 1, 2, -3, 4 };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }    public void testReflectionCharArray() {        char[] array = new char[] { 'A', '2', '_', 'D' };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{A,2,_,D}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }    public void testReflectionDoubleArray() {        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }    public void testReflectionFloatArray() {        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }    public void testReflectionBooleanArray() {        boolean[] array = new boolean[] { true, false, false };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{true,false,false}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }        // Reflection Array Array tests    public void testReflectionFloatArrayArray() {        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }    public void testReflectionLongArrayArray() {        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }    public void testReflectionIntArrayArray() {        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }    public void testReflectionhortArrayArray() {        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }    public void testReflectionByteArrayArray() {        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }    public void testReflectionCharArrayArray() {        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }    public void testReflectionDoubleArrayArray() {        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }    public void testReflectionBooleanArrayArray() {        boolean[][] array = new boolean[][] { { true, false }, null, { false } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));        assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyReflectionRegistry();    }        // Reflection hierarchy tests    public void testReflectionHierarchyArrayList() {        List base = new ArrayList();        String baseStr = this.toBaseString(base);        assertEquals(baseStr + "[elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>},size=0,modCount=0]", ToStringBuilder.reflectionToString(base, null, true));        assertEquals(baseStr + "[size=0]", ToStringBuilder.reflectionToString(base, null, false));        this.validateEmptyReflectionRegistry();    }    public void testReflectionHierarchy() {        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();        String baseStr = this.toBaseString(baseA);        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));        assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, List.class));        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));                ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();        baseStr = this.toBaseString(baseB);        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));        assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, List.class));        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));        assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        this.validateEmptyReflectionRegistry();    }static class ReflectionTestFixtureA {private char a='a';        private transient char transientA='t';}static class ReflectionTestFixtureB extends ReflectionTestFixtureA {private char b='b';        private transient char transientB='t';}    public void testInnerClassReflection() {        Outer outer = new Outer();        assertEquals(toBaseString(outer) + "[inner=" + toBaseString(outer.inner) + "[]]", outer.toString());    }        static class Outer {        Inner inner = new Inner();        class Inner {            public String toString() {                return ToStringBuilder.reflectionToString(this);            }        }        public String toString() {            return ToStringBuilder.reflectionToString(this);        }    }        // Reflection cycle tests    /**     * Test an array element pointing to its container.     */    public void testReflectionArrayCycle() throws Exception {        Object[] objects = new Object[1];        objects[0] = objects;        assertEquals(            this.toBaseString(objects) + "[{" + this.toBaseString(objects) + "}]",            ToStringBuilder.reflectionToString(objects));        this.validateEmptyReflectionRegistry();    }    /**     * Test an array element pointing to its container.     */    public void testReflectionArrayCycleLevel2() throws Exception {        Object[] objects = new Object[1];        Object[] objectsLevel2 = new Object[1];        objects[0] = objectsLevel2;        objectsLevel2[0] = (Object) objects;        assertEquals(            this.toBaseString(objects) + "[{{" + this.toBaseString(objects) + "}}]",            ToStringBuilder.reflectionToString(objects));        assertEquals(            this.toBaseString(objectsLevel2) + "[{{" + this.toBaseString(objectsLevel2) + "}}]",            ToStringBuilder.reflectionToString(objectsLevel2));        this.validateEmptyReflectionRegistry();    }    public void testReflectionArrayArrayCycle() throws Exception {        Object[][] objects = new Object[2][2];        objects[0][0] = objects;        objects[0][1] = objects;        objects[1][0] = objects;        objects[1][1] = objects;        String basicToString = this.toBaseString(objects);        assertEquals(            basicToString                + "[{{"                + basicToString                + ","                + basicToString                + "},{"                + basicToString                + ","                + basicToString                + "}}]",            ToStringBuilder.reflectionToString(objects));        this.validateEmptyReflectionRegistry();    }    /**     * A reflection test fixture.     */    static class ReflectionTestCycleA {        ReflectionTestCycleB b;        public String toString() {            return ToStringBuilder.reflectionToString(this);        }    }    /**     * A reflection test fixture.     */    static class ReflectionTestCycleB {        ReflectionTestCycleA a;        public String toString() {            return ToStringBuilder.reflectionToString(this);        }    }    /**     * A reflection test fixture.     */    static class SimpleReflectionTestFixture {        Object o;        public SimpleReflectionTestFixture() {        }        public SimpleReflectionTestFixture(Object o) {            this.o = o;        }        public String toString() {            return ToStringBuilder.reflectionToString(this);        }    }    /**     * Test an Object pointing to itself, the simplest test.     *      * @throws Exception     */    public void testSimpleReflectionObjectCycle() throws Exception {        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();        simple.o = simple;        assertTrue(ReflectionToStringBuilder.getRegistry().isEmpty());        assertEquals(this.toBaseString(simple) + "[o=" + this.toBaseString(simple) + "]", simple.toString());        this.validateEmptyReflectionRegistry();    }    /**     * Test Objects pointing to each other.     *      * @throws Exception     */    public void testReflectionObjectCycle() throws Exception {        ReflectionTestCycleA a = new ReflectionTestCycleA();        ReflectionTestCycleB b = new ReflectionTestCycleB();        a.b = b;        b.a = a;        assertEquals(            this.toBaseString(a) + "[b=" + this.toBaseString(b) + "[a=" + this.toBaseString(a) + "]]",            a.toString());        this.validateEmptyReflectionRegistry();    }    /**     * Test a nasty combination of arrays and Objects pointing to each other.     * objects[0] -> SimpleReflectionTestFixture[ o -> objects ]     *      * @throws Exception     */    public void testReflectionArrayAndObjectCycle() throws Exception {        Object[] objects = new Object[1];        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);        objects[0] = (Object) simple;        assertEquals(            this.toBaseString(objects)                + "[{"                + this.toBaseString(simple)                + "[o="                + this.toBaseString(objects)                + "]"                + "}]",            ToStringBuilder.reflectionToString(objects));        assertEquals(            this.toBaseString(simple)                + "[o={"                + this.toBaseString(simple)                + "}]",            ToStringBuilder.reflectionToString(simple));        this.validateEmptyReflectionRegistry();    }            void validateEmptyReflectionRegistry() {        assertTrue(ReflectionToStringBuilder.getRegistry().isEmpty());            }    //  End: Reflection cycle tests    public void testAppendSuper() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());                assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());        assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());        assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());    }        public void testAppendToString() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).appendToString("Integer@8888[]").toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendToString("Integer@8888[<null>]").toString());                assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendToString("Integer@8888[]").append("a", "hello").toString());        assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendToString("Integer@8888[<null>]").append("a", "hello").toString());        assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendToString(null).append("a", "hello").toString());    }        public void testObject() {        Integer i3 = new Integer(3);        Integer i4 = new Integer(4);        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());        assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());        assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList(), false).toString());        assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList(), true).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap(), false).toString());        assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap(), true).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());        assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());    }    public void testLong() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());    }    public void testInt() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((int) 3).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (int) 3).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (int) 3).append("b", (int) 4).toString());    }    public void testShort() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((short) 3).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (short) 3).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (short) 3).append("b", (short) 4).toString());    }    public void testChar() {        assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString());        assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString());        assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString());    }    public void testByte() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString());    }    public void testDouble() {        assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString());        assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString());        assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (double) 3.2).append("b", (double) 4.3).toString());    }    public void testFloat() {        assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString());        assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString());        assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString());    }    public void testBoolean() {        assertEquals(baseStr + "[true]", new ToStringBuilder(base).append(true).toString());        assertEquals(baseStr + "[a=true]", new ToStringBuilder(base).append("a", true).toString());        assertEquals(baseStr + "[a=true,b=false]", new ToStringBuilder(base).append("a", true).append("b", false).toString());    }    public void testObjectArray() {        Object[] array = new Object[] {null, base, new int[] {3, 6}};        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArray() {        long[] array = new long[] {1, 2, -3, 4};        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testIntArray() {        int[] array = new int[] {1, 2, -3, 4};        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testShortArray() {        short[] array = new short[] {1, 2, -3, 4};        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }        public void testByteArray() {        byte[] array = new byte[] {1, 2, -3, 4};        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testCharArray() {        char[] array = new char[] {'A', '2', '_', 'D'};        assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testDoubleArray() {        double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3};        assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testFloatArray() {        float[] array = new float[] {1.0f, 2.9876f, -3.00001f, 4.3f};        assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }        public void testBooleanArray() {        boolean[] array = new boolean[] {true, false, false};        assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArrayArray() {        long[][] array = new long[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testIntArrayArray() {        int[][] array = new int[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testShortArrayArray() {        short[][] array = new short[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testByteArrayArray() {        byte[][] array = new byte[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testCharArrayArray() {        char[][] array = new char[][] {{'A', 'B'}, null, {'p'}};        assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testDoubleArrayArray() {        double[][] array = new double[][] {{1.0, 2.29686}, null, {Double.NaN}};        assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testFloatArrayArray() {        float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}};        assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testBooleanArrayArray() {        boolean[][] array = new boolean[][] {{true, false}, null, {false}};        assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testSimpleReflectionStatics() {        SimpleReflectionStaticFieldsFixture instance1 = new SimpleReflectionStaticFieldsFixture();        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]",            ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]",            ReflectionToStringBuilder.toString(instance1, null, true, true, SimpleReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]",            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]",            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));    }    /**     * Tests ReflectionToStringBuilder.toString() for statics.     */    public void testReflectionStatics() {        ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture();        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]",            ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]",            ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]",            this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]",            this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));    }    /**     * Tests ReflectionToStringBuilder.toString() for statics.     */    public void testInheritedReflectionStatics() {        InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture();        assertEquals(            this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]",            ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]",            ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]",            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]",            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));    }    /**     * <p>This method uses reflection to build a suitable     * <code>toString</code> value which includes static fields.</p>     *     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private     * fields. This means that it will throw a security exception if run     * under a security manager, if the permissions are not set up correctly.     * It is also not as efficient as testing explicitly. </p>     *     * <p>Transient fields are not output.</p>     *     * <p>Superclass fields will be appended up to and including the specified superclass.      * A null superclass is treated as <code>java.lang.Object</code>.</p>     *     * <p>If the style is <code>null</code>, the default     * <code>ToStringStyle</code> is used.</p>     *      * @param object  the Object to be output     * @param style  the style of the <code>toString</code> to create,     *  may be <code>null</code>     * @param reflectUpToClass  the superclass to reflect up to (inclusive),     *  may be <code>null</code>     * @return the String result     * @throws IllegalArgumentException if the Object is <code>null</code>     */    public Object toStringWithStatics(Object object, ToStringStyle style, Class reflectUpToClass) {        return ReflectionToStringBuilder.toString(object, style, false, true, reflectUpToClass);    }    /**     * Tests ReflectionToStringBuilder.toString() for statics.     */    class ReflectionStaticFieldsFixture {        static final String staticString = "staticString";        static final int staticInt = 12345;        static final transient String staticTransientString = "staticTransientString";        static final transient int staticTransientInt = 54321;        String instanceString = "instanceString";        int instanceInt = 67890;        transient String transientString = "transientString";        transient int transientInt = 98765;    }    /**     * Test fixture for ReflectionToStringBuilder.toString() for statics.     */    class SimpleReflectionStaticFieldsFixture {        static final String staticString = "staticString";        static final int staticInt = 12345;    }    /**     * Test fixture for ReflectionToStringBuilder.toString() for statics.     */    class InheritedReflectionStaticFieldsFixture extends SimpleReflectionStaticFieldsFixture {        static final String staticString2 = "staticString2";        static final int staticInt2 = 67890;    }    public void testReflectionNull() {        assertEquals("<null>", ReflectionToStringBuilder.toString(null));    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.util.ArrayList;import java.util.HashMap;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.builder.SimpleToStringStyleTest}. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id: SimpleToStringStyleTest.java,v 1.6 2004/02/18 23:00:51 ggregory Exp $ */public class SimpleToStringStyleTest extends TestCase {    private final Integer base = new Integer(5);        public SimpleToStringStyleTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(SimpleToStringStyleTest.class);        suite.setName("SimpleToStringStyle Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();        ToStringBuilder.setDefaultStyle(ToStringStyle.SIMPLE_STYLE);    }    protected void tearDown() throws Exception {        super.tearDown();        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);    }    //----------------------------------------------------------------        public void testBlank() {        assertEquals("", new ToStringBuilder(base).toString());    }    public void testAppendSuper() {        assertEquals("", new ToStringBuilder(base).appendSuper("").toString());        assertEquals("<null>", new ToStringBuilder(base).appendSuper("<null>").toString());                assertEquals("hello", new ToStringBuilder(base).appendSuper("").append("a", "hello").toString());        assertEquals("<null>,hello", new ToStringBuilder(base).appendSuper("<null>").append("a", "hello").toString());        assertEquals("hello", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());    }        public void testObject() {        Integer i3 = new Integer(3);        Integer i4 = new Integer(4);        assertEquals("<null>", new ToStringBuilder(base).append((Object) null).toString());        assertEquals("3", new ToStringBuilder(base).append(i3).toString());        assertEquals("<null>", new ToStringBuilder(base).append("a", (Object) null).toString());        assertEquals("3", new ToStringBuilder(base).append("a", i3).toString());        assertEquals("3,4", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());        assertEquals("<Integer>", new ToStringBuilder(base).append("a", i3, false).toString());        assertEquals("<size=0>", new ToStringBuilder(base).append("a", new ArrayList(), false).toString());        assertEquals("[]", new ToStringBuilder(base).append("a", new ArrayList(), true).toString());        assertEquals("<size=0>", new ToStringBuilder(base).append("a", new HashMap(), false).toString());        assertEquals("{}", new ToStringBuilder(base).append("a", new HashMap(), true).toString());        assertEquals("<size=0>", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());        assertEquals("{}", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());    }    public void testLong() {        assertEquals("3", new ToStringBuilder(base).append(3L).toString());        assertEquals("3", new ToStringBuilder(base).append("a", 3L).toString());        assertEquals("3,4", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());    }    public void testObjectArray() {        Object[] array = new Object[] {null, base, new int[] {3, 6}};        assertEquals("{<null>,5,{3,6}}", new ToStringBuilder(base).append(array).toString());        assertEquals("{<null>,5,{3,6}}", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals("<null>", new ToStringBuilder(base).append(array).toString());        assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArray() {        long[] array = new long[] {1, 2, -3, 4};        assertEquals("{1,2,-3,4}", new ToStringBuilder(base).append(array).toString());        assertEquals("{1,2,-3,4}", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals("<null>", new ToStringBuilder(base).append(array).toString());        assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArrayArray() {        long[][] array = new long[][] {{1, 2}, null, {5}};        assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString());        assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals("<null>", new ToStringBuilder(base).append(array).toString());        assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString());    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.builder.EqualsBuilder}. * * @author <a href="mailto:sdowney@panix.com">Steve Downey</a> * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> * @author Maarten Coene * @version $Id: EqualsBuilderTest.java,v 1.9 2004/02/18 23:00:51 ggregory Exp $ */public class EqualsBuilderTest extends TestCase {    public EqualsBuilderTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(EqualsBuilderTest.class);        suite.setName("EqualsBuilder Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    static class TestObject {        private int a;        public TestObject() {        }        public TestObject(int a) {            this.a = a;        }        public boolean equals(Object o) {            if (o == this) {                return true;            }            if (!(o instanceof TestObject)) {                return false;            }            TestObject rhs = (TestObject) o;            return (a == rhs.a);        }        public void setA(int a) {            this.a = a;        }        public int getA() {            return a;        }    }    static class TestSubObject extends TestObject {        private int b;        public TestSubObject() {            super(0);        }        public TestSubObject(int a, int b) {            super(a);            this.b = b;        }        public boolean equals(Object o) {            if (o == this) {                return true;            }            if (!(o instanceof TestSubObject)) {                return false;            }            TestSubObject rhs = (TestSubObject) o;            return super.equals(o) && (b == rhs.b);        }        public void setB(int b) {            this.b = b;        }        public int getB() {            return b;        }    }    static class TestEmptySubObject extends TestObject {        public TestEmptySubObject(int a) {            super(a);        }    }    static class TestTSubObject extends TestObject {        private transient int t;        public TestTSubObject(int a, int t) {            super(a);            this.t = t;        }    }    static class TestTTSubObject extends TestTSubObject {        private transient int tt;        public TestTTSubObject(int a, int t, int tt) {            super(a, t);            this.tt = tt;        }    }    static class TestTTLeafObject extends TestTTSubObject {        private int leafValue;        public TestTTLeafObject(int a, int t, int tt, int leafValue) {            super(a, t, tt);            this.leafValue = leafValue;        }    }    static class TestTSubObject2 extends TestObject {        private transient int t;        public TestTSubObject2(int a, int t) {            super(a);        }        public int getT() {            return t;        }        public void setT(int t) {            this.t = t;        }    }    public void testReflectionEquals() {        TestObject o1 = new TestObject(4);        TestObject o2 = new TestObject(5);        assertTrue(EqualsBuilder.reflectionEquals(o1, o1));        assertTrue(!EqualsBuilder.reflectionEquals(o1, o2));        o2.setA(4);        assertTrue(EqualsBuilder.reflectionEquals(o1, o2));        assertTrue(!EqualsBuilder.reflectionEquals(o1, this));        assertTrue(!EqualsBuilder.reflectionEquals(o1, null));        assertTrue(!EqualsBuilder.reflectionEquals(null, o2));        assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null));    }        public void testReflectionHierarchyEquals() {        testReflectionHierarchyEquals(false);        testReflectionHierarchyEquals(true);        // Transients        assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));        assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), false));        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 0, 0, 4), new TestTTLeafObject(1, 2, 3, 4), true));        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 0), true));        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(0, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));    }    public void testReflectionHierarchyEquals(boolean testTransients) {        TestObject to1 = new TestObject(4);        TestObject to1Bis = new TestObject(4);        TestObject to1Ter = new TestObject(4);        TestObject to2 = new TestObject(5);        TestEmptySubObject teso = new TestEmptySubObject(4);        TestTSubObject ttso = new TestTSubObject(4, 1);        TestTTSubObject tttso = new TestTTSubObject(4, 1, 2);        TestTTLeafObject ttlo = new TestTTLeafObject(4, 1, 2, 3);        TestSubObject tso1 = new TestSubObject(1, 4);        TestSubObject tso1bis = new TestSubObject(1, 4);        TestSubObject tso1ter = new TestSubObject(1, 4);        TestSubObject tso2 = new TestSubObject(2, 5);        testReflectionEqualsEquivalenceRelationship(to1, to1Bis, to1Ter, to2, new TestObject(), testTransients);        testReflectionEqualsEquivalenceRelationship(tso1, tso1bis, tso1ter, tso2, new TestSubObject(), testTransients);        // More sanity checks:        // same values        assertTrue(EqualsBuilder.reflectionEquals(ttlo, ttlo, testTransients));        assertTrue(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 10), testTransients));        // same super values, diff sub values        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 11), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 11), new TestSubObject(1, 10), testTransients));        // diff super values, same sub values        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestSubObject(1, 10), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(0, 10), testTransients));        // mix super and sub types: equals        assertTrue(EqualsBuilder.reflectionEquals(to1, teso, testTransients));        assertTrue(EqualsBuilder.reflectionEquals(teso, to1, testTransients));        assertTrue(EqualsBuilder.reflectionEquals(to1, ttso, false)); // Force testTransients = false for this assert        assertTrue(EqualsBuilder.reflectionEquals(ttso, to1, false)); // Force testTransients = false for this assert        assertTrue(EqualsBuilder.reflectionEquals(to1, tttso, false)); // Force testTransients = false for this assert        assertTrue(EqualsBuilder.reflectionEquals(tttso, to1, false)); // Force testTransients = false for this assert        assertTrue(EqualsBuilder.reflectionEquals(ttso, tttso, false)); // Force testTransients = false for this assert        assertTrue(EqualsBuilder.reflectionEquals(tttso, ttso, false)); // Force testTransients = false for this assert        // mix super and sub types: NOT equals        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestEmptySubObject(1), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(new TestEmptySubObject(1), new TestObject(0), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestTSubObject(1, 1), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(new TestTSubObject(1, 1), new TestObject(0), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(1), new TestSubObject(0, 10), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestObject(1), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(to1, ttlo));        assertTrue(!EqualsBuilder.reflectionEquals(tso1, this));    }    /**     * Equivalence relationship tests inspired by "Effective Java":     * <ul>     * <li>reflection</li>     * <li>symmetry</li>     * <li>transitive</li>     * <li>consistency</li>     * <li>non-null reference</li>     * </ul>     * @param to a TestObject     * @param toBis a TestObject, equal to to and toTer     * @param toTer Left hand side, equal to to and toBis     * @param to2 a different TestObject     * @param oToChange a TestObject that will be changed     */    public void testReflectionEqualsEquivalenceRelationship(        TestObject to,        TestObject toBis,        TestObject toTer,        TestObject to2,        TestObject oToChange,        boolean testTransients) {        // reflection test        assertTrue(EqualsBuilder.reflectionEquals(to, to, testTransients));        assertTrue(EqualsBuilder.reflectionEquals(to2, to2, testTransients));        // symmetry test        assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEquals(toBis, to, testTransients));        // transitive test        assertTrue(            EqualsBuilder.reflectionEquals(to, toBis, testTransients)                && EqualsBuilder.reflectionEquals(toBis, toTer, testTransients)                && EqualsBuilder.reflectionEquals(to, toTer, testTransients));        // consistency test        oToChange.setA(to.getA());        if (oToChange instanceof TestSubObject) {            ((TestSubObject) oToChange).setB(((TestSubObject) to).getB());        }        assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));        assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));        oToChange.setA(to.getA() + 1);        if (oToChange instanceof TestSubObject) {            ((TestSubObject) oToChange).setB(((TestSubObject) to).getB() + 1);        }        assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));        // non-null reference test        assertTrue(!EqualsBuilder.reflectionEquals(to, null, testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(to2, null, testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(null, to, testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(null, to2, testTransients));        assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null, testTransients));    }    public void testSuper() {        TestObject o1 = new TestObject(4);        TestObject o2 = new TestObject(5);        assertEquals(true, new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals());        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals());        assertEquals(false, new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals());        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals());    }    public void testObject() {        TestObject o1 = new TestObject(4);        TestObject o2 = new TestObject(5);        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());        o2.setA(4);        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());        assertTrue(!new EqualsBuilder().append(o1, this).isEquals());                assertTrue(!new EqualsBuilder().append(o1, null).isEquals());        assertTrue(!new EqualsBuilder().append(null, o2).isEquals());        assertTrue(new EqualsBuilder().append((Object) null, (Object) null).isEquals());    }    public void testLong() {        long o1 = 1L;        long o2 = 2L;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());    }    public void testInt() {        int o1 = 1;        int o2 = 2;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());    }    public void testShort() {        short o1 = 1;        short o2 = 2;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());    }    public void testChar() {        char o1 = 1;        char o2 = 2;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());    }    public void testByte() {        byte o1 = 1;        byte o2 = 2;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());    }    public void testDouble() {        double o1 = 1;        double o2 = 2;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());        assertTrue(!new EqualsBuilder().append(o1, Double.NaN).isEquals());        assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals());        assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals());    }    public void testFloat() {        float o1 = 1;        float o2 = 2;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());        assertTrue(!new EqualsBuilder().append(o1, Float.NaN).isEquals());        assertTrue(new EqualsBuilder().append(Float.NaN, Float.NaN).isEquals());        assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals());    }    public void testBoolean() {        boolean o1 = true;        boolean o2 = false;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());    }    public void testObjectArray() {        TestObject[] obj1 = new TestObject[3];        obj1[0] = new TestObject(4);        obj1[1] = new TestObject(5);        obj1[2] = null;        TestObject[] obj2 = new TestObject[3];        obj2[0] = new TestObject(4);        obj2[1] = new TestObject(5);        obj2[2] = null;                assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj2, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1].setA(6);        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1].setA(5);        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[2] = obj1[1];        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[2] = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());                               obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testLongArray() {        long[] obj1 = new long[2];        obj1[0] = 5L;        obj1[1] = 6L;        long[] obj2 = new long[2];        obj2[0] = 5L;        obj2[1] = 6L;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testIntArray() {        int[] obj1 = new int[2];        obj1[0] = 5;        obj1[1] = 6;        int[] obj2 = new int[2];        obj2[0] = 5;        obj2[1] = 6;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testShortArray() {        short[] obj1 = new short[2];        obj1[0] = 5;        obj1[1] = 6;        short[] obj2 = new short[2];        obj2[0] = 5;        obj2[1] = 6;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testCharArray() {        char[] obj1 = new char[2];        obj1[0] = 5;        obj1[1] = 6;        char[] obj2 = new char[2];        obj2[0] = 5;        obj2[1] = 6;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testByteArray() {        byte[] obj1 = new byte[2];        obj1[0] = 5;        obj1[1] = 6;        byte[] obj2 = new byte[2];        obj2[0] = 5;        obj2[1] = 6;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testDoubleArray() {        double[] obj1 = new double[2];        obj1[0] = 5;        obj1[1] = 6;        double[] obj2 = new double[2];        obj2[0] = 5;        obj2[1] = 6;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testFloatArray() {        float[] obj1 = new float[2];        obj1[0] = 5;        obj1[1] = 6;        float[] obj2 = new float[2];        obj2[0] = 5;        obj2[1] = 6;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testBooleanArray() {        boolean[] obj1 = new boolean[2];        obj1[0] = true;        obj1[1] = false;        boolean[] obj2 = new boolean[2];        obj2[0] = true;        obj2[1] = false;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = true;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testMultiLongArray() {        long[][] array1 = new long[2][2];        long[][] array2 = new long[2][2];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMultiIntArray() {        int[][] array1 = new int[2][2];        int[][] array2 = new int[2][2];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMultiShortArray() {        short[][] array1 = new short[2][2];        short[][] array2 = new short[2][2];        for (short i = 0; i < array1.length; ++i) {            for (short j = 0; j < array1[0].length; j++) {                array1[i][j] = i;                array2[i][j] = i;            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMultiCharArray() {        char[][] array1 = new char[2][2];        char[][] array2 = new char[2][2];        for (char i = 0; i < array1.length; ++i) {            for (char j = 0; j < array1[0].length; j++) {                array1[i][j] = i;                array2[i][j] = i;            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMultiByteArray() {        byte[][] array1 = new byte[2][2];        byte[][] array2 = new byte[2][2];        for (byte i = 0; i < array1.length; ++i) {            for (byte j = 0; j < array1[0].length; j++) {                array1[i][j] = i;                array2[i][j] = i;            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMultiFloatArray() {        float[][] array1 = new float[2][2];        float[][] array2 = new float[2][2];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMultiDoubleArray() {        double[][] array1 = new double[2][2];        double[][] array2 = new double[2][2];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMultiBooleanArray() {        boolean[][] array1 = new boolean[2][2];        boolean[][] array2 = new boolean[2][2];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = (i == 1) || (j == 1);                array2[i][j] = (i == 1) || (j == 1);            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = false;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testRaggedArray() {        long array1[][] = new long[2][];        long array2[][] = new long[2][];        for (int i = 0; i < array1.length; ++i) {            array1[i] = new long[2];            array2[i] = new long[2];            for (int j = 0; j < array1[i].length; ++j) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMixedArray() {        Object array1[] = new Object[2];        Object array2[] = new Object[2];        for (int i = 0; i < array1.length; ++i) {            array1[i] = new long[2];            array2[i] = new long[2];            for (int j = 0; j < 2; ++j) {                ((long[]) array1[i])[j] = (i + 1) * (j + 1);                ((long[]) array2[i])[j] = (i + 1) * (j + 1);            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        ((long[]) array1[1])[1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testObjectArrayHiddenByObject() {        TestObject[] array1 = new TestObject[2];        array1[0] = new TestObject(4);        array1[1] = new TestObject(5);        TestObject[] array2 = new TestObject[2];        array2[0] = new TestObject(4);        array2[1] = new TestObject(5);        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1].setA(6);        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testLongArrayHiddenByObject() {        long[] array1 = new long[2];        array1[0] = 5L;        array1[1] = 6L;        long[] array2 = new long[2];        array2[0] = 5L;        array2[1] = 6L;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testIntArrayHiddenByObject() {        int[] array1 = new int[2];        array1[0] = 5;        array1[1] = 6;        int[] array2 = new int[2];        array2[0] = 5;        array2[1] = 6;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testShortArrayHiddenByObject() {        short[] array1 = new short[2];        array1[0] = 5;        array1[1] = 6;        short[] array2 = new short[2];        array2[0] = 5;        array2[1] = 6;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testCharArrayHiddenByObject() {        char[] array1 = new char[2];        array1[0] = 5;        array1[1] = 6;        char[] array2 = new char[2];        array2[0] = 5;        array2[1] = 6;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testByteArrayHiddenByObject() {        byte[] array1 = new byte[2];        array1[0] = 5;        array1[1] = 6;        byte[] array2 = new byte[2];        array2[0] = 5;        array2[1] = 6;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testDoubleArrayHiddenByObject() {        double[] array1 = new double[2];        array1[0] = 5;        array1[1] = 6;        double[] array2 = new double[2];        array2[0] = 5;        array2[1] = 6;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testFloatArrayHiddenByObject() {        float[] array1 = new float[2];        array1[0] = 5;        array1[1] = 6;        float[] array2 = new float[2];        array2[0] = 5;        array2[1] = 6;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testBooleanArrayHiddenByObject() {        boolean[] array1 = new boolean[2];        array1[0] = true;        array1[1] = false;        boolean[] array2 = new boolean[2];        array2[0] = true;        array2[1] = false;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = true;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.util.ArrayList;import java.util.HashMap;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;import org.apache.commons.lang.SystemUtils;/** * Unit tests {@link org.apache.commons.lang.builder.MultiLineToStringStyleTest}. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id: MultiLineToStringStyleTest.java,v 1.8 2004/02/18 23:22:30 ggregory Exp $ */public class MultiLineToStringStyleTest extends TestCase {    private final Integer base = new Integer(5);    private final String baseStr = base.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(base));        public MultiLineToStringStyleTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(MultiLineToStringStyleTest.class);        suite.setName("MultiLineToStringStyle Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();        ToStringBuilder.setDefaultStyle(ToStringStyle.MULTI_LINE_STYLE);    }    protected void tearDown() throws Exception {        super.tearDown();        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);    }    //----------------------------------------------------------------        public void testBlank() {        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).toString());    }    public void testAppendSuper() {        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").toString());                assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());    }        public void testObject() {        Integer i3 = new Integer(3);        Integer i4 = new Integer(4);        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) null).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  3" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(i3).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=<null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", (Object) null).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=3" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", i3).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=3" + SystemUtils.LINE_SEPARATOR + "  b=4" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=<Integer>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", i3, false).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=<size=0>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", new ArrayList(), false).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=[]" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", new ArrayList(), true).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=<size=0>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", new HashMap(), false).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a={}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", new HashMap(), true).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=<size=0>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a={}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());    }    public void testLong() {        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  3" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(3L).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=3" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", 3L).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=3" + SystemUtils.LINE_SEPARATOR + "  b=4" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());    }    public void testObjectArray() {        Object[] array = new Object[] {null, base, new int[] {3, 6}};        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {<null>,5,{3,6}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {<null>,5,{3,6}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArray() {        long[] array = new long[] {1, 2, -3, 4};        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArrayArray() {        long[][] array = new long[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {{1,2},<null>,{5}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {{1,2},<null>,{5}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString());    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.util.ArrayList;import java.util.HashMap;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest}. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id: NoFieldNamesToStringStyleTest.java,v 1.6 2004/02/18 23:00:51 ggregory Exp $ */public class NoFieldNamesToStringStyleTest extends TestCase {    private final Integer base = new Integer(5);    private final String baseStr = base.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(base));        public NoFieldNamesToStringStyleTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(NoFieldNamesToStringStyleTest.class);        suite.setName("NoFieldNamesToStringStyle Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();        ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);    }    protected void tearDown() throws Exception {        super.tearDown();        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);    }    //----------------------------------------------------------------        public void testBlank() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());    }    public void testAppendSuper() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());                assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());        assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());        assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());    }        public void testObject() {        Integer i3 = new Integer(3);        Integer i4 = new Integer(4);        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append("a", i3).toString());        assertEquals(baseStr + "[3,4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());        assertEquals(baseStr + "[<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());        assertEquals(baseStr + "[<size=0>]", new ToStringBuilder(base).append("a", new ArrayList(), false).toString());        assertEquals(baseStr + "[[]]", new ToStringBuilder(base).append("a", new ArrayList(), true).toString());        assertEquals(baseStr + "[<size=0>]", new ToStringBuilder(base).append("a", new HashMap(), false).toString());        assertEquals(baseStr + "[{}]", new ToStringBuilder(base).append("a", new HashMap(), true).toString());        assertEquals(baseStr + "[<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());        assertEquals(baseStr + "[{}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());    }    public void testLong() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append("a", 3L).toString());        assertEquals(baseStr + "[3,4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());    }    public void testObjectArray() {        Object[] array = new Object[] {null, base, new int[] {3, 6}};        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArray() {        long[] array = new long[] {1, 2, -3, 4};        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArrayArray() {        long[][] array = new long[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Tests {@link org.apache.commons.lang.builder.HashCodeBuilder} and * {@link org.apache.commons.lang.builder.EqualsBuilderTest} to insure that equal * objects must have equal hash codes. *  * @author Gary Gregory * @version $Id: HashCodeBuilderAndEqualsBuilderTest.java,v 1.5 2004/02/18 23:00:51 ggregory Exp $ */public class HashCodeBuilderAndEqualsBuilderTest extends TestCase {    /**     * Constructor for HashCodeBuilderAndEqualsBuilderTest.     * @param name     */    public HashCodeBuilderAndEqualsBuilderTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(HashCodeBuilderAndEqualsBuilderTest.class);        suite.setName("HashCodeBuilderAndEqualsBuilder Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testInteger(boolean testTransients) {        Integer i1 = new Integer(12345);        Integer i2 = new Integer(12345);        assertEqualsAndHashCodeContract(i1, i2, testTransients);    }    public void testInteger() {        testInteger(false);    }    public void testIntegerWithTransients() {        testInteger(true);    }    public void testFixture() {        testFixture(false);    }    public void testFixtureWithTransients() {        testFixture(true);    }    public void testFixture(boolean testTransients) {        assertEqualsAndHashCodeContract(new TestFixture(2, 'c', "Test", (short) 2), new TestFixture(2, 'c', "Test", (short) 2), testTransients);        assertEqualsAndHashCodeContract(            new AllTransientFixture(2, 'c', "Test", (short) 2),            new AllTransientFixture(2, 'c', "Test", (short) 2),            testTransients);        assertEqualsAndHashCodeContract(            new SubTestFixture(2, 'c', "Test", (short) 2, "Same"),            new SubTestFixture(2, 'c', "Test", (short) 2, "Same"),            testTransients);        assertEqualsAndHashCodeContract(            new SubAllTransientFixture(2, 'c', "Test", (short) 2, "Same"),            new SubAllTransientFixture(2, 'c', "Test", (short) 2, "Same"),            testTransients);    }    /**     * Asserts that if <code>lhs</code> equals <code>rhs</code>      * then their hash codes MUST be identical.     *      * @param lhs The Left-Hand-Side of the equals test     * @param rhs The Right-Hand-Side of the equals test     * @param testTransients wether to test transient fields     */    public void assertEqualsAndHashCodeContract(Object lhs, Object rhs, boolean testTransients) {        if (EqualsBuilder.reflectionEquals(lhs, rhs, testTransients)) {            // test a couple of times for consistency.            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));        }    }    static class TestFixture {        int i;        char c;        String string;        short s;        TestFixture(int i, char c, String string, short s) {            this.i = i;            this.c = c;            this.string = string;            this.s = s;        }    }    static class SubTestFixture extends TestFixture {        transient String tString;        SubTestFixture(int i, char c, String string, short s, String tString) {            super(i, c, string, s);            this.tString = tString;        }    }    static class AllTransientFixture {        transient int i;        transient char c;        transient String string;        transient short s;        AllTransientFixture(int i, char c, String string, short s) {            this.i = i;            this.c = c;            this.string = string;            this.s = s;        }    }    static class SubAllTransientFixture extends AllTransientFixture {        transient String tString;        SubAllTransientFixture(int i, char c, String string, short s, String tString) {            super(i, c, string, s);            this.tString = tString;        }    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.math.BigInteger;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.builder.CompareToBuilder}. * * @author <a href="mailto:sdowney@panix.com">Steve Downey</a> * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id: CompareToBuilderTest.java,v 1.8 2004/02/18 23:00:51 ggregory Exp $ */public class CompareToBuilderTest extends TestCase {  public CompareToBuilderTest(String name) {    super(name);  }     public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(CompareToBuilderTest.class);        suite.setName("CompareToBuilder Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    static class TestObject implements Comparable {        private int a;        public TestObject(int a) {            this.a = a;        }        public boolean equals(Object o) {            if (o == this) {                return true;            }            if (!(o instanceof TestObject)) {                return false;            }            TestObject rhs = (TestObject) o;            return (a == rhs.a);        }        public void setA(int a) {            this.a = a;        }        public int getA() {            return a;        }public int compareTo(Object o) {TestObject rhs = (TestObject) o;return (a < rhs.a) ? -1 : (a > rhs.a) ? +1 : 0;}    }    static class TestSubObject extends TestObject {        private int b;        public TestSubObject() {            super(0);        }        public TestSubObject(int a, int b) {            super(a);            this.b = b;        }        public boolean equals(Object o) {            if (o == this) {                return true;            }            if (!(o instanceof TestSubObject)) {                return false;            }            TestSubObject rhs = (TestSubObject) o;            return super.equals(o) && (b == rhs.b);        }    }    static class TestTransientSubObject extends TestObject {        private transient int t;        public TestTransientSubObject(int a, int t) {            super(a);            this.t = t;        }    }    public void testReflectionCompare() {        TestObject o1 = new TestObject(4);        TestObject o2 = new TestObject(4);        assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0);        assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0);        o2.setA(5);        assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0);        assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0);    }    public void testReflectionCompareEx1() {        TestObject o1 = new TestObject(4);        try {            CompareToBuilder.reflectionCompare(o1, null);        } catch (NullPointerException ex) {            return;        }        fail();    }    public void testReflectionCompareEx2() {        TestObject o1 = new TestObject(4);        Object o2 = new Object();        try {            CompareToBuilder.reflectionCompare(o1, o2);            fail();        } catch (ClassCastException ex) {}    }    public void testReflectionHierarchyCompare() {        testReflectionHierarchyCompare(false);    }        public void testReflectionHierarchyCompareTransients() {        testReflectionHierarchyCompare(true);        TestTransientSubObject x;        TestTransientSubObject y;        TestTransientSubObject z;        x = new TestTransientSubObject(1, 1);        y = new TestTransientSubObject(2, 2);        z = new TestTransientSubObject(3, 3);        assertXYZCompareOrder(x, y, z, true);                x = new TestTransientSubObject(1, 1);        y = new TestTransientSubObject(1, 2);        z = new TestTransientSubObject(1, 3);        assertXYZCompareOrder(x, y, z, true);      }        private void assertXYZCompareOrder(Object x, Object y, Object z, boolean testTransients) {        assertTrue(0 == CompareToBuilder.reflectionCompare(x, x, testTransients));        assertTrue(0 == CompareToBuilder.reflectionCompare(y, y, testTransients));        assertTrue(0 == CompareToBuilder.reflectionCompare(z, z, testTransients));                assertTrue(0 > CompareToBuilder.reflectionCompare(x, y, testTransients));        assertTrue(0 > CompareToBuilder.reflectionCompare(x, z, testTransients));        assertTrue(0 > CompareToBuilder.reflectionCompare(y, z, testTransients));                assertTrue(0 < CompareToBuilder.reflectionCompare(y, x, testTransients));        assertTrue(0 < CompareToBuilder.reflectionCompare(z, x, testTransients));        assertTrue(0 < CompareToBuilder.reflectionCompare(z, y, testTransients));    }        public void testReflectionHierarchyCompare(boolean testTransients) {        TestObject to1 = new TestObject(1);        TestObject to2 = new TestObject(2);        TestObject to3 = new TestObject(3);        TestSubObject tso1 = new TestSubObject(1, 1);        TestSubObject tso2 = new TestSubObject(2, 2);        TestSubObject tso3 = new TestSubObject(3, 3);                assertReflectionCompareContract(to1, to1, to1, false);        assertReflectionCompareContract(to1, to2, to3, false);        assertReflectionCompareContract(tso1, tso1, tso1, false);        assertReflectionCompareContract(tso1, tso2, tso3, false);        assertReflectionCompareContract("1", "2", "3", false);                assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(1, 0), testTransients));        assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(0, 1), testTransients));        // root class        assertXYZCompareOrder(to1, to2, to3, true);        // subclass          assertXYZCompareOrder(tso1, tso2, tso3, true);      }    /**     * See "Effective Java" under "Consider Implementing Comparable".     *       * @param x an object to compare      * @param y an object to compare     * @param z an object to compare     * @param testTransients Whether to include transients in the comparison     */    public void assertReflectionCompareContract(Object x, Object y, Object z, boolean testTransients) {        // signum        assertTrue(reflectionCompareSignum(x, y, testTransients) == -reflectionCompareSignum(y, x, testTransients));                // transitive        if (CompareToBuilder.reflectionCompare(x, y, testTransients) > 0 && CompareToBuilder.reflectionCompare(y, z, testTransients) > 0){            assertTrue(CompareToBuilder.reflectionCompare(x, z, testTransients) > 0);        }                // un-named        if (CompareToBuilder.reflectionCompare(x, y, testTransients) == 0) {            assertTrue(reflectionCompareSignum(x, z, testTransients) == -reflectionCompareSignum(y, z, testTransients));        }                // strongly recommended but not strictly required        assertTrue((CompareToBuilder.reflectionCompare(x, y, testTransients) ==0 ) == EqualsBuilder.reflectionEquals(x, y, testTransients));    }        /**     * Returns the signum of the result of comparing x and y with     * <code>CompareToBuilder.reflectionCompare</code>     *      * @param lhs The "left-hand-side" of the comparison.     * @param rhs The "right-hand-side" of the comparison.     * @param testTransients Whether to include transients in the comparison     * @return int The signum     */    private int reflectionCompareSignum(Object lhs, Object rhs, boolean testTransients) {        return BigInteger.valueOf(CompareToBuilder.reflectionCompare(lhs, rhs, testTransients)).signum();    }        public void testAppendSuper() {        TestObject o1 = new TestObject(4);        TestObject o2 = new TestObject(5);        assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0);                assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0);        assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0);                assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0);    }        public void testObject() {        TestObject o1 = new TestObject(4);        TestObject o2 = new TestObject(4);        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0);        o2.setA(5);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);                assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0);    }    public void testObjectEx2() {        TestObject o1 = new TestObject(4);        Object o2 = new Object();        try {            new CompareToBuilder().append(o1, o2);            fail();        } catch (ClassCastException ex) {}    }    public void testObjectComparator() {        String o1 = "Fred";        String o2 = "Fred";        assertTrue(new CompareToBuilder().append(o1, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);        o2 = "FRED";        assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);        o2 = "FREDA";        assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);                assertTrue(new CompareToBuilder().append(o1, null, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);        assertTrue(new CompareToBuilder().append((Object) null, (Object) null, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, o1, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);    }        public void testObjectComparatorNull() {        String o1 = "Fred";        String o2 = "Fred";        assertTrue(new CompareToBuilder().append(o1, o1, null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() == 0);        o2 = "Zebra";        assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1, null).toComparison() > 0);                assertTrue(new CompareToBuilder().append(o1, null, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((Object) null, (Object) null, null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, o1, null).toComparison() < 0);    }    public void testLong() {        long o1 = 1L;        long o2 = 2L;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Long.MAX_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Long.MAX_VALUE, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Long.MIN_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Long.MIN_VALUE, o1).toComparison() < 0);    }    public void testInt() {        int o1 = 1;        int o2 = 2;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Integer.MAX_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Integer.MAX_VALUE, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Integer.MIN_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Integer.MIN_VALUE, o1).toComparison() < 0);    }    public void testShort() {        short o1 = 1;        short o2 = 2;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Short.MAX_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Short.MAX_VALUE, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Short.MIN_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Short.MIN_VALUE, o1).toComparison() < 0);    }    public void testChar() {        char o1 = 1;        char o2 = 2;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Character.MAX_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Character.MAX_VALUE, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Character.MIN_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Character.MIN_VALUE, o1).toComparison() < 0);    }    public void testByte() {        byte o1 = 1;        byte o2 = 2;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Byte.MAX_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Byte.MAX_VALUE, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Byte.MIN_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Byte.MIN_VALUE, o1).toComparison() < 0);    }    public void testDouble() {        double o1 = 1;        double o2 = 2;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Double.MAX_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Double.MAX_VALUE, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Double.MIN_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Double.MIN_VALUE, o1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Double.NaN, Double.NaN).toComparison() == 0);        assertTrue(new CompareToBuilder().append(Double.NaN, Double.MAX_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Double.POSITIVE_INFINITY, Double.MAX_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Double.NEGATIVE_INFINITY, Double.MIN_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o1, Double.NaN).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Double.NaN, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);        assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);    }    public void testFloat() {        float o1 = 1;        float o2 = 2;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Float.MAX_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Float.MAX_VALUE, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Float.MIN_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Float.MIN_VALUE, o1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Float.NaN, Float.NaN).toComparison() == 0);        assertTrue(new CompareToBuilder().append(Float.NaN, Float.MAX_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Float.POSITIVE_INFINITY, Float.MAX_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Float.NEGATIVE_INFINITY, Float.MIN_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o1, Float.NaN).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Float.NaN, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);        assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);    }    public void testBoolean() {        boolean o1 = true;        boolean o2 = false;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o2, o2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() < 0);    }    public void testObjectArray() {        TestObject[] obj1 = new TestObject[2];        obj1[0] = new TestObject(4);        obj1[1] = new TestObject(5);        TestObject[] obj2 = new TestObject[2];        obj2[0] = new TestObject(4);        obj2[1] = new TestObject(5);        TestObject[] obj3 = new TestObject[3];        obj3[0] = new TestObject(4);        obj3[1] = new TestObject(5);        obj3[2] = new TestObject(6);                assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);                obj1[1] = new TestObject(7);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((Object[]) null, (Object[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testLongArray() {        long[] obj1 = new long[2];        obj1[0] = 5L;        obj1[1] = 6L;        long[] obj2 = new long[2];        obj2[0] = 5L;        obj2[1] = 6L;        long[] obj3 = new long[3];        obj3[0] = 5L;        obj3[1] = 6L;        obj3[2] = 7L;                assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((long[]) null, (long[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testIntArray() {        int[] obj1 = new int[2];        obj1[0] = 5;        obj1[1] = 6;        int[] obj2 = new int[2];        obj2[0] = 5;        obj2[1] = 6;        int[] obj3 = new int[3];        obj3[0] = 5;        obj3[1] = 6;        obj3[2] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((int[]) null, (int[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testShortArray() {        short[] obj1 = new short[2];        obj1[0] = 5;        obj1[1] = 6;        short[] obj2 = new short[2];        obj2[0] = 5;        obj2[1] = 6;        short[] obj3 = new short[3];        obj3[0] = 5;        obj3[1] = 6;        obj3[2] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testCharArray() {        char[] obj1 = new char[2];        obj1[0] = 5;        obj1[1] = 6;        char[] obj2 = new char[2];        obj2[0] = 5;        obj2[1] = 6;        char[] obj3 = new char[3];        obj3[0] = 5;        obj3[1] = 6;        obj3[2] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((char[]) null, (char[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testByteArray() {        byte[] obj1 = new byte[2];        obj1[0] = 5;        obj1[1] = 6;        byte[] obj2 = new byte[2];        obj2[0] = 5;        obj2[1] = 6;        byte[] obj3 = new byte[3];        obj3[0] = 5;        obj3[1] = 6;        obj3[2] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((byte[]) null, (byte[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testDoubleArray() {        double[] obj1 = new double[2];        obj1[0] = 5;        obj1[1] = 6;        double[] obj2 = new double[2];        obj2[0] = 5;        obj2[1] = 6;        double[] obj3 = new double[3];        obj3[0] = 5;        obj3[1] = 6;        obj3[2] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testFloatArray() {        float[] obj1 = new float[2];        obj1[0] = 5;        obj1[1] = 6;        float[] obj2 = new float[2];        obj2[0] = 5;        obj2[1] = 6;        float[] obj3 = new float[3];        obj3[0] = 5;        obj3[1] = 6;        obj3[2] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((float[]) null, (float[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testBooleanArray() {        boolean[] obj1 = new boolean[2];        obj1[0] = true;        obj1[1] = false;        boolean[] obj2 = new boolean[2];        obj2[0] = true;        obj2[1] = false;        boolean[] obj3 = new boolean[3];        obj3[0] = true;        obj3[1] = false;        obj3[2] = true;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = true;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((boolean[]) null, (boolean[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testMultiLongArray() {        long[][] array1 = new long[2][2];        long[][] array2 = new long[2][2];        long[][] array3 = new long[2][3];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);                array3[i][j] = (i + 1) * (j + 1);            }        }        array3[1][2] = 100;        array3[1][2] = 100;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 200;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testMultiIntArray() {        int[][] array1 = new int[2][2];        int[][] array2 = new int[2][2];        int[][] array3 = new int[2][3];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);                array3[i][j] = (i + 1) * (j + 1);            }        }        array3[1][2] = 100;        array3[1][2] = 100;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 200;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testMultiShortArray() {        short[][] array1 = new short[2][2];        short[][] array2 = new short[2][2];        short[][] array3 = new short[2][3];        for (short i = 0; i < array1.length; ++i) {            for (short j = 0; j < array1[0].length; j++) {                array1[i][j] = (short)((i + 1) * (j + 1));                array2[i][j] = (short)((i + 1) * (j + 1));                array3[i][j] = (short)((i + 1) * (j + 1));            }        }        array3[1][2] = 100;        array3[1][2] = 100;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 200;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testMultiCharArray() {        char[][] array1 = new char[2][2];        char[][] array2 = new char[2][2];        char[][] array3 = new char[2][3];        for (short i = 0; i < array1.length; ++i) {            for (short j = 0; j < array1[0].length; j++) {                array1[i][j] = (char)((i + 1) * (j + 1));                array2[i][j] = (char)((i + 1) * (j + 1));                array3[i][j] = (char)((i + 1) * (j + 1));            }        }        array3[1][2] = 100;        array3[1][2] = 100;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 200;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testMultiByteArray() {        byte[][] array1 = new byte[2][2];        byte[][] array2 = new byte[2][2];        byte[][] array3 = new byte[2][3];        for (byte i = 0; i < array1.length; ++i) {            for (byte j = 0; j < array1[0].length; j++) {                array1[i][j] = (byte)((i + 1) * (j + 1));                array2[i][j] = (byte)((i + 1) * (j + 1));                array3[i][j] = (byte)((i + 1) * (j + 1));            }        }        array3[1][2] = 100;        array3[1][2] = 100;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 127;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }        public void testMultiFloatArray() {        float[][] array1 = new float[2][2];        float[][] array2 = new float[2][2];        float[][] array3 = new float[2][3];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = ((i + 1) * (j + 1));                array2[i][j] = ((i + 1) * (j + 1));                array3[i][j] = ((i + 1) * (j + 1));            }        }        array3[1][2] = 100;        array3[1][2] = 100;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 127;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testMultiDoubleArray() {        double[][] array1 = new double[2][2];        double[][] array2 = new double[2][2];        double[][] array3 = new double[2][3];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = ((i + 1) * (j + 1));                array2[i][j] = ((i + 1) * (j + 1));                array3[i][j] = ((i + 1) * (j + 1));            }        }        array3[1][2] = 100;        array3[1][2] = 100;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 127;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testMultiBooleanArray() {        boolean[][] array1 = new boolean[2][2];        boolean[][] array2 = new boolean[2][2];        boolean[][] array3 = new boolean[2][3];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = ((i == 1) ^ (j == 1));                array2[i][j] = ((i == 1) ^ (j == 1));                array3[i][j] = ((i == 1) ^ (j == 1));            }        }        array3[1][2] = false;        array3[1][2] = false;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = true;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testRaggedArray() {        long array1[][] = new long[2][];        long array2[][] = new long[2][];        long array3[][] = new long[3][];        for (int i = 0; i < array1.length; ++i) {            array1[i] = new long[2];            array2[i] = new long[2];            array3[i] = new long[3];            for (int j = 0; j < array1[i].length; ++j) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);                array3[i][j] = (i + 1) * (j + 1);            }        }        array3[1][2] = 100;        array3[1][2] = 100;                        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 200;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testMixedArray() {        Object array1[] = new Object[2];        Object array2[] = new Object[2];        Object array3[] = new Object[2];        for (int i = 0; i < array1.length; ++i) {            array1[i] = new long[2];            array2[i] = new long[2];            array3[i] = new long[3];            for (int j = 0; j < 2; ++j) {                ((long[]) array1[i])[j] = (i + 1) * (j + 1);                ((long[]) array2[i])[j] = (i + 1) * (j + 1);                ((long[]) array3[i])[j] = (i + 1) * (j + 1);            }        }        ((long[]) array3[0])[2] = 1;        ((long[]) array3[1])[2] = 1;        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        ((long[]) array1[1])[1] = 200;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testObjectArrayHiddenByObject() {        TestObject[] array1 = new TestObject[2];        array1[0] = new TestObject(4);        array1[1] = new TestObject(5);        TestObject[] array2 = new TestObject[2];        array2[0] = new TestObject(4);        array2[1] = new TestObject(5);        TestObject[] array3 = new TestObject[3];        array3[0] = new TestObject(4);        array3[1] = new TestObject(5);        array3[2] = new TestObject(6);                Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;                assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = new TestObject(7);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testLongArrayHiddenByObject() {        long[] array1 = new long[2];        array1[0] = 5L;        array1[1] = 6L;        long[] array2 = new long[2];        array2[0] = 5L;        array2[1] = 6L;        long[] array3 = new long[3];        array3[0] = 5L;        array3[1] = 6L;        array3[2] = 7L;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testIntArrayHiddenByObject() {        int[] array1 = new int[2];        array1[0] = 5;        array1[1] = 6;        int[] array2 = new int[2];        array2[0] = 5;        array2[1] = 6;        int[] array3 = new int[3];        array3[0] = 5;        array3[1] = 6;        array3[2] = 7;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testShortArrayHiddenByObject() {        short[] array1 = new short[2];        array1[0] = 5;        array1[1] = 6;        short[] array2 = new short[2];        array2[0] = 5;        array2[1] = 6;        short[] array3 = new short[3];        array3[0] = 5;        array3[1] = 6;        array3[2] = 7;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testCharArrayHiddenByObject() {        char[] array1 = new char[2];        array1[0] = 5;        array1[1] = 6;        char[] array2 = new char[2];        array2[0] = 5;        array2[1] = 6;        char[] array3 = new char[3];        array3[0] = 5;        array3[1] = 6;        array3[2] = 7;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testByteArrayHiddenByObject() {        byte[] array1 = new byte[2];        array1[0] = 5;        array1[1] = 6;        byte[] array2 = new byte[2];        array2[0] = 5;        array2[1] = 6;        byte[] array3 = new byte[3];        array3[0] = 5;        array3[1] = 6;        array3[2] = 7;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testDoubleArrayHiddenByObject() {        double[] array1 = new double[2];        array1[0] = 5;        array1[1] = 6;        double[] array2 = new double[2];        array2[0] = 5;        array2[1] = 6;        double[] array3 = new double[3];        array3[0] = 5;        array3[1] = 6;        array3[2] = 7;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testFloatArrayHiddenByObject() {        float[] array1 = new float[2];        array1[0] = 5;        array1[1] = 6;        float[] array2 = new float[2];        array2[0] = 5;        array2[1] = 6;        float[] array3 = new float[3];        array3[0] = 5;        array3[1] = 6;        array3[2] = 7;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testBooleanArrayHiddenByObject() {        boolean[] array1 = new boolean[2];        array1[0] = true;        array1[1] = false;        boolean[] array2 = new boolean[2];        array2[0] = true;        array2[1] = false;        boolean[] array3 = new boolean[3];        array3[0] = true;        array3[1] = false;        array3[2] = true;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = true;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }   }
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @author Matthew Hawthorne * @version $Id: NotImplementedExceptionTest.java,v 1.4 2004/03/04 00:13:38 scolebourne Exp $ * @see NotImplementedException */public class NotImplementedExceptionTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(NotImplementedExceptionTest.class);    }    public NotImplementedExceptionTest(String testName) {        super(testName);    }    //-----------------------------------------------------------------------    public void testConstructor_() {        NotImplementedException ex = new NotImplementedException();        assertEquals("Code is not implemented", ex.getMessage());        assertEquals(null, ex.getCause());    }    public void testConstructor_String1() {        NotImplementedException ex = new NotImplementedException((String) null);        assertEquals("Code is not implemented", ex.getMessage());        assertEquals(null, ex.getCause());    }            public void testConstructor_String2() {        NotImplementedException ex = new NotImplementedException("msg");        assertEquals("msg", ex.getMessage());        assertEquals(null, ex.getCause());    }    public void testConstructor_Throwable1() {        NotImplementedException ex = new NotImplementedException((Throwable) null);        assertEquals("Code is not implemented", ex.getMessage());        assertEquals(null, ex.getCause());    }            public void testConstructor_Throwable2() {        Exception npe = new NullPointerException();        NotImplementedException ex = new NotImplementedException(npe);        assertEquals("Code is not implemented", ex.getMessage());        assertSame(npe, ex.getCause());    }    public void testConstructor_StringThrowable1() {        NotImplementedException ex = new NotImplementedException((String) null, (Throwable) null);        assertEquals("Code is not implemented", ex.getMessage());        assertEquals(null, ex.getCause());    }    public void testConstructor_StringThrowable2() {        Exception npe = new NullPointerException();        NotImplementedException ex = new NotImplementedException("msg", npe);        assertEquals("msg", ex.getMessage());        assertSame(npe, ex.getCause());    }    public void testConstructor_Class1() {        NotImplementedException ex = new NotImplementedException((Class) null);        assertEquals("Code is not implemented", ex.getMessage());        assertEquals(null, ex.getCause());    }    public void testConstructor_Class2() {        NotImplementedException ex = new NotImplementedException(String.class);        assertEquals("Code is not implemented in class java.lang.String", ex.getMessage());        assertEquals(null, ex.getCause());    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.BooleanUtils}. * * @author Stephen Colebourne * @author Matthew Hawthorne * @version $Id: BooleanUtilsTest.java,v 1.9 2004/02/18 23:06:19 ggregory Exp $ */public class BooleanUtilsTest extends TestCase {    public BooleanUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(BooleanUtilsTest.class);    suite.setName("BooleanUtils Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new BooleanUtils());        Constructor[] cons = BooleanUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(BooleanUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void test_negate_Boolean() {        assertSame(null, BooleanUtils.negate(null));        assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE));        assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE));    }    //-----------------------------------------------------------------------    public void test_toBooleanObject_boolean() {        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject(true));        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject(false));    }    public void test_toBoolean_Boolean() {        assertEquals(true, BooleanUtils.toBoolean(Boolean.TRUE));        assertEquals(false, BooleanUtils.toBoolean(Boolean.FALSE));        assertEquals(false, BooleanUtils.toBoolean((Boolean) null));    }    public void test_toBooleanDefaultIfNull_Boolean_boolean() {        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true));        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false));        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true));        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false));        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true));        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false));    }    //-----------------------------------------------------------------------    //-----------------------------------------------------------------------    public void test_toBoolean_int() {        assertEquals(true, BooleanUtils.toBoolean(1));        assertEquals(true, BooleanUtils.toBoolean(-1));        assertEquals(false, BooleanUtils.toBoolean(0));    }        public void test_toBooleanObject_int() {        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(1));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(-1));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(0));    }        public void test_toBooleanObject_Integer() {        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));        assertEquals(null, BooleanUtils.toBooleanObject((Integer) null));    }        //-----------------------------------------------------------------------    public void test_toBoolean_int_int_int() {        assertEquals(true, BooleanUtils.toBoolean(6, 6, 7));        assertEquals(false, BooleanUtils.toBoolean(7, 6, 7));        try {            BooleanUtils.toBoolean(8, 6, 7);            fail();        } catch (IllegalArgumentException ex) {}    }        public void test_toBoolean_Integer_Integer_Integer() {        Integer six = new Integer(6);        Integer seven = new Integer(7);        assertEquals(true, BooleanUtils.toBoolean((Integer) null, null, seven));        assertEquals(false, BooleanUtils.toBoolean((Integer) null, six, null));        try {            BooleanUtils.toBoolean(null, six, seven);            fail();        } catch (IllegalArgumentException ex) {}                assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));        assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));        try {            BooleanUtils.toBoolean(new Integer(8), six, seven);            fail();        } catch (IllegalArgumentException ex) {}    }        //-----------------------------------------------------------------------    public void test_toBooleanObject_int_int_int() {        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8));        assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8));        try {            BooleanUtils.toBooleanObject(9, 6, 7, 8);            fail();        } catch (IllegalArgumentException ex) {}    }        public void test_toBooleanObject_Integer_Integer_Integer_Integer() {        Integer six = new Integer(6);        Integer seven = new Integer(7);        Integer eight = new Integer(8);        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight));        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight));        assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null));        try {            BooleanUtils.toBooleanObject(null, six, seven, eight);            fail();        } catch (IllegalArgumentException ex) {}                assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));        assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));        try {            BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);            fail();        } catch (IllegalArgumentException ex) {}    }        //-----------------------------------------------------------------------    public void test_toInteger_boolean() {        assertEquals(1, BooleanUtils.toInteger(true));        assertEquals(0, BooleanUtils.toInteger(false));    }        public void test_toIntegerObject_boolean() {        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(false));    }        public void test_toIntegerObject_Boolean() {        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(Boolean.TRUE));        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(Boolean.FALSE));        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null));    }        //-----------------------------------------------------------------------    public void test_toInteger_boolean_int_int() {        assertEquals(6, BooleanUtils.toInteger(true, 6, 7));        assertEquals(7, BooleanUtils.toInteger(false, 6, 7));    }        public void test_toInteger_Boolean_int_int_int() {        assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8));        assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8));        assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8));    }        public void test_toIntegerObject_boolean_Integer_Integer() {        Integer six = new Integer(6);        Integer seven = new Integer(7);        assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven));        assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven));    }        public void test_toIntegerObject_Boolean_Integer_Integer_Integer() {        Integer six = new Integer(6);        Integer seven = new Integer(7);        Integer eight = new Integer(8);        assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight));        assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight));        assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight));        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null, six, seven, null));    }        //-----------------------------------------------------------------------    //-----------------------------------------------------------------------    public void test_toBooleanObject_String() {        assertEquals(null, BooleanUtils.toBooleanObject((String) null));        assertEquals(null, BooleanUtils.toBooleanObject(""));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false"));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no"));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off"));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE"));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO"));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF"));        assertEquals(null, BooleanUtils.toBooleanObject("oof"));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true"));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes"));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on"));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE"));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON"));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES"));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE"));    }        public void test_toBooleanObject_String_String_String_String() {        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U"));        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U"));        assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null));        try {            BooleanUtils.toBooleanObject((String) null, "Y", "N", "U");            fail();        } catch (IllegalArgumentException ex) {}        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U"));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U"));        assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U"));        try {            BooleanUtils.toBooleanObject(null, "Y", "N", "U");            fail();        } catch (IllegalArgumentException ex) {}        try {            BooleanUtils.toBooleanObject("X", "Y", "N", "U");            fail();        } catch (IllegalArgumentException ex) {}    }    //-----------------------------------------------------------------------    public void test_toBoolean_String() {        assertEquals(false, BooleanUtils.toBoolean((String) null));        assertEquals(false, BooleanUtils.toBoolean(""));        assertEquals(false, BooleanUtils.toBoolean("off"));        assertEquals(false, BooleanUtils.toBoolean("oof"));        assertEquals(false, BooleanUtils.toBoolean("yep"));        assertEquals(false, BooleanUtils.toBoolean("trux"));        assertEquals(false, BooleanUtils.toBoolean("false"));        assertEquals(false, BooleanUtils.toBoolean("a"));        assertEquals(true, BooleanUtils.toBoolean("true")); // interned handled differently        assertEquals(true, BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString()));        assertEquals(true, BooleanUtils.toBoolean("truE"));        assertEquals(true, BooleanUtils.toBoolean("trUe"));        assertEquals(true, BooleanUtils.toBoolean("trUE"));        assertEquals(true, BooleanUtils.toBoolean("tRue"));        assertEquals(true, BooleanUtils.toBoolean("tRuE"));        assertEquals(true, BooleanUtils.toBoolean("tRUe"));        assertEquals(true, BooleanUtils.toBoolean("tRUE"));        assertEquals(true, BooleanUtils.toBoolean("TRUE"));        assertEquals(true, BooleanUtils.toBoolean("TRUe"));        assertEquals(true, BooleanUtils.toBoolean("TRuE"));        assertEquals(true, BooleanUtils.toBoolean("TRue"));        assertEquals(true, BooleanUtils.toBoolean("TrUE"));        assertEquals(true, BooleanUtils.toBoolean("TrUe"));        assertEquals(true, BooleanUtils.toBoolean("TruE"));        assertEquals(true, BooleanUtils.toBoolean("True"));        assertEquals(true, BooleanUtils.toBoolean("on"));        assertEquals(true, BooleanUtils.toBoolean("oN"));        assertEquals(true, BooleanUtils.toBoolean("On"));        assertEquals(true, BooleanUtils.toBoolean("ON"));        assertEquals(true, BooleanUtils.toBoolean("yes"));        assertEquals(true, BooleanUtils.toBoolean("yeS"));        assertEquals(true, BooleanUtils.toBoolean("yEs"));        assertEquals(true, BooleanUtils.toBoolean("yES"));        assertEquals(true, BooleanUtils.toBoolean("Yes"));        assertEquals(true, BooleanUtils.toBoolean("YeS"));        assertEquals(true, BooleanUtils.toBoolean("YEs"));        assertEquals(true, BooleanUtils.toBoolean("YES"));    }    public void test_toBoolean_String_String_String() {        assertEquals(true, BooleanUtils.toBoolean((String) null, null, "N"));        assertEquals(false, BooleanUtils.toBoolean((String) null, "Y", null));        try {            BooleanUtils.toBooleanObject((String) null, "Y", "N", "U");            fail();        } catch (IllegalArgumentException ex) {}                assertEquals(true, BooleanUtils.toBoolean("Y", "Y", "N"));        assertEquals(false, BooleanUtils.toBoolean("N", "Y", "N"));        try {            BooleanUtils.toBoolean(null, "Y", "N");            fail();        } catch (IllegalArgumentException ex) {}        try {            BooleanUtils.toBoolean("X", "Y", "N");            fail();        } catch (IllegalArgumentException ex) {}    }    //-----------------------------------------------------------------------    public void test_toStringTrueFalse_Boolean() {        assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null));        assertEquals("true", BooleanUtils.toStringTrueFalse(Boolean.TRUE));        assertEquals("false", BooleanUtils.toStringTrueFalse(Boolean.FALSE));    }        public void test_toStringOnOff_Boolean() {        assertEquals(null, BooleanUtils.toStringOnOff((Boolean) null));        assertEquals("on", BooleanUtils.toStringOnOff(Boolean.TRUE));        assertEquals("off", BooleanUtils.toStringOnOff(Boolean.FALSE));    }        public void test_toStringYesNo_Boolean() {        assertEquals(null, BooleanUtils.toStringYesNo((Boolean) null));        assertEquals("yes", BooleanUtils.toStringYesNo(Boolean.TRUE));        assertEquals("no", BooleanUtils.toStringYesNo(Boolean.FALSE));    }        public void test_toString_Boolean_String_String_String() {        assertEquals("U", BooleanUtils.toString((Boolean) null, "Y", "N", "U"));        assertEquals("Y", BooleanUtils.toString(Boolean.TRUE, "Y", "N", "U"));        assertEquals("N", BooleanUtils.toString(Boolean.FALSE, "Y", "N", "U"));    }        //-----------------------------------------------------------------------    public void test_toStringTrueFalse_boolean() {        assertEquals("true", BooleanUtils.toStringTrueFalse(true));        assertEquals("false", BooleanUtils.toStringTrueFalse(false));    }        public void test_toStringOnOff_boolean() {        assertEquals("on", BooleanUtils.toStringOnOff(true));        assertEquals("off", BooleanUtils.toStringOnOff(false));    }        public void test_toStringYesNo_boolean() {        assertEquals("yes", BooleanUtils.toStringYesNo(true));        assertEquals("no", BooleanUtils.toStringYesNo(false));    }        public void test_toString_boolean_String_String_String() {        assertEquals("Y", BooleanUtils.toString(true, "Y", "N"));        assertEquals("N", BooleanUtils.toString(false, "Y", "N"));    }        //  testXor    //  -----------------------------------------------------------------------    public void testXor_primitive_nullInput() {        final boolean[] b = null;        try {            BooleanUtils.xor(b);            fail("Exception was not thrown for null input.");        } catch (IllegalArgumentException ex) {}    }    public void testXor_primitive_emptyInput() {        try {            BooleanUtils.xor(new boolean[] {});            fail("Exception was not thrown for empty input.");        } catch (IllegalArgumentException ex) {}    }    public void testXor_primitive_validInput_2items() {        assertTrue(            "True result for (true, true)",            ! BooleanUtils.xor(new boolean[] { true, true }));        assertTrue(            "True result for (false, false)",            ! BooleanUtils.xor(new boolean[] { false, false }));        assertTrue(            "False result for (true, false)",            BooleanUtils.xor(new boolean[] { true, false }));        assertTrue(            "False result for (false, true)",            BooleanUtils.xor(new boolean[] { false, true }));    }    public void testXor_primitive_validInput_3items() {        assertTrue(            "False result for (false, false, true)",            BooleanUtils.xor(new boolean[] { false, false, true }));        assertTrue(            "False result for (false, true, false)",            BooleanUtils.xor(new boolean[] { false, true, false }));        assertTrue(            "False result for (true, false, false)",            BooleanUtils.xor(new boolean[] { true, false, false }));        assertTrue(            "True result for (true, true, true)",            ! BooleanUtils.xor(new boolean[] { true, true, true }));        assertTrue(            "True result for (false, false)",            ! BooleanUtils.xor(new boolean[] { false, false, false }));        assertTrue(            "True result for (true, true, false)",            ! BooleanUtils.xor(new boolean[] { true, true, false }));        assertTrue(            "True result for (true, false, true)",            ! BooleanUtils.xor(new boolean[] { true, false, true }));        assertTrue(            "False result for (false, true, true)",            ! BooleanUtils.xor(new boolean[] { false, true, true }));    }    public void testXor_object_nullInput() {        final Boolean[] b = null;        try {            BooleanUtils.xor(b);            fail("Exception was not thrown for null input.");        } catch (IllegalArgumentException ex) {}    }    public void testXor_object_emptyInput() {        try {            BooleanUtils.xor(new Boolean[] {});            fail("Exception was not thrown for empty input.");        } catch (IllegalArgumentException ex) {}    }        public void testXor_object_nullElementInput() {        try {            BooleanUtils.xor(new Boolean[] {null});            fail("Exception was not thrown for null element input.");        } catch (IllegalArgumentException ex) {}    }    public void testXor_object_validInput_2items() {        assertTrue(            "True result for (true, true)",            ! BooleanUtils                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })                .booleanValue());        assertTrue(            "True result for (false, false)",            ! BooleanUtils                .xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE })                .booleanValue());        assertTrue(            "False result for (true, false)",            BooleanUtils                .xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })                .booleanValue());        assertTrue(            "False result for (false, true)",            BooleanUtils                .xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE })                .booleanValue());    }    public void testXor_object_validInput_3items() {        assertTrue(            "False result for (false, false, true)",            BooleanUtils                .xor(                    new Boolean[] {                        Boolean.FALSE,                        Boolean.FALSE,                        Boolean.TRUE })                .booleanValue());        assertTrue(            "False result for (false, true, false)",            BooleanUtils                .xor(                    new Boolean[] {                        Boolean.FALSE,                        Boolean.TRUE,                        Boolean.FALSE })                .booleanValue());        assertTrue(            "False result for (true, false, false)",            BooleanUtils                .xor(                    new Boolean[] {                        Boolean.TRUE,                        Boolean.FALSE,                        Boolean.FALSE })                .booleanValue());        assertTrue(            "True result for (true, true, true)",            ! BooleanUtils                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE })                .booleanValue());        assertTrue(            "True result for (false, false)",            ! BooleanUtils.xor(                    new Boolean[] {                        Boolean.FALSE,                        Boolean.FALSE,                        Boolean.FALSE })                .booleanValue());        assertTrue(            "True result for (true, true, false)",            ! BooleanUtils.xor(                    new Boolean[] {                        Boolean.TRUE,                        Boolean.TRUE,                        Boolean.FALSE })                .booleanValue());        assertTrue(            "True result for (true, false, true)",            ! BooleanUtils.xor(                    new Boolean[] {                        Boolean.TRUE,                        Boolean.FALSE,                        Boolean.TRUE })                .booleanValue());        assertTrue(            "False result for (false, true, true)",            ! BooleanUtils.xor(                    new Boolean[] {                        Boolean.FALSE,                        Boolean.TRUE,                        Boolean.TRUE })                .booleanValue());                    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.StringUtils} - Substring methods * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author Michael Davey * @version $Id: StringUtilsIsTest.java,v 1.9 2004/02/24 22:31:43 fredrik Exp $ */public class StringUtilsIsTest extends TestCase {    public StringUtilsIsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(StringUtilsIsTest.class);    suite.setName("StringUtilsIsXxx Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testIsAlpha() {        assertEquals(false, StringUtils.isAlpha(null));        assertEquals(true, StringUtils.isAlpha(""));        assertEquals(false, StringUtils.isAlpha(" "));        assertEquals(true, StringUtils.isAlpha("a"));        assertEquals(true, StringUtils.isAlpha("A"));        assertEquals(true, StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));        assertEquals(false, StringUtils.isAlpha("ham kso"));        assertEquals(false, StringUtils.isAlpha("1"));        assertEquals(false, StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));        assertEquals(false, StringUtils.isAlpha("_"));        assertEquals(false, StringUtils.isAlpha("hkHKHik*khbkuh"));    }    public void testIsAlphanumeric() {        assertEquals(false, StringUtils.isAlphanumeric(null));        assertEquals(true, StringUtils.isAlphanumeric(""));        assertEquals(false, StringUtils.isAlphanumeric(" "));        assertEquals(true, StringUtils.isAlphanumeric("a"));        assertEquals(true, StringUtils.isAlphanumeric("A"));        assertEquals(true, StringUtils.isAlphanumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));        assertEquals(false, StringUtils.isAlphanumeric("ham kso"));        assertEquals(true, StringUtils.isAlphanumeric("1"));        assertEquals(true, StringUtils.isAlphanumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));        assertEquals(false, StringUtils.isAlphanumeric("_"));        assertEquals(false, StringUtils.isAlphanumeric("hkHKHik*khbkuh"));    }    public void testIsWhitespace() {        assertEquals(false, StringUtils.isWhitespace(null));        assertEquals(true, StringUtils.isWhitespace(""));        assertEquals(true, StringUtils.isWhitespace(" "));        assertEquals(true, StringUtils.isWhitespace("\t \n \t"));        assertEquals(false, StringUtils.isWhitespace("\t aa\n \t"));        assertEquals(true, StringUtils.isWhitespace(" "));        assertEquals(false, StringUtils.isWhitespace(" a "));        assertEquals(false, StringUtils.isWhitespace("a  "));        assertEquals(false, StringUtils.isWhitespace("  a"));        assertEquals(false, StringUtils.isWhitespace("aba"));        assertEquals(true, StringUtils.isWhitespace(StringUtilsTest.WHITESPACE));        assertEquals(false, StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE));    }    public void testIsAlphaspace() {        assertEquals(false, StringUtils.isAlphaSpace(null));        assertEquals(true, StringUtils.isAlphaSpace(""));        assertEquals(true, StringUtils.isAlphaSpace(" "));        assertEquals(true, StringUtils.isAlphaSpace("a"));        assertEquals(true, StringUtils.isAlphaSpace("A"));        assertEquals(true, StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));        assertEquals(true, StringUtils.isAlphaSpace("ham kso"));        assertEquals(false, StringUtils.isAlphaSpace("1"));        assertEquals(false, StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));        assertEquals(false, StringUtils.isAlphaSpace("_"));        assertEquals(false, StringUtils.isAlphaSpace("hkHKHik*khbkuh"));    }    public void testIsAlphanumericSpace() {        assertEquals(false, StringUtils.isAlphanumericSpace(null));        assertEquals(true, StringUtils.isAlphanumericSpace(""));        assertEquals(true, StringUtils.isAlphanumericSpace(" "));        assertEquals(true, StringUtils.isAlphanumericSpace("a"));        assertEquals(true, StringUtils.isAlphanumericSpace("A"));        assertEquals(true, StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));        assertEquals(true, StringUtils.isAlphanumericSpace("ham kso"));        assertEquals(true, StringUtils.isAlphanumericSpace("1"));        assertEquals(true, StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));        assertEquals(false, StringUtils.isAlphanumericSpace("_"));        assertEquals(false, StringUtils.isAlphanumericSpace("hkHKHik*khbkuh"));    }    public void testIsAsciiPrintable_String() {        assertEquals(false, StringUtils.isAsciiPrintable(null));        assertEquals(true, StringUtils.isAsciiPrintable(""));        assertEquals(true, StringUtils.isAsciiPrintable(" "));        assertEquals(true, StringUtils.isAsciiPrintable("a"));        assertEquals(true, StringUtils.isAsciiPrintable("A"));        assertEquals(true, StringUtils.isAsciiPrintable("1"));        assertEquals(true, StringUtils.isAsciiPrintable("Ceki"));        assertEquals(true, StringUtils.isAsciiPrintable("!ab2c~"));        assertEquals(true, StringUtils.isAsciiPrintable("1000"));        assertEquals(true, StringUtils.isAsciiPrintable("10 00"));        assertEquals(false, StringUtils.isAsciiPrintable("10\t00"));        assertEquals(true, StringUtils.isAsciiPrintable("10.00"));        assertEquals(true, StringUtils.isAsciiPrintable("10,00"));        assertEquals(true, StringUtils.isAsciiPrintable("!ab-c~"));        assertEquals(true, StringUtils.isAsciiPrintable("hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug"));        assertEquals(true, StringUtils.isAsciiPrintable("\u0020"));        assertEquals(true, StringUtils.isAsciiPrintable("\u0021"));        assertEquals(true, StringUtils.isAsciiPrintable("\u007e"));        assertEquals(false, StringUtils.isAsciiPrintable("\u007f"));        assertEquals(true, StringUtils.isAsciiPrintable("G?lc?"));        assertEquals(true, StringUtils.isAsciiPrintable("=?iso-8859-1?Q?G=FClc=FC?="));        assertEquals(false, StringUtils.isAsciiPrintable("G\u00fclc\u00fc"));    }      public void testIsNumeric() {        assertEquals(false, StringUtils.isNumeric(null));        assertEquals(true, StringUtils.isNumeric(""));        assertEquals(false, StringUtils.isNumeric(" "));        assertEquals(false, StringUtils.isNumeric("a"));        assertEquals(false, StringUtils.isNumeric("A"));        assertEquals(false, StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));        assertEquals(false, StringUtils.isNumeric("ham kso"));        assertEquals(true, StringUtils.isNumeric("1"));        assertEquals(true, StringUtils.isNumeric("1000"));        assertEquals(false, StringUtils.isNumeric("2.3"));        assertEquals(false, StringUtils.isNumeric("10 00"));        assertEquals(false, StringUtils.isNumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));        assertEquals(false, StringUtils.isNumeric("_"));        assertEquals(false, StringUtils.isNumeric("hkHKHik*khbkuh"));    }    public void testIsNumericSpace() {        assertEquals(false, StringUtils.isNumericSpace(null));        assertEquals(true, StringUtils.isNumericSpace(""));        assertEquals(true, StringUtils.isNumericSpace(" "));        assertEquals(false, StringUtils.isNumericSpace("a"));        assertEquals(false, StringUtils.isNumericSpace("A"));        assertEquals(false, StringUtils.isNumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));        assertEquals(false, StringUtils.isNumericSpace("ham kso"));        assertEquals(true, StringUtils.isNumericSpace("1"));        assertEquals(true, StringUtils.isNumericSpace("1000"));        assertEquals(false, StringUtils.isNumericSpace("2.3"));        assertEquals(true, StringUtils.isNumericSpace("10 00"));        assertEquals(false, StringUtils.isNumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));        assertEquals(false, StringUtils.isNumericSpace("_"));        assertEquals(false, StringUtils.isNumericSpace("hkHKHik*khbkuh"));    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.ObjectUtils}. * * @author <a href="mailto:jmcnally@collab.net">John McNally</a> * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> * @version $Id: ObjectUtilsTest.java,v 1.13 2004/06/01 21:08:48 scolebourne Exp $ */public class ObjectUtilsTest extends TestCase {    private static final String FOO = "foo";    private static final String BAR = "bar";    public ObjectUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(ObjectUtilsTest.class);        suite.setName("ObjectUtils Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new ObjectUtils());        Constructor[] cons = ObjectUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(ObjectUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(ObjectUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testIsNull() {        Object o = FOO;        Object dflt = BAR;        assertSame("dflt was not returned when o was null", dflt, ObjectUtils.defaultIfNull(null, dflt));        assertSame("dflt was returned when o was not null", o, ObjectUtils.defaultIfNull(o, dflt));    }    public void testEquals() {        assertTrue("ObjectUtils.equals(null, null) returned false", ObjectUtils.equals(null, null));        assertTrue("ObjectUtils.equals(\"foo\", null) returned true", !ObjectUtils.equals(FOO, null));        assertTrue("ObjectUtils.equals(null, \"bar\") returned true", !ObjectUtils.equals(null, BAR));        assertTrue("ObjectUtils.equals(\"foo\", \"bar\") returned true", !ObjectUtils.equals(FOO, BAR));        assertTrue("ObjectUtils.equals(\"foo\", \"foo\") returned false", ObjectUtils.equals(FOO, FOO));    }    public void testHashCode() {        assertEquals(0, ObjectUtils.hashCode(null));        assertEquals("a".hashCode(), ObjectUtils.hashCode("a"));    }//    /**//     * Show that java.util.Date and java.sql.Timestamp are apples and oranges.//     * Prompted by an email discussion. //     * //     * The behavior is different b/w Sun Java 1.3.1_10 and 1.4.2_03.//     *///    public void testDateEqualsJava() {//        long now = 1076957313284L; // Feb 16, 2004 10:49... PST//        java.util.Date date = new java.util.Date(now);//        java.sql.Timestamp realTimestamp = new java.sql.Timestamp(now);//        java.util.Date timestamp = realTimestamp;//        // sanity check 1://        assertEquals(284000000, realTimestamp.getNanos());//        assertEquals(1076957313284L, date.getTime());//        ////        // On Sun 1.3.1_10://        //junit.framework.AssertionFailedError: expected:<1076957313284> but was:<1076957313000>//        ////        //assertEquals(1076957313284L, timestamp.getTime());//        ////        //junit.framework.AssertionFailedError: expected:<1076957313284> but was:<1076957313000>//        ////        //assertEquals(1076957313284L, realTimestamp.getTime());//        // sanity check 2:        //        assertEquals(date.getDay(), realTimestamp.getDay());//        assertEquals(date.getHours(), realTimestamp.getHours());//        assertEquals(date.getMinutes(), realTimestamp.getMinutes());//        assertEquals(date.getMonth(), realTimestamp.getMonth());//        assertEquals(date.getSeconds(), realTimestamp.getSeconds());//        assertEquals(date.getTimezoneOffset(), realTimestamp.getTimezoneOffset());//        assertEquals(date.getYear(), realTimestamp.getYear());//        ////        // Time values are == and equals() on Sun 1.4.2_03 but NOT on Sun 1.3.1_10://        ////        //assertFalse("Sanity check failed: date.getTime() == timestamp.getTime()", date.getTime() == timestamp.getTime());//        //assertFalse("Sanity check failed: timestamp.equals(date)", timestamp.equals(date));//        //assertFalse("Sanity check failed: date.equals(timestamp)", date.equals(timestamp));//        // real test://        //assertFalse("java.util.Date and java.sql.Timestamp should be equal", ObjectUtils.equals(date, timestamp));//    }        public void testIdentityToString() {        assertEquals(null, ObjectUtils.identityToString(null));        assertEquals(            "java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)),            ObjectUtils.identityToString(FOO));        Integer i = new Integer(90);        assertEquals(            "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)),            ObjectUtils.identityToString(i));    }    public void testAppendIdentityToString() {        assertEquals(null, ObjectUtils.appendIdentityToString(null, null));        assertEquals(null, ObjectUtils.appendIdentityToString(new StringBuffer(), null));        assertEquals(            "java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)),            ObjectUtils.appendIdentityToString(null, FOO).toString());        assertEquals(            "java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)),            ObjectUtils.appendIdentityToString(new StringBuffer(), FOO).toString());        Integer val = new Integer(90);        assertEquals(            "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(val)),            ObjectUtils.appendIdentityToString(null, val).toString());        assertEquals(            "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(val)),            ObjectUtils.appendIdentityToString(new StringBuffer(), val).toString());    }    public void testToString_Object() {        assertEquals("", ObjectUtils.toString((Object) null) );        assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE) );    }                public void testToString_ObjectString() {        assertEquals(BAR, ObjectUtils.toString((Object) null, BAR) );        assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE, BAR) );    }    public void testNull() {        assertTrue(ObjectUtils.NULL != null);        assertTrue(ObjectUtils.NULL instanceof ObjectUtils.Null);        assertSame(ObjectUtils.NULL, SerializationUtils.clone(ObjectUtils.NULL));    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Class to test BitField functionality * * @author Scott Sanders * @author Marc Johnson * @author Glen Stampoultzis * @version $Id: BitFieldTest.java,v 1.4 2004/02/18 23:06:19 ggregory Exp $ */public class BitFieldTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(BitFieldTest.class);    suite.setName("BitField Tests");        return suite;    }    private static BitField bf_multi  = new BitField(0x3F80);    private static BitField bf_single = new BitField(0x4000);    /**     * Constructor BitFieldTest     *     * @param name     */    public BitFieldTest(String name) {        super(name);    }    /**     * test the getValue() method     */    public void testGetValue() {        assertEquals(bf_multi.getValue(-1), 127);        assertEquals(bf_multi.getValue(0), 0);        assertEquals(bf_single.getValue(-1), 1);        assertEquals(bf_single.getValue(0), 0);    }    /**     * test the getShortValue() method     */    public void testGetShortValue() {        assertEquals(bf_multi.getShortValue((short) - 1), (short) 127);        assertEquals(bf_multi.getShortValue((short) 0), (short) 0);        assertEquals(bf_single.getShortValue((short) - 1), (short) 1);        assertEquals(bf_single.getShortValue((short) 0), (short) 0);    }    /**     * test the getRawValue() method     */    public void testGetRawValue() {        assertEquals(bf_multi.getRawValue(-1), 0x3F80);        assertEquals(bf_multi.getRawValue(0), 0);        assertEquals(bf_single.getRawValue(-1), 0x4000);        assertEquals(bf_single.getRawValue(0), 0);    }    /**     * test the getShortRawValue() method     */    public void testGetShortRawValue() {        assertEquals(bf_multi.getShortRawValue((short) - 1), (short) 0x3F80);        assertEquals(bf_multi.getShortRawValue((short) 0), (short) 0);        assertEquals(bf_single.getShortRawValue((short) - 1), (short) 0x4000);        assertEquals(bf_single.getShortRawValue((short) 0), (short) 0);    }    /**     * test the isSet() method     */    public void testIsSet() {        assertTrue(!bf_multi.isSet(0));        for (int j = 0x80; j <= 0x3F80; j += 0x80) {            assertTrue(bf_multi.isSet(j));        }        assertTrue(!bf_single.isSet(0));        assertTrue(bf_single.isSet(0x4000));    }    /**     * test the isAllSet() method     */    public void testIsAllSet() {        for (int j = 0; j < 0x3F80; j += 0x80) {            assertTrue(!bf_multi.isAllSet(j));        }        assertTrue(bf_multi.isAllSet(0x3F80));        assertTrue(!bf_single.isAllSet(0));        assertTrue(bf_single.isAllSet(0x4000));    }    /**     * test the setValue() method     */    public void testSetValue() {        for (int j = 0; j < 128; j++) {            assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j);            assertEquals(bf_multi.setValue(0, j), j << 7);        }        // verify that excess bits are stripped off        assertEquals(bf_multi.setValue(0x3f80, 128), 0);        for (int j = 0; j < 2; j++) {            assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j);            assertEquals(bf_single.setValue(0, j), j << 14);        }        // verify that excess bits are stripped off        assertEquals(bf_single.setValue(0x4000, 2), 0);    }    /**     * test the setShortValue() method     */    public void testSetShortValue() {        for (int j = 0; j < 128; j++) {            assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j);            assertEquals(bf_multi.setShortValue((short) 0, (short) j), (short) (j << 7));        }        // verify that excess bits are stripped off        assertEquals(bf_multi.setShortValue((short) 0x3f80, (short) 128), (short) 0);        for (int j = 0; j < 2; j++) {            assertEquals(bf_single.getShortValue(bf_single.setShortValue((short) 0, (short) j)), (short) j);            assertEquals(bf_single.setShortValue((short) 0, (short) j), (short) (j << 14));        }        // verify that excess bits are stripped off        assertEquals(bf_single.setShortValue((short) 0x4000, (short) 2), (short) 0);    }    public void testByte() {        assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true));        assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true));        assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true));        assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true));        assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true));        assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true));        assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true));        assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true));        assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false));        assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false));        assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false));        assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false));        assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false));        assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false));        assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false));        assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false));        assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false));        byte clearedBit = new BitField(0x40).setByteBoolean((byte) - 63, false);        assertEquals(false, new BitField(0x40).isSet(clearedBit));    }    /**     * test the clear() method     */    public void testClear() {        assertEquals(bf_multi.clear(-1), 0xFFFFC07F);        assertEquals(bf_single.clear(-1), 0xFFFFBFFF);    }    /**     * test the clearShort() method     */    public void testClearShort() {        assertEquals(bf_multi.clearShort((short) - 1), (short) 0xC07F);        assertEquals(bf_single.clearShort((short) - 1), (short) 0xBFFF);    }    /**     * test the set() method     */    public void testSet() {        assertEquals(bf_multi.set(0), 0x3F80);        assertEquals(bf_single.set(0), 0x4000);    }    /**     * test the setShort() method     */    public void testSetShort() {        assertEquals(bf_multi.setShort((short) 0), (short) 0x3F80);        assertEquals(bf_single.setShort((short) 0), (short) 0x4000);    }    /**     * test the setBoolean() method     */    public void testSetBoolean() {        assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true));        assertEquals(bf_single.set(0), bf_single.setBoolean(0, true));        assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false));        assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false));    }    /**     * test the setShortBoolean() method     */    public void testSetShortBoolean() {        assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true));        assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true));        assertEquals(bf_multi.clearShort((short) - 1), bf_multi.setShortBoolean((short) - 1, false));        assertEquals(bf_single.clearShort((short) - 1), bf_single.setShortBoolean((short) - 1, false));    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.net.URLClassLoader;import java.util.ArrayList;import java.util.Comparator;import java.util.List;import java.util.Map;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.ClassUtils}. * * @author Stephen Colebourne * @author Gary D. Gregory * @version $Id: ClassUtilsTest.java,v 1.13 2004/06/30 18:33:58 ggregory Exp $ */public class ClassUtilsTest extends TestCase {    public ClassUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(ClassUtilsTest.class);    suite.setName("ClassUtils Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    private static class Inner {    }        //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new ClassUtils());        Constructor[] cons = ClassUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(ClassUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(ClassUtils.class.getModifiers()));    }        // -------------------------------------------------------------------------    public void test_getShortClassName_Object() {        assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>"));        assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>"));        assertEquals("String", ClassUtils.getShortClassName("hello", "<null>"));        assertEquals("<null>", ClassUtils.getShortClassName(null, "<null>"));    }        public void test_getShortClassName_Class() {        assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));        assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));        assertEquals("", ClassUtils.getShortClassName((Class) null));    }        public void test_getShortClassName_String() {        assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class.getName()));        assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class.getName()));        assertEquals("", ClassUtils.getShortClassName((String) null));        assertEquals("", ClassUtils.getShortClassName(""));    }        // -------------------------------------------------------------------------    public void test_getPackageName_Object() {        assertEquals("org.apache.commons.lang", ClassUtils.getPackageName(new ClassUtils(), "<null>"));        assertEquals("org.apache.commons.lang", ClassUtils.getPackageName(new Inner(), "<null>"));        assertEquals("<null>", ClassUtils.getPackageName(null, "<null>"));    }        public void test_getPackageName_Class() {        assertEquals("java.lang", ClassUtils.getPackageName(String.class));        assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));        assertEquals("", ClassUtils.getPackageName((Class)null));    }        public void test_getPackageName_String() {        assertEquals("org.apache.commons.lang", ClassUtils.getPackageName(ClassUtils.class.getName()));        assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName()));        assertEquals("", ClassUtils.getPackageName((String)null));        assertEquals("", ClassUtils.getPackageName(""));    }        // -------------------------------------------------------------------------    public void test_getAllSuperclasses_Class() {        List list = ClassUtils.getAllSuperclasses(CY.class);        assertEquals(2, list.size());        assertEquals(CX.class, list.get(0));        assertEquals(Object.class, list.get(1));                assertEquals(null, ClassUtils.getAllSuperclasses(null));    }        public void test_getAllInterfaces_Class() {        List list = ClassUtils.getAllInterfaces(CY.class);        assertEquals(6, list.size());        assertEquals(IB.class, list.get(0));        assertEquals(IC.class, list.get(1));        assertEquals(ID.class, list.get(2));        assertEquals(IE.class, list.get(3));        assertEquals(IF.class, list.get(4));        assertEquals(IA.class, list.get(5));                assertEquals(null, ClassUtils.getAllInterfaces(null));    }        private static interface IA {    }    private static interface IB {    }    private static interface IC extends ID, IE {    }    private static interface ID {    }    private static interface IE extends IF {    }    private static interface IF {    }    private static class CX implements IB, IA, IE {    }    private static class CY extends CX implements IB, IC {    }        // -------------------------------------------------------------------------    public void test_convertClassNamesToClasses_List() {        List list = new ArrayList();        List result = ClassUtils.convertClassNamesToClasses(list);        assertEquals(0, result.size());                list.add("java.lang.String");        list.add("java.lang.xxx");        list.add("java.lang.Object");        result = ClassUtils.convertClassNamesToClasses(list);        assertEquals(3, result.size());        assertEquals(String.class, result.get(0));        assertEquals(null, result.get(1));        assertEquals(Object.class, result.get(2));        list.add(new Object());        try {            ClassUtils.convertClassNamesToClasses(list);            fail();        } catch (ClassCastException ex) {}        assertEquals(null, ClassUtils.convertClassNamesToClasses(null));    }        public void test_convertClassesToClassNames_List() {        List list = new ArrayList();        List result = ClassUtils.convertClassesToClassNames(list);        assertEquals(0, result.size());                list.add(String.class);        list.add(null);        list.add(Object.class);        result = ClassUtils.convertClassesToClassNames(list);        assertEquals(3, result.size());        assertEquals("java.lang.String", result.get(0));        assertEquals(null, result.get(1));        assertEquals("java.lang.Object", result.get(2));        list.add(new Object());        try {            ClassUtils.convertClassesToClassNames(list);            fail();        } catch (ClassCastException ex) {}        assertEquals(null, ClassUtils.convertClassesToClassNames(null));    }        // -------------------------------------------------------------------------    public void test_isInnerClass_Class() {        assertEquals(true, ClassUtils.isInnerClass(Inner.class));        assertEquals(true, ClassUtils.isInnerClass(Map.Entry.class));        assertEquals(true, ClassUtils.isInnerClass(new Cloneable() {        }.getClass()));        assertEquals(false, ClassUtils.isInnerClass(this.getClass()));        assertEquals(false, ClassUtils.isInnerClass(String.class));        assertEquals(false, ClassUtils.isInnerClass(null));    }        // -------------------------------------------------------------------------    public void test_isAssignable_ClassArray_ClassArray() throws Exception {        Class[] array2 = new Class[] {Object.class, Object.class};        Class[] array1 = new Class[] {Object.class};        Class[] array1s = new Class[] {String.class};        Class[] array0 = new Class[] {};        assertEquals(false, ClassUtils.isAssignable(array1, array2));        assertEquals(false, ClassUtils.isAssignable(null, array2));        assertEquals(true, ClassUtils.isAssignable(null, array0));        assertEquals(true, ClassUtils.isAssignable(array0, array0));        assertEquals(true, ClassUtils.isAssignable(array0, null));        assertEquals(true, ClassUtils.isAssignable((Class[]) null, (Class[]) null));                assertEquals(false, ClassUtils.isAssignable(array1, array1s));        assertEquals(true, ClassUtils.isAssignable(array1s, array1s));        assertEquals(true, ClassUtils.isAssignable(array1s, array1));    }        public void test_isAssignable() throws Exception {        assertEquals(false, ClassUtils.isAssignable((Class) null, null));        assertEquals(false, ClassUtils.isAssignable(String.class, null));                assertEquals(true, ClassUtils.isAssignable(null, Object.class));        assertEquals(true, ClassUtils.isAssignable(null, Integer.class));        assertEquals(false, ClassUtils.isAssignable(null, Integer.TYPE));        assertEquals(true, ClassUtils.isAssignable(String.class, Object.class));        assertEquals(true, ClassUtils.isAssignable(String.class, String.class));        assertEquals(false, ClassUtils.isAssignable(Object.class, String.class));        assertEquals(false, ClassUtils.isAssignable(Integer.TYPE, Integer.class));        assertEquals(false, ClassUtils.isAssignable(Integer.class, Integer.TYPE));        assertEquals(true, ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));        assertEquals(true, ClassUtils.isAssignable(Integer.class, Integer.class));    }        public void test_isAssignable_Widening() throws Exception {        // test byte conversions        assertEquals("byte -> char", false, ClassUtils.isAssignable(Byte.TYPE, Character.TYPE));        assertEquals("byte -> byte", true, ClassUtils.isAssignable(Byte.TYPE, Byte.TYPE));        assertEquals("byte -> short", true, ClassUtils.isAssignable(Byte.TYPE, Short.TYPE));        assertEquals("byte -> int", true, ClassUtils.isAssignable(Byte.TYPE, Integer.TYPE));        assertEquals("byte -> long", true, ClassUtils.isAssignable(Byte.TYPE, Long.TYPE));        assertEquals("byte -> float", true, ClassUtils.isAssignable(Byte.TYPE, Float.TYPE));        assertEquals("byte -> double", true, ClassUtils.isAssignable(Byte.TYPE, Double.TYPE));        assertEquals("byte -> boolean", false, ClassUtils.isAssignable(Byte.TYPE, Boolean.TYPE));                // test short conversions        assertEquals("short -> char", false, ClassUtils.isAssignable(Short.TYPE, Character.TYPE));        assertEquals("short -> byte", false, ClassUtils.isAssignable(Short.TYPE, Byte.TYPE));        assertEquals("short -> short", true, ClassUtils.isAssignable(Short.TYPE, Short.TYPE));        assertEquals("short -> int", true, ClassUtils.isAssignable(Short.TYPE, Integer.TYPE));        assertEquals("short -> long", true, ClassUtils.isAssignable(Short.TYPE, Long.TYPE));        assertEquals("short -> float", true, ClassUtils.isAssignable(Short.TYPE, Float.TYPE));        assertEquals("short -> double", true, ClassUtils.isAssignable(Short.TYPE, Double.TYPE));        assertEquals("short -> boolean", false, ClassUtils.isAssignable(Short.TYPE, Boolean.TYPE));                // test char conversions        assertEquals("char -> char", true, ClassUtils.isAssignable(Character.TYPE, Character.TYPE));        assertEquals("char -> byte", false, ClassUtils.isAssignable(Character.TYPE, Byte.TYPE));        assertEquals("char -> short", false, ClassUtils.isAssignable(Character.TYPE, Short.TYPE));        assertEquals("char -> int", true, ClassUtils.isAssignable(Character.TYPE, Integer.TYPE));        assertEquals("char -> long", true, ClassUtils.isAssignable(Character.TYPE, Long.TYPE));        assertEquals("char -> float", true, ClassUtils.isAssignable(Character.TYPE, Float.TYPE));        assertEquals("char -> double", true, ClassUtils.isAssignable(Character.TYPE, Double.TYPE));        assertEquals("char -> boolean", false, ClassUtils.isAssignable(Character.TYPE, Boolean.TYPE));                // test int conversions        assertEquals("int -> char", false, ClassUtils.isAssignable(Integer.TYPE, Character.TYPE));        assertEquals("int -> byte", false, ClassUtils.isAssignable(Integer.TYPE, Byte.TYPE));        assertEquals("int -> short", false, ClassUtils.isAssignable(Integer.TYPE, Short.TYPE));        assertEquals("int -> int", true, ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));        assertEquals("int -> long", true, ClassUtils.isAssignable(Integer.TYPE, Long.TYPE));        assertEquals("int -> float", true, ClassUtils.isAssignable(Integer.TYPE, Float.TYPE));        assertEquals("int -> double", true, ClassUtils.isAssignable(Integer.TYPE, Double.TYPE));        assertEquals("int -> boolean", false, ClassUtils.isAssignable(Integer.TYPE, Boolean.TYPE));         // test long conversions        assertEquals("long -> char", false, ClassUtils.isAssignable(Long.TYPE, Character.TYPE));        assertEquals("long -> byte", false, ClassUtils.isAssignable(Long.TYPE, Byte.TYPE));        assertEquals("long -> short", false, ClassUtils.isAssignable(Long.TYPE, Short.TYPE));        assertEquals("long -> int", false, ClassUtils.isAssignable(Long.TYPE, Integer.TYPE));        assertEquals("long -> long", true, ClassUtils.isAssignable(Long.TYPE, Long.TYPE));        assertEquals("long -> float", true, ClassUtils.isAssignable(Long.TYPE, Float.TYPE));        assertEquals("long -> double", true, ClassUtils.isAssignable(Long.TYPE, Double.TYPE));        assertEquals("long -> boolean", false, ClassUtils.isAssignable(Long.TYPE, Boolean.TYPE));         // test float conversions        assertEquals("float -> char", false, ClassUtils.isAssignable(Float.TYPE, Character.TYPE));        assertEquals("float -> byte", false, ClassUtils.isAssignable(Float.TYPE, Byte.TYPE));        assertEquals("float -> short", false, ClassUtils.isAssignable(Float.TYPE, Short.TYPE));        assertEquals("float -> int", false, ClassUtils.isAssignable(Float.TYPE, Integer.TYPE));        assertEquals("float -> long", false, ClassUtils.isAssignable(Float.TYPE, Long.TYPE));        assertEquals("float -> float", true, ClassUtils.isAssignable(Float.TYPE, Float.TYPE));        assertEquals("float -> double", true, ClassUtils.isAssignable(Float.TYPE, Double.TYPE));        assertEquals("float -> boolean", false, ClassUtils.isAssignable(Float.TYPE, Boolean.TYPE));                // test float conversions        assertEquals("double -> char", false, ClassUtils.isAssignable(Double.TYPE, Character.TYPE));        assertEquals("double -> byte", false, ClassUtils.isAssignable(Double.TYPE, Byte.TYPE));        assertEquals("double -> short", false, ClassUtils.isAssignable(Double.TYPE, Short.TYPE));        assertEquals("double -> int", false, ClassUtils.isAssignable(Double.TYPE, Integer.TYPE));        assertEquals("double -> long", false, ClassUtils.isAssignable(Double.TYPE, Long.TYPE));        assertEquals("double -> float", false, ClassUtils.isAssignable(Double.TYPE, Float.TYPE));        assertEquals("double -> double", true, ClassUtils.isAssignable(Double.TYPE, Double.TYPE));        assertEquals("double -> boolean", false, ClassUtils.isAssignable(Double.TYPE, Boolean.TYPE));                // test float conversions        assertEquals("boolean -> char", false, ClassUtils.isAssignable(Boolean.TYPE, Character.TYPE));        assertEquals("boolean -> byte", false, ClassUtils.isAssignable(Boolean.TYPE, Byte.TYPE));        assertEquals("boolean -> short", false, ClassUtils.isAssignable(Boolean.TYPE, Short.TYPE));        assertEquals("boolean -> int", false, ClassUtils.isAssignable(Boolean.TYPE, Integer.TYPE));        assertEquals("boolean -> long", false, ClassUtils.isAssignable(Boolean.TYPE, Long.TYPE));        assertEquals("boolean -> float", false, ClassUtils.isAssignable(Boolean.TYPE, Float.TYPE));        assertEquals("boolean -> double", false, ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE));        assertEquals("boolean -> boolean", true, ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));    }        public void testPrimitiveToWrapper() {               // test primitive classes        assertEquals("boolean -> Boolean.class",             Boolean.class, ClassUtils.primitiveToWrapper(Boolean.TYPE));           assertEquals("byte -> Byte.class",            Byte.class, ClassUtils.primitiveToWrapper(Byte.TYPE));        assertEquals("char -> Character.class",            Character.class, ClassUtils.primitiveToWrapper(Character.TYPE));        assertEquals("short -> Short.class",            Short.class, ClassUtils.primitiveToWrapper(Short.TYPE));        assertEquals("int -> Integer.class",            Integer.class, ClassUtils.primitiveToWrapper(Integer.TYPE));        assertEquals("long -> Long.class",            Long.class, ClassUtils.primitiveToWrapper(Long.TYPE));        assertEquals("double -> Double.class",            Double.class, ClassUtils.primitiveToWrapper(Double.TYPE));        assertEquals("float -> Float.class",            Float.class, ClassUtils.primitiveToWrapper(Float.TYPE));                // test a few other classes        assertEquals("String.class -> String.class",            String.class, ClassUtils.primitiveToWrapper(String.class));        assertEquals("ClassUtils.class -> ClassUtils.class",            org.apache.commons.lang.ClassUtils.class,             ClassUtils.primitiveToWrapper(org.apache.commons.lang.ClassUtils.class));                    // test null             assertNull("null -> null",            ClassUtils.primitiveToWrapper(null));    }    public void testPrimitivesToWrappers() {        // test null        assertNull("null -> null",            ClassUtils.primitivesToWrappers(null));        // test empty array        assertEquals("empty -> empty",                ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY));        // test an array of various classes        final Class[] primitives = new Class[] {                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE,                 Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE,                String.class, ClassUtils.class        };        Class[] wrappers= ClassUtils.primitivesToWrappers(primitives);                for (int i=0; i < primitives.length; i++) {            // test each returned wrapper            Class primitive = primitives[i];            Class expectedWrapper = ClassUtils.primitiveToWrapper(primitive);                        assertEquals(primitive + " -> " + expectedWrapper, expectedWrapper, wrappers[i]);        }        // test an array of no primitive classes        final Class[] noPrimitives = new Class[] {                String.class, ClassUtils.class        };        // This used to return the exact same array, but no longer does.        assertNotSame("unmodified", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives));    }        public void testClassComparator() {    Comparator comparator = ClassUtils.CLASS_NAME_COMPARATOR;    Class smallClass = java.lang.Boolean.class;    Class bigClass =  java.util.Set.class;    assertTrue(comparator.compare(smallClass, smallClass) == 0);assertTrue(comparator.compare(bigClass, smallClass) > 0);assertTrue(comparator.compare(smallClass, bigClass) < 0);assertTrue(comparator.compare(smallClass, null) > 0);assertTrue(comparator.compare(null, smallClass) < 0);        assertComparatorContract(comparator, smallClass, smallClass);        assertComparatorContract(comparator, bigClass, bigClass);        assertComparatorContract(comparator, smallClass, bigClass);    }    public void testPackageComparator() {        Comparator comparator = ClassUtils.PACKAGE_NAME_COMPARATOR;        Package smallPackage = java.lang.Boolean.class.getPackage();        Package bigPackage =  java.util.Set.class.getPackage();                assertTrue(comparator.compare(smallPackage, smallPackage) == 0);        assertTrue(comparator.compare(bigPackage, smallPackage) > 0);        assertTrue(comparator.compare(smallPackage, bigPackage) < 0);                assertTrue(comparator.compare(smallPackage, null) > 0);        assertTrue(comparator.compare(null, smallPackage) < 0);        assertComparatorContract(comparator, smallPackage, smallPackage);        assertComparatorContract(comparator, bigPackage, bigPackage);        assertComparatorContract(comparator, smallPackage, bigPackage);    }    public void testPackageNameComparatorWithDifferentClassLoaders() throws SecurityException, IllegalArgumentException, ClassNotFoundException {        Comparator comparator = ClassUtils.PACKAGE_NAME_COMPARATOR;        Package p1 = java.lang.Boolean.class.getPackage();        Package p2 = java.util.Set.class.getPackage();        ClassLoader classLoader = newSystemClassLoader();        Object p1Other = this.getPackage(classLoader, "java.lang.Boolean");        Object p2Other = this.getPackage(classLoader, "java.util.Set");        // all here        assertComparatorContract(comparator, p1, p1);        assertComparatorContract(comparator, p2, p2);        assertComparatorContract(comparator, p1, p2);        // all other        assertComparatorContract(comparator, p1Other, p1Other);        assertComparatorContract(comparator, p2Other, p2Other);        assertComparatorContract(comparator, p1Other, p2Other);        // p1 and p1Other        assertComparatorContract(comparator, p1, p1Other);        assertComparatorContract(comparator, p2, p2);        assertComparatorContract(comparator, p1Other, p2);        // p2 and p2Other        assertComparatorContract(comparator, p1, p1);        assertComparatorContract(comparator, p2, p2Other);        assertComparatorContract(comparator, p1, p2Other);    }        Object getPackage(ClassLoader classLoader, String className) throws ClassNotFoundException, SecurityException,            IllegalArgumentException {        // Sanity check:        assertNotNull(Package.getPackage("java.lang"));        Package.getPackage("java.lang").equals(Package.getPackage("java.lang"));        // set up:        assertNotNull(classLoader);        Class otherClass = classLoader.loadClass(className);        assertNotNull(otherClass);        Object otherPackage = otherClass.getPackage();        assertNotNull(otherPackage);        return otherPackage;    }    /**     * The ordering imposed by a Comparator c on a set of elements S is said to     * be consistent with equals if and only if (compare((Object)e1,     * (Object)e2)==0) has the same boolean value as e1.equals((Object)e2) for     * every e1 and e2 in S.     *      * http://java.sun.com/j2se/1.3/docs/api/java/util/Comparator.html     */    public void assertComparatorContract(Comparator comparator, Object e1, Object e2) {        assertEquals(comparator.compare(e1, e2) == 0, e1.equals(e2));    }    public static ClassLoader newSystemClassLoader() throws  SecurityException, IllegalArgumentException {        ClassLoader scl = ClassLoader.getSystemClassLoader();        if (!(scl instanceof URLClassLoader)) {            fail("Need a better test set up.");        }        URLClassLoader urlScl = (URLClassLoader)scl;        return URLClassLoader.newInstance(urlScl.getURLs(), null);    }    //    public static List getAssignableFrom(List classes, Class superclass) {//    public static boolean isAssignable(Class[] classArray, Class[] toClassArray) {//    public static boolean isAssignable(Class cls, Class toClass) {}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.CharSetUtils}. * * @author <a href="mailto:bayard@generationjava.com">Henri Yandell</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Stephen Colebourne * @author Gary D. Gregory * @version $Id: CharSetUtilsTest.java,v 1.16 2004/02/18 23:06:19 ggregory Exp $ */public class CharSetUtilsTest extends TestCase {        public CharSetUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(CharSetUtilsTest.class);        suite.setName("CharSetUtils Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new CharSetUtils());        Constructor[] cons = CharSetUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(CharSetUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(CharSetUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testEvaluateSet_Stringarray() {        assertEquals(null, CharSetUtils.evaluateSet((String[]) null));        assertEquals("[]", CharSetUtils.evaluateSet(new String[0]).toString());        assertEquals("[]", CharSetUtils.evaluateSet(new String[] {null}).toString());        assertEquals("[a-e]", CharSetUtils.evaluateSet(new String[] {"a-e"}).toString());    }        //-----------------------------------------------------------------------    public void testSqueeze_StringString() {        assertEquals(null, CharSetUtils.squeeze(null, (String) null));        assertEquals(null, CharSetUtils.squeeze(null, ""));                assertEquals("", CharSetUtils.squeeze("", (String) null));        assertEquals("", CharSetUtils.squeeze("", ""));        assertEquals("", CharSetUtils.squeeze("", "a-e"));                assertEquals("hello", CharSetUtils.squeeze("hello", (String) null));        assertEquals("hello", CharSetUtils.squeeze("hello", ""));        assertEquals("hello", CharSetUtils.squeeze("hello", "a-e"));        assertEquals("helo", CharSetUtils.squeeze("hello", "l-p"));        assertEquals("heloo", CharSetUtils.squeeze("helloo", "l"));        assertEquals("hello", CharSetUtils.squeeze("helloo", "^l"));    }        public void testSqueeze_StringStringarray() {        assertEquals(null, CharSetUtils.squeeze(null, (String[]) null));        assertEquals(null, CharSetUtils.squeeze(null, new String[0]));        assertEquals(null, CharSetUtils.squeeze(null, new String[] {null}));        assertEquals(null, CharSetUtils.squeeze(null, new String[] {"el"}));                assertEquals("", CharSetUtils.squeeze("", (String[]) null));        assertEquals("", CharSetUtils.squeeze("", new String[0]));        assertEquals("", CharSetUtils.squeeze("", new String[] {null}));        assertEquals("", CharSetUtils.squeeze("", new String[] {"a-e"}));                assertEquals("hello", CharSetUtils.squeeze("hello", (String[]) null));        assertEquals("hello", CharSetUtils.squeeze("hello", new String[0]));        assertEquals("hello", CharSetUtils.squeeze("hello", new String[] {null}));        assertEquals("hello", CharSetUtils.squeeze("hello", new String[] {"a-e"}));                assertEquals("helo", CharSetUtils.squeeze("hello", new String[] { "el" }));        assertEquals("hello", CharSetUtils.squeeze("hello", new String[] { "e" }));        assertEquals("fofof", CharSetUtils.squeeze("fooffooff", new String[] { "of" }));        assertEquals("fof", CharSetUtils.squeeze("fooooff", new String[] { "fo" }));    }    //-----------------------------------------------------------------------    public void testCount_StringString() {        assertEquals(0, CharSetUtils.count(null, (String) null));        assertEquals(0, CharSetUtils.count(null, ""));                assertEquals(0, CharSetUtils.count("", (String) null));        assertEquals(0, CharSetUtils.count("", ""));        assertEquals(0, CharSetUtils.count("", "a-e"));                assertEquals(0, CharSetUtils.count("hello", (String) null));        assertEquals(0, CharSetUtils.count("hello", ""));        assertEquals(1, CharSetUtils.count("hello", "a-e"));        assertEquals(3, CharSetUtils.count("hello", "l-p"));    }        public void testCount_StringStringarray() {        assertEquals(0, CharSetUtils.count(null, (String[]) null));        assertEquals(0, CharSetUtils.count(null, new String[0]));        assertEquals(0, CharSetUtils.count(null, new String[] {null}));        assertEquals(0, CharSetUtils.count(null, new String[] {"a-e"}));                assertEquals(0, CharSetUtils.count("", (String[]) null));        assertEquals(0, CharSetUtils.count("", new String[0]));        assertEquals(0, CharSetUtils.count("", new String[] {null}));        assertEquals(0, CharSetUtils.count("", new String[] {"a-e"}));                assertEquals(0, CharSetUtils.count("hello", (String[]) null));        assertEquals(0, CharSetUtils.count("hello", new String[0]));        assertEquals(0, CharSetUtils.count("hello", new String[] {null}));        assertEquals(1, CharSetUtils.count("hello", new String[] {"a-e"}));                assertEquals(3, CharSetUtils.count("hello", new String[] { "el" }));        assertEquals(0, CharSetUtils.count("hello", new String[] { "x" }));        assertEquals(2, CharSetUtils.count("hello", new String[] { "e-i" }));        assertEquals(5, CharSetUtils.count("hello", new String[] { "a-z" }));        assertEquals(0, CharSetUtils.count("hello", new String[] { "" }));    }    //-----------------------------------------------------------------------    public void testKeep_StringString() {        assertEquals(null, CharSetUtils.keep(null, (String) null));        assertEquals(null, CharSetUtils.keep(null, ""));                assertEquals("", CharSetUtils.keep("", (String) null));        assertEquals("", CharSetUtils.keep("", ""));        assertEquals("", CharSetUtils.keep("", "a-e"));                assertEquals("", CharSetUtils.keep("hello", (String) null));        assertEquals("", CharSetUtils.keep("hello", ""));        assertEquals("", CharSetUtils.keep("hello", "xyz"));        assertEquals("hello", CharSetUtils.keep("hello", "a-z"));        assertEquals("hello", CharSetUtils.keep("hello", "oleh"));        assertEquals("ell", CharSetUtils.keep("hello", "el"));    }        public void testKeep_StringStringarray() {        assertEquals(null, CharSetUtils.keep(null, (String[]) null));        assertEquals(null, CharSetUtils.keep(null, new String[0]));        assertEquals(null, CharSetUtils.keep(null, new String[] {null}));        assertEquals(null, CharSetUtils.keep(null, new String[] {"a-e"}));                assertEquals("", CharSetUtils.keep("", (String[]) null));        assertEquals("", CharSetUtils.keep("", new String[0]));        assertEquals("", CharSetUtils.keep("", new String[] {null}));        assertEquals("", CharSetUtils.keep("", new String[] {"a-e"}));                assertEquals("", CharSetUtils.keep("hello", (String[]) null));        assertEquals("", CharSetUtils.keep("hello", new String[0]));        assertEquals("", CharSetUtils.keep("hello", new String[] {null}));        assertEquals("e", CharSetUtils.keep("hello", new String[] {"a-e"}));                assertEquals("e", CharSetUtils.keep("hello", new String[] { "a-e" }));        assertEquals("ell", CharSetUtils.keep("hello", new String[] { "el" }));        assertEquals("hello", CharSetUtils.keep("hello", new String[] { "elho" }));        assertEquals("hello", CharSetUtils.keep("hello", new String[] { "a-z" }));        assertEquals("----", CharSetUtils.keep("----", new String[] { "-" }));        assertEquals("ll", CharSetUtils.keep("hello", new String[] { "l" }));    }    //-----------------------------------------------------------------------    public void testDelete_StringString() {        assertEquals(null, CharSetUtils.delete(null, (String) null));        assertEquals(null, CharSetUtils.delete(null, ""));                assertEquals("", CharSetUtils.delete("", (String) null));        assertEquals("", CharSetUtils.delete("", ""));        assertEquals("", CharSetUtils.delete("", "a-e"));                assertEquals("hello", CharSetUtils.delete("hello", (String) null));        assertEquals("hello", CharSetUtils.delete("hello", ""));        assertEquals("hllo", CharSetUtils.delete("hello", "a-e"));        assertEquals("he", CharSetUtils.delete("hello", "l-p"));        assertEquals("hello", CharSetUtils.delete("hello", "z"));    }        public void testDelete_StringStringarray() {        assertEquals(null, CharSetUtils.delete(null, (String[]) null));        assertEquals(null, CharSetUtils.delete(null, new String[0]));        assertEquals(null, CharSetUtils.delete(null, new String[] {null}));        assertEquals(null, CharSetUtils.delete(null, new String[] {"el"}));                assertEquals("", CharSetUtils.delete("", (String[]) null));        assertEquals("", CharSetUtils.delete("", new String[0]));        assertEquals("", CharSetUtils.delete("", new String[] {null}));        assertEquals("", CharSetUtils.delete("", new String[] {"a-e"}));                assertEquals("hello", CharSetUtils.delete("hello", (String[]) null));        assertEquals("hello", CharSetUtils.delete("hello", new String[0]));        assertEquals("hello", CharSetUtils.delete("hello", new String[] {null}));        assertEquals("hello", CharSetUtils.delete("hello", new String[] {"xyz"}));        assertEquals("ho", CharSetUtils.delete("hello", new String[] { "el" }));        assertEquals("", CharSetUtils.delete("hello", new String[] { "elho" }));        assertEquals("hello", CharSetUtils.delete("hello", new String[] { "" }));        assertEquals("hello", CharSetUtils.delete("hello", ""));        assertEquals("", CharSetUtils.delete("hello", new String[] { "a-z" }));        assertEquals("", CharSetUtils.delete("----", new String[] { "-" }));        assertEquals("heo", CharSetUtils.delete("hello", new String[] { "l" }));    }            public void testTranslate() {        assertEquals(null, CharSetUtils.translate(null, null, null));        assertEquals("", CharSetUtils.translate("", "a", "b"));        assertEquals("jelly", CharSetUtils.translate("hello", "ho", "jy"));        assertEquals("jellj", CharSetUtils.translate("hello", "ho", "j"));        assertEquals("jelly", CharSetUtils.translate("hello", "ho", "jyx"));        assertEquals("\rhello\r", CharSetUtils.translate("\nhello\n", "\n", "\r"));        assertEquals("hello", CharSetUtils.translate("hello", "", "x"));        assertEquals("hello", CharSetUtils.translate("hello", "", ""));        assertEquals("hello", CharSetUtils.translate("hello", "", ""));        // From http://nagoya.apache.org/bugzilla/show_bug.cgi?id=25454        assertEquals("q651.506bera", CharSetUtils.translate("d216.102oren", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789",                "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234"));    }    public void testTranslateNullPointerException() {        try {            CharSetUtils.translate("hello", null, null);            fail("Expecting NullPointerException");        } catch (NullPointerException ex) {        }        try {            CharSetUtils.translate("hello", "h", null);            fail("Expecting NullPointerException");        } catch (NullPointerException ex) {        }        try {            CharSetUtils.translate("hello", null, "a");            fail("Expecting NullPointerException");        } catch (NullPointerException ex) {        }        try {            CharSetUtils.translate("hello", "h", "");            fail("Expecting ArrayIndexOutOfBoundsException");        } catch (ArrayIndexOutOfBoundsException ex) {        }    }             }
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.util.Arrays;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Tests ArrayUtils remove and removeElement methods. *  * @author Maarten Coene * @version $Id: ArrayUtilsRemoveTest.java,v 1.1 2004/06/06 03:53:24 bayard Exp $ */public class ArrayUtilsRemoveTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(ArrayUtilsRemoveTest.class);        suite.setName("ArrayUtils remove Tests");        return suite;    }    public void testRemoveObjectArray() {        Object[] array;        array = ArrayUtils.remove(new Object[] {"a"}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));        assertEquals(Object.class, array.getClass().getComponentType());        array = ArrayUtils.remove(new Object[] {"a", "b"}, 0);        assertTrue(Arrays.equals(new Object[] {"b"}, array));        assertEquals(Object.class, array.getClass().getComponentType());        array = ArrayUtils.remove(new Object[] {"a", "b"}, 1);        assertTrue(Arrays.equals(new Object[] {"a"}, array));        assertEquals(Object.class, array.getClass().getComponentType());        array = ArrayUtils.remove(new Object[] {"a", "b", "c"}, 1);        assertTrue(Arrays.equals(new Object[] {"a", "c"}, array));        assertEquals(Object.class, array.getClass().getComponentType());        try {            ArrayUtils.remove(new Object[] {"a", "b"}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new Object[] {"a", "b"}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((Object[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveBooleanArray() {        boolean[] array;        array = ArrayUtils.remove(new boolean[] {true}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new boolean[] {true, false}, 0);        assertTrue(Arrays.equals(new boolean[] {false}, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new boolean[] {true, false}, 1);        assertTrue(Arrays.equals(new boolean[] {true}, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new boolean[] {true, false, true}, 1);        assertTrue(Arrays.equals(new boolean[] {true, true}, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new boolean[] {true, false}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new boolean[] {true, false}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((boolean[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveByteArray() {        byte[] array;        array = ArrayUtils.remove(new byte[] {1}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new byte[] {1, 2}, 0);        assertTrue(Arrays.equals(new byte[] {2}, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new byte[] {1, 2}, 1);        assertTrue(Arrays.equals(new byte[] {1}, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new byte[] {1, 2, 1}, 1);        assertTrue(Arrays.equals(new byte[] {1, 1}, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new byte[] {1, 2}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new byte[] {1, 2}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((byte[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveCharArray() {        char[] array;        array = ArrayUtils.remove(new char[] {'a'}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new char[] {'a', 'b'}, 0);        assertTrue(Arrays.equals(new char[] {'b'}, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new char[] {'a', 'b'}, 1);        assertTrue(Arrays.equals(new char[] {'a'}, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new char[] {'a', 'b', 'c'}, 1);        assertTrue(Arrays.equals(new char[] {'a', 'c'}, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new char[] {'a', 'b'}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new char[] {'a', 'b'}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((char[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveDoubleArray() {        double[] array;        array = ArrayUtils.remove(new double[] {1}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new double[] {1, 2}, 0);        assertTrue(Arrays.equals(new double[] {2}, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new double[] {1, 2}, 1);        assertTrue(Arrays.equals(new double[] {1}, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new double[] {1, 2, 1}, 1);        assertTrue(Arrays.equals(new double[] {1, 1}, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new double[] {1, 2}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new double[] {1, 2}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((double[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveFloatArray() {        float[] array;        array = ArrayUtils.remove(new float[] {1}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new float[] {1, 2}, 0);        assertTrue(Arrays.equals(new float[] {2}, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new float[] {1, 2}, 1);        assertTrue(Arrays.equals(new float[] {1}, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new float[] {1, 2, 1}, 1);        assertTrue(Arrays.equals(new float[] {1, 1}, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new float[] {1, 2}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new float[] {1, 2}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((float[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveIntArray() {        int[] array;        array = ArrayUtils.remove(new int[] {1}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new int[] {1, 2}, 0);        assertTrue(Arrays.equals(new int[] {2}, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new int[] {1, 2}, 1);        assertTrue(Arrays.equals(new int[] {1}, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new int[] {1, 2, 1}, 1);        assertTrue(Arrays.equals(new int[] {1, 1}, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new int[] {1, 2}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new int[] {1, 2}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((int[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveLongArray() {        long[] array;        array = ArrayUtils.remove(new long[] {1}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new long[] {1, 2}, 0);        assertTrue(Arrays.equals(new long[] {2}, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new long[] {1, 2}, 1);        assertTrue(Arrays.equals(new long[] {1}, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new long[] {1, 2, 1}, 1);        assertTrue(Arrays.equals(new long[] {1, 1}, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new long[] {1, 2}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new long[] {1, 2}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((long[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveShortArray() {        short[] array;        array = ArrayUtils.remove(new short[] {1}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new short[] {1, 2}, 0);        assertTrue(Arrays.equals(new short[] {2}, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new short[] {1, 2}, 1);        assertTrue(Arrays.equals(new short[] {1}, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new short[] {1, 2, 1}, 1);        assertTrue(Arrays.equals(new short[] {1, 1}, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new short[] {1, 2}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new short[] {1, 2}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((short[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveElementObjectArray() {        Object[] array;        array = ArrayUtils.removeElement((Object[]) null, "a");        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, "a");        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));        assertEquals(Object.class, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new Object[] {"a"}, "a");        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));        assertEquals(Object.class, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new Object[] {"a", "b"}, "a");        assertTrue(Arrays.equals(new Object[] {"b"}, array));        assertEquals(Object.class, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new Object[] {"a", "b", "a"}, "a");        assertTrue(Arrays.equals(new Object[] {"b", "a"}, array));        assertEquals(Object.class, array.getClass().getComponentType());    }        public void testRemoveElementBooleanArray() {        boolean[] array;        array = ArrayUtils.removeElement((boolean[]) null, true);        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new boolean[] {true}, true);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new boolean[] {true, false}, true);        assertTrue(Arrays.equals(new boolean[] {false}, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new boolean[] {true, false, true}, true);        assertTrue(Arrays.equals(new boolean[] {false, true}, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());    }        public void testRemoveElementByteArray() {        byte[] array;        array = ArrayUtils.removeElement((byte[]) null, (byte) 1);        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new byte[] {1}, (byte) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new byte[] {1, 2}, (byte) 1);        assertTrue(Arrays.equals(new byte[] {2}, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new byte[] {1, 2, 1}, (byte) 1);        assertTrue(Arrays.equals(new byte[] {2, 1}, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());    }        public void testRemoveElementCharArray() {        char[] array;        array = ArrayUtils.removeElement((char[]) null, 'a');        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a');        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new char[] {'a'}, 'a');        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new char[] {'a', 'b'}, 'a');        assertTrue(Arrays.equals(new char[] {'b'}, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new char[] {'a', 'b', 'a'}, 'a');        assertTrue(Arrays.equals(new char[] {'b', 'a'}, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());    }        public void testRemoveElementDoubleArray() {        double[] array;        array = ArrayUtils.removeElement((double[]) null, (double) 1);        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new double[] {1}, (double) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new double[] {1, 2}, (double) 1);        assertTrue(Arrays.equals(new double[] {2}, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new double[] {1, 2, 1}, (double) 1);        assertTrue(Arrays.equals(new double[] {2, 1}, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());    }        public void testRemoveElementFloatArray() {        float[] array;        array = ArrayUtils.removeElement((float[]) null, (float) 1);        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new float[] {1}, (float) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new float[] {1, 2}, (float) 1);        assertTrue(Arrays.equals(new float[] {2}, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new float[] {1, 2, 1}, (float) 1);        assertTrue(Arrays.equals(new float[] {2, 1}, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());    }        public void testRemoveElementIntArray() {        int[] array;        array = ArrayUtils.removeElement((int[]) null, 1);        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new int[] {1}, 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new int[] {1, 2}, 1);        assertTrue(Arrays.equals(new int[] {2}, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new int[] {1, 2, 1}, 1);        assertTrue(Arrays.equals(new int[] {2, 1}, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());    }        public void testRemoveElementLongArray() {        long[] array;        array = ArrayUtils.removeElement((long[]) null, (long) 1);        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new long[] {1}, (long) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new long[] {1, 2}, (long) 1);        assertTrue(Arrays.equals(new long[] {2}, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new long[] {1, 2, 1}, (long) 1);        assertTrue(Arrays.equals(new long[] {2, 1}, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());    }        public void testRemoveElementShortArray() {        short[] array;        array = ArrayUtils.removeElement((short[]) null, (short) 1);        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new short[] {1}, (short) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new short[] {1, 2}, (short) 1);        assertTrue(Arrays.equals(new short[] {2}, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new short[] {1, 2, 1}, (short) 1);        assertTrue(Arrays.equals(new short[] {2, 1}, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());    }    }
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.Arrays;import java.util.Date;import java.util.Map;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.ArrayUtils}. * * @author Stephen Colebourne * @author Moritz Petersen * @author Nikolay Metchev * @author Matthew Hawthorne * @author Tim O'Brien * @author <a href="mailto:equinus100@hotmail.com">Ashwin S</a> * @author Fredrik Westermarck * @author Gary Gregory * @author Maarten Coene * @version $Id: ArrayUtilsTest.java,v 1.27 2004/06/06 03:53:24 bayard Exp $ */public class ArrayUtilsTest extends TestCase {    public ArrayUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(ArrayUtilsTest.class);        suite.setName("ArrayUtils Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new ArrayUtils());        Constructor[] cons = ArrayUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(ArrayUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(ArrayUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testToString() {        assertEquals("{}", ArrayUtils.toString(null));        assertEquals("{}", ArrayUtils.toString(new Object[0]));        assertEquals("{}", ArrayUtils.toString(new String[0]));        assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}));        assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}));                assertEquals("<empty>", ArrayUtils.toString(null, "<empty>"));        assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>"));        assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>"));        assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>"));        assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>"));    }    //-----------------------------------------------------------------------    public void testHashCode() {        long[][] array1 = new long[][] {{2,5}, {4,5}};        long[][] array2 = new long[][] {{2,5}, {4,6}};        assertEquals(true, ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array1));        assertEquals(false, ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array2));                Object[] array3 = new Object[] {new String(new char[] {'A', 'B'})};        Object[] array4 = new Object[] {"AB"};        assertEquals(true, ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array3));        assertEquals(true, ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array4));    }    //-----------------------------------------------------------------------    public void testIsEquals() {        long[][] array1 = new long[][] {{2,5}, {4,5}};        long[][] array2 = new long[][] {{2,5}, {4,6}};        assertEquals(true, ArrayUtils.isEquals(array1, array1));        assertEquals(false, ArrayUtils.isEquals(array1, array2));                Object[] array3 = new Object[] {new String(new char[] {'A', 'B'})};        Object[] array4 = new Object[] {"AB"};        assertEquals(true, ArrayUtils.isEquals(array3, array3));        assertEquals(true, ArrayUtils.isEquals(array3, array4));        assertEquals(true, ArrayUtils.isEquals(null, null));        assertEquals(false, ArrayUtils.isEquals(null, array4));    }        //-----------------------------------------------------------------------    public void testToMap() {        Map map = ArrayUtils.toMap(new String[][] {{"foo", "bar"}, {"hello", "world"}});                assertEquals("bar", map.get("foo"));        assertEquals("world", map.get("hello"));                assertEquals(null, ArrayUtils.toMap(null));        try {            ArrayUtils.toMap(new String[][] {{"foo", "bar"}, {"short"}});            fail("exception expected");        } catch (IllegalArgumentException ex) {}        try {            ArrayUtils.toMap(new Object[] {new Object[] {"foo", "bar"}, "illegal type"});            fail("exception expected");        } catch (IllegalArgumentException ex) {}        try {            ArrayUtils.toMap(new Object[] {new Object[] {"foo", "bar"}, null});            fail("exception expected");        } catch (IllegalArgumentException ex) {}                map = ArrayUtils.toMap(new Object[] {new Map.Entry() {            public Object getKey() {                return "foo";            }            public Object getValue() {                return "bar";            }            public Object setValue(Object value) {                throw new UnsupportedOperationException();            }            public boolean equals(Object o) {                throw new UnsupportedOperationException();            }            public int hashCode() {                throw new UnsupportedOperationException();            }        }});        assertEquals("bar", map.get("foo"));    }    //-----------------------------------------------------------------------    public void testClone() {        assertEquals(null, ArrayUtils.clone((Object[]) null));        Object[] original1 = new Object[0];        Object[] cloned1 = ArrayUtils.clone(original1);        assertTrue(Arrays.equals(original1, cloned1));        assertTrue(original1 != cloned1);                StringBuffer buf = new StringBuffer("pick");        original1 = new Object[] {buf, "a", new String[] {"stick"}};        cloned1 = ArrayUtils.clone(original1);        assertTrue(Arrays.equals(original1, cloned1));        assertTrue(original1 != cloned1);        assertSame(original1[0], cloned1[0]);        assertSame(original1[1], cloned1[1]);        assertSame(original1[2], cloned1[2]);    }    public void testCloneBoolean() {        assertEquals(null, ArrayUtils.clone((boolean[]) null));        boolean[] original = new boolean[] {true, false};        boolean[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }        public void testCloneLong() {        assertEquals(null, ArrayUtils.clone((long[]) null));        long[] original = new long[] {0L, 1L};        long[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }        public void testCloneInt() {        assertEquals(null, ArrayUtils.clone((int[]) null));        int[] original = new int[] {5, 8};        int[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }        public void testCloneShort() {        assertEquals(null, ArrayUtils.clone((short[]) null));        short[] original = new short[] {1, 4};        short[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }        public void testCloneChar() {        assertEquals(null, ArrayUtils.clone((char[]) null));        char[] original = new char[] {'a', '4'};        char[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }        public void testCloneByte() {        assertEquals(null, ArrayUtils.clone((byte[]) null));        byte[] original = new byte[] {1, 6};        byte[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }        public void testCloneDouble() {        assertEquals(null, ArrayUtils.clone((double[]) null));        double[] original = new double[] {2.4d, 5.7d};        double[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }        public void testCloneFloat() {        assertEquals(null, ArrayUtils.clone((float[]) null));        float[] original = new float[] {2.6f, 6.4f};        float[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }    //-----------------------------------------------------------------------    public void testSubarrayObject() {        Object[] nullArray = null;        Object[] objectArray = { "a", "b", "c", "d", "e", "f"};        assertEquals("0 start, mid end", "abcd",            StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4)));        assertEquals("0 start, length end", "abcdef",            StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length)));        assertEquals("mid start, mid end", "bcd",            StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4)));        assertEquals("mid start, length end", "bcdef",            StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", "",            StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2)));        assertEquals("start > end", "",            StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2)));        assertEquals("start == end", "",            StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3)));        assertEquals("start undershoot, normal end", "abcd",            StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4)));        assertEquals("start overshoot, any end", "",            StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4)));        assertEquals("normal start, end overshoot", "cdef",            StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33)));        assertEquals("start undershoot, end overshoot", "abcdef",            StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12)));                    // array type tests        Date[] dateArray = { new java.sql.Date(new Date().getTime()),            new Date(), new Date(), new Date(), new Date() };        assertSame("Object type", Object.class,            ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType());        assertSame("java.util.Date type", java.util.Date.class,            ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType());        assertNotSame("java.sql.Date type", java.sql.Date.class,            ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType());        try {            Object dummy = (java.sql.Date[])ArrayUtils.subarray(dateArray, 1,3);            fail("Invalid downcast");        } catch (ClassCastException e) {}    }    public void testSubarrayLong() {        long[] nullArray = null;        long[] array = { 999910, 999911, 999912, 999913, 999914, 999915 };        long[] leftSubarray     = { 999910, 999911, 999912, 999913 };        long[] midSubarray      = { 999911, 999912, 999913, 999914 };        long[] rightSubarray    = { 999912, 999913, 999914, 999915 };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_LONG_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_LONG_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_LONG_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_LONG_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_LONG_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_LONG_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_LONG_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_LONG_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("long type", long.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }    public void testSubarrayInt() {        int[] nullArray = null;        int[] array = { 10, 11, 12, 13, 14, 15 };        int[] leftSubarray  = { 10, 11, 12, 13 };        int[] midSubarray   = { 11, 12, 13, 14 };        int[] rightSubarray = { 12, 13, 14, 15 };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_INT_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_INT_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_INT_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_INT_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_INT_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_INT_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_INT_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_INT_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("int type", int.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }    public void testSubarrayShort() {        short[] nullArray = null;        short[] array = { 10, 11, 12, 13, 14, 15 };        short[] leftSubarray    = { 10, 11, 12, 13 };        short[] midSubarray     = { 11, 12, 13, 14 };        short[] rightSubarray   = { 12, 13, 14, 15 };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_SHORT_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_SHORT_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_SHORT_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_SHORT_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_SHORT_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_SHORT_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_SHORT_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_SHORT_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("short type", short.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }    public void testSubarrChar() {        char[] nullArray = null;        char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' };        char[] leftSubarray     = { 'a', 'b', 'c', 'd', };        char[] midSubarray      = { 'b', 'c', 'd', 'e', };        char[] rightSubarray    = { 'c', 'd', 'e', 'f', };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_CHAR_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_CHAR_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_CHAR_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_CHAR_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_CHAR_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_CHAR_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_CHAR_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_CHAR_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("char type", char.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }    public void testSubarrayByte() {        byte[] nullArray = null;        byte[] array = { 10, 11, 12, 13, 14, 15 };        byte[] leftSubarray     = { 10, 11, 12, 13 };        byte[] midSubarray      = { 11, 12, 13, 14 };        byte[] rightSubarray = { 12, 13, 14, 15 };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_BYTE_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_BYTE_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_BYTE_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_BYTE_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_BYTE_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_BYTE_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_BYTE_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_BYTE_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("byte type", byte.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }    public void testSubarrayDouble() {        double[] nullArray = null;        double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 };        double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, };        double[] midSubarray    = { 11.234, 12.345, 13.456, 14.567, };        double[] rightSubarray  = { 12.345, 13.456, 14.567, 15.678 };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_DOUBLE_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_DOUBLE_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_DOUBLE_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_DOUBLE_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_DOUBLE_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_DOUBLE_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_DOUBLE_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_DOUBLE_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("double type", double.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }    public void testSubarrayFloat() {        float[] nullArray = null;        float[] array = { 10, 11, 12, 13, 14, 15 };        float[] leftSubarray    = { 10, 11, 12, 13 };        float[] midSubarray     = { 11, 12, 13, 14 };        float[] rightSubarray   = { 12, 13, 14, 15 };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_FLOAT_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_FLOAT_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_FLOAT_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_FLOAT_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_FLOAT_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_FLOAT_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_FLOAT_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_FLOAT_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("float type", float.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }    public void testSubarrayBoolean() {        boolean[] nullArray = null;        boolean[] array = { true, true, false, true, false, true };        boolean[] leftSubarray  = { true, true, false, true  };        boolean[] midSubarray   = { true, false, true, false };        boolean[] rightSubarray = { false, true, false, true };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_BOOLEAN_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_BOOLEAN_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_BOOLEAN_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_BOOLEAN_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_BOOLEAN_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_BOOLEAN_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_BOOLEAN_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_BOOLEAN_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("boolean type", boolean.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }        //-----------------------------------------------------------------------    public void testSameLength() {        Object[] nullArray = null;        Object[] emptyArray = new Object[0];        Object[] oneArray = new Object[] {"pick"};        Object[] twoArray = new Object[] {"pick", "stick"};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }    public void testSameLengthBoolean() {        boolean[] nullArray = null;        boolean[] emptyArray = new boolean[0];        boolean[] oneArray = new boolean[] {true};        boolean[] twoArray = new boolean[] {true, false};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        public void testSameLengthLong() {        long[] nullArray = null;        long[] emptyArray = new long[0];        long[] oneArray = new long[] {0L};        long[] twoArray = new long[] {0L, 76L};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        public void testSameLengthInt() {        int[] nullArray = null;        int[] emptyArray = new int[0];        int[] oneArray = new int[] {4};        int[] twoArray = new int[] {5, 7};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        public void testSameLengthShort() {        short[] nullArray = null;        short[] emptyArray = new short[0];        short[] oneArray = new short[] {4};        short[] twoArray = new short[] {6, 8};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        public void testSameLengthChar() {        char[] nullArray = null;        char[] emptyArray = new char[0];        char[] oneArray = new char[] {'f'};        char[] twoArray = new char[] {'d', 't'};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        public void testSameLengthByte() {        byte[] nullArray = null;        byte[] emptyArray = new byte[0];        byte[] oneArray = new byte[] {3};        byte[] twoArray = new byte[] {4, 6};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        public void testSameLengthDouble() {        double[] nullArray = null;        double[] emptyArray = new double[0];        double[] oneArray = new double[] {1.3d};        double[] twoArray = new double[] {4.5d, 6.3d};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        public void testSameLengthFloat() {        float[] nullArray = null;        float[] emptyArray = new float[0];        float[] oneArray = new float[] {2.5f};        float[] twoArray = new float[] {6.4f, 5.8f};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        //-----------------------------------------------------------------------    public void testSameType() {        try {            ArrayUtils.isSameType(null, null);            fail();        } catch (IllegalArgumentException ex) {}        try {            ArrayUtils.isSameType(null, new Object[0]);            fail();        } catch (IllegalArgumentException ex) {}        try {            ArrayUtils.isSameType(new Object[0], null);            fail();        } catch (IllegalArgumentException ex) {}                assertEquals(true, ArrayUtils.isSameType(new Object[0], new Object[0]));        assertEquals(false, ArrayUtils.isSameType(new String[0], new Object[0]));        assertEquals(true, ArrayUtils.isSameType(new String[0][0], new String[0][0]));        assertEquals(false, ArrayUtils.isSameType(new String[0], new String[0][0]));        assertEquals(false, ArrayUtils.isSameType(new String[0][0], new String[0]));    }        //-----------------------------------------------------------------------    public void testReverse() {        StringBuffer str1 = new StringBuffer("pick");        String str2 = "a";        String[] str3 = new String[] {"stick"};        String str4 = "up";                Object[] array = new Object[] {str1, str2, str3};        ArrayUtils.reverse(array);        assertEquals(array[0], str3);        assertEquals(array[1], str2);        assertEquals(array[2], str1);                array = new Object[] {str1, str2, str3, str4};        ArrayUtils.reverse(array);        assertEquals(array[0], str4);        assertEquals(array[1], str3);        assertEquals(array[2], str2);        assertEquals(array[3], str1);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }    public void testReverseLong() {        long[] array = new long[] {1L, 2L, 3L};        ArrayUtils.reverse(array);        assertEquals(array[0], 3L);        assertEquals(array[1], 2L);        assertEquals(array[2], 1L);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        public void testReverseInt() {        int[] array = new int[] {1, 2, 3};        ArrayUtils.reverse(array);        assertEquals(array[0], 3);        assertEquals(array[1], 2);        assertEquals(array[2], 1);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        public void testReverseShort() {        short[] array = new short[] {1, 2, 3};        ArrayUtils.reverse(array);        assertEquals(array[0], 3);        assertEquals(array[1], 2);        assertEquals(array[2], 1);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        public void testReverseChar() {        char[] array = new char[] {'a', 'f', 'C'};        ArrayUtils.reverse(array);        assertEquals(array[0], 'C');        assertEquals(array[1], 'f');        assertEquals(array[2], 'a');        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        public void testReverseByte() {        byte[] array = new byte[] {2, 3, 4};        ArrayUtils.reverse(array);        assertEquals(array[0], 4);        assertEquals(array[1], 3);        assertEquals(array[2], 2);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        public void testReverseDouble() {        double[] array = new double[] {0.3d, 0.4d, 0.5d};        ArrayUtils.reverse(array);        assertEquals(array[0], 0.5d, 0.0d);        assertEquals(array[1], 0.4d, 0.0d);        assertEquals(array[2], 0.3d, 0.0d);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        public void testReverseFloat() {        float[] array = new float[] {0.3f, 0.4f, 0.5f};        ArrayUtils.reverse(array);        assertEquals(array[0], 0.5f, 0.0f);        assertEquals(array[1], 0.4f, 0.0f);        assertEquals(array[2], 0.3f, 0.0f);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        public void testReverseBoolean() {        boolean[] array = new boolean[] {false, false, true};        ArrayUtils.reverse(array);        assertEquals(array[0], true);        assertEquals(array[1], false);        assertEquals(array[2], false);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        //-----------------------------------------------------------------------    public void testIndexOf() {        Object[] array = new Object[] { "0", "1", "2", "3", null, "0" };        assertEquals(-1, ArrayUtils.indexOf(null, null));        assertEquals(-1, ArrayUtils.indexOf(null, "0"));        assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0"));        assertEquals(0, ArrayUtils.indexOf(array, "0"));        assertEquals(1, ArrayUtils.indexOf(array, "1"));        assertEquals(2, ArrayUtils.indexOf(array, "2"));        assertEquals(3, ArrayUtils.indexOf(array, "3"));        assertEquals(4, ArrayUtils.indexOf(array, null));        assertEquals(-1, ArrayUtils.indexOf(array, "notInArray"));    }    public void testIndexOfWithStartIndex() {        Object[] array = new Object[] { "0", "1", "2", "3", null, "0" };        assertEquals(-1, ArrayUtils.indexOf(null, null, 2));        assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0", 0));        assertEquals(-1, ArrayUtils.indexOf(null, "0", 2));        assertEquals(5, ArrayUtils.indexOf(array, "0", 2));        assertEquals(-1, ArrayUtils.indexOf(array, "1", 2));        assertEquals(2, ArrayUtils.indexOf(array, "2", 2));        assertEquals(3, ArrayUtils.indexOf(array, "3", 2));        assertEquals(4, ArrayUtils.indexOf(array, null, 2));        assertEquals(-1, ArrayUtils.indexOf(array, "notInArray", 2));                assertEquals(4, ArrayUtils.indexOf(array, null, -1));        assertEquals(-1, ArrayUtils.indexOf(array, null, 8));        assertEquals(-1, ArrayUtils.indexOf(array, "0", 8));    }    public void testLastIndexOf() {        Object[] array = new Object[] { "0", "1", "2", "3", null, "0" };        assertEquals(-1, ArrayUtils.lastIndexOf(null, null));        assertEquals(-1, ArrayUtils.lastIndexOf(null, "0"));        assertEquals(5, ArrayUtils.lastIndexOf(array, "0"));        assertEquals(1, ArrayUtils.lastIndexOf(array, "1"));        assertEquals(2, ArrayUtils.lastIndexOf(array, "2"));        assertEquals(3, ArrayUtils.lastIndexOf(array, "3"));        assertEquals(4, ArrayUtils.lastIndexOf(array, null));        assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray"));    }    public void testLastIndexOfWithStartIndex() {        Object[] array = new Object[] { "0", "1", "2", "3", null, "0" };        assertEquals(-1, ArrayUtils.lastIndexOf(null, null, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(null, "0", 2));        assertEquals(0, ArrayUtils.lastIndexOf(array, "0", 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, "1", 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, "2", 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, "3", 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, "3", -1));        assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5));        assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray", 5));                assertEquals(-1, ArrayUtils.lastIndexOf(array, null, -1));        assertEquals(5, ArrayUtils.lastIndexOf(array, "0", 88));    }    public void testContains() {        Object[] array = new Object[] { "0", "1", "2", "3", null, "0" };        assertEquals(false, ArrayUtils.contains(null, null));        assertEquals(false, ArrayUtils.contains(null, "1"));        assertEquals(true, ArrayUtils.contains(array, "0"));        assertEquals(true, ArrayUtils.contains(array, "1"));        assertEquals(true, ArrayUtils.contains(array, "2"));        assertEquals(true, ArrayUtils.contains(array, "3"));        assertEquals(true, ArrayUtils.contains(array, null));        assertEquals(false, ArrayUtils.contains(array, "notInArray"));    }        //-----------------------------------------------------------------------    public void testIndexOfLong() {        long[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, 0));        array = new long[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.indexOf(array, 0));        assertEquals(1, ArrayUtils.indexOf(array, 1));        assertEquals(2, ArrayUtils.indexOf(array, 2));        assertEquals(3, ArrayUtils.indexOf(array, 3));        assertEquals(-1, ArrayUtils.indexOf(array, 99));    }    public void testIndexOfLongWithStartIndex() {        long[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));        array = new long[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));    }    public void testLastIndexOfLong() {        long[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));        array = new long[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));    }    public void testLastIndexOfLongWithStartIndex() {        long[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));        array = new long[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4));        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));    }    public void testContainsLong() {        long[] array = null;        assertEquals(false, ArrayUtils.contains(array, 1));        array = new long[] { 0, 1, 2, 3, 0 };        assertEquals(true, ArrayUtils.contains(array, 0));        assertEquals(true, ArrayUtils.contains(array, 1));        assertEquals(true, ArrayUtils.contains(array, 2));        assertEquals(true, ArrayUtils.contains(array, 3));        assertEquals(false, ArrayUtils.contains(array, 99));    }        //-----------------------------------------------------------------------    public void testIndexOfInt() {        int[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, 0));        array = new int[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.indexOf(array, 0));        assertEquals(1, ArrayUtils.indexOf(array, 1));        assertEquals(2, ArrayUtils.indexOf(array, 2));        assertEquals(3, ArrayUtils.indexOf(array, 3));        assertEquals(-1, ArrayUtils.indexOf(array, 99));    }    public void testIndexOfIntWithStartIndex() {        int[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));        array = new int[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));    }    public void testLastIndexOfInt() {        int[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));        array = new int[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));    }    public void testLastIndexOfIntWithStartIndex() {        int[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));        array = new int[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));    }    public void testContainsInt() {        int[] array = null;        assertEquals(false, ArrayUtils.contains(array, 1));        array = new int[] { 0, 1, 2, 3, 0 };        assertEquals(true, ArrayUtils.contains(array, 0));        assertEquals(true, ArrayUtils.contains(array, 1));        assertEquals(true, ArrayUtils.contains(array, 2));        assertEquals(true, ArrayUtils.contains(array, 3));        assertEquals(false, ArrayUtils.contains(array, 99));    }        //-----------------------------------------------------------------------    public void testIndexOfShort() {        short[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0));        array = new short[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.indexOf(array, (short) 0));        assertEquals(1, ArrayUtils.indexOf(array, (short) 1));        assertEquals(2, ArrayUtils.indexOf(array, (short) 2));        assertEquals(3, ArrayUtils.indexOf(array, (short) 3));        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99));    }    public void testIndexOfShortWithStartIndex() {        short[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 2));        array = new short[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.indexOf(array, (short) 0, 2));        assertEquals(-1, ArrayUtils.indexOf(array, (short) 1, 2));        assertEquals(2, ArrayUtils.indexOf(array, (short) 2, 2));        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, 2));        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, -1));        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99, 0));        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 6));    }    public void testLastIndexOfShort() {        short[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0));        array = new short[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0));        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1));        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2));        assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));    }    public void testLastIndexOfShortWithStartIndex() {        short[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2));        array = new short[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88));    }    public void testContainsShort() {        short[] array = null;        assertEquals(false, ArrayUtils.contains(array, (short) 1));        array = new short[] { 0, 1, 2, 3, 0 };        assertEquals(true, ArrayUtils.contains(array, (short) 0));        assertEquals(true, ArrayUtils.contains(array, (short) 1));        assertEquals(true, ArrayUtils.contains(array, (short) 2));        assertEquals(true, ArrayUtils.contains(array, (short) 3));        assertEquals(false, ArrayUtils.contains(array, (short) 99));    }        //-----------------------------------------------------------------------    public void testIndexOfChar() {        char[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, 'a'));        array = new char[] { 'a', 'b', 'c', 'd', 'a' };        assertEquals(0, ArrayUtils.indexOf(array, 'a'));        assertEquals(1, ArrayUtils.indexOf(array, 'b'));        assertEquals(2, ArrayUtils.indexOf(array, 'c'));        assertEquals(3, ArrayUtils.indexOf(array, 'd'));        assertEquals(-1, ArrayUtils.indexOf(array, 'e'));    }    public void testIndexOfCharWithStartIndex() {        char[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2));        array = new char[] { 'a', 'b', 'c', 'd', 'a' };        assertEquals(4, ArrayUtils.indexOf(array, 'a', 2));        assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2));        assertEquals(2, ArrayUtils.indexOf(array, 'c', 2));        assertEquals(3, ArrayUtils.indexOf(array, 'd', 2));        assertEquals(3, ArrayUtils.indexOf(array, 'd', -1));        assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0));        assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6));    }    public void testLastIndexOfChar() {        char[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a'));        array = new char[] { 'a', 'b', 'c', 'd', 'a' };        assertEquals(4, ArrayUtils.lastIndexOf(array, 'a'));        assertEquals(1, ArrayUtils.lastIndexOf(array, 'b'));        assertEquals(2, ArrayUtils.lastIndexOf(array, 'c'));        assertEquals(3, ArrayUtils.lastIndexOf(array, 'd'));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));    }    public void testLastIndexOfCharWithStartIndex() {        char[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2));        array = new char[] { 'a', 'b', 'c', 'd', 'a' };        assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));        assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88));    }    public void testContainsChar() {        char[] array = null;        assertEquals(false, ArrayUtils.contains(array, 'b'));        array = new char[] { 'a', 'b', 'c', 'd', 'a' };        assertEquals(true, ArrayUtils.contains(array, 'a'));        assertEquals(true, ArrayUtils.contains(array, 'b'));        assertEquals(true, ArrayUtils.contains(array, 'c'));        assertEquals(true, ArrayUtils.contains(array, 'd'));        assertEquals(false, ArrayUtils.contains(array, 'e'));    }        //-----------------------------------------------------------------------    public void testIndexOfByte() {        byte[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0));        array = new byte[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.indexOf(array, (byte) 0));        assertEquals(1, ArrayUtils.indexOf(array, (byte) 1));        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2));        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3));        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99));    }    public void testIndexOfByteWithStartIndex() {        byte[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2));        array = new byte[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2));        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2));        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2));        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2));        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1));        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0));        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6));    }    public void testLastIndexOfByte() {        byte[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0));        array = new byte[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0));        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1));        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2));        assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));    }    public void testLastIndexOfByteWithStartIndex() {        byte[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2));        array = new byte[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88));    }    public void testContainsByte() {        byte[] array = null;        assertEquals(false, ArrayUtils.contains(array, (byte) 1));        array = new byte[] { 0, 1, 2, 3, 0 };        assertEquals(true, ArrayUtils.contains(array, (byte) 0));        assertEquals(true, ArrayUtils.contains(array, (byte) 1));        assertEquals(true, ArrayUtils.contains(array, (byte) 2));        assertEquals(true, ArrayUtils.contains(array, (byte) 3));        assertEquals(false, ArrayUtils.contains(array, (byte) 99));    }        //-----------------------------------------------------------------------    public void testIndexOfDouble() {        double[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));        array = new double[0];        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.indexOf(array, (double) 0));        assertEquals(1, ArrayUtils.indexOf(array, (double) 1));        assertEquals(2, ArrayUtils.indexOf(array, (double) 2));        assertEquals(3, ArrayUtils.indexOf(array, (double) 3));        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, -1));        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99));    }    public void testIndexOfDoubleTolerance() {        double[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));        array = new double[0];        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3));        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35));        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0));        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001));    }    public void testIndexOfDoubleWithStartIndex() {        double[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));        array = new double[0];        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 2));        assertEquals(-1, ArrayUtils.indexOf(array, (double) 1, 2));        assertEquals(2, ArrayUtils.indexOf(array, (double) 2, 2));        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, 2));        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99, 0));        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 6));    }        public void testIndexOfDoubleWithStartIndexTolerance() {        double[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));        array = new double[0];        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3));        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3));        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3));        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35));        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0));        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001));        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0));        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001));    }    public void testLastIndexOfDouble() {        double[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));        array = new double[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0));        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1));        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2));        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));    }    public void testLastIndexOfDoubleTolerance() {        double[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));        array = new double[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3));        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35));        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0));        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001));    }    public void testLastIndexOfDoubleWithStartIndex() {        double[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));        array = new double[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, -1));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88));    }    public void testLastIndexOfDoubleWithStartIndexTolerance() {        double[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));        array = new double[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3));        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3));        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35));        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0));        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0));    }    public void testContainsDouble() {        double[] array = null;        assertEquals(false, ArrayUtils.contains(array, (double) 1));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(true, ArrayUtils.contains(array, (double) 0));        assertEquals(true, ArrayUtils.contains(array, (double) 1));        assertEquals(true, ArrayUtils.contains(array, (double) 2));        assertEquals(true, ArrayUtils.contains(array, (double) 3));        assertEquals(false, ArrayUtils.contains(array, (double) 99));    }    public void testContainsDoubleTolerance() {        double[] array = null;        assertEquals(false, ArrayUtils.contains(array, (double) 1, (double) 0));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(false, ArrayUtils.contains(array, (double) 4.0, (double) 0.33));        assertEquals(false, ArrayUtils.contains(array, (double) 2.5, (double) 0.49));        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.50));        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.51));    }        //-----------------------------------------------------------------------    public void testIndexOfFloat() {        float[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));        array = new float[0];        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));        array = new float[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.indexOf(array, (float) 0));        assertEquals(1, ArrayUtils.indexOf(array, (float) 1));        assertEquals(2, ArrayUtils.indexOf(array, (float) 2));        assertEquals(3, ArrayUtils.indexOf(array, (float) 3));        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99));    }    public void testIndexOfFloatWithStartIndex() {        float[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));        array = new float[0];        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));        array = new float[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2));        assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2));        assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2));        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2));        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1));        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0));        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6));    }    public void testLastIndexOfFloat() {        float[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));        array = new float[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));        array = new float[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0));        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1));        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2));        assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));    }    public void testLastIndexOfFloatWithStartIndex() {        float[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));        array = new float[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));        array = new float[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.lastIndexOf(array, (float) 0, 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1, 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, -1));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0, 88));    }    public void testContainsFloat() {        float[] array = null;        assertEquals(false, ArrayUtils.contains(array, (float) 1));        array = new float[] { 0, 1, 2, 3, 0 };        assertEquals(true, ArrayUtils.contains(array, (float) 0));        assertEquals(true, ArrayUtils.contains(array, (float) 1));        assertEquals(true, ArrayUtils.contains(array, (float) 2));        assertEquals(true, ArrayUtils.contains(array, (float) 3));        assertEquals(false, ArrayUtils.contains(array, (float) 99));    }        //-----------------------------------------------------------------------    public void testIndexOfBoolean() {        boolean[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, true));        array = new boolean[0];        assertEquals(-1, ArrayUtils.indexOf(array, true));        array = new boolean[] { true, false, true };        assertEquals(0, ArrayUtils.indexOf(array, true));        assertEquals(1, ArrayUtils.indexOf(array, false));        array = new boolean[] { true, true };        assertEquals(-1, ArrayUtils.indexOf(array, false));    }    public void testIndexOfBooleanWithStartIndex() {        boolean[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));        array = new boolean[0];        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));        array = new boolean[] { true, false, true };        assertEquals(2, ArrayUtils.indexOf(array, true, 1));        assertEquals(-1, ArrayUtils.indexOf(array, false, 2));        assertEquals(1, ArrayUtils.indexOf(array, false, 0));        assertEquals(1, ArrayUtils.indexOf(array, false, -1));        array = new boolean[] { true, true };        assertEquals(-1, ArrayUtils.indexOf(array, false, 0));        assertEquals(-1, ArrayUtils.indexOf(array, false, -1));    }    public void testLastIndexOfBoolean() {        boolean[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));        array = new boolean[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));        array = new boolean[] { true, false, true };        assertEquals(2, ArrayUtils.lastIndexOf(array, true));        assertEquals(1, ArrayUtils.lastIndexOf(array, false));        array = new boolean[] { true, true };        assertEquals(-1, ArrayUtils.lastIndexOf(array, false));    }    public void testLastIndexOfBooleanWithStartIndex() {        boolean[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));        array = new boolean[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));        array = new boolean[] { true, false, true };        assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2));        assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1));        assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));        array = new boolean[] { true, true };        assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));    }    public void testContainsBoolean() {        boolean[] array = null;        assertEquals(false, ArrayUtils.contains(array, true));        array = new boolean[] { true, false, true };        assertEquals(true, ArrayUtils.contains(array, true));        assertEquals(true, ArrayUtils.contains(array, false));        array = new boolean[] { true, true };        assertEquals(true, ArrayUtils.contains(array, true));        assertEquals(false, ArrayUtils.contains(array, false));    }        // testToPrimitive/Object for boolean    //  -----------------------------------------------------------------------    public void testToPrimitive_boolean() {        final Boolean[] b = null;        assertEquals(null, ArrayUtils.toPrimitive(b));        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0]));        assertTrue(Arrays.equals(            new boolean[] {true, false, true},            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}))        );        try {            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null});            fail();        } catch (NullPointerException ex) {}    }    public void testToPrimitive_boolean_boolean() {        assertEquals(null, ArrayUtils.toPrimitive(null, false));        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false));        assertTrue(Arrays.equals(            new boolean[] {true, false, true},            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, false))        );        assertTrue(Arrays.equals(            new boolean[] {true, false, false},            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, false))        );        assertTrue(Arrays.equals(            new boolean[] {true, true, false},            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, true))        );    }    public void testToObject_boolean() {        final boolean[] b = null;        assertEquals(null, ArrayUtils.toObject(b));        assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0]));        assertTrue(Arrays.equals(            new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE},            ArrayUtils.toObject(new boolean[] {true, false, true}))        );    }    // testToPrimitive/Object for byte    //  -----------------------------------------------------------------------    public void testToPrimitive_byte() {        final Byte[] b = null;        assertEquals(null, ArrayUtils.toPrimitive(b));                assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0]));                assertTrue(Arrays.equals(            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE),                 new Byte(Byte.MAX_VALUE), new Byte((byte)9999999)}))        );        try {            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE), null});            fail();        } catch (NullPointerException ex) {}    }    public void testToPrimitive_byte_byte() {        final Byte[] b = null;        assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE));                assertSame(ArrayUtils.EMPTY_BYTE_ARRAY,             ArrayUtils.toPrimitive(new Byte[0], (byte)1));                assertTrue(Arrays.equals(            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE),                 new Byte(Byte.MAX_VALUE), new Byte((byte)9999999)},                 Byte.MIN_VALUE))        );                assertTrue(Arrays.equals(            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE), null,                 new Byte((byte)9999999)}, Byte.MAX_VALUE))        );    }    public void testToObject_byte() {        final byte[] b = null;        assertEquals(null, ArrayUtils.toObject(b));                assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY,             ArrayUtils.toObject(new byte[0]));                assertTrue(Arrays.equals(            new Byte[] {new Byte(Byte.MIN_VALUE),                 new Byte(Byte.MAX_VALUE), new Byte((byte)9999999)},                ArrayUtils.toObject(new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE,                 (byte)9999999}))        );    }    // testToPrimitive/Object for short    //  -----------------------------------------------------------------------    public void testToPrimitive_short() {        final Short[] b = null;        assertEquals(null, ArrayUtils.toPrimitive(b));                assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0]));                assertTrue(Arrays.equals(            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE),                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))        );        try {            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});            fail();        } catch (NullPointerException ex) {}    }    public void testToPrimitive_short_short() {        final Short[] s = null;        assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE));                assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0],         Short.MIN_VALUE));                assertTrue(Arrays.equals(            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE),                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))        );                assertTrue(Arrays.equals(            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null,                 new Short((short)9999999)}, Short.MAX_VALUE))        );    }    public void testToObject_short() {        final short[] b = null;        assertEquals(null, ArrayUtils.toObject(b));                assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,         ArrayUtils.toObject(new short[0]));                assertTrue(Arrays.equals(            new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE),                 new Short((short)9999999)},            ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,                 (short)9999999}))        );    }    //  testToPrimitive/Object for int    //  -----------------------------------------------------------------------     public void testToPrimitive_int() {         final Integer[] b = null;         assertEquals(null, ArrayUtils.toPrimitive(b));         assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0]));         assertTrue(Arrays.equals(             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE),                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))         );         try {             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});             fail();         } catch (NullPointerException ex) {}     }     public void testToPrimitive_int_int() {         final Long[] l = null;         assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE));         assertSame(ArrayUtils.EMPTY_INT_ARRAY,          ArrayUtils.toPrimitive(new Integer[0], 1));         assertTrue(Arrays.equals(             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE),                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));         assertTrue(Arrays.equals(             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE),                  null, new Integer(9999999)}, Integer.MAX_VALUE))         );     }         public void testToPrimitive_intNull() {        Integer[] iArray = null;        assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE));    }    public void testToObject_int() {        final int[] b = null;        assertEquals(null, ArrayUtils.toObject(b));            assertSame(            ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY,            ArrayUtils.toObject(new int[0]));            assertTrue(            Arrays.equals(                new Integer[] {                    new Integer(Integer.MIN_VALUE),                    new Integer(Integer.MAX_VALUE),                    new Integer(9999999)},            ArrayUtils.toObject(                new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 })));    }    //  testToPrimitive/Object for long    //  -----------------------------------------------------------------------     public void testToPrimitive_long() {         final Long[] b = null;         assertEquals(null, ArrayUtils.toPrimitive(b));                  assertSame(ArrayUtils.EMPTY_LONG_ARRAY,             ArrayUtils.toPrimitive(new Long[0]));                  assertTrue(Arrays.equals(             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE),                  new Long(Long.MAX_VALUE), new Long(9999999)}))         );         try {             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});             fail();         } catch (NullPointerException ex) {}     }     public void testToPrimitive_long_long() {         final Long[] l = null;         assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE));                  assertSame(ArrayUtils.EMPTY_LONG_ARRAY,          ArrayUtils.toPrimitive(new Long[0], 1));                  assertTrue(Arrays.equals(             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE),                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));                  assertTrue(Arrays.equals(             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE),                  null, new Long(9999999)}, Long.MAX_VALUE))         );     }         public void testToObject_long() {        final long[] b = null;        assertEquals(null, ArrayUtils.toObject(b));            assertSame(            ArrayUtils.EMPTY_LONG_OBJECT_ARRAY,            ArrayUtils.toObject(new long[0]));            assertTrue(            Arrays.equals(                new Long[] {                    new Long(Long.MIN_VALUE),                    new Long(Long.MAX_VALUE),                    new Long(9999999)},            ArrayUtils.toObject(                new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 })));    }    //  testToPrimitive/Object for float    //  -----------------------------------------------------------------------     public void testToPrimitive_float() {         final Float[] b = null;         assertEquals(null, ArrayUtils.toPrimitive(b));                  assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,             ArrayUtils.toPrimitive(new Float[0]));                  assertTrue(Arrays.equals(             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE),                  new Float(Float.MAX_VALUE), new Float(9999999)}))         );         try {             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});             fail();         } catch (NullPointerException ex) {}     }     public void testToPrimitive_float_float() {         final Float[] l = null;         assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE));                  assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,          ArrayUtils.toPrimitive(new Float[0], 1));                  assertTrue(Arrays.equals(             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE),                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));                  assertTrue(Arrays.equals(             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE),                  null, new Float(9999999)}, Float.MAX_VALUE))         );     }         public void testToObject_float() {        final float[] b = null;        assertEquals(null, ArrayUtils.toObject(b));            assertSame(            ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY,            ArrayUtils.toObject(new float[0]));            assertTrue(            Arrays.equals(                new Float[] {                    new Float(Float.MIN_VALUE),                    new Float(Float.MAX_VALUE),                    new Float(9999999)},            ArrayUtils.toObject(                new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 })));    }    //  testToPrimitive/Object for double    //  -----------------------------------------------------------------------     public void testToPrimitive_double() {         final Double[] b = null;         assertEquals(null, ArrayUtils.toPrimitive(b));                  assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,             ArrayUtils.toPrimitive(new Double[0]));                  assertTrue(Arrays.equals(             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE),                  new Double(Double.MAX_VALUE), new Double(9999999)}))         );         try {             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});             fail();         } catch (NullPointerException ex) {}     }     public void testToPrimitive_double_double() {         final Double[] l = null;         assertEquals(null, ArrayUtils.toPrimitive(l, Double.MIN_VALUE));                  assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,          ArrayUtils.toPrimitive(new Double[0], 1));                  assertTrue(Arrays.equals(             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE),                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));                  assertTrue(Arrays.equals(             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE),                  null, new Double(9999999)}, Double.MAX_VALUE))         );     }         public void testToObject_double() {        final double[] b = null;        assertEquals(null, ArrayUtils.toObject(b));            assertSame(            ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY,            ArrayUtils.toObject(new double[0]));            assertTrue(            Arrays.equals(                new Double[] {                    new Double(Double.MIN_VALUE),                    new Double(Double.MAX_VALUE),                    new Double(9999999)},            ArrayUtils.toObject(                new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 })));    }    //-----------------------------------------------------------------------    /**     * Test for {@link ArrayUtils#isEmpty(java.lang.Object[])}.     */    public void testIsEmptyObject() {        Object[] emptyArray = new Object[] {};        Object[] notEmptyArray = new Object[] { new String("Value") };        assertEquals(true, ArrayUtils.isEmpty((Object[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyArray));    }    /**     * Tests for {@link ArrayUtils#isEmpty(long[])},     * {@link ArrayUtils#isEmpty(int[])},     * {@link ArrayUtils#isEmpty(short[])},     * {@link ArrayUtils#isEmpty(char[])},     * {@link ArrayUtils#isEmpty(byte[])},     * {@link ArrayUtils#isEmpty(double[])},     * {@link ArrayUtils#isEmpty(float[])} and     * {@link ArrayUtils#isEmpty(boolean[])}.     */    public void testIsEmptyPrimitives() {        long[] emptyLongArray = new long[] {};        long[] notEmptyLongArray = new long[] { 1L };        assertEquals(true, ArrayUtils.isEmpty((long[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyLongArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyLongArray));        int[] emptyIntArray = new int[] {};        int[] notEmptyIntArray = new int[] { 1 };        assertEquals(true, ArrayUtils.isEmpty((int[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyIntArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyIntArray));        short[] emptyShortArray = new short[] {};        short[] notEmptyShortArray = new short[] { 1 };        assertEquals(true, ArrayUtils.isEmpty((short[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyShortArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyShortArray));        char[] emptyCharArray = new char[] {};        char[] notEmptyCharArray = new char[] { 1 };        assertEquals(true, ArrayUtils.isEmpty((char[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyCharArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyCharArray));        byte[] emptyByteArray = new byte[] {};        byte[] notEmptyByteArray = new byte[] { 1 };        assertEquals(true, ArrayUtils.isEmpty((byte[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyByteArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyByteArray));        double[] emptyDoubleArray = new double[] {};        double[] notEmptyDoubleArray = new double[] { 1.0 };        assertEquals(true, ArrayUtils.isEmpty((double[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyDoubleArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyDoubleArray));        float[] emptyFloatArray = new float[] {};        float[] notEmptyFloatArray = new float[] { 1.0F };        assertEquals(true, ArrayUtils.isEmpty((float[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyFloatArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyFloatArray));        boolean[] emptyBooleanArray = new boolean[] {};        boolean[] notEmptyBooleanArray = new boolean[] { true };        assertEquals(true, ArrayUtils.isEmpty((boolean[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyBooleanArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyBooleanArray));    }        // ------------------------------------------------------------------------    public void testGetLength() {        assertEquals(0, ArrayUtils.getLength(null));                Object[] emptyObjectArray = new Object[0];        Object[] notEmptyObjectArray = new Object[] {"aValue"};        assertEquals(0, ArrayUtils.getLength((Object[]) null));        assertEquals(0, ArrayUtils.getLength(emptyObjectArray));        assertEquals(1, ArrayUtils.getLength(notEmptyObjectArray));         int[] emptyIntArray = new int[] {};        int[] notEmptyIntArray = new int[] { 1 };        assertEquals(0, ArrayUtils.getLength((int[]) null));        assertEquals(0, ArrayUtils.getLength(emptyIntArray));        assertEquals(1, ArrayUtils.getLength(notEmptyIntArray));        short[] emptyShortArray = new short[] {};        short[] notEmptyShortArray = new short[] { 1 };        assertEquals(0, ArrayUtils.getLength((short[]) null));        assertEquals(0, ArrayUtils.getLength(emptyShortArray));        assertEquals(1, ArrayUtils.getLength(notEmptyShortArray));        char[] emptyCharArray = new char[] {};        char[] notEmptyCharArray = new char[] { 1 };        assertEquals(0, ArrayUtils.getLength((char[]) null));        assertEquals(0, ArrayUtils.getLength(emptyCharArray));        assertEquals(1, ArrayUtils.getLength(notEmptyCharArray));        byte[] emptyByteArray = new byte[] {};        byte[] notEmptyByteArray = new byte[] { 1 };        assertEquals(0, ArrayUtils.getLength((byte[]) null));        assertEquals(0, ArrayUtils.getLength(emptyByteArray));        assertEquals(1, ArrayUtils.getLength(notEmptyByteArray));        double[] emptyDoubleArray = new double[] {};        double[] notEmptyDoubleArray = new double[] { 1.0 };        assertEquals(0, ArrayUtils.getLength((double[]) null));        assertEquals(0, ArrayUtils.getLength(emptyDoubleArray));        assertEquals(1, ArrayUtils.getLength(notEmptyDoubleArray));        float[] emptyFloatArray = new float[] {};        float[] notEmptyFloatArray = new float[] { 1.0F };        assertEquals(0, ArrayUtils.getLength((float[]) null));        assertEquals(0, ArrayUtils.getLength(emptyFloatArray));        assertEquals(1, ArrayUtils.getLength(notEmptyFloatArray));        boolean[] emptyBooleanArray = new boolean[] {};        boolean[] notEmptyBooleanArray = new boolean[] { true };        assertEquals(0, ArrayUtils.getLength((boolean[]) null));        assertEquals(0, ArrayUtils.getLength(emptyBooleanArray));        assertEquals(1, ArrayUtils.getLength(notEmptyBooleanArray));                try {            ArrayUtils.getLength("notAnArray");            fail("IllegalArgumentException should have been thrown");        } catch (IllegalArgumentException e) {}    }        public void testLastIndex() {        assertEquals(-1, ArrayUtils.lastIndex(null));                Object[] emptyObjectArray = new Object[0];        Object[] notEmptyObjectArray = new Object[] {"aValue"};        assertEquals(-1, ArrayUtils.lastIndex((Object[]) null));        assertEquals(-1, ArrayUtils.lastIndex(emptyObjectArray));        assertEquals(0, ArrayUtils.lastIndex(notEmptyObjectArray));         int[] emptyIntArray = new int[] {};        int[] notEmptyIntArray = new int[] { 1 };        assertEquals(-1, ArrayUtils.lastIndex((int[]) null));        assertEquals(-1, ArrayUtils.lastIndex(emptyIntArray));        assertEquals(0, ArrayUtils.lastIndex(notEmptyIntArray));        short[] emptyShortArray = new short[] {};        short[] notEmptyShortArray = new short[] { 1 };        assertEquals(-1, ArrayUtils.lastIndex((short[]) null));        assertEquals(-1, ArrayUtils.lastIndex(emptyShortArray));        assertEquals(0, ArrayUtils.lastIndex(notEmptyShortArray));        char[] emptyCharArray = new char[] {};        char[] notEmptyCharArray = new char[] { 1 };        assertEquals(-1, ArrayUtils.lastIndex((char[]) null));        assertEquals(-1, ArrayUtils.lastIndex(emptyCharArray));        assertEquals(0, ArrayUtils.lastIndex(notEmptyCharArray));        byte[] emptyByteArray = new byte[] {};        byte[] notEmptyByteArray = new byte[] { 1 };        assertEquals(-1, ArrayUtils.lastIndex((byte[]) null));        assertEquals(-1, ArrayUtils.lastIndex(emptyByteArray));        assertEquals(0, ArrayUtils.lastIndex(notEmptyByteArray));        double[] emptyDoubleArray = new double[] {};        double[] notEmptyDoubleArray = new double[] { 1.0 };        assertEquals(-1, ArrayUtils.lastIndex((double[]) null));        assertEquals(-1, ArrayUtils.lastIndex(emptyDoubleArray));        assertEquals(0, ArrayUtils.lastIndex(notEmptyDoubleArray));        float[] emptyFloatArray = new float[] {};        float[] notEmptyFloatArray = new float[] { 1.0F };        assertEquals(-1, ArrayUtils.lastIndex((float[]) null));        assertEquals(-1, ArrayUtils.lastIndex(emptyFloatArray));        assertEquals(0, ArrayUtils.lastIndex(notEmptyFloatArray));        boolean[] emptyBooleanArray = new boolean[] {};        boolean[] notEmptyBooleanArray = new boolean[] { true };        assertEquals(-1, ArrayUtils.lastIndex((boolean[]) null));        assertEquals(-1, ArrayUtils.lastIndex(emptyBooleanArray));        assertEquals(0, ArrayUtils.lastIndex(notEmptyBooleanArray));                try {            ArrayUtils.lastIndex("notAnArray");            fail("IllegalArgumentException should have been thrown");        } catch (IllegalArgumentException e) {}    }    }
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;import org.apache.commons.lang.exception.Nestable;/** * JUnit tests. *  * @author Matthew Hawthorne * @version $Id: UnhandledExceptionTest.java,v 1.4 2004/02/18 23:22:29 ggregory Exp $ * @see UnhandledException */public class UnhandledExceptionTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(UnhandledExceptionTest.class);    }    public UnhandledExceptionTest(String testName) {        super(testName);    }    // testConstructor    public void testConstructor_throwable_nullInput() {        final Throwable t = null;        new UnhandledException(t);    }    public void testConstructor_stringAndThrowable_nullInput() {        new UnhandledException(null, null);    }    // testGetCause    public void testGetCause() {        final Throwable t = new NullPointerException();        final Nestable n = new UnhandledException(t);        assertEquals(t, n.getCause());    }    public void testGetCauseAndGetMessage() {        final Throwable t = new NullPointerException();        final String msg = "nullArg";        final Nestable n = new UnhandledException(msg, t);        assertEquals(t, n.getCause());        assertEquals(msg, n.getMessage());    }} // UnhandledExceptionTest
/* * Copyright 2003,2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Modifier;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.CharSet}. * * @author Stephen Colebourne * @author Phil Steitz * @version $Id: CharSetTest.java,v 1.4 2004/02/18 23:06:19 ggregory Exp $ */public class CharSetTest extends TestCase {        public CharSetTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(CharSetTest.class);        suite.setName("CharSet Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testClass() {        assertEquals(true, Modifier.isPublic(CharSet.class.getModifiers()));        assertEquals(false, Modifier.isFinal(CharSet.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testGetInstance() {        assertSame(CharSet.EMPTY, CharSet.getInstance(null));        assertSame(CharSet.EMPTY, CharSet.getInstance(""));        assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("a-zA-Z"));        assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("A-Za-z"));        assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance("a-z"));        assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance("A-Z"));        assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance("0-9"));    }                //-----------------------------------------------------------------------    public void testConstructor_String_simple() {        CharSet set;        CharRange[] array;                set = CharSet.getInstance((String) null);        array = set.getCharRanges();        assertEquals("[]", set.toString());        assertEquals(0, array.length);                set = CharSet.getInstance("");        array = set.getCharRanges();        assertEquals("[]", set.toString());        assertEquals(0, array.length);                set = CharSet.getInstance("a");        array = set.getCharRanges();        assertEquals("[a]", set.toString());        assertEquals(1, array.length);        assertEquals("a", array[0].toString());                set = CharSet.getInstance("^a");        array = set.getCharRanges();        assertEquals("[^a]", set.toString());        assertEquals(1, array.length);        assertEquals("^a", array[0].toString());                set = CharSet.getInstance("a-e");        array = set.getCharRanges();        assertEquals("[a-e]", set.toString());        assertEquals(1, array.length);        assertEquals("a-e", array[0].toString());                set = CharSet.getInstance("^a-e");        array = set.getCharRanges();        assertEquals("[^a-e]", set.toString());        assertEquals(1, array.length);        assertEquals("^a-e", array[0].toString());    }        public void testConstructor_String_combo() {        CharSet set;        CharRange[] array;                set = CharSet.getInstance("abc");        array = set.getCharRanges();        assertEquals(3, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));                set = CharSet.getInstance("a-ce-f");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'c')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));                set = CharSet.getInstance("ae-f");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));                set = CharSet.getInstance("e-fa");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));                set = CharSet.getInstance("ae-fm-pz");        array = set.getCharRanges();        assertEquals(4, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('m', 'p')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('z')));    }        public void testConstructor_String_comboNegated() {        CharSet set;        CharRange[] array;                set = CharSet.getInstance("^abc");        array = set.getCharRanges();        assertEquals(3, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));                set = CharSet.getInstance("b^ac");        array = set.getCharRanges();        assertEquals(3, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));                set = CharSet.getInstance("db^ac");        array = set.getCharRanges();        assertEquals(4, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('d')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));                set = CharSet.getInstance("^b^a");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('b', 'b', true)));        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));                set = CharSet.getInstance("b^a-c^z");        array = set.getCharRanges();        assertEquals(3, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'c', true)));        assertEquals(true, ArrayUtils.contains(array, new CharRange('z', 'z', true)));        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));    }            public void testConstructor_String_oddDash() {        CharSet set;        CharRange[] array;                set = CharSet.getInstance("-");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));                set = CharSet.getInstance("--");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));                set = CharSet.getInstance("---");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));                set = CharSet.getInstance("----");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));                set = CharSet.getInstance("-a");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));                set = CharSet.getInstance("a-");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));                set = CharSet.getInstance("a--");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '-')));                set = CharSet.getInstance("--a");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('-', 'a')));    }        public void testConstructor_String_oddNegate() {        CharSet set;        CharRange[] array;        set = CharSet.getInstance("^");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('^'))); // "^"                set = CharSet.getInstance("^^");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // "^^"                set = CharSet.getInstance("^^^");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // "^^"        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^'))); // "^"                set = CharSet.getInstance("^^^^");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // "^^" x2                set = CharSet.getInstance("a^");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a'))); // "a"        assertEquals(true, ArrayUtils.contains(array, new CharRange('^'))); // "^"                set = CharSet.getInstance("^a-");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true))); // "^a"        assertEquals(true, ArrayUtils.contains(array, new CharRange('-'))); // "-"                set = CharSet.getInstance("^^-c");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', 'c', true))); // "^^-c"                set = CharSet.getInstance("^c-^");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true))); // "^c-^"                set = CharSet.getInstance("^c-^d");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true))); // "^c-^"        assertEquals(true, ArrayUtils.contains(array, new CharRange('d'))); // "d"                set = CharSet.getInstance("^^-");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // "^^"        assertEquals(true, ArrayUtils.contains(array, new CharRange('-'))); // "-"    }        public void testConstructor_String_oddCombinations() {        CharSet set;        CharRange[] array = null;                set = CharSet.getInstance("a-^c");        array = set.getCharRanges();        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '^'))); // "a-^"        assertEquals(true, ArrayUtils.contains(array, new CharRange('c'))); // "c"        assertEquals(false, set.contains('b'));        assertEquals(true, set.contains('^'));          assertEquals(true, set.contains('_')); // between ^ and a        assertEquals(true, set.contains('c'));                  set = CharSet.getInstance("^a-^c");        array = set.getCharRanges();        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '^', true))); // "^a-^"        assertEquals(true, ArrayUtils.contains(array, new CharRange('c'))); // "c"        assertEquals(true, set.contains('b'));        assertEquals(false, set.contains('^'));          assertEquals(false, set.contains('_')); // between ^ and a                set = CharSet.getInstance("a- ^-- "); //contains everything        array = set.getCharRanges();        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', ' '))); // "a- "        assertEquals(true, ArrayUtils.contains(array, new CharRange('-', ' ', true))); // "^-- "        assertEquals(true, set.contains('#'));        assertEquals(true, set.contains('^'));        assertEquals(true, set.contains('a'));        assertEquals(true, set.contains('*'));        assertEquals(true, set.contains('A'));                set = CharSet.getInstance("^-b");        array = set.getCharRanges();        assertEquals(true, ArrayUtils.contains(array, new CharRange('^','b'))); // "^-b"        assertEquals(true, set.contains('b'));        assertEquals(true, set.contains('_')); // between ^ and a        assertEquals(false, set.contains('A'));        assertEquals(true, set.contains('^'));                 set = CharSet.getInstance("b-^");        array = set.getCharRanges();        assertEquals(true, ArrayUtils.contains(array, new CharRange('^','b'))); // "b-^"        assertEquals(true, set.contains('b'));        assertEquals(true, set.contains('^'));        assertEquals(true, set.contains('a')); // between ^ and b        assertEquals(false, set.contains('c'));     }            //-----------------------------------------------------------------------        public void testEquals_Object() {        CharSet abc = CharSet.getInstance("abc");        CharSet abc2 = CharSet.getInstance("abc");        CharSet atoc = CharSet.getInstance("a-c");        CharSet atoc2 = CharSet.getInstance("a-c");        CharSet notatoc = CharSet.getInstance("^a-c");        CharSet notatoc2 = CharSet.getInstance("^a-c");                assertEquals(false, abc.equals(null));                assertEquals(true, abc.equals(abc));        assertEquals(true, abc.equals(abc2));        assertEquals(false, abc.equals(atoc));        assertEquals(false, abc.equals(notatoc));                assertEquals(false, atoc.equals(abc));        assertEquals(true, atoc.equals(atoc));        assertEquals(true, atoc.equals(atoc2));        assertEquals(false, atoc.equals(notatoc));                assertEquals(false, notatoc.equals(abc));        assertEquals(false, notatoc.equals(atoc));        assertEquals(true, notatoc.equals(notatoc));        assertEquals(true, notatoc.equals(notatoc2));    }                public void testHashCode() {        CharSet abc = CharSet.getInstance("abc");        CharSet abc2 = CharSet.getInstance("abc");        CharSet atoc = CharSet.getInstance("a-c");        CharSet atoc2 = CharSet.getInstance("a-c");        CharSet notatoc = CharSet.getInstance("^a-c");        CharSet notatoc2 = CharSet.getInstance("^a-c");                assertEquals(abc.hashCode(), abc.hashCode());        assertEquals(abc.hashCode(), abc2.hashCode());        assertEquals(atoc.hashCode(), atoc.hashCode());        assertEquals(atoc.hashCode(), atoc2.hashCode());        assertEquals(notatoc.hashCode(), notatoc.hashCode());        assertEquals(notatoc.hashCode(), notatoc2.hashCode());    }        //-----------------------------------------------------------------------        public void testContains_Char() {        CharSet btod = CharSet.getInstance("b-d");        CharSet dtob = CharSet.getInstance("d-b");        CharSet bcd = CharSet.getInstance("bcd");        CharSet bd = CharSet.getInstance("bd");        CharSet notbtod = CharSet.getInstance("^b-d");                assertEquals(false, btod.contains('a'));        assertEquals(true, btod.contains('b'));        assertEquals(true, btod.contains('c'));        assertEquals(true, btod.contains('d'));        assertEquals(false, btod.contains('e'));                assertEquals(false, bcd.contains('a'));        assertEquals(true, bcd.contains('b'));        assertEquals(true, bcd.contains('c'));        assertEquals(true, bcd.contains('d'));        assertEquals(false, bcd.contains('e'));                assertEquals(false, bd.contains('a'));        assertEquals(true, bd.contains('b'));        assertEquals(false, bd.contains('c'));        assertEquals(true, bd.contains('d'));        assertEquals(false, bd.contains('e'));                assertEquals(true, notbtod.contains('a'));        assertEquals(false, notbtod.contains('b'));        assertEquals(false, notbtod.contains('c'));        assertEquals(false, notbtod.contains('d'));        assertEquals(true, notbtod.contains('e'));                assertEquals(false, dtob.contains('a'));        assertEquals(true, dtob.contains('b'));        assertEquals(true, dtob.contains('c'));        assertEquals(true, dtob.contains('d'));        assertEquals(false, dtob.contains('e'));              CharRange[] array = dtob.getCharRanges();        assertEquals("[b-d]", dtob.toString());        assertEquals(1, array.length);    }        //-----------------------------------------------------------------------        public void testSerialization() {        CharSet set = CharSet.getInstance("a");        assertEquals(set, SerializationUtils.clone(set));         set = CharSet.getInstance("a-e");        assertEquals(set, SerializationUtils.clone(set));         set = CharSet.getInstance("be-f^a-z");        assertEquals(set, SerializationUtils.clone(set));     }        //-----------------------------------------------------------------------        public void testStatics() {        CharRange[] array;                array = CharSet.EMPTY.getCharRanges();        assertEquals(0, array.length);                array = CharSet.ASCII_ALPHA.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'z')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('A', 'Z')));                array = CharSet.ASCII_ALPHA_LOWER.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'z')));                array = CharSet.ASCII_ALPHA_UPPER.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('A', 'Z')));                array = CharSet.ASCII_NUMERIC.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('0', '9')));    }    }
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.StringUtils} - Substring methods * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Phil Steitz * @version $Id: StringUtilsEqualsIndexOfTest.java,v 1.10 2004/02/18 23:06:19 ggregory Exp $ */public class StringUtilsEqualsIndexOfTest extends TestCase {    private static final String FOO = "foo";    private static final String BAR = "bar";    private static final String FOOBAR = "foobar";    private static final String[] FOOBAR_SUB_ARRAY = new String[] {"ob", "ba"};    public StringUtilsEqualsIndexOfTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(StringUtilsEqualsIndexOfTest.class);    suite.setName("StringUtilsEqualsIndexOf Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testEquals() {        assertEquals(true, StringUtils.equals(null, null));        assertEquals(true, StringUtils.equals(FOO, FOO));        assertEquals(true, StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));        assertEquals(false, StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));        assertEquals(false, StringUtils.equals(FOO, BAR));        assertEquals(false, StringUtils.equals(FOO, null));        assertEquals(false, StringUtils.equals(null, FOO));    }    public void testEqualsIgnoreCase() {        assertEquals(true, StringUtils.equalsIgnoreCase(null, null));        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, FOO));        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' })));        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' })));        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, BAR));        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, null));        assertEquals(false, StringUtils.equalsIgnoreCase(null, FOO));    }    //-----------------------------------------------------------------------    public void testIndexOf_char() {        assertEquals(-1, StringUtils.indexOf(null, ' '));        assertEquals(-1, StringUtils.indexOf("", ' '));        assertEquals(0, StringUtils.indexOf("aabaabaa", 'a'));        assertEquals(2, StringUtils.indexOf("aabaabaa", 'b'));    }    public void testIndexOf_charInt() {        assertEquals(-1, StringUtils.indexOf(null, ' ', 0));        assertEquals(-1, StringUtils.indexOf(null, ' ', -1));        assertEquals(-1, StringUtils.indexOf("", ' ', 0));        assertEquals(-1, StringUtils.indexOf("", ' ', -1));        assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0));        assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0));        assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3));        assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9));        assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1));    }    public void testIndexOf_String() {        assertEquals(-1, StringUtils.indexOf(null, null));        assertEquals(-1, StringUtils.indexOf("", null));        assertEquals(0, StringUtils.indexOf("", ""));        assertEquals(0, StringUtils.indexOf("aabaabaa", "a"));        assertEquals(2, StringUtils.indexOf("aabaabaa", "b"));        assertEquals(1, StringUtils.indexOf("aabaabaa", "ab"));        assertEquals(0, StringUtils.indexOf("aabaabaa", ""));    }    public void testOrdinalIndexOf() {        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE));                assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1));        assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1));        assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1));        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0));        assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0));        assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0));        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1));        assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1));        assertEquals(0, StringUtils.ordinalIndexOf("", "", 1));        assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1));        assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1));        assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1));        assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1));        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2));        assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2));        assertEquals(0, StringUtils.ordinalIndexOf("", "", 2));        assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2));        assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2));        assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2));        assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2));                assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE));        assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE));        assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE));                assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0));        assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1));        assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2));        assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3));        assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4));        assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5));        assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6));        assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7));        assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8));        assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9));        assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10));    }    public void testIndexOf_StringInt() {        assertEquals(-1, StringUtils.indexOf(null, null, 0));        assertEquals(-1, StringUtils.indexOf(null, null, -1));        assertEquals(-1, StringUtils.indexOf(null, "", 0));        assertEquals(-1, StringUtils.indexOf(null, "", -1));        assertEquals(-1, StringUtils.indexOf("", null, 0));        assertEquals(-1, StringUtils.indexOf("", null, -1));        assertEquals(0, StringUtils.indexOf("", "", 0));        assertEquals(0, StringUtils.indexOf("", "", -1));        assertEquals(0, StringUtils.indexOf("", "", 9));        assertEquals(0, StringUtils.indexOf("abc", "", 0));        assertEquals(0, StringUtils.indexOf("abc", "", -1));        assertEquals(3, StringUtils.indexOf("abc", "", 9));        assertEquals(3, StringUtils.indexOf("abc", "", 3));        assertEquals(0, StringUtils.indexOf("aabaabaa", "a", 0));        assertEquals(2, StringUtils.indexOf("aabaabaa", "b", 0));        assertEquals(1, StringUtils.indexOf("aabaabaa", "ab", 0));        assertEquals(5, StringUtils.indexOf("aabaabaa", "b", 3));        assertEquals(-1, StringUtils.indexOf("aabaabaa", "b", 9));        assertEquals(2, StringUtils.indexOf("aabaabaa", "b", -1));        assertEquals(2,StringUtils.indexOf("aabaabaa", "", 2));     }    //-----------------------------------------------------------------------    public void testLastIndexOf_char() {        assertEquals(-1, StringUtils.lastIndexOf(null, ' '));        assertEquals(-1, StringUtils.lastIndexOf("", ' '));        assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a'));        assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b'));    }    public void testLastIndexOf_charInt() {        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0));        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1));        assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0));        assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1));        assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8));        assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8));        assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3));        assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9));        assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1));        assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0));    }    public void testLastIndexOf_String() {        assertEquals(-1, StringUtils.lastIndexOf(null, null));        assertEquals(-1, StringUtils.lastIndexOf("", null));        assertEquals(-1, StringUtils.lastIndexOf("", "a"));        assertEquals(0, StringUtils.lastIndexOf("", ""));        assertEquals(8, StringUtils.lastIndexOf("aabaabaa", ""));        assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a"));        assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b"));        assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab"));    }    public void testLastIndexOf_StringInt() {        assertEquals(-1, StringUtils.lastIndexOf(null, null, 0));        assertEquals(-1, StringUtils.lastIndexOf(null, null, -1));        assertEquals(-1, StringUtils.lastIndexOf(null, "", 0));        assertEquals(-1, StringUtils.lastIndexOf(null, "", -1));        assertEquals(-1, StringUtils.lastIndexOf("", null, 0));        assertEquals(-1, StringUtils.lastIndexOf("", null, -1));        assertEquals(0, StringUtils.lastIndexOf("", "", 0));        assertEquals(-1, StringUtils.lastIndexOf("", "", -1));        assertEquals(0, StringUtils.lastIndexOf("", "", 9));        assertEquals(0, StringUtils.lastIndexOf("abc", "", 0));        assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1));        assertEquals(3, StringUtils.lastIndexOf("abc", "", 9));        assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8));        assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8));        assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8));        assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3));        assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9));        assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1));        assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0));        assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0));    }    //-----------------------------------------------------------------------    public void testContainsChar() {        assertEquals(false, StringUtils.contains(null, ' '));        assertEquals(false, StringUtils.contains("", ' '));        assertEquals(false, StringUtils.contains("",null));        assertEquals(false, StringUtils.contains(null,null));        assertEquals(true, StringUtils.contains("abc", 'a'));        assertEquals(true, StringUtils.contains("abc", 'b'));        assertEquals(true, StringUtils.contains("abc", 'c'));        assertEquals(false, StringUtils.contains("abc", 'z'));    }    public void testContainsString() {        assertEquals(false, StringUtils.contains(null, null));        assertEquals(false, StringUtils.contains(null, ""));        assertEquals(false, StringUtils.contains(null, "a"));        assertEquals(false, StringUtils.contains("", null));        assertEquals(true, StringUtils.contains("", ""));        assertEquals(false, StringUtils.contains("", "a"));        assertEquals(true, StringUtils.contains("abc", "a"));        assertEquals(true, StringUtils.contains("abc", "b"));        assertEquals(true, StringUtils.contains("abc", "c"));        assertEquals(true, StringUtils.contains("abc", "abc"));        assertEquals(false, StringUtils.contains("abc", "z"));    }    //-----------------------------------------------------------------------    public void testIndexOfAny_StringStringarray() {        assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null));        assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null));        assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0]));        assertEquals(-1, StringUtils.indexOfAny(null, new String[0]));        assertEquals(-1, StringUtils.indexOfAny("", new String[0]));        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {"llll"}));        assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {""}));        assertEquals(0, StringUtils.indexOfAny("", new String[] {""}));        assertEquals(-1, StringUtils.indexOfAny("", new String[] {"a"}));        assertEquals(-1, StringUtils.indexOfAny("", new String[] {null}));        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null}));        assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null}));    }    public void testLastIndexOfAny_StringStringarray() {        assertEquals(-1, StringUtils.lastIndexOfAny(null, null));        assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY));        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, null));        assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0]));        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0]));        assertEquals(-1, StringUtils.lastIndexOfAny("", new String[0]));        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {"llll"}));        assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {""}));        assertEquals(0, StringUtils.lastIndexOfAny("", new String[] {""}));        assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {"a"}));        assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {null}));        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null}));        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null}));    }    //-----------------------------------------------------------------------    public void testIndexOfAny_StringChararray() {        assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null));        assertEquals(-1, StringUtils.indexOfAny(null, new char[0]));        assertEquals(-1, StringUtils.indexOfAny(null, new char[] {'a','b'}));                assertEquals(-1, StringUtils.indexOfAny("", (char[]) null));        assertEquals(-1, StringUtils.indexOfAny("", new char[0]));        assertEquals(-1, StringUtils.indexOfAny("", new char[] {'a','b'}));                assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (char[]) null));         assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", new char[0]));         assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", new char[] {'z','a'}));         assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", new char[] {'b','y'}));        assertEquals(-1, StringUtils.indexOfAny("ab", new char[] {'z'}));    }    public void testIndexOfAny_StringString() {        assertEquals(-1, StringUtils.indexOfAny(null, (String) null));        assertEquals(-1, StringUtils.indexOfAny(null, ""));        assertEquals(-1, StringUtils.indexOfAny(null, "ab"));                assertEquals(-1, StringUtils.indexOfAny("", (String) null));        assertEquals(-1, StringUtils.indexOfAny("", ""));        assertEquals(-1, StringUtils.indexOfAny("", "ab"));                assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (String) null));         assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", ""));         assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", "za"));         assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", "by"));        assertEquals(-1, StringUtils.indexOfAny("ab", "z"));    }    //-----------------------------------------------------------------------    public void testIndexOfAnyBut_StringChararray() {        assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0]));        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[] {'a','b'}));                assertEquals(-1, StringUtils.indexOfAnyBut("", (char[]) null));        assertEquals(-1, StringUtils.indexOfAnyBut("", new char[0]));        assertEquals(-1, StringUtils.indexOfAnyBut("", new char[] {'a','b'}));                assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (char[]) null));        assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", new char[0]));        assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", new char[] {'z','a'}));         assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", new char[] {'b','y'}));         assertEquals(0, StringUtils.indexOfAnyBut("ab", new char[] {'z'}));    }    public void testIndexOfAnyBut_StringString() {        assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null));        assertEquals(-1, StringUtils.indexOfAnyBut(null, ""));        assertEquals(-1, StringUtils.indexOfAnyBut(null, "ab"));                assertEquals(-1, StringUtils.indexOfAnyBut("", (String) null));        assertEquals(-1, StringUtils.indexOfAnyBut("", ""));        assertEquals(-1, StringUtils.indexOfAnyBut("", "ab"));                assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (String) null));         assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", ""));         assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", "za"));         assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", "by"));        assertEquals(0, StringUtils.indexOfAnyBut("ab", "z"));    }        //-----------------------------------------------------------------------    public void testContainsOnly_String() {        String str1 = "a";        String str2 = "b";        String str3 = "ab";        String chars1= "b";        String chars2= "a";        String chars3= "ab";        assertEquals(false, StringUtils.containsOnly(null, (String) null));        assertEquals(false, StringUtils.containsOnly("", (String) null));        assertEquals(false, StringUtils.containsOnly(null, ""));        assertEquals(false, StringUtils.containsOnly(str1, ""));        assertEquals(true, StringUtils.containsOnly("", ""));        assertEquals(true, StringUtils.containsOnly("", chars1));        assertEquals(false, StringUtils.containsOnly(str1, chars1));        assertEquals(true, StringUtils.containsOnly(str1, chars2));        assertEquals(true, StringUtils.containsOnly(str1, chars3));        assertEquals(true, StringUtils.containsOnly(str2, chars1));        assertEquals(false, StringUtils.containsOnly(str2, chars2));        assertEquals(true, StringUtils.containsOnly(str2, chars3));        assertEquals(false, StringUtils.containsOnly(str3, chars1));        assertEquals(false, StringUtils.containsOnly(str3, chars2));        assertEquals(true, StringUtils.containsOnly(str3, chars3));    }    public void testContainsOnly_Chararray() {        String str1 = "a";        String str2 = "b";        String str3 = "ab";        char[] chars1= {'b'};        char[] chars2= {'a'};        char[] chars3= {'a', 'b'};        char[] emptyChars = new char[0];        assertEquals(false, StringUtils.containsOnly(null, (char[]) null));        assertEquals(false, StringUtils.containsOnly("", (char[]) null));        assertEquals(false, StringUtils.containsOnly(null, emptyChars));        assertEquals(false, StringUtils.containsOnly(str1, emptyChars));        assertEquals(true, StringUtils.containsOnly("", emptyChars));        assertEquals(true, StringUtils.containsOnly("", chars1));        assertEquals(false, StringUtils.containsOnly(str1, chars1));        assertEquals(true, StringUtils.containsOnly(str1, chars2));        assertEquals(true, StringUtils.containsOnly(str1, chars3));        assertEquals(true, StringUtils.containsOnly(str2, chars1));        assertEquals(false, StringUtils.containsOnly(str2, chars2));        assertEquals(true, StringUtils.containsOnly(str2, chars3));        assertEquals(false, StringUtils.containsOnly(str3, chars1));        assertEquals(false, StringUtils.containsOnly(str3, chars2));        assertEquals(true, StringUtils.containsOnly(str3, chars3));    }    public void testContainsNone_String() {        String str1 = "a";        String str2 = "b";        String str3 = "ab.";        String chars1= "b";        String chars2= ".";        String chars3= "cd";        assertEquals(true, StringUtils.containsNone(null, (String) null));        assertEquals(true, StringUtils.containsNone("", (String) null));        assertEquals(true, StringUtils.containsNone(null, ""));        assertEquals(true, StringUtils.containsNone(str1, ""));        assertEquals(true, StringUtils.containsNone("", ""));        assertEquals(true, StringUtils.containsNone("", chars1));        assertEquals(true, StringUtils.containsNone(str1, chars1));        assertEquals(true, StringUtils.containsNone(str1, chars2));        assertEquals(true, StringUtils.containsNone(str1, chars3));        assertEquals(false, StringUtils.containsNone(str2, chars1));        assertEquals(true, StringUtils.containsNone(str2, chars2));        assertEquals(true, StringUtils.containsNone(str2, chars3));        assertEquals(false, StringUtils.containsNone(str3, chars1));        assertEquals(false, StringUtils.containsNone(str3, chars2));        assertEquals(true, StringUtils.containsNone(str3, chars3));    }    public void testContainsNone_Chararray() {        String str1 = "a";        String str2 = "b";        String str3 = "ab.";        char[] chars1= {'b'};        char[] chars2= {'.'};        char[] chars3= {'c', 'd'};        char[] emptyChars = new char[0];        assertEquals(true, StringUtils.containsNone(null, (char[]) null));        assertEquals(true, StringUtils.containsNone("", (char[]) null));        assertEquals(true, StringUtils.containsNone(null, emptyChars));        assertEquals(true, StringUtils.containsNone(str1, emptyChars));        assertEquals(true, StringUtils.containsNone("", emptyChars));        assertEquals(true, StringUtils.containsNone("", chars1));        assertEquals(true, StringUtils.containsNone(str1, chars1));        assertEquals(true, StringUtils.containsNone(str1, chars2));        assertEquals(true, StringUtils.containsNone(str1, chars3));        assertEquals(false, StringUtils.containsNone(str2, chars1));        assertEquals(true, StringUtils.containsNone(str2, chars2));        assertEquals(true, StringUtils.containsNone(str2, chars3));        assertEquals(false, StringUtils.containsNone(str3, chars1));        assertEquals(false, StringUtils.containsNone(str3, chars2));        assertEquals(true, StringUtils.containsNone(str3, chars3));    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.io.IOException;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests for {@link StringEscapeUtils}. * * @author of original StringUtilsTest.testEscape = ? * @author <a href="mailto:alex@purpletech.com">Alexander Day Chaffee</a> * @version $Id: StringEscapeUtilsTest.java,v 1.14 2004/02/18 23:06:19 ggregory Exp $ */public class StringEscapeUtilsTest extends TestCase {    private final static String FOO = "foo";    public StringEscapeUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(StringEscapeUtilsTest.class);        suite.setName("StringEscapeUtilsTest Tests");        return suite;    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new StringEscapeUtils());        Constructor[] cons = StringEscapeUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(StringEscapeUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(StringEscapeUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testEscapeJava() throws IOException {        assertEquals(null, StringEscapeUtils.escapeJava(null));        try {            StringEscapeUtils.escapeJava(null, null);            fail();        } catch (IOException ex) {            fail();        } catch (IllegalArgumentException ex) {        }        try {            StringEscapeUtils.escapeJava(null, "");            fail();        } catch (IOException ex) {            fail();        } catch (IllegalArgumentException ex) {        }                assertEscapeJava("empty string", "", "");        assertEscapeJava(FOO, FOO);        assertEscapeJava("tab", "\\t", "\t");        assertEscapeJava("backslash", "\\\\", "\\");        assertEscapeJava("single quote should not be escaped", "'", "'");        assertEscapeJava("\\\\\\b\\t\\r", "\\\b\t\r");        assertEscapeJava("\\u1234", "\u1234");        assertEscapeJava("\\u0234", "\u0234");        assertEscapeJava("\\u00EF", "\u00ef");        assertEscapeJava("\\u0001", "\u0001");        assertEscapeJava("Should use capitalized unicode hex", "\\uABCD", "\uabcd");        assertEscapeJava("He didn't say, \\\"stop!\\\"",                "He didn't say, \"stop!\"");        assertEscapeJava("non-breaking space", "This space is non-breaking:" + "\\u00A0",                "This space is non-breaking:\u00a0");        assertEscapeJava("\\uABCD\\u1234\\u012C",                "\uABCD\u1234\u012C");    }    private void assertEscapeJava(String escaped, String original) throws IOException {        assertEscapeJava(null, escaped, original);    }    private void assertEscapeJava(String message, String expected, String original) throws IOException {        String converted = StringEscapeUtils.escapeJava(original);        message = "escapeJava(String) failed" + (message == null ? "" : (": " + message));        assertEquals(message, expected, converted);        StringPrintWriter writer = new StringPrintWriter();        StringEscapeUtils.escapeJava(writer, original);        assertEquals(expected, writer.getString());    }    public void testUnescapeJava() throws IOException {        assertEquals(null, StringEscapeUtils.unescapeJava(null));        try {            StringEscapeUtils.unescapeJava(null, null);            fail();        } catch (IOException ex) {            fail();        } catch (IllegalArgumentException ex) {        }        try {            StringEscapeUtils.unescapeJava(null, "");            fail();        } catch (IOException ex) {            fail();        } catch (IllegalArgumentException ex) {        }        try {            String str = StringEscapeUtils.unescapeJava("\\u02-3");            fail();        } catch (RuntimeException ex) {        }                assertUnescapeJava("", "");        assertUnescapeJava("test", "test");        assertUnescapeJava("\ntest\b", "\\ntest\\b");        assertUnescapeJava("\u123425foo\ntest\b", "\\u123425foo\\ntest\\b");        assertUnescapeJava("'\foo\teste\r", "\\'\\foo\\teste\\r");        assertUnescapeJava("\\", "\\");        //foo        assertUnescapeJava("lowercase unicode", "\uABCDx", "\\uabcdx");        assertUnescapeJava("uppercase unicode", "\uABCDx", "\\uABCDx");        assertUnescapeJava("unicode as final character", "\uABCD", "\\uabcd");    }    private void assertUnescapeJava(String unescaped, String original) throws IOException {        assertUnescapeJava(null, unescaped, original);    }    private void assertUnescapeJava(String message, String unescaped, String original) throws IOException {        String expected = unescaped;        String actual = StringEscapeUtils.unescapeJava(original);        assertEquals("unescape(String) failed" +                (message == null ? "" : (": " + message)) +                ": expected '" + StringEscapeUtils.escapeJava(expected) +                // we escape this so we can see it in the error message                "' actual '" + StringEscapeUtils.escapeJava(actual) + "'",                expected, actual);        StringPrintWriter writer = new StringPrintWriter();        StringEscapeUtils.unescapeJava(writer, original);        assertEquals(unescaped, writer.getString());    }    public void testEscapeJavaScript() {        assertEquals(null, StringEscapeUtils.escapeJavaScript(null));        try {            StringEscapeUtils.escapeJavaScript(null, null);            fail();        } catch (IOException ex) {            fail();        } catch (IllegalArgumentException ex) {        }        try {            StringEscapeUtils.escapeJavaScript(null, "");            fail();        } catch (IOException ex) {            fail();        } catch (IllegalArgumentException ex) {        }                assertEquals("He didn\\'t say, \\\"stop!\\\"", StringEscapeUtils.escapeJavaScript("He didn't say, \"stop!\""));    }    // HTML and XML    //--------------------------------------------------------------    String[][] htmlEscapes = {        {"no escaping", "plain text", "plain text"},        {"no escaping", "plain text", "plain text"},        {"empty string", "", ""},        {"null", null, null},        {"ampersand", "bread &amp; butter", "bread & butter"},        {"quotes", "&quot;bread&quot; &amp; butter", "\"bread\" & butter"},        {"final character only", "greater than &gt;", "greater than >"},        {"first character only", "&lt; less than", "< less than"},        {"apostrophe", "Huntington's chorea", "Huntington's chorea"},        {"languages", "English,Fran&ccedil;ais,&#26085;&#26412;&#35486; (nihongo)", "English,Fran\u00E7ais,\u65E5\u672C\u8A9E (nihongo)"},        {"8-bit ascii doesn't number-escape", "~\u007F", "\u007E\u007F"},        {"8-bit ascii does number-escape", "&#128;&#159;", "\u0080\u009F"},    };    public void testEscapeHtml() {        for (int i = 0; i < htmlEscapes.length; ++i) {            String message = htmlEscapes[i][0];            String expected = htmlEscapes[i][1];            String original = htmlEscapes[i][2];            assertEquals(message, expected, StringEscapeUtils.escapeHtml(original));            // todo: add test for (and implement) Writer-based version, something like this://            StringPrintWriter sw = new StringPrintWriter();//            StringEscapeUtils.escapeHtml(sw, original);//            assertEquals(expected, sw.getString());        }    }    public void testUnescapeHtml() {        for (int i = 0; i < htmlEscapes.length; ++i) {            assertEquals(htmlEscapes[i][0], htmlEscapes[i][2], StringEscapeUtils.unescapeHtml(htmlEscapes[i][1]));            // todo: add test for (and implement) Writer-based version        }        // \u00E7 is a cedilla (c with wiggle under)        // note that the test string must be 7-bit-clean (unicode escaped) or else it will compile incorrectly        // on some locales                assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml("Fran\u00E7ais"));    }    public void testUnescapeHexCharsHtml() {        // Simple easy to grok test         assertEquals("hex number unescape", "\u0080\u009F", StringEscapeUtils.unescapeHtml("&#x80;&#x9F;"));        assertEquals("hex number unescape", "\u0080\u009F", StringEscapeUtils.unescapeHtml("&#X80;&#X9F;"));        // Test all Character values:        for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {            Character c1 = new Character(i);            Character c2 = new Character((char)(i+1));            String expected = c1.toString() + c2.toString();            String escapedC1 = "&#x" + Integer.toHexString((int)(c1.charValue())) + ";";            String escapedC2 = "&#x" + Integer.toHexString((int)(c2.charValue())) + ";";            assertEquals("hex number unescape index " + (int)i, expected, StringEscapeUtils.unescapeHtml(escapedC1 + escapedC2));        }    }    public void testUnescapeUnknownEntity() throws Exception    {        assertEquals("&zzzz;", StringEscapeUtils.unescapeHtml("&zzzz;"));    }    public void testEscapeHtmlVersions() throws Exception    {        assertEquals("&Beta;", StringEscapeUtils.escapeHtml("\u0392"));        assertEquals("\u0392", StringEscapeUtils.unescapeHtml("&Beta;"));        //todo: refine API for escaping/unescaping specific HTML versions    }    public void testEscapeXml() throws Exception {        assertEquals("&lt;abc&gt;", StringEscapeUtils.escapeXml("<abc>"));        assertEquals("<abc>", StringEscapeUtils.unescapeXml("&lt;abc&gt;"));        assertEquals("XML should use numbers, not names for HTML entities",                "&#161;", StringEscapeUtils.escapeXml("\u00A1"));        assertEquals("XML should use numbers, not names for HTML entities",                "\u00A0", StringEscapeUtils.unescapeXml("&#160;"));        assertEquals("ain't", StringEscapeUtils.unescapeXml("ain&apos;t"));        assertEquals("ain&apos;t", StringEscapeUtils.escapeXml("ain't"));        assertEquals("", StringEscapeUtils.escapeXml(""));        assertEquals(null, StringEscapeUtils.escapeXml(null));        assertEquals(null, StringEscapeUtils.unescapeXml(null));    }    // SQL    // see http://www.jguru.com/faq/view.jsp?EID=8881    //--------------------    public void testEscapeSql() throws Exception    {        assertEquals("don''t stop", StringEscapeUtils.escapeSql("don't stop"));        assertEquals("", StringEscapeUtils.escapeSql(""));        assertEquals(null, StringEscapeUtils.escapeSql(null));    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.Arrays;import java.util.Iterator;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.StringUtils}. * * @author <a href="mailto:dlr@collab.net">Daniel Rall</a> * @author <a href="mailto:bayard@generationjava.com">Henri Yandell</a> * @author Stephen Colebourne * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author <a href="mailto:fredrik@westermarck.com>Fredrik Westermarck</a> * @author Holger Krauth * @author <a href="hps@intermeta.de">Henning P. Schmiedehausen</a> * @author Phil Steitz * @author Gary D. Gregory * @author Al Chou * @version $Id: StringUtilsTest.java,v 1.59 2004/03/10 23:54:48 scolebourne Exp $ */public class StringUtilsTest extends TestCase {        static final String WHITESPACE;    static final String NON_WHITESPACE;    static final String TRIMMABLE;    static final String NON_TRIMMABLE;    static {        String ws = "";        String nws = "";        String tr = "";        String ntr = "";        for (int i = 0; i < Character.MAX_VALUE; i++) {            if (Character.isWhitespace((char) i)) {                ws += String.valueOf((char) i);                if (i > 32) {                    ntr += String.valueOf((char) i);                }            } else if (i < 40) {                nws += String.valueOf((char) i);            }        }        for (int i = 0; i <= 32; i++) {            tr += String.valueOf((char) i);        }        WHITESPACE = ws;        NON_WHITESPACE = nws;        TRIMMABLE = tr;        NON_TRIMMABLE = ntr;    }    private static final String[] ARRAY_LIST = { "foo", "bar", "baz" };    private static final String[] EMPTY_ARRAY_LIST = {};    private static final String[] NULL_ARRAY_LIST = {null};    private static final String[] MIXED_ARRAY_LIST = {null, "", "foo"};    private static final Object[] MIXED_TYPE_LIST = {new String("foo"), new Long(2)};    private static final String SEPARATOR = ",";    private static final char   SEPARATOR_CHAR = ';';    private static final String TEXT_LIST = "foo,bar,baz";    private static final String TEXT_LIST_CHAR = "foo;bar;baz";    private static final String TEXT_LIST_NOSEP = "foobarbaz";    private static final String FOO_UNCAP = "foo";    private static final String FOO_CAP = "Foo";    private static final String SENTENCE_UNCAP = "foo bar baz";    private static final String SENTENCE_CAP = "Foo Bar Baz";    public StringUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(StringUtilsTest.class);    suite.setName("StringUtilsTest Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new StringUtils());        Constructor[] cons = StringUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(StringUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(StringUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testCaseFunctions() {        assertEquals(null, StringUtils.upperCase(null));        assertEquals(null, StringUtils.lowerCase(null));        assertEquals(null, StringUtils.capitalize(null));        assertEquals(null, StringUtils.uncapitalize(null));        assertEquals("capitalize(String) failed",                     FOO_CAP, StringUtils.capitalize(FOO_UNCAP) );        assertEquals("capitalize(empty-string) failed",                     "", StringUtils.capitalize("") );        assertEquals("capitalize(single-char-string) failed",                     "X", StringUtils.capitalize("x") );        assertEquals("uncapitalize(String) failed",                     FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) );        assertEquals("uncapitalize(empty-string) failed",                     "", StringUtils.uncapitalize("") );        assertEquals("uncapitalize(single-char-string) failed",                     "x", StringUtils.uncapitalize("X") );                             // reflection type of tests: Sentences.        assertEquals("uncapitalize(capitalize(String)) failed",                     SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) );        assertEquals("capitalize(uncapitalize(String)) failed",                     SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) );        // reflection type of tests: One word.        assertEquals("uncapitalize(capitalize(String)) failed",                    FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) );        assertEquals("capitalize(uncapitalize(String)) failed",                    FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) );        assertEquals("upperCase(String) failed",                     "FOO TEST THING", StringUtils.upperCase("fOo test THING") );        assertEquals("upperCase(empty-string) failed",                     "", StringUtils.upperCase("") );        assertEquals("lowerCase(String) failed",                     "foo test thing", StringUtils.lowerCase("fOo test THING") );        assertEquals("lowerCase(empty-string) failed",                     "", StringUtils.lowerCase("") );    }    public void testSwapCase_String() {        assertEquals(null, StringUtils.swapCase(null));        assertEquals("", StringUtils.swapCase(""));        assertEquals("  ", StringUtils.swapCase("  "));                assertEquals("i", WordUtils.swapCase("I") );        assertEquals("I", WordUtils.swapCase("i") );        assertEquals("I AM HERE 123", StringUtils.swapCase("i am here 123") );        assertEquals("i aM hERE 123", StringUtils.swapCase("I Am Here 123") );        assertEquals("I AM here 123", StringUtils.swapCase("i am HERE 123") );        assertEquals("i am here 123", StringUtils.swapCase("I AM HERE 123") );    }    //-----------------------------------------------------------------------    public void testJoin_Objectarray() {        assertEquals(null, StringUtils.join(null));        assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));        assertEquals("", StringUtils.join(NULL_ARRAY_LIST));        assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"}));        assertEquals("a", StringUtils.join(new String[] {null, "a", ""}));        assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));        assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));    }            public void testJoin_ArrayChar() {        assertEquals(null, StringUtils.join((Object[]) null, ','));        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));        assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));        assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));        assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));    }        public void testJoin_ArrayString() {        assertEquals(null, StringUtils.join((Object[]) null, null));        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null));        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, ""));                assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null));                assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null));        assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, ""));        assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR));        assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR));        assertEquals(",,foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR));        assertEquals("foo,2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR));    }        public void testJoin_IteratorChar() {        assertEquals(null, StringUtils.join((Iterator) null, ','));        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));        assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));        assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));    }        public void testJoin_IteratorString() {        assertEquals(null, StringUtils.join((Iterator) null, null));        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), ""));                assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));                assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));        assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), ""));        assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR));                assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));    }        public void testConcatenate_Objectarray() {        assertEquals(null, StringUtils.concatenate(null));        assertEquals("", StringUtils.concatenate(EMPTY_ARRAY_LIST));        assertEquals("", StringUtils.concatenate(NULL_ARRAY_LIST));        assertEquals("foo", StringUtils.concatenate(MIXED_ARRAY_LIST));        assertEquals("foo2", StringUtils.concatenate(MIXED_TYPE_LIST));    }            public void testSplit_String() {        assertEquals(null, StringUtils.split(null));        assertEquals(0, StringUtils.split("").length);                String str = "a b  .c";        String[] res = StringUtils.split(str);        assertEquals(3, res.length);        assertEquals("a", res[0]);        assertEquals("b", res[1]);        assertEquals(".c", res[2]);                str = " a ";        res = StringUtils.split(str);        assertEquals(1, res.length);        assertEquals("a", res[0]);                str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c";        res = StringUtils.split(str);        assertEquals(2, res.length);        assertEquals("a", res[0]);        assertEquals("b" + NON_WHITESPACE + "c", res[1]);                           }        public void testSplit_StringChar() {        assertEquals(null, StringUtils.split(null, '.'));        assertEquals(0, StringUtils.split("", '.').length);        String str = "a.b.. c";        String[] res = StringUtils.split(str, '.');        assertEquals(3, res.length);        assertEquals("a", res[0]);        assertEquals("b", res[1]);        assertEquals(" c", res[2]);                    str = ".a.";        res = StringUtils.split(str, '.');        assertEquals(1, res.length);        assertEquals("a", res[0]);                str = "a b c";        res = StringUtils.split(str,' ');        assertEquals(3, res.length);        assertEquals("a", res[0]);        assertEquals("b", res[1]);        assertEquals("c", res[2]);    }        public void testSplit_StringString_StringStringInt() {        assertEquals(null, StringUtils.split(null, "."));        assertEquals(null, StringUtils.split(null, ".", 3));                assertEquals(0, StringUtils.split("", ".").length);        assertEquals(0, StringUtils.split("", ".", 3).length);                innerTestSplit('.', ".", ' ');        innerTestSplit('.', ".", ',');        innerTestSplit('.', ".,", 'x');        for (int i = 0; i < WHITESPACE.length(); i++) {            for (int j = 0; j < NON_WHITESPACE.length(); j++) {                innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));                innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));            }        }                String[] results = null;        String[] expectedResults = {"ab", "de fg"};        results = StringUtils.split("ab   de fg", null, 2);        assertEquals(expectedResults.length, results.length);        for (int i = 0; i < expectedResults.length; i++) {            assertEquals(expectedResults[i], results[i]);        }                String[] expectedResults2 = {"ab", "cd:ef"};        results = StringUtils.split("ab:cd:ef",":", 2);        assertEquals(expectedResults2.length, results.length);        for (int i = 0; i < expectedResults2.length; i++) {            assertEquals(expectedResults2[i], results[i]);        }    }        private void innerTestSplit(char separator, String sepStr, char noMatch) {        String msg = "Failed on separator hex(" + Integer.toHexString(separator) +            "), noMatch hex(" + Integer.toHexString(noMatch) + "), sepStr(" + sepStr + ")";                final String str = "a" + separator + "b" + separator + separator + noMatch + "c";        String[] res;        // (str, sepStr)        res = StringUtils.split(str, sepStr);        assertEquals(msg, 3, res.length);        assertEquals(msg, "a", res[0]);        assertEquals(msg, "b", res[1]);        assertEquals(msg, noMatch + "c", res[2]);                final String str2 = separator + "a" + separator;        res = StringUtils.split(str2, sepStr);        assertEquals(msg, 1, res.length);        assertEquals(msg, "a", res[0]);        res = StringUtils.split(str, sepStr, -1);        assertEquals(msg, 3, res.length);        assertEquals(msg, "a", res[0]);        assertEquals(msg, "b", res[1]);        assertEquals(msg, noMatch + "c", res[2]);                res = StringUtils.split(str, sepStr, 0);        assertEquals(msg, 3, res.length);        assertEquals(msg, "a", res[0]);        assertEquals(msg, "b", res[1]);        assertEquals(msg, noMatch + "c", res[2]);                res = StringUtils.split(str, sepStr, 1);        assertEquals(msg, 1, res.length);        assertEquals(msg, str, res[0]);                res = StringUtils.split(str, sepStr, 2);        assertEquals(msg, 2, res.length);        assertEquals(msg, "a", res[0]);        assertEquals(msg, str.substring(2), res[1]);    }    public void testDeleteSpace_String() {        assertEquals(null, StringUtils.deleteSpaces(null));        assertEquals("", StringUtils.deleteSpaces(""));        assertEquals("", StringUtils.deleteSpaces("    \t\t\n\n   "));        assertEquals("test", StringUtils.deleteSpaces("t  \t\ne\rs\n\n   \tt"));    }        public void testDeleteWhitespace_String() {        assertEquals(null, StringUtils.deleteWhitespace(null));        assertEquals("", StringUtils.deleteWhitespace(""));        assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  "));        assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));        assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));        // Note: u-2007 and u-000A both cause problems in the source code        // it should ignore 2007 but delete 000A        assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  "));        assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F"));        assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt"));    }    public void testReplace_StringStringString() {        assertEquals(null, StringUtils.replace(null, null, null));        assertEquals(null, StringUtils.replace(null, null, "any"));        assertEquals(null, StringUtils.replace(null, "any", null));        assertEquals(null, StringUtils.replace(null, "any", "any"));        assertEquals("", StringUtils.replace("", null, null));        assertEquals("", StringUtils.replace("", null, "any"));        assertEquals("", StringUtils.replace("", "any", null));        assertEquals("", StringUtils.replace("", "any", "any"));        assertEquals("FOO", StringUtils.replace("FOO", "", "any"));        assertEquals("FOO", StringUtils.replace("FOO", null, "any"));        assertEquals("FOO", StringUtils.replace("FOO", "F", null));        assertEquals("FOO", StringUtils.replace("FOO", null, null));        assertEquals("", StringUtils.replace("foofoofoo", "foo", ""));        assertEquals("barbarbar", StringUtils.replace("foofoofoo", "foo", "bar"));        assertEquals("farfarfar", StringUtils.replace("foofoofoo", "oo", "ar"));       }        public void testReplace_StringStringStringInt() {        assertEquals(null, StringUtils.replace(null, null, null, 2));        assertEquals(null, StringUtils.replace(null, null, "any", 2));        assertEquals(null, StringUtils.replace(null, "any", null, 2));        assertEquals(null, StringUtils.replace(null, "any", "any", 2));        assertEquals("f", StringUtils.replace("oofoo", "o", "", -1));        assertEquals("oofoo", StringUtils.replace("oofoo", "o", "", 0));        assertEquals("ofoo", StringUtils.replace("oofoo", "o", "", 1));        assertEquals("foo", StringUtils.replace("oofoo", "o", "", 2));        assertEquals("fo", StringUtils.replace("oofoo", "o", "", 3));        assertEquals("f", StringUtils.replace("oofoo", "o", "", 4));    }        public void testReplaceOnce_StringStringString() {        assertEquals(null, StringUtils.replaceOnce(null, null, null));        assertEquals(null, StringUtils.replaceOnce(null, null, "any"));        assertEquals(null, StringUtils.replaceOnce(null, "any", null));        assertEquals(null, StringUtils.replaceOnce(null, "any", "any"));        assertEquals("", StringUtils.replaceOnce("", null, null));        assertEquals("", StringUtils.replaceOnce("", null, "any"));        assertEquals("", StringUtils.replaceOnce("", "any", null));        assertEquals("", StringUtils.replaceOnce("", "any", "any"));        assertEquals("FOO", StringUtils.replaceOnce("FOO", "", "any"));        assertEquals("FOO", StringUtils.replaceOnce("FOO", null, "any"));        assertEquals("FOO", StringUtils.replaceOnce("FOO", "F", null));        assertEquals("FOO", StringUtils.replaceOnce("FOO", null, null));        assertEquals("foofoo", StringUtils.replaceOnce("foofoofoo", "foo", ""));    }    public void testReplaceChars_StringCharChar() {        assertEquals(null, StringUtils.replaceChars(null, 'b', 'z'));        assertEquals("", StringUtils.replaceChars("", 'b', 'z'));        assertEquals("azcza", StringUtils.replaceChars("abcba", 'b', 'z'));        assertEquals("abcba", StringUtils.replaceChars("abcba", 'x', 'z'));    }        public void testReplaceChars_StringStringString() {        assertEquals(null, StringUtils.replaceChars(null, null, null));        assertEquals(null, StringUtils.replaceChars(null, "", null));        assertEquals(null, StringUtils.replaceChars(null, "a", null));        assertEquals(null, StringUtils.replaceChars(null, null, ""));        assertEquals(null, StringUtils.replaceChars(null, null, "x"));                assertEquals("", StringUtils.replaceChars("", null, null));        assertEquals("", StringUtils.replaceChars("", "", null));        assertEquals("", StringUtils.replaceChars("", "a", null));        assertEquals("", StringUtils.replaceChars("", null, ""));        assertEquals("", StringUtils.replaceChars("", null, "x"));        assertEquals("abc", StringUtils.replaceChars("abc", null, null));        assertEquals("abc", StringUtils.replaceChars("abc", null, ""));        assertEquals("abc", StringUtils.replaceChars("abc", null, "x"));                assertEquals("abc", StringUtils.replaceChars("abc", "", null));        assertEquals("abc", StringUtils.replaceChars("abc", "", ""));        assertEquals("abc", StringUtils.replaceChars("abc", "", "x"));                assertEquals("ac", StringUtils.replaceChars("abc", "b", null));        assertEquals("ac", StringUtils.replaceChars("abc", "b", ""));        assertEquals("axc", StringUtils.replaceChars("abc", "b", "x"));                assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz"));        assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y"));        assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx"));                assertEquals("abcba", StringUtils.replaceChars("abcba", "z", "w"));        assertSame("abcba", StringUtils.replaceChars("abcba", "z", "w"));                // Javadoc examples:        assertEquals("jelly", StringUtils.replaceChars("hello", "ho", "jy"));        assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz"));        assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y"));        assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx"));                // From http://nagoya.apache.org/bugzilla/show_bug.cgi?id=25454        assertEquals("bcc", StringUtils.replaceChars("abc", "ab", "bc"));        assertEquals("q651.506bera", StringUtils.replaceChars("d216.102oren",            "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789",            "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234"));    }        public void testOverlayString_StringStringIntInt() {        assertEquals("overlayString(String, String, int, int) failed",                     "foo foor baz", StringUtils.overlayString(SENTENCE_UNCAP, FOO_UNCAP, 4, 6) );        assertEquals("abef", StringUtils.overlayString("abcdef", "", 2, 4));        assertEquals("abzzzzef", StringUtils.overlayString("abcdef", "zzzz", 2, 4));        assertEquals("abcdzzzzcdef", StringUtils.overlayString("abcdef", "zzzz", 4, 2));        try {            StringUtils.overlayString(null, "zzzz", 2, 4);            fail();        } catch (NullPointerException ex) {}        try {            StringUtils.overlayString("abcdef", null, 2, 4);            fail();        } catch (NullPointerException ex) {}        try {            StringUtils.overlayString("abcdef", "zzzz", -1, 4);            fail();        } catch (IndexOutOfBoundsException ex) {}        try {            StringUtils.overlayString("abcdef", "zzzz", 2, 8);            fail();        } catch (IndexOutOfBoundsException ex) {}    }    public void testOverlay_StringStringIntInt() {        assertEquals(null, StringUtils.overlay(null, null, 2, 4));        assertEquals(null, StringUtils.overlay(null, null, -2, -4));                assertEquals("", StringUtils.overlay("", null, 0, 0));        assertEquals("", StringUtils.overlay("", "", 0, 0));        assertEquals("zzzz", StringUtils.overlay("", "zzzz", 0, 0));        assertEquals("zzzz", StringUtils.overlay("", "zzzz", 2, 4));        assertEquals("zzzz", StringUtils.overlay("", "zzzz", -2, -4));                assertEquals("abef", StringUtils.overlay("abcdef", null, 2, 4));        assertEquals("abef", StringUtils.overlay("abcdef", null, 4, 2));        assertEquals("abef", StringUtils.overlay("abcdef", "", 2, 4));        assertEquals("abef", StringUtils.overlay("abcdef", "", 4, 2));        assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 2, 4));        assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 4, 2));                assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", -1, 4));        assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", 4, -1));        assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -2, -1));        assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -1, -2));        assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 4, 10));        assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 4));        assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 8, 10));        assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 8));    }    public void testRepeat_StringInt() {        assertEquals(null, StringUtils.repeat(null, 2));        assertEquals("", StringUtils.repeat("ab", 0));        assertEquals("", StringUtils.repeat("", 3));        assertEquals("aaa", StringUtils.repeat("a", 3));        assertEquals("ababab", StringUtils.repeat("ab", 3));        assertEquals("abcabcabc", StringUtils.repeat("abc", 3));        String str = StringUtils.repeat("a", 10000);  // bigger than pad limit        assertEquals(10000, str.length());        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));    }    public void testDeprecatedChompFunctions() {        assertEquals("chompLast(String) failed",                     FOO_UNCAP, StringUtils.chompLast(FOO_UNCAP + "\n") );        assertEquals("getChomp(String, String) failed",                     "\n" + FOO_UNCAP, StringUtils.getChomp(FOO_UNCAP + "\n" + FOO_UNCAP, "\n") );        assertEquals("prechomp(String, String) failed",                     FOO_UNCAP, StringUtils.prechomp(FOO_UNCAP + "\n" + FOO_UNCAP, "\n") );        assertEquals("getPrechomp(String, String) failed",                     FOO_UNCAP + "\n", StringUtils.getPrechomp(FOO_UNCAP + "\n" + FOO_UNCAP, "\n") );        assertEquals("chopNewline(String, String) failed",                     FOO_UNCAP, StringUtils.chopNewline(FOO_UNCAP + "\r\n") );    }    public void testChop() {        String[][] chopCases = {            { FOO_UNCAP + "\r\n", FOO_UNCAP } ,            { FOO_UNCAP + "\n" , FOO_UNCAP } ,            { FOO_UNCAP + "\r", FOO_UNCAP },            { FOO_UNCAP + " \r", FOO_UNCAP + " " },            { "foo", "fo"},            { "foo\nfoo", "foo\nfo" },            { "\n", "" },            { "\r", "" },            { "\r\n", "" },            { null, null },            { "", "" },            { "a", "" },        };        for (int i = 0; i < chopCases.length; i++) {            String original = chopCases[i][0];            String expectedResult = chopCases[i][1];            assertEquals("chop(String) failed",                    expectedResult, StringUtils.chop(original));        }    }    public void testChomp() {        String[][] chompCases = {            { FOO_UNCAP + "\r\n", FOO_UNCAP },            { FOO_UNCAP + "\n" , FOO_UNCAP },            { FOO_UNCAP + "\r", FOO_UNCAP },            { FOO_UNCAP + " \r", FOO_UNCAP + " " },            { FOO_UNCAP, FOO_UNCAP },            { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n"},            { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" },            { "foo\nfoo", "foo\nfoo" },            { "foo\n\rfoo", "foo\n\rfoo" },            { "\n", "" },            { "\r", "" },            { "a", "a" },            { "\r\n", "" },            { "", "" },            { null, null },            { FOO_UNCAP + "\n\r", FOO_UNCAP + "\n"}        };        for (int i = 0; i < chompCases.length; i++) {            String original = chompCases[i][0];            String expectedResult = chompCases[i][1];            assertEquals("chomp(String) failed",                    expectedResult, StringUtils.chomp(original));        }        assertEquals("chomp(String, String) failed",                "foo", StringUtils.chomp("foobar", "bar"));        assertEquals("chomp(String, String) failed",                "foobar", StringUtils.chomp("foobar", "baz"));        assertEquals("chomp(String, String) failed",                "foo", StringUtils.chomp("foo", "foooo"));        assertEquals("chomp(String, String) failed",                "foobar", StringUtils.chomp("foobar", ""));        assertEquals("chomp(String, String) failed",                "foobar", StringUtils.chomp("foobar", null));        assertEquals("chomp(String, String) failed",                "", StringUtils.chomp("", "foo"));        assertEquals("chomp(String, String) failed",                "", StringUtils.chomp("", null));        assertEquals("chomp(String, String) failed",                "", StringUtils.chomp("", ""));        assertEquals("chomp(String, String) failed",                null, StringUtils.chomp(null, "foo"));        assertEquals("chomp(String, String) failed",                null, StringUtils.chomp(null, null));        assertEquals("chomp(String, String) failed",                null, StringUtils.chomp(null, ""));        assertEquals("chomp(String, String) failed",                "", StringUtils.chomp("foo", "foo"));        assertEquals("chomp(String, String) failed",                " ", StringUtils.chomp(" foo", "foo"));        assertEquals("chomp(String, String) failed",                "foo ", StringUtils.chomp("foo ", "foo"));    }    public void testChopNewLine() {        String[][] newLineCases = {            { FOO_UNCAP + "\r\n", FOO_UNCAP } ,            { FOO_UNCAP + "\n" , FOO_UNCAP } ,            { FOO_UNCAP + "\r", FOO_UNCAP + "\r" },            { FOO_UNCAP, FOO_UNCAP },            { FOO_UNCAP + "\n" + FOO_UNCAP , FOO_UNCAP + "\n" + FOO_UNCAP },            { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n"},            { "\n", "" },            { "", "" },            { "\r\n", "" }      };      for (int i = 0; i < newLineCases.length; i++) {          String original = newLineCases[i][0];          String expectedResult = newLineCases[i][1];          assertEquals("chopNewline(String) failed",                  expectedResult, StringUtils.chopNewline(original));      }    }    //-----------------------------------------------------------------------    public void testRightPad_StringInt() {        assertEquals(null, StringUtils.rightPad(null, 5));        assertEquals("     ", StringUtils.rightPad("", 5));        assertEquals("abc  ", StringUtils.rightPad("abc", 5));        assertEquals("abc", StringUtils.rightPad("abc", 2));        assertEquals("abc", StringUtils.rightPad("abc", -1));    }    public void testRightPad_StringIntChar() {        assertEquals(null, StringUtils.rightPad(null, 5, ' '));        assertEquals("     ", StringUtils.rightPad("", 5, ' '));        assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' '));        assertEquals("abc", StringUtils.rightPad("abc", 2, ' '));        assertEquals("abc", StringUtils.rightPad("abc", -1, ' '));        assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x'));        String str = StringUtils.rightPad("aaa", 10000, 'a');  // bigger than pad length        assertEquals(10000, str.length());        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));    }    public void testRightPad_StringIntString() {        assertEquals(null, StringUtils.rightPad(null, 5, "-+"));        assertEquals("     ", StringUtils.rightPad("", 5, " "));        assertEquals(null, StringUtils.rightPad(null, 8, null));        assertEquals("abc-+-+", StringUtils.rightPad("abc", 7, "-+"));        assertEquals("abc-+~", StringUtils.rightPad("abc", 6, "-+~"));        assertEquals("abc-+", StringUtils.rightPad("abc", 5, "-+~"));        assertEquals("abc", StringUtils.rightPad("abc", 2, " "));        assertEquals("abc", StringUtils.rightPad("abc", -1, " "));        assertEquals("abc  ", StringUtils.rightPad("abc", 5, null));        assertEquals("abc  ", StringUtils.rightPad("abc", 5, ""));    }            //-----------------------------------------------------------------------    public void testLeftPad_StringInt() {        assertEquals(null, StringUtils.leftPad(null, 5));        assertEquals("     ", StringUtils.leftPad("", 5));        assertEquals("  abc", StringUtils.leftPad("abc", 5));        assertEquals("abc", StringUtils.leftPad("abc", 2));    }            public void testLeftPad_StringIntChar() {        assertEquals(null, StringUtils.leftPad(null, 5, ' '));        assertEquals("     ", StringUtils.leftPad("", 5, ' '));        assertEquals("  abc", StringUtils.leftPad("abc", 5, ' '));        assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x'));        assertEquals("abc", StringUtils.leftPad("abc", 2, ' '));        String str = StringUtils.leftPad("aaa", 10000, 'a');  // bigger than pad length        assertEquals(10000, str.length());        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));    }            public void testLeftPad_StringIntString() {        assertEquals(null, StringUtils.leftPad(null, 5, "-+"));        assertEquals(null, StringUtils.leftPad(null, 5, null));        assertEquals("     ", StringUtils.leftPad("", 5, " "));        assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+"));        assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~"));        assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~"));        assertEquals("abc", StringUtils.leftPad("abc", 2, " "));        assertEquals("abc", StringUtils.leftPad("abc", -1, " "));        assertEquals("  abc", StringUtils.leftPad("abc", 5, null));        assertEquals("  abc", StringUtils.leftPad("abc", 5, ""));    }    //-----------------------------------------------------------------------    public void testCenter_StringInt() {        assertEquals(null, StringUtils.center(null, -1));        assertEquals(null, StringUtils.center(null, 4));        assertEquals("    ", StringUtils.center("", 4));        assertEquals("ab", StringUtils.center("ab", 0));        assertEquals("ab", StringUtils.center("ab", -1));        assertEquals("ab", StringUtils.center("ab", 1));        assertEquals("    ", StringUtils.center("", 4));        assertEquals(" ab ", StringUtils.center("ab", 4));        assertEquals("abcd", StringUtils.center("abcd", 2));        assertEquals(" a  ", StringUtils.center("a", 4));        assertEquals("  a  ", StringUtils.center("a", 5));    }        public void testCenter_StringIntChar() {        assertEquals(null, StringUtils.center(null, -1, ' '));        assertEquals(null, StringUtils.center(null, 4, ' '));        assertEquals("    ", StringUtils.center("", 4, ' '));        assertEquals("ab", StringUtils.center("ab", 0, ' '));        assertEquals("ab", StringUtils.center("ab", -1, ' '));        assertEquals("ab", StringUtils.center("ab", 1, ' '));        assertEquals("    ", StringUtils.center("", 4, ' '));        assertEquals(" ab ", StringUtils.center("ab", 4, ' '));        assertEquals("abcd", StringUtils.center("abcd", 2, ' '));        assertEquals(" a  ", StringUtils.center("a", 4, ' '));        assertEquals("  a  ", StringUtils.center("a", 5, ' '));        assertEquals("xxaxx", StringUtils.center("a", 5, 'x'));    }        public void testCenter_StringIntString() {        assertEquals(null, StringUtils.center(null, 4, null));        assertEquals(null, StringUtils.center(null, -1, " "));        assertEquals(null, StringUtils.center(null, 4, " "));        assertEquals("    ", StringUtils.center("", 4, " "));        assertEquals("ab", StringUtils.center("ab", 0, " "));        assertEquals("ab", StringUtils.center("ab", -1, " "));        assertEquals("ab", StringUtils.center("ab", 1, " "));        assertEquals("    ", StringUtils.center("", 4, " "));        assertEquals(" ab ", StringUtils.center("ab", 4, " "));        assertEquals("abcd", StringUtils.center("abcd", 2, " "));        assertEquals(" a  ", StringUtils.center("a", 4, " "));        assertEquals("yayz", StringUtils.center("a", 4, "yz"));        assertEquals("yzyayzy", StringUtils.center("a", 7, "yz"));        assertEquals("  abc  ", StringUtils.center("abc", 7, null));        assertEquals("  abc  ", StringUtils.center("abc", 7, ""));    }    //-----------------------------------------------------------------------    public void testReverse_String() {        assertEquals(null, StringUtils.reverse(null) );        assertEquals("", StringUtils.reverse("") );        assertEquals("sdrawkcab", StringUtils.reverse("backwards") );    }            public void testReverseDelimited_StringChar() {        assertEquals(null, StringUtils.reverseDelimited(null, '.') );        assertEquals("", StringUtils.reverseDelimited("", '.') );        assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.') );        assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.') );        assertEquals("", StringUtils.reverseDelimited("", '.') );    }    public void testReverseDelimitedString_StringString() {        assertEquals(null, StringUtils.reverseDelimitedString(null, null) );        assertEquals("", StringUtils.reverseDelimitedString("", null) );        assertEquals("", StringUtils.reverseDelimitedString("", ".") );        assertEquals("a.b.c", StringUtils.reverseDelimitedString("a.b.c", null) );        assertEquals("c b a", StringUtils.reverseDelimitedString("a b c", null) );        assertEquals("c.b.a", StringUtils.reverseDelimitedString("a.b.c", ".") );    }    //-----------------------------------------------------------------------    public void testDefault_String() {        assertEquals("", StringUtils.defaultString(null) );        assertEquals("", StringUtils.defaultString("") );        assertEquals("abc", StringUtils.defaultString("abc") );    }                public void testDefault_StringString() {        assertEquals("xyz", StringUtils.defaultString(null, "xyz") );        assertEquals("", StringUtils.defaultString("", "xyz") );        assertEquals("abc", StringUtils.defaultString("abc", "xyz") );    }        //-----------------------------------------------------------------------    public void testEscapeFunctions_String() {        assertEquals("", StringUtils.escape("") );        assertEquals("abc", StringUtils.escape("abc") );        assertEquals("\\t", StringUtils.escape("\t") );        assertEquals("\\\\", StringUtils.escape("\\") );        assertEquals("\\\\\\b\\t\\r", StringUtils.escape("\\\b\t\r") );        assertEquals("\\u1234", StringUtils.escape("\u1234") );        assertEquals("\\u0234", StringUtils.escape("\u0234") );        assertEquals("\\u00FD", StringUtils.escape("\u00fd") );    }    //-----------------------------------------------------------------------    public void testAbbreviate_StringInt() {        assertEquals(null, StringUtils.abbreviate(null, 10));        assertEquals("", StringUtils.abbreviate("", 10));        assertEquals("short", StringUtils.abbreviate("short", 10));        assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all good men to come to the aid of their party.", 10));        String raspberry = "raspberry peach";        assertEquals("raspberry p...", StringUtils.abbreviate(raspberry, 14));        assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 15));        assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 16));        assertEquals("abc...", StringUtils.abbreviate("abcdefg", 6));        assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 7));        assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 8));        assertEquals("a...", StringUtils.abbreviate("abcdefg", 4));        assertEquals("", StringUtils.abbreviate("", 4));                try {            String res = StringUtils.abbreviate("abc", 3);            fail("StringUtils.abbreviate expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {                // empty        }                  }        public void testAbbreviate_StringIntInt() {        assertEquals(null, StringUtils.abbreviate(null, 10, 12));        assertEquals("", StringUtils.abbreviate("", 0, 10));        assertEquals("", StringUtils.abbreviate("", 2, 10));                try {            String res = StringUtils.abbreviate("abcdefghij", 0, 3);            fail("StringUtils.abbreviate expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {                // empty        }              try {            String res = StringUtils.abbreviate("abcdefghij", 5, 6);            fail("StringUtils.abbreviate expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {                // empty        }                      String raspberry = "raspberry peach";        assertEquals("raspberry peach", StringUtils.abbreviate(raspberry, 11, 15));        assertEquals(null, StringUtils.abbreviate(null, 7, 14));        assertAbbreviateWithOffset("abcdefg...", -1, 10);        assertAbbreviateWithOffset("abcdefg...", 0, 10);        assertAbbreviateWithOffset("abcdefg...", 1, 10);        assertAbbreviateWithOffset("abcdefg...", 2, 10);        assertAbbreviateWithOffset("abcdefg...", 3, 10);        assertAbbreviateWithOffset("abcdefg...", 4, 10);        assertAbbreviateWithOffset("...fghi...", 5, 10);        assertAbbreviateWithOffset("...ghij...", 6, 10);        assertAbbreviateWithOffset("...hijk...", 7, 10);        assertAbbreviateWithOffset("...ijklmno", 8, 10);        assertAbbreviateWithOffset("...ijklmno", 9, 10);        assertAbbreviateWithOffset("...ijklmno", 10, 10);        assertAbbreviateWithOffset("...ijklmno", 10, 10);        assertAbbreviateWithOffset("...ijklmno", 11, 10);        assertAbbreviateWithOffset("...ijklmno", 12, 10);        assertAbbreviateWithOffset("...ijklmno", 13, 10);        assertAbbreviateWithOffset("...ijklmno", 14, 10);        assertAbbreviateWithOffset("...ijklmno", 15, 10);        assertAbbreviateWithOffset("...ijklmno", 16, 10);        assertAbbreviateWithOffset("...ijklmno", Integer.MAX_VALUE, 10);    }    private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth) {        String abcdefghijklmno = "abcdefghijklmno";        String message = "abbreviate(String,int,int) failed";        String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);        if (offset >= 0 && offset < abcdefghijklmno.length()) {            assertTrue(message + " -- should contain offset character",                    actual.indexOf((char)('a'+offset)) != -1);        }        assertTrue(message + " -- should not be greater than maxWidth",                actual.length() <= maxWidth);        assertEquals(message, expected, actual);    }    //-----------------------------------------------------------------------    public void testDifference_StringString() {        assertEquals(null, StringUtils.difference(null, null));        assertEquals("", StringUtils.difference("", ""));        assertEquals("abc", StringUtils.difference("", "abc"));        assertEquals("", StringUtils.difference("abc", ""));        assertEquals("i am a robot", StringUtils.difference(null, "i am a robot"));        assertEquals("i am a machine", StringUtils.difference("i am a machine", null));        assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot"));        assertEquals("", StringUtils.difference("abc", "abc"));        assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot"));    }    public void testDifferenceAt_StringString() {        assertEquals(-1, StringUtils.indexOfDifference(null, null));        assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot"));        assertEquals(-1, StringUtils.indexOfDifference("", ""));        assertEquals(0, StringUtils.indexOfDifference("", "abc"));        assertEquals(0, StringUtils.indexOfDifference("abc", ""));        assertEquals(0, StringUtils.indexOfDifference("i am a machine", null));        assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot"));        assertEquals(-1, StringUtils.indexOfDifference("foo", "foo"));        assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot"));    }    //-----------------------------------------------------------------------    public void testGetLevenshteinDistance_StringString() {        assertEquals(0, StringUtils.getLevenshteinDistance("", "") );        assertEquals(1, StringUtils.getLevenshteinDistance("", "a") );        assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") );        assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") );        assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") );        assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") );        assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") );        assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") );        assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo") );        assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo") );        try {            int d = StringUtils.getLevenshteinDistance("a", null);            fail("expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            // empty        }        try {            int d = StringUtils.getLevenshteinDistance(null, "a");            fail("expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            // empty        }    }    /**     * A sanity check for {@link StringUtils.EMPTY}.     */    public void testEMPTY() {        assertNotNull(StringUtils.EMPTY);        assertEquals("", StringUtils.EMPTY);    }        public void testRemoveStart() {        // StringUtils.removeStart("", *)        = ""        assertNull(StringUtils.removeStart(null, null));        assertNull(StringUtils.removeStart(null, ""));        assertNull(StringUtils.removeStart(null, "a"));                // StringUtils.removeStart(*, null)      = *        assertEquals(StringUtils.removeStart("", null), "");        assertEquals(StringUtils.removeStart("", ""), "");        assertEquals(StringUtils.removeStart("", "a"), "");                // All others:        assertEquals(StringUtils.removeStart("www.domain.com", "www."), "domain.com");        assertEquals(StringUtils.removeStart("domain.com", "www."), "domain.com");        assertEquals(StringUtils.removeStart("domain.com", ""), "domain.com");                assertEquals(StringUtils.removeStart("domain.com", null), "domain.com");            }    public void testRemoveEnd() {        // StringUtils.removeEnd("", *)        = ""        assertNull(StringUtils.removeEnd(null, null));        assertNull(StringUtils.removeEnd(null, ""));        assertNull(StringUtils.removeEnd(null, "a"));                // StringUtils.removeEnd(*, null)      = *        assertEquals(StringUtils.removeEnd("", null), "");        assertEquals(StringUtils.removeEnd("", ""), "");        assertEquals(StringUtils.removeEnd("", "a"), "");                // All others:        assertEquals(StringUtils.removeEnd("www.domain.com", ".com"), "www.domain");        assertEquals(StringUtils.removeEnd("www.domain", ".com"), "www.domain");        assertEquals(StringUtils.removeEnd("domain.com", ""), "domain.com");           assertEquals(StringUtils.removeEnd("domain.com", null), "domain.com");       }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;public class EntitiesPerformanceTest extends TestCase {    private int COUNT = 10000;    private int STRING_LENGTH = 1000;    private static String stringWithUnicode;    private static String stringWithEntities;    private static Entities treeEntities;    private static Entities hashEntities;    private static Entities arrayEntities;    private static Entities binaryEntities;    private static Entities primitiveEntities;    private static Entities lookupEntities;    public EntitiesPerformanceTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(EntitiesPerformanceTest.class);        return suite;    }    public void setUp() {        if (stringWithUnicode == null) {            StringBuffer buf = new StringBuffer(STRING_LENGTH);            for (int i = 0; i < STRING_LENGTH / 5; ++i) {                buf.append("xxxx");                char ch = isovalue(i);                buf.append(ch);            }            stringWithUnicode = buf.toString();            stringWithEntities = Entities.HTML40.unescape(stringWithUnicode);        }    }    private char html40value(int i) {        String entityValue = Entities.HTML40_ARRAY[i % Entities.HTML40_ARRAY.length][1];        char ch = (char) Integer.parseInt(entityValue);        return ch;    }    private char isovalue(int i) {        String entityValue = Entities.ISO8859_1_ARRAY[i % Entities.ISO8859_1_ARRAY.length][1];        char ch = (char) Integer.parseInt(entityValue);        return ch;    }    public void testBuildHash() throws Exception {        for (int i = 0; i < COUNT; ++i) {            hashEntities = build(new Entities.HashEntityMap());        }    }    public void testBuildTree() throws Exception {        for (int i = 0; i < COUNT; ++i) {            treeEntities = build(new Entities.TreeEntityMap());        }    }    public void testBuildArray() throws Exception {        for (int i = 0; i < COUNT; ++i) {            arrayEntities = build(new Entities.ArrayEntityMap());        }    }    public void testBuildBinary() throws Exception {        for (int i = 0; i < COUNT; ++i) {            binaryEntities = build(new Entities.BinaryEntityMap());        }    }    public void testBuildPrimitive() throws Exception {        for (int i = 0; i < COUNT; ++i) {            buildPrimitive();        }    }    private void buildPrimitive()    {        primitiveEntities = build(new Entities.PrimitiveEntityMap());    }    public void testBuildLookup() throws Exception {        for (int i = 0; i < COUNT; ++i) {            buildLookup();        }    }    private void buildLookup()    {        lookupEntities = build(new Entities.LookupEntityMap());    }    private Entities build(Entities.EntityMap intMap) {        Entities entities;        entities = new Entities();        entities.map = intMap;        Entities.fillWithHtml40Entities(entities);        return entities;    }    public void testLookupHash() throws Exception {        lookup(hashEntities);    }    public void testLookupTree() throws Exception {        lookup(treeEntities);    }    public void testLookupArray() throws Exception {        lookup(arrayEntities);    }    public void testLookupBinary() throws Exception {        lookup(binaryEntities);    }    public void testLookupPrimitive() throws Exception {        if (primitiveEntities == null) buildPrimitive();        lookup(primitiveEntities);    }    public void testLookupLookup() throws Exception {        if (lookupEntities == null) buildLookup();        lookup(lookupEntities);    }    public void testEscapeHash() throws Exception {        escapeIt(hashEntities);    }    public void testEscapeTree() throws Exception {        escapeIt(treeEntities);    }    public void testEscapeArray() throws Exception {        escapeIt(arrayEntities);    }    public void testEscapeBinary() throws Exception {        escapeIt(binaryEntities);    }    public void testEscapePrimitive() throws Exception {        escapeIt(primitiveEntities);    }    public void testEscapeLookup() throws Exception {        escapeIt(lookupEntities);    }    public void testUnescapeHash() throws Exception {        unescapeIt(hashEntities);    }    public void testUnescapeTree() throws Exception {        unescapeIt(treeEntities);    }    public void testUnescapeArray() throws Exception {        unescapeIt(arrayEntities);    }    public void testUnescapeBinary() throws Exception {        unescapeIt(binaryEntities);    }    private void lookup(Entities entities) {        for (int i = 0; i < COUNT * 1000; ++i) {            entities.entityName(isovalue(i));        }    }    private void escapeIt(Entities entities) {        for (int i = 0; i < COUNT; ++i) {            String escaped = entities.escape(stringWithUnicode);            assertEquals("xxxx&nbsp;", escaped.substring(0, 10));        }    }    private void unescapeIt(Entities entities) {        for (int i = 0; i < COUNT; ++i) {            String unescaped = entities.unescape(stringWithEntities);            assertEquals("xxxx\u00A0", unescaped.substring(0, 5));        }    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.StringUtils} - Trim/Empty methods * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @version $Id: StringUtilsTrimEmptyTest.java,v 1.17 2004/02/18 23:06:19 ggregory Exp $ */public class StringUtilsTrimEmptyTest extends TestCase {    private static final String FOO = "foo";    public StringUtilsTrimEmptyTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(StringUtilsTrimEmptyTest.class);    suite.setName("StringUtilsTrimEmpty Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testIsEmpty() {        assertEquals(true, StringUtils.isEmpty(null));        assertEquals(true, StringUtils.isEmpty(""));        assertEquals(false, StringUtils.isEmpty(" "));        assertEquals(false, StringUtils.isEmpty("foo"));        assertEquals(false, StringUtils.isEmpty("  foo  "));    }    public void testIsNotEmpty() {        assertEquals(false, StringUtils.isNotEmpty(null));        assertEquals(false, StringUtils.isNotEmpty(""));        assertEquals(true, StringUtils.isNotEmpty(" "));        assertEquals(true, StringUtils.isNotEmpty("foo"));        assertEquals(true, StringUtils.isNotEmpty("  foo  "));    }    public void testIsBlank() {        assertEquals(true, StringUtils.isBlank(null));        assertEquals(true, StringUtils.isBlank(""));        assertEquals(true, StringUtils.isBlank(StringUtilsTest.WHITESPACE));        assertEquals(false, StringUtils.isBlank("foo"));        assertEquals(false, StringUtils.isBlank("  foo  "));    }    public void testIsNotBlank() {        assertEquals(false, StringUtils.isNotBlank(null));        assertEquals(false, StringUtils.isNotBlank(""));        assertEquals(false, StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));        assertEquals(true, StringUtils.isNotBlank("foo"));        assertEquals(true, StringUtils.isNotBlank("  foo  "));    }    //-----------------------------------------------------------------------    public void testClean() {        assertEquals(FOO, StringUtils.clean(FOO + "  "));        assertEquals(FOO, StringUtils.clean(" " + FOO + "  "));        assertEquals(FOO, StringUtils.clean(" " + FOO));        assertEquals(FOO, StringUtils.clean(FOO + ""));        assertEquals("", StringUtils.clean(" \t\r\n\b "));        assertEquals("", StringUtils.clean(""));        assertEquals("", StringUtils.clean(null));    }    public void testTrim() {        assertEquals(FOO, StringUtils.trim(FOO + "  "));        assertEquals(FOO, StringUtils.trim(" " + FOO + "  "));        assertEquals(FOO, StringUtils.trim(" " + FOO));        assertEquals(FOO, StringUtils.trim(FOO + ""));        assertEquals("", StringUtils.trim(" \t\r\n\b "));        assertEquals("", StringUtils.trim(StringUtilsTest.TRIMMABLE));        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE));        assertEquals("", StringUtils.trim(""));        assertEquals(null, StringUtils.trim(null));    }    public void testTrimToNull() {        assertEquals(FOO, StringUtils.trimToNull(FOO + "  "));        assertEquals(FOO, StringUtils.trimToNull(" " + FOO + "  "));        assertEquals(FOO, StringUtils.trimToNull(" " + FOO));        assertEquals(FOO, StringUtils.trimToNull(FOO + ""));        assertEquals(null, StringUtils.trimToNull(" \t\r\n\b "));        assertEquals(null, StringUtils.trimToNull(StringUtilsTest.TRIMMABLE));        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE));        assertEquals(null, StringUtils.trimToNull(""));        assertEquals(null, StringUtils.trimToNull(null));    }    public void testTrimToEmpty() {        assertEquals(FOO, StringUtils.trimToEmpty(FOO + "  "));        assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO + "  "));        assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO));        assertEquals(FOO, StringUtils.trimToEmpty(FOO + ""));        assertEquals("", StringUtils.trimToEmpty(" \t\r\n\b "));        assertEquals("", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE));        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE));        assertEquals("", StringUtils.trimToEmpty(""));        assertEquals("", StringUtils.trimToEmpty(null));    }    //-----------------------------------------------------------------------    public void testStrip_String() {        assertEquals(null, StringUtils.strip(null));        assertEquals("", StringUtils.strip(""));        assertEquals("", StringUtils.strip("        "));        assertEquals("abc", StringUtils.strip("  abc  "));        assertEquals(StringUtilsTest.NON_WHITESPACE,             StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));    }        public void testStripToNull_String() {        assertEquals(null, StringUtils.stripToNull(null));        assertEquals(null, StringUtils.stripToNull(""));        assertEquals(null, StringUtils.stripToNull("        "));        assertEquals(null, StringUtils.stripToNull(StringUtilsTest.WHITESPACE));        assertEquals("ab c", StringUtils.stripToNull("  ab c  "));        assertEquals(StringUtilsTest.NON_WHITESPACE,             StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));    }        public void testStripToEmpty_String() {        assertEquals("", StringUtils.stripToEmpty(null));        assertEquals("", StringUtils.stripToEmpty(""));        assertEquals("", StringUtils.stripToEmpty("        "));        assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE));        assertEquals("ab c", StringUtils.stripToEmpty("  ab c  "));        assertEquals(StringUtilsTest.NON_WHITESPACE,             StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));    }        public void testStrip_StringString() {        // null strip        assertEquals(null, StringUtils.strip(null, null));        assertEquals("", StringUtils.strip("", null));        assertEquals("", StringUtils.strip("        ", null));        assertEquals("abc", StringUtils.strip("  abc  ", null));        assertEquals(StringUtilsTest.NON_WHITESPACE,             StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));        // "" strip        assertEquals(null, StringUtils.strip(null, ""));        assertEquals("", StringUtils.strip("", ""));        assertEquals("        ", StringUtils.strip("        ", ""));        assertEquals("  abc  ", StringUtils.strip("  abc  ", ""));        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, ""));                // " " strip        assertEquals(null, StringUtils.strip(null, " "));        assertEquals("", StringUtils.strip("", " "));        assertEquals("", StringUtils.strip("        ", " "));        assertEquals("abc", StringUtils.strip("  abc  ", " "));                // "ab" strip        assertEquals(null, StringUtils.strip(null, "ab"));        assertEquals("", StringUtils.strip("", "ab"));        assertEquals("        ", StringUtils.strip("        ", "ab"));        assertEquals("  abc  ", StringUtils.strip("  abc  ", "ab"));        assertEquals("c", StringUtils.strip("abcabab", "ab"));        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, ""));    }        public void testStripStart_StringString() {        // null stripStart        assertEquals(null, StringUtils.stripStart(null, null));        assertEquals("", StringUtils.stripStart("", null));        assertEquals("", StringUtils.stripStart("        ", null));        assertEquals("abc  ", StringUtils.stripStart("  abc  ", null));        assertEquals(StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE,             StringUtils.stripStart(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));        // "" stripStart        assertEquals(null, StringUtils.stripStart(null, ""));        assertEquals("", StringUtils.stripStart("", ""));        assertEquals("        ", StringUtils.stripStart("        ", ""));        assertEquals("  abc  ", StringUtils.stripStart("  abc  ", ""));        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, ""));                // " " stripStart        assertEquals(null, StringUtils.stripStart(null, " "));        assertEquals("", StringUtils.stripStart("", " "));        assertEquals("", StringUtils.stripStart("        ", " "));        assertEquals("abc  ", StringUtils.stripStart("  abc  ", " "));                // "ab" stripStart        assertEquals(null, StringUtils.stripStart(null, "ab"));        assertEquals("", StringUtils.stripStart("", "ab"));        assertEquals("        ", StringUtils.stripStart("        ", "ab"));        assertEquals("  abc  ", StringUtils.stripStart("  abc  ", "ab"));        assertEquals("cabab", StringUtils.stripStart("abcabab", "ab"));        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, ""));    }        public void testStripEnd_StringString() {        // null stripEnd        assertEquals(null, StringUtils.stripEnd(null, null));        assertEquals("", StringUtils.stripEnd("", null));        assertEquals("", StringUtils.stripEnd("        ", null));        assertEquals("  abc", StringUtils.stripEnd("  abc  ", null));        assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE,             StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));        // "" stripEnd        assertEquals(null, StringUtils.stripEnd(null, ""));        assertEquals("", StringUtils.stripEnd("", ""));        assertEquals("        ", StringUtils.stripEnd("        ", ""));        assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", ""));        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, ""));                // " " stripEnd        assertEquals(null, StringUtils.stripEnd(null, " "));        assertEquals("", StringUtils.stripEnd("", " "));        assertEquals("", StringUtils.stripEnd("        ", " "));        assertEquals("  abc", StringUtils.stripEnd("  abc  ", " "));                // "ab" stripEnd        assertEquals(null, StringUtils.stripEnd(null, "ab"));        assertEquals("", StringUtils.stripEnd("", "ab"));        assertEquals("        ", StringUtils.stripEnd("        ", "ab"));        assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", "ab"));        assertEquals("abc", StringUtils.stripEnd("abcabab", "ab"));        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, ""));    }    public void testStripAll() {        // test stripAll method, merely an array version of the above strip        String[] empty = new String[0];        String[] fooSpace = new String[] { "  "+FOO+"  ", "  "+FOO, FOO+"  " };        String[] fooDots = new String[] { ".."+FOO+"..", ".."+FOO, FOO+".." };        String[] foo = new String[] { FOO, FOO, FOO };        assertEquals(null, StringUtils.stripAll(null));        assertArrayEquals(empty, StringUtils.stripAll(empty));        assertArrayEquals(foo, StringUtils.stripAll(fooSpace));                assertEquals(null, StringUtils.stripAll(null, null));        assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null));        assertArrayEquals(foo, StringUtils.stripAll(fooDots, "."));    }    private void assertArrayEquals(Object[] o1, Object[] o2) {        if(o1 == null) {            assertEquals(o1,o2);            return;        }        assertEquals("Length not equal. ", o1.length, o2.length);        int sz = o1.length;        for(int i=0; i<sz; i++) {            if(o1[i] instanceof Object[]) {                // do an assert equals on type....                assertArrayEquals( (Object[]) o1[i], (Object[]) o2[i] );            } else {                assertEquals(o1[i], o2[i]);            }        }    }}
/* * Copyright 2002,2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.util.ArrayList;import java.util.Collection;import java.util.HashMap;import java.util.List;import java.util.Map;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.util.Validate}. * * @author Stephen Colebourne * @author Norm Deane * @version $Id: ValidateTest.java,v 1.5 2004/02/18 23:06:19 ggregory Exp $ */public class ValidateTest extends TestCase {    public ValidateTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(ValidateTest.class);    suite.setName("Validate Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testIsTrue1() {        Validate.isTrue(true);        try {            Validate.isTrue(false);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated expression is false", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testIsTrue2() {        Validate.isTrue(true, "MSG");        try {            Validate.isTrue(false, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testIsTrue3() {        Validate.isTrue(true, "MSG", new Integer(6));        try {            Validate.isTrue(false, "MSG", new Integer(6));            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG6", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testIsTrue4() {        Validate.isTrue(true, "MSG", 7);        try {            Validate.isTrue(false, "MSG", 7);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG7", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testIsTrue5() {        Validate.isTrue(true, "MSG", 7.4d);        try {            Validate.isTrue(false, "MSG", 7.4d);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG7.4", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNotNull1() {        Validate.notNull(new Object());        try {            Validate.notNull(null);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated object is null", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNotNull2() {        Validate.notNull(new Object(), "MSG");        try {            Validate.notNull(null, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNotEmptyArray1() {        Validate.notEmpty(new Object[] {null});        try {            Validate.notEmpty((Object[]) null);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated array is empty", ex.getMessage());        }        try {            Validate.notEmpty(new Object[0]);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated array is empty", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNotEmptyArray2() {        Validate.notEmpty(new Object[] {null}, "MSG");        try {            Validate.notEmpty((Object[]) null, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }        try {            Validate.notEmpty(new Object[0], "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNotEmptyCollection1() {        Collection coll = new ArrayList();        try {            Validate.notEmpty((Collection) null);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated collection is empty", ex.getMessage());        }        try {            Validate.notEmpty(coll);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated collection is empty", ex.getMessage());        }        coll.add(new Integer(8));        Validate.notEmpty(coll);    }    //-----------------------------------------------------------------------    public void testNotEmptyCollection2() {        Collection coll = new ArrayList();        try {            Validate.notEmpty((Collection) null, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }        try {            Validate.notEmpty(coll, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }        coll.add(new Integer(8));        Validate.notEmpty(coll, "MSG");    }    //-----------------------------------------------------------------------    public void testNotEmptyMap1() {        Map map = new HashMap();        try {            Validate.notEmpty((Map) null);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated map is empty", ex.getMessage());        }        try {            Validate.notEmpty(map);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated map is empty", ex.getMessage());        }        map.put("ll", new Integer(8));        Validate.notEmpty(map);    }    //-----------------------------------------------------------------------    public void testNotEmptyMap2() {        Map map = new HashMap();        try {            Validate.notEmpty((Map) null, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }        try {            Validate.notEmpty(map, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }        map.put("ll", new Integer(8));        Validate.notEmpty(map, "MSG");    }    //-----------------------------------------------------------------------    public void testNotEmptyString1() {        Validate.notEmpty("hjl");        try {            Validate.notEmpty((String) null);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated string is empty", ex.getMessage());        }        try {            Validate.notEmpty("");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated string is empty", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNotEmptyString2() {        Validate.notEmpty("a", "MSG");        try {            Validate.notEmpty((String) null, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }        try {            Validate.notEmpty("", "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNoNullElementsArray1() {        String[] array = new String[] {"a", "b"};        Validate.noNullElements(array);        try {            Validate.noNullElements((Object[]) null);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated object is null", ex.getMessage());        }        array[1] = null;        try {            Validate.noNullElements(array);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated array contains null element at index: 1", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNoNullElementsArray2() {        String[] array = new String[] {"a", "b"};        Validate.noNullElements(array, "MSG");        try {            Validate.noNullElements((Object[]) null, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated object is null", ex.getMessage());        }        array[1] = null;        try {            Validate.noNullElements(array, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNoNullElementsCollection1() {        List coll = new ArrayList();        coll.add("a");        coll.add("b");        Validate.noNullElements(coll);        try {            Validate.noNullElements((Collection) null);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated object is null", ex.getMessage());        }        coll.set(1, null);        try {            Validate.noNullElements(coll);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated collection contains null element at index: 1", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNoNullElementsCollection2() {        List coll = new ArrayList();        coll.add("a");        coll.add("b");        Validate.noNullElements(coll, "MSG");        try {            Validate.noNullElements((Collection) null, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated object is null", ex.getMessage());        }        coll.set(1, null);        try {            Validate.noNullElements(coll, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testAllElementsOfClass() {    List coll = new ArrayList();    coll.add("a");    coll.add("b");    Validate.allElementsOfClass(coll, String.class, "MSG");    try {    Validate.allElementsOfClass(coll, Integer.class, "MSG");    fail("Expecting IllegalArgumentException");    } catch (IllegalArgumentException ex) {    assertEquals("MSG", ex.getMessage());    }    coll.set(1, Boolean.FALSE);    try {    Validate.allElementsOfClass(coll, String.class);    fail("Expecting IllegalArgumentException");    } catch (IllegalArgumentException ex) {    assertEquals("The validated collection contains an element not of type java.lang.String at index: 1", ex.getMessage());    }    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @author Matthew Hawthorne * @version $Id: IllegalClassExceptionTest.java,v 1.4 2004/02/18 23:06:19 ggregory Exp $ * @see IllegalClassException */public class IllegalClassExceptionTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(IllegalClassExceptionTest.class);    }    public IllegalClassExceptionTest(String testName) {        super(testName);    }    // testConstructor_classArgs    public void testConstructor_classArgs_allNullInput() {        new IllegalClassException(null, null);    }    public void testConstructor_classArgs_nullExpected() {        new IllegalClassException(null, String.class);    }    public void testConstructor_classArgs_nullActual() {        new IllegalClassException(String.class, null);    }    //  testConstructor_stringArg    public void testConstructor_stringArg_nullInput() {        new IllegalClassException(null);    }    // testGetMessage    public void testGetMessage_classArgs_nullInput() {        final Throwable t = new IllegalClassException(null, null);        assertEquals("Expected: null, actual: null", t.getMessage());    }    public void testGetMessage_classArgs_normalInput() {        final Throwable t =            new IllegalClassException(String.class, Integer.class);        assertEquals(            "Expected: java.lang.String, actual: java.lang.Integer",            t.getMessage());    }    public void testGetMessage_stringArg_nullInput() {        final Throwable t = new IllegalClassException(null);        assertEquals(null, t.getMessage());    }    public void testGetMessage_stringArg_validInput() {        final String message = "message";        final Throwable t = new IllegalClassException(message);        assertEquals(message, t.getMessage());    }} // IllegalClassExceptionTest
/* * Copyright 2003,2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Modifier;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.CharRange}. * * @author Stephen Colebourne * @version $Id: CharRangeTest.java,v 1.4 2004/02/18 23:06:19 ggregory Exp $ */public class CharRangeTest extends TestCase {        public CharRangeTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(CharRangeTest.class);        suite.setName("CharRange Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testClass() {        assertEquals(true, Modifier.isPublic(CharRange.class.getModifiers()));        assertEquals(true, Modifier.isFinal(CharRange.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testConstructorAccessors_Char() {        CharRange rangea = new CharRange('a');        assertEquals('a', rangea.getStart());        assertEquals('a', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a", rangea.toString());    }        public void testConstructorAccessors_CharBoolean_Normal() {        CharRange rangea = new CharRange('a');        assertEquals('a', rangea.getStart());        assertEquals('a', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a", rangea.toString());    }        public void testConstructorAccessors_CharBoolean_Negated() {        CharRange rangea = new CharRange('a', true);        assertEquals('a', rangea.getStart());        assertEquals('a', rangea.getEnd());        assertEquals(true, rangea.isNegated());        assertEquals("^a", rangea.toString());    }        public void testConstructorAccessors_CharChar_Same() {        CharRange rangea = new CharRange('a', 'a');        assertEquals('a', rangea.getStart());        assertEquals('a', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a", rangea.toString());    }        public void testConstructorAccessors_CharChar_Normal() {        CharRange rangea = new CharRange('a', 'e');        assertEquals('a', rangea.getStart());        assertEquals('e', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a-e", rangea.toString());    }        public void testConstructorAccessors_CharChar_Reversed() {        CharRange rangea = new CharRange('e', 'a');        assertEquals('a', rangea.getStart());        assertEquals('e', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a-e", rangea.toString());    }        public void testConstructorAccessors_CharCharBoolean_Same() {        CharRange rangea = new CharRange('a', 'a', false);        assertEquals('a', rangea.getStart());        assertEquals('a', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a", rangea.toString());    }        public void testConstructorAccessors_CharCharBoolean_Normal() {        CharRange rangea = new CharRange('a', 'e', false);        assertEquals('a', rangea.getStart());        assertEquals('e', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a-e", rangea.toString());    }        public void testConstructorAccessors_CharCharBoolean_Reversed() {        CharRange rangea = new CharRange('e', 'a', false);        assertEquals('a', rangea.getStart());        assertEquals('e', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a-e", rangea.toString());    }        public void testConstructorAccessors_CharCharBoolean_SameNegated() {        CharRange rangea = new CharRange('a', 'a', true);        assertEquals('a', rangea.getStart());        assertEquals('a', rangea.getEnd());        assertEquals(true, rangea.isNegated());        assertEquals("^a", rangea.toString());    }        public void testConstructorAccessors_CharCharBoolean_NormalNegated() {        CharRange rangea = new CharRange('a', 'e', true);        assertEquals('a', rangea.getStart());        assertEquals('e', rangea.getEnd());        assertEquals(true, rangea.isNegated());        assertEquals("^a-e", rangea.toString());    }        public void testConstructorAccessors_CharCharBoolean_ReversedNegated() {        CharRange rangea = new CharRange('e', 'a', true);        assertEquals('a', rangea.getStart());        assertEquals('e', rangea.getEnd());        assertEquals(true, rangea.isNegated());        assertEquals("^a-e", rangea.toString());    }    //-----------------------------------------------------------------------        public void testEquals_Object() {        CharRange rangea = new CharRange('a');        CharRange rangeae = new CharRange('a', 'e');        CharRange rangenotbf = new CharRange('b', 'f', false);                assertEquals(false, rangea.equals(null));                assertEquals(true, rangea.equals(rangea));        assertEquals(true, rangea.equals(new CharRange('a')));        assertEquals(true, rangeae.equals(rangeae));        assertEquals(true, rangeae.equals(new CharRange('a', 'e')));        assertEquals(true, rangenotbf.equals(rangenotbf));        assertEquals(true, rangenotbf.equals(new CharRange('b', 'f', false)));                assertEquals(false, rangea.equals(rangeae));        assertEquals(false, rangea.equals(rangenotbf));        assertEquals(false, rangeae.equals(rangea));        assertEquals(false, rangeae.equals(rangenotbf));        assertEquals(false, rangenotbf.equals(rangea));        assertEquals(false, rangenotbf.equals(rangeae));    }                public void testHashCode() {        CharRange rangea = new CharRange('a');        CharRange rangeae = new CharRange('a', 'e');        CharRange rangenotbf = new CharRange('b', 'f', false);                assertEquals(true, rangea.hashCode() == rangea.hashCode());        assertEquals(true, rangea.hashCode() == new CharRange('a').hashCode());        assertEquals(true, rangeae.hashCode() == rangeae.hashCode());        assertEquals(true, rangeae.hashCode() == new CharRange('a', 'e').hashCode());        assertEquals(true, rangenotbf.hashCode() == rangenotbf.hashCode());        assertEquals(true, rangenotbf.hashCode() == new CharRange('b', 'f', false).hashCode());                assertEquals(false, rangea.hashCode() == rangeae.hashCode());        assertEquals(false, rangea.hashCode() == rangenotbf.hashCode());        assertEquals(false, rangeae.hashCode() == rangea.hashCode());        assertEquals(false, rangeae.hashCode() == rangenotbf.hashCode());        assertEquals(false, rangenotbf.hashCode() == rangea.hashCode());        assertEquals(false, rangenotbf.hashCode() == rangeae.hashCode());    }        //-----------------------------------------------------------------------        public void testContains_Char() {        CharRange range = new CharRange('c');        assertEquals(false, range.contains('b'));        assertEquals(true, range.contains('c'));        assertEquals(false, range.contains('d'));        assertEquals(false, range.contains('e'));                range = new CharRange('c', 'd');        assertEquals(false, range.contains('b'));        assertEquals(true, range.contains('c'));        assertEquals(true, range.contains('d'));        assertEquals(false, range.contains('e'));                range = new CharRange('d', 'c');        assertEquals(false, range.contains('b'));        assertEquals(true, range.contains('c'));        assertEquals(true, range.contains('d'));        assertEquals(false, range.contains('e'));                range = new CharRange('c', 'd', false);        assertEquals(false, range.contains('b'));        assertEquals(true, range.contains('c'));        assertEquals(true, range.contains('d'));        assertEquals(false, range.contains('e'));                range = new CharRange('c', 'd', true);        assertEquals(true, range.contains('b'));        assertEquals(false, range.contains('c'));        assertEquals(false, range.contains('d'));        assertEquals(true, range.contains('e'));        assertEquals(true, range.contains((char) 0));        assertEquals(true, range.contains(Character.MAX_VALUE));    }        //-----------------------------------------------------------------------        public void testContains_Charrange() {        CharRange a = new CharRange('a');        CharRange b = new CharRange('b');        CharRange c = new CharRange('c');        CharRange c2 = new CharRange('c');        CharRange d = new CharRange('d');        CharRange e = new CharRange('e');        CharRange cd = new CharRange('c', 'd');        CharRange bd = new CharRange('b', 'd');        CharRange bc = new CharRange('b', 'c');        CharRange ab = new CharRange('a', 'b');        CharRange de = new CharRange('d', 'e');        CharRange ef = new CharRange('e', 'f');        CharRange ae = new CharRange('a', 'e');                // normal/normal        assertEquals(false, c.contains(b));        assertEquals(true, c.contains(c));        assertEquals(true, c.contains(c2));        assertEquals(false, c.contains(d));                assertEquals(false, c.contains(cd));        assertEquals(false, c.contains(bd));        assertEquals(false, c.contains(bc));        assertEquals(false, c.contains(ab));        assertEquals(false, c.contains(de));                assertEquals(true, cd.contains(c));        assertEquals(true, bd.contains(c));        assertEquals(true, bc.contains(c));        assertEquals(false, ab.contains(c));        assertEquals(false, de.contains(c));        assertEquals(true, ae.contains(b));        assertEquals(true, ae.contains(ab));        assertEquals(true, ae.contains(bc));        assertEquals(true, ae.contains(cd));        assertEquals(true, ae.contains(de));                CharRange notb = new CharRange('b', 'b', true);        CharRange notc = new CharRange('c', 'c', true);        CharRange notd = new CharRange('d', 'd', true);        CharRange notab = new CharRange('a', 'b', true);        CharRange notbc = new CharRange('b', 'c', true);        CharRange notbd = new CharRange('b', 'd', true);        CharRange notcd = new CharRange('c', 'd', true);        CharRange notde = new CharRange('d', 'e', true);        CharRange notae = new CharRange('a', 'e', true);        CharRange all = new CharRange((char) 0, Character.MAX_VALUE);        CharRange allbutfirst = new CharRange((char) 1, Character.MAX_VALUE);                // normal/negated        assertEquals(false, c.contains(notc));        assertEquals(false, c.contains(notbd));        assertEquals(true, all.contains(notc));        assertEquals(true, all.contains(notbd));        assertEquals(false, allbutfirst.contains(notc));        assertEquals(false, allbutfirst.contains(notbd));                // negated/normal        assertEquals(true, notc.contains(a));        assertEquals(true, notc.contains(b));        assertEquals(false, notc.contains(c));        assertEquals(true, notc.contains(d));        assertEquals(true, notc.contains(e));                assertEquals(true, notc.contains(ab));        assertEquals(false, notc.contains(bc));        assertEquals(false, notc.contains(bd));        assertEquals(false, notc.contains(cd));        assertEquals(true, notc.contains(de));        assertEquals(false, notc.contains(ae));        assertEquals(false, notc.contains(all));        assertEquals(false, notc.contains(allbutfirst));                assertEquals(true, notbd.contains(a));        assertEquals(false, notbd.contains(b));        assertEquals(false, notbd.contains(c));        assertEquals(false, notbd.contains(d));        assertEquals(true, notbd.contains(e));                assertEquals(true, notcd.contains(ab));        assertEquals(false, notcd.contains(bc));        assertEquals(false, notcd.contains(bd));        assertEquals(false, notcd.contains(cd));        assertEquals(false, notcd.contains(de));        assertEquals(false, notcd.contains(ae));        assertEquals(true, notcd.contains(ef));        assertEquals(false, notcd.contains(all));        assertEquals(false, notcd.contains(allbutfirst));                // negated/negated        assertEquals(false, notc.contains(notb));        assertEquals(true, notc.contains(notc));        assertEquals(false, notc.contains(notd));                assertEquals(false, notc.contains(notab));        assertEquals(true, notc.contains(notbc));        assertEquals(true, notc.contains(notbd));        assertEquals(true, notc.contains(notcd));        assertEquals(false, notc.contains(notde));                assertEquals(false, notbd.contains(notb));        assertEquals(false, notbd.contains(notc));        assertEquals(false, notbd.contains(notd));                assertEquals(false, notbd.contains(notab));        assertEquals(false, notbd.contains(notbc));        assertEquals(true, notbd.contains(notbd));        assertEquals(false, notbd.contains(notcd));        assertEquals(false, notbd.contains(notde));        assertEquals(true, notbd.contains(notae));    }        //-----------------------------------------------------------------------        public void testSerialization() {        CharRange range = new CharRange('a');        assertEquals(range, SerializationUtils.clone(range));         range = new CharRange('a', 'e');        assertEquals(range, SerializationUtils.clone(range));         range = new CharRange('a', 'e', true);        assertEquals(range, SerializationUtils.clone(range));     }    }
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.util.Arrays;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Tests ArrayUtils add methods. *  * @author Gary D. Gregory * @version $Id: ArrayUtilsAddTest.java,v 1.3 2004/03/16 01:40:57 ggregory Exp $ */public class ArrayUtilsAddTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(ArrayUtilsAddTest.class);        suite.setName("ArrayUtils add Tests");        return suite;    }    public void testAddObjectArrayBoolean() {        boolean[] newArray;        newArray = ArrayUtils.add((boolean[])null, false);        assertTrue(Arrays.equals(new boolean[]{false}, newArray));        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((boolean[])null, true);        assertTrue(Arrays.equals(new boolean[]{true}, newArray));        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());        boolean[] array1 = new boolean[]{true, false, true};        newArray = ArrayUtils.add(array1, false);        assertTrue(Arrays.equals(new boolean[]{true, false, true, false}, newArray));        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());    }        public void testAddObjectArrayByte() {        byte[] newArray;        newArray = ArrayUtils.add((byte[])null, (byte)0);        assertTrue(Arrays.equals(new byte[]{0}, newArray));        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((byte[])null, (byte)1);        assertTrue(Arrays.equals(new byte[]{1}, newArray));        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());        byte[] array1 = new byte[]{1, 2, 3};        newArray = ArrayUtils.add(array1, (byte)0);        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 0}, newArray));        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(array1, (byte)4);        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 4}, newArray));        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());            }        public void testAddObjectArrayChar() {        char[] newArray;        newArray = ArrayUtils.add((char[])null, (char)0);        assertTrue(Arrays.equals(new char[]{0}, newArray));        assertEquals(Character.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((char[])null, (char)1);        assertTrue(Arrays.equals(new char[]{1}, newArray));        assertEquals(Character.TYPE, newArray.getClass().getComponentType());        char[] array1 = new char[]{1, 2, 3};        newArray = ArrayUtils.add(array1, (char)0);        assertTrue(Arrays.equals(new char[]{1, 2, 3, 0}, newArray));        assertEquals(Character.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(array1, (char)4);        assertTrue(Arrays.equals(new char[]{1, 2, 3, 4}, newArray));        assertEquals(Character.TYPE, newArray.getClass().getComponentType());            }        public void testAddObjectArrayDouble() {        double[] newArray;        newArray = ArrayUtils.add((double[])null, 0);        assertTrue(Arrays.equals(new double[]{0}, newArray));        assertEquals(Double.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((double[])null, 1);        assertTrue(Arrays.equals(new double[]{1}, newArray));        assertEquals(Double.TYPE, newArray.getClass().getComponentType());        double[] array1 = new double[]{1, 2, 3};        newArray = ArrayUtils.add(array1, 0);        assertTrue(Arrays.equals(new double[]{1, 2, 3, 0}, newArray));        assertEquals(Double.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(array1, 4);        assertTrue(Arrays.equals(new double[]{1, 2, 3, 4}, newArray));        assertEquals(Double.TYPE, newArray.getClass().getComponentType());            }        public void testAddObjectArrayFloat() {        float[] newArray;        newArray = ArrayUtils.add((float[])null, 0);        assertTrue(Arrays.equals(new float[]{0}, newArray));        assertEquals(Float.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((float[])null, 1);        assertTrue(Arrays.equals(new float[]{1}, newArray));        assertEquals(Float.TYPE, newArray.getClass().getComponentType());        float[] array1 = new float[]{1, 2, 3};        newArray = ArrayUtils.add(array1, 0);        assertTrue(Arrays.equals(new float[]{1, 2, 3, 0}, newArray));        assertEquals(Float.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(array1, 4);        assertTrue(Arrays.equals(new float[]{1, 2, 3, 4}, newArray));        assertEquals(Float.TYPE, newArray.getClass().getComponentType());            }        public void testAddObjectArrayInt() {        int[] newArray;        newArray = ArrayUtils.add((int[])null, 0);        assertTrue(Arrays.equals(new int[]{0}, newArray));        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((int[])null, 1);        assertTrue(Arrays.equals(new int[]{1}, newArray));        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());        int[] array1 = new int[]{1, 2, 3};        newArray = ArrayUtils.add(array1, 0);        assertTrue(Arrays.equals(new int[]{1, 2, 3, 0}, newArray));        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(array1, 4);        assertTrue(Arrays.equals(new int[]{1, 2, 3, 4}, newArray));        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());            }        public void testAddObjectArrayLong() {        long[] newArray;        newArray = ArrayUtils.add((long[])null, 0);        assertTrue(Arrays.equals(new long[]{0}, newArray));        assertEquals(Long.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((long[])null, 1);        assertTrue(Arrays.equals(new long[]{1}, newArray));        assertEquals(Long.TYPE, newArray.getClass().getComponentType());        long[] array1 = new long[]{1, 2, 3};        newArray = ArrayUtils.add(array1, 0);        assertTrue(Arrays.equals(new long[]{1, 2, 3, 0}, newArray));        assertEquals(Long.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(array1, 4);        assertTrue(Arrays.equals(new long[]{1, 2, 3, 4}, newArray));        assertEquals(Long.TYPE, newArray.getClass().getComponentType());            }        public void testAddObjectArrayShort() {        short[] newArray;        newArray = ArrayUtils.add((short[])null, (short)0);        assertTrue(Arrays.equals(new short[]{0}, newArray));        assertEquals(Short.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((short[])null, (short)1);        assertTrue(Arrays.equals(new short[]{1}, newArray));        assertEquals(Short.TYPE, newArray.getClass().getComponentType());        short[] array1 = new short[]{1, 2, 3};        newArray = ArrayUtils.add(array1, (short)0);        assertTrue(Arrays.equals(new short[]{1, 2, 3, 0}, newArray));        assertEquals(Short.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(array1, (short)4);        assertTrue(Arrays.equals(new short[]{1, 2, 3, 4}, newArray));        assertEquals(Short.TYPE, newArray.getClass().getComponentType());            }        public void testAddObjectArrayObject() {        Object[] newArray;        newArray = ArrayUtils.add((Object[])null, null);        assertTrue(Arrays.equals((new Object[]{null}), newArray));        assertEquals(Object.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((Object[])null, "a");        assertTrue(Arrays.equals((new String[]{"a"}), newArray));        assertTrue(Arrays.equals((new Object[]{"a"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        String[] stringArray1 = new String[]{"a", "b", "c"};        newArray = ArrayUtils.add(stringArray1, null);        assertTrue(Arrays.equals((new String[]{"a", "b", "c", null}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(stringArray1, "d");        assertTrue(Arrays.equals((new String[]{"a", "b", "c", "d"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());    }        public void testAddObjectArrayToObjectArray() {        assertNull(ArrayUtils.addAll(null, null));        Object[] newArray;        String[] stringArray1 = new String[]{"a", "b", "c"};        String[] stringArray2 = new String[]{"1", "2", "3"};        newArray = ArrayUtils.addAll(stringArray1, null);        assertNotSame(stringArray1, newArray);        assertTrue(Arrays.equals(stringArray1, newArray));        assertTrue(Arrays.equals((new String[]{"a", "b", "c"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.addAll(null, stringArray2);        assertNotSame(stringArray2, newArray);        assertTrue(Arrays.equals(stringArray2, newArray));        assertTrue(Arrays.equals((new String[]{"1", "2", "3"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.addAll(stringArray1, stringArray2);        assertTrue(Arrays.equals((new String[]{"a", "b", "c", "1", "2", "3"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));        assertTrue(Arrays.equals((new String[]{}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));        assertTrue(Arrays.equals((new String[]{}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));        assertTrue(Arrays.equals((new String[]{}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        String[] stringArrayNull = new String []{null};        newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);                assertTrue(Arrays.equals((new String[]{null, null}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());    }            public void testAddObjectAtIndex() {        Object[] newArray;        newArray = ArrayUtils.add((Object[])null, 0, null);        assertTrue(Arrays.equals((new Object[]{null}), newArray));        assertEquals(Object.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((Object[])null, 0, "a");        assertTrue(Arrays.equals((new String[]{"a"}), newArray));        assertTrue(Arrays.equals((new Object[]{"a"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        String[] stringArray1 = new String[]{"a", "b", "c"};        newArray = ArrayUtils.add(stringArray1, 0, null);        assertTrue(Arrays.equals((new String[]{null, "a", "b", "c"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(stringArray1, 1, null);        assertTrue(Arrays.equals((new String[]{"a", null, "b", "c"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(stringArray1, 3, null);        assertTrue(Arrays.equals((new String[]{"a", "b", "c", null}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(stringArray1, 3, "d");        assertTrue(Arrays.equals((new String[]{"a", "b", "c", "d"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());                assertEquals(String.class, newArray.getClass().getComponentType());        Object[] o = new Object[] {"1", "2", "4"};        Object[] result = ArrayUtils.add(o, 2, "3");        Object[] result2 = ArrayUtils.add(o, 3, "5");                assertNotNull(result);        assertEquals(4, result.length);        assertEquals("1", result[0]);        assertEquals("2", result[1]);        assertEquals("3", result[2]);        assertEquals("4", result[3]);        assertNotNull(result2);        assertEquals(4, result2.length);        assertEquals("1", result2[0]);        assertEquals("2", result2[1]);        assertEquals("4", result2[2]);        assertEquals("5", result2[3]);    }    }
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.StringUtils} - Substring methods * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Phil Steitz * @version $Id: StringUtilsSubstringTest.java,v 1.14 2004/02/18 23:06:19 ggregory Exp $ */public class StringUtilsSubstringTest extends TestCase {    private static final String FOO = "foo";    private static final String BAR = "bar";    private static final String BAZ = "baz";    private static final String FOOBAR = "foobar";    private static final String SENTENCE = "foo bar baz";    public StringUtilsSubstringTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(StringUtilsSubstringTest.class);    suite.setName("StringUtilsSubstring Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testSubstring_StringInt() {        assertEquals(null, StringUtils.substring(null, 0));        assertEquals("", StringUtils.substring("", 0));        assertEquals("", StringUtils.substring("", 2));                assertEquals("", StringUtils.substring(SENTENCE, 80));        assertEquals(BAZ, StringUtils.substring(SENTENCE, 8));        assertEquals(BAZ, StringUtils.substring(SENTENCE, -3));        assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0));        assertEquals("abc", StringUtils.substring("abc", -4));        assertEquals("abc", StringUtils.substring("abc", -3));        assertEquals("bc", StringUtils.substring("abc", -2));        assertEquals("c", StringUtils.substring("abc", -1));        assertEquals("abc", StringUtils.substring("abc", 0));        assertEquals("bc", StringUtils.substring("abc", 1));        assertEquals("c", StringUtils.substring("abc", 2));        assertEquals("", StringUtils.substring("abc", 3));        assertEquals("", StringUtils.substring("abc", 4));    }        public void testSubstring_StringIntInt() {        assertEquals(null, StringUtils.substring(null, 0, 0));        assertEquals(null, StringUtils.substring(null, 1, 2));        assertEquals("", StringUtils.substring("", 0, 0));        assertEquals("", StringUtils.substring("", 1, 2));        assertEquals("", StringUtils.substring("", -2, -1));                assertEquals("", StringUtils.substring(SENTENCE, 8, 6));        assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3));        assertEquals("o", StringUtils.substring(SENTENCE, -9, 3));        assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8));        assertEquals("o", StringUtils.substring(SENTENCE, -9, -8));        assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80));        assertEquals("", StringUtils.substring(SENTENCE, 2, 2));        assertEquals("b",StringUtils.substring("abc", -2, -1));    }               public void testLeft_String() {        assertSame(null, StringUtils.left(null, -1));        assertSame(null, StringUtils.left(null, 0));        assertSame(null, StringUtils.left(null, 2));                assertEquals("", StringUtils.left("", -1));        assertEquals("", StringUtils.left("", 0));        assertEquals("", StringUtils.left("", 2));                assertEquals("", StringUtils.left(FOOBAR, -1));        assertEquals("", StringUtils.left(FOOBAR, 0));        assertEquals(FOO, StringUtils.left(FOOBAR, 3));        assertSame(FOOBAR, StringUtils.left(FOOBAR, 80));    }        public void testRight_String() {        assertSame(null, StringUtils.right(null, -1));        assertSame(null, StringUtils.right(null, 0));        assertSame(null, StringUtils.right(null, 2));                assertEquals("", StringUtils.right("", -1));        assertEquals("", StringUtils.right("", 0));        assertEquals("", StringUtils.right("", 2));                assertEquals("", StringUtils.right(FOOBAR, -1));        assertEquals("", StringUtils.right(FOOBAR, 0));        assertEquals(BAR, StringUtils.right(FOOBAR, 3));        assertSame(FOOBAR, StringUtils.right(FOOBAR, 80));    }        public void testMid_String() {        assertSame(null, StringUtils.mid(null, -1, 0));        assertSame(null, StringUtils.mid(null, 0, -1));        assertSame(null, StringUtils.mid(null, 3, 0));        assertSame(null, StringUtils.mid(null, 3, 2));                assertEquals("", StringUtils.mid("", 0, -1));        assertEquals("", StringUtils.mid("", 0, 0));        assertEquals("", StringUtils.mid("", 0, 2));                assertEquals("", StringUtils.mid(FOOBAR, 3, -1));        assertEquals("", StringUtils.mid(FOOBAR, 3, 0));        assertEquals("b", StringUtils.mid(FOOBAR, 3, 1));        assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3));        assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3));        assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80));        assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80));        assertEquals("", StringUtils.mid(FOOBAR, 9, 3));        assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3));    }        //-----------------------------------------------------------------------    public void testSubstringBefore_StringString() {        assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX"));        assertEquals(null, StringUtils.substringBefore(null, null));        assertEquals(null, StringUtils.substringBefore(null, ""));        assertEquals(null, StringUtils.substringBefore(null, "XX"));        assertEquals("", StringUtils.substringBefore("", null));        assertEquals("", StringUtils.substringBefore("", ""));        assertEquals("", StringUtils.substringBefore("", "XX"));                assertEquals("foo", StringUtils.substringBefore("foo", null));        assertEquals("foo", StringUtils.substringBefore("foo", "b"));        assertEquals("f", StringUtils.substringBefore("foot", "o"));        assertEquals("", StringUtils.substringBefore("abc", "a"));        assertEquals("a", StringUtils.substringBefore("abcba", "b"));        assertEquals("ab", StringUtils.substringBefore("abc", "c"));        assertEquals("", StringUtils.substringBefore("abc", ""));    }        public void testSubstringAfter_StringString() {        assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX"));                assertEquals(null, StringUtils.substringAfter(null, null));        assertEquals(null, StringUtils.substringAfter(null, ""));        assertEquals(null, StringUtils.substringAfter(null, "XX"));        assertEquals("", StringUtils.substringAfter("", null));        assertEquals("", StringUtils.substringAfter("", ""));        assertEquals("", StringUtils.substringAfter("", "XX"));                assertEquals("", StringUtils.substringAfter("foo", null));        assertEquals("ot", StringUtils.substringAfter("foot", "o"));        assertEquals("bc", StringUtils.substringAfter("abc", "a"));        assertEquals("cba", StringUtils.substringAfter("abcba", "b"));        assertEquals("", StringUtils.substringAfter("abc", "c"));        assertEquals("abc", StringUtils.substringAfter("abc", ""));        assertEquals("", StringUtils.substringAfter("abc", "d"));    }    public void testSubstringBeforeLast_StringString() {        assertEquals("fooXXbar", StringUtils.substringBeforeLast("fooXXbarXXbaz", "XX"));        assertEquals(null, StringUtils.substringBeforeLast(null, null));        assertEquals(null, StringUtils.substringBeforeLast(null, ""));        assertEquals(null, StringUtils.substringBeforeLast(null, "XX"));        assertEquals("", StringUtils.substringBeforeLast("", null));        assertEquals("", StringUtils.substringBeforeLast("", ""));        assertEquals("", StringUtils.substringBeforeLast("", "XX"));        assertEquals("foo", StringUtils.substringBeforeLast("foo", null));        assertEquals("foo", StringUtils.substringBeforeLast("foo", "b"));        assertEquals("fo", StringUtils.substringBeforeLast("foo", "o"));        assertEquals("abc\r\n", StringUtils.substringBeforeLast("abc\r\n", "d"));        assertEquals("abc", StringUtils.substringBeforeLast("abcdabc", "d"));        assertEquals("abcdabc", StringUtils.substringBeforeLast("abcdabcd", "d"));        assertEquals("a", StringUtils.substringBeforeLast("abc", "b"));        assertEquals("abc ", StringUtils.substringBeforeLast("abc \n", "\n"));        assertEquals("a", StringUtils.substringBeforeLast("a", null));        assertEquals("a", StringUtils.substringBeforeLast("a", ""));        assertEquals("", StringUtils.substringBeforeLast("a", "a"));    }        public void testSubstringAfterLast_StringString() {        assertEquals("baz", StringUtils.substringAfterLast("fooXXbarXXbaz", "XX"));        assertEquals(null, StringUtils.substringAfterLast(null, null));        assertEquals(null, StringUtils.substringAfterLast(null, ""));        assertEquals(null, StringUtils.substringAfterLast(null, "XX"));        assertEquals("", StringUtils.substringAfterLast("", null));        assertEquals("", StringUtils.substringAfterLast("", ""));        assertEquals("", StringUtils.substringAfterLast("", "a"));        assertEquals("", StringUtils.substringAfterLast("foo", null));        assertEquals("", StringUtils.substringAfterLast("foo", "b"));        assertEquals("t", StringUtils.substringAfterLast("foot", "o"));        assertEquals("bc", StringUtils.substringAfterLast("abc", "a"));        assertEquals("a", StringUtils.substringAfterLast("abcba", "b"));        assertEquals("", StringUtils.substringAfterLast("abc", "c"));        assertEquals("", StringUtils.substringAfterLast("", "d"));        assertEquals("", StringUtils.substringAfterLast("abc", ""));    }                    //-----------------------------------------------------------------------    public void testSubstringBetween_StringString() {        assertEquals(null, StringUtils.substringBetween(null, "tag"));        assertEquals("", StringUtils.substringBetween("", ""));        assertEquals(null, StringUtils.substringBetween("", "abc"));        assertEquals("", StringUtils.substringBetween("    ", " "));        assertEquals(null, StringUtils.substringBetween("abc", null));        assertEquals("", StringUtils.substringBetween("abc", ""));        assertEquals(null, StringUtils.substringBetween("abc", "a"));        assertEquals("bc", StringUtils.substringBetween("abca", "a"));        assertEquals("bc", StringUtils.substringBetween("abcabca", "a"));        assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n"));    }                public void testSubstringBetween_StringStringString() {        assertEquals(null, StringUtils.substringBetween(null, "", ""));        assertEquals("", StringUtils.substringBetween("", "", ""));        assertEquals("", StringUtils.substringBetween("    ", " ", "  "));        assertEquals("bar", StringUtils.substringBetween("<foo>bar</foo>", "<foo>", "</foo>") );    }    //-----------------------------------------------------------------------    public void testCountMatches_String() {        assertEquals(0, StringUtils.countMatches(null, null));        assertEquals(0, StringUtils.countMatches("blah", null));        assertEquals(0, StringUtils.countMatches(null, "DD"));        assertEquals(0, StringUtils.countMatches("x", ""));        assertEquals(0, StringUtils.countMatches("", ""));        assertEquals(3,              StringUtils.countMatches("one long someone sentence of one", "one"));        assertEquals(0,              StringUtils.countMatches("one long someone sentence of one", "two"));        assertEquals(4,              StringUtils.countMatches("oooooooooooo", "ooo"));    }    public void testGetNestedString_StringString() {        assertEquals(null, StringUtils.getNestedString(null, "tag"));        assertEquals("", StringUtils.getNestedString("", ""));        assertEquals(null, StringUtils.getNestedString("", "abc"));        assertEquals("", StringUtils.getNestedString("    ", " "));        assertEquals(null, StringUtils.getNestedString("abc", null));        assertEquals("", StringUtils.getNestedString("abc", ""));        assertEquals(null, StringUtils.getNestedString("abc", "a"));        assertEquals("bc", StringUtils.getNestedString("abca", "a"));        assertEquals("bc", StringUtils.getNestedString("abcabca", "a"));        assertEquals("bar", StringUtils.getNestedString("\nbar\n", "\n"));    }                public void testGetNestedString_StringStringString() {        assertEquals(null, StringUtils.getNestedString(null, "", ""));        assertEquals("", StringUtils.getNestedString("", "", ""));        assertEquals("", StringUtils.getNestedString("    ", " ", "  "));        assertEquals("bar", StringUtils.getNestedString("<foo>bar</foo>", "<foo>", "</foo>") );    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Unit tests for WordUtils class. *  * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Henri Yandell * @author Stephen Colebourne * @version $Id: WordUtilsTest.java,v 1.7 2004/06/03 03:49:47 bayard Exp $ */public class WordUtilsTest extends TestCase {    public WordUtilsTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(WordUtilsTest.class);        suite.setName("WordUtilsTests");        return suite;    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new WordUtils());        Constructor[] cons = WordUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(WordUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(WordUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testWrap_StringInt() {        assertEquals(null, WordUtils.wrap(null, 20));        assertEquals(null, WordUtils.wrap(null, -1));                assertEquals("", WordUtils.wrap("", 20));        assertEquals("", WordUtils.wrap("", -1));                // normal        String systemNewLine = System.getProperty("line.separator");        String input = "Here is one line of text that is going to be wrapped after 20 columns.";        String expected = "Here is one line of" + systemNewLine + "text that is going"             + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns.";        assertEquals(expected, WordUtils.wrap(input, 20));                // long word at end        input = "Click here to jump to the jakarta website - http://jakarta.apache.org";        expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine             + "website -" + systemNewLine + "http://jakarta.apache.org";        assertEquals(expected, WordUtils.wrap(input, 20));                // long word in middle        input = "Click here, http://jakarta.apache.org, to jump to the jakarta website";        expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine             + "to jump to the" + systemNewLine + "jakarta website";        assertEquals(expected, WordUtils.wrap(input, 20));    }        public void testWrap_StringIntStringBoolean() {        assertEquals(null, WordUtils.wrap(null, 20, "\n", false));        assertEquals(null, WordUtils.wrap(null, 20, "\n", true));        assertEquals(null, WordUtils.wrap(null, 20, null, true));        assertEquals(null, WordUtils.wrap(null, 20, null, false));        assertEquals(null, WordUtils.wrap(null, -1, null, true));        assertEquals(null, WordUtils.wrap(null, -1, null, false));                assertEquals("", WordUtils.wrap("", 20, "\n", false));        assertEquals("", WordUtils.wrap("", 20, "\n", true));        assertEquals("", WordUtils.wrap("", 20, null, false));        assertEquals("", WordUtils.wrap("", 20, null, true));        assertEquals("", WordUtils.wrap("", -1, null, false));        assertEquals("", WordUtils.wrap("", -1, null, true));                // normal        String input = "Here is one line of text that is going to be wrapped after 20 columns.";        String expected = "Here is one line of\ntext that is going\nto be wrapped after\n20 columns.";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));        assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));        // unusual newline char        input = "Here is one line of text that is going to be wrapped after 20 columns.";        expected = "Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns.";        assertEquals(expected, WordUtils.wrap(input, 20, "<br />", false));        assertEquals(expected, WordUtils.wrap(input, 20, "<br />", true));        // short line length        input = "Here is one line";        expected = "Here\nis one\nline";        assertEquals(expected, WordUtils.wrap(input, 6, "\n", false));        expected = "Here\nis\none\nline";        assertEquals(expected, WordUtils.wrap(input, 2, "\n", false));        assertEquals(expected, WordUtils.wrap(input, -1, "\n", false));        // system newline char        String systemNewLine = System.getProperty("line.separator");        input = "Here is one line of text that is going to be wrapped after 20 columns.";        expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine             + "to be wrapped after" + systemNewLine + "20 columns.";        assertEquals(expected, WordUtils.wrap(input, 20, null, false));        assertEquals(expected, WordUtils.wrap(input, 20, null, true));        // with extra spaces        input = " Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns.";        expected = "Here:  is  one  line\nof  text  that  is \ngoing  to  be \nwrapped  after  20 \ncolumns.";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));        assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));                // with tab        input = "Here is\tone line of text that is going to be wrapped after 20 columns.";        expected = "Here is\tone line of\ntext that is going\nto be wrapped after\n20 columns.";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));        assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));                // with tab at wrapColumn        input = "Here is one line of\ttext that is going to be wrapped after 20 columns.";        expected = "Here is one line\nof\ttext that is\ngoing to be wrapped\nafter 20 columns.";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));        assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));                // difference because of long word        input = "Click here to jump to the jakarta website - http://jakarta.apache.org";        expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apache.org";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));        expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apach\ne.org";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));                // difference because of long word in middle        input = "Click here, http://jakarta.apache.org, to jump to the jakarta website";        expected = "Click here,\nhttp://jakarta.apache.org,\nto jump to the\njakarta website";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));        expected = "Click here,\nhttp://jakarta.apach\ne.org, to jump to\nthe jakarta website";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));//        System.err.println(expected);//        System.err.println(WordUtils.wrap(input, 20, "\n", false));    }        //-----------------------------------------------------------------------    public void testCapitalize_String() {        assertEquals(null, WordUtils.capitalize(null));        assertEquals("", WordUtils.capitalize(""));        assertEquals("  ", WordUtils.capitalize("  "));                assertEquals("I", WordUtils.capitalize("I") );        assertEquals("I", WordUtils.capitalize("i") );        assertEquals("I Am Here 123", WordUtils.capitalize("i am here 123") );        assertEquals("I Am Here 123", WordUtils.capitalize("I Am Here 123") );        assertEquals("I Am HERE 123", WordUtils.capitalize("i am HERE 123") );        assertEquals("I AM HERE 123", WordUtils.capitalize("I AM HERE 123") );    }        public void testCapitalizeWithDelimiters_String() {        assertEquals(null, WordUtils.capitalize(null, null));        assertEquals("", WordUtils.capitalize("", new char[0]));        assertEquals("  ", WordUtils.capitalize("  ", new char[0]));                char[] chars = new char[] { '-', '+', ' ', '@' };        assertEquals("I", WordUtils.capitalize("I", chars) );        assertEquals("I", WordUtils.capitalize("i", chars) );        assertEquals("I-Am Here+123", WordUtils.capitalize("i-am here+123", chars) );        assertEquals("I Am+Here-123", WordUtils.capitalize("I Am+Here-123", chars) );        assertEquals("I+Am-HERE 123", WordUtils.capitalize("i+am-HERE 123", chars) );        assertEquals("I-AM HERE+123", WordUtils.capitalize("I-AM HERE+123", chars) );    }    public void testCapitalizeFully_String() {        assertEquals(null, WordUtils.capitalizeFully(null));        assertEquals("", WordUtils.capitalizeFully(""));        assertEquals("  ", WordUtils.capitalizeFully("  "));                assertEquals("I", WordUtils.capitalizeFully("I") );        assertEquals("I", WordUtils.capitalizeFully("i") );        assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123") );        assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123") );        assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123") );        assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123") );    }        public void testCapitalizeFullyWithDelimiters_String() {        assertEquals(null, WordUtils.capitalizeFully(null, null));        assertEquals("", WordUtils.capitalizeFully("", new char[0]));        assertEquals("  ", WordUtils.capitalizeFully("  ", new char[0]));                char[] chars = new char[] { '-', '+', ' ', '@' };        assertEquals("I", WordUtils.capitalizeFully("I", chars) );        assertEquals("I", WordUtils.capitalizeFully("i", chars) );        assertEquals("I-Am Here+123", WordUtils.capitalizeFully("i-am here+123", chars) );        assertEquals("I Am+Here-123", WordUtils.capitalizeFully("I Am+Here-123", chars) );        assertEquals("I+Am-Here 123", WordUtils.capitalizeFully("i+am-HERE 123", chars) );        assertEquals("I-Am Here+123", WordUtils.capitalizeFully("I-AM HERE+123", chars) );    }    public void testUncapitalize_String() {        assertEquals(null, WordUtils.uncapitalize(null));        assertEquals("", WordUtils.uncapitalize(""));        assertEquals("  ", WordUtils.uncapitalize("  "));                assertEquals("i", WordUtils.uncapitalize("I") );        assertEquals("i", WordUtils.uncapitalize("i") );        assertEquals("i am here 123", WordUtils.uncapitalize("i am here 123") );        assertEquals("i am here 123", WordUtils.uncapitalize("I Am Here 123") );        assertEquals("i am hERE 123", WordUtils.uncapitalize("i am HERE 123") );        assertEquals("i aM hERE 123", WordUtils.uncapitalize("I AM HERE 123") );    }        public void testUncapitalizeWithDelimiters_String() {        assertEquals(null, WordUtils.uncapitalize(null, null));        assertEquals("", WordUtils.uncapitalize("", new char[0]));        assertEquals("  ", WordUtils.uncapitalize("  ", new char[0]));                char[] chars = new char[] { '-', '+', ' ', '@' };        assertEquals("i", WordUtils.uncapitalize("I", chars) );        assertEquals("i", WordUtils.uncapitalize("i", chars) );        assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) );        assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) );        assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars) );        assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars) );    }        public void testSwapCase_String() {        assertEquals(null, WordUtils.swapCase(null));        assertEquals("", WordUtils.swapCase(""));        assertEquals("  ", WordUtils.swapCase("  "));                assertEquals("i", WordUtils.swapCase("I") );        assertEquals("I", WordUtils.swapCase("i") );        assertEquals("I AM HERE 123", WordUtils.swapCase("i am here 123") );        assertEquals("i aM hERE 123", WordUtils.swapCase("I Am Here 123") );        assertEquals("I AM here 123", WordUtils.swapCase("i am HERE 123") );        assertEquals("i am here 123", WordUtils.swapCase("I AM HERE 123") );    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;import java.util.Map;import java.util.HashMap;/** * Unit tests {@link org.apache.commons.lang.Interpolation}. * * @author Henri Yandell * @author Ken Fitzpatrick * @version $Id: InterpolationTest.java,v 1.1 2004/07/04 04:51:25 bayard Exp $ */public class InterpolationTest extends TestCase {    private static final String INPUT_TEMPLATE     = "The ${animal} jumped over the ${target}.";    private static final String EXPECTED_RESULTS_1 = "The quick brown fox jumped over the lazy dog.";    private static final String EXPECTED_RESULTS_2 = "The cow jumped over the moon.";    public InterpolationTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(InterpolationTest.class);    suite.setName("Interpolation Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    public void testSimpleVariableSubstitution() {        // test case: "The quick brown fox jumped over the lazy dog."        Map valuesMap = new HashMap();        valuesMap.put( "animal", "quick brown fox" );        valuesMap.put( "target", "lazy dog" );        assertEquals( "Test case 1: simple variable substitution", EXPECTED_RESULTS_1,            Interpolation.interpolate( INPUT_TEMPLATE, valuesMap) );        // test case: "The cow jumped over the moon."        valuesMap = new HashMap();        valuesMap.put( "animal", "cow" );        valuesMap.put( "target", "moon" );        assertEquals( "Test case 2: template reuse, different results" ,EXPECTED_RESULTS_2,            Interpolation.interpolate( INPUT_TEMPLATE, valuesMap) );    }    public void testNullMap() {        // negative test case: Map == null        Map valuesMap = null;        assertEquals( "Test case 3: Map == null", INPUT_TEMPLATE,            Interpolation.interpolate( INPUT_TEMPLATE, valuesMap) );    }    public void testEmptyMap() {        // negative test case: Map.isEmpty()        Map valuesMap = new HashMap();        assertEquals( "Test case 4: Map.isEmpty()", INPUT_TEMPLATE,            Interpolation.interpolate( INPUT_TEMPLATE, valuesMap) );    }    public void testNullTemplate() {        // negative test case: INPUT_TEMPLATE == null        Map valuesMap = new HashMap();        valuesMap.put( "animal", "cow" );        valuesMap.put( "target", "moon" );        assertNull( "Test case 5: template == null",            Interpolation.interpolate( null, valuesMap) );    }    public void testRecursive() {        // test case: process repeatedly        Map valuesMap = new HashMap();        valuesMap.put( "animal", "${critter}" );        valuesMap.put( "target", "${pet}" );        valuesMap.put( "pet", "${petCharacteristic} dog" );        valuesMap.put( "petCharacteristic", "lazy" );        valuesMap.put( "critter", "${critterSpeed} ${critterColor} ${critterType}" );        valuesMap.put( "critterSpeed", "quick" );        valuesMap.put( "critterColor", "brown" );        valuesMap.put( "critterType", "fox" );        assertEquals( "Test case 6: interpolateRepeatedly", EXPECTED_RESULTS_1,            Interpolation.interpolateRepeatedly( INPUT_TEMPLATE, valuesMap ) );        // test case: process repeatedly        valuesMap = new HashMap();        valuesMap.put( "animal", "cow" );        valuesMap.put( "target", "${celestialObject}" );        valuesMap.put( "celestialObject", "moon" );        assertEquals( "Test case 8: interpolateRepeatedly", EXPECTED_RESULTS_2,            Interpolation.interpolateRepeatedly( INPUT_TEMPLATE, valuesMap ) );    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests for {@link StringEscapeUtils}. * * @author of original StringUtilsTest.testEscape = ? * @author <a href="mailto:alex@purpletech.com">Alexander Day Chaffee</a> * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> * @version $Id: EntitiesTest.java,v 1.9 2004/02/18 23:06:19 ggregory Exp $ */public class EntitiesTest extends TestCase{    public EntitiesTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(EntitiesTest.class);        suite.setName("EntitiesTest Tests");        return suite;    }    Entities entities;    public void setUp()    {        entities = new Entities();        entities.addEntity("foo", 161);        entities.addEntity("bar", 162);    }    public void testEscapeNamedEntity() throws Exception    {        assertEquals("&foo;", entities.escape("\u00A1"));        assertEquals("x&foo;", entities.escape("x\u00A1"));        assertEquals("&foo;x", entities.escape("\u00A1x"));        assertEquals("x&foo;x", entities.escape("x\u00A1x"));        assertEquals("&foo;&bar;", entities.escape("\u00A1\u00A2"));    }    public void testUnescapeNamedEntity() throws Exception    {        assertEquals("\u00A1", entities.unescape("&foo;"));        assertEquals("x\u00A1", entities.unescape("x&foo;"));        assertEquals("\u00A1x", entities.unescape("&foo;x"));        assertEquals("x\u00A1x", entities.unescape("x&foo;x"));        assertEquals("\u00A1\u00A2", entities.unescape("&foo;&bar;"));    }    public void testUnescapeUnknownEntity() throws Exception    {        assertEquals("&zzzz;", entities.unescape("&zzzz;"));    }    public void testAddEntitiesArray() throws Exception    {        String[][] array = {{"foo", "100"}, {"bar", "101"}};        Entities e = new Entities();        e.addEntities(array);        assertEquals("foo", e.entityName(100));        assertEquals("bar", e.entityName(101));        assertEquals(100, e.entityValue("foo"));        assertEquals(101, e.entityValue("bar"));    }    public void testEntitiesXmlObject() throws Exception    {        assertEquals("gt", Entities.XML.entityName('>'));        assertEquals('>', Entities.XML.entityValue("gt"));        assertEquals(-1, Entities.XML.entityValue("xyzzy"));    }    public void testArrayIntMap() throws Exception    {        Entities.ArrayEntityMap map = new Entities.ArrayEntityMap(2);        checkSomeEntityMap(map);    }    public void testTreeIntMap() throws Exception    {        Entities.EntityMap map = new Entities.TreeEntityMap();        checkSomeEntityMap(map);    }    public void testHashIntMap() throws Exception    {        Entities.EntityMap map = new Entities.HashEntityMap();        checkSomeEntityMap(map);    }    public void testBinaryIntMap() throws Exception    {        Entities.BinaryEntityMap map = new Entities.BinaryEntityMap(2);        checkSomeEntityMap(map);    }    public void testPrimitiveIntMap() throws Exception    {        Entities.PrimitiveEntityMap map = new Entities.PrimitiveEntityMap();        checkSomeEntityMap(map);    }    private void checkSomeEntityMap(Entities.EntityMap map) {        map.add("foo", 1);        assertEquals(1, map.value("foo"));        assertEquals("foo", map.name(1));        map.add("bar", 2);        map.add("baz", 3);        assertEquals(3, map.value("baz"));        assertEquals("baz", map.name(3));    }    public void testHtml40Nbsp() throws Exception    {        assertEquals("&nbsp;", Entities.HTML40.escape("\u00A0"));        Entities e = new Entities();        e.map = new Entities.PrimitiveEntityMap();        Entities.fillWithHtml40Entities(e);        assertEquals("&nbsp;", e.escape("\u00A0"));    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Test cases for the {@link NumberRange} class. * * @author <a href="mailto:chrise@esha.com">Christopher Elkins</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Tim O'Brien * @version $Revision: 1.8 $ $Date: 2004/02/18 23:22:29 $ */public final class NumberRangeTest extends TestCase {    private NumberRange tenToTwenty;    private NumberRange fifteenToTwentyFive;    private NumberRange fiveToNine;    private Number five;    private Number nine;    private Number ten;    private Number fifteen;    private Number twenty;    private Number twentyFive;    public NumberRangeTest(String name) {        super(name);    }    public void setUp() {        five       = new Integer(5);        nine      = new Double(9.0);        ten        = new Integer(10);        fifteen    = new Integer(15);        twenty     = new Integer(20);        twentyFive = new Integer(25);        tenToTwenty = new NumberRange(ten, twenty);        fifteenToTwentyFive = new NumberRange( fifteen, twentyFive);        fiveToNine = new NumberRange( five, nine );    }    public static Test suite() {        TestSuite suite = new TestSuite(NumberRangeTest.class);        suite.setName("NumberRange Tests");        return suite;    }    public void testMaxMin() {        boolean expected = true;        boolean result = tenToTwenty.getMaximum().equals(twenty);        assertEquals(expected, result);        expected = true;        result = tenToTwenty.getMinimum().equals(ten);        assertEquals(expected, result);    }    public void testEquals() {        boolean expected = false;        boolean result = tenToTwenty.equals(new NumberRange(five, ten));        assertEquals(expected, result);        expected = true;        result = tenToTwenty.equals(new NumberRange(ten, twenty));        assertEquals(expected, result);        expected = false;        result = tenToTwenty.equals(new NumberRange(ten, fifteen));        assertEquals(expected, result);        expected = false;        result = tenToTwenty.equals(new NumberRange(fifteen, twenty));        assertEquals(expected, result);    }        public void testEqualsWithOtherObject() {        assertEquals( "A NumberRange should not equals a String object", false, fiveToNine.equals("TEST"));    }    public void testEqualsWithSameReference() {        assertEquals( "A NumberRange should equal itself", true, fiveToNine.equals(fiveToNine));    }    public void testEqualsNull() {        assertEquals( "A NumberRange should not equal null", false, fiveToNine.equals(null));    }    public void testHashCode() {        NumberRange nr = new NumberRange( new Integer(5), new Double(9.0));        assertEquals( "The hashCode of 5-9 should equals the hashcode of another NumberRange of the same min/max",                                fiveToNine.hashCode(), nr.hashCode());        assertTrue( "The hashCode of 10-20 should not equal the hashCode of 5-9",                             fiveToNine.hashCode() != tenToTwenty.hashCode());                            }    public void testIncludesNumber() {        boolean expected = false;        boolean result = tenToTwenty.includesNumber(five);        assertEquals(expected, result);        expected = true;        result = tenToTwenty.includesNumber(ten);        assertEquals(expected, result);        expected = true;        result = tenToTwenty.includesNumber(fifteen);        assertEquals(expected, result);        expected = true;        result = tenToTwenty.includesNumber(twenty);        assertEquals(expected, result);        expected = false;        result = tenToTwenty.includesNumber(twentyFive);        assertEquals(expected, result);    }    public void testIncludesNumberNull() {        boolean result = tenToTwenty.includesNumber(null);        assertEquals("Includes number should return false for null values", false, result);    }    public void testIncludesRange() {        boolean expected = false;        boolean result = tenToTwenty.includesRange(new NumberRange(five, ten));        assertEquals(expected, result);        expected = false;        result = tenToTwenty.includesRange(new NumberRange(five, fifteen));        assertEquals(expected, result);        expected = true;        result = tenToTwenty.includesRange(new NumberRange(ten, fifteen));        assertEquals(expected, result);        expected = true;        result = tenToTwenty.includesRange(new NumberRange(ten, twenty));        assertEquals(expected, result);        expected = true;        result = tenToTwenty.includesRange(new NumberRange(fifteen, twenty));        assertEquals(expected, result);        expected = false;        result =             tenToTwenty.includesRange(new NumberRange(fifteen, twentyFive));        assertEquals(expected, result);        expected = false;        result =             tenToTwenty.includesRange(new NumberRange(twenty, twentyFive));        assertEquals(expected, result);    }    public void testIncludesRangeNull() {        boolean result = tenToTwenty.includesRange(null);        assertEquals("Includes range should return false for null values", false, result);    }    public void testConstructor() {        NumberRange nr = new NumberRange( new Double(2.0));        assertEquals("Unexpected min on NumberRange", 2.0, nr.getMinimum().doubleValue(), Double.MIN_VALUE);        assertEquals("Unexpected max on NumberRange", 2.0, nr.getMaximum().doubleValue(), Double.MIN_VALUE);    }public void testConstructorNullParameters() {try {NumberRange nr = new NumberRange(null);fail("NumberRange(null) did not throw an exception.");} catch (Exception e) {assertTrue("NumberRange(null)", e instanceof NullPointerException);}try {NumberRange nr = new NumberRange(five, null);fail("NumberRange(five, null) did not throw an exception.");} catch (Exception e) {assertTrue("NumberRange(five, null)", e instanceof NullPointerException);}try {NumberRange nr = new NumberRange(null, five);fail("NumberRange(null, five) did not throw an exception.");} catch (Exception e) {assertTrue("NumberRange(null, five)", e instanceof NullPointerException);}}    public void testConstructorWithMaxLessThanMin() {        NumberRange nr = new NumberRange( new Double(2.0), new Double(1.0));        assertEquals("Unexpected min on NumberRange", 2.0, nr.getMinimum().doubleValue(), Double.MIN_VALUE);        assertEquals("Unexpected max on NumberRange", 2.0, nr.getMaximum().doubleValue(), Double.MIN_VALUE);    }    public void testOverlap() {        assertEquals( "5-9 should not overlap 10-20", false, fiveToNine.overlaps( tenToTwenty ));        assertEquals( "10-20 should overlap 15-25", true, tenToTwenty.overlaps( fifteenToTwentyFive ));    }    public void testOverlapNull() {        assertEquals( "5-9 should not overlap null", false, fiveToNine.overlaps( null ));    }    public void testToString() {        String expected = "10-20";        String result = tenToTwenty.toString();        assertEquals(expected, result);    }    public void testToStringWithNegatives() {        String expected = "(-20)-(-10)";        NumberRange nr = new NumberRange( new Integer(-20), new Integer(-10));        String result = nr.toString();        assertEquals(expected, result);        expected = "(-20)-10";        nr = new NumberRange( new Integer(-20), new Integer(10));        result = nr.toString();        assertEquals(expected, result);    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.InputStream;import java.io.ObjectOutputStream;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.HashMap;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.SerializationUtils}. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @version $Id: SerializationUtilsTest.java,v 1.6 2004/02/18 23:06:19 ggregory Exp $ */public class SerializationUtilsTest extends TestCase {    private String iString;    private Integer iInteger;    private HashMap iMap;    public SerializationUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(SerializationUtilsTest.class);    suite.setName("SerializationUtils Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();        iString = "foo";        iInteger = new Integer(7);        iMap = new HashMap();        iMap.put("FOO", iString);        iMap.put("BAR", iInteger);    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new SerializationUtils());        Constructor[] cons = SerializationUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(SerializationUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(SerializationUtils.class.getModifiers()));    }        public void testException() {        SerializationException serEx;        Exception ex = new Exception();                serEx = new SerializationException();        assertSame(null, serEx.getMessage());        assertSame(null, serEx.getCause());                serEx = new SerializationException("Message");        assertSame("Message", serEx.getMessage());        assertSame(null, serEx.getCause());                serEx = new SerializationException(ex);        assertEquals("java.lang.Exception", serEx.getMessage());        assertSame(ex, serEx.getCause());                serEx = new SerializationException("Message", ex);        assertSame("Message", serEx.getMessage());        assertSame(ex, serEx.getCause());    }        //-----------------------------------------------------------------------    public void testSerializeStream() throws Exception {        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();        SerializationUtils.serialize(iMap, streamTest);        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(iMap);        oos.flush();        oos.close();        byte[] testBytes = streamTest.toByteArray();        byte[] realBytes = streamReal.toByteArray();        assertEquals(testBytes.length, realBytes.length);        for (int i = 0; i < realBytes.length; i++) {            assertEquals(realBytes[i], testBytes[i]);        }    }    public void testSerializeStreamUnserializable() throws Exception {        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();        try {            iMap.put(new Object(), new Object());            SerializationUtils.serialize(iMap, streamTest);        } catch (SerializationException ex) {            return;        }        fail();    }    public void testSerializeStreamNullObj() throws Exception {        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();        SerializationUtils.serialize(null, streamTest);        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(null);        oos.flush();        oos.close();        byte[] testBytes = streamTest.toByteArray();        byte[] realBytes = streamReal.toByteArray();        assertEquals(testBytes.length, realBytes.length);        for (int i = 0; i < realBytes.length; i++) {            assertEquals(realBytes[i], testBytes[i]);        }    }    public void testSerializeStreamObjNull() throws Exception {        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();        try {            SerializationUtils.serialize(iMap, null);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testSerializeStreamNullNull() throws Exception {        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();        try {            SerializationUtils.serialize(null, null);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    //-----------------------------------------------------------------------    public void testDeserializeStream() throws Exception {        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(iMap);        oos.flush();        oos.close();        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());        Object test = SerializationUtils.deserialize(inTest);        assertNotNull(test);        assertTrue(test instanceof HashMap);        assertTrue(test != iMap);        HashMap testMap = (HashMap) test;        assertEquals(iString, testMap.get("FOO"));        assertTrue(iString != testMap.get("FOO"));        assertEquals(iInteger, testMap.get("BAR"));        assertTrue(iInteger != testMap.get("BAR"));        assertEquals(iMap, testMap);    }    public void testDeserializeStreamOfNull() throws Exception {        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(null);        oos.flush();        oos.close();        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());        Object test = SerializationUtils.deserialize(inTest);        assertNull(test);    }    public void testDeserializeStreamNull() throws Exception {        try {            SerializationUtils.deserialize((InputStream) null);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testDeserializeStreamBadStream() throws Exception {        try {            SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0]));        } catch (SerializationException ex) {            return;        }        fail();    }    //-----------------------------------------------------------------------    public void testSerializeBytes() throws Exception {        byte[] testBytes = SerializationUtils.serialize(iMap);        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(iMap);        oos.flush();        oos.close();        byte[] realBytes = streamReal.toByteArray();        assertEquals(testBytes.length, realBytes.length);        for (int i = 0; i < realBytes.length; i++) {            assertEquals(realBytes[i], testBytes[i]);        }    }    public void testSerializeBytesUnserializable() throws Exception {        try {            iMap.put(new Object(), new Object());            SerializationUtils.serialize(iMap);        } catch (SerializationException ex) {            return;        }        fail();    }    public void testSerializeBytesNull() throws Exception {        byte[] testBytes = SerializationUtils.serialize(null);        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(null);        oos.flush();        oos.close();        byte[] realBytes = streamReal.toByteArray();        assertEquals(testBytes.length, realBytes.length);        for (int i = 0; i < realBytes.length; i++) {            assertEquals(realBytes[i], testBytes[i]);        }    }    //-----------------------------------------------------------------------    public void testDeserializeBytes() throws Exception {        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(iMap);        oos.flush();        oos.close();        Object test = SerializationUtils.deserialize(streamReal.toByteArray());        assertNotNull(test);        assertTrue(test instanceof HashMap);        assertTrue(test != iMap);        HashMap testMap = (HashMap) test;        assertEquals(iString, testMap.get("FOO"));        assertTrue(iString != testMap.get("FOO"));        assertEquals(iInteger, testMap.get("BAR"));        assertTrue(iInteger != testMap.get("BAR"));        assertEquals(iMap, testMap);    }    public void testDeserializeBytesOfNull() throws Exception {        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(null);        oos.flush();        oos.close();        Object test = SerializationUtils.deserialize(streamReal.toByteArray());        assertNull(test);    }    public void testDeserializeBytesNull() throws Exception {        try {            SerializationUtils.deserialize((byte[]) null);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testDeserializeBytesBadStream() throws Exception {        try {            SerializationUtils.deserialize(new byte[0]);        } catch (SerializationException ex) {            return;        }        fail();    }    //-----------------------------------------------------------------------    public void testClone() throws Exception {        Object test = SerializationUtils.clone(iMap);        assertNotNull(test);        assertTrue(test instanceof HashMap);        assertTrue(test != iMap);        HashMap testMap = (HashMap) test;        assertEquals(iString, testMap.get("FOO"));        assertTrue(iString != testMap.get("FOO"));        assertEquals(iInteger, testMap.get("BAR"));        assertTrue(iInteger != testMap.get("BAR"));        assertEquals(iMap, testMap);    }    public void testCloneNull() throws Exception {        Object test = SerializationUtils.clone(null);        assertNull(test);    }    public void testCloneUnserializable() throws Exception {        try {            iMap.put(new Object(), new Object());            SerializationUtils.clone(iMap);        } catch (SerializationException ex) {            return;        }        fail();    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @author Matthew Hawthorne * @author Stephen Colebourne * @version $Id: NullArgumentExceptionTest.java,v 1.4 2004/02/18 23:06:19 ggregory Exp $ * @see NullArgumentException */public class NullArgumentExceptionTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(NullArgumentExceptionTest.class);    }    public NullArgumentExceptionTest(String testName) {        super(testName);    }    // testConstructor    public void testConstructor_nullInput() {        new NullArgumentException(null);    }    // testGetMessage    public void testGetMessage_nullConstructorInput() {        final Throwable t = new NullArgumentException(null);        assertEquals("null must not be null.", t.getMessage());    }    public void testGetMessage_validConstructorInput() {        final String argName = "name";        final Throwable t = new NullArgumentException(argName);        assertEquals(argName + " must not be null.", t.getMessage());    }} // NullArgumentExceptionTest
/* * Copyright 2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.CharUtils}. * * @author Stephen Colebourne * @version $Id: CharUtilsTest.java,v 1.4 2004/03/10 23:23:46 scolebourne Exp $ */public class CharUtilsTest extends TestCase {    private static final Character CHARACTER_A = new Character('A');    private static final Character CHARACTER_B = new Character('B');    private static final char CHAR_COPY = '\u00a9';        public CharUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {    TestSuite suite = new TestSuite(CharUtilsTest.class);    suite.setName("CharUtils Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new CharUtils());        Constructor[] cons = CharUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(BooleanUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testToCharacterObject_char() {        assertEquals(new Character('a'), CharUtils.toCharacterObject('a'));        assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a'));               for (int i = 0; i < 128; i++) {            Character ch = CharUtils.toCharacterObject((char) i);            Character ch2 = CharUtils.toCharacterObject((char) i);            assertSame(ch, ch2);            assertEquals(i, ch.charValue());        }        for (int i = 128; i < 196; i++) {            Character ch = CharUtils.toCharacterObject((char) i);            Character ch2 = CharUtils.toCharacterObject((char) i);            assertEquals(ch, ch2);            assertTrue(ch != ch2);            assertEquals(i, ch.charValue());            assertEquals(i, ch2.charValue());        }    }        public void testToCharacterObject_String() {        assertEquals(null, CharUtils.toCharacterObject(null));        assertEquals(null, CharUtils.toCharacterObject(""));        assertEquals(new Character('a'), CharUtils.toCharacterObject("a"));        assertEquals(new Character('a'), CharUtils.toCharacterObject("abc"));        assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject("a"));        assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject('a'));    }        //-----------------------------------------------------------------------    public void testToChar_Character() {        assertEquals('A', CharUtils.toChar(CHARACTER_A));        assertEquals('B', CharUtils.toChar(CHARACTER_B));        try {            CharUtils.toChar((Character) null);        } catch (IllegalArgumentException ex) {}    }        public void testToChar_Character_char() {        assertEquals('A', CharUtils.toChar(CHARACTER_A, 'X'));        assertEquals('B', CharUtils.toChar(CHARACTER_B, 'X'));        assertEquals('X', CharUtils.toChar((Character) null, 'X'));    }        //-----------------------------------------------------------------------    public void testToChar_String() {        assertEquals('A', CharUtils.toChar("A"));        assertEquals('B', CharUtils.toChar("BA"));        try {            CharUtils.toChar((String) null);        } catch (IllegalArgumentException ex) {}        try {            CharUtils.toChar("");        } catch (IllegalArgumentException ex) {}    }        public void testToChar_String_char() {        assertEquals('A', CharUtils.toChar("A", 'X'));        assertEquals('B', CharUtils.toChar("BA", 'X'));        assertEquals('X', CharUtils.toChar("", 'X'));        assertEquals('X', CharUtils.toChar((String) null, 'X'));    }        //-----------------------------------------------------------------------    public void testToIntValue_char() {        assertEquals(0, CharUtils.toIntValue('0'));        assertEquals(1, CharUtils.toIntValue('1'));        assertEquals(2, CharUtils.toIntValue('2'));        assertEquals(3, CharUtils.toIntValue('3'));        assertEquals(4, CharUtils.toIntValue('4'));        assertEquals(5, CharUtils.toIntValue('5'));        assertEquals(6, CharUtils.toIntValue('6'));        assertEquals(7, CharUtils.toIntValue('7'));        assertEquals(8, CharUtils.toIntValue('8'));        assertEquals(9, CharUtils.toIntValue('9'));        try {            CharUtils.toIntValue('a');        } catch (IllegalArgumentException ex) {}    }        public void testToIntValue_char_int() {        assertEquals(0, CharUtils.toIntValue('0', -1));        assertEquals(3, CharUtils.toIntValue('3', -1));        assertEquals(-1, CharUtils.toIntValue('a', -1));    }        //-----------------------------------------------------------------------    public void testToIntValue_Character() {        assertEquals(0, CharUtils.toIntValue(new Character('0')));        assertEquals(3, CharUtils.toIntValue(new Character('3')));        try {            CharUtils.toIntValue(null);        } catch (IllegalArgumentException ex) {}        try {            CharUtils.toIntValue(CHARACTER_A);        } catch (IllegalArgumentException ex) {}    }        public void testToIntValue_Character_int() {        assertEquals(0, CharUtils.toIntValue(new Character('0'), -1));        assertEquals(3, CharUtils.toIntValue(new Character('3'), -1));        assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1));        assertEquals(-1, CharUtils.toIntValue(null, -1));    }        //-----------------------------------------------------------------------    public void testToString_char() {        assertEquals("a", CharUtils.toString('a'));        assertSame(CharUtils.toString('a'), CharUtils.toString('a'));               for (int i = 0; i < 128; i++) {            String str = CharUtils.toString((char) i);            String str2 = CharUtils.toString((char) i);            assertSame(str, str2);            assertEquals(1, str.length());            assertEquals(i, str.charAt(0));        }        for (int i = 128; i < 196; i++) {            String str = CharUtils.toString((char) i);            String str2 = CharUtils.toString((char) i);            assertEquals(str, str2);            assertTrue(str != str2);            assertEquals(1, str.length());            assertEquals(i, str.charAt(0));            assertEquals(1, str2.length());            assertEquals(i, str2.charAt(0));        }    }        public void testToString_Character() {        assertEquals(null, CharUtils.toString(null));        assertEquals("A", CharUtils.toString(CHARACTER_A));        assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A));    }        //-----------------------------------------------------------------------    public void testToUnicodeEscaped_char() {        assertEquals("\\u0041", CharUtils.unicodeEscaped('A'));               for (int i = 0; i < 196; i++) {            String str = CharUtils.unicodeEscaped((char) i);            assertEquals(6, str.length());            int val = Integer.parseInt(str.substring(2), 16);            assertEquals(i, val);        }    }        public void testToUnicodeEscaped_Character() {        assertEquals(null, CharUtils.unicodeEscaped(null));        assertEquals("\\u0041", CharUtils.unicodeEscaped(CHARACTER_A));    }        //-----------------------------------------------------------------------    public void testIsAscii_char() {        assertEquals(true, CharUtils.isAscii('a'));        assertEquals(true, CharUtils.isAscii('A'));        assertEquals(true, CharUtils.isAscii('3'));        assertEquals(true, CharUtils.isAscii('-'));        assertEquals(true, CharUtils.isAscii('\n'));        assertEquals(false, CharUtils.isAscii(CHAR_COPY));               for (int i = 0; i < 128; i++) {            if (i < 128) {                assertEquals(true, CharUtils.isAscii((char) i));            } else {                assertEquals(false, CharUtils.isAscii((char) i));            }        }    }        //-----------------------------------------------------------------------    public void testIsAsciiPrintable_char() {        assertEquals(true, CharUtils.isAsciiPrintable('a'));        assertEquals(true, CharUtils.isAsciiPrintable('A'));        assertEquals(true, CharUtils.isAsciiPrintable('3'));        assertEquals(true, CharUtils.isAsciiPrintable('-'));        assertEquals(false, CharUtils.isAsciiPrintable('\n'));        assertEquals(false, CharUtils.isAscii(CHAR_COPY));               for (int i = 0; i < 196; i++) {            if (i >= 32 && i <= 126) {                assertEquals(true, CharUtils.isAsciiPrintable((char) i));            } else {                assertEquals(false, CharUtils.isAsciiPrintable((char) i));            }        }    }        //-----------------------------------------------------------------------    public void testIsAsciiControl_char() {        assertEquals(false, CharUtils.isAsciiControl('a'));        assertEquals(false, CharUtils.isAsciiControl('A'));        assertEquals(false, CharUtils.isAsciiControl('3'));        assertEquals(false, CharUtils.isAsciiControl('-'));        assertEquals(true, CharUtils.isAsciiControl('\n'));        assertEquals(false, CharUtils.isAsciiControl(CHAR_COPY));               for (int i = 0; i < 196; i++) {            if (i < 32 || i == 127) {                assertEquals(true, CharUtils.isAsciiControl((char) i));            } else {                assertEquals(false, CharUtils.isAsciiControl((char) i));            }        }    }        //-----------------------------------------------------------------------    public void testIsAsciiAlpha_char() {        assertEquals(true, CharUtils.isAsciiAlpha('a'));        assertEquals(true, CharUtils.isAsciiAlpha('A'));        assertEquals(false, CharUtils.isAsciiAlpha('3'));        assertEquals(false, CharUtils.isAsciiAlpha('-'));        assertEquals(false, CharUtils.isAsciiAlpha('\n'));        assertEquals(false, CharUtils.isAsciiAlpha(CHAR_COPY));               for (int i = 0; i < 196; i++) {            if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z')) {                assertEquals(true, CharUtils.isAsciiAlpha((char) i));            } else {                assertEquals(false, CharUtils.isAsciiAlpha((char) i));            }        }    }        //-----------------------------------------------------------------------    public void testIsAsciiAlphaUpper_char() {        assertEquals(false, CharUtils.isAsciiAlphaUpper('a'));        assertEquals(true, CharUtils.isAsciiAlphaUpper('A'));        assertEquals(false, CharUtils.isAsciiAlphaUpper('3'));        assertEquals(false, CharUtils.isAsciiAlphaUpper('-'));        assertEquals(false, CharUtils.isAsciiAlphaUpper('\n'));        assertEquals(false, CharUtils.isAsciiAlphaUpper(CHAR_COPY));               for (int i = 0; i < 196; i++) {            if (i >= 'A' && i <= 'Z') {                assertEquals(true, CharUtils.isAsciiAlphaUpper((char) i));            } else {                assertEquals(false, CharUtils.isAsciiAlphaUpper((char) i));            }        }    }        //-----------------------------------------------------------------------    public void testIsAsciiAlphaLower_char() {        assertEquals(true, CharUtils.isAsciiAlphaLower('a'));        assertEquals(false, CharUtils.isAsciiAlphaLower('A'));        assertEquals(false, CharUtils.isAsciiAlphaLower('3'));        assertEquals(false, CharUtils.isAsciiAlphaLower('-'));        assertEquals(false, CharUtils.isAsciiAlphaLower('\n'));        assertEquals(false, CharUtils.isAsciiAlphaLower(CHAR_COPY));               for (int i = 0; i < 196; i++) {            if (i >= 'a' && i <= 'z') {                assertEquals(true, CharUtils.isAsciiAlphaLower((char) i));            } else {                assertEquals(false, CharUtils.isAsciiAlphaLower((char) i));            }        }    }        //-----------------------------------------------------------------------    public void testIsAsciiNumeric_char() {        assertEquals(false, CharUtils.isAsciiNumeric('a'));        assertEquals(false, CharUtils.isAsciiNumeric('A'));        assertEquals(true, CharUtils.isAsciiNumeric('3'));        assertEquals(false, CharUtils.isAsciiNumeric('-'));        assertEquals(false, CharUtils.isAsciiNumeric('\n'));        assertEquals(false, CharUtils.isAsciiNumeric(CHAR_COPY));               for (int i = 0; i < 196; i++) {            if (i >= '0' && i <= '9') {                assertEquals(true, CharUtils.isAsciiNumeric((char) i));            } else {                assertEquals(false, CharUtils.isAsciiNumeric((char) i));            }        }    }        //-----------------------------------------------------------------------    public void testIsAsciiAlphanumeric_char() {        assertEquals(true, CharUtils.isAsciiAlphanumeric('a'));        assertEquals(true, CharUtils.isAsciiAlphanumeric('A'));        assertEquals(true, CharUtils.isAsciiAlphanumeric('3'));        assertEquals(false, CharUtils.isAsciiAlphanumeric('-'));        assertEquals(false, CharUtils.isAsciiAlphanumeric('\n'));        assertEquals(false, CharUtils.isAsciiAlphanumeric(CHAR_COPY));               for (int i = 0; i < 196; i++) {            if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z') || (i >= '0' && i <= '9')) {                assertEquals(true, CharUtils.isAsciiAlphanumeric((char) i));            } else {                assertEquals(false, CharUtils.isAsciiAlphanumeric((char) i));            }        }    }    }
/* * Copyright 2003-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit test for Tokenizer. * * @author Matthew Inger */public class TokenizerTest extends TestCase {        /**     * JUnit constructor.     * @param name     */    public TokenizerTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(TokenizerTest.class);        suite.setName("TokenizerTest Tests");        return suite;    }    public static void main(String[] args) {        TestRunner.run(suite());    }    //-----------------------------------------------------------------------    public void test1() {        String input = "a;b;c;\"d;\"\"e\";f; ; ;";        Tokenizer tok = new Tokenizer(input);        tok.setDelimiterChar(';');        tok.setQuoteChar('"');        tok.setIgnoredMatcher(Tokenizer.TRIM_MATCHER);        tok.setIgnoreEmptyTokens(false);        String tokens [] = tok.getAllTokens();        String expected[] = new String[]        {            "a",            "b",            "c",            "d;\"e",            "f",            "",            "",            "",        };        assertTrue(tokens.length == expected.length);        for (int i = 0; i < expected.length; i++) {            assertTrue("token[" + i + "] was '" + tokens[i]                    + "' but was expected to be '" + expected[i]                    + "'",                    ObjectUtils.equals(expected[i], tokens[i]));        }    }    public void test2() {        String input = "a;b;c ;\"d;\"\"e\";f; ; ;";        Tokenizer tok = new Tokenizer(input);        tok.setDelimiterChar(';');        tok.setQuoteChar('"');        tok.setIgnoredMatcher(Tokenizer.NONE_MATCHER);        tok.setIgnoreEmptyTokens(false);        String tokens [] = tok.getAllTokens();        String expected[] = new String[]        {            "a",            "b",            "c ",            "d;\"e",            "f",            " ",            " ",            "",        };        assertTrue(tokens.length == expected.length);        for (int i = 0; i < expected.length; i++) {            assertTrue("token[" + i + "] was '" + tokens[i]                    + "' but was expected to be '" + expected[i]                    + "'",                    ObjectUtils.equals(expected[i], tokens[i]));        }    }    public void test3() {        String input = "a;b; c;\"d;\"\"e\";f; ; ;";        Tokenizer tok = new Tokenizer(input);        tok.setDelimiterChar(';');        tok.setQuoteChar('"');        tok.setIgnoredMatcher(Tokenizer.NONE_MATCHER);        tok.setIgnoreEmptyTokens(false);        String tokens [] = tok.getAllTokens();        String expected[] = new String[]        {            "a",            "b",            " c",            "d;\"e",            "f",            " ",            " ",            "",        };        assertTrue(tokens.length == expected.length);        for (int i = 0; i < expected.length; i++) {            assertTrue("token[" + i + "] was '" + tokens[i]                    + "' but was expected to be '" + expected[i]                    + "'",                    ObjectUtils.equals(expected[i], tokens[i]));        }    }    public void test4() {        String input = "a;b; c;\"d;\"\"e\";f; ; ;";        Tokenizer tok = new Tokenizer(input);        tok.setDelimiterChar(';');        tok.setQuoteChar('"');        tok.setIgnoredMatcher(Tokenizer.TRIM_MATCHER);        tok.setIgnoreEmptyTokens(true);        String tokens [] = tok.getAllTokens();        String expected[] = new String[]        {            "a",            "b",            "c",            "d;\"e",            "f",        };        assertTrue(tokens.length == expected.length);        for (int i = 0; i < expected.length; i++) {            assertTrue("token[" + i + "] was '" + tokens[i]                    + "' but was expected to be '" + expected[i]                    + "'",                    ObjectUtils.equals(expected[i], tokens[i]));        }    }    public void test5() {        String input = "a;b; c;\"d;\"\"e\";f; ; ;";        Tokenizer tok = new Tokenizer(input);        tok.setDelimiterChar(';');        tok.setQuoteChar('"');        tok.setIgnoredMatcher(Tokenizer.TRIM_MATCHER);        tok.setIgnoreEmptyTokens(false);        tok.setEmptyTokenAsNull(true);        String tokens [] = tok.getAllTokens();        String expected[] = new String[]        {            "a",            "b",            "c",            "d;\"e",            "f",            null,            null,            null,        };        assertTrue(tokens.length == expected.length);        for (int i = 0; i < expected.length; i++) {            assertTrue("token[" + i + "] was '" + tokens[i]                    + "' but was expected to be '" + expected[i]                    + "'",                    ObjectUtils.equals(expected[i], tokens[i]));        }    }    public void test6() {        String input = "a;b; c;\"d;\"\"e\";f; ; ;";        Tokenizer tok = new Tokenizer(input);        tok.setDelimiterChar(';');        tok.setQuoteChar('"');        tok.setIgnoredMatcher(Tokenizer.TRIM_MATCHER);        tok.setIgnoreEmptyTokens(false);//        tok.setTreatingEmptyAsNull(true);        String tokens [] = tok.getAllTokens();        String expected[] = new String[]        {            "a",            "b",            " c",            "d;\"e",            "f",            null,            null,            null,        };        int nextCount = 0;        while (tok.hasNext()) {            tok.next();            nextCount++;        }        int prevCount = 0;        while (tok.hasPrevious()) {            tok.previous();            prevCount++;        }        assertTrue(tokens.length == expected.length);        assertTrue("could not cycle through entire token list"                + " using the 'hasNext' and 'next' methods",                nextCount == expected.length);        assertTrue("could not cycle through entire token list"                + " using the 'hasPrevious' and 'previous' methods",                prevCount == expected.length);    }    public void test7() {        String input = "a   b c \"d e\" f ";        Tokenizer tok = new Tokenizer(input);        tok.setDelimiterMatcher(Tokenizer.SPACE_MATCHER);        tok.setQuoteMatcher(Tokenizer.DOUBLE_QUOTE_MATCHER);        tok.setIgnoredMatcher(Tokenizer.NONE_MATCHER);        tok.setIgnoreEmptyTokens(false);        String tokens [] = tok.getAllTokens();        String expected[] = new String[]        {            "a",            "",            "",            "b",            "c",            "d e",            "f",            "",        };        assertTrue(tokens.length == expected.length);        for (int i = 0; i < expected.length; i++) {            assertTrue("token[" + i + "] was '" + tokens[i]                    + "' but was expected to be '" + expected[i]                    + "'",                    ObjectUtils.equals(expected[i], tokens[i]));        }    }    public void test8() {        String input = "a   b c \"d e\" f ";        Tokenizer tok = new Tokenizer(input);        tok.setDelimiterMatcher(Tokenizer.SPACE_MATCHER);        tok.setQuoteMatcher(Tokenizer.DOUBLE_QUOTE_MATCHER);        tok.setIgnoredMatcher(Tokenizer.NONE_MATCHER);        tok.setIgnoreEmptyTokens(true);        String tokens [] = tok.getAllTokens();        String expected[] = new String[]        {            "a",            "b",            "c",            "d e",            "f",        };        assertTrue(tokens.length == expected.length);        for (int i = 0; i < expected.length; i++) {            assertTrue("token[" + i + "] was '" + tokens[i]                    + "' but was expected to be '" + expected[i]                    + "'",                    ObjectUtils.equals(expected[i], tokens[i]));        }    }    public void testBasic1() {        String input = "a  b c";        Tokenizer tok = new Tokenizer(input);        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());    }        public void testBasic2() {        String input = "a \nb\fc";        Tokenizer tok = new Tokenizer(input);        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());    }        public void testBasic3() {        String input = "a \nb\u0001\fc";        Tokenizer tok = new Tokenizer(input);        assertEquals("a", tok.next());        assertEquals("b\u0001", tok.next());        assertEquals("c", tok.next());    }        public void testBasic4() {        String input = "a \"b\" c";        Tokenizer tok = new Tokenizer(input);        assertEquals("a", tok.next());        assertEquals("\"b\"", tok.next());        assertEquals("c", tok.next());    }        public void testBasicQuoted1() {        String input = "a \"b\" c";        Tokenizer tok = new Tokenizer(input, ' ', '"');        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());    }        public void testBasicDelim1() {        String input = "a:b:c";        Tokenizer tok = new Tokenizer(input, ':');        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());    }        public void testBasicDelim2() {        String input = "a:b:c";        Tokenizer tok = new Tokenizer(input, ',');        assertEquals("a:b:c", tok.next());    }        public void testBasicEmpty1() {        String input = "a  b c";        Tokenizer tok = new Tokenizer(input);        tok.setIgnoreEmptyTokens(false);        assertEquals("a", tok.next());        assertEquals("", tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());    }        public void testBasicEmpty2() {        String input = "a  b c";        Tokenizer tok = new Tokenizer(input);        tok.setIgnoreEmptyTokens(false);        tok.setEmptyTokenAsNull(true);        assertEquals("a", tok.next());        assertEquals(null, tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());    }        public void testGetContent() {        String input = "a   b c \"d e\" f ";        Tokenizer tok = new Tokenizer(input);        assertSame(input, tok.getContent());                tok = new Tokenizer(input.toCharArray());        assertEquals(input, tok.getContent());    }    public void testReset() {        String input = "a b c";        Tokenizer tok = new Tokenizer(input);        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());        tok.reset();        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());        tok.reset("d e");        assertEquals("d", tok.next());        assertEquals("e", tok.next());        tok.reset("f g".toCharArray());        assertEquals("f", tok.next());        assertEquals("g", tok.next());    }        public void testMatcher() {        assertEquals(true, Tokenizer.SPACE_MATCHER.isMatch(' '));        assertEquals(false, Tokenizer.SPACE_MATCHER.isMatch('\n'));        assertEquals(false, Tokenizer.SPACE_MATCHER.isMatch('\u0001'));                assertEquals(true, Tokenizer.TRIM_MATCHER.isMatch(' '));        assertEquals(true, Tokenizer.TRIM_MATCHER.isMatch('\n'));        assertEquals(true, Tokenizer.TRIM_MATCHER.isMatch('\u0001'));                assertEquals(true, Tokenizer.SPLIT_MATCHER.isMatch(' '));        assertEquals(true, Tokenizer.SPLIT_MATCHER.isMatch('\n'));        assertEquals(false, Tokenizer.SPLIT_MATCHER.isMatch('\u0001'));    }    }
/* * Copyright 2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.text.NumberFormat;import java.util.Calendar;/** * Tests the difference in performance between CharUtils and CharSet. *  * Sample runs:Now: Thu Mar 18 14:29:48 PST 2004Sun Microsystems Inc. Java(TM) 2 Runtime Environment, Standard Edition 1.3.1_10-b03Sun Microsystems Inc. Java HotSpot(TM) Client VM 1.3.1_10-b03Windows XP 5.1 x86 pentium i486 i386Do nohting: 0 milliseconds.run_CharUtils_isAsciiNumeric: 4,545 milliseconds.run_inlined_CharUtils_isAsciiNumeric: 3,417 milliseconds.run_inlined_CharUtils_isAsciiNumeric: 85,679 milliseconds.Now: Thu Mar 18 14:24:51 PST 2004Sun Microsystems Inc. Java(TM) 2 Runtime Environment, Standard Edition 1.4.2_04-b05Sun Microsystems Inc. Java HotSpot(TM) Client VM 1.4.2_04-b05Windows XP 5.1 x86 pentium i486 i386Do nohting: 0 milliseconds.run_CharUtils_isAsciiNumeric: 2,578 milliseconds.run_inlined_CharUtils_isAsciiNumeric: 2,477 milliseconds.run_inlined_CharUtils_isAsciiNumeric: 114,429 milliseconds.Now: Thu Mar 18 14:27:55 PST 2004Sun Microsystems Inc. Java(TM) 2 Runtime Environment, Standard Edition 1.4.2_04-b05Sun Microsystems Inc. Java HotSpot(TM) Server VM 1.4.2_04-b05Windows XP 5.1 x86 pentium i486 i386Do nohting: 0 milliseconds.run_CharUtils_isAsciiNumeric: 630 milliseconds.run_inlined_CharUtils_isAsciiNumeric: 709 milliseconds.run_inlined_CharUtils_isAsciiNumeric: 84,420 milliseconds. * @version $Id: CharUtilsPerfTest.java,v 1.2 2004/03/19 00:29:32 ggregory Exp $ */public class CharUtilsPerfTest {    final static String VERSION = "$Id: CharUtilsPerfTest.java,v 1.2 2004/03/19 00:29:32 ggregory Exp $";    final static int WARM_UP = 100;    final static int COUNT = 5000;    final static char[] CHAR_SAMPLES;    static {        CHAR_SAMPLES = new char[Character.MAX_VALUE];        for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {            CHAR_SAMPLES[i] = i;        }    }    public static void main(String[] args) {        new CharUtilsPerfTest().run();    }    private void printSysInfo() {        System.out.println(VERSION);        System.out.println("Now: " + Calendar.getInstance().getTime());        System.out.println(System.getProperty("java.vendor")                + " "                + System.getProperty("java.runtime.name")                + " "                + System.getProperty("java.runtime.version"));        System.out.println(System.getProperty("java.vm.vendor")                + " "                + System.getProperty("java.vm.name")                + " "                + System.getProperty("java.vm.version"));        System.out.println(System.getProperty("os.name")            + " "            + System.getProperty("os.version")            + " "            + System.getProperty("os.arch")            + " "            + System.getProperty("sun.cpu.isalist"));    }    private void run() {        this.printSysInfo();        long start;        start = System.currentTimeMillis();        this.printlnTotal("Do nohting", start);        //System.out.println("Warming up...");        run_CharUtils_isAsciiNumeric(WARM_UP);        //System.out.println("Measuring...");        start = System.currentTimeMillis();        run_CharUtils_isAsciiNumeric(COUNT);        this.printlnTotal("run_CharUtils_isAsciiNumeric", start);        //System.out.println("Warming up...");        run_inlined_CharUtils_isAsciiNumeric(WARM_UP);        //System.out.println("Measuring...");        start = System.currentTimeMillis();        run_inlined_CharUtils_isAsciiNumeric(COUNT);        this.printlnTotal("run_inlined_CharUtils_isAsciiNumeric", start);        //System.out.println("Warming up...");        run_CharSet(WARM_UP);        //System.out.println("Measuring...");        start = System.currentTimeMillis();        run_CharSet(COUNT);        this.printlnTotal("run_CharSet", start);    }    private int run_CharSet(int loopCount) {        int t = 0;        for (int i = 0; i < loopCount; i++) {            for (int j = 0; j < CHAR_SAMPLES.length; j++) {                char ch = CHAR_SAMPLES[j];                boolean b = CharSet.ASCII_NUMERIC.contains(ch);                t += b ? 1 : 0;            }        }        return t;    }    private int run_CharUtils_isAsciiNumeric(int loopCount) {        int t = 0;        for (int i = 0; i < loopCount; i++) {            for (int j = 0; j < CHAR_SAMPLES.length; j++) {                char ch = CHAR_SAMPLES[j];                boolean b = CharUtils.isAsciiNumeric(ch);                t += b ? 1 : 0;            }        }        return t;    }    private int run_inlined_CharUtils_isAsciiNumeric(int loopCount) {        int t = 0;        for (int i = 0; i < loopCount; i++) {            for (int j = 0; j < CHAR_SAMPLES.length; j++) {                char ch = CHAR_SAMPLES[j];                boolean b = (ch >= '0' && ch <= '9');                t += b ? 1 : 0;            }        }        return t;    }    private void printlnTotal(String prefix, long start) {        long total = System.currentTimeMillis() - start;        System.out.println(prefix + ": " + NumberFormat.getInstance().format(total) + " milliseconds.");    }}
/* * Copyright 2003,2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.io.File;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import junit.framework.Assert;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.SystemUtils}. *  * Only limited testing can be performed. *  * @author Stephen Colebourne * @author Tetsuya Kaneuchi * @author Gary D. Gregory * @version $Id: SystemUtilsTest.java,v 1.10 2004/02/25 00:25:29 ggregory Exp $ */public class SystemUtilsTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(SystemUtilsTest.class);        suite.setName("SystemUtils Tests");        return suite;    }    //-----------------------------------------------------------------------    // COPIED FROM SystemUtils    //-----------------------------------------------------------------------    private String JAVA_VERSION;    private String OS_NAME;    private String OS_VERSION;    public SystemUtilsTest(String name) {        super(name);    }    /**     * <p>     * Get the Java version number as a <code>float</code>.     * </p>     *      * <p>     * Example output:     * </p>     * <ul>     * <li><code>1.2f</code> for JDK 1.2     * <li><code>1.31f</code> for JDK 1.3.1     * </ul>     *      * <p>     * Patch releases are not reported. Zero is returned if JAVA_VERSION is <code>null</code>.     * </p>     *      * @return the version, for example 1.31f for JDK 1.3.1     */    private float getJavaVersionAsFloat() {        if (JAVA_VERSION == null) {            return 0f;        }        String str = JAVA_VERSION.substring(0, 3);        if (JAVA_VERSION.length() >= 5) {            str = str + JAVA_VERSION.substring(4, 5);        }        return Float.parseFloat(str);    }    /**     * <p>     * Get the Java version number as an <code>int</code>.     * </p>     *      * <p>     * Example output:     * </p>     * <ul>     * <li><code>120</code> for JDK 1.2     * <li><code>131</code> for JDK 1.3.1     * </ul>     *      * <p>     * Patch releases are not reported. Zero is returned if JAVA_VERSION is <code>null</code>.     * </p>     *      * @return the version, for example 131 for JDK 1.3.1     */    private int getJavaVersionAsInt() {        if (JAVA_VERSION == null) {            return 0;        }        String str = JAVA_VERSION.substring(0, 1);        str = str + JAVA_VERSION.substring(2, 3);        if (JAVA_VERSION.length() >= 5) {            str = str + JAVA_VERSION.substring(4, 5);        } else {            str = str + "0";        }        return Integer.parseInt(str);    }    /**     * Decides if the java version matches.     *      * @param versionPrefix     *                  the prefix for the java version     * @return true if matches, or false if not or can't determine     */    private boolean getJavaVersionMatches(String versionPrefix) {        if (JAVA_VERSION == null) {            return false;        }        return JAVA_VERSION.startsWith(versionPrefix);    }    /**     * Decides if the operating system matches.     *      * @param osNamePrefix     *                  the prefix for the os name     * @return true if matches, or false if not or can't determine     */    private boolean getOSMatches(String osNamePrefix) {        if (OS_NAME == null) {            return false;        }        return OS_NAME.startsWith(osNamePrefix);    }    /**     * Decides if the operating system matches.     *      * @param osNamePrefix     *                  the prefix for the os name     * @param osVersionPrefix     *                  the prefix for the version     * @return true if matches, or false if not or can't determine     */    private boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {        if (OS_NAME == null || OS_VERSION == null) {            return false;        }        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);    }    protected void setUp() throws Exception {        super.setUp();    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new SystemUtils());        Constructor[] cons = SystemUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(SystemUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(SystemUtils.class.getModifiers()));    }    /**     * Assums no security manager exists.     */    public void testGetJavaHome() {        File dir = SystemUtils.getJavaHome();        Assert.assertNotNull(dir);        Assert.assertTrue(dir.exists());    }    /**     * Assums no security manager exists.     */    public void testGetJavaIoTmpDir() {        File dir = SystemUtils.getJavaIoTmpDir();        Assert.assertNotNull(dir);        Assert.assertTrue(dir.exists());    }    /**     * Assums no security manager exists.     */    public void testGetUserDir() {        File dir = SystemUtils.getUserDir();        Assert.assertNotNull(dir);        Assert.assertTrue(dir.exists());    }    /**     * Assums no security manager exists.     */    public void testGetUserHome() {        File dir = SystemUtils.getUserHome();        Assert.assertNotNull(dir);        Assert.assertTrue(dir.exists());    }    public void testIS_JAVA() {        String javaVersion = System.getProperty("java.version");        if (javaVersion == null) {            assertEquals(false, SystemUtils.IS_JAVA_1_1);            assertEquals(false, SystemUtils.IS_JAVA_1_2);            assertEquals(false, SystemUtils.IS_JAVA_1_3);            assertEquals(false, SystemUtils.IS_JAVA_1_4);            assertEquals(false, SystemUtils.IS_JAVA_1_5);        } else if (javaVersion.startsWith("1.1")) {            assertTrue(SystemUtils.IS_JAVA_1_1);        } else if (javaVersion.startsWith("1.2")) {            assertTrue(SystemUtils.IS_JAVA_1_2);        } else if (javaVersion.startsWith("1.3")) {            assertTrue(SystemUtils.IS_JAVA_1_3);        } else if (javaVersion.startsWith("1.4")) {            assertTrue(SystemUtils.IS_JAVA_1_4);        } else if (javaVersion.startsWith("1.5")) {            assertTrue(SystemUtils.IS_JAVA_1_5);        } else {            System.out.println("Can't test IS_JAVA value");        }    }    public void testIS_OS() {        String osName = System.getProperty("os.name");        if (osName == null) {            assertEquals(false, SystemUtils.IS_OS_WINDOWS);            assertEquals(false, SystemUtils.IS_OS_UNIX);            assertEquals(false, SystemUtils.IS_OS_SOLARIS);            assertEquals(false, SystemUtils.IS_OS_LINUX);            assertEquals(false, SystemUtils.IS_OS_MAC_OSX);        } else if (osName.startsWith("Windows")) {            assertEquals(false, SystemUtils.IS_OS_UNIX);            assertEquals(true, SystemUtils.IS_OS_WINDOWS);        } else if (osName.startsWith("Solaris")) {            assertEquals(true, SystemUtils.IS_OS_SOLARIS);            assertEquals(true, SystemUtils.IS_OS_UNIX);            assertEquals(false, SystemUtils.IS_OS_WINDOWS);        } else if (osName.toLowerCase().startsWith("linux")) {            assertEquals(true, SystemUtils.IS_OS_LINUX);            assertEquals(true, SystemUtils.IS_OS_UNIX);            assertEquals(false, SystemUtils.IS_OS_WINDOWS);        } else if (osName.startsWith("Mac OS X")) {            assertEquals(true, SystemUtils.IS_OS_MAC_OSX);            assertEquals(true, SystemUtils.IS_OS_UNIX);            assertEquals(false, SystemUtils.IS_OS_WINDOWS);        } else if (osName.startsWith("OS/2")) {            assertEquals(true, SystemUtils.IS_OS_OS2);            assertEquals(false, SystemUtils.IS_OS_UNIX);            assertEquals(false, SystemUtils.IS_OS_WINDOWS);        } else if (osName.startsWith("SunOS")) {            assertEquals(true, SystemUtils.IS_OS_SUN_OS);            assertEquals(true, SystemUtils.IS_OS_UNIX);            assertEquals(false, SystemUtils.IS_OS_WINDOWS);        } else {            System.out.println("Can't test IS_OS value");        }    }    //-----------------------------------------------------------------------    public void testJavaVersion() {        assertEquals(SystemUtils.JAVA_VERSION_FLOAT, SystemUtils.getJavaVersion(), 0f);    }    public void testJavaVersionAsFloat() {        JAVA_VERSION = null;        assertEquals(0f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.1";        assertEquals(1.1f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.2";        assertEquals(1.2f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.3.0";        assertEquals(1.3f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.3.1";        assertEquals(1.31f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.4.0";        assertEquals(1.4f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.4.1";        assertEquals(1.41f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.5.0";        assertEquals(1.5f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.6.0";        assertEquals(1.6f, getJavaVersionAsFloat(), 0.000001f);    }    public void testJavaVersionAsInt() {        JAVA_VERSION = null;        assertEquals(0, getJavaVersionAsInt());        JAVA_VERSION = "1.1";        assertEquals(110, getJavaVersionAsInt());        JAVA_VERSION = "1.2";        assertEquals(120, getJavaVersionAsInt());        JAVA_VERSION = "1.3.0";        assertEquals(130, getJavaVersionAsInt());        JAVA_VERSION = "1.3.1";        assertEquals(131, getJavaVersionAsInt());        JAVA_VERSION = "1.4.0";        assertEquals(140, getJavaVersionAsInt());        JAVA_VERSION = "1.4.1";        assertEquals(141, getJavaVersionAsInt());        JAVA_VERSION = "1.5.0";        assertEquals(150, getJavaVersionAsInt());        JAVA_VERSION = "1.6.0";        assertEquals(160, getJavaVersionAsInt());    }    public void testJavaVersionAtLeastFloat() {        float version = SystemUtils.JAVA_VERSION_FLOAT;        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));        version -= 0.1f;        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));        version += 0.2f;        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));    }    public void testJavaVersionAtLeastInt() {        int version = SystemUtils.JAVA_VERSION_INT;        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));        version -= 10;        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));        version += 20;        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));    }    //-----------------------------------------------------------------------    public void testJavaVersionMatches() {        JAVA_VERSION = null;        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(false, getJavaVersionMatches("1.3"));        assertEquals(false, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.1";        assertEquals(true, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(false, getJavaVersionMatches("1.3"));        assertEquals(false, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.2";        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(true, getJavaVersionMatches("1.2"));        assertEquals(false, getJavaVersionMatches("1.3"));        assertEquals(false, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.3.0";        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(true, getJavaVersionMatches("1.3"));        assertEquals(false, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.3.1";        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(true, getJavaVersionMatches("1.3"));        assertEquals(false, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.4.0";        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(false, getJavaVersionMatches("1.3"));        assertEquals(true, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.4.1";        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(false, getJavaVersionMatches("1.3"));        assertEquals(true, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.5.0";        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(false, getJavaVersionMatches("1.3"));        assertEquals(false, getJavaVersionMatches("1.4"));        assertEquals(true, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.6.0";        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(false, getJavaVersionMatches("1.3"));        assertEquals(false, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));    }    public void testOSMatches() {        OS_NAME = null;        assertEquals(false, getOSMatches("Windows"));        OS_NAME = "Windows 95";        assertEquals(true, getOSMatches("Windows"));        OS_NAME = "Windows NT";        assertEquals(true, getOSMatches("Windows"));        OS_NAME = "OS/2";        assertEquals(false, getOSMatches("Windows"));    }    public void testOSMatches2() {        OS_NAME = null;        OS_VERSION = null;        assertEquals(false, getOSMatches("Windows 9", "4.1"));        OS_NAME = "Windows 95";        OS_VERSION = "4.0";        assertEquals(false, getOSMatches("Windows 9", "4.1"));        OS_NAME = "Windows 95";        OS_VERSION = "4.1";        assertEquals(true, getOSMatches("Windows 9", "4.1"));        OS_NAME = "Windows 98";        OS_VERSION = "4.1";        assertEquals(true, getOSMatches("Windows 9", "4.1"));        OS_NAME = "Windows NT";        OS_VERSION = "4.0";        assertEquals(false, getOSMatches("Windows 9", "4.1"));        OS_NAME = "OS/2";        OS_VERSION = "4.0";        assertEquals(false, getOSMatches("Windows 9", "4.1"));    }    public void testJavaAwtHeadless() {        boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(140);        String expectedStringValue = System.getProperty("java.awt.headless");        String expectedStringValueWithDefault = System.getProperty("java.awt.headless", "false");        assertNotNull(expectedStringValueWithDefault);        if (atLeastJava14) {            boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue();            if (expectedStringValue != null) {                assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS);            }            assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless());        } else {            assertNull(expectedStringValue);            assertNull(SystemUtils.JAVA_AWT_HEADLESS);            assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless());        }        assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless());    }}
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @author Matthew Hawthorne * @version $Id: IncompleteArgumentExceptionTest.java,v 1.3 2004/02/18 23:06:19 ggregory Exp $ * @see IncompleteArgumentException */public class IncompleteArgumentExceptionTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(IncompleteArgumentExceptionTest.class);    }    public IncompleteArgumentExceptionTest(String testName) {        super(testName);    }    // testConstructor    public void test1arg_nullInput() {        final Throwable t = new IncompleteArgumentException(null);        assertEquals("null is incomplete.", t.getMessage());    }    public void test1arg_validInput() {        final String name = "argument";        final Throwable t = new IncompleteArgumentException(name);        assertEquals(name + " is incomplete.", t.getMessage());    }    public void test2arg_allNullInput() {        final Throwable t = new IncompleteArgumentException(null, null);        assertEquals(            "null is missing the following items: null",            t.getMessage());    }    public void test2arg_nullString() {        final Throwable t =            new IncompleteArgumentException(                null,                new String[] { "one", "two" });        assertEquals(            "null is missing the following items: [one, two]",            t.getMessage());    }    public void test2arg_nullArray() {        final String name = "one";        final Throwable t = new IncompleteArgumentException(name, null);        assertEquals(            name + " is missing the following items: null",            t.getMessage());    }    public void test2arg_validInput() {        final String name = "input";        final Throwable t =            new IncompleteArgumentException(                name,                new String[] { "one", "two" });        assertEquals(            name + " is missing the following items: [one, two]",            t.getMessage());    }} // IncompleteArgumentExceptionTest
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.math.BigDecimal;import java.math.BigInteger;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Unit tests {@link org.apache.commons.lang.NumberUtils}. * * @author <a href="mailto:rand_mcneely@yahoo.com">Rand McNeely</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Eric Pugh * @author Phil Steitz * @author Stephen Colebourne * @version $Id: NumberUtilsTest.java,v 1.11 2004/02/18 23:06:19 ggregory Exp $ */public class NumberUtilsTest extends TestCase {    public NumberUtilsTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(NumberUtilsTest.class);        suite.setName("NumberUtils Tests");        return suite;    }    //---------------------------------------------------------------------    /**     * Test for int stringToInt(String)     */    public void testStringToIntString() {        assertTrue("stringToInt(String) 1 failed", NumberUtils.stringToInt("12345") == 12345);        assertTrue("stringToInt(String) 2 failed", NumberUtils.stringToInt("abc") == 0);    }    /**     * Test for int stringToInt(String, int)     */    public void testStringToIntStringI() {        assertTrue("stringToInt(String,int) 1 failed", NumberUtils.stringToInt("12345", 5) == 12345);        assertTrue("stringToInt(String,int) 2 failed", NumberUtils.stringToInt("1234.5", 5) == 5);    }    public void testCreateNumber() {        //a lot of things can go wrong        assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));        assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));        assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));        assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber("" + (Integer.MAX_VALUE + 1L)));        assertEquals("createNumber(String) 6 failed", new BigInteger(Long.MAX_VALUE + "0"), NumberUtils.createNumber(Long.MAX_VALUE + "0L"));        assertEquals("createNumber(String) 7 failed", new Long(12345), NumberUtils.createNumber("12345L"));        assertEquals("createNumber(String) 8 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        assertEquals("createNumber(String) 9 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        assertTrue("createNumber(String) 10 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());        assertTrue("createNumber(String) 11 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());        assertEquals("createNumber(String) 12 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));        assertEquals("createNumber(String) 13 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));        assertEquals("createNumber(String) 14 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));        assertEquals("createNumber(String) 15 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));        assertEquals("createNumber(String) 16 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2        if(SystemUtils.isJavaVersionAtLeast(1.3f)) {             assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils.createNumber("1.1E-700F"));        }        assertEquals(            "createNumber(String) 16 failed",            new Long("10" + Integer.MAX_VALUE),            NumberUtils.createNumber("10" + Integer.MAX_VALUE + "L"));        assertEquals(            "createNumber(String) 17 failed",            new Long("10" + Integer.MAX_VALUE),            NumberUtils.createNumber("10" + Integer.MAX_VALUE));        assertEquals(            "createNumber(String) 18 failed",            new BigInteger("10" + Long.MAX_VALUE),            NumberUtils.createNumber("10" + Long.MAX_VALUE));    }    public void testCreateFloat() {        assertEquals("createFloat(String) failed", new Float("1234.5"), NumberUtils.createFloat("1234.5"));    }    public void testCreateDouble() {        assertEquals("createDouble(String) failed", new Double("1234.5"), NumberUtils.createDouble("1234.5"));    }    public void testCreateInteger() {        assertEquals("createInteger(String) failed", new Integer("12345"), NumberUtils.createInteger("12345"));    }    public void testCreateLong() {        assertEquals("createInteger(String) failed", new Long("12345"), NumberUtils.createLong("12345"));    }    public void testCreateBigInteger() {        assertEquals("createBigInteger(String) failed", new BigInteger("12345"), NumberUtils.createBigInteger("12345"));    }    public void testCreateBigDecimal() {        assertEquals("createBigDecimal(String) failed", new BigDecimal("1234.5"), NumberUtils.createBigDecimal("1234.5"));    }    public void testMinimumLong() {        assertEquals("minimum(long,long,long) 1 failed", 12345L, NumberUtils.minimum(12345L, 12345L + 1L, 12345L + 2L));        assertEquals("minimum(long,long,long) 2 failed", 12345L, NumberUtils.minimum(12345L + 1L, 12345L, 12345 + 2L));        assertEquals("minimum(long,long,long) 3 failed", 12345L, NumberUtils.minimum(12345L + 1L, 12345L + 2L, 12345L));        assertEquals("minimum(long,long,long) 4 failed", 12345L, NumberUtils.minimum(12345L + 1L, 12345L, 12345L));        assertEquals("minimum(long,long,long) 5 failed", 12345L, NumberUtils.minimum(12345L, 12345L, 12345L));    }    public void testMinimumInt() {        assertEquals("minimum(int,int,int) 1 failed", 12345, NumberUtils.minimum(12345, 12345 + 1, 12345 + 2));        assertEquals("minimum(int,int,int) 2 failed", 12345, NumberUtils.minimum(12345 + 1, 12345, 12345 + 2));        assertEquals("minimum(int,int,int) 3 failed", 12345, NumberUtils.minimum(12345 + 1, 12345 + 2, 12345));        assertEquals("minimum(int,int,int) 4 failed", 12345, NumberUtils.minimum(12345 + 1, 12345, 12345));        assertEquals("minimum(int,int,int) 5 failed", 12345, NumberUtils.minimum(12345, 12345, 12345));    }    public void testMaximumLong() {        assertEquals("maximum(long,long,long) 1 failed", 12345L, NumberUtils.maximum(12345L, 12345L - 1L, 12345L - 2L));        assertEquals("maximum(long,long,long) 2 failed", 12345L, NumberUtils.maximum(12345L - 1L, 12345L, 12345L - 2L));        assertEquals("maximum(long,long,long) 3 failed", 12345L, NumberUtils.maximum(12345L - 1L, 12345L - 2L, 12345L));        assertEquals("maximum(long,long,long) 4 failed", 12345L, NumberUtils.maximum(12345L - 1L, 12345L, 12345L));        assertEquals("maximum(long,long,long) 5 failed", 12345L, NumberUtils.maximum(12345L, 12345L, 12345L));    }    public void testMaximumInt() {        assertEquals("maximum(int,int,int) 1 failed", 12345, NumberUtils.maximum(12345, 12345 - 1, 12345 - 2));        assertEquals("maximum(int,int,int) 2 failed", 12345, NumberUtils.maximum(12345 - 1, 12345, 12345 - 2));        assertEquals("maximum(int,int,int) 3 failed", 12345, NumberUtils.maximum(12345 - 1, 12345 - 2, 12345));        assertEquals("maximum(int,int,int) 4 failed", 12345, NumberUtils.maximum(12345 - 1, 12345, 12345));        assertEquals("maximum(int,int,int) 5 failed", 12345, NumberUtils.maximum(12345, 12345, 12345));    }    public void testCompareDouble() {        assertTrue(NumberUtils.compare(Double.NaN, Double.NaN) == 0);        assertTrue(NumberUtils.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);        assertTrue(NumberUtils.compare(Double.NaN, Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Double.NaN, 1.2d) == +1);        assertTrue(NumberUtils.compare(Double.NaN, 0.0d) == +1);        assertTrue(NumberUtils.compare(Double.NaN, -0.0d) == +1);        assertTrue(NumberUtils.compare(Double.NaN, -1.2d) == +1);        assertTrue(NumberUtils.compare(Double.NaN, -Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NaN) == -1);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 1.2d) == +1);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 0.0d) == +1);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -0.0d) == +1);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -1.2d) == +1);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(1.2d, Double.NaN) == -1);        assertTrue(NumberUtils.compare(1.2d, Double.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(1.2d, Double.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(1.2d, 1.2d) == 0);        assertTrue(NumberUtils.compare(1.2d, 0.0d) == +1);        assertTrue(NumberUtils.compare(1.2d, -0.0d) == +1);        assertTrue(NumberUtils.compare(1.2d, -1.2d) == +1);        assertTrue(NumberUtils.compare(1.2d, -Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(0.0d, Double.NaN) == -1);        assertTrue(NumberUtils.compare(0.0d, Double.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(0.0d, Double.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(0.0d, 1.2d) == -1);        assertTrue(NumberUtils.compare(0.0d, 0.0d) == 0);        assertTrue(NumberUtils.compare(0.0d, -0.0d) == +1);        assertTrue(NumberUtils.compare(0.0d, -1.2d) == +1);        assertTrue(NumberUtils.compare(0.0d, -Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(-0.0d, Double.NaN) == -1);        assertTrue(NumberUtils.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(-0.0d, Double.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(-0.0d, 1.2d) == -1);        assertTrue(NumberUtils.compare(-0.0d, 0.0d) == -1);        assertTrue(NumberUtils.compare(-0.0d, -0.0d) == 0);        assertTrue(NumberUtils.compare(-0.0d, -1.2d) == +1);        assertTrue(NumberUtils.compare(-0.0d, -Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(-1.2d, Double.NaN) == -1);        assertTrue(NumberUtils.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(-1.2d, Double.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(-1.2d, 1.2d) == -1);        assertTrue(NumberUtils.compare(-1.2d, 0.0d) == -1);        assertTrue(NumberUtils.compare(-1.2d, -0.0d) == -1);        assertTrue(NumberUtils.compare(-1.2d, -1.2d) == 0);        assertTrue(NumberUtils.compare(-1.2d, -Double.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NaN) == -1);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 1.2d) == -1);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 0.0d) == -1);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -0.0d) == -1);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -1.2d) == -1);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);    }    public void testCompareFloat() {        assertTrue(NumberUtils.compare(Float.NaN, Float.NaN) == 0);        assertTrue(NumberUtils.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);        assertTrue(NumberUtils.compare(Float.NaN, Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Float.NaN, 1.2f) == +1);        assertTrue(NumberUtils.compare(Float.NaN, 0.0f) == +1);        assertTrue(NumberUtils.compare(Float.NaN, -0.0f) == +1);        assertTrue(NumberUtils.compare(Float.NaN, -1.2f) == +1);        assertTrue(NumberUtils.compare(Float.NaN, -Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NaN) == -1);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 1.2f) == +1);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 0.0f) == +1);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -0.0f) == +1);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -1.2f) == +1);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(1.2f, Float.NaN) == -1);        assertTrue(NumberUtils.compare(1.2f, Float.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(1.2f, Float.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(1.2f, 1.2f) == 0);        assertTrue(NumberUtils.compare(1.2f, 0.0f) == +1);        assertTrue(NumberUtils.compare(1.2f, -0.0f) == +1);        assertTrue(NumberUtils.compare(1.2f, -1.2f) == +1);        assertTrue(NumberUtils.compare(1.2f, -Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(0.0f, Float.NaN) == -1);        assertTrue(NumberUtils.compare(0.0f, Float.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(0.0f, Float.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(0.0f, 1.2f) == -1);        assertTrue(NumberUtils.compare(0.0f, 0.0f) == 0);        assertTrue(NumberUtils.compare(0.0f, -0.0f) == +1);        assertTrue(NumberUtils.compare(0.0f, -1.2f) == +1);        assertTrue(NumberUtils.compare(0.0f, -Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(-0.0f, Float.NaN) == -1);        assertTrue(NumberUtils.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(-0.0f, Float.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(-0.0f, 1.2f) == -1);        assertTrue(NumberUtils.compare(-0.0f, 0.0f) == -1);        assertTrue(NumberUtils.compare(-0.0f, -0.0f) == 0);        assertTrue(NumberUtils.compare(-0.0f, -1.2f) == +1);        assertTrue(NumberUtils.compare(-0.0f, -Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(-1.2f, Float.NaN) == -1);        assertTrue(NumberUtils.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(-1.2f, Float.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(-1.2f, 1.2f) == -1);        assertTrue(NumberUtils.compare(-1.2f, 0.0f) == -1);        assertTrue(NumberUtils.compare(-1.2f, -0.0f) == -1);        assertTrue(NumberUtils.compare(-1.2f, -1.2f) == 0);        assertTrue(NumberUtils.compare(-1.2f, -Float.MAX_VALUE) == +1);        assertTrue(NumberUtils.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NaN) == -1);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 1.2f) == -1);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 0.0f) == -1);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -0.0f) == -1);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -1.2f) == -1);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);                assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);    }    public void testIsDigits() {        assertEquals("isDigits(null) failed", false, NumberUtils.isDigits(null));        assertEquals("isDigits('') failed", false, NumberUtils.isDigits(""));        assertEquals("isDigits(String) failed", true, NumberUtils.isDigits("12345"));        assertEquals("isDigits(String) neg 1 failed", false, NumberUtils.isDigits("1234.5"));        assertEquals("isDigits(String) neg 3 failed", false, NumberUtils.isDigits("1ab"));        assertEquals("isDigits(String) neg 4 failed", false, NumberUtils.isDigits("abc"));    }        /**     * Tests isNumber(String) and tests that createNumber(String) returns     * a valid number iff isNumber(String) returns false.     */    public void testIsNumber() {        String val = "12345";        assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));        val = "1234.5";        assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));        val = ".12345";        assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));        val = "1234E5";        assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));        val = "1234E+5";        assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));        val = "1234E-5";        assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));        val = "123.4E5";        assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));        val = "-1234";        assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));        val = "-1234.5";        assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));        val = "-.12345";        assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));        val = "-1234E5";        assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));        val = "0";        assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));        val = "-0";        assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));        val = "01234";        assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));        val = "-01234";        assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));        val = "0xABC123";        assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));        val = "0x0";        assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));        val = "123.4E21D";        assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));        val = "-221.23F";        assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));        val = "22338L";        assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));        val = null;        assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));        val = "";        assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));        val = "--2.3";        assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));        val = ".12.3";        assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));        val = "-123E";        assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));        val = "-123E+-212";        assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));        val = "-123E2.12";        assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));        val = "0xGF";        assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));        val = "0xFAE-1";        assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));        val = ".";        assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));        val = "-0ABC123";        assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));        val = "123.4E-D";        assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));        val = "123.4ED";        assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));        val = "1234E5l";        assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));        val = "11a";        assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));         val = "1a";        assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));         val = "a";        assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));         val = "11g";        assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));         val = "11z";        assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));         val = "11def";        assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));         val = "11d11";        assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));     }        public void testIsNumberInvalidInput() {        String val = "0x";        assertEquals("isNumber() with 0x wasn't false",  false, NumberUtils.isNumber(val));        val = "0x3x3";        assertEquals("isNumber() with 0x3x3 wasn't false",  false, NumberUtils.isNumber(val));        val = "20EE-3";        assertEquals("isNumber() with 20EE-3 wasn't false",  false, NumberUtils.isNumber(val));        val = "2435q";        assertEquals("isNumber() with 2435q wasn't false",  false, NumberUtils.isNumber(val));        val = ".";        assertEquals("isNumber() with . wasn't false",  false, NumberUtils.isNumber(val));    }    private boolean checkCreateNumber(String val) {        try {            Object obj = NumberUtils.createNumber(val);            if (obj == null) {                return false;            }            return true;        } catch (NumberFormatException e) {            return false;        } catch (NullPointerException e) {            return false;        }    }    public void testPublicNoArgConstructor() {        try {            NumberUtils nu = new NumberUtils();        } catch( Exception e ) {            fail( "Error calling public no-arg constructor" );        }    }    }
/* * Copyright 2002-2004 The Apache Software Foundation. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.Random;import junit.framework.Test;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.RandomStringUtils}. * * @author <a href="mailto:steven@caswell.name">Steven Caswell</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Phil Steitz * @version $Id: RandomStringUtilsTest.java,v 1.13 2004/02/18 23:06:19 ggregory Exp $ */public class RandomStringUtilsTest extends junit.framework.TestCase {    /**     * Construct a new instance of RandomStringUtilsTest with the specified name     */    public RandomStringUtilsTest(String name) {        super(name);    }    public static Test suite() {    TestSuite suite = new TestSuite(RandomStringUtilsTest.class);    suite.setName("RandomStringUtils Tests");        return suite;    }        /**     * Set up instance variables required by this test case.     */    public void setUp() {    }        /**     * Tear down instance variables required by this test case.     */    public void tearDown() {    }        //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new RandomStringUtils());        Constructor[] cons = RandomStringUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(RandomStringUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(RandomStringUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    /**     * Test the implementation     */    public void testRandomStringUtils() {        String r1 = RandomStringUtils.random(50);        assertEquals("random(50) length", 50, r1.length());        String r2 = RandomStringUtils.random(50);        assertEquals("random(50) length", 50, r2.length());        assertTrue("!r1.equals(r2)", !r1.equals(r2));                r1 = RandomStringUtils.randomAscii(50);        assertEquals("randomAscii(50) length", 50, r1.length());        for(int i = 0; i < r1.length(); i++) {            assertTrue("char between 32 and 127", (int) r1.charAt(i) >= 32 && (int) r1.charAt(i) <= 127);        }                r2 = RandomStringUtils.randomAscii(50);        assertTrue("!r1.equals(r2)", !r1.equals(r2));        r1 = RandomStringUtils.randomAlphabetic(50);        assertEquals("randomAlphabetic(50)", 50, r1.length());        for(int i = 0; i < r1.length(); i++) {            assertEquals("r1 contains alphabetic", true, Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i)));        }        r2 = RandomStringUtils.randomAlphabetic(50);        assertTrue("!r1.equals(r2)", !r1.equals(r2));                r1 = RandomStringUtils.randomAlphanumeric(50);        assertEquals("randomAlphanumeric(50)", 50, r1.length());        for(int i = 0; i < r1.length(); i++) {            assertEquals("r1 contains alphanumeric", true, Character.isLetterOrDigit(r1.charAt(i)));        }        r2 = RandomStringUtils.randomAlphabetic(50);        assertTrue("!r1.equals(r2)", !r1.equals(r2));                r1 = RandomStringUtils.randomNumeric(50);        assertEquals("randomNumeric(50)", 50, r1.length());        for(int i = 0; i < r1.length(); i++) {            assertEquals("r1 contains numeric", true, Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i)));        }        r2 = RandomStringUtils.randomNumeric(50);        assertTrue("!r1.equals(r2)", !r1.equals(r2));                String set = "abcdefg";        r1 = RandomStringUtils.random(50, set);        assertEquals("random(50, \"abcdefg\")", 50, r1.length());        for(int i = 0; i < r1.length(); i++) {            assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1);        }        r2 = RandomStringUtils.random(50, set);        assertTrue("!r1.equals(r2)", !r1.equals(r2));                r1 = RandomStringUtils.random(50, (String) null);        assertEquals("random(50) length", 50, r1.length());        r2 = RandomStringUtils.random(50, (String) null);        assertEquals("random(50) length", 50, r2.length());        assertTrue("!r1.equals(r2)", !r1.equals(r2));                set = "stuvwxyz";        r1 = RandomStringUtils.random(50, set.toCharArray());        assertEquals("random(50, \"stuvwxyz\")", 50, r1.length());        for(int i = 0; i < r1.length(); i++) {            assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1);        }        r2 = RandomStringUtils.random(50, set);        assertTrue("!r1.equals(r2)", !r1.equals(r2));                r1 = RandomStringUtils.random(50, (char[]) null);        assertEquals("random(50) length", 50, r1.length());        r2 = RandomStringUtils.random(50, (char[]) null);        assertEquals("random(50) length", 50, r2.length());        assertTrue("!r1.equals(r2)", !r1.equals(r2));        long seed = System.currentTimeMillis();        r1 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));        r2 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));        assertEquals("r1.equals(r2)", r1, r2);        r1 = RandomStringUtils.random(0);        assertEquals("random(0).equals(\"\")", "", r1);    }    public void testExceptions() {        try {            RandomStringUtils.random(-1);            fail();        } catch (IllegalArgumentException ex) {}        try {            RandomStringUtils.random(-1, true, true);            fail();        } catch (IllegalArgumentException ex) {}        try {            RandomStringUtils.random(-1, new char[0]);            fail();        } catch (IllegalArgumentException ex) {}        try {            RandomStringUtils.random(-1, "");            fail();        } catch (IllegalArgumentException ex) {}        try {            RandomStringUtils.random(-1, 'a', 'z', false, false);            fail();        } catch (IllegalArgumentException ex) {}        try {            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0]);            fail();        } catch (IllegalArgumentException ex) {}        try {            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0], new Random());            fail();        } catch (IllegalArgumentException ex) {}    }        /**     * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric     * This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7     */      public void testRandomAlphaNumeric() {        char[] testChars = {'a', 'z', 'A', 'Z', '0', '9'};        boolean[] found = {false, false, false, false, false, false};        for (int i = 0; i < 100; i++) {            String randString = RandomStringUtils.randomAlphanumeric(10);            for (int j = 0; j < testChars.length; j++) {                if (randString.indexOf(testChars[j]) > 0) {                    found[j] = true;                }            }        }        for (int i = 0; i < testChars.length; i++) {            if (!found[i]) {                fail("alphanumeric character not generated in 1000 attempts: "                    + testChars[i] +" -- repeated failures indicate a problem ");            }        }    }        /**     * Make sure '0' and '9' are generated by randomNumeric     * This test will fail randomly with probability = 2 * (9/10)**1000 ~ 3.5E-46     */      public void testRandomNumeric() {        char[] testChars = {'0','9'};        boolean[] found = {false, false};        for (int i = 0; i < 100; i++) {            String randString = RandomStringUtils.randomNumeric(10);            for (int j = 0; j < testChars.length; j++) {                if (randString.indexOf(testChars[j]) > 0) {                    found[j] = true;                }            }        }        for (int i = 0; i < testChars.length; i++) {            if (!found[i]) {                fail("digit not generated in 1000 attempts: "                    + testChars[i] +" -- repeated failures indicate a problem ");            }        }      }        /**     * Make sure boundary alpha characters are generated by randomAlphabetic     * This test will fail randomly with probability = 4 * (51/52)**1000 ~ 1.58E-8     */      public void testRandomAlphabetic() {        char[] testChars = {'a', 'z', 'A', 'Z'};        boolean[] found = {false, false, false, false};        for (int i = 0; i < 100; i++) {            String randString = RandomStringUtils.randomAlphabetic(10);            for (int j = 0; j < testChars.length; j++) {                if (randString.indexOf(testChars[j]) > 0) {                    found[j] = true;                }            }        }        for (int i = 0; i < testChars.length; i++) {            if (!found[i]) {                fail("alphanumeric character not generated in 1000 attempts: "                    + testChars[i] +" -- repeated failures indicate a problem ");            }        }    }        /**     * Make sure 32 and 127 are generated by randomNumeric     * This test will fail randomly with probability = 2*(95/96)**1000 ~ 5.7E-5     */      public void testRandomAscii() {        char[] testChars = {(char) 32, (char) 126};        boolean[] found = {false, false};        for (int i = 0; i < 100; i++) {            String randString = RandomStringUtils.randomAscii(10);            for (int j = 0; j < testChars.length; j++) {                if (randString.indexOf(testChars[j]) > 0) {                    found[j] = true;                }            }        }        for (int i = 0; i < testChars.length; i++) {            if (!found[i]) {                fail("ascii character not generated in 1000 attempts: "                 + (int) testChars[i] +                  " -- repeated failures indicate a problem");            }        }      }        /**      * Test homogeneity of random strings generated --     * i.e., test that characters show up with expected frequencies     * in generated strings.  Will fail randomly about 1 in 1000 times.     * Repeated failures indicate a problem.     */    public void testRandomStringUtilsHomog() {        String set = "abc";        char[] chars = set.toCharArray();        String gen = "";        int[] counts = {0,0,0};        int[] expected = {200,200,200};        for (int i = 0; i< 100; i++) {           gen = RandomStringUtils.random(6,chars);           for (int j = 0; j < 6; j++) {               switch (gen.charAt(j)) {                   case 'a': {counts[0]++; break;}                   case 'b': {counts[1]++; break;}                   case 'c': {counts[2]++; break;}                   default: {fail("generated character not in set");}               }           }        }         // Perform chi-square test with df = 3-1 = 2, testing at .001 level        assertTrue("test homogeneity -- will fail about 1 in 1000 times",            chiSquare(expected,counts) < 13.82);      }        /**     * Computes Chi-Square statistic given observed and expected counts     * @param observed array of observed frequency counts     * @param expected array of expected frequency counts     */    private double chiSquare(int[] expected, int[] observed) {        double sumSq = 0.0d;        double dev = 0.0d;        for (int i = 0; i< observed.length; i++) {            dev = (double)(observed[i] - expected[i]);            sumSq += dev*dev/(double)expected[i];        }        return sumSq;    }                       public static void main(String args[]) {        TestRunner.run(suite());    }}