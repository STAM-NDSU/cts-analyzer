/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.lang;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import junit.framework.AssertionFailedError;import junit.framework.TestCase;/* * This class was created to hold test cases for the parseCVS method extracted from DateUtilsTest in commons-lang. * The code was originally submitted by Serge Knystautas sergek@lokitech.com. It was never * fully implemented, and has been moved to the sandbox for further development. Recent discussion * from the commons-dev mailing list: * http://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=108904098032038&w=2 * Moving the code to the sandbox satisfies bug is a temporary solution to * http://issues.apache.org/bugzilla/show_bug.cgi?id=22172 but this issue needs to be considered * when the class/method is further developed. */public class DateFormatterTest extends TestCase {    /*     * Tests the parse method, which is supposed to handle various strings     * as flexibly as CVS supports.     */    public void testParseCVS() throws Exception {        try {            DateFormatter.parseCVS(null);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateFormatter.parseCVS("gobbledegook");            fail();        } catch (IllegalArgumentException ex) {}        try {            DateFormatter.parseCVS("ago");            fail();        } catch (IllegalArgumentException ex) {}        try {            DateFormatter.parseCVS("1 junk ago");            fail();        } catch (IllegalArgumentException ex) {}        try {            DateFormatter.parseCVS("1month ago");            fail();        } catch (IllegalArgumentException ex) {}        try {            DateFormatter.parseCVS("last month");            fail();        } catch (IllegalArgumentException ex) {}        //This is difficult to test since the "now" used in the        //  parse function cannot be controlled.  We could possibly control        //  it by trying before and after and making sure the value we expect        //  is between the two values calculated.        //For now we're just using the custom assertEquals that takes a delta        Calendar now = null;        // M/dd/yy H:mm:ss z        now = Calendar.getInstance();        now.set(Calendar.MILLISECOND, 0);        assertEquals("parseCVS format M/dd/yy H:mm:ss z",                  now, DateFormatter.parseCVS(new SimpleDateFormat("M/dd/yy H:mm:ss z").format(now.getTime())), 50);        // MMM d, yyyy h:mm a        now = Calendar.getInstance();        now.set(Calendar.MILLISECOND, 0);        now.set(Calendar.SECOND, 0);        assertEquals("parseCVS format MMM d, yyyy h:mm a",                  now, DateFormatter.parseCVS(new SimpleDateFormat("MMM d, yyyy h:mm a").format(now.getTime())), 50);        // h:mm z        //        // This format is difficult to test using the current time because the        // parseCVS method applies the default date of January 1, 1970 to the        // parsed time. The most straightforward way to test the parse is to        // pass in a known value, and test the output against this know value.        //         now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("16:30 GMT"));        assertEquals("parseCVS format h:mm z 16:30 GMT",                   now, DateFormatter.parseCVS("16:30 GMT"), 50);        now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("16:30 EST"));        assertEquals("parseCVS format h:mm z 16:30 EST",                   now, DateFormatter.parseCVS("16:30 EST"), 50);        now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("16:30 GMT-05:00"));        assertEquals("parseCVS format h:mm z 16:30 GMT-05:00",                   now, DateFormatter.parseCVS("16:30 GMT-05:00"), 50);        now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("16:30 GMT+01:00"));        assertEquals("parseCVS format h:mm z 16:30 GMT+01:00",                   now, DateFormatter.parseCVS("16:30 GMT+01:00"), 50);                now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("06:30 GMT"));        assertEquals("parseCVS format h:mm z 06:30 GMT",                   now, DateFormatter.parseCVS("06:30 GMT"), 50);        now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("06:30 EST"));        assertEquals("parseCVS format h:mm z 06:30 EST",                   now, DateFormatter.parseCVS("06:30 EST"), 50);        now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("06:30 GMT-05:00"));        assertEquals("parseCVS format h:mm z 06:30 GMT-05:00",                   now, DateFormatter.parseCVS("06:30 GMT-05:00"), 50);        now = Calendar.getInstance();        now.setTime(new SimpleDateFormat("h:mm z").parse("06:30 GMT+01:00"));        assertEquals("parseCVS format h:mm z 06:30 GMT+01:00",                   now, DateFormatter.parseCVS("06:30 GMT+01:00"), 50);                now = Calendar.getInstance();        now.add(Calendar.WEEK_OF_MONTH, -1);        assertEquals("parseCVS a week ago",                now, DateFormatter.parseCVS("a week ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.WEEK_OF_MONTH, -1);        assertEquals("parseCVS an week ago",                now, DateFormatter.parseCVS("an week ago"), 50);                now = Calendar.getInstance();        now.add(Calendar.DAY_OF_MONTH, -14);        assertEquals("parseCVS 1 fortnight ago",                now, DateFormatter.parseCVS("1 fortnight ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.DAY_OF_MONTH, -14);        assertEquals("parseCVS 1 fortnights ago",                now, DateFormatter.parseCVS("1 fortnights ago"), 50);                now = Calendar.getInstance();        now.add(Calendar.MINUTE, -1);        assertEquals("parseCVS 1 minute ago",                now, DateFormatter.parseCVS("1 minute ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.MINUTE, -8);        assertEquals("parseCVS 8 minutes ago",                now, DateFormatter.parseCVS("8 minutes ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.MILLISECOND, -1);        assertEquals("parseCVS 1 millisecond ago",                now, DateFormatter.parseCVS("1 millisecond ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.MILLISECOND, -100);        assertEquals("parseCVS 1 milliseconds ago",                now, DateFormatter.parseCVS("100 milliseconds ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.SECOND, -30);        assertEquals("parseCVS 30 second ago",                now, DateFormatter.parseCVS("30 second ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.SECOND, -30);        assertEquals("parseCVS 30 seconds ago",                now, DateFormatter.parseCVS("30 seconds ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.HOUR, -2);        assertEquals("parseCVS 2 hour ago",                now, DateFormatter.parseCVS("2 hour ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.HOUR, -2);        assertEquals("parseCVS 2 hours ago",                now, DateFormatter.parseCVS("2 hours ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.DAY_OF_MONTH, -2);        assertEquals("parseCVS 2 day ago",                now, DateFormatter.parseCVS("2 day ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.DAY_OF_MONTH, -2);        assertEquals("parseCVS 2 days ago",                now, DateFormatter.parseCVS("2 days ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.MONTH, -2);        assertEquals("parseCVS 2 month ago",                now, DateFormatter.parseCVS("2 month ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.MONTH, -2);        assertEquals("parseCVS 2 months ago",                now, DateFormatter.parseCVS("2 months ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.YEAR, -2);        assertEquals("parseCVS 2 year ago",                now, DateFormatter.parseCVS("2 year ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.YEAR, -2);        assertEquals("parseCVS 2 years ago",                now, DateFormatter.parseCVS("2 years ago"), 50);                now = Calendar.getInstance();        now.add(Calendar.DATE, -1);        assertEquals("parseCVS yesterday",                now, DateFormatter.parseCVS("yesterday"), 50);        now = Calendar.getInstance();        now.add(Calendar.DATE, 1);        assertEquals("parseCVS tomorrow",                now, DateFormatter.parseCVS("tomorrow"), 50);        now = Calendar.getInstance();        //Sunday would be 1, Saturday would be 7, so we walk back up to 6 days.        if (now.get(Calendar.DAY_OF_WEEK) == 1) {            //If Sunday already, we go back a full week            now.add(Calendar.DATE, -7);        } else {            now.add(Calendar.DATE, 1 - now.get(Calendar.DAY_OF_WEEK));        }        assertEquals("parseCVS last Sunday",                now, DateFormatter.parseCVS("last Sunday"), 50);        now = Calendar.getInstance();        now.add(Calendar.DATE, -7);        assertEquals("parseCVS last week",                now, DateFormatter.parseCVS("last week"), 50);                now = Calendar.getInstance();        //January would be 0, December would be 11, so we walk back up to 11 months        if (now.get(Calendar.MONTH) == 0) {            //If January already, we go back a full year            now.add(Calendar.MONTH, -12);        } else {            now.add(Calendar.MONTH, 0 - now.get(Calendar.MONTH));        }        assertEquals("parseCVS last January",                now, DateFormatter.parseCVS("last January"), 50);    }    /**     * Used to check that Calendar objects are close enough     * delta is in milliseconds     */    public static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {        if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {            throw new AssertionFailedError(                    message + " expected " + cal1.getTime() + " but got " + cal2.getTime());        }    }}
/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */// package org.apache.commons.lang;import java.text.DateFormat;import java.util.*;import junit.framework.AssertionFailedError;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.CalendarUtils}. * * @author <a href="mailto:sergek@lokitech.com">Serge Knystautas</a> */public class CalendarUtilsTest extends TestCase {    DateFormat parser = null;    Date date1 = null;    Date date2 = null;    public CalendarUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(CalendarUtilsTest.class);        suite.setName("CalendarUtilsTest Tests");        return suite;    }    protected void setUp() throws Exception {        super.setUp();        parser = new java.text.SimpleDateFormat("MMM dd, yyyy H:mm:ss.SSS");        date1 = parser.parse("February 12, 2002 12:34:56.789");        date2 = parser.parse("November 18, 2001 1:23:11.321");    }    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    /**     * Tests various values with the round method     */    public void testRound() throws Exception {        assertEquals("round year-1 failed",                new Date("2002 January 1"),                CalendarUtils.round(date1, Calendar.YEAR));        assertEquals("round year-2 failed",                new Date("2002 January 1"),                CalendarUtils.round(date2, Calendar.YEAR));        assertEquals("round month-1 failed",                new Date("2002 February 1"),                CalendarUtils.round(date1, Calendar.MONTH));        assertEquals("round month-2 failed",                new Date("2001 December 1"),                CalendarUtils.round(date2, Calendar.MONTH));        assertEquals("round semimonth-1 failed",                new Date("2002 February 16"),                CalendarUtils.round(date1, CalendarUtils.SEMI_MONTH));        assertEquals("round semimonth-2 failed",                new Date("2001 November 16"),                CalendarUtils.round(date2, CalendarUtils.SEMI_MONTH));        assertEquals("round date-1 failed",                new Date("2002 February 13"),                CalendarUtils.round(date1, Calendar.DATE));        assertEquals("round date-2 failed",                new Date("2001 November 18"),                CalendarUtils.round(date2, Calendar.DATE));        assertEquals("round hour-1 failed",                parser.parse("February 12, 2002 13:00:00.000"),                CalendarUtils.round(date1, Calendar.HOUR));        assertEquals("round hour-2 failed",                parser.parse("November 18, 2001 1:00:00.000"),                CalendarUtils.round(date2, Calendar.HOUR));        assertEquals("round minute-1 failed",                parser.parse("February 12, 2002 12:35:00.000"),                CalendarUtils.round(date1, Calendar.MINUTE));        assertEquals("round minute-2 failed",                parser.parse("November 18, 2001 1:23:00.000"),                CalendarUtils.round(date2, Calendar.MINUTE));        assertEquals("round second-1 failed",                parser.parse("February 12, 2002 12:34:57.000"),                CalendarUtils.round(date1, Calendar.SECOND));        assertEquals("round second-2 failed",                parser.parse("November 18, 2001 1:23:11.000"),                CalendarUtils.round(date2, Calendar.SECOND));    }    /**     * Tests various values with the trunc method     */    public void testTrunc() throws Exception {        assertEquals("trunc year-1 failed",                new Date("2002 January 1"),                CalendarUtils.trunc(date1, Calendar.YEAR));        assertEquals("trunc year-2 failed",                new Date("2001 January 1"),                CalendarUtils.trunc(date2, Calendar.YEAR));        assertEquals("trunc month-1 failed",                new Date("2002 February 1"),                CalendarUtils.trunc(date1, Calendar.MONTH));        assertEquals("trunc month-2 failed",                new Date("2001 November 1"),                CalendarUtils.trunc(date2, Calendar.MONTH));        assertEquals("trunc semimonth-1 failed",                new Date("2002 February 1"),                CalendarUtils.trunc(date1, CalendarUtils.SEMI_MONTH));        assertEquals("trunc semimonth-2 failed",                new Date("2001 November 16"),                CalendarUtils.trunc(date2, CalendarUtils.SEMI_MONTH));        assertEquals("trunc date-1 failed",                new Date("2002 February 12"),                CalendarUtils.trunc(date1, Calendar.DATE));        assertEquals("trunc date-2 failed",                new Date("2001 November 18"),                CalendarUtils.trunc(date2, Calendar.DATE));        assertEquals("trunc hour-1 failed",                parser.parse("February 12, 2002 12:00:00.000"),                CalendarUtils.trunc(date1, Calendar.HOUR));        assertEquals("trunc hour-2 failed",                parser.parse("November 18, 2001 1:00:00.000"),                CalendarUtils.trunc(date2, Calendar.HOUR));        assertEquals("trunc minute-1 failed",                parser.parse("February 12, 2002 12:34:00.000"),                CalendarUtils.trunc(date1, Calendar.MINUTE));        assertEquals("trunc minute-2 failed",                parser.parse("November 18, 2001 1:23:00.000"),                CalendarUtils.trunc(date2, Calendar.MINUTE));        assertEquals("trunc second-1 failed",                parser.parse("February 12, 2002 12:34:56.000"),                CalendarUtils.trunc(date1, Calendar.SECOND));        assertEquals("trunc second-2 failed",                parser.parse("November 18, 2001 1:23:11.000"),                CalendarUtils.trunc(date2, Calendar.SECOND));    }    /**     * Tests the parse method, which is supposed to handle various strings     * as flexibly as CVS supports.     */    public void testParse() throws Exception {        //This is difficult to test since the "now" used in the        //  parse function cannot be controlled.  We could possibly control        //  it by trying before and after and making sure the value we expect        //  is between the two values calculated.        //For now we're just using the custom assertEquals that takes a delta        Calendar now = null;        now = Calendar.getInstance();        now.add(Calendar.MINUTE, -1);        assertEquals("parse 1 minute ago",                now, CalendarUtils.parse("1 minute ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.MINUTE, -8);        assertEquals("parse 8 minutes ago",                now, CalendarUtils.parse("8 minutes ago"), 50);        now = Calendar.getInstance();        now.add(Calendar.DATE, -1);        assertEquals("parse yesterday",                now, CalendarUtils.parse("yesterday"), 50);        now = Calendar.getInstance();        now.add(Calendar.DATE, 1);        assertEquals("parse tomorrow",                now, CalendarUtils.parse("tomorrow"), 50);        now = Calendar.getInstance();        //Sunday would be 1, Saturday would be 7, so we walk back up to 6 days.        if (now.get(Calendar.DATE) == 1) {            //If Sunday already, we go back a full week            now.add(Calendar.DATE, -7);        } else {            now.add(Calendar.DATE, 1 - now.get(Calendar.DAY_OF_WEEK));        }        assertEquals("parse last Sunday",                now, CalendarUtils.parse("last Sunday"), 50);        now = Calendar.getInstance();        now.add(Calendar.DATE, -7);        assertEquals("parse last week",                now, CalendarUtils.parse("last week"), 50);        now = Calendar.getInstance();        //January would be 0, December would be 11, so we walk back up to 11 months        if (now.get(Calendar.MONTH) == 0) {            //If January already, we go back a full year            now.add(Calendar.MONTH, -12);        } else {            now.add(Calendar.MONTH, 0 - now.get(Calendar.MONTH));        }        assertEquals("parse last January",                now, CalendarUtils.parse("last January"), 50);    }    /**     * Tests the calendar iterator for week ranges     */    public void testWeekIterator() throws Exception {        Calendar now = Calendar.getInstance();        Calendar today = CalendarUtils.trunc(now, Calendar.DATE);        Calendar sunday = CalendarUtils.trunc(now, Calendar.DATE);        sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));        Calendar monday = CalendarUtils.trunc(now, Calendar.DATE);        if (monday.get(Calendar.DATE) == 1) {            //This is sunday... roll back 6 days            monday.add(Calendar.DATE, -6);        } else {            monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));        }        Calendar centered = CalendarUtils.trunc(now, Calendar.DATE);        centered.add(Calendar.DATE, -3);        Iterator it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_SUNDAY);        assertWeekIterator(it, sunday);        it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_MONDAY);        assertWeekIterator(it, monday);        it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_RELATIVE);        assertWeekIterator(it, today);        it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_CENTER);        assertWeekIterator(it, centered);    }    /**     * Tests the calendar iterator for month-based ranges     */    public void testMonthIterator() throws Exception {        Iterator it = CalendarUtils.getCalendarIterator(date1, CalendarUtils.RANGE_MONTH_SUNDAY);        assertWeekIterator(it,                new Date("January 27, 2002"),                new Date("March 2, 2002"));        it = CalendarUtils.getCalendarIterator(date1, CalendarUtils.RANGE_MONTH_MONDAY);        assertWeekIterator(it,                new Date("January 28, 2002"),                new Date("March 3, 2002"));        it = CalendarUtils.getCalendarIterator(date2, CalendarUtils.RANGE_MONTH_SUNDAY);        assertWeekIterator(it,                new Date("October 28, 2001"),                new Date("December 1, 2001"));        it = CalendarUtils.getCalendarIterator(date2, CalendarUtils.RANGE_MONTH_MONDAY);        assertWeekIterator(it,                new Date("October 29, 2001"),                new Date("December 2, 2001"));    }    /**     * This checks that this is a 7 element iterator of Calendar objects     * that are dates (no time), and exactly 1 day spaced after each other.     */    private static void assertWeekIterator(Iterator it, Calendar start) {        Calendar end = (Calendar) start.clone();        end.add(Calendar.DATE, 6);        assertWeekIterator(it, start, end);    }    /**     * Convenience method for when working with Date objects     */    private static void assertWeekIterator(Iterator it, Date start, Date end) {        Calendar calStart = Calendar.getInstance();        calStart.setTime(start);        Calendar calEnd = Calendar.getInstance();        calEnd.setTime(end);        assertWeekIterator(it, calStart, calEnd);    }    /**     * This checks that this is a 7 divisble iterator of Calendar objects     * that are dates (no time), and exactly 1 day spaced after each other     * (in addition to the proper start and stop dates)     */    private static void assertWeekIterator(Iterator it, Calendar start, Calendar end) {        Calendar cal = (Calendar) it.next();        assertEquals("", start, cal, 0);        Calendar last = null;        int count = 1;        while (it.hasNext()) {            //Check this is just a date (no time component)            assertEquals("", cal, CalendarUtils.trunc(cal, Calendar.DATE), 0);            last = cal;            cal = (Calendar) it.next();            count++;            //Check that this is one day more than the last date            last.add(Calendar.DATE, 1);            assertEquals("", last, cal, 0);        }        if (count % 7 != 0) {            throw new AssertionFailedError("There were " + count + " days in this iterator");        }        assertEquals("", end, cal, 0);    }    /**     * Used to check that Calendar objects are close enough     * delta is in milliseconds     */    public static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {        if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {            throw new AssertionFailedError(                    message + " expected " + cal1.getTime() + " but got " + cal2.getTime());        }    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.reflect;import java.lang.reflect.Field;import org.apache.commons.lang.reflect.testbed.Ambig;import org.apache.commons.lang.reflect.testbed.Foo;import org.apache.commons.lang.reflect.testbed.PrivatelyShadowedChild;import org.apache.commons.lang.reflect.testbed.PublicChild;import org.apache.commons.lang.reflect.testbed.PubliclyShadowedChild;import org.apache.commons.lang.reflect.testbed.StaticContainer;import org.apache.commons.lang.reflect.testbed.StaticContainerChild;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Unit tests FieldUtils * @author mbenson * @version $Id$ */public class FieldUtilsTest extends TestCase {    static final String S = "s";    static final String SS = "ss";    static final Integer I0 = new Integer(0);    static final Integer I1 = new Integer(1);    static final Double D0 = new Double(0.0);    static final Double D1 = new Double(1.0);    private PublicChild publicChild;    private PubliclyShadowedChild publiclyShadowedChild;    private PrivatelyShadowedChild privatelyShadowedChild;    private Class parentClass = PublicChild.class.getSuperclass();    /**     * Run the test cases as a suite.     * @return the Test     */    public static Test suite() {        TestSuite suite = new TestSuite(FieldUtilsTest.class);        suite.setName("FieldUtils Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();        StaticContainer.reset();        publicChild = new PublicChild();        publiclyShadowedChild = new PubliclyShadowedChild();        privatelyShadowedChild = new PrivatelyShadowedChild();    }    public void testGetField() {        assertEquals(Foo.class, FieldUtils.getField(PublicChild.class, "VALUE").getDeclaringClass());        assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "s").getDeclaringClass());        assertNull(FieldUtils.getField(PublicChild.class, "b"));        assertNull(FieldUtils.getField(PublicChild.class, "i"));        assertNull(FieldUtils.getField(PublicChild.class, "d"));        assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, "VALUE").getDeclaringClass());        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "s")                .getDeclaringClass());        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "b")                .getDeclaringClass());        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "i")                .getDeclaringClass());        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "d")                .getDeclaringClass());        assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, "VALUE").getDeclaringClass());        assertEquals(parentClass, FieldUtils.getField(PrivatelyShadowedChild.class, "s").getDeclaringClass());        assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, "b"));        assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, "i"));        assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, "d"));    }    public void testGetFieldForceAccess() {        assertEquals(PublicChild.class, FieldUtils.getField(PublicChild.class, "VALUE", true).getDeclaringClass());        assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "s", true).getDeclaringClass());        assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "b", true).getDeclaringClass());        assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "i", true).getDeclaringClass());        assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "d", true).getDeclaringClass());        assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, "VALUE", true).getDeclaringClass());        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "s", true)                .getDeclaringClass());        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "b", true)                .getDeclaringClass());        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "i", true)                .getDeclaringClass());        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "d", true)                .getDeclaringClass());        assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, "VALUE", true).getDeclaringClass());        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "s", true)                .getDeclaringClass());        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "b", true)                .getDeclaringClass());        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "i", true)                .getDeclaringClass());        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "d", true)                .getDeclaringClass());    }    public void testGetDeclaredField() {        assertNull(FieldUtils.getDeclaredField(PublicChild.class, "VALUE"));        assertNull(FieldUtils.getDeclaredField(PublicChild.class, "s"));        assertNull(FieldUtils.getDeclaredField(PublicChild.class, "b"));        assertNull(FieldUtils.getDeclaredField(PublicChild.class, "i"));        assertNull(FieldUtils.getDeclaredField(PublicChild.class, "d"));        assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "VALUE"));        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "s")                .getDeclaringClass());        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "b")                .getDeclaringClass());        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "i")                .getDeclaringClass());        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "d")                .getDeclaringClass());        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "VALUE"));        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "s"));        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "b"));        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "i"));        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "d"));    }    public void testGetDeclaredFieldForceAccess() {        assertEquals(PublicChild.class, FieldUtils.getDeclaredField(PublicChild.class, "VALUE", true)                .getDeclaringClass());        assertNull(FieldUtils.getDeclaredField(PublicChild.class, "s", true));        assertNull(FieldUtils.getDeclaredField(PublicChild.class, "b", true));        assertNull(FieldUtils.getDeclaredField(PublicChild.class, "i", true));        assertNull(FieldUtils.getDeclaredField(PublicChild.class, "d", true));        assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "VALUE", true));        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "s", true)                .getDeclaringClass());        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "b", true)                .getDeclaringClass());        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "i", true)                .getDeclaringClass());        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "d", true)                .getDeclaringClass());        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "VALUE", true));        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "s", true)                .getDeclaringClass());        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "b", true)                .getDeclaringClass());        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "i", true)                .getDeclaringClass());        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "d", true)                .getDeclaringClass());    }    public void testReadStaticField() throws Exception {        assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE")));    }    public void testReadStaticFieldForceAccess() throws Exception {        assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE")));        assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(PublicChild.class, "VALUE")));    }    public void testReadNamedStaticField() throws Exception {        assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE"));        assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE"));        assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE"));        assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, "VALUE"));    }    public void testReadNamedStaticFieldForceAccess() throws Exception {        assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE", true));        assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE", true));        assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE", true));        assertEquals("child", FieldUtils.readStaticField(PublicChild.class, "VALUE", true));    }    public void testReadDeclaredNamedStaticField() throws Exception {        assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE"));        try {            assertEquals("child", FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }    }    public void testReadDeclaredNamedStaticFieldForceAccess() throws Exception {        assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE", true));        assertEquals("child", FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE", true));        try {            assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE", true));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE", true));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }    }    public void testReadField() throws Exception {        Field parentS = FieldUtils.getDeclaredField(parentClass, "s");        assertEquals("s", FieldUtils.readField(parentS, publicChild));        assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild));        assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild));        Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true);        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild));        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild));        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild));        Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true);        assertEquals(I0, FieldUtils.readField(parentI, publicChild));        assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild));        assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild));        Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true);        assertEquals(D0, FieldUtils.readField(parentD, publicChild));        assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild));        assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild));    }    public void testReadFieldForceAccess() throws Exception {        Field parentS = FieldUtils.getDeclaredField(parentClass, "s");        parentS.setAccessible(false);        assertEquals("s", FieldUtils.readField(parentS, publicChild, true));        assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild, true));        assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild, true));        Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true);        parentB.setAccessible(false);        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild, true));        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild, true));        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild, true));        Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true);        parentI.setAccessible(false);        assertEquals(I0, FieldUtils.readField(parentI, publicChild, true));        assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild, true));        assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild, true));        Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true);        parentD.setAccessible(false);        assertEquals(D0, FieldUtils.readField(parentD, publicChild, true));        assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild, true));        assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild, true));    }    public void testReadNamedField() throws Exception {        assertEquals("s", FieldUtils.readField(publicChild, "s"));        assertEquals("ss", FieldUtils.readField(publiclyShadowedChild, "s"));        assertEquals("s", FieldUtils.readField(privatelyShadowedChild, "s"));        try {            assertEquals(Boolean.FALSE, FieldUtils.readField(publicChild, "b"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, "b"));        try {            assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, "b"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            assertEquals(I0, FieldUtils.readField(publicChild, "i"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, "i"));        try {            assertEquals(I0, FieldUtils.readField(privatelyShadowedChild, "i"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            assertEquals(D0, FieldUtils.readField(publicChild, "d"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, "d"));        try {            assertEquals(D0, FieldUtils.readField(privatelyShadowedChild, "d"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }    }    public void testReadNamedFieldForceAccess() throws Exception {        assertEquals("s", FieldUtils.readField(publicChild, "s", true));        assertEquals("ss", FieldUtils.readField(publiclyShadowedChild, "s", true));        assertEquals("ss", FieldUtils.readField(privatelyShadowedChild, "s", true));        assertEquals(Boolean.FALSE, FieldUtils.readField(publicChild, "b", true));        assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, "b", true));        assertEquals(Boolean.TRUE, FieldUtils.readField(privatelyShadowedChild, "b", true));        assertEquals(I0, FieldUtils.readField(publicChild, "i", true));        assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, "i", true));        assertEquals(I1, FieldUtils.readField(privatelyShadowedChild, "i", true));        assertEquals(D0, FieldUtils.readField(publicChild, "d", true));        assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, "d", true));        assertEquals(D1, FieldUtils.readField(privatelyShadowedChild, "d", true));    }    public void testReadDeclaredNamedField() throws Exception {        try {            assertEquals("s", FieldUtils.readDeclaredField(publicChild, "s"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s"));        try {            assertEquals("s", FieldUtils.readDeclaredField(privatelyShadowedChild, "s"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, "b"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b"));        try {            assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            assertEquals(I0, FieldUtils.readDeclaredField(publicChild, "i"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i"));        try {            assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, "i"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            assertEquals(D0, FieldUtils.readDeclaredField(publicChild, "d"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d"));        try {            assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, "d"));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }    }    public void testReadDeclaredNamedFieldForceAccess() throws Exception {        try {            assertEquals("s", FieldUtils.readDeclaredField(publicChild, "s", true));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s", true));        assertEquals("ss", FieldUtils.readDeclaredField(privatelyShadowedChild, "s", true));        try {            assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, "b", true));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b", true));        assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b", true));        try {            assertEquals(I0, FieldUtils.readDeclaredField(publicChild, "i", true));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i", true));        assertEquals(I1, FieldUtils.readDeclaredField(privatelyShadowedChild, "i", true));        try {            assertEquals(D0, FieldUtils.readDeclaredField(publicChild, "d", true));            fail("expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d", true));        assertEquals(D1, FieldUtils.readDeclaredField(privatelyShadowedChild, "d", true));    }    public void testWriteStaticField() throws Exception {        Field field = StaticContainer.class.getDeclaredField("mutablePublic");        FieldUtils.writeStaticField(field, "new");        assertEquals("new", StaticContainer.mutablePublic);        field = StaticContainer.class.getDeclaredField("mutableProtected");        try {            FieldUtils.writeStaticField(field, "new");            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        field = StaticContainer.class.getDeclaredField("mutablePackage");        try {            FieldUtils.writeStaticField(field, "new");            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        field = StaticContainer.class.getDeclaredField("mutablePrivate");        try {            FieldUtils.writeStaticField(field, "new");            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        field = StaticContainer.class.getDeclaredField("IMMUTABLE_PUBLIC");        try {            FieldUtils.writeStaticField(field, "new");            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        field = StaticContainer.class.getDeclaredField("IMMUTABLE_PROTECTED");        try {            FieldUtils.writeStaticField(field, "new");            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        field = StaticContainer.class.getDeclaredField("IMMUTABLE_PACKAGE");        try {            FieldUtils.writeStaticField(field, "new");            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        field = StaticContainer.class.getDeclaredField("IMMUTABLE_PRIVATE");        try {            FieldUtils.writeStaticField(field, "new");            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }    }    public void testWriteStaticFieldForceAccess() throws Exception {        Field field = StaticContainer.class.getDeclaredField("mutablePublic");        FieldUtils.writeStaticField(field, "new", true);        assertEquals("new", StaticContainer.mutablePublic);        field = StaticContainer.class.getDeclaredField("mutableProtected");        FieldUtils.writeStaticField(field, "new", true);        assertEquals("new", StaticContainer.getMutableProtected());        field = StaticContainer.class.getDeclaredField("mutablePackage");        FieldUtils.writeStaticField(field, "new", true);        assertEquals("new", StaticContainer.getMutablePackage());        field = StaticContainer.class.getDeclaredField("mutablePrivate");        FieldUtils.writeStaticField(field, "new", true);        assertEquals("new", StaticContainer.getMutablePrivate());        field = StaticContainer.class.getDeclaredField("IMMUTABLE_PUBLIC");        try {            FieldUtils.writeStaticField(field, "new", true);            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        field = StaticContainer.class.getDeclaredField("IMMUTABLE_PROTECTED");        try {            FieldUtils.writeStaticField(field, "new", true);            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        field = StaticContainer.class.getDeclaredField("IMMUTABLE_PACKAGE");        try {            FieldUtils.writeStaticField(field, "new", true);            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        field = StaticContainer.class.getDeclaredField("IMMUTABLE_PRIVATE");        try {            FieldUtils.writeStaticField(field, "new", true);            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }    }    public void testWriteNamedStaticField() throws Exception {        FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new");        assertEquals("new", StaticContainer.mutablePublic);        try {            FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new");            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new");            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new");            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new");            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        try {            FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new");            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new");            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new");            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }    }    public void testWriteNamedStaticFieldForceAccess() throws Exception {        FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new", true);        assertEquals("new", StaticContainer.mutablePublic);        FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new", true);        assertEquals("new", StaticContainer.getMutableProtected());        FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new", true);        assertEquals("new", StaticContainer.getMutablePackage());        FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new", true);        assertEquals("new", StaticContainer.getMutablePrivate());        try {            FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new", true);            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        try {            FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new", true);            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        try {            FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new", true);            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        try {            FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new", true);            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }    }    public void testWriteDeclaredNamedStaticField() throws Exception {        FieldUtils.writeStaticField(StaticContainer.class, "mutablePublic", "new");        assertEquals("new", StaticContainer.mutablePublic);        try {            FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new");            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new");            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new");            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new");            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        try {            FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new");            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new");            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new");            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }    }    public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception {        FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePublic", "new", true);        assertEquals("new", StaticContainer.mutablePublic);        FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new", true);        assertEquals("new", StaticContainer.getMutableProtected());        FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new", true);        assertEquals("new", StaticContainer.getMutablePackage());        FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new", true);        assertEquals("new", StaticContainer.getMutablePrivate());        try {            FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new", true);            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        try {            FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new", true);            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        try {            FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new", true);            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        try {            FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new", true);            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }    }    public void testWriteField() throws Exception {        Field field = parentClass.getDeclaredField("s");        FieldUtils.writeField(field, publicChild, "S");        assertEquals("S", field.get(publicChild));        field = parentClass.getDeclaredField("b");        try {            FieldUtils.writeField(field, publicChild, Boolean.TRUE);            fail("Expected IllegalAccessException");        } catch (IllegalAccessException e) {            // pass        }        field = parentClass.getDeclaredField("i");        try {            FieldUtils.writeField(field, publicChild, new Integer(Integer.MAX_VALUE));        } catch (IllegalAccessException e) {            // pass        }        field = parentClass.getDeclaredField("d");        try {            FieldUtils.writeField(field, publicChild, new Double(Double.MAX_VALUE));        } catch (IllegalAccessException e) {            // pass        }    }    public void testWriteFieldForceAccess() throws Exception {        Field field = parentClass.getDeclaredField("s");        FieldUtils.writeField(field, publicChild, "S", true);        assertEquals("S", field.get(publicChild));        field = parentClass.getDeclaredField("b");        FieldUtils.writeField(field, publicChild, Boolean.TRUE, true);        assertEquals(Boolean.TRUE, field.get(publicChild));        field = parentClass.getDeclaredField("i");        FieldUtils.writeField(field, publicChild, new Integer(Integer.MAX_VALUE), true);        assertEquals(new Integer(Integer.MAX_VALUE), field.get(publicChild));        field = parentClass.getDeclaredField("d");        FieldUtils.writeField(field, publicChild, new Double(Double.MAX_VALUE), true);        assertEquals(new Double(Double.MAX_VALUE), field.get(publicChild));    }    public void testWriteNamedField() throws Exception {        FieldUtils.writeField(publicChild, "s", "S");        assertEquals("S", FieldUtils.readField(publicChild, "s"));        try {            FieldUtils.writeField(publicChild, "b", Boolean.TRUE);            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeField(publicChild, "i", new Integer(1));            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeField(publicChild, "d", new Double(1.0));            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        FieldUtils.writeField(publiclyShadowedChild, "s", "S");        assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s"));        FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE);        assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b"));        FieldUtils.writeField(publiclyShadowedChild, "i", new Integer(0));        assertEquals(new Integer(0), FieldUtils.readField(publiclyShadowedChild, "i"));        FieldUtils.writeField(publiclyShadowedChild, "d", new Double(0.0));        assertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, "d"));        FieldUtils.writeField(privatelyShadowedChild, "s", "S");        assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s"));        try {            FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE);            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeField(privatelyShadowedChild, "i", new Integer(1));            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeField(privatelyShadowedChild, "d", new Double(1.0));            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }    }    public void testWriteNamedFieldForceAccess() throws Exception {        FieldUtils.writeField(publicChild, "s", "S", true);        assertEquals("S", FieldUtils.readField(publicChild, "s", true));        FieldUtils.writeField(publicChild, "b", Boolean.TRUE, true);        assertEquals(Boolean.TRUE, FieldUtils.readField(publicChild, "b", true));        FieldUtils.writeField(publicChild, "i", new Integer(1), true);        assertEquals(new Integer(1), FieldUtils.readField(publicChild, "i", true));        FieldUtils.writeField(publicChild, "d", new Double(1.0), true);        assertEquals(new Double(1.0), FieldUtils.readField(publicChild, "d", true));        FieldUtils.writeField(publiclyShadowedChild, "s", "S", true);        assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s", true));        FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE, true);        assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b", true));        FieldUtils.writeField(publiclyShadowedChild, "i", new Integer(0), true);        assertEquals(new Integer(0), FieldUtils.readField(publiclyShadowedChild, "i", true));        FieldUtils.writeField(publiclyShadowedChild, "d", new Double(0.0), true);        assertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, "d", true));        FieldUtils.writeField(privatelyShadowedChild, "s", "S", true);        assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s", true));        FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.FALSE, true);        assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, "b", true));        FieldUtils.writeField(privatelyShadowedChild, "i", new Integer(0), true);        assertEquals(new Integer(0), FieldUtils.readField(privatelyShadowedChild, "i", true));        FieldUtils.writeField(privatelyShadowedChild, "d", new Double(0.0), true);        assertEquals(new Double(0.0), FieldUtils.readField(privatelyShadowedChild, "d", true));    }    public void testWriteDeclaredNamedField() throws Exception {        try {            FieldUtils.writeDeclaredField(publicChild, "s", "S");            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeDeclaredField(publicChild, "b", Boolean.TRUE);            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeDeclaredField(publicChild, "i", new Integer(1));            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeDeclaredField(publicChild, "d", new Double(1.0));            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        FieldUtils.writeDeclaredField(publiclyShadowedChild, "s", "S");        assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s"));        FieldUtils.writeDeclaredField(publiclyShadowedChild, "b", Boolean.FALSE);        assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b"));        FieldUtils.writeDeclaredField(publiclyShadowedChild, "i", new Integer(0));        assertEquals(new Integer(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i"));        FieldUtils.writeDeclaredField(publiclyShadowedChild, "d", new Double(0.0));        assertEquals(new Double(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d"));        try {            FieldUtils.writeDeclaredField(privatelyShadowedChild, "s", "S");            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeDeclaredField(privatelyShadowedChild, "b", Boolean.TRUE);            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeDeclaredField(privatelyShadowedChild, "i", new Integer(1));            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeDeclaredField(privatelyShadowedChild, "d", new Double(1.0));            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }    }    public void testWriteDeclaredNamedFieldForceAccess() throws Exception {        try {            FieldUtils.writeDeclaredField(publicChild, "s", "S", true);            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeDeclaredField(publicChild, "b", Boolean.TRUE, true);            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeDeclaredField(publicChild, "i", new Integer(1), true);            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        try {            FieldUtils.writeDeclaredField(publicChild, "d", new Double(1.0), true);            fail("Expected IllegalArgumentException");        } catch (IllegalArgumentException e) {            // pass        }        FieldUtils.writeDeclaredField(publiclyShadowedChild, "s", "S", true);        assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s", true));        FieldUtils.writeDeclaredField(publiclyShadowedChild, "b", Boolean.FALSE, true);        assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b", true));        FieldUtils.writeDeclaredField(publiclyShadowedChild, "i", new Integer(0), true);        assertEquals(new Integer(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i", true));        FieldUtils.writeDeclaredField(publiclyShadowedChild, "d", new Double(0.0), true);        assertEquals(new Double(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d", true));        FieldUtils.writeDeclaredField(privatelyShadowedChild, "s", "S", true);        assertEquals("S", FieldUtils.readDeclaredField(privatelyShadowedChild, "s", true));        FieldUtils.writeDeclaredField(privatelyShadowedChild, "b", Boolean.FALSE, true);        assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b", true));        FieldUtils.writeDeclaredField(privatelyShadowedChild, "i", new Integer(0), true);        assertEquals(new Integer(0), FieldUtils.readDeclaredField(privatelyShadowedChild, "i", true));        FieldUtils.writeDeclaredField(privatelyShadowedChild, "d", new Double(0.0), true);        assertEquals(new Double(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, "d", true));    }    public void testAmbig() {        try {            FieldUtils.getField(Ambig.class, "VALUE");            fail("should have failed on interface field ambiguity");        } catch (IllegalArgumentException e) {            // pass        }    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.reflect;import java.lang.reflect.Method;import java.util.Arrays;import java.util.HashMap;import java.util.Map;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import org.apache.commons.lang.ArrayUtils;import org.apache.commons.lang.math.NumberUtils;import org.apache.commons.lang.mutable.Mutable;import org.apache.commons.lang.mutable.MutableObject;/** * Unit tests MethodUtils * @author mbenson * @version $Id$ */public class MethodUtilsTest extends TestCase {    public static class TestBean {        public static String bar() {            return "bar()";        }        public static String bar(int i) {            return "bar(int)";        }        public static String bar(Integer i) {            return "bar(Integer)";        }        public static String bar(double d) {            return "bar(double)";        }        public static String bar(String s) {            return "bar(String)";        }        public static String bar(Object o) {            return "bar(Object)";        }        public String foo() {            return "foo()";        }        public String foo(int i) {            return "foo(int)";        }        public String foo(Integer i) {            return "foo(Integer)";        }        public String foo(double d) {            return "foo(double)";        }        public String foo(String s) {            return "foo(String)";        }        public String foo(Object o) {            return "foo(Object)";        }    }    private static class TestMutable implements Mutable {        public Object getValue() {            return null;        }        public void setValue(Object value) {        }    }    private TestBean testBean;    private Map classCache;    public MethodUtilsTest(String name) {        super(name);        classCache = new HashMap();    }    /**     * Run the test cases as a suite.     * @return the Test     */    public static Test suite() {        TestSuite suite = new TestSuite(MethodUtilsTest.class);        suite.setName("MethodUtils Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();        testBean = new TestBean();        classCache.clear();    }    public void testConstructor() throws Exception {        assertNotNull(MethodUtils.class.newInstance());    }    public void testInvokeMethod() throws Exception {        assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo",                ArrayUtils.EMPTY_CLASS_ARRAY));        assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo",                (Class[]) null));        assertEquals("foo(String)", MethodUtils.invokeMethod(testBean, "foo",                ""));        assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo",                new Object()));        assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo",                Boolean.TRUE));        assertEquals("foo(Integer)", MethodUtils.invokeMethod(testBean, "foo",                NumberUtils.INTEGER_ONE));        assertEquals("foo(int)", MethodUtils.invokeMethod(testBean, "foo",                NumberUtils.BYTE_ONE));        assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo",                NumberUtils.LONG_ONE));        assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo",                NumberUtils.DOUBLE_ONE));    }    public void testInvokeExactMethod() throws Exception {        assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo",                ArrayUtils.EMPTY_CLASS_ARRAY));        assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo",                (Class[]) null));        assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean,                "foo", ""));        assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean,                "foo", new Object()));        assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean,                "foo", NumberUtils.INTEGER_ONE));        assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean,                "foo", new Object[] { NumberUtils.DOUBLE_ONE },                new Class[] { Double.TYPE }));        try {            MethodUtils                    .invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE);            fail("should throw NoSuchMethodException");        } catch (NoSuchMethodException e) {        }        try {            MethodUtils                    .invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE);            fail("should throw NoSuchMethodException");        } catch (NoSuchMethodException e) {        }        try {            MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE);            fail("should throw NoSuchMethodException");        } catch (NoSuchMethodException e) {        }    }    public void testInvokeStaticMethod() throws Exception {        assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class,                "bar", ArrayUtils.EMPTY_CLASS_ARRAY));        assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class,                "bar", (Class[]) null));        assertEquals("bar(String)", MethodUtils.invokeStaticMethod(                TestBean.class, "bar", ""));        assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(                TestBean.class, "bar", new Object()));        assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(                TestBean.class, "bar", Boolean.TRUE));        assertEquals("bar(Integer)", MethodUtils.invokeStaticMethod(                TestBean.class, "bar", NumberUtils.INTEGER_ONE));        assertEquals("bar(int)", MethodUtils.invokeStaticMethod(TestBean.class,                "bar", NumberUtils.BYTE_ONE));        assertEquals("bar(double)", MethodUtils.invokeStaticMethod(                TestBean.class, "bar", NumberUtils.LONG_ONE));        assertEquals("bar(double)", MethodUtils.invokeStaticMethod(                TestBean.class, "bar", NumberUtils.DOUBLE_ONE));    }    public void testInvokeExactStaticMethod() throws Exception {        assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class,                "bar", ArrayUtils.EMPTY_CLASS_ARRAY));        assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class,                "bar", (Class[]) null));        assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod(                TestBean.class, "bar", ""));        assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod(                TestBean.class, "bar", new Object()));        assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod(                TestBean.class, "bar", NumberUtils.INTEGER_ONE));        assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod(                TestBean.class, "bar", new Object[] { NumberUtils.DOUBLE_ONE },                new Class[] { Double.TYPE }));        try {            MethodUtils.invokeExactStaticMethod(TestBean.class, "bar",                    NumberUtils.BYTE_ONE);            fail("should throw NoSuchMethodException");        } catch (NoSuchMethodException e) {        }        try {            MethodUtils.invokeExactStaticMethod(TestBean.class, "bar",                    NumberUtils.LONG_ONE);            fail("should throw NoSuchMethodException");        } catch (NoSuchMethodException e) {        }        try {            MethodUtils.invokeExactStaticMethod(TestBean.class, "bar",                    Boolean.TRUE);            fail("should throw NoSuchMethodException");        } catch (NoSuchMethodException e) {        }    }    public void testGetAccessibleInterfaceMethod() throws Exception {        Class[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };        for (int i = 0; i < p.length; i++) {            Method method = TestMutable.class.getMethod("getValue", p[i]);            Method accessibleMethod = MethodUtils.getAccessibleMethod(method);            assertNotSame(accessibleMethod, method);            assertSame(Mutable.class, accessibleMethod.getDeclaringClass());        }    }    public void testGetAccessibleInterfaceMethodFromDescription()            throws Exception {        Class[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };        for (int i = 0; i < p.length; i++) {            Method accessibleMethod = MethodUtils.getAccessibleMethod(                    TestMutable.class, "getValue", p[i]);            assertSame(Mutable.class, accessibleMethod.getDeclaringClass());        }    }    public void testGetAccessiblePublicMethod() throws Exception {        assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(                MutableObject.class.getMethod("getValue",                        ArrayUtils.EMPTY_CLASS_ARRAY)).getDeclaringClass());    }    public void testGetAccessiblePublicMethodFromDescription() throws Exception {        assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(                MutableObject.class, "getValue", ArrayUtils.EMPTY_CLASS_ARRAY)                .getDeclaringClass());    }    public void testGetMatchingAccessibleMethod() throws Exception {        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY);        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                null, ArrayUtils.EMPTY_CLASS_ARRAY);        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(String.class), singletonArray(String.class));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Object.class), singletonArray(Object.class));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Boolean.class), singletonArray(Object.class));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Byte.class), singletonArray(Integer.TYPE));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Byte.TYPE), singletonArray(Integer.TYPE));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Short.class), singletonArray(Integer.TYPE));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Short.TYPE), singletonArray(Integer.TYPE));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Character.class), singletonArray(Integer.TYPE));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Character.TYPE), singletonArray(Integer.TYPE));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Integer.class), singletonArray(Integer.class));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Integer.TYPE), singletonArray(Integer.TYPE));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Long.class), singletonArray(Double.TYPE));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Long.TYPE), singletonArray(Double.TYPE));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Float.class), singletonArray(Double.TYPE));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Float.TYPE), singletonArray(Double.TYPE));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Double.class), singletonArray(Double.TYPE));        expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",                singletonArray(Double.TYPE), singletonArray(Double.TYPE));    }    private void expectMatchingAccessibleMethodParameterTypes(Class cls,            String methodName, Class[] requestTypes, Class[] actualTypes) {        Method m = MethodUtils.getMatchingAccessibleMethod(cls, methodName,                requestTypes);        assertTrue(toString(m.getParameterTypes()) + " not equals "                + toString(actualTypes), Arrays.equals(actualTypes, m                .getParameterTypes()));    }    private String toString(Class[] c) {        return Arrays.asList(c).toString();    }    private Class[] singletonArray(Class c) {        Class[] result = (Class[]) classCache.get(c);        if (result == null) {            result = new Class[] { c };            classCache.put(c, result);        }        return result;    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.reflect;import java.lang.reflect.Constructor;import java.util.Arrays;import java.util.HashMap;import java.util.Map;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import org.apache.commons.lang.ArrayUtils;import org.apache.commons.lang.math.NumberUtils;/** * Unit tests ConstructorUtils * @author mbenson * @version $Id$ */public class ConstructorUtilsTest extends TestCase {    public static class TestBean {        private String toString;        public TestBean() {            toString = "()";        }        public TestBean(int i) {            toString = "(int)";        }        public TestBean(Integer i) {            toString = "(Integer)";        }        public TestBean(double d) {            toString = "(double)";        }        public TestBean(String s) {            toString = "(String)";        }        public TestBean(Object o) {            toString = "(Object)";        }        @Override        public String toString() {            return toString;        }    }    private static class PrivateClass {        public PrivateClass() {        }    }    private Map classCache;    public ConstructorUtilsTest(String name) {        super(name);        classCache = new HashMap();    }    /**     * Run the test cases as a suite.     * @return the Test     */    public static Test suite() {        TestSuite suite = new TestSuite(ConstructorUtilsTest.class);        suite.setName("ConstructorUtils Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();        classCache.clear();    }    public void testConstructor() throws Exception {        assertNotNull(MethodUtils.class.newInstance());    }    public void testInvokeConstructor() throws Exception {        assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class,                ArrayUtils.EMPTY_CLASS_ARRAY).toString());        assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class,                (Class[]) null).toString());        assertEquals("(String)", ConstructorUtils.invokeConstructor(                TestBean.class, "").toString());        assertEquals("(Object)", ConstructorUtils.invokeConstructor(                TestBean.class, new Object()).toString());        assertEquals("(Object)", ConstructorUtils.invokeConstructor(                TestBean.class, Boolean.TRUE).toString());        assertEquals("(Integer)", ConstructorUtils.invokeConstructor(                TestBean.class, NumberUtils.INTEGER_ONE).toString());        assertEquals("(int)", ConstructorUtils.invokeConstructor(                TestBean.class, NumberUtils.BYTE_ONE).toString());        assertEquals("(double)", ConstructorUtils.invokeConstructor(                TestBean.class, NumberUtils.LONG_ONE).toString());        assertEquals("(double)", ConstructorUtils.invokeConstructor(                TestBean.class, NumberUtils.DOUBLE_ONE).toString());    }    public void testInvokeExactConstructor() throws Exception {        assertEquals("()", ConstructorUtils.invokeExactConstructor(                TestBean.class, ArrayUtils.EMPTY_CLASS_ARRAY).toString());        assertEquals("()", ConstructorUtils.invokeExactConstructor(                TestBean.class, (Class[]) null).toString());        assertEquals("(String)", ConstructorUtils.invokeExactConstructor(                TestBean.class, "").toString());        assertEquals("(Object)", ConstructorUtils.invokeExactConstructor(                TestBean.class, new Object()).toString());        assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor(                TestBean.class, NumberUtils.INTEGER_ONE).toString());        assertEquals("(double)", ConstructorUtils.invokeExactConstructor(                TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE },                new Class[] { Double.TYPE }).toString());        try {            ConstructorUtils.invokeExactConstructor(TestBean.class,                    NumberUtils.BYTE_ONE);            fail("should throw NoSuchMethodException");        } catch (NoSuchMethodException e) {        }        try {            ConstructorUtils.invokeExactConstructor(TestBean.class,                    NumberUtils.LONG_ONE);            fail("should throw NoSuchMethodException");        } catch (NoSuchMethodException e) {        }        try {            ConstructorUtils.invokeExactConstructor(TestBean.class,                    Boolean.TRUE);            fail("should throw NoSuchMethodException");        } catch (NoSuchMethodException e) {        }    }    public void testGetAccessibleConstructor() throws Exception {        assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class                .getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));        assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class                .getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));    }    public void testGetAccessibleConstructorFromDescription() throws Exception {        assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class,                ArrayUtils.EMPTY_CLASS_ARRAY));        assertNull(ConstructorUtils.getAccessibleConstructor(                PrivateClass.class, ArrayUtils.EMPTY_CLASS_ARRAY));    }    public void testGetMatchingAccessibleMethod() throws Exception {        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY);        expectMatchingAccessibleConstructorParameterTypes(TestBean.class, null,                ArrayUtils.EMPTY_CLASS_ARRAY);        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(String.class), singletonArray(String.class));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Object.class), singletonArray(Object.class));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Boolean.class), singletonArray(Object.class));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Byte.class), singletonArray(Integer.TYPE));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Byte.TYPE), singletonArray(Integer.TYPE));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Short.class), singletonArray(Integer.TYPE));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Short.TYPE), singletonArray(Integer.TYPE));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Character.class), singletonArray(Integer.TYPE));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Character.TYPE), singletonArray(Integer.TYPE));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Integer.class), singletonArray(Integer.class));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Integer.TYPE), singletonArray(Integer.TYPE));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Long.class), singletonArray(Double.TYPE));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Long.TYPE), singletonArray(Double.TYPE));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Float.class), singletonArray(Double.TYPE));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Float.TYPE), singletonArray(Double.TYPE));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Double.class), singletonArray(Double.TYPE));        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,                singletonArray(Double.TYPE), singletonArray(Double.TYPE));    }    private void expectMatchingAccessibleConstructorParameterTypes(Class cls,            Class[] requestTypes, Class[] actualTypes) {        Constructor c = ConstructorUtils.getMatchingAccessibleConstructor(cls,                requestTypes);        assertTrue(toString(c.getParameterTypes()) + " not equals "                + toString(actualTypes), Arrays.equals(actualTypes, c                .getParameterTypes()));    }    private String toString(Class[] c) {        return Arrays.asList(c).toString();    }    private Class[] singletonArray(Class c) {        Class[] result = (Class[]) classCache.get(c);        if (result == null) {            result = new Class[] { c };            classCache.put(c, result);        }        return result;    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.mutable;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @version $Id$ * @see MutableLong */public class MutableLongTest extends TestCase {    public MutableLongTest(String testName) {        super(testName);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(MutableLongTest.class);    }    // ----------------------------------------------------------------    public void testConstructors() {        assertEquals(0, new MutableLong().longValue());                assertEquals(1, new MutableLong(1).longValue());                assertEquals(2, new MutableLong(new Long(2)).longValue());        assertEquals(3, new MutableLong(new MutableLong(3)).longValue());        try {            new MutableLong(null);            fail();        } catch (NullPointerException ex) {}    }    public void testGetSet() {        final MutableLong mutNum = new MutableLong(0);        assertEquals(0, new MutableLong().longValue());        assertEquals(new Long(0), new MutableLong().getValue());                mutNum.setValue(1);        assertEquals(1, mutNum.longValue());        assertEquals(new Long(1), mutNum.getValue());                mutNum.setValue(new Long(2));        assertEquals(2, mutNum.longValue());        assertEquals(new Long(2), mutNum.getValue());                mutNum.setValue(new MutableLong(3));        assertEquals(3, mutNum.longValue());        assertEquals(new Long(3), mutNum.getValue());        try {            mutNum.setValue(null);            fail();        } catch (NullPointerException ex) {}        try {            mutNum.setValue("0");            fail();        } catch (ClassCastException ex) {}    }    public void testEquals() {        final MutableLong mutNumA = new MutableLong(0);        final MutableLong mutNumB = new MutableLong(0);        final MutableLong mutNumC = new MutableLong(1);        assertEquals(true, mutNumA.equals(mutNumA));        assertEquals(true, mutNumA.equals(mutNumB));        assertEquals(true, mutNumB.equals(mutNumA));        assertEquals(true, mutNumB.equals(mutNumB));        assertEquals(false, mutNumA.equals(mutNumC));        assertEquals(false, mutNumB.equals(mutNumC));        assertEquals(true, mutNumC.equals(mutNumC));        assertEquals(false, mutNumA.equals(null));        assertEquals(false, mutNumA.equals(new Long(0)));        assertEquals(false, mutNumA.equals("0"));    }    public void testHashCode() {        final MutableLong mutNumA = new MutableLong(0);        final MutableLong mutNumB = new MutableLong(0);        final MutableLong mutNumC = new MutableLong(1);        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());        assertEquals(true, mutNumA.hashCode() == new Long(0).hashCode());    }    public void testCompareTo() {        final MutableLong mutNum = new MutableLong(0);        assertEquals(0, mutNum.compareTo(new MutableLong(0)));        assertEquals(+1, mutNum.compareTo(new MutableLong(-1)));        assertEquals(-1, mutNum.compareTo(new MutableLong(1)));        try {            mutNum.compareTo(null);            fail();        } catch (NullPointerException ex) {}    }    public void testPrimitiveValues() {        MutableLong mutNum = new MutableLong(1L);        assertEquals( 1.0F, mutNum.floatValue(), 0 );        assertEquals( 1.0, mutNum.doubleValue(), 0 );        assertEquals( (byte) 1, mutNum.byteValue() );        assertEquals( (short) 1, mutNum.shortValue() );        assertEquals( 1, mutNum.intValue() );        assertEquals( 1L, mutNum.longValue() );    }    public void testToLong() {        assertEquals(new Long(0L), new MutableLong(0L).toLong());        assertEquals(new Long(123L), new MutableLong(123L).toLong());    }    public void testIncrement() {        MutableLong mutNum = new MutableLong(1);        mutNum.increment();                assertEquals(2, mutNum.intValue());        assertEquals(2L, mutNum.longValue());    }    public void testDecrement() {        MutableLong mutNum = new MutableLong(1);        mutNum.decrement();                assertEquals(0, mutNum.intValue());        assertEquals(0L, mutNum.longValue());    }    public void testAddValuePrimitive() {        MutableLong mutNum = new MutableLong(1);        mutNum.add(1);                assertEquals(2, mutNum.intValue());        assertEquals(2L, mutNum.longValue());    }    public void testAddValueObject() {        MutableLong mutNum = new MutableLong(1);        mutNum.add(new Long(1));                assertEquals(2, mutNum.intValue());        assertEquals(2L, mutNum.longValue());    }    public void testSubtractValuePrimitive() {        MutableLong mutNum = new MutableLong(1);        mutNum.subtract(1);                assertEquals(0, mutNum.intValue());        assertEquals(0L, mutNum.longValue());    }    public void testSubtractValueObject() {        MutableLong mutNum = new MutableLong(1);        mutNum.subtract(new Long(1));                assertEquals(0, mutNum.intValue());        assertEquals(0L, mutNum.longValue());    }    public void testToString() {        assertEquals("0", new MutableLong(0).toString());        assertEquals("10", new MutableLong(10).toString());        assertEquals("-123", new MutableLong(-123).toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.mutable;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @version $Id$ * @see MutableShort */public class MutableShortTest extends TestCase {    public MutableShortTest(String testName) {        super(testName);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(MutableShortTest.class);    }    // ----------------------------------------------------------------    public void testConstructors() {        assertEquals((short) 0, new MutableShort().shortValue());                assertEquals((short) 1, new MutableShort((short) 1).shortValue());                assertEquals((short) 2, new MutableShort(new Short((short) 2)).shortValue());        assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue());        try {            new MutableShort(null);            fail();        } catch (NullPointerException ex) {}    }    public void testGetSet() {        final MutableShort mutNum = new MutableShort((short) 0);        assertEquals((short) 0, new MutableShort().shortValue());        assertEquals(new Short((short) 0), new MutableShort().getValue());                mutNum.setValue((short) 1);        assertEquals((short) 1, mutNum.shortValue());        assertEquals(new Short((short) 1), mutNum.getValue());                mutNum.setValue(new Short((short) 2));        assertEquals((short) 2, mutNum.shortValue());        assertEquals(new Short((short) 2), mutNum.getValue());                mutNum.setValue(new MutableShort((short) 3));        assertEquals((short) 3, mutNum.shortValue());        assertEquals(new Short((short) 3), mutNum.getValue());        try {            mutNum.setValue(null);            fail();        } catch (NullPointerException ex) {}        try {            mutNum.setValue("0");            fail();        } catch (ClassCastException ex) {}    }    public void testEquals() {        final MutableShort mutNumA = new MutableShort((short) 0);        final MutableShort mutNumB = new MutableShort((short) 0);        final MutableShort mutNumC = new MutableShort((short) 1);        assertEquals(true, mutNumA.equals(mutNumA));        assertEquals(true, mutNumA.equals(mutNumB));        assertEquals(true, mutNumB.equals(mutNumA));        assertEquals(true, mutNumB.equals(mutNumB));        assertEquals(false, mutNumA.equals(mutNumC));        assertEquals(false, mutNumB.equals(mutNumC));        assertEquals(true, mutNumC.equals(mutNumC));        assertEquals(false, mutNumA.equals(null));        assertEquals(false, mutNumA.equals(new Short((short) 0)));        assertEquals(false, mutNumA.equals("0"));    }    public void testHashCode() {        final MutableShort mutNumA = new MutableShort((short) 0);        final MutableShort mutNumB = new MutableShort((short) 0);        final MutableShort mutNumC = new MutableShort((short) 1);        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());        assertEquals(true, mutNumA.hashCode() == new Short((short) 0).hashCode());    }    public void testCompareTo() {        final MutableShort mutNum = new MutableShort((short) 0);        assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0)));        assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1)));        assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1)));        try {            mutNum.compareTo(null);            fail();        } catch (NullPointerException ex) {}    }    public void testPrimitiveValues() {        MutableShort mutNum = new MutableShort( (short) 1 );                assertEquals( 1.0F, mutNum.floatValue(), 0 );        assertEquals( 1.0, mutNum.doubleValue(), 0 );        assertEquals( (byte) 1, mutNum.byteValue() );        assertEquals( (short) 1, mutNum.shortValue() );        assertEquals( 1, mutNum.intValue() );        assertEquals( 1L, mutNum.longValue() );    }    public void testToShort() {        assertEquals(new Short((short) 0), new MutableShort((short) 0).toShort());        assertEquals(new Short((short) 123), new MutableShort((short) 123).toShort());    }    public void testIncrement() {        MutableShort mutNum = new MutableShort((short) 1);        mutNum.increment();                assertEquals(2, mutNum.intValue());        assertEquals(2L, mutNum.longValue());    }    public void testDecrement() {        MutableShort mutNum = new MutableShort((short) 1);        mutNum.decrement();                assertEquals(0, mutNum.intValue());        assertEquals(0L, mutNum.longValue());    }    public void testAddValuePrimitive() {        MutableShort mutNum = new MutableShort((short) 1);        mutNum.add((short) 1);                assertEquals((short) 2, mutNum.shortValue());    }    public void testAddValueObject() {        MutableShort mutNum = new MutableShort((short) 1);        mutNum.add(new Short((short) 1));                assertEquals((short) 2, mutNum.shortValue());    }    public void testSubtractValuePrimitive() {        MutableShort mutNum = new MutableShort((short) 1);        mutNum.subtract((short) 1);                assertEquals((short) 0, mutNum.shortValue());    }    public void testSubtractValueObject() {        MutableShort mutNum = new MutableShort((short) 1);        mutNum.subtract(new Short((short) 1));                assertEquals((short) 0, mutNum.shortValue());    }    public void testToString() {        assertEquals("0", new MutableShort((short) 0).toString());        assertEquals("10", new MutableShort((short) 10).toString());        assertEquals("-123", new MutableShort((short) -123).toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.mutable;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @version $Id$ * @see MutableShort */public class MutableObjectTest extends TestCase {    public MutableObjectTest(String testName) {        super(testName);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(MutableObjectTest.class);    }    // ----------------------------------------------------------------    public void testConstructors() {        assertEquals(null, new MutableObject().getValue());                Integer i = new Integer(6);        assertSame(i, new MutableObject(i).getValue());        assertSame("HI", new MutableObject("HI").getValue());        assertSame(null, new MutableObject(null).getValue());    }    public void testGetSet() {        final MutableObject mutNum = new MutableObject();        assertEquals(null, new MutableObject().getValue());                mutNum.setValue("HELLO");        assertSame("HELLO", mutNum.getValue());                mutNum.setValue(null);        assertSame(null, mutNum.getValue());    }    public void testEquals() {        final MutableObject mutNumA = new MutableObject("ALPHA");        final MutableObject mutNumB = new MutableObject("ALPHA");        final MutableObject mutNumC = new MutableObject("BETA");        final MutableObject mutNumD = new MutableObject(null);        assertEquals(true, mutNumA.equals(mutNumA));        assertEquals(true, mutNumA.equals(mutNumB));        assertEquals(true, mutNumB.equals(mutNumA));        assertEquals(true, mutNumB.equals(mutNumB));        assertEquals(false, mutNumA.equals(mutNumC));        assertEquals(false, mutNumB.equals(mutNumC));        assertEquals(true, mutNumC.equals(mutNumC));        assertEquals(false, mutNumA.equals(mutNumD));        assertEquals(true, mutNumD.equals(mutNumD));                assertEquals(false, mutNumA.equals(null));        assertEquals(false, mutNumA.equals(new Object()));        assertEquals(false, mutNumA.equals("0"));    }    public void testHashCode() {        final MutableObject mutNumA = new MutableObject("ALPHA");        final MutableObject mutNumB = new MutableObject("ALPHA");        final MutableObject mutNumC = new MutableObject("BETA");        final MutableObject mutNumD = new MutableObject(null);        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());        assertEquals(false, mutNumA.hashCode() == mutNumD.hashCode());        assertEquals(true, mutNumA.hashCode() == "ALPHA".hashCode());        assertEquals(0, mutNumD.hashCode());    }    public void testToString() {        assertEquals("HI", new MutableObject("HI").toString());        assertEquals("10.0", new MutableObject(new Double(10)).toString());        assertEquals("null", new MutableObject(null).toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.mutable;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @version $Id$ * @see MutableFloat */public class MutableFloatTest extends TestCase {    public MutableFloatTest(String testName) {        super(testName);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(MutableFloatTest.class);    }    // ----------------------------------------------------------------    public void testConstructors() {        assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);                assertEquals(1f, new MutableFloat(1f).floatValue(), 0.0001f);                assertEquals(2f, new MutableFloat(new Float(2f)).floatValue(), 0.0001f);        assertEquals(3f, new MutableFloat(new MutableFloat(3f)).floatValue(), 0.0001f);        try {            new MutableFloat(null);            fail();        } catch (NullPointerException ex) {}    }    public void testGetSet() {        final MutableFloat mutNum = new MutableFloat(0f);        assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);        assertEquals(new Float(0), new MutableFloat().getValue());                mutNum.setValue(1);        assertEquals(1f, mutNum.floatValue(), 0.0001f);        assertEquals(new Float(1f), mutNum.getValue());                mutNum.setValue(new Float(2f));        assertEquals(2f, mutNum.floatValue(), 0.0001f);        assertEquals(new Float(2f), mutNum.getValue());                mutNum.setValue(new MutableFloat(3f));        assertEquals(3f, mutNum.floatValue(), 0.0001f);        assertEquals(new Float(3f), mutNum.getValue());        try {            mutNum.setValue(null);            fail();        } catch (NullPointerException ex) {}        try {            mutNum.setValue("0");            fail();        } catch (ClassCastException ex) {}    }    public void testNanInfinite() {        MutableFloat mutNum = new MutableFloat(Float.NaN);        assertEquals(true, mutNum.isNaN());                mutNum = new MutableFloat(Float.POSITIVE_INFINITY);        assertEquals(true, mutNum.isInfinite());                mutNum = new MutableFloat(Float.NEGATIVE_INFINITY);        assertEquals(true, mutNum.isInfinite());    }    public void testEquals() {        final MutableFloat mutNumA = new MutableFloat(0f);        final MutableFloat mutNumB = new MutableFloat(0f);        final MutableFloat mutNumC = new MutableFloat(1f);        assertEquals(true, mutNumA.equals(mutNumA));        assertEquals(true, mutNumA.equals(mutNumB));        assertEquals(true, mutNumB.equals(mutNumA));        assertEquals(true, mutNumB.equals(mutNumB));        assertEquals(false, mutNumA.equals(mutNumC));        assertEquals(false, mutNumB.equals(mutNumC));        assertEquals(true, mutNumC.equals(mutNumC));        assertEquals(false, mutNumA.equals(null));        assertEquals(false, mutNumA.equals(new Float(0f)));        assertEquals(false, mutNumA.equals("0"));    }    public void testHashCode() {        final MutableFloat mutNumA = new MutableFloat(0f);        final MutableFloat mutNumB = new MutableFloat(0f);        final MutableFloat mutNumC = new MutableFloat(1f);        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());        assertEquals(true, mutNumA.hashCode() == new Float(0f).hashCode());    }    public void testCompareTo() {        final MutableFloat mutNum = new MutableFloat(0f);        assertEquals(0, mutNum.compareTo(new MutableFloat(0f)));        assertEquals(+1, mutNum.compareTo(new MutableFloat(-1f)));        assertEquals(-1, mutNum.compareTo(new MutableFloat(1f)));        try {            mutNum.compareTo(null);            fail();        } catch (NullPointerException ex) {}    }    public void testPrimitiveValues() {        MutableFloat mutNum = new MutableFloat(1.7F);                assertEquals( 1, mutNum.intValue() );        assertEquals( 1.7, mutNum.doubleValue(), 0.00001 );        assertEquals( (byte) 1, mutNum.byteValue() );        assertEquals( (short) 1, mutNum.shortValue() );        assertEquals( 1, mutNum.intValue() );        assertEquals( 1L, mutNum.longValue() );    }    public void testToFloat() {        assertEquals(new Float(0f), new MutableFloat(0f).toFloat());        assertEquals(new Float(12.3f), new MutableFloat(12.3f).toFloat());    }    public void testIncrement() {        MutableFloat mutNum = new MutableFloat(1);        mutNum.increment();                assertEquals(2, mutNum.intValue());        assertEquals(2L, mutNum.longValue());    }    public void testDecrement() {        MutableFloat mutNum = new MutableFloat(1);        mutNum.decrement();                assertEquals(0, mutNum.intValue());        assertEquals(0L, mutNum.longValue());    }    public void testAddValuePrimitive() {        MutableFloat mutNum = new MutableFloat(1);        mutNum.add(1.1f);                assertEquals(2.1f, mutNum.floatValue(), 0.01f);    }    public void testAddValueObject() {        MutableFloat mutNum = new MutableFloat(1);        mutNum.add(new Float(1.1f));                assertEquals(2.1f, mutNum.floatValue(), 0.01f);    }    public void testSubtractValuePrimitive() {        MutableFloat mutNum = new MutableFloat(1);        mutNum.subtract(0.9f);                assertEquals(0.1f, mutNum.floatValue(), 0.01f);    }    public void testSubtractValueObject() {        MutableFloat mutNum = new MutableFloat(1);        mutNum.subtract(new Float(0.9f));                assertEquals(0.1f, mutNum.floatValue(), 0.01f);    }    public void testToString() {        assertEquals("0.0", new MutableFloat(0f).toString());        assertEquals("10.0", new MutableFloat(10f).toString());        assertEquals("-123.0", new MutableFloat(-123f).toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.mutable;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @version $Id$ * @see MutableDouble */public class MutableDoubleTest extends TestCase {    public MutableDoubleTest(String testName) {        super(testName);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(MutableDoubleTest.class);    }    // ----------------------------------------------------------------    public void testConstructors() {        assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);                assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d);                assertEquals(2d, new MutableDouble(new Double(2d)).doubleValue(), 0.0001d);        assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d);        try {            new MutableDouble(null);            fail();        } catch (NullPointerException ex) {}    }    public void testGetSet() {        final MutableDouble mutNum = new MutableDouble(0d);        assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);        assertEquals(new Double(0), new MutableDouble().getValue());                mutNum.setValue(1);        assertEquals(1d, mutNum.doubleValue(), 0.0001d);        assertEquals(new Double(1d), mutNum.getValue());                mutNum.setValue(new Double(2d));        assertEquals(2d, mutNum.doubleValue(), 0.0001d);        assertEquals(new Double(2d), mutNum.getValue());                mutNum.setValue(new MutableDouble(3d));        assertEquals(3d, mutNum.doubleValue(), 0.0001d);        assertEquals(new Double(3d), mutNum.getValue());        try {            mutNum.setValue(null);            fail();        } catch (NullPointerException ex) {}        try {            mutNum.setValue("0");            fail();        } catch (ClassCastException ex) {}    }    public void testNanInfinite() {        MutableDouble mutNum = new MutableDouble(Double.NaN);        assertEquals(true, mutNum.isNaN());                mutNum = new MutableDouble(Double.POSITIVE_INFINITY);        assertEquals(true, mutNum.isInfinite());                mutNum = new MutableDouble(Double.NEGATIVE_INFINITY);        assertEquals(true, mutNum.isInfinite());    }    public void testEquals() {        final MutableDouble mutNumA = new MutableDouble(0d);        final MutableDouble mutNumB = new MutableDouble(0d);        final MutableDouble mutNumC = new MutableDouble(1d);        assertEquals(true, mutNumA.equals(mutNumA));        assertEquals(true, mutNumA.equals(mutNumB));        assertEquals(true, mutNumB.equals(mutNumA));        assertEquals(true, mutNumB.equals(mutNumB));        assertEquals(false, mutNumA.equals(mutNumC));        assertEquals(false, mutNumB.equals(mutNumC));        assertEquals(true, mutNumC.equals(mutNumC));        assertEquals(false, mutNumA.equals(null));        assertEquals(false, mutNumA.equals(new Double(0d)));        assertEquals(false, mutNumA.equals("0"));    }    public void testHashCode() {        final MutableDouble mutNumA = new MutableDouble(0d);        final MutableDouble mutNumB = new MutableDouble(0d);        final MutableDouble mutNumC = new MutableDouble(1d);        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());        assertEquals(true, mutNumA.hashCode() == new Double(0d).hashCode());    }    public void testCompareTo() {        final MutableDouble mutNum = new MutableDouble(0d);        assertEquals(0, mutNum.compareTo(new MutableDouble(0d)));        assertEquals(+1, mutNum.compareTo(new MutableDouble(-1d)));        assertEquals(-1, mutNum.compareTo(new MutableDouble(1d)));        try {            mutNum.compareTo(null);            fail();        } catch (NullPointerException ex) {}    }    public void testPrimitiveValues() {        MutableDouble mutNum = new MutableDouble(1.7);                assertEquals( 1.7F, mutNum.floatValue(), 0 );        assertEquals( 1.7, mutNum.doubleValue(), 0 );        assertEquals( (byte) 1, mutNum.byteValue() );        assertEquals( (short) 1, mutNum.shortValue() );        assertEquals( 1, mutNum.intValue() );        assertEquals( 1L, mutNum.longValue() );    }    public void testToDouble() {        assertEquals(new Double(0d), new MutableDouble(0d).toDouble());        assertEquals(new Double(12.3d), new MutableDouble(12.3d).toDouble());    }    public void testIncrement() {        MutableDouble mutNum = new MutableDouble(1);        mutNum.increment();                assertEquals(2, mutNum.intValue());        assertEquals(2L, mutNum.longValue());    }    public void testDecrement() {        MutableDouble mutNum = new MutableDouble(1);        mutNum.decrement();                assertEquals(0, mutNum.intValue());        assertEquals(0L, mutNum.longValue());    }    public void testAddValuePrimitive() {        MutableDouble mutNum = new MutableDouble(1);        mutNum.add(1.1d);                assertEquals(2.1d, mutNum.doubleValue(), 0.01d);    }    public void testAddValueObject() {        MutableDouble mutNum = new MutableDouble(1);        mutNum.add(new Double(1.1d));                assertEquals(2.1d, mutNum.doubleValue(), 0.01d);    }    public void testSubtractValuePrimitive() {        MutableDouble mutNum = new MutableDouble(1);        mutNum.subtract(0.9d);                assertEquals(0.1d, mutNum.doubleValue(), 0.01d);    }    public void testSubtractValueObject() {        MutableDouble mutNum = new MutableDouble(1);        mutNum.subtract(new Double(0.9d));                assertEquals(0.1d, mutNum.doubleValue(), 0.01d);    }    public void testToString() {        assertEquals("0.0", new MutableDouble(0d).toString());        assertEquals("10.0", new MutableDouble(10d).toString());        assertEquals("-123.0", new MutableDouble(-123d).toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.mutable;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @since 2.2 * @see MutableBoolean * @author Apache Software Foundation * @version $Id$ */public class MutableBooleanTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(MutableBooleanTest.class);    }    public MutableBooleanTest(String testName) {        super(testName);    }    public void testCompareTo() {        final MutableBoolean mutBool = new MutableBoolean(false);        assertEquals(0, mutBool.compareTo(new MutableBoolean(false)));        assertEquals(-1, mutBool.compareTo(new MutableBoolean(true)));        mutBool.setValue(true);        assertEquals(+1, mutBool.compareTo(new MutableBoolean(false)));        assertEquals(0, mutBool.compareTo(new MutableBoolean(true)));        try {            mutBool.compareTo(null);            fail();        } catch (NullPointerException ex) {        }    }    // ----------------------------------------------------------------    public void testConstructors() {        assertEquals(false, new MutableBoolean().booleanValue());        assertEquals(true, new MutableBoolean(true).booleanValue());        assertEquals(false, new MutableBoolean(false).booleanValue());        assertEquals(true, new MutableBoolean(Boolean.TRUE).booleanValue());        assertEquals(false, new MutableBoolean(Boolean.FALSE).booleanValue());        try {            new MutableBoolean(null);            fail();        } catch (NullPointerException ex) {        }    }    public void testEquals() {        final MutableBoolean mutBoolA = new MutableBoolean(false);        final MutableBoolean mutBoolB = new MutableBoolean(false);        final MutableBoolean mutBoolC = new MutableBoolean(true);        assertEquals(true, mutBoolA.equals(mutBoolA));        assertEquals(true, mutBoolA.equals(mutBoolB));        assertEquals(true, mutBoolB.equals(mutBoolA));        assertEquals(true, mutBoolB.equals(mutBoolB));        assertEquals(false, mutBoolA.equals(mutBoolC));        assertEquals(false, mutBoolB.equals(mutBoolC));        assertEquals(true, mutBoolC.equals(mutBoolC));        assertEquals(false, mutBoolA.equals(null));        assertEquals(false, mutBoolA.equals(Boolean.FALSE));        assertEquals(false, mutBoolA.equals("false"));    }    public void testGetSet() {        final MutableBoolean mutBool = new MutableBoolean(false);        assertEquals(false, new MutableBoolean().booleanValue());        assertEquals(Boolean.FALSE, new MutableBoolean().getValue());        mutBool.setValue(Boolean.TRUE);        assertEquals(true, mutBool.booleanValue());        mutBool.setValue(false);        assertEquals(false, mutBool.booleanValue());        mutBool.setValue(true);        assertEquals(true, mutBool.booleanValue());        try {            mutBool.setValue(null);            fail();        } catch (NullPointerException ex) {        }        try {            mutBool.setValue("false");            fail();        } catch (ClassCastException ex) {        }    }    public void testHashCode() {        final MutableBoolean mutBoolA = new MutableBoolean(false);        final MutableBoolean mutBoolB = new MutableBoolean(false);        final MutableBoolean mutBoolC = new MutableBoolean(true);        assertEquals(true, mutBoolA.hashCode() == mutBoolA.hashCode());        assertEquals(true, mutBoolA.hashCode() == mutBoolB.hashCode());        assertEquals(false, mutBoolA.hashCode() == mutBoolC.hashCode());        assertEquals(true, mutBoolA.hashCode() == Boolean.FALSE.hashCode());        assertEquals(true, mutBoolC.hashCode() == Boolean.TRUE.hashCode());    }    public void testToString() {        assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString());        assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.mutable;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @version $Id$ * @see MutableByte */public class MutableByteTest extends TestCase {    public MutableByteTest(String testName) {        super(testName);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(MutableByteTest.class);    }    // ----------------------------------------------------------------    public void testConstructors() {        assertEquals((byte) 0, new MutableByte().byteValue());                assertEquals((byte) 1, new MutableByte((byte) 1).byteValue());                assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue());        assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue());        try {            new MutableByte(null);            fail();        } catch (NullPointerException ex) {}    }    public void testGetSet() {        final MutableByte mutNum = new MutableByte((byte) 0);        assertEquals((byte) 0, new MutableByte().byteValue());        assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue());                mutNum.setValue((byte) 1);        assertEquals((byte) 1, mutNum.byteValue());        assertEquals(Byte.valueOf((byte) 1), mutNum.getValue());                mutNum.setValue(Byte.valueOf((byte) 2));        assertEquals((byte) 2, mutNum.byteValue());        assertEquals(Byte.valueOf((byte) 2), mutNum.getValue());                mutNum.setValue(new MutableByte((byte) 3));        assertEquals((byte) 3, mutNum.byteValue());        assertEquals(Byte.valueOf((byte) 3), mutNum.getValue());        try {            mutNum.setValue(null);            fail();        } catch (NullPointerException ex) {}        try {            mutNum.setValue("0");            fail();        } catch (ClassCastException ex) {}    }    public void testEquals() {        final MutableByte mutNumA = new MutableByte((byte) 0);        final MutableByte mutNumB = new MutableByte((byte) 0);        final MutableByte mutNumC = new MutableByte((byte) 1);        assertEquals(true, mutNumA.equals(mutNumA));        assertEquals(true, mutNumA.equals(mutNumB));        assertEquals(true, mutNumB.equals(mutNumA));        assertEquals(true, mutNumB.equals(mutNumB));        assertEquals(false, mutNumA.equals(mutNumC));        assertEquals(false, mutNumB.equals(mutNumC));        assertEquals(true, mutNumC.equals(mutNumC));        assertEquals(false, mutNumA.equals(null));        assertEquals(false, mutNumA.equals(Byte.valueOf((byte) 0)));        assertEquals(false, mutNumA.equals("0"));    }    public void testHashCode() {        final MutableByte mutNumA = new MutableByte((byte) 0);        final MutableByte mutNumB = new MutableByte((byte) 0);        final MutableByte mutNumC = new MutableByte((byte) 1);        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());        assertEquals(true, mutNumA.hashCode() == Byte.valueOf((byte) 0).hashCode());    }    public void testCompareTo() {        final MutableByte mutNum = new MutableByte((byte) 0);        assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0)));        assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1)));        assertEquals((byte) -1, mutNum.compareTo(new MutableByte((byte) 1)));        try {            mutNum.compareTo(null);            fail();        } catch (NullPointerException ex) {}    }    public void testPrimitiveValues() {        MutableByte mutNum = new MutableByte( (byte) 1 );                assertEquals( 1.0F, mutNum.floatValue(), 0 );        assertEquals( 1.0, mutNum.doubleValue(), 0 );        assertEquals( (byte) 1, mutNum.byteValue() );        assertEquals( (short) 1, mutNum.shortValue() );        assertEquals( 1, mutNum.intValue() );        assertEquals( 1L, mutNum.longValue() );    }    public void testToByte() {        assertEquals(Byte.valueOf((byte) 0), new MutableByte((byte) 0).toByte());        assertEquals(Byte.valueOf((byte) 123), new MutableByte((byte) 123).toByte());    }    public void testIncrement() {        MutableByte mutNum = new MutableByte((byte) 1);        mutNum.increment();                assertEquals(2, mutNum.intValue());        assertEquals(2L, mutNum.longValue());    }    public void testDecrement() {        MutableByte mutNum = new MutableByte((byte) 1);        mutNum.decrement();                assertEquals(0, mutNum.intValue());        assertEquals(0L, mutNum.longValue());    }    public void testAddValuePrimitive() {        MutableByte mutNum = new MutableByte((byte) 1);        mutNum.add((byte)1);                assertEquals((byte) 2, mutNum.byteValue());    }    public void testAddValueObject() {        MutableByte mutNum = new MutableByte((byte) 1);        mutNum.add(new Integer(1));                assertEquals((byte) 2, mutNum.byteValue());    }    public void testSubtractValuePrimitive() {        MutableByte mutNum = new MutableByte((byte) 1);        mutNum.subtract((byte) 1);                assertEquals((byte) 0, mutNum.byteValue());    }    public void testSubtractValueObject() {        MutableByte mutNum = new MutableByte((byte) 1);        mutNum.subtract(new Integer(1));                assertEquals((byte) 0, mutNum.byteValue());    }    public void testToString() {        assertEquals("0", new MutableByte((byte) 0).toString());        assertEquals("10", new MutableByte((byte) 10).toString());        assertEquals("-123", new MutableByte((byte) -123).toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.mutable;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @version $Id$ * @see MutableInt */public class MutableIntTest extends TestCase {    public MutableIntTest(String testName) {        super(testName);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(MutableIntTest.class);    }    // ----------------------------------------------------------------    public void testConstructors() {        assertEquals(0, new MutableInt().intValue());                assertEquals(1, new MutableInt(1).intValue());                assertEquals(2, new MutableInt(new Integer(2)).intValue());        assertEquals(3, new MutableInt(new MutableLong(3)).intValue());        try {            new MutableInt(null);            fail();        } catch (NullPointerException ex) {}    }    public void testGetSet() {        final MutableInt mutNum = new MutableInt(0);        assertEquals(0, new MutableInt().intValue());        assertEquals(new Integer(0), new MutableInt().getValue());                mutNum.setValue(1);        assertEquals(1, mutNum.intValue());        assertEquals(new Integer(1), mutNum.getValue());                mutNum.setValue(new Integer(2));        assertEquals(2, mutNum.intValue());        assertEquals(new Integer(2), mutNum.getValue());                mutNum.setValue(new MutableLong(3));        assertEquals(3, mutNum.intValue());        assertEquals(new Integer(3), mutNum.getValue());        try {            mutNum.setValue(null);            fail();        } catch (NullPointerException ex) {}        try {            mutNum.setValue("0");            fail();        } catch (ClassCastException ex) {}    }    public void testEquals() {        this.testEquals(new MutableInt(0), new MutableInt(0), new MutableInt(1));        // Should Numbers be supported? GaryG July-21-2005.        //this.testEquals(mutNumA, new Integer(0), mutNumC);    }    /**     * @param numA must not be a 0 Integer; must not equal numC.     * @param numB must equal numA; must not equal numC.     * @param numC must not equal numA; must not equal numC.     */    void testEquals(final Number numA, final Number numB, final Number numC) {        assertEquals(true, numA.equals(numA));        assertEquals(true, numA.equals(numB));        assertEquals(true, numB.equals(numA));        assertEquals(true, numB.equals(numB));        assertEquals(false, numA.equals(numC));        assertEquals(false, numB.equals(numC));        assertEquals(true, numC.equals(numC));        assertEquals(false, numA.equals(null));        assertEquals(false, numA.equals(new Integer(0)));        assertEquals(false, numA.equals("0"));    }    public void testHashCode() {        final MutableInt mutNumA = new MutableInt(0);        final MutableInt mutNumB = new MutableInt(0);        final MutableInt mutNumC = new MutableInt(1);        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());        assertEquals(true, mutNumA.hashCode() == new Integer(0).hashCode());    }    public void testCompareTo() {        final MutableInt mutNum = new MutableInt(0);        assertEquals(0, mutNum.compareTo(new MutableInt(0)));        assertEquals(+1, mutNum.compareTo(new MutableInt(-1)));        assertEquals(-1, mutNum.compareTo(new MutableInt(1)));        try {            mutNum.compareTo(null);            fail();        } catch (NullPointerException ex) {}    }    public void testPrimitiveValues() {        MutableInt mutNum = new MutableInt(1);                assertEquals( (byte) 1, mutNum.byteValue() );        assertEquals( (short) 1, mutNum.shortValue() );        assertEquals( 1.0F, mutNum.floatValue(), 0 );        assertEquals( 1.0, mutNum.doubleValue(), 0 );        assertEquals( 1L, mutNum.longValue() );    }    public void testToInteger() {        assertEquals(new Integer(0), new MutableInt(0).toInteger());        assertEquals(new Integer(123), new MutableInt(123).toInteger());    }    public void testIncrement() {        MutableInt mutNum = new MutableInt(1);        mutNum.increment();                assertEquals(2, mutNum.intValue());        assertEquals(2L, mutNum.longValue());    }    public void testDecrement() {        MutableInt mutNum = new MutableInt(1);        mutNum.decrement();                assertEquals(0, mutNum.intValue());        assertEquals(0L, mutNum.longValue());    }    public void testAddValuePrimitive() {        MutableInt mutNum = new MutableInt(1);        mutNum.add(1);                assertEquals(2, mutNum.intValue());        assertEquals(2L, mutNum.longValue());    }    public void testAddValueObject() {        MutableInt mutNum = new MutableInt(1);        mutNum.add(new Integer(1));                assertEquals(2, mutNum.intValue());        assertEquals(2L, mutNum.longValue());    }    public void testSubtractValuePrimitive() {        MutableInt mutNum = new MutableInt(1);        mutNum.subtract(1);                assertEquals(0, mutNum.intValue());        assertEquals(0L, mutNum.longValue());    }    public void testSubtractValueObject() {        MutableInt mutNum = new MutableInt(1);        mutNum.subtract(new Integer(1));                assertEquals(0, mutNum.intValue());        assertEquals(0L, mutNum.longValue());    }    public void testToString() {        assertEquals("0", new MutableInt(0).toString());        assertEquals("10", new MutableInt(10).toString());        assertEquals("-123", new MutableInt(-123).toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.exception;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.PrintStream;import java.io.PrintWriter;import java.io.StringWriter;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Modifier;import java.sql.SQLException;import java.util.List;import junit.framework.Assert;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import org.apache.commons.lang.SystemUtils;/** * Tests {@link org.apache.commons.lang.exception.ExceptionUtils}. *  * <h3>Notes</h3> * <p> * Make sure this exception code does not depend on Java 1.4 nested exceptions. SVN revision 38990 does not compile with * Java 1.3.1. * </p> * <ul> * <li>Compiled with Sun Java 1.3.1_15</li> * <li>Tested with Sun Java 1.3.1_15</li> * <li>Tested with Sun Java 1.4.2_12</li> * <li>Tested with Sun Java 1.5.0_08</li> * <li>All of the above on Windows XP SP2 + patches.</li> * </ul> * <p> * Gary Gregory; August 16, 2006. * </p> *  * @author Daniel L. Rall * @author <a href="mailto:steven@caswell.name">Steven Caswell</a> * @author Stephen Colebourne * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> * @since 1.0 */public class ExceptionUtilsTest extends TestCase {        private NestableException nested;    private Throwable withCause;    private Throwable withoutCause;    private Throwable jdkNoCause;    private ExceptionWithCause selfCause;    private ExceptionWithCause cyclicCause;    public ExceptionUtilsTest(String name) {        super(name);    }    public static Test suite() {        return new TestSuite(ExceptionUtilsTest.class);    }    @Override    public void setUp() {        withoutCause = createExceptionWithoutCause();        nested = new NestableException(withoutCause);        withCause = new ExceptionWithCause(nested);        jdkNoCause = new NullPointerException();        selfCause = new ExceptionWithCause(null);        selfCause.setCause(selfCause);        ExceptionWithCause a = new ExceptionWithCause(null);        ExceptionWithCause b = new ExceptionWithCause(a);        a.setCause(b);        cyclicCause = new ExceptionWithCause(a);    }    @Override    protected void tearDown() throws Exception {        withoutCause = null;        nested = null;        withCause = null;        jdkNoCause = null;        selfCause = null;        cyclicCause = null;    }    //-----------------------------------------------------------------------    private Throwable createExceptionWithoutCause() {        try {            throw new ExceptionWithoutCause();        } catch (Throwable t) {            return t;        }    }    private Throwable createExceptionWithCause() {        try {            try {                throw new ExceptionWithCause(createExceptionWithoutCause());            } catch (Throwable t) {                throw new ExceptionWithCause(t);            }        } catch (Throwable t) {            return t;        }    }    //-----------------------------------------------------------------------        public void testConstructor() {        assertNotNull(new ExceptionUtils());        Constructor[] cons = ExceptionUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(ExceptionUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(ExceptionUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------        public void testCauseMethodNameOps() {        this.testCauseMethodNameOps(null);        this.testCauseMethodNameOps("");        this.testCauseMethodNameOps(" ");        this.testCauseMethodNameOps("\t\r\n\t");        this.testCauseMethodNameOps("testMethodName");    }        void testCauseMethodNameOps(String name) {        String methodName = "testMethodName";        try {            Assert.assertFalse(ExceptionUtils.isCauseMethodName(methodName));            ExceptionUtils.addCauseMethodName(methodName);                        ExceptionUtils.addCauseMethodName(methodName);                        Assert.assertTrue(ExceptionUtils.isCauseMethodName(methodName));        } finally {            ExceptionUtils.removeCauseMethodName(methodName);            Assert.assertFalse(                    "The method name " + methodName + " should not be in the array",                     ExceptionUtils.isCauseMethodName(methodName));        }    }        public void testGetCause_Throwable() {        assertSame(null, ExceptionUtils.getCause(null));        assertSame(null, ExceptionUtils.getCause(withoutCause));        assertSame(withoutCause, ExceptionUtils.getCause(nested));        assertSame(nested, ExceptionUtils.getCause(withCause));        assertSame(null, ExceptionUtils.getCause(jdkNoCause));        assertSame(selfCause, ExceptionUtils.getCause(selfCause));        assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause));        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getCause(cyclicCause.getCause()));        assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(((ExceptionWithCause) cyclicCause.getCause()).getCause()));    }    public void testGetCause_ThrowableArray() {        assertSame(null, ExceptionUtils.getCause(null, null));        assertSame(null, ExceptionUtils.getCause(null, new String[0]));        // not known type, so match on supplied method names        assertSame(nested, ExceptionUtils.getCause(withCause, null));  // default names        assertSame(null, ExceptionUtils.getCause(withCause, new String[0]));        assertSame(null, ExceptionUtils.getCause(withCause, new String[] {null}));        assertSame(nested, ExceptionUtils.getCause(withCause, new String[] {"getCause"}));                // not known type, so match on supplied method names        assertSame(null, ExceptionUtils.getCause(withoutCause, null));        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0]));        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {null}));        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {"getCause"}));        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {"getTargetException"}));    }    public void testGetRootCause_Throwable() {        assertSame(null, ExceptionUtils.getRootCause(null));        assertSame(null, ExceptionUtils.getRootCause(withoutCause));        assertSame(withoutCause, ExceptionUtils.getRootCause(nested));        assertSame(withoutCause, ExceptionUtils.getRootCause(withCause));        assertSame(null, ExceptionUtils.getRootCause(jdkNoCause));        assertSame(null, ExceptionUtils.getRootCause(selfCause));        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getRootCause(cyclicCause));    }    public void testSetCause() {        Exception cause = new ExceptionWithoutCause();        assertEquals(true, ExceptionUtils.setCause(new ExceptionWithCause(null), cause));        if (SystemUtils.isJavaVersionAtLeast(140)) {            assertEquals(true, ExceptionUtils.setCause(new ExceptionWithoutCause(), cause));        }    }    /**     * Tests overriding a cause to <code>null</code>.     */    public void testSetCauseToNull() {        Exception ex = new ExceptionWithCause(new IOException());        assertEquals(true, ExceptionUtils.setCause(ex, new IllegalStateException()));        assertNotNull(ExceptionUtils.getCause(ex));        assertEquals(true, ExceptionUtils.setCause(ex, null));        assertNull(ExceptionUtils.getCause(ex));    }    //-----------------------------------------------------------------------    public void testIsThrowableNested() {        if (SystemUtils.isJavaVersionAtLeast(140)) {            assertEquals(true, ExceptionUtils.isThrowableNested());        } else {            assertEquals(false, ExceptionUtils.isThrowableNested());        }    }        public void testIsNestedThrowable_Throwable() {        assertEquals(true, ExceptionUtils.isNestedThrowable(new SQLException()));        assertEquals(true, ExceptionUtils.isNestedThrowable(new InvocationTargetException(new Exception())));        assertEquals(true, ExceptionUtils.isNestedThrowable(new NestableRuntimeException()));        assertEquals(true, ExceptionUtils.isNestedThrowable(withCause));        assertEquals(true, ExceptionUtils.isNestedThrowable(nested));        if (SystemUtils.isJavaVersionAtLeast(140)) {            assertEquals(true, ExceptionUtils.isNestedThrowable(withoutCause));            assertEquals(true, ExceptionUtils.isNestedThrowable(new Throwable()));        } else {            assertEquals(false, ExceptionUtils.isNestedThrowable(withoutCause));            assertEquals(false, ExceptionUtils.isNestedThrowable(new Throwable()));        }    }    //-----------------------------------------------------------------------    public void testGetThrowableCount_Throwable() {        assertEquals(0, ExceptionUtils.getThrowableCount(null));        assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause));        assertEquals(2, ExceptionUtils.getThrowableCount(nested));        assertEquals(3, ExceptionUtils.getThrowableCount(withCause));        assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause));        assertEquals(1, ExceptionUtils.getThrowableCount(selfCause));        assertEquals(3, ExceptionUtils.getThrowableCount(cyclicCause));    }    //-----------------------------------------------------------------------    public void testGetThrowables_Throwable_null() {        assertEquals(0, ExceptionUtils.getThrowables(null).length);    }    public void testGetThrowables_Throwable_withoutCause() {        Throwable[] throwables = ExceptionUtils.getThrowables(withoutCause);        assertEquals(1, throwables.length);        assertSame(withoutCause, throwables[0]);    }    public void testGetThrowables_Throwable_nested() {        Throwable[] throwables = ExceptionUtils.getThrowables(nested);        assertEquals(2, throwables.length);        assertSame(nested, throwables[0]);        assertSame(withoutCause, throwables[1]);    }    public void testGetThrowables_Throwable_withCause() {        Throwable[] throwables = ExceptionUtils.getThrowables(withCause);        assertEquals(3, throwables.length);        assertSame(withCause, throwables[0]);        assertSame(nested, throwables[1]);        assertSame(withoutCause, throwables[2]);    }    public void testGetThrowables_Throwable_jdkNoCause() {        Throwable[] throwables = ExceptionUtils.getThrowables(jdkNoCause);        assertEquals(1, throwables.length);        assertSame(jdkNoCause, throwables[0]);    }    public void testGetThrowables_Throwable_selfCause() {        Throwable[] throwables = ExceptionUtils.getThrowables(selfCause);        assertEquals(1, throwables.length);        assertSame(selfCause, throwables[0]);    }    public void testGetThrowables_Throwable_recursiveCause() {        Throwable[] throwables = ExceptionUtils.getThrowables(cyclicCause);        assertEquals(3, throwables.length);        assertSame(cyclicCause, throwables[0]);        assertSame(cyclicCause.getCause(), throwables[1]);        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables[2]);    }    //-----------------------------------------------------------------------    public void testGetThrowableList_Throwable_null() {        List throwables = ExceptionUtils.getThrowableList(null);        assertEquals(0, throwables.size());    }    public void testGetThrowableList_Throwable_withoutCause() {        List throwables = ExceptionUtils.getThrowableList(withoutCause);        assertEquals(1, throwables.size());        assertSame(withoutCause, throwables.get(0));    }    public void testGetThrowableList_Throwable_nested() {        List throwables = ExceptionUtils.getThrowableList(nested);        assertEquals(2, throwables.size());        assertSame(nested, throwables.get(0));        assertSame(withoutCause, throwables.get(1));    }    public void testGetThrowableList_Throwable_withCause() {        List throwables = ExceptionUtils.getThrowableList(withCause);        assertEquals(3, throwables.size());        assertSame(withCause, throwables.get(0));        assertSame(nested, throwables.get(1));        assertSame(withoutCause, throwables.get(2));    }    public void testGetThrowableList_Throwable_jdkNoCause() {        List throwables = ExceptionUtils.getThrowableList(jdkNoCause);        assertEquals(1, throwables.size());        assertSame(jdkNoCause, throwables.get(0));    }    public void testGetThrowableList_Throwable_selfCause() {        List throwables = ExceptionUtils.getThrowableList(selfCause);        assertEquals(1, throwables.size());        assertSame(selfCause, throwables.get(0));    }    public void testGetThrowableList_Throwable_recursiveCause() {        List throwables = ExceptionUtils.getThrowableList(cyclicCause);        assertEquals(3, throwables.size());        assertSame(cyclicCause, throwables.get(0));        assertSame(cyclicCause.getCause(), throwables.get(1));        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2));    }    //-----------------------------------------------------------------------    public void testIndexOf_ThrowableClass() {        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null));        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class));                assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class));        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class));        assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class));                assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null));        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class));        assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class));        assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class));                assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class));        assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class));        assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class));                assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class));    }    public void testIndexOf_ThrowableClassInt() {        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0));        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0));                assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0));        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0));        assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0));                assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0));        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0));        assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0));        assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0));                assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));        assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0));        assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0));        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1));        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1));        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9));                assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0));    }    //-----------------------------------------------------------------------    public void testIndexOfType_ThrowableClass() {        assertEquals(-1, ExceptionUtils.indexOfType(null, null));        assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class));                assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class));        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class));        assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class));                assertEquals(-1, ExceptionUtils.indexOfType(nested, null));        assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class));        assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class));        assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class));                assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class));        assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class));        assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class));                assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class));    }    public void testIndexOfType_ThrowableClassInt() {        assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0));        assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0));                assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0));        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0));        assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0));                assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0));        assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0));        assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0));        assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0));                assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));        assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0));        assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0));        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1));        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));        assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1));        assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9));                assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0));    }    //-----------------------------------------------------------------------    public void testPrintRootCauseStackTrace_Throwable() throws Exception {        ExceptionUtils.printRootCauseStackTrace(null);        // could pipe system.err to a known stream, but not much point as        // internally this method calls stram method anyway    }        public void testPrintRootCauseStackTrace_ThrowableStream() throws Exception {        ByteArrayOutputStream out = new ByteArrayOutputStream(1024);        ExceptionUtils.printRootCauseStackTrace(null, (PrintStream) null);        ExceptionUtils.printRootCauseStackTrace(null, new PrintStream(out));        assertEquals(0, out.toString().length());                out = new ByteArrayOutputStream(1024);        try {            ExceptionUtils.printRootCauseStackTrace(withCause, (PrintStream) null);            fail();        } catch (IllegalArgumentException ex) {        }                out = new ByteArrayOutputStream(1024);        Throwable withCause = createExceptionWithCause();        ExceptionUtils.printRootCauseStackTrace(withCause, new PrintStream(out));        String stackTrace = out.toString();        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1);                out = new ByteArrayOutputStream(1024);        ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintStream(out));        stackTrace = out.toString();        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1);    }    public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception {        StringWriter writer = new StringWriter(1024);        ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null);        ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer));        assertEquals(0, writer.getBuffer().length());                writer = new StringWriter(1024);        try {            ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null);            fail();        } catch (IllegalArgumentException ex) {        }                writer = new StringWriter(1024);        Throwable withCause = createExceptionWithCause();        ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer));        String stackTrace = writer.toString();        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1);                writer = new StringWriter(1024);        ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer));        stackTrace = writer.toString();        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1);    }    //-----------------------------------------------------------------------    public void testGetRootCauseStackTrace_Throwable() throws Exception {        assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length);                Throwable withCause = createExceptionWithCause();        String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause);        boolean match = false;        for (int i = 0; i < stackTrace.length; i++) {            if (stackTrace[i].startsWith(ExceptionUtils.WRAPPED_MARKER)) {                match = true;                break;            }        }        assertEquals(true, match);                stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause);        match = false;        for (int i = 0; i < stackTrace.length; i++) {            if (stackTrace[i].startsWith(ExceptionUtils.WRAPPED_MARKER)) {                match = true;                break;            }        }        assertEquals(false, match);    }    public void testRemoveCommonFrames_ListList() throws Exception {        try {            ExceptionUtils.removeCommonFrames(null, null);            fail();        } catch (IllegalArgumentException ex) {        }    }    public void test_getMessage_Throwable() {        Throwable th = null;        assertEquals("", ExceptionUtils.getMessage(th));                th = new IllegalArgumentException("Base");        assertEquals("IllegalArgumentException: Base", ExceptionUtils.getMessage(th));                th = new ExceptionWithCause("Wrapper", th);        assertEquals("ExceptionUtilsTest.ExceptionWithCause: Wrapper", ExceptionUtils.getMessage(th));    }    public void test_getRootCauseMessage_Throwable() {        Throwable th = null;        assertEquals("", ExceptionUtils.getRootCauseMessage(th));                th = new IllegalArgumentException("Base");        assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th));                th = new ExceptionWithCause("Wrapper", th);        assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th));    }    //-----------------------------------------------------------------------    /**     * Provides a method with a well known chained/nested exception     * name which matches the full signature (e.g. has a return value     * of <code>Throwable</code>.     */    private static class ExceptionWithCause extends Exception {        private Throwable cause;        public ExceptionWithCause(String str, Throwable cause) {            super(str);            setCause(cause);        }        public ExceptionWithCause(Throwable cause) {            super();            setCause(cause);        }        @Override        public Throwable getCause() {            return cause;        }        public void setCause(Throwable cause) {            this.cause = cause;        }    }    /**     * Provides a method with a well known chained/nested exception     * name which does not match the full signature (e.g. lacks a     * return value of <code>Throwable</code>.     */    private static class ExceptionWithoutCause extends Exception {        public void getTargetException() {        }    }    // Temporary classes to allow the nested exception code to be removed     // prior to a rewrite of this test class.     private static class NestableRuntimeException extends RuntimeException {         public NestableRuntimeException() { super(); }        public NestableRuntimeException(Throwable t) { super(t); }    }    private static class NestableException extends Exception {         public NestableException() { super(); }        public NestableException(Throwable t) { super(t); }    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.text;import java.util.HashMap;import java.util.Map;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Test class for StrLookup. * * @version $Id$ */public class StrLookupTest extends TestCase {    /**     * Main method.     *      * @param args  command line arguments, ignored     */    public static void main(String[] args) {        TestRunner.run(suite());    }    /**     * Return a new test suite containing this test case.     *      * @return a new test suite containing this test case     */    public static Test suite() {        TestSuite suite = new TestSuite(StrLookupTest.class);        suite.setName("StrLookup Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testNoneLookup() {        assertEquals(null, StrLookup.noneLookup().lookup(null));        assertEquals(null, StrLookup.noneLookup().lookup(""));        assertEquals(null, StrLookup.noneLookup().lookup("any"));    }    public void testSystemProperiesLookup() {        assertEquals(System.getProperty("os.name"), StrLookup.systemPropertiesLookup().lookup("os.name"));        assertEquals(null, StrLookup.systemPropertiesLookup().lookup(""));        assertEquals(null, StrLookup.systemPropertiesLookup().lookup("other"));        try {            StrLookup.systemPropertiesLookup().lookup(null);            fail();        } catch (NullPointerException ex) {            // expected        }    }    public void testMapLookup() {        Map map = new HashMap();        map.put("key", "value");        map.put("number", new Integer(2));        assertEquals("value", StrLookup.mapLookup(map).lookup("key"));        assertEquals("2", StrLookup.mapLookup(map).lookup("number"));        assertEquals(null, StrLookup.mapLookup(map).lookup(null));        assertEquals(null, StrLookup.mapLookup(map).lookup(""));        assertEquals(null, StrLookup.mapLookup(map).lookup("other"));    }    public void testMapLookup_nullMap() {        Map map = null;        assertEquals(null, StrLookup.mapLookup(map).lookup(null));        assertEquals(null, StrLookup.mapLookup(map).lookup(""));        assertEquals(null, StrLookup.mapLookup(map).lookup("any"));    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.text;import java.util.Arrays;import java.util.Collection;import java.util.Collections;import java.util.Iterator;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;import org.apache.commons.lang.SystemUtils;/** * Unit tests for {@link org.apache.commons.lang.text.StrBuilder}. * * @version $Id$ */public class StrBuilderAppendInsertTest extends TestCase {    /** The system line separator. */    private static final String SEP = SystemUtils.LINE_SEPARATOR;    /** Test subclass of Object, with a toString method. */    private static final Object FOO = new Object() {        @Override        public String toString() {            return "foo";        }    };    /**     * Main method.     *      * @param args  command line arguments, ignored     */    public static void main(String[] args) {        TestRunner.run(suite());    }    /**     * Return a new test suite containing this test case.     *      * @return a new test suite containing this test case     */    public static Test suite() {        TestSuite suite = new TestSuite(StrBuilderAppendInsertTest.class);        suite.setName("StrBuilder Tests");        return suite;    }    /**     * Create a new test case with the specified name.     *      * @param name  the name     */    public StrBuilderAppendInsertTest(String name) {        super(name);    }    //-----------------------------------------------------------------------    public void testAppendNewLine() {        StrBuilder sb = new StrBuilder("---");        sb.appendNewLine().append("+++");        assertEquals("---" + SEP + "+++", sb.toString());                sb = new StrBuilder("---");        sb.setNewLineText("#").appendNewLine().setNewLineText(null).appendNewLine();        assertEquals("---#" + SEP, sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendWithNullText() {        StrBuilder sb = new StrBuilder();        sb.setNullText("NULL");        assertEquals("", sb.toString());        sb.appendNull();        assertEquals("NULL", sb.toString());        sb.append((Object) null);        assertEquals("NULLNULL", sb.toString());        sb.append(FOO);        assertEquals("NULLNULLfoo", sb.toString());        sb.append((String) null);        assertEquals("NULLNULLfooNULL", sb.toString());        sb.append("");        assertEquals("NULLNULLfooNULL", sb.toString());        sb.append("bar");        assertEquals("NULLNULLfooNULLbar", sb.toString());        sb.append((StringBuffer) null);        assertEquals("NULLNULLfooNULLbarNULL", sb.toString());        sb.append(new StringBuffer("baz"));        assertEquals("NULLNULLfooNULLbarNULLbaz", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppend_Object() {        StrBuilder sb = new StrBuilder();        sb.appendNull();        assertEquals("", sb.toString());        sb.append((Object) null);        assertEquals("", sb.toString());        sb.append(FOO);        assertEquals("foo", sb.toString());        sb.append((StringBuffer) null);        assertEquals("foo", sb.toString());        sb.append(new StringBuffer("baz"));        assertEquals("foobaz", sb.toString());        sb.append(new StrBuilder("yes"));        assertEquals("foobazyes", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppend_String() {        StrBuilder sb = new StrBuilder();        sb.setNullText("NULL").append((String) null);        assertEquals("NULL", sb.toString());        sb = new StrBuilder();        sb.append("foo");        assertEquals("foo", sb.toString());        sb.append("");        assertEquals("foo", sb.toString());        sb.append("bar");        assertEquals("foobar", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppend_String_int_int() {        StrBuilder sb = new StrBuilder();        sb.setNullText("NULL").append((String) null, 0, 1);        assertEquals("NULL", sb.toString());        sb = new StrBuilder();        sb.append("foo", 0, 3);        assertEquals("foo", sb.toString());        try {            sb.append("bar", -1, 1);            fail("append(char[], -1,) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append("bar", 3, 1);            fail("append(char[], 3,) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append("bar", 1, -1);            fail("append(char[],, -1) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append("bar", 1, 3);            fail("append(char[], 1, 3) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append("bar", -1, 3);            fail("append(char[], -1, 3) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append("bar", 4, 0);            fail("append(char[], 4, 0) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.append("bar", 3, 0);        assertEquals("foo", sb.toString());        sb.append("abcbardef", 3, 3);        assertEquals("foobar", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppend_StringBuffer() {        StrBuilder sb = new StrBuilder();        sb.setNullText("NULL").append((StringBuffer) null);        assertEquals("NULL", sb.toString());        sb = new StrBuilder();        sb.append(new StringBuffer("foo"));        assertEquals("foo", sb.toString());        sb.append(new StringBuffer(""));        assertEquals("foo", sb.toString());        sb.append(new StringBuffer("bar"));        assertEquals("foobar", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppend_StringBuffer_int_int() {        StrBuilder sb = new StrBuilder();        sb.setNullText("NULL").append((StringBuffer) null, 0, 1);        assertEquals("NULL", sb.toString());        sb = new StrBuilder();        sb.append(new StringBuffer("foo"), 0, 3);        assertEquals("foo", sb.toString());        try {            sb.append(new StringBuffer("bar"), -1, 1);            fail("append(char[], -1,) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append(new StringBuffer("bar"), 3, 1);            fail("append(char[], 3,) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append(new StringBuffer("bar"), 1, -1);            fail("append(char[],, -1) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append(new StringBuffer("bar"), 1, 3);            fail("append(char[], 1, 3) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append(new StringBuffer("bar"), -1, 3);            fail("append(char[], -1, 3) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append(new StringBuffer("bar"), 4, 0);            fail("append(char[], 4, 0) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.append(new StringBuffer("bar"), 3, 0);        assertEquals("foo", sb.toString());        sb.append(new StringBuffer("abcbardef"), 3, 3);        assertEquals("foobar", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppend_StrBuilder() {        StrBuilder sb = new StrBuilder();        sb.setNullText("NULL").append((StrBuilder) null);        assertEquals("NULL", sb.toString());        sb = new StrBuilder();        sb.append(new StrBuilder("foo"));        assertEquals("foo", sb.toString());        sb.append(new StrBuilder(""));        assertEquals("foo", sb.toString());        sb.append(new StrBuilder("bar"));        assertEquals("foobar", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppend_StrBuilder_int_int() {        StrBuilder sb = new StrBuilder();        sb.setNullText("NULL").append((StrBuilder) null, 0, 1);        assertEquals("NULL", sb.toString());        sb = new StrBuilder();        sb.append(new StrBuilder("foo"), 0, 3);        assertEquals("foo", sb.toString());        try {            sb.append(new StrBuilder("bar"), -1, 1);            fail("append(char[], -1,) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append(new StrBuilder("bar"), 3, 1);            fail("append(char[], 3,) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append(new StrBuilder("bar"), 1, -1);            fail("append(char[],, -1) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append(new StrBuilder("bar"), 1, 3);            fail("append(char[], 1, 3) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append(new StrBuilder("bar"), -1, 3);            fail("append(char[], -1, 3) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append(new StrBuilder("bar"), 4, 0);            fail("append(char[], 4, 0) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.append(new StrBuilder("bar"), 3, 0);        assertEquals("foo", sb.toString());        sb.append(new StrBuilder("abcbardef"), 3, 3);        assertEquals("foobar", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppend_CharArray() {        StrBuilder sb = new StrBuilder();        sb.setNullText("NULL").append((char[]) null);        assertEquals("NULL", sb.toString());        sb = new StrBuilder();        sb.append(new char[0]);        assertEquals("", sb.toString());        sb.append(new char[]{'f', 'o', 'o'});        assertEquals("foo", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppend_CharArray_int_int() {        StrBuilder sb = new StrBuilder();        sb.setNullText("NULL").append((char[]) null, 0, 1);        assertEquals("NULL", sb.toString());        sb = new StrBuilder();        sb.append(new char[]{'f', 'o', 'o'}, 0, 3);        assertEquals("foo", sb.toString());        try {            sb.append(new char[]{'b', 'a', 'r'}, -1, 1);            fail("append(char[], -1,) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append(new char[]{'b', 'a', 'r'}, 3, 1);            fail("append(char[], 3,) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append(new char[]{'b', 'a', 'r'}, 1, -1);            fail("append(char[],, -1) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append(new char[]{'b', 'a', 'r'}, 1, 3);            fail("append(char[], 1, 3) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append(new char[]{'b', 'a', 'r'}, -1, 3);            fail("append(char[], -1, 3) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.append(new char[]{'b', 'a', 'r'}, 4, 0);            fail("append(char[], 4, 0) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.append(new char[]{'b', 'a', 'r'}, 3, 0);        assertEquals("foo", sb.toString());        sb.append(new char[]{'a', 'b', 'c', 'b', 'a', 'r', 'd', 'e', 'f'}, 3, 3);        assertEquals("foobar", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppend_Boolean() {        StrBuilder sb = new StrBuilder();        sb.append(true);        assertEquals("true", sb.toString());        sb.append(false);        assertEquals("truefalse", sb.toString());        sb.append('!');        assertEquals("truefalse!", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppend_PrimitiveNumber() {        StrBuilder sb = new StrBuilder();        sb.append(0);        assertEquals("0", sb.toString());        sb.append(1L);        assertEquals("01", sb.toString());        sb.append(2.3f);        assertEquals("012.3", sb.toString());        sb.append(4.5d);        assertEquals("012.34.5", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendln_Object() {        StrBuilder sb = new StrBuilder();        sb.appendln((Object) null);        assertEquals("" + SEP, sb.toString());        sb.appendln(FOO);        assertEquals(SEP + "foo" + SEP, sb.toString());        sb.appendln(new Integer(6));        assertEquals(SEP + "foo" + SEP + "6" + SEP, sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendln_String() {        final int[] count = new int[2];        StrBuilder sb = new StrBuilder() {            @Override            public StrBuilder append(String str) {                count[0]++;                return super.append(str);            }            @Override            public StrBuilder appendNewLine() {                count[1]++;                return super.appendNewLine();            }        };        sb.appendln("foo");        assertEquals("foo" + SEP, sb.toString());        assertEquals(2, count[0]);  // appendNewLine() calls append(String)        assertEquals(1, count[1]);    }    //-----------------------------------------------------------------------    public void testAppendln_String_int_int() {        final int[] count = new int[2];        StrBuilder sb = new StrBuilder() {            @Override            public StrBuilder append(String str, int startIndex, int length) {                count[0]++;                return super.append(str, startIndex, length);            }            @Override            public StrBuilder appendNewLine() {                count[1]++;                return super.appendNewLine();            }        };        sb.appendln("foo", 0, 3);        assertEquals("foo" + SEP, sb.toString());        assertEquals(1, count[0]);        assertEquals(1, count[1]);    }    //-----------------------------------------------------------------------    public void testAppendln_StringBuffer() {        final int[] count = new int[2];        StrBuilder sb = new StrBuilder() {            @Override            public StrBuilder append(StringBuffer str) {                count[0]++;                return super.append(str);            }            @Override            public StrBuilder appendNewLine() {                count[1]++;                return super.appendNewLine();            }        };        sb.appendln(new StringBuffer("foo"));        assertEquals("foo" + SEP, sb.toString());        assertEquals(1, count[0]);        assertEquals(1, count[1]);    }    //-----------------------------------------------------------------------    public void testAppendln_StringBuffer_int_int() {        final int[] count = new int[2];        StrBuilder sb = new StrBuilder() {            @Override            public StrBuilder append(StringBuffer str, int startIndex, int length) {                count[0]++;                return super.append(str, startIndex, length);            }            @Override            public StrBuilder appendNewLine() {                count[1]++;                return super.appendNewLine();            }        };        sb.appendln(new StringBuffer("foo"), 0, 3);        assertEquals("foo" + SEP, sb.toString());        assertEquals(1, count[0]);        assertEquals(1, count[1]);    }    //-----------------------------------------------------------------------    public void testAppendln_StrBuilder() {        final int[] count = new int[2];        StrBuilder sb = new StrBuilder() {            @Override            public StrBuilder append(StrBuilder str) {                count[0]++;                return super.append(str);            }            @Override            public StrBuilder appendNewLine() {                count[1]++;                return super.appendNewLine();            }        };        sb.appendln(new StrBuilder("foo"));        assertEquals("foo" + SEP, sb.toString());        assertEquals(1, count[0]);        assertEquals(1, count[1]);    }    //-----------------------------------------------------------------------    public void testAppendln_StrBuilder_int_int() {        final int[] count = new int[2];        StrBuilder sb = new StrBuilder() {            @Override            public StrBuilder append(StrBuilder str, int startIndex, int length) {                count[0]++;                return super.append(str, startIndex, length);            }            @Override            public StrBuilder appendNewLine() {                count[1]++;                return super.appendNewLine();            }        };        sb.appendln(new StrBuilder("foo"), 0, 3);        assertEquals("foo" + SEP, sb.toString());        assertEquals(1, count[0]);        assertEquals(1, count[1]);    }    //-----------------------------------------------------------------------    public void testAppendln_CharArray() {        final int[] count = new int[2];        StrBuilder sb = new StrBuilder() {            @Override            public StrBuilder append(char[] str) {                count[0]++;                return super.append(str);            }            @Override            public StrBuilder appendNewLine() {                count[1]++;                return super.appendNewLine();            }        };        sb.appendln("foo".toCharArray());        assertEquals("foo" + SEP, sb.toString());        assertEquals(1, count[0]);        assertEquals(1, count[1]);    }    //-----------------------------------------------------------------------    public void testAppendln_CharArray_int_int() {        final int[] count = new int[2];        StrBuilder sb = new StrBuilder() {            @Override            public StrBuilder append(char[] str, int startIndex, int length) {                count[0]++;                return super.append(str, startIndex, length);            }            @Override            public StrBuilder appendNewLine() {                count[1]++;                return super.appendNewLine();            }        };        sb.appendln("foo".toCharArray(), 0, 3);        assertEquals("foo" + SEP, sb.toString());        assertEquals(1, count[0]);        assertEquals(1, count[1]);    }    //-----------------------------------------------------------------------    public void testAppendln_Boolean() {        StrBuilder sb = new StrBuilder();        sb.appendln(true);        assertEquals("true" + SEP, sb.toString());                sb.clear();        sb.appendln(false);        assertEquals("false" + SEP, sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendln_PrimitiveNumber() {        StrBuilder sb = new StrBuilder();        sb.appendln(0);        assertEquals("0" + SEP, sb.toString());                sb.clear();        sb.appendln(1L);        assertEquals("1" + SEP, sb.toString());                sb.clear();        sb.appendln(2.3f);        assertEquals("2.3" + SEP, sb.toString());                sb.clear();        sb.appendln(4.5d);        assertEquals("4.5" + SEP, sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendPadding() {        StrBuilder sb = new StrBuilder();        sb.append("foo");        assertEquals("foo", sb.toString());        sb.appendPadding(-1, '-');        assertEquals("foo", sb.toString());        sb.appendPadding(0, '-');        assertEquals("foo", sb.toString());        sb.appendPadding(1, '-');        assertEquals("foo-", sb.toString());        sb.appendPadding(16, '-');        assertEquals(20, sb.length());        //            12345678901234567890        assertEquals("foo-----------------", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendFixedWidthPadLeft() {        StrBuilder sb = new StrBuilder();        sb.appendFixedWidthPadLeft("foo", -1, '-');        assertEquals("", sb.toString());        sb.clear();        sb.appendFixedWidthPadLeft("foo", 0, '-');        assertEquals("", sb.toString());        sb.clear();        sb.appendFixedWidthPadLeft("foo", 1, '-');        assertEquals("o", sb.toString());        sb.clear();        sb.appendFixedWidthPadLeft("foo", 2, '-');        assertEquals("oo", sb.toString());        sb.clear();        sb.appendFixedWidthPadLeft("foo", 3, '-');        assertEquals("foo", sb.toString());        sb.clear();        sb.appendFixedWidthPadLeft("foo", 4, '-');        assertEquals("-foo", sb.toString());        sb.clear();        sb.appendFixedWidthPadLeft("foo", 10, '-');        assertEquals(10, sb.length());        //            1234567890        assertEquals("-------foo", sb.toString());        sb.clear();        sb.setNullText("null");        sb.appendFixedWidthPadLeft(null, 5, '-');        assertEquals("-null", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendFixedWidthPadLeft_int() {        StrBuilder sb = new StrBuilder();        sb.appendFixedWidthPadLeft(123, -1, '-');        assertEquals("", sb.toString());        sb.clear();        sb.appendFixedWidthPadLeft(123, 0, '-');        assertEquals("", sb.toString());        sb.clear();        sb.appendFixedWidthPadLeft(123, 1, '-');        assertEquals("3", sb.toString());        sb.clear();        sb.appendFixedWidthPadLeft(123, 2, '-');        assertEquals("23", sb.toString());        sb.clear();        sb.appendFixedWidthPadLeft(123, 3, '-');        assertEquals("123", sb.toString());        sb.clear();        sb.appendFixedWidthPadLeft(123, 4, '-');        assertEquals("-123", sb.toString());        sb.clear();        sb.appendFixedWidthPadLeft(123, 10, '-');        assertEquals(10, sb.length());        //            1234567890        assertEquals("-------123", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendFixedWidthPadRight() {        StrBuilder sb = new StrBuilder();        sb.appendFixedWidthPadRight("foo", -1, '-');        assertEquals("", sb.toString());        sb.clear();        sb.appendFixedWidthPadRight("foo", 0, '-');        assertEquals("", sb.toString());        sb.clear();        sb.appendFixedWidthPadRight("foo", 1, '-');        assertEquals("f", sb.toString());        sb.clear();        sb.appendFixedWidthPadRight("foo", 2, '-');        assertEquals("fo", sb.toString());        sb.clear();        sb.appendFixedWidthPadRight("foo", 3, '-');        assertEquals("foo", sb.toString());        sb.clear();        sb.appendFixedWidthPadRight("foo", 4, '-');        assertEquals("foo-", sb.toString());        sb.clear();        sb.appendFixedWidthPadRight("foo", 10, '-');        assertEquals(10, sb.length());        //            1234567890        assertEquals("foo-------", sb.toString());        sb.clear();        sb.setNullText("null");        sb.appendFixedWidthPadRight(null, 5, '-');        assertEquals("null-", sb.toString());    }    // See: http://issues.apache.org/jira/browse/LANG-299    public void testLang299() {        StrBuilder sb = new StrBuilder(1);        sb.appendFixedWidthPadRight("foo", 1, '-');        assertEquals("f", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendFixedWidthPadRight_int() {        StrBuilder sb = new StrBuilder();        sb.appendFixedWidthPadRight(123, -1, '-');        assertEquals("", sb.toString());        sb.clear();        sb.appendFixedWidthPadRight(123, 0, '-');        assertEquals("", sb.toString());        sb.clear();        sb.appendFixedWidthPadRight(123, 1, '-');        assertEquals("1", sb.toString());        sb.clear();        sb.appendFixedWidthPadRight(123, 2, '-');        assertEquals("12", sb.toString());        sb.clear();        sb.appendFixedWidthPadRight(123, 3, '-');        assertEquals("123", sb.toString());        sb.clear();        sb.appendFixedWidthPadRight(123, 4, '-');        assertEquals("123-", sb.toString());        sb.clear();        sb.appendFixedWidthPadRight(123, 10, '-');        assertEquals(10, sb.length());        //            1234567890        assertEquals("123-------", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendAll_Array() {        StrBuilder sb = new StrBuilder();        sb.appendAll((Object[]) null);        assertEquals("", sb.toString());        sb.clear();        sb.appendAll(new Object[0]);        assertEquals("", sb.toString());        sb.clear();        sb.appendAll(new Object[]{"foo", "bar", "baz"});        assertEquals("foobarbaz", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendAll_Collection() {        StrBuilder sb = new StrBuilder();        sb.appendAll((Collection) null);        assertEquals("", sb.toString());        sb.clear();        sb.appendAll(Collections.EMPTY_LIST);        assertEquals("", sb.toString());        sb.clear();        sb.appendAll(Arrays.asList(new Object[]{"foo", "bar", "baz"}));        assertEquals("foobarbaz", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendAll_Iterator() {        StrBuilder sb = new StrBuilder();        sb.appendAll((Iterator) null);        assertEquals("", sb.toString());        sb.clear();        sb.appendAll(Collections.EMPTY_LIST.iterator());        assertEquals("", sb.toString());        sb.clear();        sb.appendAll(Arrays.asList(new Object[]{"foo", "bar", "baz"}).iterator());        assertEquals("foobarbaz", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendWithSeparators_Array() {        StrBuilder sb = new StrBuilder();        sb.appendWithSeparators((Object[]) null, ",");        assertEquals("", sb.toString());        sb.clear();        sb.appendWithSeparators(new Object[0], ",");        assertEquals("", sb.toString());        sb.clear();        sb.appendWithSeparators(new Object[]{"foo", "bar", "baz"}, ",");        assertEquals("foo,bar,baz", sb.toString());        sb.clear();        sb.appendWithSeparators(new Object[]{"foo", "bar", "baz"}, null);        assertEquals("foobarbaz", sb.toString());        sb.clear();        sb.appendWithSeparators(new Object[]{"foo", null, "baz"}, ",");        assertEquals("foo,,baz", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendWithSeparators_Collection() {        StrBuilder sb = new StrBuilder();        sb.appendWithSeparators((Collection) null, ",");        assertEquals("", sb.toString());        sb.clear();        sb.appendWithSeparators(Collections.EMPTY_LIST, ",");        assertEquals("", sb.toString());        sb.clear();        sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", "bar", "baz"}), ",");        assertEquals("foo,bar,baz", sb.toString());        sb.clear();        sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", "bar", "baz"}), null);        assertEquals("foobarbaz", sb.toString());        sb.clear();        sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", null, "baz"}), ",");        assertEquals("foo,,baz", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendWithSeparators_Iterator() {        StrBuilder sb = new StrBuilder();        sb.appendWithSeparators((Iterator) null, ",");        assertEquals("", sb.toString());        sb.clear();        sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), ",");        assertEquals("", sb.toString());        sb.clear();        sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", "bar", "baz"}).iterator(), ",");        assertEquals("foo,bar,baz", sb.toString());        sb.clear();        sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", "bar", "baz"}).iterator(), null);        assertEquals("foobarbaz", sb.toString());        sb.clear();        sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", null, "baz"}).iterator(), ",");        assertEquals("foo,,baz", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendWithSeparatorsWithNullText() {        StrBuilder sb = new StrBuilder();        sb.setNullText("null");        sb.appendWithSeparators(new Object[]{"foo", null, "baz"}, ",");        assertEquals("foo,null,baz", sb.toString());        sb.clear();        sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", null, "baz"}), ",");        assertEquals("foo,null,baz", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendSeparator_String() {        StrBuilder sb = new StrBuilder();        sb.appendSeparator(",");  // no effect        assertEquals("", sb.toString());        sb.append("foo");        assertEquals("foo", sb.toString());        sb.appendSeparator(",");        assertEquals("foo,", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendSeparator_char() {        StrBuilder sb = new StrBuilder();        sb.appendSeparator(',');  // no effect        assertEquals("", sb.toString());        sb.append("foo");        assertEquals("foo", sb.toString());        sb.appendSeparator(',');        assertEquals("foo,", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendSeparator_String_int() {        StrBuilder sb = new StrBuilder();        sb.appendSeparator(",", 0);  // no effect        assertEquals("", sb.toString());        sb.append("foo");        assertEquals("foo", sb.toString());        sb.appendSeparator(",", 1);        assertEquals("foo,", sb.toString());                sb.appendSeparator(",", -1);  // no effect        assertEquals("foo,", sb.toString());    }    //-----------------------------------------------------------------------    public void testAppendSeparator_char_int() {        StrBuilder sb = new StrBuilder();        sb.appendSeparator(',', 0);  // no effect        assertEquals("", sb.toString());        sb.append("foo");        assertEquals("foo", sb.toString());        sb.appendSeparator(',', 1);        assertEquals("foo,", sb.toString());                sb.appendSeparator(',', -1);  // no effect        assertEquals("foo,", sb.toString());    }    //-----------------------------------------------------------------------    public void testInsert() {        StrBuilder sb = new StrBuilder();        sb.append("barbaz");        assertEquals("barbaz", sb.toString());        try {            sb.insert(-1, FOO);            fail("insert(-1, Object) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.insert(7, FOO);            fail("insert(7, Object) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.insert(0, (Object) null);        assertEquals("barbaz", sb.toString());        sb.insert(0, FOO);        assertEquals("foobarbaz", sb.toString());        sb.clear();        sb.append("barbaz");        assertEquals("barbaz", sb.toString());        try {            sb.insert(-1, "foo");            fail("insert(-1, String) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.insert(7, "foo");            fail("insert(7, String) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.insert(0, (String) null);        assertEquals("barbaz", sb.toString());        sb.insert(0, "foo");        assertEquals("foobarbaz", sb.toString());        sb.clear();        sb.append("barbaz");        assertEquals("barbaz", sb.toString());        try {            sb.insert(-1, new char[]{'f', 'o', 'o'});            fail("insert(-1, char[]) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.insert(7, new char[]{'f', 'o', 'o'});            fail("insert(7, char[]) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.insert(0, (char[]) null);        assertEquals("barbaz", sb.toString());        sb.insert(0, new char[0]);        assertEquals("barbaz", sb.toString());        sb.insert(0, new char[]{'f', 'o', 'o'});        assertEquals("foobarbaz", sb.toString());        sb.clear();        sb.append("barbaz");        assertEquals("barbaz", sb.toString());        try {            sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);            fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);            fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.insert(0, (char[]) null, 0, 0);        assertEquals("barbaz", sb.toString());        sb.insert(0, new char[0], 0, 0);        assertEquals("barbaz", sb.toString());        try {            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3);            fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3);            fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1);            fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10);            fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0);        assertEquals("barbaz", sb.toString());        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);        assertEquals("foobarbaz", sb.toString());        sb.clear();        sb.append("barbaz");        assertEquals("barbaz", sb.toString());        try {            sb.insert(-1, true);            fail("insert(-1, boolean) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.insert(7, true);            fail("insert(7, boolean) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.insert(0, true);        assertEquals("truebarbaz", sb.toString());        sb.insert(0, false);        assertEquals("falsetruebarbaz", sb.toString());        sb.clear();        sb.append("barbaz");        assertEquals("barbaz", sb.toString());        try {            sb.insert(-1, '!');            fail("insert(-1, char) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.insert(7, '!');            fail("insert(7, char) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.insert(0, '!');        assertEquals("!barbaz", sb.toString());        sb.clear();        sb.append("barbaz");        assertEquals("barbaz", sb.toString());        try {            sb.insert(-1, 0);            fail("insert(-1, int) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.insert(7, 0);            fail("insert(7, int) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.insert(0, '0');        assertEquals("0barbaz", sb.toString());        sb.clear();        sb.append("barbaz");        assertEquals("barbaz", sb.toString());        try {            sb.insert(-1, 1L);            fail("insert(-1, long) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.insert(7, 1L);            fail("insert(7, long) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.insert(0, 1L);        assertEquals("1barbaz", sb.toString());        sb.clear();        sb.append("barbaz");        assertEquals("barbaz", sb.toString());        try {            sb.insert(-1, 2.3F);            fail("insert(-1, float) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.insert(7, 2.3F);            fail("insert(7, float) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.insert(0, 2.3F);        assertEquals("2.3barbaz", sb.toString());        sb.clear();        sb.append("barbaz");        assertEquals("barbaz", sb.toString());        try {            sb.insert(-1, 4.5D);            fail("insert(-1, double) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.insert(7, 4.5D);            fail("insert(7, double) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.insert(0, 4.5D);        assertEquals("4.5barbaz", sb.toString());    }    //-----------------------------------------------------------------------    public void testInsertWithNullText() {        StrBuilder sb = new StrBuilder();        sb.setNullText("null");        sb.append("barbaz");        assertEquals("barbaz", sb.toString());        try {            sb.insert(-1, FOO);            fail("insert(-1, Object) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.insert(7, FOO);            fail("insert(7, Object) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.insert(0, (Object) null);        assertEquals("nullbarbaz", sb.toString());        sb.insert(0, FOO);        assertEquals("foonullbarbaz", sb.toString());        sb.clear();        sb.append("barbaz");        assertEquals("barbaz", sb.toString());        try {            sb.insert(-1, "foo");            fail("insert(-1, String) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.insert(7, "foo");            fail("insert(7, String) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.insert(0, (String) null);        assertEquals("nullbarbaz", sb.toString());        sb.insert(0, "foo");        assertEquals("foonullbarbaz", sb.toString());        sb.insert(0, (char[]) null);        assertEquals("nullfoonullbarbaz", sb.toString());        sb.insert(0, (char[]) null, 0, 0);        assertEquals("nullnullfoonullbarbaz", sb.toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.text;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests for {@link org.apache.commons.lang.text.StrMatcher}. * * @version $Id$ */public class StrMatcherTest extends TestCase {    private static final char[] BUFFER1 = "0,1\t2 3\n\r\f\u0000'\"".toCharArray();    private static final char[] BUFFER2 = "abcdef".toCharArray();    /**     * Main method.     *      * @param args  command line arguments, ignored     */    public static void main(String[] args) {        TestRunner.run(suite());    }    /**     * Return a new test suite containing this test case.     *      * @return a new test suite containing this test case     */    public static Test suite() {        TestSuite suite = new TestSuite(StrMatcherTest.class);        suite.setName("StrMatcher Tests");        return suite;    }    /**     * Create a new test case with the specified name.     *      * @param name  the name     */    public StrMatcherTest(String name) {        super(name);    }    //-----------------------------------------------------------------------    public void testCommaMatcher() {        StrMatcher matcher = StrMatcher.commaMatcher();        assertSame(matcher, StrMatcher.commaMatcher());        assertEquals(0, matcher.isMatch(BUFFER1, 0));        assertEquals(1, matcher.isMatch(BUFFER1, 1));        assertEquals(0, matcher.isMatch(BUFFER1, 2));    }    //-----------------------------------------------------------------------    public void testTabMatcher() {        StrMatcher matcher = StrMatcher.tabMatcher();        assertSame(matcher, StrMatcher.tabMatcher());        assertEquals(0, matcher.isMatch(BUFFER1, 2));        assertEquals(1, matcher.isMatch(BUFFER1, 3));        assertEquals(0, matcher.isMatch(BUFFER1, 4));    }    //-----------------------------------------------------------------------    public void testSpaceMatcher() {        StrMatcher matcher = StrMatcher.spaceMatcher();        assertSame(matcher, StrMatcher.spaceMatcher());        assertEquals(0, matcher.isMatch(BUFFER1, 4));        assertEquals(1, matcher.isMatch(BUFFER1, 5));        assertEquals(0, matcher.isMatch(BUFFER1, 6));    }    //-----------------------------------------------------------------------    public void testSplitMatcher() {        StrMatcher matcher = StrMatcher.splitMatcher();        assertSame(matcher, StrMatcher.splitMatcher());        assertEquals(0, matcher.isMatch(BUFFER1, 2));        assertEquals(1, matcher.isMatch(BUFFER1, 3));        assertEquals(0, matcher.isMatch(BUFFER1, 4));        assertEquals(1, matcher.isMatch(BUFFER1, 5));        assertEquals(0, matcher.isMatch(BUFFER1, 6));        assertEquals(1, matcher.isMatch(BUFFER1, 7));        assertEquals(1, matcher.isMatch(BUFFER1, 8));        assertEquals(1, matcher.isMatch(BUFFER1, 9));        assertEquals(0, matcher.isMatch(BUFFER1, 10));    }    //-----------------------------------------------------------------------    public void testTrimMatcher() {        StrMatcher matcher = StrMatcher.trimMatcher();        assertSame(matcher, StrMatcher.trimMatcher());        assertEquals(0, matcher.isMatch(BUFFER1, 2));        assertEquals(1, matcher.isMatch(BUFFER1, 3));        assertEquals(0, matcher.isMatch(BUFFER1, 4));        assertEquals(1, matcher.isMatch(BUFFER1, 5));        assertEquals(0, matcher.isMatch(BUFFER1, 6));        assertEquals(1, matcher.isMatch(BUFFER1, 7));        assertEquals(1, matcher.isMatch(BUFFER1, 8));        assertEquals(1, matcher.isMatch(BUFFER1, 9));        assertEquals(1, matcher.isMatch(BUFFER1, 10));    }    //-----------------------------------------------------------------------    public void testSingleQuoteMatcher() {        StrMatcher matcher = StrMatcher.singleQuoteMatcher();        assertSame(matcher, StrMatcher.singleQuoteMatcher());        assertEquals(0, matcher.isMatch(BUFFER1, 10));        assertEquals(1, matcher.isMatch(BUFFER1, 11));        assertEquals(0, matcher.isMatch(BUFFER1, 12));    }    //-----------------------------------------------------------------------    public void testDoubleQuoteMatcher() {        StrMatcher matcher = StrMatcher.doubleQuoteMatcher();        assertSame(matcher, StrMatcher.doubleQuoteMatcher());        assertEquals(0, matcher.isMatch(BUFFER1, 11));        assertEquals(1, matcher.isMatch(BUFFER1, 12));    }    //-----------------------------------------------------------------------    public void testQuoteMatcher() {        StrMatcher matcher = StrMatcher.quoteMatcher();        assertSame(matcher, StrMatcher.quoteMatcher());        assertEquals(0, matcher.isMatch(BUFFER1, 10));        assertEquals(1, matcher.isMatch(BUFFER1, 11));        assertEquals(1, matcher.isMatch(BUFFER1, 12));    }    //-----------------------------------------------------------------------    public void testNoneMatcher() {        StrMatcher matcher = StrMatcher.noneMatcher();        assertSame(matcher, StrMatcher.noneMatcher());        assertEquals(0, matcher.isMatch(BUFFER1, 0));        assertEquals(0, matcher.isMatch(BUFFER1, 1));        assertEquals(0, matcher.isMatch(BUFFER1, 2));        assertEquals(0, matcher.isMatch(BUFFER1, 3));        assertEquals(0, matcher.isMatch(BUFFER1, 4));        assertEquals(0, matcher.isMatch(BUFFER1, 5));        assertEquals(0, matcher.isMatch(BUFFER1, 6));        assertEquals(0, matcher.isMatch(BUFFER1, 7));        assertEquals(0, matcher.isMatch(BUFFER1, 8));        assertEquals(0, matcher.isMatch(BUFFER1, 9));        assertEquals(0, matcher.isMatch(BUFFER1, 10));        assertEquals(0, matcher.isMatch(BUFFER1, 11));        assertEquals(0, matcher.isMatch(BUFFER1, 12));    }    //-----------------------------------------------------------------------    public void testCharMatcher_char() {        StrMatcher matcher = StrMatcher.charMatcher('c');        assertEquals(0, matcher.isMatch(BUFFER2, 0));        assertEquals(0, matcher.isMatch(BUFFER2, 1));        assertEquals(1, matcher.isMatch(BUFFER2, 2));        assertEquals(0, matcher.isMatch(BUFFER2, 3));        assertEquals(0, matcher.isMatch(BUFFER2, 4));        assertEquals(0, matcher.isMatch(BUFFER2, 5));    }    //-----------------------------------------------------------------------    public void testCharSetMatcher_String() {        StrMatcher matcher = StrMatcher.charSetMatcher("ace");        assertEquals(1, matcher.isMatch(BUFFER2, 0));        assertEquals(0, matcher.isMatch(BUFFER2, 1));        assertEquals(1, matcher.isMatch(BUFFER2, 2));        assertEquals(0, matcher.isMatch(BUFFER2, 3));        assertEquals(1, matcher.isMatch(BUFFER2, 4));        assertEquals(0, matcher.isMatch(BUFFER2, 5));        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(""));        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null));        assertTrue(StrMatcher.charSetMatcher("a") instanceof StrMatcher.CharMatcher);    }    //-----------------------------------------------------------------------    public void testCharSetMatcher_charArray() {        StrMatcher matcher = StrMatcher.charSetMatcher("ace".toCharArray());        assertEquals(1, matcher.isMatch(BUFFER2, 0));        assertEquals(0, matcher.isMatch(BUFFER2, 1));        assertEquals(1, matcher.isMatch(BUFFER2, 2));        assertEquals(0, matcher.isMatch(BUFFER2, 3));        assertEquals(1, matcher.isMatch(BUFFER2, 4));        assertEquals(0, matcher.isMatch(BUFFER2, 5));        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(new char[0]));        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((char[]) null));        assertTrue(StrMatcher.charSetMatcher("a".toCharArray()) instanceof StrMatcher.CharMatcher);    }    //-----------------------------------------------------------------------    public void testStringMatcher_String() {        StrMatcher matcher = StrMatcher.stringMatcher("bc");        assertEquals(0, matcher.isMatch(BUFFER2, 0));        assertEquals(2, matcher.isMatch(BUFFER2, 1));        assertEquals(0, matcher.isMatch(BUFFER2, 2));        assertEquals(0, matcher.isMatch(BUFFER2, 3));        assertEquals(0, matcher.isMatch(BUFFER2, 4));        assertEquals(0, matcher.isMatch(BUFFER2, 5));        assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher(""));        assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher((String) null));    }    //-----------------------------------------------------------------------    public void testMatcherIndices() {        // remember that the API contract is tight for the isMatch() method        // all the onus is on the caller, so invalid inputs are not        // the concern of StrMatcher, and are not bugs        StrMatcher matcher = StrMatcher.stringMatcher("bc");        assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length));        assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3));        assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2));    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.text;import java.util.HashMap;import java.util.Map;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;import org.apache.commons.lang.mutable.MutableObject;/** * Test class for StrSubstitutor. *  * @author Oliver Heger * @version $Id$ */public class StrSubstitutorTest extends TestCase {    private Map values;    /**     * Main method.     *      * @param args  command line arguments, ignored     */    public static void main(String[] args) {        TestRunner.run(suite());    }    /**     * Return a new test suite containing this test case.     *      * @return a new test suite containing this test case     */    public static Test suite() {        TestSuite suite = new TestSuite(StrSubstitutorTest.class);        suite.setName("StrSubstitutor Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();        values = new HashMap();        values.put("animal", "quick brown fox");        values.put("target", "lazy dog");    }    @Override    protected void tearDown() throws Exception {        super.tearDown();        values = null;    }    //-----------------------------------------------------------------------    /**     * Tests simple key replace.     */    public void testReplaceSimple() {        doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true);    }    /**     * Tests simple key replace.     */    public void testReplaceSolo() {        doTestReplace("quick brown fox", "${animal}", false);    }    /**     * Tests replace with no variables.     */    public void testReplaceNoVariables() {        doTestNoReplace("The balloon arrived.");    }    /**     * Tests replace with null.     */    public void testReplaceNull() {        doTestNoReplace(null);    }    /**     * Tests replace with null.     */    public void testReplaceEmpty() {        doTestNoReplace("");    }    /**     * Tests key replace changing map after initialization (not recommended).     */    public void testReplaceChangedMap() {        StrSubstitutor sub = new StrSubstitutor(values);        values.put("target", "moon");        assertEquals("The quick brown fox jumps over the moon.", sub.replace("The ${animal} jumps over the ${target}."));    }    /**     * Tests unknown key replace.     */    public void testReplaceUnknownKey() {        doTestReplace("The ${person} jumps over the lazy dog.", "The ${person} jumps over the ${target}.", true);    }    /**     * Tests adjacent keys.     */    public void testReplaceAdjacentAtStart() {        values.put("code", "GBP");        values.put("amount", "12.50");        StrSubstitutor sub = new StrSubstitutor(values);        assertEquals("GBP12.50 charged", sub.replace("${code}${amount} charged"));    }    /**     * Tests adjacent keys.     */    public void testReplaceAdjacentAtEnd() {        values.put("code", "GBP");        values.put("amount", "12.50");        StrSubstitutor sub = new StrSubstitutor(values);        assertEquals("Amount is GBP12.50", sub.replace("Amount is ${code}${amount}"));    }    /**     * Tests simple recursive replace.     */    public void testReplaceRecursive() {        values.put("animal", "${critter}");        values.put("target", "${pet}");        values.put("pet", "${petCharacteristic} dog");        values.put("petCharacteristic", "lazy");        values.put("critter", "${critterSpeed} ${critterColor} ${critterType}");        values.put("critterSpeed", "quick");        values.put("critterColor", "brown");        values.put("critterType", "fox");        doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true);    }    /**     * Tests escaping.     */    public void testReplaceEscaping() {        doTestReplace("The ${animal} jumps over the lazy dog.", "The $${animal} jumps over the ${target}.", true);    }    /**     * Tests escaping.     */    public void testReplaceSoloEscaping() {        doTestReplace("${animal}", "$${animal}", false);    }    /**     * Tests complex escaping.     */    public void testReplaceComplexEscaping() {        doTestReplace("The ${quick brown fox} jumps over the lazy dog.", "The $${${animal}} jumps over the ${target}.", true);    }    /**     * Tests when no prefix or suffix.     */    public void testReplaceNoPefixNoSuffix() {        doTestReplace("The animal jumps over the lazy dog.", "The animal jumps over the ${target}.", true);    }    /**     * Tests when no incomplete prefix.     */    public void testReplaceIncompletePefix() {        doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true);    }    /**     * Tests when prefix but no suffix.     */    public void testReplacePrefixNoSuffix() {        doTestReplace("The ${animal jumps over the ${target} lazy dog.", "The ${animal jumps over the ${target} ${target}.", true);    }    /**     * Tests when suffix but no prefix.     */    public void testReplaceNoPrefixSuffix() {        doTestReplace("The animal} jumps over the lazy dog.", "The animal} jumps over the ${target}.", true);    }    /**     * Tests when no variable name.     */    public void testReplaceEmptyKeys() {        doTestReplace("The ${} jumps over the lazy dog.", "The ${} jumps over the ${target}.", true);    }    /**     * Tests replace creates output same as input.     */    public void testReplaceToIdentical() {        values.put("animal", "$${${thing}}");        values.put("thing", "animal");        doTestReplace("The ${animal} jumps.", "The ${animal} jumps.", true);    }    /**     * Tests a cyclic replace operation.     * The cycle should be detected and cause an exception to be thrown.     */    public void testCyclicReplacement() {        Map map = new HashMap();        map.put("animal", "${critter}");        map.put("target", "${pet}");        map.put("pet", "${petCharacteristic} dog");        map.put("petCharacteristic", "lazy");        map.put("critter", "${critterSpeed} ${critterColor} ${critterType}");        map.put("critterSpeed", "quick");        map.put("critterColor", "brown");        map.put("critterType", "${animal}");        StrSubstitutor sub = new StrSubstitutor(map);        try {            sub.replace("The ${animal} jumps over the ${target}.");            fail("Cyclic replacement was not detected!");        } catch (IllegalStateException ex) {            // expected        }    }    /**     * Tests interpolation with weird boundary patterns.     */    public void testReplaceWeirdPattens() {        doTestNoReplace("");        doTestNoReplace("${}");        doTestNoReplace("${ }");        doTestNoReplace("${\t}");        doTestNoReplace("${\n}");        doTestNoReplace("${\b}");        doTestNoReplace("${");        doTestNoReplace("$}");        doTestNoReplace("}");        doTestNoReplace("${}$");        doTestNoReplace("${${");        doTestNoReplace("${${}}");        doTestNoReplace("${$${}}");        doTestNoReplace("${$$${}}");        doTestNoReplace("${$$${$}}");        doTestNoReplace("${${}}");        doTestNoReplace("${${ }}");    }    /**     * Tests simple key replace.     */    public void testReplacePartialString_noReplace() {        StrSubstitutor sub = new StrSubstitutor();        assertEquals("${animal} jumps", sub.replace("The ${animal} jumps over the ${target}.", 4, 15));    }    //-----------------------------------------------------------------------    /**     * Tests protected.     */    public void testResolveVariable() {        final StrBuilder builder = new StrBuilder("Hi ${name}!");        Map map = new HashMap();        map.put("name", "commons");        StrSubstitutor sub = new StrSubstitutor(map) {            @Override            protected String resolveVariable(String variableName, StrBuilder buf, int startPos, int endPos) {                assertEquals("name", variableName);                assertSame(builder, buf);                assertEquals(3, startPos);                assertEquals(10, endPos);                return "jakarta";            }        };        sub.replaceIn(builder);        assertEquals("Hi jakarta!", builder.toString());    }    //-----------------------------------------------------------------------    /**     * Tests constructor.     */    public void testConstructorNoArgs() {        StrSubstitutor sub = new StrSubstitutor();        assertEquals("Hi ${name}", sub.replace("Hi ${name}"));    }    /**     * Tests constructor.     */    public void testConstructorMapPrefixSuffix() {        Map map = new HashMap();        map.put("name", "commons");        StrSubstitutor sub = new StrSubstitutor(map, "<", ">");        assertEquals("Hi < commons", sub.replace("Hi $< <name>"));    }    /**     * Tests constructor.     */    public void testConstructorMapFull() {        Map map = new HashMap();        map.put("name", "commons");        StrSubstitutor sub = new StrSubstitutor(map, "<", ">", '!');        assertEquals("Hi < commons", sub.replace("Hi !< <name>"));    }    //-----------------------------------------------------------------------    /**     * Tests get set.     */    public void testGetSetEscape() {        StrSubstitutor sub = new StrSubstitutor();        assertEquals('$', sub.getEscapeChar());        sub.setEscapeChar('<');        assertEquals('<', sub.getEscapeChar());    }    /**     * Tests get set.     */    public void testGetSetPrefix() {        StrSubstitutor sub = new StrSubstitutor();        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);        sub.setVariablePrefix('<');        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher);                sub.setVariablePrefix("<<");        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);        try {            sub.setVariablePrefix((String) null);            fail();        } catch (IllegalArgumentException ex) {            // expected        }        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);                StrMatcher matcher = StrMatcher.commaMatcher();        sub.setVariablePrefixMatcher(matcher);        assertSame(matcher, sub.getVariablePrefixMatcher());        try {            sub.setVariablePrefixMatcher((StrMatcher) null);            fail();        } catch (IllegalArgumentException ex) {            // expected        }        assertSame(matcher, sub.getVariablePrefixMatcher());    }    /**     * Tests get set.     */    public void testGetSetSuffix() {        StrSubstitutor sub = new StrSubstitutor();        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);        sub.setVariableSuffix('<');        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher);                sub.setVariableSuffix("<<");        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);        try {            sub.setVariableSuffix((String) null);            fail();        } catch (IllegalArgumentException ex) {            // expected        }        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);                StrMatcher matcher = StrMatcher.commaMatcher();        sub.setVariableSuffixMatcher(matcher);        assertSame(matcher, sub.getVariableSuffixMatcher());        try {            sub.setVariableSuffixMatcher((StrMatcher) null);            fail();        } catch (IllegalArgumentException ex) {            // expected        }        assertSame(matcher, sub.getVariableSuffixMatcher());    }    //-----------------------------------------------------------------------    /**     * Tests static.     */    public void testStaticReplace() {        Map map = new HashMap();        map.put("name", "commons");        assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map));    }    /**     * Tests static.     */    public void testStaticReplacePrefixSuffix() {        Map map = new HashMap();        map.put("name", "commons");        assertEquals("Hi commons!", StrSubstitutor.replace("Hi <name>!", map, "<", ">"));    }    /**     * Tests interpolation with system properties.     */    public void testStaticReplaceSystemProperties() {        StrBuilder buf = new StrBuilder();        buf.append("Hi ").append(System.getProperty("user.name"));        buf.append(", you are working with ");        buf.append(System.getProperty("os.name"));        buf.append(", your home directory is ");        buf.append(System.getProperty("user.home")).append('.');        assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties("Hi ${user.name}, you are "            + "working with ${os.name}, your home "            + "directory is ${user.home}."));    }    //-----------------------------------------------------------------------    private void doTestReplace(String expectedResult, String replaceTemplate, boolean substring) {        String expectedShortResult = expectedResult.substring(1, expectedResult.length() - 1);        StrSubstitutor sub = new StrSubstitutor(values);                // replace using String        assertEquals(expectedResult, sub.replace(replaceTemplate));        if (substring) {            assertEquals(expectedShortResult, sub.replace(replaceTemplate, 1, replaceTemplate.length() - 2));        }                // replace using char[]        char[] chars = replaceTemplate.toCharArray();        assertEquals(expectedResult, sub.replace(chars));        if (substring) {            assertEquals(expectedShortResult, sub.replace(chars, 1, chars.length - 2));        }                // replace using StringBuffer        StringBuffer buf = new StringBuffer(replaceTemplate);        assertEquals(expectedResult, sub.replace(buf));        if (substring) {            assertEquals(expectedShortResult, sub.replace(buf, 1, buf.length() - 2));        }                // replace using StrBuilder        StrBuilder bld = new StrBuilder(replaceTemplate);        assertEquals(expectedResult, sub.replace(bld));        if (substring) {            assertEquals(expectedShortResult, sub.replace(bld, 1, bld.length() - 2));        }                // replace using object        MutableObject obj = new MutableObject(replaceTemplate);  // toString returns template        assertEquals(expectedResult, sub.replace(obj));                // replace in StringBuffer        buf = new StringBuffer(replaceTemplate);        assertEquals(true, sub.replaceIn(buf));        assertEquals(expectedResult, buf.toString());        if (substring) {            buf = new StringBuffer(replaceTemplate);            assertEquals(true, sub.replaceIn(buf, 1, buf.length() - 2));            assertEquals(expectedResult, buf.toString());  // expect full result as remainder is untouched        }                // replace in StrBuilder        bld = new StrBuilder(replaceTemplate);        assertEquals(true, sub.replaceIn(bld));        assertEquals(expectedResult, bld.toString());        if (substring) {            bld = new StrBuilder(replaceTemplate);            assertEquals(true, sub.replaceIn(bld, 1, bld.length() - 2));            assertEquals(expectedResult, bld.toString());  // expect full result as remainder is untouched        }    }    private void doTestNoReplace(String replaceTemplate) {        StrSubstitutor sub = new StrSubstitutor(values);                if (replaceTemplate == null) {            assertEquals(null, sub.replace((String) null));            assertEquals(null, sub.replace((String) null, 0, 100));            assertEquals(null, sub.replace((char[]) null));            assertEquals(null, sub.replace((char[]) null, 0, 100));            assertEquals(null, sub.replace((StringBuffer) null));            assertEquals(null, sub.replace((StringBuffer) null, 0, 100));            assertEquals(null, sub.replace((StrBuilder) null));            assertEquals(null, sub.replace((StrBuilder) null, 0, 100));            assertEquals(null, sub.replace((Object) null));            assertEquals(false, sub.replaceIn((StringBuffer) null));            assertEquals(false, sub.replaceIn((StringBuffer) null, 0, 100));            assertEquals(false, sub.replaceIn((StrBuilder) null));            assertEquals(false, sub.replaceIn((StrBuilder) null, 0, 100));        } else {            assertEquals(replaceTemplate, sub.replace(replaceTemplate));            StrBuilder bld = new StrBuilder(replaceTemplate);            assertEquals(false, sub.replaceIn(bld));            assertEquals(replaceTemplate, bld.toString());        }    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.text;import java.text.ChoiceFormat;import java.text.DateFormat;import java.text.FieldPosition;import java.text.Format;import java.text.MessageFormat;import java.text.NumberFormat;import java.text.ParsePosition;import java.util.Arrays;import java.util.Calendar;import java.util.Collections;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.Locale;import java.util.Map;import org.apache.commons.lang.SystemUtils;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Test case for {@link ExtendedMessageFormat}. * * @since 2.4 * @version $Id$ */public class ExtendedMessageFormatTest extends TestCase {    private final Map registry = new HashMap();    /**     * Return a new test suite containing this test case.     *      * @return a new test suite containing this test case     */    public static Test suite() {        TestSuite suite = new TestSuite(ExtendedMessageFormatTest.class);        suite.setName("ExtendedMessageFormat Tests");        return suite;    }    /**     * Create a new test case.     *     * @param name The name of the test     */    public ExtendedMessageFormatTest(String name) {        super(name);    }    @Override    protected void setUp() throws Exception {        super.setUp();        registry.put("lower", new LowerCaseFormatFactory());        registry.put("upper", new UpperCaseFormatFactory());    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    /**     * Test extended formats.     */    public void testExtendedFormats() {        String pattern = "Lower: {0,lower} Upper: {1,upper}";        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);        assertPatternsEqual("TOPATTERN", pattern, emf.toPattern());        assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] {"foo", "bar"}));        assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] {"Foo", "Bar"}));        assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] {"FOO", "BAR"}));        assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] {"FOO", "bar"}));        assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] {"foo", "BAR"}));    }    /**     * Test Bug LANG-477 - out of memory error with escaped quote     */    public void testEscapedQuote_LANG_477() {        String pattern = "it''s a {0,lower} 'test'!";        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);        assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"}));    }    /**     * Test extended and built in formats.     */    public void testExtendedAndBuiltInFormats() {        Calendar cal = Calendar.getInstance();        cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05);        Object[] args = new Object[] {"John Doe", cal.getTime(), new Double("12345.67")};        String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}";        String extendedPattern = "Name: {0,upper} ";        String pattern = extendedPattern + builtinsPattern;        HashSet testLocales = new HashSet();        testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales()));        testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales()));        testLocales.add(null);        for (Iterator l = testLocales.iterator(); l.hasNext();) {            Locale locale = (Locale) l.next();            MessageFormat builtins = createMessageFormat(builtinsPattern, locale);            String expectedPattern = extendedPattern + builtins.toPattern();            DateFormat df = null;            NumberFormat nf = null;            ExtendedMessageFormat emf = null;            if (locale == null) {                df = DateFormat.getDateInstance(DateFormat.SHORT);                nf = NumberFormat.getCurrencyInstance();                emf = new ExtendedMessageFormat(pattern, registry);            } else {                df = DateFormat.getDateInstance(DateFormat.SHORT, locale);                nf = NumberFormat.getCurrencyInstance(locale);                emf = new ExtendedMessageFormat(pattern, locale, registry);            }            StringBuffer expected = new StringBuffer();            expected.append("Name: ");            expected.append(args[0].toString().toUpperCase());            expected.append(" DOB: ");            expected.append(df.format(args[1]));            expected.append(" Salary: ");            expected.append(nf.format(args[2]));            assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern());            assertEquals(String.valueOf(locale), expected.toString(), emf.format(args));        }    }//    /**//     * Test extended formats with choice format.//     *//     * N.B. FAILING - currently sub-formats not supported//     *///    public void testExtendedWithChoiceFormat() {//        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}";//        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);//        assertPatterns(null, pattern, emf.toPattern());//        try {//            assertEquals("one", emf.format(new Object[] {new Integer(1), "ONE"}));//            assertEquals("TWO", emf.format(new Object[] {new Integer(2), "two"}));//        } catch (IllegalArgumentException e) {//            // currently sub-formats not supported//        }//    }//    /**//     * Test mixed extended and built-in formats with choice format.//     *//     * N.B. FAILING - currently sub-formats not supported//     *///    public void testExtendedAndBuiltInWithChoiceFormat() {//        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}";//        Object[] lowArgs  = new Object[] {new Integer(1), "Low",  new Double("1234.56")};//        Object[] highArgs = new Object[] {new Integer(2), "High", new Double("9876.54")};//        Locale[] availableLocales = ChoiceFormat.getAvailableLocales();//        Locale[] testLocales = new Locale[availableLocales.length + 1];//        testLocales[0] = null;//        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length);//        for (int i = 0; i < testLocales.length; i++) {//            NumberFormat nf = null;//            NumberFormat cf = null;//            ExtendedMessageFormat emf = null;//            if (testLocales[i] == null) {//                nf = NumberFormat.getNumberInstance();//                cf = NumberFormat.getCurrencyInstance();//                emf = new ExtendedMessageFormat(pattern, registry);//            } else {//                nf = NumberFormat.getNumberInstance(testLocales[i]);//                cf = NumberFormat.getCurrencyInstance(testLocales[i]);//                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry);//            }//            assertPatterns(null, pattern, emf.toPattern());//            try {//                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]);//                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]);//                assertEquals(lowExpected,  emf.format(lowArgs));//                assertEquals(highExpected, emf.format(highArgs));//            } catch (IllegalArgumentException e) {//                // currently sub-formats not supported//            }//        }//    }    /**     * Test the built in choice format.     */    public void testBuiltInChoiceFormat() {        Object[] values = new Number[] {new Integer(1), new Double("2.2"), new Double("1234.5")};        String choicePattern = null;        Locale[] availableLocales = ChoiceFormat.getAvailableLocales();        choicePattern = "{0,choice,1#One|2#Two|3#Many {0,number}}";        for (int i = 0; i < values.length; i++) {            checkBuiltInFormat(values[i] + ": " + choicePattern, new Object[] {values[i]}, availableLocales);        }        choicePattern = "{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}";        for (int i = 0; i < values.length; i++) {            checkBuiltInFormat(values[i] + ": " + choicePattern, new Object[] {values[i]}, availableLocales);        }    }    /**     * Test the built in date/time formats     */    public void testBuiltInDateTimeFormat() {        Calendar cal = Calendar.getInstance();        cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05);        Object[] args = new Object[] {cal.getTime()};        Locale[] availableLocales = DateFormat.getAvailableLocales();        checkBuiltInFormat("1: {0,date,short}",    args, availableLocales);        checkBuiltInFormat("2: {0,date,medium}",   args, availableLocales);        checkBuiltInFormat("3: {0,date,long}",     args, availableLocales);        checkBuiltInFormat("4: {0,date,full}",     args, availableLocales);        checkBuiltInFormat("5: {0,date,d MMM yy}", args, availableLocales);        checkBuiltInFormat("6: {0,time,short}",    args, availableLocales);        checkBuiltInFormat("7: {0,time,medium}",   args, availableLocales);        checkBuiltInFormat("8: {0,time,long}",     args, availableLocales);        checkBuiltInFormat("9: {0,time,full}",     args, availableLocales);        checkBuiltInFormat("10: {0,time,HH:mm}",   args, availableLocales);        checkBuiltInFormat("11: {0,date}",         args, availableLocales);        checkBuiltInFormat("12: {0,time}",         args, availableLocales);    }    public void testOverriddenBuiltinFormat() {        Calendar cal = Calendar.getInstance();        cal.set(2007, Calendar.JANUARY, 23);        Object[] args = new Object[] {cal.getTime()};        Locale[] availableLocales = DateFormat.getAvailableLocales();        Map registry = Collections.singletonMap("date", new OverrideShortDateFormatFactory());        //check the non-overridden builtins:        checkBuiltInFormat("1: {0,date}", registry,          args, availableLocales);        checkBuiltInFormat("2: {0,date,medium}", registry,   args, availableLocales);        checkBuiltInFormat("3: {0,date,long}", registry,     args, availableLocales);        checkBuiltInFormat("4: {0,date,full}", registry,     args, availableLocales);        checkBuiltInFormat("5: {0,date,d MMM yy}", registry, args, availableLocales);        //check the overridden format:        for (int i = -1; i < availableLocales.length; i++) {            Locale locale = i < 0 ? null : availableLocales[i];            MessageFormat dateDefault = createMessageFormat("{0,date}", locale);            String pattern = "{0,date,short}";            ExtendedMessageFormat dateShort = new ExtendedMessageFormat(pattern, locale, registry);            assertEquals("overridden date,short format", dateDefault.format(args), dateShort.format(args));            assertEquals("overridden date,short pattern", pattern, dateShort.toPattern());        }    }    /**     * Test the built in number formats.     */    public void testBuiltInNumberFormat() {        Object[] args = new Object[] {new Double("6543.21")};        Locale[] availableLocales = NumberFormat.getAvailableLocales();        checkBuiltInFormat("1: {0,number}",            args, availableLocales);        checkBuiltInFormat("2: {0,number,integer}",    args, availableLocales);        checkBuiltInFormat("3: {0,number,currency}",   args, availableLocales);        checkBuiltInFormat("4: {0,number,percent}",    args, availableLocales);        checkBuiltInFormat("5: {0,number,00000.000}",  args, availableLocales);    }    /**     * Test a built in format for the specified Locales, plus <code>null</code> Locale.     * @param pattern MessageFormat pattern     * @param args MessageFormat arguments     * @param locales to test     */    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {        checkBuiltInFormat(pattern, null, args, locales);    }    /**     * Test a built in format for the specified Locales, plus <code>null</code> Locale.     * @param pattern MessageFormat pattern     * @param registry FormatFactory registry to use     * @param args MessageFormat arguments     * @param locales to test     */    private void checkBuiltInFormat(String pattern, Map registry, Object[] args, Locale[] locales) {        checkBuiltInFormat(pattern, registry, args, (Locale) null);        for (int i = 0; i < locales.length; i++) {            checkBuiltInFormat(pattern, registry, args, locales[i]);        }    }    /**     * Create an ExtendedMessageFormat for the specified pattern and locale and check the     * formated output matches the expected result for the parameters.     * @param pattern string     * @param registry map     * @param args Object[]     * @param locale Locale     */    private void checkBuiltInFormat(String pattern, Map registry, Object[] args, Locale locale) {        StringBuffer buffer = new StringBuffer();        buffer.append("Pattern=[");        buffer.append(pattern);        buffer.append("], locale=[");        buffer.append(locale);        buffer.append("]");        MessageFormat mf = createMessageFormat(pattern, locale);        // System.out.println(buffer + ", result=[" + mf.format(args) +"]");        ExtendedMessageFormat emf = null;        if (locale == null) {            emf = new ExtendedMessageFormat(pattern);        } else {            emf = new ExtendedMessageFormat(pattern, locale);        }        assertEquals("format "    + buffer.toString(), mf.format(args), emf.format(args));        assertPatternsEqual("toPattern " + buffer.toString(), mf.toPattern(),  emf.toPattern());    }    //can't trust what MessageFormat does with toPattern() pre 1.4:    private void assertPatternsEqual(String message, String expected, String actual) {        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {            assertEquals(message, expected, actual);        }    }    /**     * Replace MessageFormat(String, Locale) constructor (not available until JDK 1.4).     * @param pattern string     * @param locale Locale     * @return MessageFormat     */    private MessageFormat createMessageFormat(String pattern, Locale locale) {        MessageFormat result = new MessageFormat(pattern);        if (locale != null) {            result.setLocale(locale);            result.applyPattern(pattern);        }        return result;    }    // ------------------------ Test Formats ------------------------    /**     * {@link Format} implementation which converts to lower case.     */    private static class LowerCaseFormat extends Format {        @Override        public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {            return toAppendTo.append(((String)obj).toLowerCase());        }        @Override        public Object parseObject(String source, ParsePosition pos) {throw new UnsupportedOperationException();}    }    /**     * {@link Format} implementation which converts to upper case.     */    private static class UpperCaseFormat extends Format {        @Override        public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {            return toAppendTo.append(((String)obj).toUpperCase());        }        @Override        public Object parseObject(String source, ParsePosition pos) {throw new UnsupportedOperationException();}    }    // ------------------------ Test Format Factories ---------------    /**     * {@link FormatFactory} implementation for lower case format.     */    private static class LowerCaseFormatFactory implements FormatFactory {        private static final Format LOWER_INSTANCE = new LowerCaseFormat();        public Format getFormat(String name, String arguments, Locale locale) {            return LOWER_INSTANCE;        }    }    /**     * {@link FormatFactory} implementation for upper case format.     */    private static class UpperCaseFormatFactory implements FormatFactory {        private static final Format UPPER_INSTANCE = new UpperCaseFormat();        public Format getFormat(String name, String arguments, Locale locale) {            return UPPER_INSTANCE;        }    }    /**     * {@link FormatFactory} implementation to override date format "short" to "default".     */    private static class OverrideShortDateFormatFactory implements FormatFactory {        public Format getFormat(String name, String arguments, Locale locale) {            return !"short".equals(arguments) ? null                    : locale == null ? DateFormat                            .getDateInstance(DateFormat.DEFAULT) : DateFormat                            .getDateInstance(DateFormat.DEFAULT, locale);        }    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.text;import java.text.FieldPosition;import java.text.Format;import java.text.ParsePosition;import java.text.SimpleDateFormat;import java.util.Locale;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests for {@link org.apache.commons.lang.text.CompositeFormat}. */public class CompositeFormatTest extends TestCase {    /**     * Main method.     *      * @param args  command line arguments, ignored     */    public static void main(String[] args) {        TestRunner.run(suite());    }    /**     * Return a new test suite containing this test case.     *      * @return a new test suite containing this test case     */    public static Test suite() {        TestSuite suite = new TestSuite(CompositeFormatTest.class);        suite.setName("CompositeFormat Tests");        return suite;    }    /**     * Create a new test case with the specified name.     *      * @param name     *            name     */    public CompositeFormatTest(String name) {        super(name);    }    /**     * Ensures that the parse/format separation is correctly maintained.      */    public void testCompositeFormat() {        Format parser = new Format() {            @Override            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {                throw new UnsupportedOperationException("Not implemented");            }            @Override            public Object parseObject(String source, ParsePosition pos) {                return null;    // do nothing            }        };        Format formatter = new Format() {            @Override            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {                return null;    // do nothing            }            @Override            public Object parseObject(String source, ParsePosition pos) {                throw new UnsupportedOperationException("Not implemented");            }        };        CompositeFormat composite = new CompositeFormat(parser, formatter);        composite.parseObject("", null);        composite.format(new Object(), new StringBuffer(), null);        assertEquals( "Parser get method incorrectly implemented", parser, composite.getParser() );        assertEquals( "Formatter get method incorrectly implemented", formatter, composite.getFormatter() );    }    public void testUsage() throws Exception {        Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH);        Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH);        CompositeFormat c = new CompositeFormat(f1, f2);        String testString = "January 3, 2005";        assertEquals(testString, c.format(c.parseObject("01032005")));        assertEquals(testString, c.reformat("01032005"));    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.text;import java.util.Arrays;import java.util.Collections;import java.util.List;import java.util.NoSuchElementException;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;import org.apache.commons.lang.ArrayUtils;import org.apache.commons.lang.ObjectUtils;/** * Unit test for Tokenizer. *  * @author Matthew Inger */public class StrTokenizerTest extends TestCase {    private static final String CSV_SIMPLE_FIXTURE = "A,b,c";    private static final String TSV_SIMPLE_FIXTURE = "A\tb\tc";    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(StrTokenizerTest.class);        suite.setName("TokenizerTest Tests");        return suite;    }    /**     * JUnit constructor.     *      * @param name     */    public StrTokenizerTest(String name) {        super(name);    }    private void checkClone(StrTokenizer tokenizer) {        assertFalse(StrTokenizer.getCSVInstance() == tokenizer);        assertFalse(StrTokenizer.getTSVInstance() == tokenizer);    }    // -----------------------------------------------------------------------    public void test1() {        String input = "a;b;c;\"d;\"\"e\";f; ; ;  ";        StrTokenizer tok = new StrTokenizer(input);        tok.setDelimiterChar(';');        tok.setQuoteChar('"');        tok.setIgnoredMatcher(StrMatcher.trimMatcher());        tok.setIgnoreEmptyTokens(false);        String tokens[] = tok.getTokenArray();        String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", "", "", "",};        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);        for (int i = 0; i < expected.length; i++) {            assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'",                    ObjectUtils.equals(expected[i], tokens[i]));        }    }    public void test2() {        String input = "a;b;c ;\"d;\"\"e\";f; ; ;";        StrTokenizer tok = new StrTokenizer(input);        tok.setDelimiterChar(';');        tok.setQuoteChar('"');        tok.setIgnoredMatcher(StrMatcher.noneMatcher());        tok.setIgnoreEmptyTokens(false);        String tokens[] = tok.getTokenArray();        String expected[] = new String[]{"a", "b", "c ", "d;\"e", "f", " ", " ", "",};        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);        for (int i = 0; i < expected.length; i++) {            assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'",                    ObjectUtils.equals(expected[i], tokens[i]));        }    }    public void test3() {        String input = "a;b; c;\"d;\"\"e\";f; ; ;";        StrTokenizer tok = new StrTokenizer(input);        tok.setDelimiterChar(';');        tok.setQuoteChar('"');        tok.setIgnoredMatcher(StrMatcher.noneMatcher());        tok.setIgnoreEmptyTokens(false);        String tokens[] = tok.getTokenArray();        String expected[] = new String[]{"a", "b", " c", "d;\"e", "f", " ", " ", "",};        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);        for (int i = 0; i < expected.length; i++) {            assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'",                    ObjectUtils.equals(expected[i], tokens[i]));        }    }    public void test4() {        String input = "a;b; c;\"d;\"\"e\";f; ; ;";        StrTokenizer tok = new StrTokenizer(input);        tok.setDelimiterChar(';');        tok.setQuoteChar('"');        tok.setIgnoredMatcher(StrMatcher.trimMatcher());        tok.setIgnoreEmptyTokens(true);        String tokens[] = tok.getTokenArray();        String expected[] = new String[]{"a", "b", "c", "d;\"e", "f",};        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);        for (int i = 0; i < expected.length; i++) {            assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'",                    ObjectUtils.equals(expected[i], tokens[i]));        }    }    public void test5() {        String input = "a;b; c;\"d;\"\"e\";f; ; ;";        StrTokenizer tok = new StrTokenizer(input);        tok.setDelimiterChar(';');        tok.setQuoteChar('"');        tok.setIgnoredMatcher(StrMatcher.trimMatcher());        tok.setIgnoreEmptyTokens(false);        tok.setEmptyTokenAsNull(true);        String tokens[] = tok.getTokenArray();        String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,};        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);        for (int i = 0; i < expected.length; i++) {            assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'",                    ObjectUtils.equals(expected[i], tokens[i]));        }    }    public void test6() {        String input = "a;b; c;\"d;\"\"e\";f; ; ;";        StrTokenizer tok = new StrTokenizer(input);        tok.setDelimiterChar(';');        tok.setQuoteChar('"');        tok.setIgnoredMatcher(StrMatcher.trimMatcher());        tok.setIgnoreEmptyTokens(false);        // tok.setTreatingEmptyAsNull(true);        String tokens[] = tok.getTokenArray();        String expected[] = new String[]{"a", "b", " c", "d;\"e", "f", null, null, null,};        int nextCount = 0;        while (tok.hasNext()) {            tok.next();            nextCount++;        }        int prevCount = 0;        while (tok.hasPrevious()) {            tok.previous();            prevCount++;        }        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);        assertTrue("could not cycle through entire token list" + " using the 'hasNext' and 'next' methods",                nextCount == expected.length);        assertTrue("could not cycle through entire token list" + " using the 'hasPrevious' and 'previous' methods",                prevCount == expected.length);    }    public void test7() {        String input = "a   b c \"d e\" f ";        StrTokenizer tok = new StrTokenizer(input);        tok.setDelimiterMatcher(StrMatcher.spaceMatcher());        tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());        tok.setIgnoredMatcher(StrMatcher.noneMatcher());        tok.setIgnoreEmptyTokens(false);        String tokens[] = tok.getTokenArray();        String expected[] = new String[]{"a", "", "", "b", "c", "d e", "f", "",};        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);        for (int i = 0; i < expected.length; i++) {            assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'",                    ObjectUtils.equals(expected[i], tokens[i]));        }    }    public void test8() {        String input = "a   b c \"d e\" f ";        StrTokenizer tok = new StrTokenizer(input);        tok.setDelimiterMatcher(StrMatcher.spaceMatcher());        tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());        tok.setIgnoredMatcher(StrMatcher.noneMatcher());        tok.setIgnoreEmptyTokens(true);        String tokens[] = tok.getTokenArray();        String expected[] = new String[]{"a", "b", "c", "d e", "f",};        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);        for (int i = 0; i < expected.length; i++) {            assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'",                    ObjectUtils.equals(expected[i], tokens[i]));        }    }    public void testBasic1() {        String input = "a  b c";        StrTokenizer tok = new StrTokenizer(input);        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasic2() {        String input = "a \nb\fc";        StrTokenizer tok = new StrTokenizer(input);        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasic3() {        String input = "a \nb\u0001\fc";        StrTokenizer tok = new StrTokenizer(input);        assertEquals("a", tok.next());        assertEquals("b\u0001", tok.next());        assertEquals("c", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasic4() {        String input = "a \"b\" c";        StrTokenizer tok = new StrTokenizer(input);        assertEquals("a", tok.next());        assertEquals("\"b\"", tok.next());        assertEquals("c", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasic5() {        String input = "a:b':c";        StrTokenizer tok = new StrTokenizer(input, ':', '\'');        assertEquals("a", tok.next());        assertEquals("b'", tok.next());        assertEquals("c", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicDelim1() {        String input = "a:b:c";        StrTokenizer tok = new StrTokenizer(input, ':');        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicDelim2() {        String input = "a:b:c";        StrTokenizer tok = new StrTokenizer(input, ',');        assertEquals("a:b:c", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicEmpty1() {        String input = "a  b c";        StrTokenizer tok = new StrTokenizer(input);        tok.setIgnoreEmptyTokens(false);        assertEquals("a", tok.next());        assertEquals("", tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicEmpty2() {        String input = "a  b c";        StrTokenizer tok = new StrTokenizer(input);        tok.setIgnoreEmptyTokens(false);        tok.setEmptyTokenAsNull(true);        assertEquals("a", tok.next());        assertEquals(null, tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicQuoted1() {        String input = "a 'b' c";        StrTokenizer tok = new StrTokenizer(input, ' ', '\'');        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicQuoted2() {        String input = "a:'b':";        StrTokenizer tok = new StrTokenizer(input, ':', '\'');        tok.setIgnoreEmptyTokens(false);        tok.setEmptyTokenAsNull(true);        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals(null, tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicQuoted3() {        String input = "a:'b''c'";        StrTokenizer tok = new StrTokenizer(input, ':', '\'');        tok.setIgnoreEmptyTokens(false);        tok.setEmptyTokenAsNull(true);        assertEquals("a", tok.next());        assertEquals("b'c", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicQuoted4() {        String input = "a: 'b' 'c' :d";        StrTokenizer tok = new StrTokenizer(input, ':', '\'');        tok.setTrimmerMatcher(StrMatcher.trimMatcher());        tok.setIgnoreEmptyTokens(false);        tok.setEmptyTokenAsNull(true);        assertEquals("a", tok.next());        assertEquals("b c", tok.next());        assertEquals("d", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicQuoted5() {        String input = "a: 'b'x'c' :d";        StrTokenizer tok = new StrTokenizer(input, ':', '\'');        tok.setTrimmerMatcher(StrMatcher.trimMatcher());        tok.setIgnoreEmptyTokens(false);        tok.setEmptyTokenAsNull(true);        assertEquals("a", tok.next());        assertEquals("bxc", tok.next());        assertEquals("d", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicQuoted6() {        String input = "a:'b'\"c':d";        StrTokenizer tok = new StrTokenizer(input, ':');        tok.setQuoteMatcher(StrMatcher.quoteMatcher());        assertEquals("a", tok.next());        assertEquals("b\"c:d", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicQuoted7() {        String input = "a:\"There's a reason here\":b";        StrTokenizer tok = new StrTokenizer(input, ':');        tok.setQuoteMatcher(StrMatcher.quoteMatcher());        assertEquals("a", tok.next());        assertEquals("There's a reason here", tok.next());        assertEquals("b", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicQuotedTrimmed1() {        String input = "a: 'b' :";        StrTokenizer tok = new StrTokenizer(input, ':', '\'');        tok.setTrimmerMatcher(StrMatcher.trimMatcher());        tok.setIgnoreEmptyTokens(false);        tok.setEmptyTokenAsNull(true);        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals(null, tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicTrimmed1() {        String input = "a: b :  ";        StrTokenizer tok = new StrTokenizer(input, ':');        tok.setTrimmerMatcher(StrMatcher.trimMatcher());        tok.setIgnoreEmptyTokens(false);        tok.setEmptyTokenAsNull(true);        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals(null, tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicTrimmed2() {        String input = "a:  b  :";        StrTokenizer tok = new StrTokenizer(input, ':');        tok.setTrimmerMatcher(StrMatcher.stringMatcher("  "));        tok.setIgnoreEmptyTokens(false);        tok.setEmptyTokenAsNull(true);        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals(null, tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicIgnoreTrimmed1() {        String input = "a: bIGNOREc : ";        StrTokenizer tok = new StrTokenizer(input, ':');        tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE"));        tok.setTrimmerMatcher(StrMatcher.trimMatcher());        tok.setIgnoreEmptyTokens(false);        tok.setEmptyTokenAsNull(true);        assertEquals("a", tok.next());        assertEquals("bc", tok.next());        assertEquals(null, tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicIgnoreTrimmed2() {        String input = "IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE ";        StrTokenizer tok = new StrTokenizer(input, ':');        tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE"));        tok.setTrimmerMatcher(StrMatcher.trimMatcher());        tok.setIgnoreEmptyTokens(false);        tok.setEmptyTokenAsNull(true);        assertEquals("a", tok.next());        assertEquals("bc", tok.next());        assertEquals(null, tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicIgnoreTrimmed3() {        String input = "IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE ";        StrTokenizer tok = new StrTokenizer(input, ':');        tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE"));        tok.setIgnoreEmptyTokens(false);        tok.setEmptyTokenAsNull(true);        assertEquals("a", tok.next());        assertEquals("  bc  ", tok.next());        assertEquals("  ", tok.next());        assertEquals(false, tok.hasNext());    }    public void testBasicIgnoreTrimmed4() {        String input = "IGNOREaIGNORE: IGNORE 'bIGNOREc'IGNORE'd' IGNORE : IGNORE ";        StrTokenizer tok = new StrTokenizer(input, ':', '\'');        tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE"));        tok.setTrimmerMatcher(StrMatcher.trimMatcher());        tok.setIgnoreEmptyTokens(false);        tok.setEmptyTokenAsNull(true);        assertEquals("a", tok.next());        assertEquals("bIGNOREcd", tok.next());        assertEquals(null, tok.next());        assertEquals(false, tok.hasNext());    }    //-----------------------------------------------------------------------    public void testListArray() {        String input = "a  b c";        StrTokenizer tok = new StrTokenizer(input);        String[] array = tok.getTokenArray();        List list = tok.getTokenList();                assertEquals(Arrays.asList(array), list);        assertEquals(3, list.size());    }    //-----------------------------------------------------------------------    public void testCSV(String data) {        this.testXSVAbc(StrTokenizer.getCSVInstance(data));        this.testXSVAbc(StrTokenizer.getCSVInstance(data.toCharArray()));    }    public void testCSVEmpty() {        this.testEmpty(StrTokenizer.getCSVInstance());        this.testEmpty(StrTokenizer.getCSVInstance(""));    }    public void testCSVSimple() {        this.testCSV(CSV_SIMPLE_FIXTURE);    }    public void testCSVSimpleNeedsTrim() {        this.testCSV("   " + CSV_SIMPLE_FIXTURE);        this.testCSV("   \n\t  " + CSV_SIMPLE_FIXTURE);        this.testCSV("   \n  " + CSV_SIMPLE_FIXTURE + "\n\n\r");    }    void testEmpty(StrTokenizer tokenizer) {        this.checkClone(tokenizer);        assertEquals(false, tokenizer.hasNext());        assertEquals(false, tokenizer.hasPrevious());        assertEquals(null, tokenizer.nextToken());        assertEquals(0, tokenizer.size());        try {            tokenizer.next();            fail();        } catch (NoSuchElementException ex) {}    }    public void testGetContent() {        String input = "a   b c \"d e\" f ";        StrTokenizer tok = new StrTokenizer(input);        assertEquals(input, tok.getContent());        tok = new StrTokenizer(input.toCharArray());        assertEquals(input, tok.getContent());                tok = new StrTokenizer();        assertEquals(null, tok.getContent());    }    //-----------------------------------------------------------------------    public void testChaining() {        StrTokenizer tok = new StrTokenizer();        assertEquals(tok, tok.reset());        assertEquals(tok, tok.reset(""));        assertEquals(tok, tok.reset(new char[0]));        assertEquals(tok, tok.setDelimiterChar(' '));        assertEquals(tok, tok.setDelimiterString(" "));        assertEquals(tok, tok.setDelimiterMatcher(null));        assertEquals(tok, tok.setQuoteChar(' '));        assertEquals(tok, tok.setQuoteMatcher(null));        assertEquals(tok, tok.setIgnoredChar(' '));        assertEquals(tok, tok.setIgnoredMatcher(null));        assertEquals(tok, tok.setTrimmerMatcher(null));        assertEquals(tok, tok.setEmptyTokenAsNull(false));        assertEquals(tok, tok.setIgnoreEmptyTokens(false));    }    /**     * Tests that the {@link StrTokenizer#clone()} clone method catches {@link CloneNotSupportedException} and returns     * <code>null</code>.     */    public void testCloneNotSupportedException() {        Object notCloned = (new StrTokenizer() {            @Override            Object cloneReset() throws CloneNotSupportedException {                throw new CloneNotSupportedException("test");            }        }).clone();        assertNull(notCloned);    }    public void testCloneNull() {        StrTokenizer tokenizer = new StrTokenizer((char[]) null);        // Start sanity check        assertEquals(null, tokenizer.nextToken());        tokenizer.reset();        assertEquals(null, tokenizer.nextToken());        // End sanity check        StrTokenizer clonedTokenizer = (StrTokenizer) tokenizer.clone();        tokenizer.reset();        assertEquals(null, tokenizer.nextToken());        assertEquals(null, clonedTokenizer.nextToken());    }    public void testCloneReset() {        char[] input = new char[]{'a'};        StrTokenizer tokenizer = new StrTokenizer(input);        // Start sanity check        assertEquals("a", tokenizer.nextToken());        tokenizer.reset(input);        assertEquals("a", tokenizer.nextToken());        // End sanity check        StrTokenizer clonedTokenizer = (StrTokenizer) tokenizer.clone();        input[0] = 'b';        tokenizer.reset(input);        assertEquals("b", tokenizer.nextToken());        assertEquals("a", clonedTokenizer.nextToken());    }      // -----------------------------------------------------------------------    public void testConstructor_String() {        StrTokenizer tok = new StrTokenizer("a b");        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals(false, tok.hasNext());                tok = new StrTokenizer("");        assertEquals(false, tok.hasNext());                tok = new StrTokenizer((String) null);        assertEquals(false, tok.hasNext());    }    //-----------------------------------------------------------------------    public void testConstructor_String_char() {        StrTokenizer tok = new StrTokenizer("a b", ' ');        assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1));        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals(false, tok.hasNext());                tok = new StrTokenizer("", ' ');        assertEquals(false, tok.hasNext());                tok = new StrTokenizer((String) null, ' ');        assertEquals(false, tok.hasNext());    }    //-----------------------------------------------------------------------    public void testConstructor_String_char_char() {        StrTokenizer tok = new StrTokenizer("a b", ' ', '"');        assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1));        assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1));        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals(false, tok.hasNext());                tok = new StrTokenizer("", ' ', '"');        assertEquals(false, tok.hasNext());                tok = new StrTokenizer((String) null, ' ', '"');        assertEquals(false, tok.hasNext());    }    //-----------------------------------------------------------------------    public void testConstructor_charArray() {        StrTokenizer tok = new StrTokenizer("a b".toCharArray());        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals(false, tok.hasNext());                tok = new StrTokenizer(new char[0]);        assertEquals(false, tok.hasNext());                tok = new StrTokenizer((char[]) null);        assertEquals(false, tok.hasNext());    }    //-----------------------------------------------------------------------    public void testConstructor_charArray_char() {        StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ');        assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1));        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals(false, tok.hasNext());                tok = new StrTokenizer(new char[0], ' ');        assertEquals(false, tok.hasNext());                tok = new StrTokenizer((char[]) null, ' ');        assertEquals(false, tok.hasNext());    }    //-----------------------------------------------------------------------    public void testConstructor_charArray_char_char() {        StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"');        assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1));        assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1));        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals(false, tok.hasNext());                tok = new StrTokenizer(new char[0], ' ', '"');        assertEquals(false, tok.hasNext());                tok = new StrTokenizer((char[]) null, ' ', '"');        assertEquals(false, tok.hasNext());    }    //-----------------------------------------------------------------------    public void testReset() {        StrTokenizer tok = new StrTokenizer("a b c");        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());        assertEquals(false, tok.hasNext());                tok.reset();        assertEquals("a", tok.next());        assertEquals("b", tok.next());        assertEquals("c", tok.next());        assertEquals(false, tok.hasNext());    }    //-----------------------------------------------------------------------    public void testReset_String() {        StrTokenizer tok = new StrTokenizer("x x x");        tok.reset("d e");        assertEquals("d", tok.next());        assertEquals("e", tok.next());        assertEquals(false, tok.hasNext());                tok.reset((String) null);        assertEquals(false, tok.hasNext());    }    //-----------------------------------------------------------------------    public void testReset_charArray() {        StrTokenizer tok = new StrTokenizer("x x x");                char[] array = new char[] {'a', 'b', 'c'};        tok.reset(array);        assertEquals("abc", tok.next());        assertEquals(false, tok.hasNext());                tok.reset((char[]) null);        assertEquals(false, tok.hasNext());    }    //-----------------------------------------------------------------------    public void testTSV() {        this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE));        this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray()));    }    public void testTSVEmpty() {        this.testEmpty(StrTokenizer.getCSVInstance());        this.testEmpty(StrTokenizer.getCSVInstance(""));    }    void testXSVAbc(StrTokenizer tokenizer) {        this.checkClone(tokenizer);        assertEquals(-1, tokenizer.previousIndex());        assertEquals(0, tokenizer.nextIndex());        assertEquals(null, tokenizer.previousToken());        assertEquals("A", tokenizer.nextToken());        assertEquals(1, tokenizer.nextIndex());        assertEquals("b", tokenizer.nextToken());        assertEquals(2, tokenizer.nextIndex());        assertEquals("c", tokenizer.nextToken());        assertEquals(3, tokenizer.nextIndex());        assertEquals(null, tokenizer.nextToken());        assertEquals(3, tokenizer.nextIndex());        assertEquals("c", tokenizer.previousToken());        assertEquals(2, tokenizer.nextIndex());        assertEquals("b", tokenizer.previousToken());        assertEquals(1, tokenizer.nextIndex());        assertEquals("A", tokenizer.previousToken());        assertEquals(0, tokenizer.nextIndex());        assertEquals(null, tokenizer.previousToken());        assertEquals(0, tokenizer.nextIndex());        assertEquals(-1, tokenizer.previousIndex());        assertEquals(3, tokenizer.size());    }    public void testIteration() {        StrTokenizer tkn = new StrTokenizer("a b c");        assertEquals(false, tkn.hasPrevious());        try {            tkn.previous();            fail();        } catch (NoSuchElementException ex) {}        assertEquals(true, tkn.hasNext());                assertEquals("a", tkn.next());        try {            tkn.remove();            fail();        } catch (UnsupportedOperationException ex) {}        try {            tkn.set("x");            fail();        } catch (UnsupportedOperationException ex) {}        try {            tkn.add("y");            fail();        } catch (UnsupportedOperationException ex) {}        assertEquals(true, tkn.hasPrevious());        assertEquals(true, tkn.hasNext());                assertEquals("b", tkn.next());        assertEquals(true, tkn.hasPrevious());        assertEquals(true, tkn.hasNext());                assertEquals("c", tkn.next());        assertEquals(true, tkn.hasPrevious());        assertEquals(false, tkn.hasNext());                try {            tkn.next();            fail();        } catch (NoSuchElementException ex) {}        assertEquals(true, tkn.hasPrevious());        assertEquals(false, tkn.hasNext());    }    //-----------------------------------------------------------------------    public void testTokenizeSubclassInputChange() {        StrTokenizer tkn = new StrTokenizer("a b c d e") {            @Override            protected List tokenize(char[] chars, int offset, int count) {                return super.tokenize("w x y z".toCharArray(), 2, 5);            }        };        assertEquals("x", tkn.next());        assertEquals("y", tkn.next());    }    //-----------------------------------------------------------------------    public void testTokenizeSubclassOutputChange() {        StrTokenizer tkn = new StrTokenizer("a b c") {            @Override            protected List tokenize(char[] chars, int offset, int count) {                List list = super.tokenize(chars, offset, count);                Collections.reverse(list);                return list;            }        };        assertEquals("c", tkn.next());        assertEquals("b", tkn.next());        assertEquals("a", tkn.next());    }    //-----------------------------------------------------------------------    public void testToString() {        StrTokenizer tkn = new StrTokenizer("a b c d e");        assertEquals("StrTokenizer[not tokenized yet]", tkn.toString());        tkn.next();        assertEquals("StrTokenizer[a, b, c, d, e]", tkn.toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.text;import java.io.Reader;import java.io.Writer;import java.util.Arrays;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;import org.apache.commons.lang.ArrayUtils;/** * Unit tests for {@link org.apache.commons.lang.text.StrBuilder}. *  * @author Michael Heuer * @version $Id$ */public class StrBuilderTest extends TestCase {    /**     * Main method.     *      * @param args  command line arguments, ignored     */    public static void main(String[] args) {        TestRunner.run(suite());    }    /**     * Return a new test suite containing this test case.     *      * @return a new test suite containing this test case     */    public static Test suite() {        TestSuite suite = new TestSuite(StrBuilderTest.class);        suite.setName("StrBuilder Tests");        return suite;    }    /**     * Create a new test case with the specified name.     *      * @param name     *            name     */    public StrBuilderTest(String name) {        super(name);    }    //-----------------------------------------------------------------------    public void testConstructors() {        StrBuilder sb0 = new StrBuilder();        assertEquals(32, sb0.capacity());        assertEquals(0, sb0.length());        assertEquals(0, sb0.size());        StrBuilder sb1 = new StrBuilder(32);        assertEquals(32, sb1.capacity());        assertEquals(0, sb1.length());        assertEquals(0, sb1.size());        StrBuilder sb2 = new StrBuilder(0);        assertEquals(32, sb2.capacity());        assertEquals(0, sb2.length());        assertEquals(0, sb2.size());        StrBuilder sb3 = new StrBuilder(-1);        assertEquals(32, sb3.capacity());        assertEquals(0, sb3.length());        assertEquals(0, sb3.size());        StrBuilder sb4 = new StrBuilder(1);        assertEquals(1, sb4.capacity());        assertEquals(0, sb4.length());        assertEquals(0, sb4.size());        StrBuilder sb5 = new StrBuilder((String) null);        assertEquals(32, sb5.capacity());        assertEquals(0, sb5.length());        assertEquals(0, sb5.size());        StrBuilder sb6 = new StrBuilder("");        assertEquals(32, sb6.capacity());        assertEquals(0, sb6.length());        assertEquals(0, sb6.size());        StrBuilder sb7 = new StrBuilder("foo");        assertEquals(35, sb7.capacity());        assertEquals(3, sb7.length());        assertEquals(3, sb7.size());    }    //-----------------------------------------------------------------------    public void testChaining() {        StrBuilder sb = new StrBuilder();        assertSame(sb, sb.setNewLineText(null));        assertSame(sb, sb.setNullText(null));        assertSame(sb, sb.setLength(1));        assertSame(sb, sb.setCharAt(0, 'a'));        assertSame(sb, sb.ensureCapacity(0));        assertSame(sb, sb.minimizeCapacity());        assertSame(sb, sb.clear());        assertSame(sb, sb.reverse());        assertSame(sb, sb.trim());    }    //-----------------------------------------------------------------------    public void testGetSetNewLineText() {        StrBuilder sb = new StrBuilder();        assertEquals(null, sb.getNewLineText());        sb.setNewLineText("#");        assertEquals("#", sb.getNewLineText());        sb.setNewLineText("");        assertEquals("", sb.getNewLineText());        sb.setNewLineText((String) null);        assertEquals(null, sb.getNewLineText());    }    //-----------------------------------------------------------------------    public void testGetSetNullText() {        StrBuilder sb = new StrBuilder();        assertEquals(null, sb.getNullText());        sb.setNullText("null");        assertEquals("null", sb.getNullText());        sb.setNullText("");        assertEquals(null, sb.getNullText());        sb.setNullText("NULL");        assertEquals("NULL", sb.getNullText());        sb.setNullText((String) null);        assertEquals(null, sb.getNullText());    }    //-----------------------------------------------------------------------    public void testCapacityAndLength() {        StrBuilder sb = new StrBuilder();        assertEquals(32, sb.capacity());        assertEquals(0, sb.length());        assertEquals(0, sb.size());        assertTrue(sb.isEmpty());        sb.minimizeCapacity();        assertEquals(0, sb.capacity());        assertEquals(0, sb.length());        assertEquals(0, sb.size());        assertTrue(sb.isEmpty());        sb.ensureCapacity(32);        assertTrue(sb.capacity() >= 32);        assertEquals(0, sb.length());        assertEquals(0, sb.size());        assertTrue(sb.isEmpty());        sb.append("foo");        assertTrue(sb.capacity() >= 32);        assertEquals(3, sb.length());        assertEquals(3, sb.size());        assertTrue(sb.isEmpty() == false);        sb.clear();        assertTrue(sb.capacity() >= 32);        assertEquals(0, sb.length());        assertEquals(0, sb.size());        assertTrue(sb.isEmpty());        sb.append("123456789012345678901234567890123");        assertTrue(sb.capacity() > 32);        assertEquals(33, sb.length());        assertEquals(33, sb.size());        assertTrue(sb.isEmpty() == false);        sb.ensureCapacity(16);        assertTrue(sb.capacity() > 16);        assertEquals(33, sb.length());        assertEquals(33, sb.size());        assertTrue(sb.isEmpty() == false);        sb.minimizeCapacity();        assertEquals(33, sb.capacity());        assertEquals(33, sb.length());        assertEquals(33, sb.size());        assertTrue(sb.isEmpty() == false);        try {            sb.setLength(-1);            fail("setLength(-1) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.setLength(33);        assertEquals(33, sb.capacity());        assertEquals(33, sb.length());        assertEquals(33, sb.size());        assertTrue(sb.isEmpty() == false);        sb.setLength(16);        assertTrue(sb.capacity() >= 16);        assertEquals(16, sb.length());        assertEquals(16, sb.size());        assertEquals("1234567890123456", sb.toString());        assertTrue(sb.isEmpty() == false);        sb.setLength(32);        assertTrue(sb.capacity() >= 32);        assertEquals(32, sb.length());        assertEquals(32, sb.size());        assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString());        assertTrue(sb.isEmpty() == false);        sb.setLength(0);        assertTrue(sb.capacity() >= 32);        assertEquals(0, sb.length());        assertEquals(0, sb.size());        assertTrue(sb.isEmpty());    }    //-----------------------------------------------------------------------    public void testLength() {        StrBuilder sb = new StrBuilder();        assertEquals(0, sb.length());                sb.append("Hello");        assertEquals(5, sb.length());    }    public void testSetLength() {        StrBuilder sb = new StrBuilder();        sb.append("Hello");        sb.setLength(2);  // shorten        assertEquals("He", sb.toString());        sb.setLength(2);  // no change        assertEquals("He", sb.toString());        sb.setLength(3);  // lengthen        assertEquals("He\0", sb.toString());        try {            sb.setLength(-1);            fail("setLength(-1) expected StringIndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }    }    //-----------------------------------------------------------------------    public void testCapacity() {        StrBuilder sb = new StrBuilder();        assertEquals(sb.buffer.length, sb.capacity());                sb.append("HelloWorldHelloWorldHelloWorldHelloWorld");        assertEquals(sb.buffer.length, sb.capacity());    }    public void testEnsureCapacity() {        StrBuilder sb = new StrBuilder();        sb.ensureCapacity(2);        assertEquals(true, sb.capacity() >= 2);                sb.ensureCapacity(-1);        assertEquals(true, sb.capacity() >= 0);                sb.append("HelloWorld");        sb.ensureCapacity(40);        assertEquals(true, sb.capacity() >= 40);    }    public void testMinimizeCapacity() {        StrBuilder sb = new StrBuilder();        sb.minimizeCapacity();        assertEquals(0, sb.capacity());                sb.append("HelloWorld");        sb.minimizeCapacity();        assertEquals(10, sb.capacity());    }    //-----------------------------------------------------------------------    public void testSize() {        StrBuilder sb = new StrBuilder();        assertEquals(0, sb.size());                sb.append("Hello");        assertEquals(5, sb.size());    }    public void testIsEmpty() {        StrBuilder sb = new StrBuilder();        assertEquals(true, sb.isEmpty());                sb.append("Hello");        assertEquals(false, sb.isEmpty());                sb.clear();        assertEquals(true, sb.isEmpty());    }    public void testClear() {        StrBuilder sb = new StrBuilder();        sb.append("Hello");        sb.clear();        assertEquals(0, sb.length());        assertEquals(true, sb.buffer.length >= 5);    }    //-----------------------------------------------------------------------    public void testCharAt() {        StrBuilder sb = new StrBuilder();        try {            sb.charAt(0);            fail("charAt(0) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.charAt(-1);            fail("charAt(-1) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.append("foo");        assertEquals('f', sb.charAt(0));        assertEquals('o', sb.charAt(1));        assertEquals('o', sb.charAt(2));        try {            sb.charAt(-1);            fail("charAt(-1) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.charAt(3);            fail("charAt(3) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }    }    //-----------------------------------------------------------------------    public void testSetCharAt() {        StrBuilder sb = new StrBuilder();        try {            sb.setCharAt(0, 'f');            fail("setCharAt(0,) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        try {            sb.setCharAt(-1, 'f');            fail("setCharAt(-1,) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        sb.append("foo");        sb.setCharAt(0, 'b');        sb.setCharAt(1, 'a');        sb.setCharAt(2, 'r');        try {            sb.setCharAt(3, '!');            fail("setCharAt(3,) expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {            // expected        }        assertEquals("bar", sb.toString());    }    //-----------------------------------------------------------------------    public void testDeleteCharAt() {        StrBuilder sb = new StrBuilder("abc");        sb.deleteCharAt(0);        assertEquals("bc", sb.toString());                 try {            sb.deleteCharAt(1000);            fail("Expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {}    }    //-----------------------------------------------------------------------    public void testToCharArray() {        StrBuilder sb = new StrBuilder();        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray());        char[] a = sb.toCharArray();        assertNotNull("toCharArray() result is null", a);        assertEquals("toCharArray() result is too large", 0, a.length);        sb.append("junit");        a = sb.toCharArray();        assertEquals("toCharArray() result incorrect length", 5, a.length);        assertTrue("toCharArray() result does not match", Arrays.equals("junit".toCharArray(), a));    }    public void testToCharArrayIntInt() {        StrBuilder sb = new StrBuilder();        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0));        sb.append("junit");        char[] a = sb.toCharArray(0, 20); // too large test        assertEquals("toCharArray(int,int) result incorrect length", 5, a.length);        assertTrue("toCharArray(int,int) result does not match", Arrays.equals("junit".toCharArray(), a));        a = sb.toCharArray(0, 4);        assertEquals("toCharArray(int,int) result incorrect length", 4, a.length);        assertTrue("toCharArray(int,int) result does not match", Arrays.equals("juni".toCharArray(), a));        a = sb.toCharArray(0, 4);        assertEquals("toCharArray(int,int) result incorrect length", 4, a.length);        assertTrue("toCharArray(int,int) result does not match", Arrays.equals("juni".toCharArray(), a));        a = sb.toCharArray(0, 1);        assertNotNull("toCharArray(int,int) result is null", a);        try {            sb.toCharArray(-1, 5);            fail("no string index out of bound on -1");        } catch (IndexOutOfBoundsException e) {        }        try {            sb.toCharArray(6, 5);            fail("no string index out of bound on -1");        } catch (IndexOutOfBoundsException e) {        }    }    public void testGetChars ( ) {        StrBuilder sb = new StrBuilder();                char[] input = new char[10];        char[] a = sb.getChars(input);        assertSame (input, a);        assertTrue(Arrays.equals(new char[10], a));                sb.append("junit");        a = sb.getChars(input);        assertSame(input, a);        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t',0,0,0,0,0},a));                a = sb.getChars(null);        assertNotSame(input,a);        assertEquals(5,a.length);        assertTrue(Arrays.equals("junit".toCharArray(),a));                input = new char[5];        a = sb.getChars(input);        assertSame(input, a);                input = new char[4];        a = sb.getChars(input);        assertNotSame(input, a);    }    public void testGetCharsIntIntCharArrayInt( ) {        StrBuilder sb = new StrBuilder();                       sb.append("junit");        char[] a = new char[5];        sb.getChars(0,5,a,0);        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t'},a));                a = new char[5];        sb.getChars(0,2,a,3);        assertTrue(Arrays.equals(new char[] {0,0,0,'j','u'},a));                try {            sb.getChars(-1,0,a,0);            fail("no exception");        }        catch (IndexOutOfBoundsException e) {        }                try {            sb.getChars(0,-1,a,0);            fail("no exception");        }        catch (IndexOutOfBoundsException e) {        }                try {            sb.getChars(0,20,a,0);            fail("no exception");        }        catch (IndexOutOfBoundsException e) {        }                try {            sb.getChars(4,2,a,0);            fail("no exception");        }        catch (IndexOutOfBoundsException e) {        }    }    //-----------------------------------------------------------------------    public void testDeleteIntInt() {        StrBuilder sb = new StrBuilder("abc");        sb.delete(0, 1);        assertEquals("bc", sb.toString());         sb.delete(1, 2);        assertEquals("b", sb.toString());        sb.delete(0, 1);        assertEquals("", sb.toString());         sb.delete(0, 1000);        assertEquals("", sb.toString());                 try {            sb.delete(1, 2);            fail("Expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {}        try {            sb.delete(-1, 1);            fail("Expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {}                sb = new StrBuilder("anything");        try {            sb.delete(2, 1);            fail("Expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {}    }    //-----------------------------------------------------------------------    public void testDeleteAll_char() {        StrBuilder sb = new StrBuilder("abcbccba");        sb.deleteAll('X');        assertEquals("abcbccba", sb.toString());        sb.deleteAll('a');        assertEquals("bcbccb", sb.toString());        sb.deleteAll('c');        assertEquals("bbb", sb.toString());        sb.deleteAll('b');        assertEquals("", sb.toString());        sb = new StrBuilder("");        sb.deleteAll('b');        assertEquals("", sb.toString());    }    public void testDeleteFirst_char() {        StrBuilder sb = new StrBuilder("abcba");        sb.deleteFirst('X');        assertEquals("abcba", sb.toString());        sb.deleteFirst('a');        assertEquals("bcba", sb.toString());        sb.deleteFirst('c');        assertEquals("bba", sb.toString());        sb.deleteFirst('b');        assertEquals("ba", sb.toString());        sb = new StrBuilder("");        sb.deleteFirst('b');        assertEquals("", sb.toString());    }    // -----------------------------------------------------------------------    public void testDeleteAll_String() {        StrBuilder sb = new StrBuilder("abcbccba");        sb.deleteAll((String) null);        assertEquals("abcbccba", sb.toString());        sb.deleteAll("");        assertEquals("abcbccba", sb.toString());                sb.deleteAll("X");        assertEquals("abcbccba", sb.toString());        sb.deleteAll("a");        assertEquals("bcbccb", sb.toString());        sb.deleteAll("c");        assertEquals("bbb", sb.toString());        sb.deleteAll("b");        assertEquals("", sb.toString());        sb = new StrBuilder("abcbccba");        sb.deleteAll("bc");        assertEquals("acba", sb.toString());        sb = new StrBuilder("");        sb.deleteAll("bc");        assertEquals("", sb.toString());    }    public void testDeleteFirst_String() {        StrBuilder sb = new StrBuilder("abcbccba");        sb.deleteFirst((String) null);        assertEquals("abcbccba", sb.toString());        sb.deleteFirst("");        assertEquals("abcbccba", sb.toString());        sb.deleteFirst("X");        assertEquals("abcbccba", sb.toString());        sb.deleteFirst("a");        assertEquals("bcbccba", sb.toString());        sb.deleteFirst("c");        assertEquals("bbccba", sb.toString());        sb.deleteFirst("b");        assertEquals("bccba", sb.toString());        sb = new StrBuilder("abcbccba");        sb.deleteFirst("bc");        assertEquals("abccba", sb.toString());        sb = new StrBuilder("");        sb.deleteFirst("bc");        assertEquals("", sb.toString());    }    // -----------------------------------------------------------------------    public void testDeleteAll_StrMatcher() {        StrBuilder sb = new StrBuilder("A0xA1A2yA3");        sb.deleteAll((StrMatcher) null);        assertEquals("A0xA1A2yA3", sb.toString());        sb.deleteAll(A_NUMBER_MATCHER);        assertEquals("xy", sb.toString());        sb = new StrBuilder("Ax1");        sb.deleteAll(A_NUMBER_MATCHER);        assertEquals("Ax1", sb.toString());        sb = new StrBuilder("");        sb.deleteAll(A_NUMBER_MATCHER);        assertEquals("", sb.toString());    }    public void testDeleteFirst_StrMatcher() {        StrBuilder sb = new StrBuilder("A0xA1A2yA3");        sb.deleteFirst((StrMatcher) null);        assertEquals("A0xA1A2yA3", sb.toString());        sb.deleteFirst(A_NUMBER_MATCHER);        assertEquals("xA1A2yA3", sb.toString());        sb = new StrBuilder("Ax1");        sb.deleteFirst(A_NUMBER_MATCHER);        assertEquals("Ax1", sb.toString());        sb = new StrBuilder("");        sb.deleteFirst(A_NUMBER_MATCHER);        assertEquals("", sb.toString());    }    // -----------------------------------------------------------------------    public void testReplace_int_int_String() {        StrBuilder sb = new StrBuilder("abc");        sb.replace(0, 1, "d");        assertEquals("dbc", sb.toString());        sb.replace(0, 1, "aaa");        assertEquals("aaabc", sb.toString());        sb.replace(0, 3, "");        assertEquals("bc", sb.toString());        sb.replace(1, 2, (String) null);        assertEquals("b", sb.toString());        sb.replace(1, 1000, "text");        assertEquals("btext", sb.toString());        sb.replace(0, 1000, "text");        assertEquals("text", sb.toString());                sb = new StrBuilder("atext");        sb.replace(1, 1, "ny");        assertEquals("anytext", sb.toString());        try {            sb.replace(2, 1, "anything");            fail("Expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {}                sb = new StrBuilder();        try {            sb.replace(1, 2, "anything");            fail("Expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {}        try {            sb.replace(-1, 1, "anything");            fail("Expected IndexOutOfBoundsException");        } catch (IndexOutOfBoundsException e) {}    }    //-----------------------------------------------------------------------    public void testReplaceAll_char_char() {        StrBuilder sb = new StrBuilder("abcbccba");        sb.replaceAll('x', 'y');        assertEquals("abcbccba", sb.toString());        sb.replaceAll('a', 'd');        assertEquals("dbcbccbd", sb.toString());        sb.replaceAll('b', 'e');        assertEquals("dececced", sb.toString());        sb.replaceAll('c', 'f');        assertEquals("defeffed", sb.toString());        sb.replaceAll('d', 'd');        assertEquals("defeffed", sb.toString());    }    //-----------------------------------------------------------------------    public void testReplaceFirst_char_char() {        StrBuilder sb = new StrBuilder("abcbccba");        sb.replaceFirst('x', 'y');        assertEquals("abcbccba", sb.toString());        sb.replaceFirst('a', 'd');        assertEquals("dbcbccba", sb.toString());        sb.replaceFirst('b', 'e');        assertEquals("decbccba", sb.toString());        sb.replaceFirst('c', 'f');        assertEquals("defbccba", sb.toString());        sb.replaceFirst('d', 'd');        assertEquals("defbccba", sb.toString());    }    //-----------------------------------------------------------------------    public void testReplaceAll_String_String() {        StrBuilder sb = new StrBuilder("abcbccba");        sb.replaceAll((String) null, null);        assertEquals("abcbccba", sb.toString());        sb.replaceAll((String) null, "anything");        assertEquals("abcbccba", sb.toString());        sb.replaceAll("", null);        assertEquals("abcbccba", sb.toString());        sb.replaceAll("", "anything");        assertEquals("abcbccba", sb.toString());                sb.replaceAll("x", "y");        assertEquals("abcbccba", sb.toString());        sb.replaceAll("a", "d");        assertEquals("dbcbccbd", sb.toString());        sb.replaceAll("d", null);        assertEquals("bcbccb", sb.toString());        sb.replaceAll("cb", "-");        assertEquals("b-c-", sb.toString());                sb = new StrBuilder("abcba");        sb.replaceAll("b", "xbx");        assertEquals("axbxcxbxa", sb.toString());                sb = new StrBuilder("bb");        sb.replaceAll("b", "xbx");        assertEquals("xbxxbx", sb.toString());    }    public void testReplaceFirst_String_String() {        StrBuilder sb = new StrBuilder("abcbccba");        sb.replaceFirst((String) null, null);        assertEquals("abcbccba", sb.toString());        sb.replaceFirst((String) null, "anything");        assertEquals("abcbccba", sb.toString());        sb.replaceFirst("", null);        assertEquals("abcbccba", sb.toString());        sb.replaceFirst("", "anything");        assertEquals("abcbccba", sb.toString());                sb.replaceFirst("x", "y");        assertEquals("abcbccba", sb.toString());        sb.replaceFirst("a", "d");        assertEquals("dbcbccba", sb.toString());        sb.replaceFirst("d", null);        assertEquals("bcbccba", sb.toString());        sb.replaceFirst("cb", "-");        assertEquals("b-ccba", sb.toString());                sb = new StrBuilder("abcba");        sb.replaceFirst("b", "xbx");        assertEquals("axbxcba", sb.toString());                sb = new StrBuilder("bb");        sb.replaceFirst("b", "xbx");        assertEquals("xbxb", sb.toString());    }    //-----------------------------------------------------------------------    public void testReplaceAll_StrMatcher_String() {        StrBuilder sb = new StrBuilder("abcbccba");        sb.replaceAll((StrMatcher) null, null);        assertEquals("abcbccba", sb.toString());        sb.replaceAll((StrMatcher) null, "anything");        assertEquals("abcbccba", sb.toString());        sb.replaceAll(StrMatcher.noneMatcher(), null);        assertEquals("abcbccba", sb.toString());        sb.replaceAll(StrMatcher.noneMatcher(), "anything");        assertEquals("abcbccba", sb.toString());                sb.replaceAll(StrMatcher.charMatcher('x'), "y");        assertEquals("abcbccba", sb.toString());        sb.replaceAll(StrMatcher.charMatcher('a'), "d");        assertEquals("dbcbccbd", sb.toString());        sb.replaceAll(StrMatcher.charMatcher('d'), null);        assertEquals("bcbccb", sb.toString());        sb.replaceAll(StrMatcher.stringMatcher("cb"), "-");        assertEquals("b-c-", sb.toString());                sb = new StrBuilder("abcba");        sb.replaceAll(StrMatcher.charMatcher('b'), "xbx");        assertEquals("axbxcxbxa", sb.toString());                sb = new StrBuilder("bb");        sb.replaceAll(StrMatcher.charMatcher('b'), "xbx");        assertEquals("xbxxbx", sb.toString());                sb = new StrBuilder("A1-A2A3-A4");        sb.replaceAll(A_NUMBER_MATCHER, "***");        assertEquals("***-******-***", sb.toString());    }    public void testReplaceFirst_StrMatcher_String() {        StrBuilder sb = new StrBuilder("abcbccba");        sb.replaceFirst((StrMatcher) null, null);        assertEquals("abcbccba", sb.toString());        sb.replaceFirst((StrMatcher) null, "anything");        assertEquals("abcbccba", sb.toString());        sb.replaceFirst(StrMatcher.noneMatcher(), null);        assertEquals("abcbccba", sb.toString());        sb.replaceFirst(StrMatcher.noneMatcher(), "anything");        assertEquals("abcbccba", sb.toString());                sb.replaceFirst(StrMatcher.charMatcher('x'), "y");        assertEquals("abcbccba", sb.toString());        sb.replaceFirst(StrMatcher.charMatcher('a'), "d");        assertEquals("dbcbccba", sb.toString());        sb.replaceFirst(StrMatcher.charMatcher('d'), null);        assertEquals("bcbccba", sb.toString());        sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-");        assertEquals("b-ccba", sb.toString());                sb = new StrBuilder("abcba");        sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx");        assertEquals("axbxcba", sb.toString());                sb = new StrBuilder("bb");        sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx");        assertEquals("xbxb", sb.toString());                sb = new StrBuilder("A1-A2A3-A4");        sb.replaceFirst(A_NUMBER_MATCHER, "***");        assertEquals("***-A2A3-A4", sb.toString());    }    //-----------------------------------------------------------------------    public void testReplace_StrMatcher_String_int_int_int_VaryMatcher() {        StrBuilder sb = new StrBuilder("abcbccba");        sb.replace((StrMatcher) null, "x", 0, sb.length(), -1);        assertEquals("abcbccba", sb.toString());                sb.replace(StrMatcher.charMatcher('a'), "x", 0, sb.length(), -1);        assertEquals("xbcbccbx", sb.toString());                sb.replace(StrMatcher.stringMatcher("cb"), "x", 0, sb.length(), -1);        assertEquals("xbxcxx", sb.toString());                sb = new StrBuilder("A1-A2A3-A4");        sb.replace(A_NUMBER_MATCHER, "***", 0, sb.length(), -1);        assertEquals("***-******-***", sb.toString());                sb = new StrBuilder();        sb.replace(A_NUMBER_MATCHER, "***", 0, sb.length(), -1);        assertEquals("", sb.toString());    }    public void testReplace_StrMatcher_String_int_int_int_VaryReplace() {        StrBuilder sb = new StrBuilder("abcbccba");        sb.replace(StrMatcher.stringMatcher("cb"), "cb", 0, sb.length(), -1);        assertEquals("abcbccba", sb.toString());                sb = new StrBuilder("abcbccba");        sb.replace(StrMatcher.stringMatcher("cb"), "-", 0, sb.length(), -1);        assertEquals("ab-c-a", sb.toString());                sb = new StrBuilder("abcbccba");        sb.replace(StrMatcher.stringMatcher("cb"), "+++", 0, sb.length(), -1);        assertEquals("ab+++c+++a", sb.toString());                sb = new StrBuilder("abcbccba");        sb.replace(StrMatcher.stringMatcher("cb"), "", 0, sb.length(), -1);        assertEquals("abca", sb.toString());                sb = new StrBuilder("abcbccba");        sb.replace(StrMatcher.stringMatcher("cb"), null, 0, sb.length(), -1);        assertEquals("abca", sb.toString());    }    public void testReplace_StrMatcher_String_int_int_int_VaryStartIndex() {        StrBuilder sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, sb.length(), -1);        assertEquals("-x--y-", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 1, sb.length(), -1);        assertEquals("aax--y-", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 2, sb.length(), -1);        assertEquals("aax--y-", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 3, sb.length(), -1);        assertEquals("aax--y-", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 4, sb.length(), -1);        assertEquals("aaxa-ay-", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 5, sb.length(), -1);        assertEquals("aaxaa-y-", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 6, sb.length(), -1);        assertEquals("aaxaaaay-", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 7, sb.length(), -1);        assertEquals("aaxaaaay-", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 8, sb.length(), -1);        assertEquals("aaxaaaay-", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 9, sb.length(), -1);        assertEquals("aaxaaaayaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 10, sb.length(), -1);        assertEquals("aaxaaaayaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        try {            sb.replace(StrMatcher.stringMatcher("aa"), "-", 11, sb.length(), -1);            fail();        } catch (IndexOutOfBoundsException ex) {}        assertEquals("aaxaaaayaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        try {            sb.replace(StrMatcher.stringMatcher("aa"), "-", -1, sb.length(), -1);            fail();        } catch (IndexOutOfBoundsException ex) {}        assertEquals("aaxaaaayaa", sb.toString());    }    public void testReplace_StrMatcher_String_int_int_int_VaryEndIndex() {        StrBuilder sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 0, -1);        assertEquals("aaxaaaayaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 2, -1);        assertEquals("-xaaaayaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 3, -1);        assertEquals("-xaaaayaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 4, -1);        assertEquals("-xaaaayaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 5, -1);        assertEquals("-x-aayaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 6, -1);        assertEquals("-x-aayaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 7, -1);        assertEquals("-x--yaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 8, -1);        assertEquals("-x--yaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 9, -1);        assertEquals("-x--yaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, -1);        assertEquals("-x--y-", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 1000, -1);        assertEquals("-x--y-", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        try {            sb.replace(StrMatcher.stringMatcher("aa"), "-", 2, 1, -1);            fail();        } catch (IndexOutOfBoundsException ex) {}        assertEquals("aaxaaaayaa", sb.toString());    }    public void testReplace_StrMatcher_String_int_int_int_VaryCount() {        StrBuilder sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, -1);        assertEquals("-x--y-", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, 0);        assertEquals("aaxaaaayaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, 1);        assertEquals("-xaaaayaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, 2);        assertEquals("-x-aayaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, 3);        assertEquals("-x--yaa", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, 4);        assertEquals("-x--y-", sb.toString());                sb = new StrBuilder("aaxaaaayaa");        sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, 5);        assertEquals("-x--y-", sb.toString());    }    //-----------------------------------------------------------------------    public void testReverse() {        StrBuilder sb = new StrBuilder();        assertEquals("", sb.reverse().toString());                sb.clear().append(true);        assertEquals("eurt", sb.reverse().toString());        assertEquals("true", sb.reverse().toString());    }    //-----------------------------------------------------------------------    public void testTrim() {        StrBuilder sb = new StrBuilder();        assertEquals("", sb.reverse().toString());                sb.clear().append(" \u0000 ");        assertEquals("", sb.trim().toString());                sb.clear().append(" \u0000 a b c");        assertEquals("a b c", sb.trim().toString());                sb.clear().append("a b c \u0000 ");        assertEquals("a b c", sb.trim().toString());                sb.clear().append(" \u0000 a b c \u0000 ");        assertEquals("a b c", sb.trim().toString());                sb.clear().append("a b c");        assertEquals("a b c", sb.trim().toString());    }    //-----------------------------------------------------------------------    public void testStartsWith() {        StrBuilder sb = new StrBuilder();        assertFalse(sb.startsWith("a"));        assertFalse(sb.startsWith(null));        assertTrue(sb.startsWith(""));        sb.append("abc");        assertTrue(sb.startsWith("a"));        assertTrue(sb.startsWith("ab"));        assertTrue(sb.startsWith("abc"));        assertFalse(sb.startsWith("cba"));    }    public void testEndsWith() {        StrBuilder sb = new StrBuilder();        assertFalse(sb.endsWith("a"));        assertFalse(sb.endsWith("c"));        assertTrue(sb.endsWith(""));        assertFalse(sb.endsWith(null));        sb.append("abc");        assertTrue(sb.endsWith("c"));        assertTrue(sb.endsWith("bc"));        assertTrue(sb.endsWith("abc"));        assertFalse(sb.endsWith("cba"));        assertFalse(sb.endsWith("abcd"));        assertFalse(sb.endsWith(" abc"));        assertFalse(sb.endsWith("abc "));    }    //-----------------------------------------------------------------------    public void testSubstringInt() {        StrBuilder sb = new StrBuilder ("hello goodbye");        assertEquals ("goodbye", sb.substring(6));        assertEquals ("hello goodbye".substring(6), sb.substring(6));        assertEquals ("hello goodbye", sb.substring(0));        assertEquals ("hello goodbye".substring(0), sb.substring(0));        try {            sb.substring(-1);            fail ();        } catch (IndexOutOfBoundsException e) {}                try {            sb.substring(15);            fail ();        } catch (IndexOutOfBoundsException e) {}        }        public void testSubstringIntInt() {        StrBuilder sb = new StrBuilder ("hello goodbye");        assertEquals ("hello", sb.substring(0, 5));        assertEquals ("hello goodbye".substring(0, 6), sb.substring(0, 6));                assertEquals ("goodbye", sb.substring(6, 13));        assertEquals ("hello goodbye".substring(6,13), sb.substring(6, 13));                assertEquals ("goodbye", sb.substring(6, 20));                try {            sb.substring(-1, 5);            fail();        } catch (IndexOutOfBoundsException e) {}                try {            sb.substring(15, 20);            fail();        } catch (IndexOutOfBoundsException e) {}    }    // -----------------------------------------------------------------------    public void testMidString() {        StrBuilder sb = new StrBuilder("hello goodbye hello");        assertEquals("goodbye", sb.midString(6, 7));        assertEquals("hello", sb.midString(0, 5));        assertEquals("hello", sb.midString(-5, 5));        assertEquals("", sb.midString(0, -1));        assertEquals("", sb.midString(20, 2));        assertEquals("hello", sb.midString(14, 22));    }    public void testRightString() {        StrBuilder sb = new StrBuilder("left right");        assertEquals("right", sb.rightString(5));        assertEquals("", sb.rightString(0));        assertEquals("", sb.rightString(-5));        assertEquals("left right", sb.rightString(15));    }    public void testLeftString() {        StrBuilder sb = new StrBuilder("left right");        assertEquals("left", sb.leftString(4));        assertEquals("", sb.leftString(0));        assertEquals("", sb.leftString(-5));        assertEquals("left right", sb.leftString(15));    }    // -----------------------------------------------------------------------    public void testContains_char() {        StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz");        assertEquals(true, sb.contains('a'));        assertEquals(true, sb.contains('o'));        assertEquals(true, sb.contains('z'));        assertEquals(false, sb.contains('1'));    }    public void testContains_String() {        StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz");        assertEquals(true, sb.contains("a"));        assertEquals(true, sb.contains("pq"));        assertEquals(true, sb.contains("z"));        assertEquals(false, sb.contains("zyx"));        assertEquals(false, sb.contains((String) null));    }    public void testContains_StrMatcher() {        StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz");        assertEquals(true, sb.contains(StrMatcher.charMatcher('a')));        assertEquals(true, sb.contains(StrMatcher.stringMatcher("pq")));        assertEquals(true, sb.contains(StrMatcher.charMatcher('z')));        assertEquals(false, sb.contains(StrMatcher.stringMatcher("zy")));        assertEquals(false, sb.contains((StrMatcher) null));        sb = new StrBuilder();        assertEquals(false, sb.contains(A_NUMBER_MATCHER));        sb.append("B A1 C");        assertEquals(true, sb.contains(A_NUMBER_MATCHER));    }    // -----------------------------------------------------------------------    public void testIndexOf_char() {        StrBuilder sb = new StrBuilder("abab");        assertEquals(0, sb.indexOf('a'));                // should work like String#indexOf        assertEquals("abab".indexOf('a'), sb.indexOf('a'));        assertEquals(1, sb.indexOf('b'));        assertEquals("abab".indexOf('b'), sb.indexOf('b'));        assertEquals(-1, sb.indexOf('z'));    }    public void testIndexOf_char_int() {        StrBuilder sb = new StrBuilder("abab");        assertEquals(0, sb.indexOf('a', -1));        assertEquals(0, sb.indexOf('a', 0));        assertEquals(2, sb.indexOf('a', 1));        assertEquals(-1, sb.indexOf('a', 4));        assertEquals(-1, sb.indexOf('a', 5));        // should work like String#indexOf        assertEquals("abab".indexOf('a', 1), sb.indexOf('a', 1));        assertEquals(3, sb.indexOf('b', 2));        assertEquals("abab".indexOf('b', 2), sb.indexOf('b', 2));        assertEquals(-1, sb.indexOf('z', 2));        sb = new StrBuilder("xyzabc");        assertEquals(2, sb.indexOf('z', 0));        assertEquals(-1, sb.indexOf('z', 3));    }    public void testLastIndexOf_char() {        StrBuilder sb = new StrBuilder("abab");                assertEquals (2, sb.lastIndexOf('a'));        //should work like String#lastIndexOf        assertEquals ("abab".lastIndexOf('a'), sb.lastIndexOf('a'));                assertEquals(3, sb.lastIndexOf('b'));        assertEquals ("abab".lastIndexOf('b'), sb.lastIndexOf('b'));                assertEquals (-1, sb.lastIndexOf('z'));    }    public void testLastIndexOf_char_int() {        StrBuilder sb = new StrBuilder("abab");        assertEquals(-1, sb.lastIndexOf('a', -1));        assertEquals(0, sb.lastIndexOf('a', 0));        assertEquals(0, sb.lastIndexOf('a', 1));        // should work like String#lastIndexOf        assertEquals("abab".lastIndexOf('a', 1), sb.lastIndexOf('a', 1));        assertEquals(1, sb.lastIndexOf('b', 2));        assertEquals("abab".lastIndexOf('b', 2), sb.lastIndexOf('b', 2));        assertEquals(-1, sb.lastIndexOf('z', 2));        sb = new StrBuilder("xyzabc");        assertEquals(2, sb.lastIndexOf('z', sb.length()));        assertEquals(-1, sb.lastIndexOf('z', 1));    }    // -----------------------------------------------------------------------    public void testIndexOf_String() {        StrBuilder sb = new StrBuilder("abab");                assertEquals(0, sb.indexOf("a"));        //should work like String#indexOf        assertEquals("abab".indexOf("a"), sb.indexOf("a"));                assertEquals(0, sb.indexOf("ab"));        //should work like String#indexOf        assertEquals("abab".indexOf("ab"), sb.indexOf("ab"));                assertEquals(1, sb.indexOf("b"));        assertEquals("abab".indexOf("b"), sb.indexOf("b"));                assertEquals(1, sb.indexOf("ba"));        assertEquals("abab".indexOf("ba"), sb.indexOf("ba"));                assertEquals(-1, sb.indexOf("z"));                assertEquals(-1, sb.indexOf((String) null));    }    public void testIndexOf_String_int() {        StrBuilder sb = new StrBuilder("abab");        assertEquals(0, sb.indexOf("a", -1));        assertEquals(0, sb.indexOf("a", 0));        assertEquals(2, sb.indexOf("a", 1));        assertEquals(2, sb.indexOf("a", 2));        assertEquals(-1, sb.indexOf("a", 3));        assertEquals(-1, sb.indexOf("a", 4));        assertEquals(-1, sb.indexOf("a", 5));                assertEquals(-1, sb.indexOf("abcdef", 0));        assertEquals(0, sb.indexOf("", 0));        assertEquals(1, sb.indexOf("", 1));                //should work like String#indexOf        assertEquals ("abab".indexOf("a", 1), sb.indexOf("a", 1));                assertEquals(2, sb.indexOf("ab", 1));        //should work like String#indexOf        assertEquals("abab".indexOf("ab", 1), sb.indexOf("ab", 1));                assertEquals(3, sb.indexOf("b", 2));        assertEquals("abab".indexOf("b", 2), sb.indexOf("b", 2));                assertEquals(1, sb.indexOf("ba", 1));        assertEquals("abab".indexOf("ba", 2), sb.indexOf("ba", 2));                assertEquals(-1, sb.indexOf("z", 2));                sb = new StrBuilder("xyzabc");        assertEquals(2, sb.indexOf("za", 0));        assertEquals(-1, sb.indexOf("za", 3));                assertEquals(-1, sb.indexOf((String) null, 2));    }    public void testLastIndexOf_String() {        StrBuilder sb = new StrBuilder("abab");                assertEquals(2, sb.lastIndexOf("a"));        //should work like String#lastIndexOf        assertEquals("abab".lastIndexOf("a"), sb.lastIndexOf("a"));                assertEquals(2, sb.lastIndexOf("ab"));        //should work like String#lastIndexOf        assertEquals("abab".lastIndexOf("ab"), sb.lastIndexOf("ab"));                assertEquals(3, sb.lastIndexOf("b"));        assertEquals("abab".lastIndexOf("b"), sb.lastIndexOf("b"));                assertEquals(1, sb.lastIndexOf("ba"));        assertEquals("abab".lastIndexOf("ba"), sb.lastIndexOf("ba"));                assertEquals(-1, sb.lastIndexOf("z"));                assertEquals(-1, sb.lastIndexOf((String) null));    }    public void testLastIndexOf_String_int() {        StrBuilder sb = new StrBuilder("abab");        assertEquals(-1, sb.lastIndexOf("a", -1));        assertEquals(0, sb.lastIndexOf("a", 0));        assertEquals(0, sb.lastIndexOf("a", 1));        assertEquals(2, sb.lastIndexOf("a", 2));        assertEquals(2, sb.lastIndexOf("a", 3));        assertEquals(2, sb.lastIndexOf("a", 4));        assertEquals(2, sb.lastIndexOf("a", 5));                assertEquals(-1, sb.lastIndexOf("abcdef", 3));        assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3));        assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1));                //should work like String#lastIndexOf        assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1));                assertEquals(0, sb.lastIndexOf("ab", 1));        //should work like String#lastIndexOf        assertEquals("abab".lastIndexOf("ab", 1), sb.lastIndexOf("ab", 1));                assertEquals(1, sb.lastIndexOf("b", 2));        assertEquals("abab".lastIndexOf("b", 2), sb.lastIndexOf("b", 2));                assertEquals(1, sb.lastIndexOf("ba", 2));        assertEquals("abab".lastIndexOf("ba", 2), sb.lastIndexOf("ba", 2));                assertEquals(-1, sb.lastIndexOf("z", 2));                sb = new StrBuilder("xyzabc");        assertEquals(2, sb.lastIndexOf("za", sb.length()));        assertEquals(-1, sb.lastIndexOf("za", 1));                assertEquals(-1, sb.lastIndexOf((String) null, 2));    }    // -----------------------------------------------------------------------    public void testIndexOf_StrMatcher() {        StrBuilder sb = new StrBuilder();        assertEquals(-1, sb.indexOf((StrMatcher) null));        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a')));                sb.append("ab bd");        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a')));        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b')));        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher()));        assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d')));        assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher()));        assertEquals(-1, sb.indexOf((StrMatcher) null));                sb.append(" A1 junction");        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER));    }    public void testIndexOf_StrMatcher_int() {        StrBuilder sb = new StrBuilder();        assertEquals(-1, sb.indexOf((StrMatcher) null, 2));        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 0));                sb.append("ab bd");        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), -2));        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), 0));        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 20));                assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), -1));        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 0));        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 1));        assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 2));        assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 3));        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 4));        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 5));        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 6));                assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), -2));        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 0));        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 2));        assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 4));        assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 20));                assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher(), 0));        assertEquals(-1, sb.indexOf((StrMatcher) null, 0));                sb.append(" A1 junction with A2");        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 5));        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 6));        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 7));        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 22));        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 23));        assertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24));    }    public void testLastIndexOf_StrMatcher() {        StrBuilder sb = new StrBuilder();        assertEquals(-1, sb.lastIndexOf((StrMatcher) null));        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a')));                sb.append("ab bd");        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a')));        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b')));        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher()));        assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d')));        assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher()));        assertEquals(-1, sb.lastIndexOf((StrMatcher) null));                sb.append(" A1 junction");        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER));    }    public void testLastIndexOf_StrMatcher_int() {        StrBuilder sb = new StrBuilder();        assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2));        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1));                sb.append("ab bd");        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2));        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20));                assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1));        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0));        assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1));        assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 2));        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 3));        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 4));        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 5));        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 6));                assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2));        assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0));        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2));        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4));        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20));                assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0));        assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 0));                sb.append(" A1 junction with A2");        assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5));        assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6)); // A matches, 1 is outside bounds        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 7));        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 22));        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23)); // A matches, 2 is outside bounds        assertEquals(23, sb.lastIndexOf(A_NUMBER_MATCHER, 24));    }    static final StrMatcher A_NUMBER_MATCHER = new StrMatcher() {        @Override        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {            if (buffer[pos] == 'A') {                pos++;                if (pos < bufferEnd && buffer[pos] >= '0' && buffer[pos] <= '9') {                    return 2;                }            }            return 0;        }    };    //-----------------------------------------------------------------------    public void testAsTokenizer() throws Exception {        // from Javadoc        StrBuilder b = new StrBuilder();        b.append("a b ");        StrTokenizer t = b.asTokenizer();                String[] tokens1 = t.getTokenArray();        assertEquals(2, tokens1.length);        assertEquals("a", tokens1[0]);        assertEquals("b", tokens1[1]);        assertEquals(2, t.size());                b.append("c d ");        String[] tokens2 = t.getTokenArray();        assertEquals(2, tokens2.length);        assertEquals("a", tokens2[0]);        assertEquals("b", tokens2[1]);        assertEquals(2, t.size());        assertEquals("a", t.next());        assertEquals("b", t.next());                t.reset();        String[] tokens3 = t.getTokenArray();        assertEquals(4, tokens3.length);        assertEquals("a", tokens3[0]);        assertEquals("b", tokens3[1]);        assertEquals("c", tokens3[2]);        assertEquals("d", tokens3[3]);        assertEquals(4, t.size());        assertEquals("a", t.next());        assertEquals("b", t.next());        assertEquals("c", t.next());        assertEquals("d", t.next());                assertEquals("a b c d ", t.getContent());    }    // -----------------------------------------------------------------------    public void testAsReader() throws Exception {        StrBuilder sb = new StrBuilder("some text");        Reader reader = sb.asReader();        assertEquals(true, reader.ready());        char[] buf = new char[40];        assertEquals(9, reader.read(buf));        assertEquals("some text", new String(buf, 0, 9));                assertEquals(-1, reader.read());        assertEquals(false, reader.ready());        assertEquals(0, reader.skip(2));        assertEquals(0, reader.skip(-1));                assertEquals(true, reader.markSupported());        reader = sb.asReader();        assertEquals('s', reader.read());        reader.mark(-1);        char[] array = new char[3];        assertEquals(3, reader.read(array, 0, 3));        assertEquals('o', array[0]);        assertEquals('m', array[1]);        assertEquals('e', array[2]);        reader.reset();        assertEquals(1, reader.read(array, 1, 1));        assertEquals('o', array[0]);        assertEquals('o', array[1]);        assertEquals('e', array[2]);        assertEquals(2, reader.skip(2));        assertEquals(' ', reader.read());                assertEquals(true, reader.ready());        reader.close();        assertEquals(true, reader.ready());                reader = sb.asReader();        array = new char[3];        try {            reader.read(array, -1, 0);            fail();        } catch (IndexOutOfBoundsException ex) {}        try {            reader.read(array, 0, -1);            fail();        } catch (IndexOutOfBoundsException ex) {}        try {            reader.read(array, 100, 1);            fail();        } catch (IndexOutOfBoundsException ex) {}        try {            reader.read(array, 0, 100);            fail();        } catch (IndexOutOfBoundsException ex) {}        try {            reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE);            fail();        } catch (IndexOutOfBoundsException ex) {}                assertEquals(0, reader.read(array, 0, 0));        assertEquals(0, array[0]);        assertEquals(0, array[1]);        assertEquals(0, array[2]);                reader.skip(9);        assertEquals(-1, reader.read(array, 0, 1));                reader.reset();        array = new char[30];        assertEquals(9, reader.read(array, 0, 30));    }    //-----------------------------------------------------------------------    public void testAsWriter() throws Exception {        StrBuilder sb = new StrBuilder("base");        Writer writer = sb.asWriter();                writer.write('l');        assertEquals("basel", sb.toString());                writer.write(new char[] {'i', 'n'});        assertEquals("baselin", sb.toString());                writer.write(new char[] {'n', 'e', 'r'}, 1, 2);        assertEquals("baseliner", sb.toString());                writer.write(" rout");        assertEquals("baseliner rout", sb.toString());                writer.write("ping that server", 1, 3);        assertEquals("baseliner routing", sb.toString());                writer.flush();  // no effect        assertEquals("baseliner routing", sb.toString());                writer.close();  // no effect        assertEquals("baseliner routing", sb.toString());                writer.write(" hi");  // works after close        assertEquals("baseliner routing hi", sb.toString());                sb.setLength(4);  // mix and match        writer.write('d');        assertEquals("based", sb.toString());    }    //-----------------------------------------------------------------------    public void testEqualsIgnoreCase() {        StrBuilder sb1 = new StrBuilder();        StrBuilder sb2 = new StrBuilder();        assertEquals(true, sb1.equalsIgnoreCase(sb1));        assertEquals(true, sb1.equalsIgnoreCase(sb2));        assertEquals(true, sb2.equalsIgnoreCase(sb2));                sb1.append("abc");        assertEquals(false, sb1.equalsIgnoreCase(sb2));                sb2.append("ABC");        assertEquals(true, sb1.equalsIgnoreCase(sb2));                sb2.clear().append("abc");        assertEquals(true, sb1.equalsIgnoreCase(sb2));        assertEquals(true, sb1.equalsIgnoreCase(sb1));        assertEquals(true, sb2.equalsIgnoreCase(sb2));                sb2.clear().append("aBc");        assertEquals(true, sb1.equalsIgnoreCase(sb2));    }    //-----------------------------------------------------------------------    public void testEquals() {        StrBuilder sb1 = new StrBuilder();        StrBuilder sb2 = new StrBuilder();        assertEquals(true, sb1.equals(sb2));        assertEquals(true, sb1.equals(sb1));        assertEquals(true, sb2.equals(sb2));        assertEquals(true, sb1.equals((Object) sb2));                sb1.append("abc");        assertEquals(false, sb1.equals(sb2));        assertEquals(false, sb1.equals((Object) sb2));                sb2.append("ABC");        assertEquals(false, sb1.equals(sb2));        assertEquals(false, sb1.equals((Object) sb2));                sb2.clear().append("abc");        assertEquals(true, sb1.equals(sb2));        assertEquals(true, sb1.equals((Object) sb2));                assertEquals(false, sb1.equals(new Integer(1)));        assertEquals(false, sb1.equals("abc"));    }    //-----------------------------------------------------------------------    public void testHashCode() {        StrBuilder sb = new StrBuilder();        int hc1a = sb.hashCode();        int hc1b = sb.hashCode();        assertEquals(0, hc1a);        assertEquals(hc1a, hc1b);                sb.append("abc");        int hc2a = sb.hashCode();        int hc2b = sb.hashCode();        assertEquals(true, hc2a != 0);        assertEquals(hc2a, hc2b);    }    //-----------------------------------------------------------------------    public void testToString() {        StrBuilder sb = new StrBuilder("abc");        assertEquals("abc", sb.toString());    }    //-----------------------------------------------------------------------    public void testToStringBuffer() {        StrBuilder sb = new StrBuilder();        assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString());                sb.append("junit");        assertEquals(new StringBuffer("junit").toString(), sb.toStringBuffer().toString());    }    //-----------------------------------------------------------------------    public void testLang294() {        StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n");        sb.deleteAll("\n%BLAH%");        assertEquals("\nDo more stuff\neven more stuff\n", sb.toString());     }    public void testIndexOfLang294() {        StrBuilder sb = new StrBuilder("onetwothree");        sb.deleteFirst("three");        assertEquals(-1, sb.indexOf("three"));    }    //-----------------------------------------------------------------------    public void testLang295() {        StrBuilder sb = new StrBuilder("onetwothree");        sb.deleteFirst("three");        assertFalse( "The contains(char) method is looking beyond the end of the string", sb.contains('h'));        assertEquals( "The indexOf(char) method is looking beyond the end of the string", -1, sb.indexOf('h'));    }    //-----------------------------------------------------------------------    public void testLang412Right() {        StrBuilder sb = new StrBuilder();        sb.appendFixedWidthPadRight(null, 10, '*');        assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString());    }    public void testLang412Left() {        StrBuilder sb = new StrBuilder();        sb.appendFixedWidthPadLeft(null, 10, '*');        assertEquals( "Failed to invoke appendFixedWidthPadLeft correctly", "**********", sb.toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.time;import junit.framework.Assert;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * TestCase for StopWatch. * * @author Stephen Colebourne * @version $Id$ */public class StopWatchTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(StopWatchTest.class);        suite.setName("StopWatch Tests");        return suite;    }    public StopWatchTest(String s) {        super(s);    }    //-----------------------------------------------------------------------    public void testStopWatchSimple(){        StopWatch watch = new StopWatch();        watch.start();            try {Thread.sleep(550);} catch (InterruptedException ex) {}        watch.stop();        long time = watch.getTime();        assertEquals(time, watch.getTime());                assertTrue(time >= 500);        assertTrue(time < 700);                watch.reset();        assertEquals(0, watch.getTime());    }        public void testStopWatchSimpleGet(){        StopWatch watch = new StopWatch();        assertEquals(0, watch.getTime());        assertEquals("0:00:00.000", watch.toString());                watch.start();            try {Thread.sleep(500);} catch (InterruptedException ex) {}        assertTrue(watch.getTime() < 2000);    }        public void testStopWatchSplit(){        StopWatch watch = new StopWatch();        watch.start();            try {Thread.sleep(550);} catch (InterruptedException ex) {}        watch.split();        long splitTime = watch.getSplitTime();        String splitStr = watch.toSplitString();            try {Thread.sleep(550);} catch (InterruptedException ex) {}        watch.unsplit();            try {Thread.sleep(550);} catch (InterruptedException ex) {}        watch.stop();        long totalTime = watch.getTime();        assertEquals("Formatted split string not the correct length",                      splitStr.length(), 11);        assertTrue(splitTime >= 500);        assertTrue(splitTime < 700);        assertTrue(totalTime >= 1500);        assertTrue(totalTime < 1900);    }        public void testStopWatchSuspend(){        StopWatch watch = new StopWatch();        watch.start();            try {Thread.sleep(550);} catch (InterruptedException ex) {}        watch.suspend();        long suspendTime = watch.getTime();            try {Thread.sleep(550);} catch (InterruptedException ex) {}        watch.resume();            try {Thread.sleep(550);} catch (InterruptedException ex) {}        watch.stop();        long totalTime = watch.getTime();                assertTrue(suspendTime >= 500);        assertTrue(suspendTime < 700);        assertTrue(totalTime >= 1000);        assertTrue(totalTime < 1300);    }    public void testLang315() {        StopWatch watch = new StopWatch();        watch.start();            try {Thread.sleep(200);} catch (InterruptedException ex) {}        watch.suspend();        long suspendTime = watch.getTime();            try {Thread.sleep(200);} catch (InterruptedException ex) {}        watch.stop();        long totalTime = watch.getTime();        assertTrue( suspendTime == totalTime );    }    // test bad states    public void testBadStates() {        StopWatch watch = new StopWatch();        try {            watch.stop();            fail("Calling stop on an unstarted StopWatch should throw an exception. ");        } catch(IllegalStateException ise) {            // expected        }        try {            watch.stop();            fail("Calling stop on an unstarted StopWatch should throw an exception. ");        } catch(IllegalStateException ise) {            // expected        }        try {            watch.suspend();            fail("Calling suspend on an unstarted StopWatch should throw an exception. ");        } catch(IllegalStateException ise) {            // expected        }        try {            watch.split();            fail("Calling split on a non-running StopWatch should throw an exception. ");        } catch(IllegalStateException ise) {            // expected        }        try {            watch.unsplit();            fail("Calling unsplit on an unsplit StopWatch should throw an exception. ");        } catch(IllegalStateException ise) {            // expected        }        try {            watch.resume();            fail("Calling resume on an unsuspended StopWatch should throw an exception. ");        } catch(IllegalStateException ise) {            // expected        }        watch.start();        try {            watch.start();            fail("Calling start on a started StopWatch should throw an exception. ");        } catch(IllegalStateException ise) {            // expected        }        try {            watch.unsplit();            fail("Calling unsplit on an unsplit StopWatch should throw an exception. ");        } catch(IllegalStateException ise) {            // expected        }        try {            watch.getSplitTime();            fail("Calling getSplitTime on an unsplit StopWatch should throw an exception. ");        } catch(IllegalStateException ise) {            // expected        }        try {            watch.resume();            fail("Calling resume on an unsuspended StopWatch should throw an exception. ");        } catch(IllegalStateException ise) {            // expected        }        watch.stop();        try {            watch.start();            fail("Calling start on a stopped StopWatch should throw an exception as it needs to be reset. ");        } catch(IllegalStateException ise) {            // expected        }    }    public void testGetStartTime() {        long beforeStopWatch = System.currentTimeMillis();        StopWatch watch = new StopWatch();        try {            watch.getStartTime();            fail("Calling getStartTime on an unstarted StopWatch should throw an exception");        } catch (IllegalStateException expected) {            // expected        }        watch.start();        try {            watch.getStartTime();            Assert.assertTrue(watch.getStartTime() >= beforeStopWatch);        } catch (IllegalStateException ex) {            fail("Start time should be available: " + ex.getMessage());        }        watch.reset();        try {            watch.getStartTime();            fail("Calling getStartTime on a reset, but unstarted StopWatch should throw an exception");        } catch (IllegalStateException expected) {            // expected        }    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.time;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.Calendar;import java.util.TimeZone;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * TestCase for DurationFormatUtils. *  * @author Apache Ant - DateUtilsTest * @author <a href="mailto:sbailliez@apache.org">Stephane Bailliez</a> * @author <a href="mailto:stefan.bodewig@epost.de">Stefan Bodewig</a> * @author Stephen Colebourne * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> */public class DurationFormatUtilsTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(DurationFormatUtilsTest.class);        suite.setName("DurationFormatUtils Tests");        return suite;    }    public DurationFormatUtilsTest(String s) {        super(s);    }    // -----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new DurationFormatUtils());        Constructor<?>[] cons = DurationFormatUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(DurationFormatUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(DurationFormatUtils.class.getModifiers()));    }    // -----------------------------------------------------------------------    public void testFormatDurationWords() {        String text = null;        text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false);        assertEquals("50 seconds", text);        text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false);        assertEquals("1 minute 5 seconds", text);        text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false);        assertEquals("2 minutes 0 seconds", text);        text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false);        assertEquals("2 minutes 1 second", text);        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false);        assertEquals("1 hour 12 minutes 0 seconds", text);        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false);        assertEquals("1 day 0 hours 0 minutes 0 seconds", text);        text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true);        assertEquals("50 seconds", text);        text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true);        assertEquals("1 minute 5 seconds", text);        text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true);        assertEquals("2 minutes", text);        text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true);        assertEquals("2 minutes 1 second", text);        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true);        assertEquals("1 hour 12 minutes", text);        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true);        assertEquals("1 day", text);        text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true);        assertEquals("0 days 0 hours 0 minutes 50 seconds", text);        text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true);        assertEquals("0 days 0 hours 1 minute 5 seconds", text);        text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true);        assertEquals("0 days 0 hours 2 minutes", text);        text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true);        assertEquals("0 days 0 hours 2 minutes 1 second", text);        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true);        assertEquals("0 days 1 hour 12 minutes", text);        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true);        assertEquals("1 day", text);        text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false);        assertEquals("0 days 0 hours 0 minutes 50 seconds", text);        text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false);        assertEquals("0 days 0 hours 1 minute 5 seconds", text);        text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false);        assertEquals("0 days 0 hours 2 minutes 0 seconds", text);        text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false);        assertEquals("0 days 0 hours 2 minutes 1 second", text);        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false);        assertEquals("0 days 1 hour 12 minutes 0 seconds", text);        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false);        assertEquals("1 day 1 hour 12 minutes 0 seconds", text);        text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false);        assertEquals("2 days 1 hour 12 minutes 0 seconds", text);        for (int i = 2; i < 31; i++) {            text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false);            // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text);            //                        // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours            // -2 minutes -47...>            // at junit.framework.Assert.assertEquals(Assert.java:81)            // at junit.framework.Assert.assertEquals(Assert.java:87)            // at            // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124)            // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)            // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)            // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)            // at java.lang.reflect.Method.invoke(Method.java:324)            // at junit.framework.TestCase.runTest(TestCase.java:154)            // at junit.framework.TestCase.runBare(TestCase.java:127)            // at junit.framework.TestResult$1.protect(TestResult.java:106)            // at junit.framework.TestResult.runProtected(TestResult.java:124)            // at junit.framework.TestResult.run(TestResult.java:109)            // at junit.framework.TestCase.run(TestCase.java:118)            // at junit.framework.TestSuite.runTest(TestSuite.java:208)            // at junit.framework.TestSuite.run(TestSuite.java:203)            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)        }    }    /**     * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone.     */    public void testFormatDurationPluralWords() {        long oneSecond = 1000;        long oneMinute = oneSecond * 60;        long oneHour = oneMinute * 60;        long oneDay = oneHour * 24;        String text = null;        text = DurationFormatUtils.formatDurationWords(oneSecond, false, false);        assertEquals("0 days 0 hours 0 minutes 1 second", text);        text = DurationFormatUtils.formatDurationWords(oneSecond * 2, false, false);        assertEquals("0 days 0 hours 0 minutes 2 seconds", text);        text = DurationFormatUtils.formatDurationWords(oneSecond * 11, false, false);        assertEquals("0 days 0 hours 0 minutes 11 seconds", text);        text = DurationFormatUtils.formatDurationWords(oneMinute, false, false);        assertEquals("0 days 0 hours 1 minute 0 seconds", text);        text = DurationFormatUtils.formatDurationWords(oneMinute * 2, false, false);        assertEquals("0 days 0 hours 2 minutes 0 seconds", text);        text = DurationFormatUtils.formatDurationWords(oneMinute * 11, false, false);        assertEquals("0 days 0 hours 11 minutes 0 seconds", text);        text = DurationFormatUtils.formatDurationWords(oneMinute + oneSecond, false, false);        assertEquals("0 days 0 hours 1 minute 1 second", text);        text = DurationFormatUtils.formatDurationWords(oneHour, false, false);        assertEquals("0 days 1 hour 0 minutes 0 seconds", text);        text = DurationFormatUtils.formatDurationWords(oneHour * 2, false, false);        assertEquals("0 days 2 hours 0 minutes 0 seconds", text);        text = DurationFormatUtils.formatDurationWords(oneHour * 11, false, false);        assertEquals("0 days 11 hours 0 minutes 0 seconds", text);        text = DurationFormatUtils.formatDurationWords(oneHour + oneMinute + oneSecond, false, false);        assertEquals("0 days 1 hour 1 minute 1 second", text);        text = DurationFormatUtils.formatDurationWords(oneDay, false, false);        assertEquals("1 day 0 hours 0 minutes 0 seconds", text);        text = DurationFormatUtils.formatDurationWords(oneDay * 2, false, false);        assertEquals("2 days 0 hours 0 minutes 0 seconds", text);        text = DurationFormatUtils.formatDurationWords(oneDay * 11, false, false);        assertEquals("11 days 0 hours 0 minutes 0 seconds", text);        text = DurationFormatUtils.formatDurationWords(oneDay + oneHour + oneMinute + oneSecond, false, false);        assertEquals("1 day 1 hour 1 minute 1 second", text);    }    public void testFormatDurationHMS() {        long time = 0;        assertEquals("0:00:00.000", DurationFormatUtils.formatDurationHMS(time));        time = 1;        assertEquals("0:00:00.001", DurationFormatUtils.formatDurationHMS(time));        time = 15;        assertEquals("0:00:00.015", DurationFormatUtils.formatDurationHMS(time));        time = 165;        assertEquals("0:00:00.165", DurationFormatUtils.formatDurationHMS(time));        time = 1675;        assertEquals("0:00:01.675", DurationFormatUtils.formatDurationHMS(time));        time = 13465;        assertEquals("0:00:13.465", DurationFormatUtils.formatDurationHMS(time));        time = 72789;        assertEquals("0:01:12.789", DurationFormatUtils.formatDurationHMS(time));        time = 12789 + 32 * 60000;        assertEquals("0:32:12.789", DurationFormatUtils.formatDurationHMS(time));        time = 12789 + 62 * 60000;        assertEquals("1:02:12.789", DurationFormatUtils.formatDurationHMS(time));    }    public void testFormatDurationISO() {        assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0L));        assertEquals("P0Y0M0DT0H0M0.001S", DurationFormatUtils.formatDurationISO(1L));        assertEquals("P0Y0M0DT0H0M0.010S", DurationFormatUtils.formatDurationISO(10L));        assertEquals("P0Y0M0DT0H0M0.100S", DurationFormatUtils.formatDurationISO(100L));        assertEquals("P0Y0M0DT0H1M15.321S", DurationFormatUtils.formatDurationISO(75321L));    }    public void testFormatDuration() {        long duration = 0;        assertEquals("0", DurationFormatUtils.formatDuration(duration, "y"));        assertEquals("0", DurationFormatUtils.formatDuration(duration, "M"));        assertEquals("0", DurationFormatUtils.formatDuration(duration, "d"));        assertEquals("0", DurationFormatUtils.formatDuration(duration, "H"));        assertEquals("0", DurationFormatUtils.formatDuration(duration, "m"));        assertEquals("0", DurationFormatUtils.formatDuration(duration, "s"));        assertEquals("0", DurationFormatUtils.formatDuration(duration, "S"));        assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS"));        assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy"));        assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM"));        duration = 60 * 1000;        assertEquals("0", DurationFormatUtils.formatDuration(duration, "y"));        assertEquals("0", DurationFormatUtils.formatDuration(duration, "M"));        assertEquals("0", DurationFormatUtils.formatDuration(duration, "d"));        assertEquals("0", DurationFormatUtils.formatDuration(duration, "H"));        assertEquals("1", DurationFormatUtils.formatDuration(duration, "m"));        assertEquals("60", DurationFormatUtils.formatDuration(duration, "s"));        assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S"));        assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss"));        Calendar base = Calendar.getInstance();        base.set(2000, 0, 1, 0, 0, 0);        base.set(Calendar.MILLISECOND, 0);        Calendar cal = Calendar.getInstance();        cal.set(2003, 1, 1, 0, 0, 0);        cal.set(Calendar.MILLISECOND, 0);        duration = cal.getTime().getTime() - base.getTime().getTime(); // duration from 2000-01-01 to cal        // don't use 1970 in test as time zones were less reliable in 1970 than now        // remember that duration formatting ignores time zones, working on strict hour lengths        int days = 366 + 365 + 365 + 31;        assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d"));    }    public void testFormatPeriodISO() {        TimeZone timeZone = TimeZone.getTimeZone("GMT-3");        Calendar base = Calendar.getInstance(timeZone);        base.set(1970, 0, 1, 0, 0, 0);        base.set(Calendar.MILLISECOND, 0);        Calendar cal = Calendar.getInstance(timeZone);        cal.set(2002, 1, 23, 9, 11, 12);        cal.set(Calendar.MILLISECOND, 1);        String text;        // repeat a test from testDateTimeISO to compare extended and not extended.        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);        assertEquals("2002-02-23T09:11:12-03:00", text);        // test fixture is the same as above, but now with extended format.        text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),                DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);        assertEquals("P32Y1M22DT9H11M12.001S", text);        // test fixture from example in http://www.w3.org/TR/xmlschema-2/#duration        cal.set(1971, 1, 3, 10, 30, 0);        cal.set(Calendar.MILLISECOND, 0);        text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),                DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);        assertEquals("P1Y1M2DT10H30M0.000S", text);        // want a way to say 'don't print the seconds in format()' or other fields for that matter:        // assertEquals("P1Y2M3DT10H30M", text);    }    public void testFormatPeriod() {        Calendar cal1970 = Calendar.getInstance();        cal1970.set(1970, 0, 1, 0, 0, 0);        cal1970.set(Calendar.MILLISECOND, 0);        long time1970 = cal1970.getTime().getTime();        assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "y"));        assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "M"));        assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "d"));        assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "H"));        assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "m"));        assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "s"));        assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "S"));        assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "SSSS"));        assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "yyyy"));        assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "yyMM"));        long time = time1970 + 60 * 1000;        assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "y"));        assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "M"));        assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "d"));        assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "H"));        assertEquals("1", DurationFormatUtils.formatPeriod(time1970, time, "m"));        assertEquals("60", DurationFormatUtils.formatPeriod(time1970, time, "s"));        assertEquals("60000", DurationFormatUtils.formatPeriod(time1970, time, "S"));        assertEquals("01:00", DurationFormatUtils.formatPeriod(time1970, time, "mm:ss"));        Calendar cal = Calendar.getInstance();        cal.set(1973, 6, 1, 0, 0, 0);        cal.set(Calendar.MILLISECOND, 0);        time = cal.getTime().getTime();        assertEquals("36", DurationFormatUtils.formatPeriod(time1970, time, "yM"));        assertEquals("3 years 6 months", DurationFormatUtils.formatPeriod(time1970, time, "y' years 'M' months'"));        assertEquals("03/06", DurationFormatUtils.formatPeriod(time1970, time, "yy/MM"));        cal.set(1973, 10, 1, 0, 0, 0);        cal.set(Calendar.MILLISECOND, 0);        time = cal.getTime().getTime();        assertEquals("310", DurationFormatUtils.formatPeriod(time1970, time, "yM"));        assertEquals("3 years 10 months", DurationFormatUtils.formatPeriod(time1970, time, "y' years 'M' months'"));        assertEquals("03/10", DurationFormatUtils.formatPeriod(time1970, time, "yy/MM"));        cal.set(1974, 0, 1, 0, 0, 0);        cal.set(Calendar.MILLISECOND, 0);        time = cal.getTime().getTime();        assertEquals("40", DurationFormatUtils.formatPeriod(time1970, time, "yM"));        assertEquals("4 years 0 months", DurationFormatUtils.formatPeriod(time1970, time, "y' years 'M' months'"));        assertEquals("04/00", DurationFormatUtils.formatPeriod(time1970, time, "yy/MM"));        assertEquals("48", DurationFormatUtils.formatPeriod(time1970, time, "M"));        assertEquals("48", DurationFormatUtils.formatPeriod(time1970, time, "MM"));        assertEquals("048", DurationFormatUtils.formatPeriod(time1970, time, "MMM"));    }    public void testLexx() {        // tests each constant        assertArrayEquals(new DurationFormatUtils.Token[]{            new DurationFormatUtils.Token(DurationFormatUtils.y, 1),            new DurationFormatUtils.Token(DurationFormatUtils.M, 1),            new DurationFormatUtils.Token(DurationFormatUtils.d, 1),            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),            new DurationFormatUtils.Token(DurationFormatUtils.m, 1),            new DurationFormatUtils.Token(DurationFormatUtils.s, 1),            new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx("yMdHmsS"));        // tests the ISO8601-like        assertArrayEquals(new DurationFormatUtils.Token[]{            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),            new DurationFormatUtils.Token(new StringBuffer(":"), 1),            new DurationFormatUtils.Token(DurationFormatUtils.m, 2),            new DurationFormatUtils.Token(new StringBuffer(":"), 1),            new DurationFormatUtils.Token(DurationFormatUtils.s, 2),            new DurationFormatUtils.Token(new StringBuffer("."), 1),            new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx("H:mm:ss.SSS"));        // test the iso extended format        assertArrayEquals(new DurationFormatUtils.Token[]{            new DurationFormatUtils.Token(new StringBuffer("P"), 1),            new DurationFormatUtils.Token(DurationFormatUtils.y, 4),            new DurationFormatUtils.Token(new StringBuffer("Y"), 1),            new DurationFormatUtils.Token(DurationFormatUtils.M, 1),            new DurationFormatUtils.Token(new StringBuffer("M"), 1),            new DurationFormatUtils.Token(DurationFormatUtils.d, 1),            new DurationFormatUtils.Token(new StringBuffer("DT"), 1),            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),            new DurationFormatUtils.Token(new StringBuffer("H"), 1),            new DurationFormatUtils.Token(DurationFormatUtils.m, 1),            new DurationFormatUtils.Token(new StringBuffer("M"), 1),            new DurationFormatUtils.Token(DurationFormatUtils.s, 1),            new DurationFormatUtils.Token(new StringBuffer("."), 1),            new DurationFormatUtils.Token(DurationFormatUtils.S, 1),            new DurationFormatUtils.Token(new StringBuffer("S"), 1)}, DurationFormatUtils                .lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN));        // test failures in equals        DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4);        assertFalse("Token equal to non-Token class. ", token.equals(new Object()));        assertFalse("Token equal to Token with wrong value class. ", token.equals(new DurationFormatUtils.Token(                new Object())));        assertFalse("Token equal to Token with different count. ", token.equals(new DurationFormatUtils.Token(                DurationFormatUtils.y, 1)));        DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(new Integer(1), 4);        assertTrue("Token with Number value not equal to itself. ", numToken.equals(numToken));    }    // http://issues.apache.org/bugzilla/show_bug.cgi?id=38401    public void testBugzilla38401() {        assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS");    }    // https://issues.apache.org/jira/browse/LANG-281    public void testJiraLang281() {        assertEqualDuration( "09", new int[] { 2005, 11, 31, 0, 0, 0 },                              new int[] { 2006, 9, 6, 0, 0, 0 }, "MM");    }        // Testing the under a day range in DurationFormatUtils.formatPeriod    public void testLowDurations() {        for(int hr=0; hr < 24; hr++) {            for(int min=0; min < 60; min++) {                for(int sec=0; sec < 60; sec++) {                    assertEqualDuration( hr + ":" + min + ":" + sec,                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 },                                         new int[] { 2000, 0, 1, hr, min, sec },                                         "H:m:s"                                       );                }            }        }    }    // Attempting to test edge cases in DurationFormatUtils.formatPeriod    public void testEdgeDurations() {        assertEqualDuration( "01", new int[] { 2006, 0, 15, 0, 0, 0 },                              new int[] { 2006, 2, 10, 0, 0, 0 }, "MM");        assertEqualDuration( "12", new int[] { 2005, 0, 15, 0, 0, 0 },                              new int[] { 2006, 0, 15, 0, 0, 0 }, "MM");        assertEqualDuration( "12", new int[] { 2005, 0, 15, 0, 0, 0 },                              new int[] { 2006, 0, 16, 0, 0, 0 }, "MM");        assertEqualDuration( "11", new int[] { 2005, 0, 15, 0, 0, 0 },                              new int[] { 2006, 0, 14, 0, 0, 0 }, "MM");                assertEqualDuration( "01 26", new int[] { 2006, 0, 15, 0, 0, 0 },                             new int[] { 2006, 2, 10, 0, 0, 0 }, "MM dd");        assertEqualDuration( "54", new int[] { 2006, 0, 15, 0, 0, 0 },                             new int[] { 2006, 2, 10, 0, 0, 0 }, "dd");                 assertEqualDuration( "09 12", new int[] { 2006, 1, 20, 0, 0, 0 },                             new int[] { 2006, 11, 4, 0, 0, 0 }, "MM dd");        assertEqualDuration( "287", new int[] { 2006, 1, 20, 0, 0, 0 },                             new int[] { 2006, 11, 4, 0, 0, 0 }, "dd");         assertEqualDuration( "11 30", new int[] { 2006, 0, 2, 0, 0, 0 },                             new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd");         assertEqualDuration( "364", new int[] { 2006, 0, 2, 0, 0, 0 },                             new int[] { 2007, 0, 1, 0, 0, 0 }, "dd");         assertEqualDuration( "12 00", new int[] { 2006, 0, 1, 0, 0, 0 },                             new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd");         assertEqualDuration( "365", new int[] { 2006, 0, 1, 0, 0, 0 },                             new int[] { 2007, 0, 1, 0, 0, 0 }, "dd");             assertEqualDuration( "31", new int[] { 2006, 0, 1, 0, 0, 0 },                new int[] { 2006, 1, 1, 0, 0, 0 }, "dd");                 assertEqualDuration( "92", new int[] { 2005, 9, 1, 0, 0, 0 },                new int[] { 2006, 0, 1, 0, 0, 0 }, "dd");         assertEqualDuration( "77", new int[] { 2005, 9, 16, 0, 0, 0 },                new int[] { 2006, 0, 1, 0, 0, 0 }, "dd");         // test month larger in start than end        assertEqualDuration( "136", new int[] { 2005, 9, 16, 0, 0, 0 },                new int[] { 2006, 2, 1, 0, 0, 0 }, "dd");         // test when start in leap year        assertEqualDuration( "136", new int[] { 2004, 9, 16, 0, 0, 0 },                new int[] { 2005, 2, 1, 0, 0, 0 }, "dd");         // test when end in leap year        assertEqualDuration( "137", new int[] { 2003, 9, 16, 0, 0, 0 },                new int[] { 2004, 2, 1, 0, 0, 0 }, "dd");                 // test when end in leap year but less than end of feb        assertEqualDuration( "135", new int[] { 2003, 9, 16, 0, 0, 0 },                new int[] { 2004, 1, 28, 0, 0, 0 }, "dd");         assertEqualDuration( "364", new int[] { 2007, 0, 2, 0, 0, 0 },                new int[] { 2008, 0, 1, 0, 0, 0 }, "dd");         assertEqualDuration( "729", new int[] { 2006, 0, 2, 0, 0, 0 },                new int[] { 2008, 0, 1, 0, 0, 0 }, "dd");         assertEqualDuration( "365", new int[] { 2007, 2, 2, 0, 0, 0 },                new int[] { 2008, 2, 1, 0, 0, 0 }, "dd");         assertEqualDuration( "333", new int[] { 2007, 1, 2, 0, 0, 0 },                new int[] { 2008, 0, 1, 0, 0, 0 }, "dd");         assertEqualDuration( "28", new int[] { 2008, 1, 2, 0, 0, 0 },                new int[] { 2008, 2, 1, 0, 0, 0 }, "dd");         assertEqualDuration( "393", new int[] { 2007, 1, 2, 0, 0, 0 },                new int[] { 2008, 2, 1, 0, 0, 0 }, "dd");         assertEqualDuration( "369", new int[] { 2004, 0, 29, 0, 0, 0 },                new int[] { 2005, 1, 1, 0, 0, 0 }, "dd");         assertEqualDuration( "338", new int[] { 2004, 1, 29, 0, 0, 0 },                new int[] { 2005, 1, 1, 0, 0, 0 }, "dd");         assertEqualDuration( "28", new int[] { 2004, 2, 8, 0, 0, 0 },                new int[] { 2004, 3, 5, 0, 0, 0 }, "dd");         assertEqualDuration( "48", new int[] { 1992, 1, 29, 0, 0, 0 },                new int[] { 1996, 1, 29, 0, 0, 0 }, "M");                         // this seems odd - and will fail if I throw it in as a brute force         // below as it expects the answer to be 12. It's a tricky edge case        assertEqualDuration( "11", new int[] { 1996, 1, 29, 0, 0, 0 },                new int[] { 1997, 1, 28, 0, 0, 0 }, "M");         // again - this seems odd        assertEqualDuration( "11 28", new int[] { 1996, 1, 29, 0, 0, 0 },                new int[] { 1997, 1, 28, 0, 0, 0 }, "M d");             }        public void testDurationsByBruteForce() {        bruteForce(2006, 0, 1, "d", Calendar.DAY_OF_MONTH);        bruteForce(2006, 0, 2, "d", Calendar.DAY_OF_MONTH);        bruteForce(2007, 1, 2, "d", Calendar.DAY_OF_MONTH);        bruteForce(2004, 1, 29, "d", Calendar.DAY_OF_MONTH);        bruteForce(1996, 1, 29, "d", Calendar.DAY_OF_MONTH);        bruteForce(1969, 1, 28, "M", Calendar.MONTH);  // tests for 48 years        //bruteForce(1996, 1, 29, "M", Calendar.MONTH);  // this will fail    }        private int FOUR_YEARS = 365 * 3 + 366;        // Takes a minute to run, so generally turned off//    public void testBrutally() {//        Calendar c = Calendar.getInstance();//        c.set(2004, 0, 1, 0, 0, 0);//        for (int i=0; i < FOUR_YEARS; i++) {//            bruteForce(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DAY_OF_MONTH), "d", Calendar.DAY_OF_MONTH );//            c.add(Calendar.DAY_OF_MONTH, 1);//        }//    }                private void bruteForce(int year, int month, int day, String format, int calendarType) {        String msg = year + "-" + month + "-" + day + " to ";        Calendar c = Calendar.getInstance();        c.set(year, month, day, 0, 0, 0);        int[] array1 = new int[] { year, month, day, 0, 0, 0 };        int[] array2 = new int[] { year, month, day, 0, 0, 0 };        for (int i=0; i < FOUR_YEARS; i++) {            array2[0] = c.get(Calendar.YEAR);            array2[1] = c.get(Calendar.MONTH);            array2[2] = c.get(Calendar.DAY_OF_MONTH);            String tmpMsg = msg + array2[0] + "-" + array2[1] + "-" + array2[2] + " at ";            assertEqualDuration( tmpMsg + i, Integer.toString(i), array1, array2, format );            c.add(calendarType, 1);        }    }    private void assertEqualDuration(String expected, int[] start, int[] end, String format) {        assertEqualDuration(null, expected, start, end, format);    }    private void assertEqualDuration(String message, String expected, int[] start, int[] end, String format) {        Calendar cal1 = Calendar.getInstance();        cal1.set(start[0], start[1], start[2], start[3], start[4], start[5]);        cal1.set(Calendar.MILLISECOND, 0);        Calendar cal2 = Calendar.getInstance();        cal2.set(end[0], end[1], end[2], end[3], end[4], end[5]);        cal2.set(Calendar.MILLISECOND, 0);        long milli1 = cal1.getTime().getTime();        long milli2 = cal2.getTime().getTime();        String result = DurationFormatUtils.formatPeriod(milli1, milli2, format);        if (message == null) {            assertEquals(expected, result);        } else {            assertEquals(message, expected, result);        }    }    private void assertArrayEquals(DurationFormatUtils.Token[] obj1, DurationFormatUtils.Token[] obj2) {        assertEquals("Arrays are unequal length. ", obj1.length, obj2.length);        for (int i = 0; i < obj1.length; i++) {            assertTrue("Index " + i + " not equal, " + obj1[i] + " vs " + obj2[i], obj1[i].equals(obj2[i]));        }    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.time;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.GregorianCalendar;import java.util.Iterator;import java.util.Locale;import java.util.NoSuchElementException;import java.util.TimeZone;import junit.framework.AssertionFailedError;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;import org.apache.commons.lang.SystemUtils;/** * Unit tests {@link org.apache.commons.lang.time.DateUtils}. * * @author <a href="mailto:sergek@lokitech.com">Serge Knystautas</a> * @author <a href="mailto:steve@mungoknotwise.com">Steven Caswell</a> */public class DateUtilsTest extends TestCase {    private static final long MILLIS_TEST;    static {        GregorianCalendar cal = new GregorianCalendar(2000, 6, 5, 4, 3, 2);        cal.set(Calendar.MILLISECOND, 1);        MILLIS_TEST = cal.getTime().getTime();    }    DateFormat dateParser = null;    DateFormat dateTimeParser = null;    DateFormat timeZoneDateParser = null;    Date dateAmPm1 = null;    Date dateAmPm2 = null;    Date dateAmPm3 = null;    Date dateAmPm4 = null;    Date date0 = null;    Date date1 = null;    Date date2 = null;    Date date3 = null;    Date date4 = null;    Date date5 = null;    Date date6 = null;    Date date7 = null;    Date date8 = null;    Calendar calAmPm1 = null;    Calendar calAmPm2 = null;    Calendar calAmPm3 = null;    Calendar calAmPm4 = null;    Calendar cal1 = null;    Calendar cal2 = null;    Calendar cal3 = null;    Calendar cal4 = null;    Calendar cal5 = null;    Calendar cal6 = null;    Calendar cal7 = null;    Calendar cal8 = null;    TimeZone zone = null;    TimeZone defaultZone = null;    public DateUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(DateUtilsTest.class);        suite.setName("DateUtils Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();        dateParser = new SimpleDateFormat("MMM dd, yyyy", Locale.ENGLISH);        dateTimeParser = new SimpleDateFormat("MMM dd, yyyy H:mm:ss.SSS", Locale.ENGLISH);        dateAmPm1 = dateTimeParser.parse("February 3, 2002 01:10:00.000");        dateAmPm2 = dateTimeParser.parse("February 3, 2002 11:10:00.000");        dateAmPm3 = dateTimeParser.parse("February 3, 2002 13:10:00.000");        dateAmPm4 = dateTimeParser.parse("February 3, 2002 19:10:00.000");        date0 = dateTimeParser.parse("February 3, 2002 12:34:56.789");        date1 = dateTimeParser.parse("February 12, 2002 12:34:56.789");        date2 = dateTimeParser.parse("November 18, 2001 1:23:11.321");        defaultZone = TimeZone.getDefault();        zone = TimeZone.getTimeZone("MET");        TimeZone.setDefault(zone);        dateTimeParser.setTimeZone(zone);        date3 = dateTimeParser.parse("March 30, 2003 05:30:45.000");        date4 = dateTimeParser.parse("March 30, 2003 01:10:00.000");        date5 = dateTimeParser.parse("March 30, 2003 01:40:00.000");        date6 = dateTimeParser.parse("March 30, 2003 02:10:00.000");        date7 = dateTimeParser.parse("March 30, 2003 02:40:00.000");        date8 = dateTimeParser.parse("October 26, 2003 05:30:45.000");        dateTimeParser.setTimeZone(defaultZone);        TimeZone.setDefault(defaultZone);        calAmPm1 = Calendar.getInstance();        calAmPm1.setTime(dateAmPm1);        calAmPm2 = Calendar.getInstance();        calAmPm2.setTime(dateAmPm2);        calAmPm3 = Calendar.getInstance();        calAmPm3.setTime(dateAmPm3);        calAmPm4 = Calendar.getInstance();        calAmPm4.setTime(dateAmPm4);        cal1 = Calendar.getInstance();        cal1.setTime(date1);        cal2 = Calendar.getInstance();        cal2.setTime(date2);        TimeZone.setDefault(zone);        cal3 = Calendar.getInstance();        cal3.setTime(date3);        cal4 = Calendar.getInstance();        cal4.setTime(date4);        cal5 = Calendar.getInstance();        cal5.setTime(date5);        cal6 = Calendar.getInstance();        cal6.setTime(date6);        cal7 = Calendar.getInstance();        cal7.setTime(date7);        cal8 = Calendar.getInstance();        cal8.setTime(date8);        TimeZone.setDefault(defaultZone);    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new DateUtils());        Constructor<?>[] cons = DateUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(DateUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(DateUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testIsSameDay_Date() {        Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();        Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();        assertEquals(true, DateUtils.isSameDay(date1, date2));        date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();        assertEquals(false, DateUtils.isSameDay(date1, date2));        date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();        assertEquals(true, DateUtils.isSameDay(date1, date2));        date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();        assertEquals(false, DateUtils.isSameDay(date1, date2));        try {            DateUtils.isSameDay((Date) null, (Date) null);            fail();        } catch (IllegalArgumentException ex) {}    }        //-----------------------------------------------------------------------    public void testIsSameDay_Cal() {        GregorianCalendar cal1 = new GregorianCalendar(2004, 6, 9, 13, 45);        GregorianCalendar cal2 = new GregorianCalendar(2004, 6, 9, 13, 45);        assertEquals(true, DateUtils.isSameDay(cal1, cal2));        cal2.add(Calendar.DAY_OF_YEAR, 1);        assertEquals(false, DateUtils.isSameDay(cal1, cal2));        cal1.add(Calendar.DAY_OF_YEAR, 1);        assertEquals(true, DateUtils.isSameDay(cal1, cal2));        cal2.add(Calendar.YEAR, 1);        assertEquals(false, DateUtils.isSameDay(cal1, cal2));        try {            DateUtils.isSameDay((Calendar) null, (Calendar) null);            fail();        } catch (IllegalArgumentException ex) {}    }        //-----------------------------------------------------------------------    public void testIsSameInstant_Date() {        Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();        Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();        assertEquals(true, DateUtils.isSameInstant(date1, date2));        date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();        assertEquals(false, DateUtils.isSameInstant(date1, date2));        date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();        assertEquals(true, DateUtils.isSameInstant(date1, date2));        date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();        assertEquals(false, DateUtils.isSameInstant(date1, date2));        try {            DateUtils.isSameInstant((Date) null, (Date) null);            fail();        } catch (IllegalArgumentException ex) {}    }        //-----------------------------------------------------------------------    public void testIsSameInstant_Cal() {        GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone("GMT+1"));        GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone("GMT-1"));        cal1.set(2004, 6, 9, 13, 45, 0);        cal1.set(Calendar.MILLISECOND, 0);        cal2.set(2004, 6, 9, 13, 45, 0);        cal2.set(Calendar.MILLISECOND, 0);        assertEquals(false, DateUtils.isSameInstant(cal1, cal2));                cal2.set(2004, 6, 9, 11, 45, 0);        assertEquals(true, DateUtils.isSameInstant(cal1, cal2));        try {            DateUtils.isSameInstant((Calendar) null, (Calendar) null);            fail();        } catch (IllegalArgumentException ex) {}    }        //-----------------------------------------------------------------------    public void testIsSameLocalTime_Cal() {        GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone("GMT+1"));        GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone("GMT-1"));        cal1.set(2004, 6, 9, 13, 45, 0);        cal1.set(Calendar.MILLISECOND, 0);        cal2.set(2004, 6, 9, 13, 45, 0);        cal2.set(Calendar.MILLISECOND, 0);        assertEquals(true, DateUtils.isSameLocalTime(cal1, cal2));                cal2.set(2004, 6, 9, 11, 45, 0);        assertEquals(false, DateUtils.isSameLocalTime(cal1, cal2));        try {            DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);            fail();        } catch (IllegalArgumentException ex) {}    }        //-----------------------------------------------------------------------    public void testParseDate() throws Exception {        GregorianCalendar cal = new GregorianCalendar(1972, 11, 3);        String dateStr = "1972-12-03";        String[] parsers = new String[] {"yyyy'-'DDD", "yyyy'-'MM'-'dd", "yyyyMMdd"};        Date date = DateUtils.parseDate(dateStr, parsers);        assertEquals(cal.getTime(), date);                dateStr = "1972-338";        date = DateUtils.parseDate(dateStr, parsers);        assertEquals(cal.getTime(), date);                dateStr = "19721203";        date = DateUtils.parseDate(dateStr, parsers);        assertEquals(cal.getTime(), date);                try {            DateUtils.parseDate("PURPLE", parsers);            fail();        } catch (ParseException ex) {}        try {            DateUtils.parseDate("197212AB", parsers);            fail();        } catch (ParseException ex) {}        try {            DateUtils.parseDate(null, parsers);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.parseDate(dateStr, null);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.parseDate(dateStr, new String[0]);            fail();        } catch (ParseException ex) {}    }    //-----------------------------------------------------------------------    public void testAddYears() throws Exception {        Date base = new Date(MILLIS_TEST);        Date result = DateUtils.addYears(base, 0);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);                result = DateUtils.addYears(base, 1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2001, 6, 5, 4, 3, 2, 1);                result = DateUtils.addYears(base, -1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 1999, 6, 5, 4, 3, 2, 1);    }    //-----------------------------------------------------------------------    public void testAddMonths() throws Exception {        Date base = new Date(MILLIS_TEST);        Date result = DateUtils.addMonths(base, 0);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);                result = DateUtils.addMonths(base, 1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 7, 5, 4, 3, 2, 1);                result = DateUtils.addMonths(base, -1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 5, 5, 4, 3, 2, 1);    }    //-----------------------------------------------------------------------    public void testAddWeeks() throws Exception {        Date base = new Date(MILLIS_TEST);        Date result = DateUtils.addWeeks(base, 0);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);                result = DateUtils.addWeeks(base, 1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 12, 4, 3, 2, 1);                result = DateUtils.addWeeks(base, -1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);      // july        assertDate(result, 2000, 5, 28, 4, 3, 2, 1);   // june    }    //-----------------------------------------------------------------------    public void testAddDays() throws Exception {        Date base = new Date(MILLIS_TEST);        Date result = DateUtils.addDays(base, 0);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);                result = DateUtils.addDays(base, 1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 6, 4, 3, 2, 1);                result = DateUtils.addDays(base, -1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 4, 4, 3, 2, 1);    }    //-----------------------------------------------------------------------    public void testAddHours() throws Exception {        Date base = new Date(MILLIS_TEST);        Date result = DateUtils.addHours(base, 0);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);                result = DateUtils.addHours(base, 1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 5, 3, 2, 1);                result = DateUtils.addHours(base, -1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 3, 3, 2, 1);    }    //-----------------------------------------------------------------------    public void testAddMinutes() throws Exception {        Date base = new Date(MILLIS_TEST);        Date result = DateUtils.addMinutes(base, 0);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);                result = DateUtils.addMinutes(base, 1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 4, 2, 1);                result = DateUtils.addMinutes(base, -1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 2, 2, 1);    }    //-----------------------------------------------------------------------    public void testAddSeconds() throws Exception {        Date base = new Date(MILLIS_TEST);        Date result = DateUtils.addSeconds(base, 0);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);                result = DateUtils.addSeconds(base, 1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 3, 1);                result = DateUtils.addSeconds(base, -1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 1, 1);    }    //-----------------------------------------------------------------------    public void testAddMilliseconds() throws Exception {        Date base = new Date(MILLIS_TEST);        Date result = DateUtils.addMilliseconds(base, 0);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);                result = DateUtils.addMilliseconds(base, 1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 2, 2);                result = DateUtils.addMilliseconds(base, -1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 2, 0);    }    // -----------------------------------------------------------------------    public void testSetYears() throws Exception {        Date base = new Date(MILLIS_TEST);        Date result = DateUtils.setYears(base, 2000);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);        result = DateUtils.setYears(base, 2008);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2008, 6, 5, 4, 3, 2, 1);        result = DateUtils.setYears(base, 2005);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2005, 6, 5, 4, 3, 2, 1);    }    // -----------------------------------------------------------------------    public void testSetMonths() throws Exception {        Date base = new Date(MILLIS_TEST);        Date result = DateUtils.setMonths(base, 5);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 5, 5, 4, 3, 2, 1);        result = DateUtils.setMonths(base, 1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 1, 5, 4, 3, 2, 1);        try {            result = DateUtils.setMonths(base, 12);            fail("DateUtils.setMonths did not throw an expected IllegalArguementException.");        } catch (IllegalArgumentException e) {        }    }    // -----------------------------------------------------------------------    public void testSetDays() throws Exception {        Date base = new Date(MILLIS_TEST);        Date result = DateUtils.setDays(base, 1);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 1, 4, 3, 2, 1);        result = DateUtils.setDays(base, 29);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 29, 4, 3, 2, 1);        try {            result = DateUtils.setDays(base, 32);            fail("DateUtils.setDays did not throw an expected IllegalArguementException.");        } catch (IllegalArgumentException e) {        }    }    // -----------------------------------------------------------------------    public void testSetHours() throws Exception {        Date base = new Date(MILLIS_TEST);        Date result = DateUtils.setHours(base, 0);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 0, 3, 2, 1);        result = DateUtils.setHours(base, 23);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 23, 3, 2, 1);        try {            result = DateUtils.setHours(base, 24);            fail("DateUtils.setHours did not throw an expected IllegalArguementException.");        } catch (IllegalArgumentException e) {        }    }    // -----------------------------------------------------------------------    public void testSetMinutes() throws Exception {        Date base = new Date(MILLIS_TEST);        Date result = DateUtils.setMinutes(base, 0);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 0, 2, 1);        result = DateUtils.setMinutes(base, 59);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 59, 2, 1);        try {            result = DateUtils.setMinutes(base, 60);            fail("DateUtils.setMinutes did not throw an expected IllegalArguementException.");        } catch (IllegalArgumentException e) {        }    }    // -----------------------------------------------------------------------    public void testSetSeconds() throws Exception {        Date base = new Date(MILLIS_TEST);        Date result = DateUtils.setSeconds(base, 0);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 0, 1);        result = DateUtils.setSeconds(base, 59);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 59, 1);        try {            result = DateUtils.setSeconds(base, 60);            fail("DateUtils.setSeconds did not throw an expected IllegalArguementException.");        } catch (IllegalArgumentException e) {        }    }    // -----------------------------------------------------------------------    public void testSetMilliseconds() throws Exception {        Date base = new Date(MILLIS_TEST);        Date result = DateUtils.setMilliseconds(base, 0);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 2, 0);        result = DateUtils.setMilliseconds(base, 999);        assertNotSame(base, result);        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);        assertDate(result, 2000, 6, 5, 4, 3, 2, 999);        try {            result = DateUtils.setMilliseconds(base, 1000);            fail("DateUtils.setMilliseconds did not throw an expected IllegalArguementException.");        } catch (IllegalArgumentException e) {        }    }    //-----------------------------------------------------------------------    private void assertDate(Date date, int year, int month, int day, int hour, int min, int sec, int mil) throws Exception {        GregorianCalendar cal = new GregorianCalendar();        cal.setTime(date);        assertEquals(year, cal.get(Calendar.YEAR));        assertEquals(month, cal.get(Calendar.MONTH));        assertEquals(day, cal.get(Calendar.DAY_OF_MONTH));        assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY));        assertEquals(min, cal.get(Calendar.MINUTE));        assertEquals(sec, cal.get(Calendar.SECOND));        assertEquals(mil, cal.get(Calendar.MILLISECOND));    }    //-----------------------------------------------------------------------    /**     * Tests various values with the round method     */    public void testRound() throws Exception {        // tests for public static Date round(Date date, int field)        assertEquals("round year-1 failed",                dateParser.parse("January 1, 2002"),                DateUtils.round(date1, Calendar.YEAR));        assertEquals("round year-2 failed",                dateParser.parse("January 1, 2002"),                DateUtils.round(date2, Calendar.YEAR));        assertEquals("round month-1 failed",                dateParser.parse("February 1, 2002"),                DateUtils.round(date1, Calendar.MONTH));        assertEquals("round month-2 failed",                dateParser.parse("December 1, 2001"),                DateUtils.round(date2, Calendar.MONTH));        assertEquals("round semimonth-0 failed",                dateParser.parse("February 1, 2002"),                DateUtils.round(date0, DateUtils.SEMI_MONTH));        assertEquals("round semimonth-1 failed",                dateParser.parse("February 16, 2002"),                DateUtils.round(date1, DateUtils.SEMI_MONTH));        assertEquals("round semimonth-2 failed",                dateParser.parse("November 16, 2001"),                DateUtils.round(date2, DateUtils.SEMI_MONTH));                        assertEquals("round date-1 failed",                dateParser.parse("February 13, 2002"),                DateUtils.round(date1, Calendar.DATE));        assertEquals("round date-2 failed",                dateParser.parse("November 18, 2001"),                DateUtils.round(date2, Calendar.DATE));        assertEquals("round hour-1 failed",                dateTimeParser.parse("February 12, 2002 13:00:00.000"),                DateUtils.round(date1, Calendar.HOUR));        assertEquals("round hour-2 failed",                dateTimeParser.parse("November 18, 2001 1:00:00.000"),                DateUtils.round(date2, Calendar.HOUR));        assertEquals("round minute-1 failed",                dateTimeParser.parse("February 12, 2002 12:35:00.000"),                DateUtils.round(date1, Calendar.MINUTE));        assertEquals("round minute-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:00.000"),                DateUtils.round(date2, Calendar.MINUTE));        assertEquals("round second-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:57.000"),                DateUtils.round(date1, Calendar.SECOND));        assertEquals("round second-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:11.000"),                DateUtils.round(date2, Calendar.SECOND));        assertEquals("round ampm-1 failed",                dateTimeParser.parse("February 3, 2002 00:00:00.000"),                DateUtils.round(dateAmPm1, Calendar.AM_PM));        assertEquals("round ampm-2 failed",                dateTimeParser.parse("February 3, 2002 12:00:00.000"),                DateUtils.round(dateAmPm2, Calendar.AM_PM));        assertEquals("round ampm-3 failed",                dateTimeParser.parse("February 3, 2002 12:00:00.000"),                DateUtils.round(dateAmPm3, Calendar.AM_PM));        assertEquals("round ampm-4 failed",                dateTimeParser.parse("February 4, 2002 00:00:00.000"),                DateUtils.round(dateAmPm4, Calendar.AM_PM));        // tests for public static Date round(Object date, int field)        assertEquals("round year-1 failed",                dateParser.parse("January 1, 2002"),                DateUtils.round((Object) date1, Calendar.YEAR));        assertEquals("round year-2 failed",                dateParser.parse("January 1, 2002"),                DateUtils.round((Object) date2, Calendar.YEAR));        assertEquals("round month-1 failed",                dateParser.parse("February 1, 2002"),                DateUtils.round((Object) date1, Calendar.MONTH));        assertEquals("round month-2 failed",                dateParser.parse("December 1, 2001"),                DateUtils.round((Object) date2, Calendar.MONTH));        assertEquals("round semimonth-1 failed",                dateParser.parse("February 16, 2002"),                DateUtils.round((Object) date1, DateUtils.SEMI_MONTH));        assertEquals("round semimonth-2 failed",                dateParser.parse("November 16, 2001"),                DateUtils.round((Object) date2, DateUtils.SEMI_MONTH));        assertEquals("round date-1 failed",                dateParser.parse("February 13, 2002"),                DateUtils.round((Object) date1, Calendar.DATE));        assertEquals("round date-2 failed",                dateParser.parse("November 18, 2001"),                DateUtils.round((Object) date2, Calendar.DATE));        assertEquals("round hour-1 failed",                dateTimeParser.parse("February 12, 2002 13:00:00.000"),                DateUtils.round((Object) date1, Calendar.HOUR));        assertEquals("round hour-2 failed",                dateTimeParser.parse("November 18, 2001 1:00:00.000"),                DateUtils.round((Object) date2, Calendar.HOUR));        assertEquals("round minute-1 failed",                dateTimeParser.parse("February 12, 2002 12:35:00.000"),                DateUtils.round((Object) date1, Calendar.MINUTE));        assertEquals("round minute-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:00.000"),                DateUtils.round((Object) date2, Calendar.MINUTE));        assertEquals("round second-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:57.000"),                DateUtils.round((Object) date1, Calendar.SECOND));        assertEquals("round second-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:11.000"),                DateUtils.round((Object) date2, Calendar.SECOND));        assertEquals("round calendar second-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:57.000"),                DateUtils.round((Object) cal1, Calendar.SECOND));        assertEquals("round calendar second-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:11.000"),                DateUtils.round((Object) cal2, Calendar.SECOND));        assertEquals("round ampm-1 failed",                dateTimeParser.parse("February 3, 2002 00:00:00.000"),                DateUtils.round((Object) dateAmPm1, Calendar.AM_PM));        assertEquals("round ampm-2 failed",                dateTimeParser.parse("February 3, 2002 12:00:00.000"),                DateUtils.round((Object) dateAmPm2, Calendar.AM_PM));        assertEquals("round ampm-3 failed",                dateTimeParser.parse("February 3, 2002 12:00:00.000"),                DateUtils.round((Object) dateAmPm3, Calendar.AM_PM));        assertEquals("round ampm-4 failed",                dateTimeParser.parse("February 4, 2002 00:00:00.000"),                DateUtils.round((Object) dateAmPm4, Calendar.AM_PM));        try {            DateUtils.round((Date) null, Calendar.SECOND);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.round((Calendar) null, Calendar.SECOND);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.round((Object) null, Calendar.SECOND);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.round("", Calendar.SECOND);            fail();        } catch (ClassCastException ex) {}        try {            DateUtils.round(date1, -9999);            fail();        } catch(IllegalArgumentException ex) {}        assertEquals("round ampm-1 failed",                dateTimeParser.parse("February 3, 2002 00:00:00.000"),                DateUtils.round((Object) calAmPm1, Calendar.AM_PM));        assertEquals("round ampm-2 failed",                dateTimeParser.parse("February 3, 2002 12:00:00.000"),                DateUtils.round((Object) calAmPm2, Calendar.AM_PM));        assertEquals("round ampm-3 failed",                dateTimeParser.parse("February 3, 2002 12:00:00.000"),                DateUtils.round((Object) calAmPm3, Calendar.AM_PM));        assertEquals("round ampm-4 failed",                dateTimeParser.parse("February 4, 2002 00:00:00.000"),                DateUtils.round((Object) calAmPm4, Calendar.AM_PM));                // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560        // Test rounding across the beginning of daylight saving time        TimeZone.setDefault(zone);        dateTimeParser.setTimeZone(zone);        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round(date4, Calendar.DATE));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round((Object) cal4, Calendar.DATE));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round(date5, Calendar.DATE));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round((Object) cal5, Calendar.DATE));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round(date6, Calendar.DATE));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round((Object) cal6, Calendar.DATE));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round(date7, Calendar.DATE));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.round((Object) cal7, Calendar.DATE));                assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 01:00:00.000"),                DateUtils.round(date4, Calendar.HOUR_OF_DAY));        assertEquals("round MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 01:00:00.000"),                DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY));        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {            assertEquals("round MET date across DST change-over",                    dateTimeParser.parse("March 30, 2003 03:00:00.000"),                    DateUtils.round(date5, Calendar.HOUR_OF_DAY));            assertEquals("round MET date across DST change-over",                    dateTimeParser.parse("March 30, 2003 03:00:00.000"),                    DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY));            assertEquals("round MET date across DST change-over",                    dateTimeParser.parse("March 30, 2003 03:00:00.000"),                    DateUtils.round(date6, Calendar.HOUR_OF_DAY));            assertEquals("round MET date across DST change-over",                    dateTimeParser.parse("March 30, 2003 03:00:00.000"),                    DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY));            assertEquals("round MET date across DST change-over",                    dateTimeParser.parse("March 30, 2003 04:00:00.000"),                    DateUtils.round(date7, Calendar.HOUR_OF_DAY));            assertEquals("round MET date across DST change-over",                    dateTimeParser.parse("March 30, 2003 04:00:00.000"),                    DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY));        } else {            this.warn("WARNING: Some date rounding tests not run since the current version is " + SystemUtils.JAVA_VERSION);        }        TimeZone.setDefault(defaultZone);        dateTimeParser.setTimeZone(defaultZone);    }    /**     * Tests the Changes Made by LANG-346 to the DateUtils.modify() private method invoked     * by DateUtils.round().     */    public void testRoundLang346() throws Exception    {        TimeZone.setDefault(defaultZone);        dateTimeParser.setTimeZone(defaultZone);        Calendar testCalendar = Calendar.getInstance();        testCalendar.set(2007, 6, 2, 8, 8, 50);        Date date = testCalendar.getTime();        assertEquals("Minute Round Up Failed",                     dateTimeParser.parse("July 2, 2007 08:09:00.000"),                     DateUtils.round(date, Calendar.MINUTE));        testCalendar.set(2007, 6, 2, 8, 8, 20);        date = testCalendar.getTime();        assertEquals("Minute No Round Failed",                     dateTimeParser.parse("July 2, 2007 08:08:00.000"),                     DateUtils.round(date, Calendar.MINUTE));        testCalendar.set(2007, 6, 2, 8, 8, 50);        testCalendar.set(Calendar.MILLISECOND, 600);        date = testCalendar.getTime();        assertEquals("Second Round Up with 600 Milli Seconds Failed",                     dateTimeParser.parse("July 2, 2007 08:08:51.000"),                     DateUtils.round(date, Calendar.SECOND));        testCalendar.set(2007, 6, 2, 8, 8, 50);        testCalendar.set(Calendar.MILLISECOND, 200);        date = testCalendar.getTime();        assertEquals("Second Round Down with 200 Milli Seconds Failed",                     dateTimeParser.parse("July 2, 2007 08:08:50.000"),                     DateUtils.round(date, Calendar.SECOND));        testCalendar.set(2007, 6, 2, 8, 8, 20);        testCalendar.set(Calendar.MILLISECOND, 600);        date = testCalendar.getTime();        assertEquals("Second Round Up with 200 Milli Seconds Failed",                     dateTimeParser.parse("July 2, 2007 08:08:21.000"),                     DateUtils.round(date, Calendar.SECOND));        testCalendar.set(2007, 6, 2, 8, 8, 20);        testCalendar.set(Calendar.MILLISECOND, 200);        date = testCalendar.getTime();        assertEquals("Second Round Down with 200 Milli Seconds Failed",                     dateTimeParser.parse("July 2, 2007 08:08:20.000"),                     DateUtils.round(date, Calendar.SECOND));        testCalendar.set(2007, 6, 2, 8, 8, 50);        date = testCalendar.getTime();        assertEquals("Hour Round Down Failed",                     dateTimeParser.parse("July 2, 2007 08:00:00.000"),                     DateUtils.round(date, Calendar.HOUR));        testCalendar.set(2007, 6, 2, 8, 31, 50);        date = testCalendar.getTime();        assertEquals("Hour Round Up Failed",                     dateTimeParser.parse("July 2, 2007 09:00:00.000"),                     DateUtils.round(date, Calendar.HOUR));    }    /**     * Tests various values with the trunc method     */    public void testTruncate() throws Exception {        // tests public static Date truncate(Date date, int field)        assertEquals("truncate year-1 failed",                dateParser.parse("January 1, 2002"),                DateUtils.truncate(date1, Calendar.YEAR));        assertEquals("truncate year-2 failed",                dateParser.parse("January 1, 2001"),                DateUtils.truncate(date2, Calendar.YEAR));        assertEquals("truncate month-1 failed",                dateParser.parse("February 1, 2002"),                DateUtils.truncate(date1, Calendar.MONTH));        assertEquals("truncate month-2 failed",                dateParser.parse("November 1, 2001"),                DateUtils.truncate(date2, Calendar.MONTH));        assertEquals("truncate semimonth-1 failed",                dateParser.parse("February 1, 2002"),                DateUtils.truncate(date1, DateUtils.SEMI_MONTH));        assertEquals("truncate semimonth-2 failed",                dateParser.parse("November 16, 2001"),                DateUtils.truncate(date2, DateUtils.SEMI_MONTH));        assertEquals("truncate date-1 failed",                dateParser.parse("February 12, 2002"),                DateUtils.truncate(date1, Calendar.DATE));        assertEquals("truncate date-2 failed",                dateParser.parse("November 18, 2001"),                DateUtils.truncate(date2, Calendar.DATE));        assertEquals("truncate hour-1 failed",                dateTimeParser.parse("February 12, 2002 12:00:00.000"),                DateUtils.truncate(date1, Calendar.HOUR));        assertEquals("truncate hour-2 failed",                dateTimeParser.parse("November 18, 2001 1:00:00.000"),                DateUtils.truncate(date2, Calendar.HOUR));        assertEquals("truncate minute-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:00.000"),                DateUtils.truncate(date1, Calendar.MINUTE));        assertEquals("truncate minute-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:00.000"),                DateUtils.truncate(date2, Calendar.MINUTE));        assertEquals("truncate second-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:56.000"),                DateUtils.truncate(date1, Calendar.SECOND));        assertEquals("truncate second-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:11.000"),                DateUtils.truncate(date2, Calendar.SECOND));        assertEquals("truncate ampm-1 failed",                dateTimeParser.parse("February 3, 2002 00:00:00.000"),                DateUtils.truncate(dateAmPm1, Calendar.AM_PM));        assertEquals("truncate ampm-2 failed",                dateTimeParser.parse("February 3, 2002 00:00:00.000"),                DateUtils.truncate(dateAmPm2, Calendar.AM_PM));        assertEquals("truncate ampm-3 failed",                dateTimeParser.parse("February 3, 2002 12:00:00.000"),                DateUtils.truncate(dateAmPm3, Calendar.AM_PM));        assertEquals("truncate ampm-4 failed",                dateTimeParser.parse("February 3, 2002 12:00:00.000"),                DateUtils.truncate(dateAmPm4, Calendar.AM_PM));        // tests public static Date truncate(Object date, int field)        assertEquals("truncate year-1 failed",                dateParser.parse("January 1, 2002"),                DateUtils.truncate((Object) date1, Calendar.YEAR));        assertEquals("truncate year-2 failed",                dateParser.parse("January 1, 2001"),                DateUtils.truncate((Object) date2, Calendar.YEAR));        assertEquals("truncate month-1 failed",                dateParser.parse("February 1, 2002"),                DateUtils.truncate((Object) date1, Calendar.MONTH));        assertEquals("truncate month-2 failed",                dateParser.parse("November 1, 2001"),                DateUtils.truncate((Object) date2, Calendar.MONTH));        assertEquals("truncate semimonth-1 failed",                dateParser.parse("February 1, 2002"),                DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH));        assertEquals("truncate semimonth-2 failed",                dateParser.parse("November 16, 2001"),                DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH));        assertEquals("truncate date-1 failed",                dateParser.parse("February 12, 2002"),                DateUtils.truncate((Object) date1, Calendar.DATE));        assertEquals("truncate date-2 failed",                dateParser.parse("November 18, 2001"),                DateUtils.truncate((Object) date2, Calendar.DATE));        assertEquals("truncate hour-1 failed",                dateTimeParser.parse("February 12, 2002 12:00:00.000"),                DateUtils.truncate((Object) date1, Calendar.HOUR));        assertEquals("truncate hour-2 failed",                dateTimeParser.parse("November 18, 2001 1:00:00.000"),                DateUtils.truncate((Object) date2, Calendar.HOUR));        assertEquals("truncate minute-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:00.000"),                DateUtils.truncate((Object) date1, Calendar.MINUTE));        assertEquals("truncate minute-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:00.000"),                DateUtils.truncate((Object) date2, Calendar.MINUTE));        assertEquals("truncate second-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:56.000"),                DateUtils.truncate((Object) date1, Calendar.SECOND));        assertEquals("truncate second-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:11.000"),                DateUtils.truncate((Object) date2, Calendar.SECOND));        assertEquals("truncate ampm-1 failed",                dateTimeParser.parse("February 3, 2002 00:00:00.000"),                DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM));        assertEquals("truncate ampm-2 failed",                dateTimeParser.parse("February 3, 2002 00:00:00.000"),                DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM));        assertEquals("truncate ampm-3 failed",                dateTimeParser.parse("February 3, 2002 12:00:00.000"),                DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM));        assertEquals("truncate ampm-4 failed",                dateTimeParser.parse("February 3, 2002 12:00:00.000"),                DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM));                assertEquals("truncate calendar second-1 failed",                dateTimeParser.parse("February 12, 2002 12:34:56.000"),                DateUtils.truncate((Object) cal1, Calendar.SECOND));        assertEquals("truncate calendar second-2 failed",                dateTimeParser.parse("November 18, 2001 1:23:11.000"),                DateUtils.truncate((Object) cal2, Calendar.SECOND));                assertEquals("truncate ampm-1 failed",                dateTimeParser.parse("February 3, 2002 00:00:00.000"),                DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM));        assertEquals("truncate ampm-2 failed",                dateTimeParser.parse("February 3, 2002 00:00:00.000"),                DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM));        assertEquals("truncate ampm-3 failed",                dateTimeParser.parse("February 3, 2002 12:00:00.000"),                DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM));        assertEquals("truncate ampm-4 failed",                dateTimeParser.parse("February 3, 2002 12:00:00.000"),                DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM));                try {            DateUtils.truncate((Date) null, Calendar.SECOND);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.truncate((Calendar) null, Calendar.SECOND);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.truncate((Object) null, Calendar.SECOND);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.truncate("", Calendar.SECOND);            fail();        } catch (ClassCastException ex) {}        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560        // Test truncate across beginning of daylight saving time        TimeZone.setDefault(zone);        dateTimeParser.setTimeZone(zone);        assertEquals("truncate MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.truncate(date3, Calendar.DATE));        assertEquals("truncate MET date across DST change-over",                dateTimeParser.parse("March 30, 2003 00:00:00.000"),                DateUtils.truncate((Object) cal3, Calendar.DATE));        // Test truncate across end of daylight saving time        assertEquals("truncate MET date across DST change-over",                dateTimeParser.parse("October 26, 2003 00:00:00.000"),                DateUtils.truncate(date8, Calendar.DATE));        assertEquals("truncate MET date across DST change-over",                dateTimeParser.parse("October 26, 2003 00:00:00.000"),                DateUtils.truncate((Object) cal8, Calendar.DATE));        TimeZone.setDefault(defaultZone);        dateTimeParser.setTimeZone(defaultZone);                // Bug 31395, large dates        Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis        GregorianCalendar endCal = new GregorianCalendar();        endCal.setTime(endOfTime);        try {            DateUtils.truncate(endCal, Calendar.DATE);            fail();        } catch (ArithmeticException ex) {}        endCal.set(Calendar.YEAR, 280000001);        try {            DateUtils.truncate(endCal, Calendar.DATE);            fail();        } catch (ArithmeticException ex) {}        endCal.set(Calendar.YEAR, 280000000);        Calendar cal = DateUtils.truncate(endCal, Calendar.DATE);        assertEquals(0, cal.get(Calendar.HOUR));    }    /**     * Tests for LANG-59     *     * see http://issues.apache.org/jira/browse/LANG-59     */    public void testTruncateLang59() throws Exception {        if (!SystemUtils.isJavaVersionAtLeast(1.4f)) {            this.warn("WARNING: Test for LANG-59 not run since the current version is " + SystemUtils.JAVA_VERSION);            return;        }        // Set TimeZone to Mountain Time        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");        TimeZone.setDefault(MST_MDT);        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");        format.setTimeZone(MST_MDT);        Date oct31_01MDT = new Date(1099206000000L);         Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds        assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));        assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));        assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));        assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));        assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));        // ------- Demonstrate Problem -------        Calendar gval = Calendar.getInstance();        gval.setTime(new Date(oct31_01MDT.getTime()));        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value        assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);        // ---------- Test Truncate ----------        assertEquals("Truncate Calendar.MILLISECOND",                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));        assertEquals("Truncate Calendar.SECOND",                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));        assertEquals("Truncate Calendar.MINUTE",                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));        assertEquals("Truncate Calendar.HOUR_OF_DAY",                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));        assertEquals("Truncate Calendar.HOUR",                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));        assertEquals("Truncate Calendar.DATE",                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));        // ---------- Test Round (down) ----------        assertEquals("Round Calendar.MILLISECOND",                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));        assertEquals("Round Calendar.SECOND",                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));        assertEquals("Round Calendar.MINUTE",                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));        assertEquals("Round Calendar.HOUR_OF_DAY",                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));        assertEquals("Round Calendar.HOUR",                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));        assertEquals("Round Calendar.DATE",                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));        // restore default time zone        TimeZone.setDefault(defaultZone);    }    /**     * Tests the iterator exceptions     */    public void testIteratorEx() throws Exception {        try {            DateUtils.iterator(Calendar.getInstance(), -9999);        } catch (IllegalArgumentException ex) {}        try {            DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER);            fail();        } catch (IllegalArgumentException ex) {}        try {            DateUtils.iterator("", DateUtils.RANGE_WEEK_CENTER);            fail();        } catch (ClassCastException ex) {}    }    /**     * Tests the calendar iterator for week ranges     */    public void testWeekIterator() throws Exception {        Calendar now = Calendar.getInstance();        for (int i = 0; i< 7; i++) {            Calendar today = DateUtils.truncate(now, Calendar.DATE);            Calendar sunday = DateUtils.truncate(now, Calendar.DATE);            sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));            Calendar monday = DateUtils.truncate(now, Calendar.DATE);            if (monday.get(Calendar.DAY_OF_WEEK) == 1) {                //This is sunday... roll back 6 days                monday.add(Calendar.DATE, -6);            } else {                monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));            }            Calendar centered = DateUtils.truncate(now, Calendar.DATE);            centered.add(Calendar.DATE, -3);                        Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY);            assertWeekIterator(it, sunday);            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY);            assertWeekIterator(it, monday);            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE);            assertWeekIterator(it, today);            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);            assertWeekIterator(it, centered);                        it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER);            assertWeekIterator(it, centered);            it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER);            assertWeekIterator(it, centered);            try {                it.next();                fail();            } catch (NoSuchElementException ex) {}            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);            it.next();            try {                it.remove();            } catch( UnsupportedOperationException ex) {}                        now.add(Calendar.DATE,1);        }    }                /**     * Tests the calendar iterator for month-based ranges     */    public void testMonthIterator() throws Exception {        Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY);        assertWeekIterator(it,                dateParser.parse("January 27, 2002"),                dateParser.parse("March 2, 2002"));        it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY);        assertWeekIterator(it,                dateParser.parse("January 28, 2002"),                dateParser.parse("March 3, 2002"));        it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY);        assertWeekIterator(it,                dateParser.parse("October 28, 2001"),                dateParser.parse("December 1, 2001"));        it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY);        assertWeekIterator(it,                dateParser.parse("October 29, 2001"),                dateParser.parse("December 2, 2001"));    }    /**     * This checks that this is a 7 element iterator of Calendar objects     * that are dates (no time), and exactly 1 day spaced after each other.     */    private static void assertWeekIterator(Iterator<?> it, Calendar start) {        Calendar end = (Calendar) start.clone();        end.add(Calendar.DATE, 6);        assertWeekIterator(it, start, end);    }    /**     * Convenience method for when working with Date objects     */    private static void assertWeekIterator(Iterator<?> it, Date start, Date end) {        Calendar calStart = Calendar.getInstance();        calStart.setTime(start);        Calendar calEnd = Calendar.getInstance();        calEnd.setTime(end);        assertWeekIterator(it, calStart, calEnd);    }    /**     * This checks that this is a 7 divisble iterator of Calendar objects     * that are dates (no time), and exactly 1 day spaced after each other     * (in addition to the proper start and stop dates)     */    private static void assertWeekIterator(Iterator<?> it, Calendar start, Calendar end) {        Calendar cal = (Calendar) it.next();        assertEquals("", start, cal, 0);        Calendar last = null;        int count = 1;        while (it.hasNext()) {            //Check this is just a date (no time component)            assertEquals("", cal, DateUtils.truncate(cal, Calendar.DATE), 0);            last = cal;            cal = (Calendar) it.next();            count++;            //Check that this is one day more than the last date            last.add(Calendar.DATE, 1);            assertEquals("", last, cal, 0);        }        if (count % 7 != 0) {            throw new AssertionFailedError("There were " + count + " days in this iterator");        }        assertEquals("", end, cal, 0);    }    /**     * Used to check that Calendar objects are close enough     * delta is in milliseconds     */    private static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {        if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {            throw new AssertionFailedError(                    message + " expected " + cal1.getTime() + " but got " + cal2.getTime());        }    }    void warn(String msg) {        System.err.println(msg);    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.time;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.GregorianCalendar;import java.util.Locale;import java.util.TimeZone;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;import org.apache.commons.lang.SerializationUtils;/** * Unit tests {@link org.apache.commons.lang.time.FastDateFormat}. * * @author Sean Schofield * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> * @author Fredrik Westermarck * @since 2.0 * @version $Id$ */public class FastDateFormatTest extends TestCase {    public FastDateFormatTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(FastDateFormatTest.class);        suite.setName("FastDateFormat Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    public void test_getInstance() {        FastDateFormat format1 = FastDateFormat.getInstance();        FastDateFormat format2 = FastDateFormat.getInstance();        assertSame(format1, format2);        assertEquals(new SimpleDateFormat().toPattern(), format1.getPattern());    }    public void test_getInstance_String() {        FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy");        FastDateFormat format2 = FastDateFormat.getInstance("MM-DD-yyyy");        FastDateFormat format3 = FastDateFormat.getInstance("MM-DD-yyyy");        assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);        assertSame(format2, format3);        assertEquals("MM/DD/yyyy", format1.getPattern());        assertEquals(TimeZone.getDefault(), format1.getTimeZone());        assertEquals(TimeZone.getDefault(), format2.getTimeZone());        assertEquals(false, format1.getTimeZoneOverridesCalendar());        assertEquals(false, format2.getTimeZoneOverridesCalendar());    }    public void test_getInstance_String_TimeZone() {        Locale realDefaultLocale = Locale.getDefault();        TimeZone realDefaultZone = TimeZone.getDefault();        try {            Locale.setDefault(Locale.US);            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));            FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy",                    TimeZone.getTimeZone("Atlantic/Reykjavik"));            FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy");            FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault());            FastDateFormat format4 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault());            FastDateFormat format5 = FastDateFormat.getInstance("MM-DD-yyyy", TimeZone.getDefault());            FastDateFormat format6 = FastDateFormat.getInstance("MM-DD-yyyy");            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);            assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone());            assertEquals(true, format1.getTimeZoneOverridesCalendar());            assertEquals(TimeZone.getDefault(), format2.getTimeZone());            assertEquals(false, format2.getTimeZoneOverridesCalendar());            assertSame(format3, format4);            assertTrue(format3 != format5); // -- junit 3.8 version -- assertFalse(format3 == format5);            assertTrue(format4 != format6); // -- junit 3.8 version -- assertFalse(format3 == format5);        } finally {            Locale.setDefault(realDefaultLocale);            TimeZone.setDefault(realDefaultZone);        }    }    public void test_getInstance_String_Locale() {        Locale realDefaultLocale = Locale.getDefault();        try {            Locale.setDefault(Locale.US);            FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY);            FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy");            FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY);            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);            assertSame(format1, format3);            assertSame(Locale.GERMANY, format1.getLocale());        } finally {            Locale.setDefault(realDefaultLocale);        }    }    public void test_changeDefault_Locale_DateInstance() {        Locale realDefaultLocale = Locale.getDefault();        try {            Locale.setDefault(Locale.US);            FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);            FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);            Locale.setDefault(Locale.GERMANY);            FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);            assertSame(Locale.GERMANY, format1.getLocale());            assertSame(Locale.US, format2.getLocale());            assertSame(Locale.GERMANY, format3.getLocale());            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);            assertTrue(format2 != format3);        } finally {            Locale.setDefault(realDefaultLocale);        }    }    public void test_changeDefault_Locale_DateTimeInstance() {        Locale realDefaultLocale = Locale.getDefault();        try {            Locale.setDefault(Locale.US);            FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);            FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);            Locale.setDefault(Locale.GERMANY);            FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);            assertSame(Locale.GERMANY, format1.getLocale());            assertSame(Locale.US, format2.getLocale());            assertSame(Locale.GERMANY, format3.getLocale());            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);            assertTrue(format2 != format3);        } finally {            Locale.setDefault(realDefaultLocale);        }    }    public void test_getInstance_String_TimeZone_Locale() {        Locale realDefaultLocale = Locale.getDefault();        TimeZone realDefaultZone = TimeZone.getDefault();        try {            Locale.setDefault(Locale.US);            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));            FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy",                    TimeZone.getTimeZone("Atlantic/Reykjavik"), Locale.GERMANY);            FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY);            FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy",                    TimeZone.getDefault(), Locale.GERMANY);            assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2);            assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone());            assertEquals(TimeZone.getDefault(), format2.getTimeZone());            assertEquals(TimeZone.getDefault(), format3.getTimeZone());            assertEquals(true, format1.getTimeZoneOverridesCalendar());            assertEquals(false, format2.getTimeZoneOverridesCalendar());            assertEquals(true, format3.getTimeZoneOverridesCalendar());            assertEquals(Locale.GERMANY, format1.getLocale());            assertEquals(Locale.GERMANY, format2.getLocale());            assertEquals(Locale.GERMANY, format3.getLocale());        } finally {            Locale.setDefault(realDefaultLocale);            TimeZone.setDefault(realDefaultZone);        }    }    public void testFormat() {        Locale realDefaultLocale = Locale.getDefault();        TimeZone realDefaultZone = TimeZone.getDefault();        try {            Locale.setDefault(Locale.US);            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));            FastDateFormat fdf = null;            SimpleDateFormat sdf = null;            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);            Date date1 = cal1.getTime();            Date date2 = cal2.getTime();            long millis1 = date1.getTime();            long millis2 = date2.getTime();            fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");            sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");            assertEquals(sdf.format(date1), fdf.format(date1));            assertEquals("2003-01-10T15:33:20", fdf.format(date1));            assertEquals("2003-01-10T15:33:20", fdf.format(cal1));            assertEquals("2003-01-10T15:33:20", fdf.format(millis1));            assertEquals("2003-07-10T09:00:00", fdf.format(date2));            assertEquals("2003-07-10T09:00:00", fdf.format(cal2));            assertEquals("2003-07-10T09:00:00", fdf.format(millis2));            fdf = FastDateFormat.getInstance("Z");            assertEquals("-0500", fdf.format(date1));            assertEquals("-0500", fdf.format(cal1));            assertEquals("-0500", fdf.format(millis1));            fdf = FastDateFormat.getInstance("Z");            assertEquals("-0400", fdf.format(date2));            assertEquals("-0400", fdf.format(cal2));            assertEquals("-0400", fdf.format(millis2));            fdf = FastDateFormat.getInstance("ZZ");            assertEquals("-05:00", fdf.format(date1));            assertEquals("-05:00", fdf.format(cal1));            assertEquals("-05:00", fdf.format(millis1));            fdf = FastDateFormat.getInstance("ZZ");            assertEquals("-04:00", fdf.format(date2));            assertEquals("-04:00", fdf.format(cal2));            assertEquals("-04:00", fdf.format(millis2));            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";            fdf = FastDateFormat.getInstance(pattern);            sdf = new SimpleDateFormat(pattern);            assertEquals(sdf.format(date1), fdf.format(date1));            assertEquals(sdf.format(date2), fdf.format(date2));        } finally {            Locale.setDefault(realDefaultLocale);            TimeZone.setDefault(realDefaultZone);        }    }    /**     * Test case for {@link FastDateFormat#getDateInstance(int, java.util.Locale)}.     */    public void testShortDateStyleWithLocales() {        Locale usLocale = Locale.US;        Locale swedishLocale = new Locale("sv", "SE");        Calendar cal = Calendar.getInstance();        cal.set(2004, 1, 3);        FastDateFormat fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, usLocale);        assertEquals("2/3/04", fdf.format(cal));        fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, swedishLocale);        assertEquals("2004-02-03", fdf.format(cal));    }    /**     * Tests that pre-1000AD years get padded with yyyy     */    public void testLowYearPadding() {        Calendar cal = Calendar.getInstance();        FastDateFormat format = FastDateFormat.getInstance("yyyy/MM/DD");        cal.set(1,0,1);        assertEquals("0001/01/01", format.format(cal));        cal.set(10,0,1);        assertEquals("0010/01/01", format.format(cal));        cal.set(100,0,1);        assertEquals("0100/01/01", format.format(cal));        cal.set(999,0,1);        assertEquals("0999/01/01", format.format(cal));    }    /**     * Show Bug #39410 is solved     */    public void testMilleniumBug() {        Calendar cal = Calendar.getInstance();        FastDateFormat format = FastDateFormat.getInstance("dd.MM.yyyy");        cal.set(1000,0,1);        assertEquals("01.01.1000", format.format(cal));    }    /**     * testLowYearPadding showed that the date was buggy     * This test confirms it, getting 366 back as a date     */     // TODO: Fix this problem    public void testSimpleDate() {        Calendar cal = Calendar.getInstance();        FastDateFormat format = FastDateFormat.getInstance("yyyy/MM/dd");        cal.set(2004,11,31);        assertEquals("2004/12/31", format.format(cal));        cal.set(999,11,31);        assertEquals("0999/12/31", format.format(cal));        cal.set(1,2,2);        assertEquals("0001/03/02", format.format(cal));    }    public void testLang303() {        Calendar cal = Calendar.getInstance();        cal.set(2004,11,31);        FastDateFormat format = FastDateFormat.getInstance("yyyy/MM/dd");        String output = format.format(cal);        format = (FastDateFormat) SerializationUtils.deserialize( SerializationUtils.serialize( format ) );        assertEquals(output, format.format(cal));    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.time;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.Calendar;import java.util.Locale;import java.util.TimeZone;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * TestCase for DateFormatUtils. * * @author Apache Ant - DateUtilsTest * @author <a href="mailto:sbailliez@apache.org">Stephane Bailliez</a> * @author <a href="mailto:stefan.bodewig@epost.de">Stefan Bodewig</a> * @author Stephen Colebourne * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> */public class DateFormatUtilsTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(DateFormatUtilsTest.class);        suite.setName("DateFormatUtils Tests");        return suite;    }    public DateFormatUtilsTest(String s) {        super(s);    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new DateFormatUtils());        Constructor[] cons = DateFormatUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(DateFormatUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(DateFormatUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testFormat() {        Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC"));        c.set(2005,0,1,12,0,0);        c.setTimeZone(TimeZone.getDefault());        StringBuffer buffer = new StringBuffer ();        int year = c.get(Calendar.YEAR);        int month = c.get(Calendar.MONTH) + 1;        int day = c.get(Calendar.DAY_OF_MONTH);        int hour = c.get(Calendar.HOUR_OF_DAY);        buffer.append (year);        buffer.append(month);        buffer.append(day);        buffer.append(hour);        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH"));                assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH"));                assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US));                assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH", Locale.US));    }        //-----------------------------------------------------------------------    public void testFormatCalendar() {        Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC"));        c.set(2005,0,1,12,0,0);        c.setTimeZone(TimeZone.getDefault());        StringBuffer buffer = new StringBuffer ();        int year = c.get(Calendar.YEAR);        int month = c.get(Calendar.MONTH) + 1;        int day = c.get(Calendar.DAY_OF_MONTH);        int hour = c.get(Calendar.HOUR_OF_DAY);        buffer.append (year);        buffer.append(month);        buffer.append(day);        buffer.append(hour);        assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH"));                assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH"));                assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US));                assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US));    }        public void testFormatUTC() {        Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC"));        c.set(2005,0,1,12,0,0);        assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));                assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));                assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));                assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));    }        public void testDateTimeISO(){        TimeZone timeZone = TimeZone.getTimeZone("GMT-3");        Calendar cal = Calendar.getInstance(timeZone);        cal.set(2002,1,23,9,11,12);        String text = DateFormatUtils.format(cal.getTime(),                         DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23T09:11:12", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                       DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23T09:11:12", text);        text = DateFormatUtils.ISO_DATETIME_FORMAT.format(cal);        assertEquals("2002-02-23T09:11:12", text);                text = DateFormatUtils.format(cal.getTime(),                       DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23T09:11:12-03:00", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                       DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23T09:11:12-03:00", text);        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);        assertEquals("2002-02-23T09:11:12-03:00", text);    }    public void testDateISO(){        TimeZone timeZone = TimeZone.getTimeZone("GMT-3");        Calendar cal = Calendar.getInstance(timeZone);        cal.set(2002,1,23,10,11,12);        String text = DateFormatUtils.format(cal.getTime(),                         DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                         DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23", text);        text = DateFormatUtils.ISO_DATE_FORMAT.format(cal);        assertEquals("2002-02-23", text);                text = DateFormatUtils.format(cal.getTime(),                       DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23-03:00", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                       DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("2002-02-23-03:00", text);        text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal);        assertEquals("2002-02-23-03:00", text);    }    public void testTimeISO(){        TimeZone timeZone = TimeZone.getTimeZone("GMT-3");        Calendar cal = Calendar.getInstance(timeZone);        cal.set(2002,1,23,10,11,12);        String text = DateFormatUtils.format(cal.getTime(),                         DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);        assertEquals("T10:11:12", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                         DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);        assertEquals("T10:11:12", text);        text = DateFormatUtils.ISO_TIME_FORMAT.format(cal);        assertEquals("T10:11:12", text);                text = DateFormatUtils.format(cal.getTime(),                       DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("T10:11:12-03:00", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                       DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("T10:11:12-03:00", text);        text = DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal);        assertEquals("T10:11:12-03:00", text);    }    public void testTimeNoTISO(){        TimeZone timeZone = TimeZone.getTimeZone("GMT-3");        Calendar cal = Calendar.getInstance(timeZone);        cal.set(2002,1,23,10,11,12);        String text = DateFormatUtils.format(cal.getTime(),                         DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);        assertEquals("10:11:12", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                         DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);        assertEquals("10:11:12", text);        text = DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(cal);        assertEquals("10:11:12", text);                text = DateFormatUtils.format(cal.getTime(),                       DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("10:11:12-03:00", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                       DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);        assertEquals("10:11:12-03:00", text);        text = DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.format(cal);        assertEquals("10:11:12-03:00", text);    }    public void testSMTP(){        TimeZone timeZone = TimeZone.getTimeZone("GMT-3");        Calendar cal = Calendar.getInstance(timeZone);        cal.set(2003,5,8,10,11,12);        String text = DateFormatUtils.format(cal.getTime(),                         DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());        assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text);        text = DateFormatUtils.format(cal.getTime().getTime(),                         DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());        assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text);        text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal);        assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text);                // format UTC        text = DateFormatUtils.formatUTC(cal.getTime().getTime(),                         DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());        assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text);    }    /*    public void testLang312() {        String pattern = "dd/MM/yyyy";        String expected = "19/04/1948";        TimeZone timeZone = TimeZone.getTimeZone("CET");        Locale locale = Locale.GERMANY;        // show Calendar is good        Calendar cal = Calendar.getInstance(timeZone, locale);        cal.set(1948, 3, 19);        assertEquals(expected, DateFormatUtils.format( cal.getTime(), pattern, timeZone, locale ) );        Date date = new Date(48, 3, 19);        // test JDK        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(pattern, locale);        sdf.setTimeZone(timeZone);// There's nothing we can do if the JDK fails, so just going to pring a warning in this case//        assertEquals(expected, sdf.format( date ) );        if( ! expected.equals( sdf.format( date ) ) ) {            System.out.println("WARNING: JDK test failed - testLang312()");        }        // test Commons        assertEquals(expected, DateFormatUtils.format( date, pattern, timeZone, locale ) );    }    */}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.time;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.Locale;import junit.framework.TestCase;import junit.framework.Test;import junit.framework.TestSuite;/** * These Unit-tests will check all possible extremes when using some rounding-methods of DateUtils. * The extremes are tested at the switch-point in milliseconds *  * According to the implementation SEMI_MONTH will either round/truncate to the 1st or 16th * When rounding Calendar.MONTH it depends on the number of days within that month. * A month with 28 days will be rounded up from the 15th * A month with 29 or 30 days will be rounded up from the 16th * A month with 31 days will be rounded up from the 17th *  * @todo Add DateUtils.ceil()-tests if method is available *    * @author Robert Scholte * @since 3.0 * */public class DateUtilsRoundingTest extends TestCase {    public static Test suite() {        TestSuite suite = new TestSuite(DateUtilsRoundingTest.class);        suite.setName("DateUtils Rounding Tests");        return suite;    }    DateFormat dateTimeParser;        Date januaryOneDate;    Date targetYearDate;    //No targetMonths, these must be tested for every type of month(28-31 days)    Date targetDateDate, targetDayOfMonthDate, targetAmDate, targetPmDate;    Date targetHourOfDayDate, targetHourDate;    Date targetMinuteDate;    Date targetSecondDate;    Date targetMilliSecondDate;    Calendar januaryOneCalendar;    FastDateFormat fdf = DateFormatUtils.ISO_DATETIME_FORMAT;    @Override    protected void setUp() throws Exception {        super.setUp();        dateTimeParser = new SimpleDateFormat("MMM dd, yyyy H:mm:ss.SSS", Locale.ENGLISH);                targetYearDate = dateTimeParser.parse("January 1, 2007 0:00:00.000");        targetDateDate = targetDayOfMonthDate = dateTimeParser.parse("June 1, 2008 0:00:00.000");        targetAmDate =  dateTimeParser.parse("June 1, 2008 0:00:00.000");        targetPmDate = dateTimeParser.parse("June 1, 2008 12:00:00.000");        targetHourDate = dateTimeParser.parse("June 1, 2008 8:00:00.000");        targetHourOfDayDate = dateTimeParser.parse("June 1, 2008 8:00:00.000");        targetMinuteDate =  dateTimeParser.parse("June 1, 2008 8:15:00.000");        targetSecondDate =  dateTimeParser.parse("June 1, 2008 8:15:14.000");        targetMilliSecondDate =  dateTimeParser.parse("June 1, 2008 8:15:14.231");                januaryOneDate = dateTimeParser.parse("January 1, 2008 0:00:00.000");        januaryOneCalendar = Calendar.getInstance();        januaryOneCalendar.setTime(januaryOneDate);    }    /**     * Tests DateUtils.round()-method with Calendar.Year     *      * @throws Exception     * @since 3.0     */    public void testRoundYear() throws Exception {        final int calendarField = Calendar.YEAR;        Date roundedUpDate = dateTimeParser.parse("January 1, 2008 0:00:00.000");        Date roundedDownDate = targetYearDate;        Date lastRoundedDownDate = dateTimeParser.parse("June 30, 2007 23:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);    }        /**     * Tests DateUtils.round()-method with Calendar.MONTH     * Includes rounding months with 28, 29, 30 and 31 days     * Includes rounding to January 1     *      * @throws Exception     * @since 3.0     */    public void testRoundMonth() throws Exception {        final int calendarField = Calendar.MONTH;        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;        Date minDate, maxDate;                //month with 28 days        roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00.000");        roundedDownDate = dateTimeParser.parse("February 1, 2007 0:00:00.000");        lastRoundedDownDate = dateTimeParser.parse("February 14, 2007 23:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);        //month with 29 days        roundedUpDate = dateTimeParser.parse("March 1, 2008 0:00:00.000");        roundedDownDate = dateTimeParser.parse("February 1, 2008 0:00:00.000");        lastRoundedDownDate = dateTimeParser.parse("February 15, 2008 23:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);                //month with 30 days        roundedUpDate = dateTimeParser.parse("May 1, 2008 0:00:00.000");        roundedDownDate = dateTimeParser.parse("April 1, 2008 0:00:00.000");        lastRoundedDownDate = dateTimeParser.parse("April 15, 2008 23:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);                //month with 31 days        roundedUpDate = dateTimeParser.parse("June 1, 2008 0:00:00.000");        roundedDownDate = dateTimeParser.parse("May 1, 2008 0:00:00.000");        lastRoundedDownDate = dateTimeParser.parse("May 16, 2008 23:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);                //round to January 1        minDate = dateTimeParser.parse("December 17, 2007 00:00:00.000");        maxDate = dateTimeParser.parse("January 16, 2008 23:59:59.999");        roundToJanuaryFirst(minDate, maxDate, calendarField);    }        /**     * Tests DateUtils.round()-method with DateUtils.SEMI_MONTH     * Includes rounding months with 28, 29, 30 and 31 days, each with first and second half      * Includes rounding to January 1     *           * @throws Exception     * @since 3.0     */    public void testRoundSemiMonth() throws Exception {        final int calendarField = DateUtils.SEMI_MONTH;        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;        Date minDate, maxDate;                //month with 28 days (1)        roundedUpDate = dateTimeParser.parse("February 16, 2007 0:00:00.000");        roundedDownDate = dateTimeParser.parse("February 1, 2007 0:00:00.000");        lastRoundedDownDate = dateTimeParser.parse("February 8, 2007 23:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);        //month with 28 days (2)        roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00.000");        roundedDownDate = dateTimeParser.parse("February 16, 2007 0:00:00.000");        lastRoundedDownDate = dateTimeParser.parse("February 23, 2007 23:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);        //month with 29 days (1)        roundedUpDate = dateTimeParser.parse("February 16, 2008 0:00:00.000");        roundedDownDate = dateTimeParser.parse("February 1, 2008 0:00:00.000");        lastRoundedDownDate = dateTimeParser.parse("February 8, 2008 23:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);                //month with 29 days (2)        roundedUpDate = dateTimeParser.parse("March 1, 2008 0:00:00.000");        roundedDownDate = dateTimeParser.parse("February 16, 2008 0:00:00.000");        lastRoundedDownDate = dateTimeParser.parse("February 23, 2008 23:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);        //month with 30 days (1)        roundedUpDate = dateTimeParser.parse("April 16, 2008 0:00:00.000");        roundedDownDate = dateTimeParser.parse("April 1, 2008 0:00:00.000");        lastRoundedDownDate = dateTimeParser.parse("April 8, 2008 23:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);        //month with 30 days (2)        roundedUpDate = dateTimeParser.parse("May 1, 2008 0:00:00.000");        roundedDownDate = dateTimeParser.parse("April 16, 2008 0:00:00.000");        lastRoundedDownDate = dateTimeParser.parse("April 23, 2008 23:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);                //month with 31 days (1)        roundedUpDate = dateTimeParser.parse("May 16, 2008 0:00:00.000");        roundedDownDate = dateTimeParser.parse("May 1, 2008 0:00:00.000");        lastRoundedDownDate = dateTimeParser.parse("May 8, 2008 23:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);        //month with 31 days (2)        roundedUpDate = dateTimeParser.parse("June 1, 2008 0:00:00.000");        roundedDownDate = dateTimeParser.parse("May 16, 2008 0:00:00.000");        lastRoundedDownDate = dateTimeParser.parse("May 23, 2008 23:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);                //round to January 1        minDate = dateTimeParser.parse("December 24, 2007 00:00:00.000");        maxDate = dateTimeParser.parse("January 8, 2008 23:59:59.999");        roundToJanuaryFirst(minDate, maxDate, calendarField);    }        /**     * Tests DateUtils.round()-method with Calendar.DATE     * Includes rounding the extremes of one day      * Includes rounding to January 1     *      * @throws Exception     * @since 3.0     */    public void testRoundDate() throws Exception {        final int calendarField = Calendar.DATE;        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;        Date minDate, maxDate;        roundedUpDate = dateTimeParser.parse("June 2, 2008 0:00:00.000");        roundedDownDate = targetDateDate;        lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 11:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);                //round to January 1        minDate = dateTimeParser.parse("December 31, 2007 12:00:00.000");        maxDate = dateTimeParser.parse("January 1, 2008 11:59:59.999");        roundToJanuaryFirst(minDate, maxDate, calendarField);    }        /**     * Tests DateUtils.round()-method with Calendar.DAY_OF_MONTH     * Includes rounding the extremes of one day      * Includes rounding to January 1     *      * @throws Exception     * @since 3.0     */    public void testRoundDayOfMonth() throws Exception {        final int calendarField = Calendar.DAY_OF_MONTH;        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;        Date minDate, maxDate;        roundedUpDate = dateTimeParser.parse("June 2, 2008 0:00:00.000");        roundedDownDate = targetDayOfMonthDate;        lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 11:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);                //round to January 1        minDate = dateTimeParser.parse("December 31, 2007 12:00:00.000");        maxDate = dateTimeParser.parse("January 1, 2008 11:59:59.999");        roundToJanuaryFirst(minDate, maxDate, calendarField);    }        /**     * Tests DateUtils.round()-method with Calendar.AM_PM     * Includes rounding the extremes of both AM and PM of one day      * Includes rounding to January 1     *      * @throws Exception     * @3.0     */    public void testRoundAmPm() throws Exception {        final int calendarField = Calendar.AM_PM;        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;        Date minDate, maxDate;        //AM        roundedUpDate = dateTimeParser.parse("June 1, 2008 12:00:00.000");        roundedDownDate = targetAmDate;        lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 5:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);        //PM        roundedUpDate = dateTimeParser.parse("June 2, 2008 0:00:00.000");        roundedDownDate = targetPmDate;        lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 17:59:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);        //round to January 1        minDate = dateTimeParser.parse("December 31, 2007 18:00:00.000");        maxDate = dateTimeParser.parse("January 1, 2008 5:59:59.999");        roundToJanuaryFirst(minDate, maxDate, calendarField);    }        /**     * Tests DateUtils.round()-method with Calendar.HOUR_OF_DAY     * Includes rounding the extremes of one hour      * Includes rounding to January 1     *      * @throws Exception     * @since 3.0     */    public void testRoundHourOfDay() throws Exception {        final int calendarField = Calendar.HOUR_OF_DAY;        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;        Date minDate, maxDate;        roundedUpDate = dateTimeParser.parse("June 1, 2008 9:00:00.000");        roundedDownDate = targetHourOfDayDate;        lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 8:29:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);                //round to January 1        minDate = dateTimeParser.parse("December 31, 2007 23:30:00.000");        maxDate = dateTimeParser.parse("January 1, 2008 0:29:59.999");        roundToJanuaryFirst(minDate, maxDate, calendarField);    }        /**     * Tests DateUtils.round()-method with Calendar.HOUR     * Includes rounding the extremes of one hour      * Includes rounding to January 1     *      * @throws Exception     * @since 3.0     */    public void testRoundHour() throws Exception {        final int calendarField = Calendar.HOUR;        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;        Date minDate, maxDate;        roundedUpDate = dateTimeParser.parse("June 1, 2008 9:00:00.000");        roundedDownDate = targetHourDate;        lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 8:29:59.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);                //round to January 1        minDate = dateTimeParser.parse("December 31, 2007 23:30:00.000");        maxDate = dateTimeParser.parse("January 1, 2008 0:29:59.999");        roundToJanuaryFirst(minDate, maxDate, calendarField);    }        /**     * Tests DateUtils.round()-method with Calendar.MINUTE     * Includes rounding the extremes of one minute      * Includes rounding to January 1     *      * @throws Exception     * @since 3.0     */    public void testRoundMinute() throws Exception {        final int calendarField = Calendar.MINUTE;        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;        Date minDate, maxDate;        roundedUpDate = dateTimeParser.parse("June 1, 2008 8:16:00.000");        roundedDownDate = targetMinuteDate;        lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 8:15:29.999");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);                //round to January 1        minDate = dateTimeParser.parse("December 31, 2007 23:59:30.000");        maxDate = dateTimeParser.parse("January 1, 2008 0:00:29.999");        roundToJanuaryFirst(minDate, maxDate, calendarField);    }        /**     * Tests DateUtils.round()-method with Calendar.SECOND     * Includes rounding the extremes of one second      * Includes rounding to January 1     *      * @throws Exception     * @since 3.0     */    public void testRoundSecond() throws Exception {        final int calendarField = Calendar.SECOND;        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;        Date minDate, maxDate;        roundedUpDate = dateTimeParser.parse("June 1, 2008 8:15:15.000");        roundedDownDate = targetSecondDate;        lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 8:15:14.499");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);                //round to January 1        minDate = dateTimeParser.parse("December 31, 2007 23:59:59.500");        maxDate = dateTimeParser.parse("January 1, 2008 0:00:00.499");        roundToJanuaryFirst(minDate, maxDate, calendarField);    }        /**     * Tests DateUtils.round()-method with Calendar.MILLISECOND     * Includes rounding the extremes of one second      * Includes rounding to January 1     *      * @throws Exception     * @since 3.0     */    public void testRoundMilliSecond() throws Exception {        final int calendarField = Calendar.MILLISECOND;        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;        Date minDate, maxDate;        roundedDownDate = lastRoundedDownDate = targetMilliSecondDate;        roundedUpDate = dateTimeParser.parse("June 1, 2008 8:15:14.232");        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);                //round to January 1        minDate = maxDate = januaryOneDate;        roundToJanuaryFirst(minDate, maxDate, calendarField);    }        /**     * Test DateUtils.truncate()-method with Calendar.YEAR     *      * @throws Exception     * @since 3.0     */    public void testTruncateYear() throws Exception {        final int calendarField = Calendar.YEAR;        Date lastTruncateDate = dateTimeParser.parse("December 31, 2007 23:59:59.999");        baseTruncateTest(targetYearDate, lastTruncateDate, calendarField);    }    /**     * Test DateUtils.truncate()-method with Calendar.MONTH     *      * @throws Exception     * @since 3.0     */    public void testTruncateMonth() throws Exception {        final int calendarField = Calendar.MONTH;        Date truncatedDate = dateTimeParser.parse("March 1, 2008 0:00:00.000");        Date lastTruncateDate = dateTimeParser.parse("March 31, 2008 23:59:59.999");        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);    }    /**     * Test DateUtils.truncate()-method with DateUtils.SEMI_MONTH     * Includes truncating months with 28, 29, 30 and 31 days, each with first and second half     *      * @throws Exception     * @since 3.0     */    public void testTruncateSemiMonth() throws Exception {        final int calendarField = DateUtils.SEMI_MONTH;        Date truncatedDate, lastTruncateDate;                //month with 28 days (1)        truncatedDate = dateTimeParser.parse("February 1, 2007 0:00:00.000");        lastTruncateDate = dateTimeParser.parse("February 15, 2007 23:59:59.999");        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);        //month with 28 days (2)        truncatedDate = dateTimeParser.parse("February 16, 2007 0:00:00.000");        lastTruncateDate = dateTimeParser.parse("February 28, 2007 23:59:59.999");        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);        //month with 29 days (1)        truncatedDate = dateTimeParser.parse("February 1, 2008 0:00:00.000");        lastTruncateDate = dateTimeParser.parse("February 15, 2008 23:59:59.999");        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);        //month with 29 days (2)        truncatedDate = dateTimeParser.parse("February 16, 2008 0:00:00.000");        lastTruncateDate = dateTimeParser.parse("February 29, 2008 23:59:59.999");        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);        //month with 30 days (1)        truncatedDate = dateTimeParser.parse("April 1, 2008 0:00:00.000");        lastTruncateDate = dateTimeParser.parse("April 15, 2008 23:59:59.999");        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);        //month with 30 days (2)        truncatedDate = dateTimeParser.parse("April 16, 2008 0:00:00.000");        lastTruncateDate = dateTimeParser.parse("April 30, 2008 23:59:59.999");        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);                //month with 31 days (1)        truncatedDate = dateTimeParser.parse("March 1, 2008 0:00:00.000");        lastTruncateDate = dateTimeParser.parse("March 15, 2008 23:59:59.999");        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);        //month with 31 days (2)        truncatedDate = dateTimeParser.parse("March 16, 2008 0:00:00.000");        lastTruncateDate = dateTimeParser.parse("March 31, 2008 23:59:59.999");        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);    }    /**     * Test DateUtils.truncate()-method with Calendar.DATE     *      * @throws Exception     * @since 3.0     */    public void testTruncateDate() throws Exception {        final int calendarField = Calendar.DATE;        Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 23:59:59.999");        baseTruncateTest(targetDateDate, lastTruncateDate, calendarField);    }        /**     * Test DateUtils.truncate()-method with Calendar.DAY_OF_MONTH     *      * @throws Exception     * @since 3.0     */    public void testTruncateDayOfMonth() throws Exception {        final int calendarField = Calendar.DAY_OF_MONTH;        Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 23:59:59.999");        baseTruncateTest(targetDayOfMonthDate, lastTruncateDate, calendarField);    }        /**     * Test DateUtils.truncate()-method with Calendar.AM_PM     * Includes truncating the extremes of both AM and PM of one day      *      * @throws Exception     * @since 3.0     */    public void testTruncateAmPm() throws Exception {        final int calendarField = Calendar.AM_PM;                //AM        Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 11:59:59.999");        baseTruncateTest(targetAmDate, lastTruncateDate, calendarField);        //PM        lastTruncateDate = dateTimeParser.parse("June 1, 2008 23:59:59.999");        baseTruncateTest(targetPmDate, lastTruncateDate, calendarField);    }        /**     * Test DateUtils.truncate()-method with Calendar.HOUR     *      * @throws Exception     * @since 3.0     */    public void testTruncateHour() throws Exception {        final int calendarField = Calendar.HOUR;        Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:59:59.999");        baseTruncateTest(targetHourDate, lastTruncateDate, calendarField);    }        /**     * Test DateUtils.truncate()-method with Calendar.HOUR_OF_DAY     *      * @throws Exception     * @since 3.0     */    public void testTruncateHourOfDay() throws Exception {        final int calendarField = Calendar.HOUR_OF_DAY;        Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:59:59.999");        baseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField);    }        /**     * Test DateUtils.truncate()-method with Calendar.MINUTE     *      * @throws Exception     * @since 3.0     */    public void testTruncateMinute() throws Exception {        final int calendarField = Calendar.MINUTE;        Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999");        baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField);    }        /**     * Test DateUtils.truncate()-method with Calendar.SECOND     *      * @throws Exception     * @since 3.0     */    public void testTruncateSecond() throws Exception {        final int calendarField = Calendar.SECOND;        Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:14.999");        baseTruncateTest(targetSecondDate, lastTruncateDate, calendarField);    }        /**     * Test DateUtils.truncate()-method with Calendar.SECOND     *      * @throws Exception     * @since 3.0     */    public void testTruncateMilliSecond() throws Exception {        final int calendarField = Calendar.MILLISECOND;        baseTruncateTest(targetMilliSecondDate, targetMilliSecondDate, calendarField);    }            /**     * When using this basetest all extremes are tested.<br>      * It will test the Date, Calendar and Object-implementation<br>     * lastRoundDownDate should round down to roundedDownDate<br>     * lastRoundDownDate + 1 millisecond should round up to roundedUpDate     *      * @param roundedUpDate the next rounded date after <strong>roundedDownDate</strong> when using <strong>calendarField</strong>     * @param roundedDownDate the result if <strong>lastRoundDownDate</strong> was rounded with <strong>calendarField</strong>     * @param lastRoundDownDate rounding this value with <strong>calendarField</strong> will result in <strong>roundedDownDate</strong>     * @param calendarField     * @since 3.0     */    protected void baseRoundTest(final Date roundedUpDate, final Date roundedDownDate, final Date lastRoundDownDate, final int calendarField) {        Date firstRoundUpDate = DateUtils.addMilliseconds(lastRoundDownDate, 1);                //Date-comparison        assertEquals(roundedDownDate, DateUtils.round(roundedDownDate, calendarField));        assertEquals(roundedUpDate, DateUtils.round(roundedUpDate, calendarField));        assertEquals(roundedDownDate, DateUtils.round(lastRoundDownDate, calendarField));        assertEquals(roundedUpDate, DateUtils.round(firstRoundUpDate, calendarField));                //Calendar-initiations        Calendar roundedUpCalendar, roundedDownCalendar, lastRoundDownCalendar, firstRoundUpCalendar;         roundedDownCalendar = Calendar.getInstance();        roundedUpCalendar = Calendar.getInstance();        lastRoundDownCalendar = Calendar.getInstance();        firstRoundUpCalendar = Calendar.getInstance();        roundedDownCalendar.setTime(roundedDownDate);        roundedUpCalendar.setTime(roundedUpDate);        lastRoundDownCalendar.setTime(lastRoundDownDate);        firstRoundUpCalendar.setTime(firstRoundUpDate);        //Calendar-comparison        assertEquals(roundedDownCalendar, DateUtils.round(roundedDownCalendar, calendarField));        assertEquals(roundedUpCalendar, DateUtils.round(roundedUpCalendar, calendarField));        assertEquals(roundedDownCalendar, DateUtils.round(lastRoundDownCalendar, calendarField));        assertEquals(roundedUpCalendar, DateUtils.round(firstRoundUpCalendar, calendarField));        //Object-comparison        assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownDate, calendarField));        assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpDate, calendarField));        assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));        assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));        assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownCalendar, calendarField));        assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpCalendar, calendarField));        assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));        assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));    }        /**     * When using this basetest all extremes are tested.<br>      * It will test the Date, Calendar and Object-implementation<br>     * lastTruncateDate should round down to truncatedDate<br>     * lastTruncateDate + 1 millisecond should never round down to truncatedDate     *      * @param truncatedDate expected Date when <strong>lastTruncateDate</strong> is truncated with <strong>calendarField</strong>     * @param lastTruncateDate the last possible Date which will truncate to <strong>truncatedDate</strong> with <strong>calendarField</strong>     * @param calendarField a Calendar.field value     * @since 3.0     */    protected void baseTruncateTest(final Date truncatedDate, final Date lastTruncateDate, final int calendarField) {        Date nextTruncateDate = DateUtils.addMilliseconds(lastTruncateDate, 1);                //Date-comparison        assertEquals("Truncating "+ fdf.format(truncatedDate) +" as Date with CalendarField-value "+ calendarField +" must return itself", truncatedDate, DateUtils.truncate(truncatedDate, calendarField));        assertEquals(truncatedDate, DateUtils.truncate(lastTruncateDate, calendarField));        assertFalse(fdf.format(lastTruncateDate) +" is not an extreme when truncating as Date with CalendarField-value "+ calendarField, truncatedDate.equals(DateUtils.truncate(nextTruncateDate, calendarField)));                //Calendar-initiations        Calendar truncatedCalendar, lastTruncateCalendar, nextTruncateCalendar;         truncatedCalendar = Calendar.getInstance();        lastTruncateCalendar = Calendar.getInstance();        nextTruncateCalendar = Calendar.getInstance();        truncatedCalendar.setTime(truncatedDate);        lastTruncateCalendar.setTime(lastTruncateDate);        nextTruncateCalendar.setTime(nextTruncateDate);        //Calendar-comparison        assertEquals("Truncating "+ fdf.format(truncatedCalendar) +" as Calendar with CalendarField-value "+ calendarField +" must return itself", truncatedCalendar, DateUtils.truncate(truncatedCalendar, calendarField));        assertEquals(truncatedCalendar, DateUtils.truncate(lastTruncateCalendar, calendarField));        assertFalse(fdf.format(lastTruncateCalendar) +" is not an extreme when truncating as Calendar with CalendarField-value "+ calendarField, truncatedCalendar.equals(DateUtils.truncate(nextTruncateCalendar, calendarField)));        //Object-comparison        assertEquals("Truncating "+ fdf.format(truncatedDate) +" as Date cast to Object with CalendarField-value "+ calendarField +" must return itself as Date", truncatedDate, DateUtils.truncate((Object) truncatedDate, calendarField));        assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateDate, calendarField));        assertFalse(fdf.format(lastTruncateDate) +" is not an extreme when truncating as Date cast to Object with CalendarField-value "+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateDate, calendarField)));        assertEquals("Truncating "+ fdf.format(truncatedCalendar) +" as Calendar cast to Object with CalendarField-value "+ calendarField +" must return itself as Date", truncatedDate, DateUtils.truncate((Object) truncatedCalendar, calendarField));        assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateCalendar, calendarField));        assertFalse(fdf.format(lastTruncateCalendar) +" is not an extreme when truncating as Calendar cast to Object with CalendarField-value "+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateCalendar, calendarField)));    }        /**     *      * Any January 1 could be considered as the ultimate extreme.     * Instead of comparing the results if the input has a difference of 1 millisecond we check the output to be exactly January first.      *      * @param minDate     * @param maxDate     * @param calendarField     * @since 3.0     */    protected void roundToJanuaryFirst(Date minDate, Date maxDate, int calendarField) {        assertEquals("Rounding "+ fdf.format(januaryOneDate) +" as Date with CalendarField-value "+ calendarField +" must return itself", januaryOneDate, DateUtils.round(januaryOneDate, calendarField));        assertEquals(januaryOneDate, DateUtils.round(minDate, calendarField));        assertEquals(januaryOneDate, DateUtils.round(maxDate, calendarField));                Calendar minCalendar = Calendar.getInstance();        minCalendar.setTime(minDate);        Calendar maxCalendar = Calendar.getInstance();        maxCalendar.setTime(maxDate);        assertEquals("Rounding "+ fdf.format(januaryOneCalendar) +" as Date with CalendarField-value "+ calendarField +" must return itself", januaryOneCalendar, DateUtils.round(januaryOneCalendar, calendarField));        assertEquals(januaryOneCalendar, DateUtils.round(minCalendar, calendarField));        assertEquals(januaryOneCalendar, DateUtils.round(maxCalendar, calendarField));        Date toPrevRoundDate = DateUtils.addMilliseconds(minDate, -1);        Date toNextRoundDate = DateUtils.addMilliseconds(maxDate, 1);        assertFalse(fdf.format(minDate) +" is not an lower-extreme when rounding as Date with CalendarField-value "+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));        assertFalse(fdf.format(maxDate) +" is not an upper-extreme when rounding as Date with CalendarField-value "+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));                Calendar toPrevRoundCalendar = Calendar.getInstance();        toPrevRoundCalendar.setTime(toPrevRoundDate);        Calendar toNextRoundCalendar = Calendar.getInstance();        toNextRoundCalendar.setTime(toNextRoundDate);        assertFalse(fdf.format(minCalendar) +" is not an lower-extreme when rounding as Date with CalendarField-value "+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));        assertFalse(fdf.format(maxCalendar) +" is not an upper-extreme when rounding as Date with CalendarField-value "+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.time;import java.util.Calendar;import java.util.Date;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;public class DateUtilsFragmentTest extends TestCase {    public static Test suite() {        TestSuite suite = new TestSuite(DateUtilsFragmentTest.class);        suite.setName("DateUtils Fragment Tests");        return suite;    }    private static final int months = 7;   // second final prime before 12    private static final int days = 23;    // second final prime before 31 (and valid)    private static final int hours = 19;   // second final prime before 24    private static final int minutes = 53; // second final prime before 60    private static final int seconds = 47; // third final prime before 60    private static final int millis = 991; // second final prime before 1000    private Date aDate;    private Calendar aCalendar;    @Override    protected void setUp() {        aCalendar = Calendar.getInstance();        aCalendar.set(2005, months, days, hours, minutes, seconds);        aCalendar.set(Calendar.MILLISECOND, millis);        aDate = aCalendar.getTime();    }        public void testNullDate() {        try {            DateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInSeconds((Date) null, Calendar.MILLISECOND);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInMinutes((Date) null, Calendar.MILLISECOND);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInHours((Date) null, Calendar.MILLISECOND);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInDays((Date) null, Calendar.MILLISECOND);            fail();        } catch(IllegalArgumentException iae) {}    }    public void testNullCalendar() {        try {            DateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInSeconds((Calendar) null, Calendar.MILLISECOND);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInMinutes((Calendar) null, Calendar.MILLISECOND);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInHours((Calendar) null, Calendar.MILLISECOND);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInDays((Calendar) null, Calendar.MILLISECOND);            fail();        } catch(IllegalArgumentException iae) {}    }        public void testInvalidFragmentWithDate() {        try {            DateUtils.getFragmentInMilliseconds(aDate, 0);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInSeconds(aDate, 0);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInMinutes(aDate, 0);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInHours(aDate, 0);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInDays(aDate, 0);            fail();        } catch(IllegalArgumentException iae) {}    }    public void testInvalidFragmentWithCalendar() {        try {            DateUtils.getFragmentInMilliseconds(aCalendar, 0);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInSeconds(aCalendar, 0);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInMinutes(aCalendar, 0);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInHours(aCalendar, 0);            fail();        } catch(IllegalArgumentException iae) {}        try {            DateUtils.getFragmentInDays(aCalendar, 0);            fail();        } catch(IllegalArgumentException iae) {}    }    public void testMillisecondFragmentInLargerUnitWithDate() {        assertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND));        assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND));        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND));        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND));        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND));    }    public void testMillisecondFragmentInLargerUnitWithCalendar() {        assertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND));        assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND));        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND));        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND));        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND));    }        public void testSecondFragmentInLargerUnitWithDate() {        assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND));        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND));        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND));        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND));    }    public void testSecondFragmentInLargerUnitWithCalendar() {        assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND));        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND));        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.SECOND));        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND));    }        public void testMinuteFragmentInLargerUnitWithDate() {        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE));        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE));        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE));    }    public void testMinuteFragmentInLargerUnitWithCalendar() {        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE));        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE));        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE));    }    public void testHourOfDayFragmentInLargerUnitWithDate() {        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY));        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY));    }    public void testHourOfDayFragmentInLargerUnitWithCalendar() {        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY));        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY));    }    public void testDayOfYearFragmentInLargerUnitWithDate() {        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR));    }    public void testDayOfYearFragmentInLargerUnitWithCalendar() {        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR));    }    public void testDateFragmentInLargerUnitWithDate() {        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE));    }    public void testDateFragmentInLargerUnitWithCalendar() {        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE));    }    //Calendar.SECOND as useful fragment        public void testMillisecondsOfSecondWithDate() {        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND);        assertEquals(millis, testResult);    }    public void testMillisecondsOfSecondWithCalendar() {        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.SECOND);        assertEquals(millis, testResult);        assertEquals(aCalendar.get(Calendar.MILLISECOND), testResult);    }    //Calendar.MINUTE as useful fragment    public void testMillisecondsOfMinuteWithDate() {        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MINUTE);        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);    }    public void testMillisecondsOfMinuteWithCalender() {        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MINUTE);        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);    }    public void testSecondsofMinuteWithDate() {        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MINUTE);        assertEquals(seconds, testResult);    }    public void testSecondsofMinuteWithCalendar() {        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE);        assertEquals(seconds, testResult);        assertEquals(aCalendar.get(Calendar.SECOND), testResult);    }    //Calendar.HOUR_OF_DAY as useful fragment        public void testMillisecondsOfHourWithDate() {        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.HOUR_OF_DAY);        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);    }        public void testMillisecondsOfHourWithCalendar() {        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.HOUR_OF_DAY);        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);    }    public void testSecondsofHourWithDate() {        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.HOUR_OF_DAY);        assertEquals(                seconds                        + (minutes                                * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),                testResult);    }    public void testSecondsofHourWithCalendar() {        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY);        assertEquals(                seconds                        + (minutes                                * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),                testResult);    }    public void testMinutesOfHourWithDate() {        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.HOUR_OF_DAY);        assertEquals(minutes, testResult);    }    public void testMinutesOfHourWithCalendar() {        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.HOUR_OF_DAY);        assertEquals(minutes, testResult);    }    //Calendar.DATE and Calendar.DAY_OF_YEAR as useful fragment    public void testMillisecondsOfDayWithDate() {        long testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DATE);        long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR);         assertEquals(expectedValue, testresult);        testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DAY_OF_YEAR);        assertEquals(expectedValue, testresult);    }        public void testMillisecondsOfDayWithCalendar() {        long testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DATE);        long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR);         assertEquals(expectedValue, testresult);        testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DAY_OF_YEAR);        assertEquals(expectedValue, testresult);    }    public void testSecondsOfDayWithDate() {        long testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DATE);        long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;        assertEquals(expectedValue, testresult);        testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DAY_OF_YEAR);        assertEquals(expectedValue, testresult);    }    public void testSecondsOfDayWithCalendar() {        long testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DATE);        long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;        assertEquals(expectedValue, testresult);        testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DAY_OF_YEAR);        assertEquals(expectedValue, testresult);    }    public void testMinutesOfDayWithDate() {        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DATE);        long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE;         assertEquals(expectedValue,testResult);        testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DAY_OF_YEAR);        assertEquals(expectedValue,testResult);    }    public void testMinutesOfDayWithCalendar() {        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DATE);        long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE;         assertEquals(expectedValue, testResult);        testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DAY_OF_YEAR);        assertEquals(expectedValue, testResult);    }        public void testHoursOfDayWithDate() {        long testResult = DateUtils.getFragmentInHours(aDate, Calendar.DATE);        long expectedValue = hours;         assertEquals(expectedValue,testResult);        testResult = DateUtils.getFragmentInHours(aDate, Calendar.DAY_OF_YEAR);        assertEquals(expectedValue,testResult);    }    public void testHoursOfDayWithCalendar() {        long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DATE);        long expectedValue = hours;         assertEquals(expectedValue, testResult);        testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DAY_OF_YEAR);        assertEquals(expectedValue, testResult);    }            //Calendar.MONTH as useful fragment    public void testMillisecondsOfMonthWithDate() {        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MONTH);        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)                                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),                testResult);    }    public void testMillisecondsOfMonthWithCalendar() {        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MONTH);        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),testResult);    }        public void testSecondsOfMonthWithDate() {        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH);        assertEquals(                seconds                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)                                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))                        / DateUtils.MILLIS_PER_SECOND,                testResult);    }    public void testSecondsOfMonthWithCalendar() {        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MONTH);        assertEquals(                seconds                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)                                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))                        / DateUtils.MILLIS_PER_SECOND,                testResult);    }    public void testMinutesOfMonthWithDate() {        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.MONTH);        assertEquals(minutes                                + ((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))                        / DateUtils.MILLIS_PER_MINUTE,                testResult);    }    public void testMinutesOfMonthWithCalendar() {        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH);        assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))                        / DateUtils.MILLIS_PER_MINUTE,                testResult);    }    public void testHoursOfMonthWithDate() {        long testResult = DateUtils.getFragmentInHours(aDate, Calendar.MONTH);        assertEquals(hours + ((days * DateUtils.MILLIS_PER_DAY))                        / DateUtils.MILLIS_PER_HOUR,                testResult);    }    public void testHoursOfMonthWithCalendar() {        long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.MONTH);        assertEquals( hours +((days * DateUtils.MILLIS_PER_DAY))                        / DateUtils.MILLIS_PER_HOUR,                testResult);    }        //Calendar.YEAR as useful fragment    public void testMillisecondsOfYearWithDate() {        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.YEAR);        Calendar cal = Calendar.getInstance();        cal.setTime(aDate);        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)                                + (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),                testResult);    }    public void testMillisecondsOfYearWithCalendar() {        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR);        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)                + (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),testResult);    }        public void testSecondsOfYearWithDate() {        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.YEAR);        Calendar cal = Calendar.getInstance();        cal.setTime(aDate);        assertEquals(                seconds                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)                                + (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))                        / DateUtils.MILLIS_PER_SECOND,                testResult);    }    public void testSecondsOfYearWithCalendar() {        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.YEAR);        assertEquals(                seconds                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)                                + (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))                        / DateUtils.MILLIS_PER_SECOND,                testResult);    }    public void testMinutesOfYearWithDate() {        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.YEAR);        Calendar cal = Calendar.getInstance();        cal.setTime(aDate);        assertEquals(minutes                                + ((hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))                        / DateUtils.MILLIS_PER_MINUTE,                testResult);    }    public void testMinutesOfYearWithCalendar() {        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.YEAR);        assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))                        / DateUtils.MILLIS_PER_MINUTE,                testResult);    }    public void testHoursOfYearWithDate() {        long testResult = DateUtils.getFragmentInHours(aDate, Calendar.YEAR);        Calendar cal = Calendar.getInstance();        cal.setTime(aDate);        assertEquals(hours + ((cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))                        / DateUtils.MILLIS_PER_HOUR,                testResult);    }    public void testHoursOfYearWithCalendar() {        long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.YEAR);        assertEquals( hours +((aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))                        / DateUtils.MILLIS_PER_HOUR,                testResult);    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.math;import junit.framework.TestCase;/** * Unit tests {@link org.apache.commons.lang.math.IEEE754rUtils}. * * @version $Id$ */public class IEEE754rUtilsTest extends TestCase {    public void testLang381() {        assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01);        assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01);        assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN)));        assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01);        assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01);        assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN)));        double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };        assertEquals(42.0, IEEE754rUtils.max(a), 0.01);        assertEquals(1.2, IEEE754rUtils.min(a), 0.01);        double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };        assertEquals(42.0, IEEE754rUtils.max(b), 0.01);        assertEquals(1.2, IEEE754rUtils.min(b), 0.01);        float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };        assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01);        assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01);        float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };        assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01);        assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01);    }    }
/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.lang.math;import junit.framework.Test;import junit.framework.TestSuite;/** * Test cases for the {@link DoubleRange} class. * * @author Stephen Colebourne * @version $Id$ */public final class DoubleRangeTest extends AbstractRangeTest {    public DoubleRangeTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(DoubleRangeTest.class);        suite.setName("DoubleRange Tests");        return suite;    }        @Override    public void setUp() {        super.setUp();        tenToTwenty = new DoubleRange(double10, double20);        otherRange = new NumberRange(ten, twenty);    }    @Override    protected Range createRange(Integer integer1, Integer integer2) {        return new DoubleRange(integer1, integer2);    }    @Override    protected Range createRange(Integer integer) {        return new NumberRange(integer);    }        //--------------------------------------------------------------------------    public void testConstructor1a() {        DoubleRange nr = new DoubleRange(8d);        assertEquals(double8, nr.getMinimumNumber());        assertEquals(double8, nr.getMaximumNumber());                try {            new DoubleRange(Double.NaN);            fail();        } catch (IllegalArgumentException ex) {}    }        public void testConstructor1b() {        DoubleRange nr = new DoubleRange(double8);        assertSame(double8, nr.getMinimumNumber());        assertSame(double8, nr.getMaximumNumber());                Range r = new DoubleRange(nonComparableNumber);                try {            new DoubleRange(null);            fail();        } catch (IllegalArgumentException ex) {}        try {            new DoubleRange(new Double(Double.NaN));            fail();        } catch (IllegalArgumentException ex) {}    }        public void testConstructor2a() {        DoubleRange nr = new DoubleRange(8d, 10d);        assertEquals(double8, nr.getMinimumNumber());        assertEquals(double10, nr.getMaximumNumber());                nr = new DoubleRange(10d, 8d);        assertEquals(double8, nr.getMinimumNumber());        assertEquals(double10, nr.getMaximumNumber());                try {            new DoubleRange(Double.NaN, 8d);            fail();        } catch (IllegalArgumentException ex) {}    }    public void testConstructor2b() {        DoubleRange nr = new DoubleRange(double8, double10);        assertSame(double8, nr.getMinimumNumber());        assertSame(double10, nr.getMaximumNumber());                nr = new DoubleRange(double10, double8);        assertSame(double8, nr.getMinimumNumber());        assertSame(double10, nr.getMaximumNumber());                nr = new DoubleRange(double8, double10);        assertSame(double8, nr.getMinimumNumber());        assertEquals(double10, nr.getMaximumNumber());                // not null        try {            new DoubleRange(double8, null);            fail();        } catch (IllegalArgumentException ex) {}        try {            new DoubleRange(null, double8);            fail();        } catch (IllegalArgumentException ex) {}        try {            new DoubleRange(null, null);            fail();        } catch (IllegalArgumentException ex) {}                try {            new DoubleRange(new Double(Double.NaN), double10);            fail();        } catch (IllegalArgumentException ex) {}    }    //--------------------------------------------------------------------------    public void testContainsNumber() {        assertEquals(false, tenToTwenty.containsNumber(null));        assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));                assertEquals(false, tenToTwenty.containsNumber(five));        assertEquals(true, tenToTwenty.containsNumber(ten));        assertEquals(true, tenToTwenty.containsNumber(fifteen));        assertEquals(true, tenToTwenty.containsNumber(twenty));        assertEquals(false, tenToTwenty.containsNumber(twentyFive));                assertEquals(false, tenToTwenty.containsNumber(long8));        assertEquals(true, tenToTwenty.containsNumber(long10));        assertEquals(true, tenToTwenty.containsNumber(long12));        assertEquals(true, tenToTwenty.containsNumber(long20));        assertEquals(false, tenToTwenty.containsNumber(long21));                assertEquals(false, tenToTwenty.containsNumber(double8));        assertEquals(true, tenToTwenty.containsNumber(double10));        assertEquals(true, tenToTwenty.containsNumber(double12));        assertEquals(true, tenToTwenty.containsNumber(double20));        assertEquals(false, tenToTwenty.containsNumber(double21));                assertEquals(false, tenToTwenty.containsNumber(float8));        assertEquals(true, tenToTwenty.containsNumber(float10));        assertEquals(true, tenToTwenty.containsNumber(float12));        assertEquals(true, tenToTwenty.containsNumber(float20));        assertEquals(false, tenToTwenty.containsNumber(float21));    }    @Override    public void testToString() {        String str = tenToTwenty.toString();        assertEquals("Range[10.0,20.0]", str);        assertSame(str, tenToTwenty.toString());        assertEquals("Range[-20.0,-10.0]", createRange(new Integer(-20), new Integer(-10)).toString());    }        //--------------------------------------------------------------------------    }
/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.lang.math;import junit.framework.Test;import junit.framework.TestSuite;import java.util.Arrays;/** * Test cases for the {@link LongRange} class. * * @author Stephen Colebourne * @version $Id$ */public final class LongRangeTest extends AbstractRangeTest {    public LongRangeTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(LongRangeTest.class);        suite.setName("LongRange Tests");        return suite;    }        @Override    public void setUp() {        super.setUp();        tenToTwenty = new LongRange(long10, long20);        otherRange = new NumberRange(ten, twenty);    }    @Override    protected Range createRange(Integer integer1, Integer integer2) {        return new LongRange(integer1, integer2);    }    @Override    protected Range createRange(Integer integer) {        return new NumberRange(integer);    }        //--------------------------------------------------------------------------    public void testConstructor1a() {        LongRange nr = new LongRange(8L);        assertEquals(long8, nr.getMinimumNumber());        assertEquals(long8, nr.getMaximumNumber());    }        public void testConstructor1b() {        LongRange nr = new LongRange(long8);        assertSame(long8, nr.getMinimumNumber());        assertSame(long8, nr.getMaximumNumber());                Range r = new LongRange(nonComparableNumber);                try {            new LongRange(null);            fail();        } catch (IllegalArgumentException ex) {}    }        public void testConstructor2a() {        LongRange nr = new LongRange(8L, 10L);        assertEquals(long8, nr.getMinimumNumber());        assertEquals(long10, nr.getMaximumNumber());                nr = new LongRange(10L, 8L);        assertEquals(long8, nr.getMinimumNumber());        assertEquals(long10, nr.getMaximumNumber());    }    public void testConstructor2b() {        LongRange nr = new LongRange(long8, long10);        assertSame(long8, nr.getMinimumNumber());        assertSame(long10, nr.getMaximumNumber());                nr = new LongRange(long10, long8);        assertSame(long8, nr.getMinimumNumber());        assertSame(long10, nr.getMaximumNumber());                nr = new LongRange(long8, long10);        assertSame(long8, nr.getMinimumNumber());        assertEquals(long10, nr.getMaximumNumber());                // not null        try {            new LongRange(long8, null);            fail();        } catch (IllegalArgumentException ex) {}        try {            new LongRange(null, long8);            fail();        } catch (IllegalArgumentException ex) {}        try {            new LongRange(null, null);            fail();        } catch (IllegalArgumentException ex) {}    }    //--------------------------------------------------------------------------    public void testContainsNumber() {        assertEquals(false, tenToTwenty.containsNumber(null));        assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));                assertEquals(false, tenToTwenty.containsNumber(five));        assertEquals(true, tenToTwenty.containsNumber(ten));        assertEquals(true, tenToTwenty.containsNumber(fifteen));        assertEquals(true, tenToTwenty.containsNumber(twenty));        assertEquals(false, tenToTwenty.containsNumber(twentyFive));                assertEquals(false, tenToTwenty.containsNumber(long8));        assertEquals(true, tenToTwenty.containsNumber(long10));        assertEquals(true, tenToTwenty.containsNumber(long12));        assertEquals(true, tenToTwenty.containsNumber(long20));        assertEquals(false, tenToTwenty.containsNumber(long21));                assertEquals(false, tenToTwenty.containsNumber(double8));        assertEquals(true, tenToTwenty.containsNumber(double10));        assertEquals(true, tenToTwenty.containsNumber(double12));        assertEquals(true, tenToTwenty.containsNumber(double20));        assertEquals(false, tenToTwenty.containsNumber(double21));                assertEquals(false, tenToTwenty.containsNumber(float8));        assertEquals(true, tenToTwenty.containsNumber(float10));        assertEquals(true, tenToTwenty.containsNumber(float12));        assertEquals(true, tenToTwenty.containsNumber(float20));        assertEquals(false, tenToTwenty.containsNumber(float21));    }    public void testContainsLongBig() {        LongRange big = new LongRange(Long.MAX_VALUE, Long.MAX_VALUE- 2);        assertEquals(true, big.containsLong(Long.MAX_VALUE - 1));        assertEquals(false, big.containsLong(Long.MAX_VALUE - 3));    }    public void testToArray() {        long[] threeItems = new LongRange(3, 5).toArray();        assertTrue(Arrays.equals(new long[]{3, 4, 5}, threeItems));        long[] oneItem = new LongRange(4).toArray();        assertTrue(Arrays.equals(new long[]{4}, oneItem));    }    //--------------------------------------------------------------------------    }
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.math;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * <p> * Tests the base methods in the {@link org.apache.commons.lang.math.Range} class. * </p> *  * @author Nathan Beyer * @version $Id$ */public class RangeTest extends TestCase {    private static class RangeTestFixture extends Range {        private byte max;        private byte min;        RangeTestFixture(byte min, byte max) {            super();            this.min = min;            this.max = max;        }        @Override        public boolean containsNumber(Number number) {            if (number.byteValue() >= min && number.byteValue() <= max) {                return true;            }            return false;        }        @Override        public Number getMaximumNumber() {            return Byte.valueOf(max);        }        @Override        public Number getMinimumNumber() {            return Byte.valueOf(min);        }    }    public static Test suite() {        TestSuite suite = new TestSuite(RangeTest.class);        suite.setName("Range Tests");        return suite;    }    public RangeTest(String name) {        super(name);    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    /**     * Test method for 'org.apache.commons.lang.math.Range.equals(Object)'     */    public void testEqualsObject() {        RangeTestFixture r1 = new RangeTestFixture((byte) 0, (byte) 5);        RangeTestFixture r2 = new RangeTestFixture((byte) 0, (byte) 5);        RangeTestFixture r3 = new RangeTestFixture((byte) 0, (byte) 10);        assertEquals(r1, r1);        assertEquals(r1, r2);        assertEquals(r2, r2);        assertTrue(r1.equals(r1));        assertTrue(r2.equals(r2));        assertTrue(r3.equals(r3));        assertFalse(r2.equals(r3));        assertFalse(r2.equals(null));        assertFalse(r2.equals("Ni!"));    }    /**     * Test method for 'org.apache.commons.lang.math.Range.hashCode()'     */    public void testHashCode() {        RangeTestFixture r1 = new RangeTestFixture((byte) 0, (byte) 5);        RangeTestFixture r2 = new RangeTestFixture((byte) 0, (byte) 5);        RangeTestFixture r3 = new RangeTestFixture((byte) 0, (byte) 10);        assertEquals(r1.hashCode(), r2.hashCode());        assertFalse(r1.hashCode() == r3.hashCode());    }    /**     * Test method for 'org.apache.commons.lang.math.Range.toString()'     */    public void testToString() {        RangeTestFixture r1 = new RangeTestFixture((byte) 0, (byte) 5);        assertNotNull(r1.toString());        assertNotNull(r1.toString());        RangeTestFixture r2 = new RangeTestFixture((byte) 0, (byte) 5);        assertNotNull(r2.toString());        assertNotNull(r2.toString());        RangeTestFixture r3 = new RangeTestFixture((byte) 0, (byte) 10);        assertNotNull(r3.toString());        assertNotNull(r3.toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.lang.math;import junit.framework.Test;import junit.framework.TestSuite;import java.util.Arrays;/** * Test cases for the {@link IntRange} class. * * @author Stephen Colebourne * @author Janek Bogucki * @author Phil Steitz * @version $Id$ */public final class IntRangeTest extends AbstractRangeTest {    public IntRangeTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(IntRangeTest.class);        suite.setName("IntRange Tests");        return suite;    }        @Override    public void setUp() {        super.setUp();        tenToTwenty = new IntRange(ten, twenty);        otherRange = new NumberRange(ten, twenty);    }    @Override    protected Range createRange(Integer integer1, Integer integer2) {        return new IntRange(integer1, integer2);    }    @Override    protected Range createRange(Integer integer) {        return new NumberRange(integer);    }        //--------------------------------------------------------------------------    public void testConstructor1a() {        IntRange nr = new IntRange(5);        assertEquals(five, nr.getMinimumNumber());        assertEquals(five, nr.getMaximumNumber());    }        public void testConstructor1b() {        IntRange nr = new IntRange(five);        assertSame(five, nr.getMinimumNumber());        assertSame(five, nr.getMaximumNumber());                Range r = new IntRange(nonComparableNumber);                try {            new IntRange(null);            fail();        } catch (IllegalArgumentException ex) {}    }        public void testConstructor2a() {        IntRange nr = new IntRange(5, 10);        assertEquals(five, nr.getMinimumNumber());        assertEquals(ten, nr.getMaximumNumber());                nr = new IntRange(5, 10);        assertEquals(five, nr.getMinimumNumber());        assertEquals(ten, nr.getMaximumNumber());    }    public void testConstructor2b() {        IntRange nr = new IntRange(five, ten);        assertSame(five, nr.getMinimumNumber());        assertSame(ten, nr.getMaximumNumber());                nr = new IntRange(ten, five);        assertSame(five, nr.getMinimumNumber());        assertSame(ten, nr.getMaximumNumber());                nr = new IntRange(five, long10);        assertSame(five, nr.getMinimumNumber());        assertEquals(ten, nr.getMaximumNumber());                // test non Integer, for full coverage        Long fiveL = new Long(5L);        Long tenL = new Long(10L);        nr = new IntRange(fiveL, tenL);        assertEquals(five, nr.getMinimumNumber());        assertEquals(ten, nr.getMaximumNumber());        nr = new IntRange(tenL, fiveL);        assertEquals(five, nr.getMinimumNumber());        assertEquals(ten, nr.getMaximumNumber());                // not null        try {            new IntRange(five, null);            fail();        } catch (IllegalArgumentException ex) {}        try {            new IntRange(null, five);            fail();        } catch (IllegalArgumentException ex) {}        try {            new IntRange(null, null);            fail();        } catch (IllegalArgumentException ex) {}    }    //--------------------------------------------------------------------------    public void testContainsNumber() {        assertEquals(false, tenToTwenty.containsNumber(null));        assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));                assertEquals(false, tenToTwenty.containsNumber(five));        assertEquals(true, tenToTwenty.containsNumber(ten));        assertEquals(true, tenToTwenty.containsNumber(fifteen));        assertEquals(true, tenToTwenty.containsNumber(twenty));        assertEquals(false, tenToTwenty.containsNumber(twentyFive));                assertEquals(false, tenToTwenty.containsNumber(long8));        assertEquals(true, tenToTwenty.containsNumber(long10));        assertEquals(true, tenToTwenty.containsNumber(long12));        assertEquals(true, tenToTwenty.containsNumber(long20));        assertEquals(false, tenToTwenty.containsNumber(long21));                assertEquals(false, tenToTwenty.containsNumber(double8));        assertEquals(true, tenToTwenty.containsNumber(double10));        assertEquals(true, tenToTwenty.containsNumber(double12));        assertEquals(true, tenToTwenty.containsNumber(double20));        assertEquals(false, tenToTwenty.containsNumber(double21));                assertEquals(false, tenToTwenty.containsNumber(float8));        assertEquals(true, tenToTwenty.containsNumber(float10));        assertEquals(true, tenToTwenty.containsNumber(float12));        assertEquals(true, tenToTwenty.containsNumber(float20));        assertEquals(false, tenToTwenty.containsNumber(float21));    }    public void testContainsIntegerBig() {        IntRange big = new IntRange(Integer.MAX_VALUE, Integer.MAX_VALUE- 2);        assertEquals(true, big.containsInteger(Integer.MAX_VALUE - 1));        assertEquals(false, big.containsInteger(Integer.MAX_VALUE - 3));    }    public void testToArray() {        int[] threeItems = new IntRange(3, 5).toArray();        assertTrue(Arrays.equals(new int[]{3, 4, 5}, threeItems));        int[] oneItem = new IntRange(4).toArray();        assertTrue(Arrays.equals(new int[]{4}, oneItem));    }    //--------------------------------------------------------------------------    }
/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.lang.math;import junit.framework.Test;import junit.framework.TestSuite;/** * Test cases for the {@link FloatRange} class. * * @author Stephen Colebourne * @version $Id$ */public final class FloatRangeTest extends AbstractRangeTest {    public FloatRangeTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(FloatRangeTest.class);        suite.setName("FloatRange Tests");        return suite;    }        @Override    public void setUp() {        super.setUp();        tenToTwenty = new FloatRange(float10, float20);        otherRange = new NumberRange(ten, twenty);    }    @Override    protected Range createRange(Integer integer1, Integer integer2) {        return new FloatRange(integer1, integer2);    }    @Override    protected Range createRange(Integer integer) {        return new NumberRange(integer);    }        //--------------------------------------------------------------------------    public void testConstructor1a() {        FloatRange nr = new FloatRange(8f);        assertEquals(float8, nr.getMinimumNumber());        assertEquals(float8, nr.getMaximumNumber());                try {            new FloatRange(Float.NaN);            fail();        } catch (IllegalArgumentException ex) {}    }        public void testConstructor1b() {        FloatRange nr = new FloatRange(float8);        assertSame(float8, nr.getMinimumNumber());        assertSame(float8, nr.getMaximumNumber());                Range r = new FloatRange(nonComparableNumber);                try {            new FloatRange(null);            fail();        } catch (IllegalArgumentException ex) {}        try {            new FloatRange(new Double(Double.NaN));            fail();        } catch (IllegalArgumentException ex) {}    }        public void testConstructor2a() {        FloatRange nr = new FloatRange(8f, 10f);        assertEquals(float8, nr.getMinimumNumber());        assertEquals(float10, nr.getMaximumNumber());                nr = new FloatRange(10f, 8f);        assertEquals(float8, nr.getMinimumNumber());        assertEquals(float10, nr.getMaximumNumber());                try {            new FloatRange(Float.NaN, 8f);            fail();        } catch (IllegalArgumentException ex) {}    }    public void testConstructor2b() {        FloatRange nr = new FloatRange(float8, float10);        assertSame(float8, nr.getMinimumNumber());        assertSame(float10, nr.getMaximumNumber());                nr = new FloatRange(float10, float8);        assertSame(float8, nr.getMinimumNumber());        assertSame(float10, nr.getMaximumNumber());                nr = new FloatRange(float8, float10);        assertSame(float8, nr.getMinimumNumber());        assertEquals(float10, nr.getMaximumNumber());                // not null        try {            new FloatRange(float8, null);            fail();        } catch (IllegalArgumentException ex) {}        try {            new FloatRange(null, float8);            fail();        } catch (IllegalArgumentException ex) {}        try {            new FloatRange(null, null);            fail();        } catch (IllegalArgumentException ex) {}                try {            new FloatRange(new Double(Double.NaN), float10);            fail();        } catch (IllegalArgumentException ex) {}    }    //--------------------------------------------------------------------------    public void testContainsNumber() {        assertEquals(false, tenToTwenty.containsNumber(null));        assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));                assertEquals(false, tenToTwenty.containsNumber(five));        assertEquals(true, tenToTwenty.containsNumber(ten));        assertEquals(true, tenToTwenty.containsNumber(fifteen));        assertEquals(true, tenToTwenty.containsNumber(twenty));        assertEquals(false, tenToTwenty.containsNumber(twentyFive));                assertEquals(false, tenToTwenty.containsNumber(long8));        assertEquals(true, tenToTwenty.containsNumber(long10));        assertEquals(true, tenToTwenty.containsNumber(long12));        assertEquals(true, tenToTwenty.containsNumber(long20));        assertEquals(false, tenToTwenty.containsNumber(long21));                assertEquals(false, tenToTwenty.containsNumber(double8));        assertEquals(true, tenToTwenty.containsNumber(double10));        assertEquals(true, tenToTwenty.containsNumber(double12));        assertEquals(true, tenToTwenty.containsNumber(double20));        assertEquals(false, tenToTwenty.containsNumber(double21));                assertEquals(false, tenToTwenty.containsNumber(float8));        assertEquals(true, tenToTwenty.containsNumber(float10));        assertEquals(true, tenToTwenty.containsNumber(float12));        assertEquals(true, tenToTwenty.containsNumber(float20));        assertEquals(false, tenToTwenty.containsNumber(float21));    }    @Override    public void testToString() {        String str = tenToTwenty.toString();        assertEquals("Range[10.0,20.0]", str);        assertSame(str, tenToTwenty.toString());        assertEquals("Range[-20.0,-10.0]", createRange(new Integer(-20), new Integer(-10)).toString());    }        //--------------------------------------------------------------------------    }
/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.lang.math;import junit.framework.TestCase;/** * Test cases for the {@link Range} classes. * * @author Stephen Colebourne * @version $Id$ */public abstract class AbstractRangeTest extends TestCase {    protected Range tenToTwenty;    protected Range otherRange;        protected Integer five;    protected Integer ten;    protected Integer twelve;    protected Integer fifteen;    protected Integer twenty;    protected Integer twentyFive;    protected Long long8;    protected Long long10;    protected Long long12;    protected Long long20;    protected Long long21;    protected Double double8;    protected Double double10;    protected Double double12;    protected Double double20;    protected Double double21;    protected Float float8;    protected Float float10;    protected Float float12;    protected Float float20;    protected Float float21;        private static class InnerNumber extends Number {        @Override        public double doubleValue() {            return 12d;        }        @Override        public float floatValue() {            return 12f;        }        @Override        public int intValue() {            return 12;        }        @Override        public long longValue() {            return 12L;        }    }        protected InnerNumber nonComparableNumber = new InnerNumber();    public AbstractRangeTest(String name) {        super(name);    }    @Override    public void setUp() {        five = new Integer(5);        ten = new Integer(10);        twelve = new Integer(12);        fifteen = new Integer(15);        twenty = new Integer(20);        twentyFive = new Integer(25);        long8 = new Long(8);        long10 = new Long(10);        long12 = new Long(12);        long20 = new Long(20);        long21 = new Long(21);        double8 = new Double(8);        double10 = new Double(10);        double12 = new Double(12);        double20 = new Double(20);        double21 = new Double(21);        float8 = new Float(8);        float10 = new Float(10);        float12 = new Float(12);        float20 = new Float(20);        float21 = new Float(21);    }    // --------------------------------------------------------------------------    public void testGetMinimum() {        assertEquals(10L, tenToTwenty.getMinimumLong());        assertEquals(10, tenToTwenty.getMinimumInteger());        assertEquals(10d, tenToTwenty.getMinimumDouble(), 0.00001d);        assertEquals(10f, tenToTwenty.getMinimumFloat(), 0.00001f);    }        public void testGetMaximum() {        assertEquals(20L, tenToTwenty.getMaximumLong());        assertEquals(20, tenToTwenty.getMaximumInteger());        assertEquals(20d, tenToTwenty.getMaximumDouble(), 0.00001d);        assertEquals(20f, tenToTwenty.getMaximumFloat(), 0.00001f);    }    //--------------------------------------------------------------------------    public void testContainsLong() {        assertEquals(false, tenToTwenty.containsLong(null));        assertEquals(true, tenToTwenty.containsLong(nonComparableNumber));                assertEquals(false, tenToTwenty.containsLong(five));        assertEquals(true, tenToTwenty.containsLong(ten));        assertEquals(true, tenToTwenty.containsLong(fifteen));        assertEquals(true, tenToTwenty.containsLong(twenty));        assertEquals(false, tenToTwenty.containsLong(twentyFive));                assertEquals(false, tenToTwenty.containsLong(long8));        assertEquals(true, tenToTwenty.containsLong(long10));        assertEquals(true, tenToTwenty.containsLong(long12));        assertEquals(true, tenToTwenty.containsLong(long20));        assertEquals(false, tenToTwenty.containsLong(long21));                assertEquals(false, tenToTwenty.containsLong(double8));        assertEquals(true, tenToTwenty.containsLong(double10));        assertEquals(true, tenToTwenty.containsLong(double12));        assertEquals(true, tenToTwenty.containsLong(double20));        assertEquals(false, tenToTwenty.containsLong(double21));                assertEquals(false, tenToTwenty.containsLong(float8));        assertEquals(true, tenToTwenty.containsLong(float10));        assertEquals(true, tenToTwenty.containsLong(float12));        assertEquals(true, tenToTwenty.containsLong(float20));        assertEquals(false, tenToTwenty.containsLong(float21));                assertEquals(false, tenToTwenty.containsLong(9L));        assertEquals(true, tenToTwenty.containsLong(10L));        assertEquals(true, tenToTwenty.containsLong(15L));        assertEquals(true, tenToTwenty.containsLong(20L));        assertEquals(false, tenToTwenty.containsLong(21L));    }            public void testContainsInteger() {        assertEquals(false, tenToTwenty.containsInteger(null));        assertEquals(true, tenToTwenty.containsInteger(nonComparableNumber));                assertEquals(false, tenToTwenty.containsInteger(five));        assertEquals(true, tenToTwenty.containsInteger(ten));        assertEquals(true, tenToTwenty.containsInteger(fifteen));        assertEquals(true, tenToTwenty.containsInteger(twenty));        assertEquals(false, tenToTwenty.containsInteger(twentyFive));                assertEquals(false, tenToTwenty.containsInteger(long8));        assertEquals(true, tenToTwenty.containsInteger(long10));        assertEquals(true, tenToTwenty.containsInteger(long12));        assertEquals(true, tenToTwenty.containsInteger(long20));        assertEquals(false, tenToTwenty.containsInteger(long21));                assertEquals(false, tenToTwenty.containsInteger(double8));        assertEquals(true, tenToTwenty.containsInteger(double10));        assertEquals(true, tenToTwenty.containsInteger(double12));        assertEquals(true, tenToTwenty.containsInteger(double20));        assertEquals(false, tenToTwenty.containsInteger(double21));                assertEquals(false, tenToTwenty.containsInteger(float8));        assertEquals(true, tenToTwenty.containsInteger(float10));        assertEquals(true, tenToTwenty.containsInteger(float12));        assertEquals(true, tenToTwenty.containsInteger(float20));        assertEquals(false, tenToTwenty.containsInteger(float21));                assertEquals(false, tenToTwenty.containsInteger(9));        assertEquals(true, tenToTwenty.containsInteger(10));        assertEquals(true, tenToTwenty.containsInteger(15));        assertEquals(true, tenToTwenty.containsInteger(20));        assertEquals(false, tenToTwenty.containsInteger(21));    }    public void testContainsDouble() {        assertEquals(false, tenToTwenty.containsDouble(null));        assertEquals(true, tenToTwenty.containsDouble(nonComparableNumber));                assertEquals(false, tenToTwenty.containsDouble(five));        assertEquals(true, tenToTwenty.containsDouble(ten));        assertEquals(true, tenToTwenty.containsDouble(fifteen));        assertEquals(true, tenToTwenty.containsDouble(twenty));        assertEquals(false, tenToTwenty.containsDouble(twentyFive));                assertEquals(false, tenToTwenty.containsDouble(long8));        assertEquals(true, tenToTwenty.containsDouble(long10));        assertEquals(true, tenToTwenty.containsDouble(long12));        assertEquals(true, tenToTwenty.containsDouble(long20));        assertEquals(false, tenToTwenty.containsDouble(long21));                assertEquals(false, tenToTwenty.containsDouble(double8));        assertEquals(true, tenToTwenty.containsDouble(double10));        assertEquals(true, tenToTwenty.containsDouble(double12));        assertEquals(true, tenToTwenty.containsDouble(double20));        assertEquals(false, tenToTwenty.containsDouble(double21));                assertEquals(false, tenToTwenty.containsDouble(float8));        assertEquals(true, tenToTwenty.containsDouble(float10));        assertEquals(true, tenToTwenty.containsDouble(float12));        assertEquals(true, tenToTwenty.containsDouble(float20));        assertEquals(false, tenToTwenty.containsDouble(float21));                assertEquals(false, tenToTwenty.containsDouble(9d));        assertEquals(true, tenToTwenty.containsDouble(10d));        assertEquals(true, tenToTwenty.containsDouble(15d));        assertEquals(true, tenToTwenty.containsDouble(20d));        assertEquals(false, tenToTwenty.containsDouble(21d));    }    public void testContainsFloat() {        assertEquals(false, tenToTwenty.containsFloat(null));        assertEquals(true, tenToTwenty.containsFloat(nonComparableNumber));                assertEquals(false, tenToTwenty.containsFloat(five));        assertEquals(true, tenToTwenty.containsFloat(ten));        assertEquals(true, tenToTwenty.containsFloat(fifteen));        assertEquals(true, tenToTwenty.containsFloat(twenty));        assertEquals(false, tenToTwenty.containsFloat(twentyFive));                assertEquals(false, tenToTwenty.containsFloat(long8));        assertEquals(true, tenToTwenty.containsFloat(long10));        assertEquals(true, tenToTwenty.containsFloat(long12));        assertEquals(true, tenToTwenty.containsFloat(long20));        assertEquals(false, tenToTwenty.containsFloat(long21));                assertEquals(false, tenToTwenty.containsFloat(double8));        assertEquals(true, tenToTwenty.containsFloat(double10));        assertEquals(true, tenToTwenty.containsFloat(double12));        assertEquals(true, tenToTwenty.containsFloat(double20));        assertEquals(false, tenToTwenty.containsFloat(double21));                assertEquals(false, tenToTwenty.containsFloat(float8));        assertEquals(true, tenToTwenty.containsFloat(float10));        assertEquals(true, tenToTwenty.containsFloat(float12));        assertEquals(true, tenToTwenty.containsFloat(float20));        assertEquals(false, tenToTwenty.containsFloat(float21));                assertEquals(false, tenToTwenty.containsFloat(9f));        assertEquals(true, tenToTwenty.containsFloat(10f));        assertEquals(true, tenToTwenty.containsFloat(15f));        assertEquals(true, tenToTwenty.containsFloat(20f));        assertEquals(false, tenToTwenty.containsFloat(21f));    }    //--------------------------------------------------------------------------    public void testContainsRange() {        assertEquals(false, tenToTwenty.containsRange(null));        assertEquals(false, tenToTwenty.containsRange(createRange(five, five)));        assertEquals(false, tenToTwenty.containsRange(createRange(five, ten)));        assertEquals(false, tenToTwenty.containsRange(createRange(five, twelve)));        assertEquals(false, tenToTwenty.containsRange(createRange(five, fifteen)));        assertEquals(false, tenToTwenty.containsRange(createRange(five, twenty)));        assertEquals(false, tenToTwenty.containsRange(createRange(five, twentyFive)));                assertEquals(true, tenToTwenty.containsRange(createRange(ten, ten)));        assertEquals(true, tenToTwenty.containsRange(createRange(ten, twelve)));        assertEquals(true, tenToTwenty.containsRange(createRange(ten, fifteen)));        assertEquals(true, tenToTwenty.containsRange(createRange(ten, twenty)));        assertEquals(false, tenToTwenty.containsRange(createRange(ten, twentyFive)));                assertEquals(true, tenToTwenty.containsRange(createRange(twelve, twelve)));        assertEquals(true, tenToTwenty.containsRange(createRange(twelve, fifteen)));        assertEquals(true, tenToTwenty.containsRange(createRange(twelve, twenty)));        assertEquals(false, tenToTwenty.containsRange(createRange(twelve, twentyFive)));                assertEquals(true, tenToTwenty.containsRange(createRange(fifteen, fifteen)));        assertEquals(true, tenToTwenty.containsRange(createRange(fifteen, twenty)));        assertEquals(false, tenToTwenty.containsRange(createRange(fifteen, twentyFive)));                assertEquals(true, tenToTwenty.containsRange(createRange(twenty, twenty)));        assertEquals(false, tenToTwenty.containsRange(createRange(twenty, twentyFive)));                assertEquals(false, tenToTwenty.containsRange(createRange(twentyFive, twentyFive)));    }    public void testOverlapsRange() {        assertEquals(false, tenToTwenty.overlapsRange(null));        assertEquals(false, tenToTwenty.overlapsRange(createRange(five, five)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, ten)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twelve)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, fifteen)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twenty)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twentyFive)));                assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, ten)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twelve)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, fifteen)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twenty)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twentyFive)));                assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twelve)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, fifteen)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twenty)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twentyFive)));                assertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, fifteen)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, twenty)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, twentyFive)));                assertEquals(true, tenToTwenty.overlapsRange(createRange(twenty, twenty)));        assertEquals(true, tenToTwenty.overlapsRange(createRange(twenty, twentyFive)));                assertEquals(false, tenToTwenty.overlapsRange(createRange(twentyFive, twentyFive)));    }    //--------------------------------------------------------------------------    public void testEquals() {        assertEquals(false, tenToTwenty.equals(createRange(ten, fifteen)));        assertEquals(false, tenToTwenty.equals(createRange(ten, twentyFive)));                assertEquals(false, tenToTwenty.equals(createRange(fifteen, twenty)));        assertEquals(false, tenToTwenty.equals(createRange(five, twenty)));                assertEquals(false, tenToTwenty.equals(createRange(five, ten)));        assertEquals(false, tenToTwenty.equals(createRange(ten)));        assertEquals(true, tenToTwenty.equals(tenToTwenty));        assertEquals(true, tenToTwenty.equals(createRange(ten, twenty)));        assertEquals(true, tenToTwenty.equals(createRange(twenty, ten)));                assertEquals(false, tenToTwenty.equals(null));        assertEquals(false, tenToTwenty.equals(new Object()));        assertEquals(false, tenToTwenty.equals(otherRange));    }    public void testHashCode() {        assertEquals(tenToTwenty.hashCode(), tenToTwenty.hashCode());        assertTrue(tenToTwenty.hashCode() != 0);    }        public void testToString() {        String str = tenToTwenty.toString();        assertEquals("Range[10,20]", str);        assertSame(str, tenToTwenty.toString());        assertEquals("Range[-20,-10]", createRange(new Integer(-20), new Integer(-10)).toString());    }    protected abstract Range createRange(Integer integer);    protected abstract Range createRange(Integer integer1, Integer integer2);}
/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.lang.math;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Test cases for the {@link Fraction} class * * @author Stephen Colebourne * @author C. Scott Ananian * @version $Id$ */public class FractionTest extends TestCase {        private static final int SKIP = 500;  //53    public FractionTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(FractionTest.class);        suite.setName("Fraction Tests");        return suite;    }        @Override    public void setUp() {    }    //--------------------------------------------------------------------------        public void testConstants() {        assertEquals(0, Fraction.ZERO.getNumerator());        assertEquals(1, Fraction.ZERO.getDenominator());                assertEquals(1, Fraction.ONE.getNumerator());        assertEquals(1, Fraction.ONE.getDenominator());                assertEquals(1, Fraction.ONE_HALF.getNumerator());        assertEquals(2, Fraction.ONE_HALF.getDenominator());                assertEquals(1, Fraction.ONE_THIRD.getNumerator());        assertEquals(3, Fraction.ONE_THIRD.getDenominator());                assertEquals(2, Fraction.TWO_THIRDS.getNumerator());        assertEquals(3, Fraction.TWO_THIRDS.getDenominator());                assertEquals(1, Fraction.ONE_QUARTER.getNumerator());        assertEquals(4, Fraction.ONE_QUARTER.getDenominator());                assertEquals(2, Fraction.TWO_QUARTERS.getNumerator());        assertEquals(4, Fraction.TWO_QUARTERS.getDenominator());                assertEquals(3, Fraction.THREE_QUARTERS.getNumerator());        assertEquals(4, Fraction.THREE_QUARTERS.getDenominator());                assertEquals(1, Fraction.ONE_FIFTH.getNumerator());        assertEquals(5, Fraction.ONE_FIFTH.getDenominator());                assertEquals(2, Fraction.TWO_FIFTHS.getNumerator());        assertEquals(5, Fraction.TWO_FIFTHS.getDenominator());                assertEquals(3, Fraction.THREE_FIFTHS.getNumerator());        assertEquals(5, Fraction.THREE_FIFTHS.getDenominator());                assertEquals(4, Fraction.FOUR_FIFTHS.getNumerator());        assertEquals(5, Fraction.FOUR_FIFTHS.getDenominator());    }    public void testFactory_int_int() {        Fraction f = null;                // zero        f = Fraction.getFraction(0, 1);        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getFraction(0, 2);        assertEquals(0, f.getNumerator());        assertEquals(2, f.getDenominator());                // normal        f = Fraction.getFraction(1, 1);        assertEquals(1, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getFraction(2, 1);        assertEquals(2, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getFraction(23, 345);        assertEquals(23, f.getNumerator());        assertEquals(345, f.getDenominator());                // improper        f = Fraction.getFraction(22, 7);        assertEquals(22, f.getNumerator());        assertEquals(7, f.getDenominator());                // negatives        f = Fraction.getFraction(-6, 10);        assertEquals(-6, f.getNumerator());        assertEquals(10, f.getDenominator());                f = Fraction.getFraction(6, -10);        assertEquals(-6, f.getNumerator());        assertEquals(10, f.getDenominator());                f = Fraction.getFraction(-6, -10);        assertEquals(6, f.getNumerator());        assertEquals(10, f.getDenominator());                // zero denominator        try {            f = Fraction.getFraction(1, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(2, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(-3, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        // very large: can't represent as unsimplified fraction, although        try {            f = Fraction.getFraction(4, Integer.MIN_VALUE);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        try {            f = Fraction.getFraction(1, Integer.MIN_VALUE);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}    }    public void testFactory_int_int_int() {        Fraction f = null;                // zero        f = Fraction.getFraction(0, 0, 2);        assertEquals(0, f.getNumerator());        assertEquals(2, f.getDenominator());                f = Fraction.getFraction(2, 0, 2);        assertEquals(4, f.getNumerator());        assertEquals(2, f.getDenominator());                f = Fraction.getFraction(0, 1, 2);        assertEquals(1, f.getNumerator());        assertEquals(2, f.getDenominator());                // normal        f = Fraction.getFraction(1, 1, 2);        assertEquals(3, f.getNumerator());        assertEquals(2, f.getDenominator());                // negatives        try {            f = Fraction.getFraction(1, -6, -10);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        try {            f = Fraction.getFraction(1, -6, -10);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        try {            f = Fraction.getFraction(1, -6, -10);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                // negative whole        f = Fraction.getFraction(-1, 6, 10);        assertEquals(-16, f.getNumerator());        assertEquals(10, f.getDenominator());                try {            f = Fraction.getFraction(-1, -6, 10);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        try {            f = Fraction.getFraction(-1, 6, -10);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(-1, -6, -10);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                // zero denominator        try {            f = Fraction.getFraction(0, 1, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(1, 2, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(-1, -3, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(Integer.MAX_VALUE, 1, 2);             fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(-Integer.MAX_VALUE, 1, 2);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        // very large        f = Fraction.getFraction(-1, 0, Integer.MAX_VALUE);        assertEquals(-Integer.MAX_VALUE, f.getNumerator());        assertEquals(Integer.MAX_VALUE, f.getDenominator());        try {            // negative denominators not allowed in this constructor.            f = Fraction.getFraction(0, 4, Integer.MIN_VALUE);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        try {            f = Fraction.getFraction(1, 1, Integer.MAX_VALUE);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        try {            f = Fraction.getFraction(-1, 2, Integer.MAX_VALUE);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}    }    public void testReducedFactory_int_int() {        Fraction f = null;                // zero        f = Fraction.getReducedFraction(0, 1);        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                // normal        f = Fraction.getReducedFraction(1, 1);        assertEquals(1, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getReducedFraction(2, 1);        assertEquals(2, f.getNumerator());        assertEquals(1, f.getDenominator());                // improper        f = Fraction.getReducedFraction(22, 7);        assertEquals(22, f.getNumerator());        assertEquals(7, f.getDenominator());                // negatives        f = Fraction.getReducedFraction(-6, 10);        assertEquals(-3, f.getNumerator());        assertEquals(5, f.getDenominator());                f = Fraction.getReducedFraction(6, -10);        assertEquals(-3, f.getNumerator());        assertEquals(5, f.getDenominator());                f = Fraction.getReducedFraction(-6, -10);        assertEquals(3, f.getNumerator());        assertEquals(5, f.getDenominator());                // zero denominator        try {            f = Fraction.getReducedFraction(1, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getReducedFraction(2, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getReducedFraction(-3, 0);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        // reduced                f = Fraction.getReducedFraction(0, 2);        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getReducedFraction(2, 2);        assertEquals(1, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getReducedFraction(2, 4);        assertEquals(1, f.getNumerator());        assertEquals(2, f.getDenominator());                f = Fraction.getReducedFraction(15, 10);        assertEquals(3, f.getNumerator());        assertEquals(2, f.getDenominator());                f = Fraction.getReducedFraction(121, 22);        assertEquals(11, f.getNumerator());        assertEquals(2, f.getDenominator());                // Extreme values         // OK, can reduce before negating        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);        assertEquals(1, f.getNumerator());        assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                // Can't reduce, negation will throw        try {             f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);              fail("Expecting ArithmeticException");        } catch (ArithmeticException ex) {}          }    public void testFactory_double() {        Fraction f = null;                try {            f = Fraction.getFraction(Double.NaN);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(Double.POSITIVE_INFINITY);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction(Double.NEGATIVE_INFINITY);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                try {            f = Fraction.getFraction((double) Integer.MAX_VALUE + 1);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                // zero        f = Fraction.getFraction(0.0d);        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                // one        f = Fraction.getFraction(1.0d);        assertEquals(1, f.getNumerator());        assertEquals(1, f.getDenominator());                // one half        f = Fraction.getFraction(0.5d);        assertEquals(1, f.getNumerator());        assertEquals(2, f.getDenominator());                // negative        f = Fraction.getFraction(-0.875d);        assertEquals(-7, f.getNumerator());        assertEquals(8, f.getDenominator());                // over 1        f = Fraction.getFraction(1.25d);        assertEquals(5, f.getNumerator());        assertEquals(4, f.getDenominator());                // two thirds        f = Fraction.getFraction(0.66666d);        assertEquals(2, f.getNumerator());        assertEquals(3, f.getDenominator());                // small        f = Fraction.getFraction(1.0d/10001d);        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                // normal        Fraction f2 = null;        for (int i = 1; i <= 100; i++) {  // denominator            for (int j = 1; j <= i; j++) {  // numerator                try {                    f = Fraction.getFraction((double) j / (double) i);                } catch (ArithmeticException ex) {                    System.err.println(j + " " + i);                    throw ex;                }                f2 = Fraction.getReducedFraction(j, i);                assertEquals(f2.getNumerator(), f.getNumerator());                assertEquals(f2.getDenominator(), f.getDenominator());            }        }        // save time by skipping some tests!  (        for (int i = 1001; i <= 10000; i+=SKIP) {  // denominator            for (int j = 1; j <= i; j++) {  // numerator                try {                    f = Fraction.getFraction((double) j / (double) i);                } catch (ArithmeticException ex) {                    System.err.println(j + " " + i);                    throw ex;                }                f2 = Fraction.getReducedFraction(j, i);                assertEquals(f2.getNumerator(), f.getNumerator());                assertEquals(f2.getDenominator(), f.getDenominator());            }        }    }    public void testFactory_String() {        try {            Fraction.getFraction(null);            fail("expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {}    }            public void testFactory_String_double() {        Fraction f = null;                f = Fraction.getFraction("0.0");        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getFraction("0.2");        assertEquals(1, f.getNumerator());        assertEquals(5, f.getDenominator());                f = Fraction.getFraction("0.5");        assertEquals(1, f.getNumerator());        assertEquals(2, f.getDenominator());                f = Fraction.getFraction("0.66666");        assertEquals(2, f.getNumerator());        assertEquals(3, f.getDenominator());                try {            f = Fraction.getFraction("2.3R");            fail("Expecting NumberFormatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction("2147483648"); // too big            fail("Expecting NumberFormatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction(".");            fail("Expecting NumberFormatException");        } catch (NumberFormatException ex) {}    }    public void testFactory_String_proper() {        Fraction f = null;                f = Fraction.getFraction("0 0/1");        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getFraction("1 1/5");        assertEquals(6, f.getNumerator());        assertEquals(5, f.getDenominator());                f = Fraction.getFraction("7 1/2");        assertEquals(15, f.getNumerator());        assertEquals(2, f.getDenominator());                f = Fraction.getFraction("1 2/4");        assertEquals(6, f.getNumerator());        assertEquals(4, f.getDenominator());                f = Fraction.getFraction("-7 1/2");        assertEquals(-15, f.getNumerator());        assertEquals(2, f.getDenominator());                f = Fraction.getFraction("-1 2/4");        assertEquals(-6, f.getNumerator());        assertEquals(4, f.getDenominator());                try {            f = Fraction.getFraction("2 3");            fail("expecting NumberFormatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction("a 3");            fail("expecting NumberFormatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction("2 b/4");            fail("expecting NumberFormatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction("2 ");            fail("expecting NumberFormatException");        } catch (NumberFormatException ex) {}        try {            f = Fraction.getFraction(" 3");            fail("expecting NumberFormatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction(" ");            fail("expecting NumberFormatException");        } catch (NumberFormatException ex) {}    }    public void testFactory_String_improper() {        Fraction f = null;                f = Fraction.getFraction("0/1");        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                f = Fraction.getFraction("1/5");        assertEquals(1, f.getNumerator());        assertEquals(5, f.getDenominator());                f = Fraction.getFraction("1/2");        assertEquals(1, f.getNumerator());        assertEquals(2, f.getDenominator());                f = Fraction.getFraction("2/3");        assertEquals(2, f.getNumerator());        assertEquals(3, f.getDenominator());                f = Fraction.getFraction("7/3");        assertEquals(7, f.getNumerator());        assertEquals(3, f.getDenominator());                f = Fraction.getFraction("2/4");        assertEquals(2, f.getNumerator());        assertEquals(4, f.getDenominator());                try {            f = Fraction.getFraction("2/d");            fail("expecting NumberFormatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction("2e/3");            fail("expecting NumberFormatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction("2/");            fail("expecting NumberFormatException");        } catch (NumberFormatException ex) {}                try {            f = Fraction.getFraction("/");            fail("expecting NumberFormatException");        } catch (NumberFormatException ex) {}    }    public void testGets() {        Fraction f = null;                f = Fraction.getFraction(3, 5, 6);        assertEquals(23, f.getNumerator());        assertEquals(3, f.getProperWhole());        assertEquals(5, f.getProperNumerator());        assertEquals(6, f.getDenominator());                f = Fraction.getFraction(-3, 5, 6);        assertEquals(-23, f.getNumerator());        assertEquals(-3, f.getProperWhole());        assertEquals(5, f.getProperNumerator());        assertEquals(6, f.getDenominator());        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);        assertEquals(Integer.MIN_VALUE, f.getNumerator());        assertEquals(Integer.MIN_VALUE, f.getProperWhole());        assertEquals(0, f.getProperNumerator());        assertEquals(1, f.getDenominator());    }                public void testConversions() {        Fraction f = null;                f = Fraction.getFraction(3, 7, 8);        assertEquals(3, f.intValue());        assertEquals(3L, f.longValue());        assertEquals(3.875f, f.floatValue(), 0.00001f);        assertEquals(3.875d, f.doubleValue(), 0.00001d);    }        public void testReduce() {        Fraction f = null;                f = Fraction.getFraction(50, 75);        Fraction result = f.reduce();        assertEquals(2, result.getNumerator());        assertEquals(3, result.getDenominator());        f = Fraction.getFraction(-2, -3);        result = f.reduce();        assertEquals(2, result.getNumerator());        assertEquals(3, result.getDenominator());        f = Fraction.getFraction(2, -3);        result = f.reduce();        assertEquals(-2, result.getNumerator());        assertEquals(3, result.getDenominator());        f = Fraction.getFraction(-2, 3);        result = f.reduce();        assertEquals(-2, result.getNumerator());        assertEquals(3, result.getDenominator());        assertSame(f, result);        f = Fraction.getFraction(2, 3);        result = f.reduce();        assertEquals(2, result.getNumerator());        assertEquals(3, result.getDenominator());        assertSame(f, result);        f = Fraction.getFraction(0, 1);        result = f.reduce();        assertEquals(0, result.getNumerator());        assertEquals(1, result.getDenominator());        assertSame(f, result);        f = Fraction.getFraction(0, 100);        result = f.reduce();        assertEquals(0, result.getNumerator());        assertEquals(1, result.getDenominator());        assertSame(result, Fraction.ZERO);    }        public void testInvert() {        Fraction f = null;                f = Fraction.getFraction(50, 75);        f = f.invert();        assertEquals(75, f.getNumerator());        assertEquals(50, f.getDenominator());                f = Fraction.getFraction(4, 3);        f = f.invert();        assertEquals(3, f.getNumerator());        assertEquals(4, f.getDenominator());                f = Fraction.getFraction(-15, 47);        f = f.invert();        assertEquals(-47, f.getNumerator());        assertEquals(15, f.getDenominator());                f = Fraction.getFraction(0, 3);        try {            f = f.invert();            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        // large values        f = Fraction.getFraction(Integer.MIN_VALUE, 1);        try {            f = f.invert();            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        f = Fraction.getFraction(Integer.MAX_VALUE, 1);        f = f.invert();        assertEquals(1, f.getNumerator());        assertEquals(Integer.MAX_VALUE, f.getDenominator());    }        public void testNegate() {        Fraction f = null;                f = Fraction.getFraction(50, 75);        f = f.negate();        assertEquals(-50, f.getNumerator());        assertEquals(75, f.getDenominator());                f = Fraction.getFraction(-50, 75);        f = f.negate();        assertEquals(50, f.getNumerator());        assertEquals(75, f.getDenominator());        // large values        f = Fraction.getFraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);        f = f.negate();        assertEquals(Integer.MIN_VALUE+2, f.getNumerator());        assertEquals(Integer.MAX_VALUE, f.getDenominator());        f = Fraction.getFraction(Integer.MIN_VALUE, 1);        try {            f = f.negate();            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}    }        public void testAbs() {        Fraction f = null;                f = Fraction.getFraction(50, 75);        f = f.abs();        assertEquals(50, f.getNumerator());        assertEquals(75, f.getDenominator());                f = Fraction.getFraction(-50, 75);        f = f.abs();        assertEquals(50, f.getNumerator());        assertEquals(75, f.getDenominator());        f = Fraction.getFraction(Integer.MAX_VALUE, 1);        f = f.abs();        assertEquals(Integer.MAX_VALUE, f.getNumerator());        assertEquals(1, f.getDenominator());        f = Fraction.getFraction(Integer.MAX_VALUE, -1);        f = f.abs();        assertEquals(Integer.MAX_VALUE, f.getNumerator());        assertEquals(1, f.getDenominator());        f = Fraction.getFraction(Integer.MIN_VALUE, 1);        try {            f = f.abs();            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}    }        public void testPow() {        Fraction f = null;                f = Fraction.getFraction(3, 5);        assertEquals(Fraction.ONE, f.pow(0));                f = Fraction.getFraction(3, 5);        assertSame(f, f.pow(1));        assertEquals(f, f.pow(1));        f = Fraction.getFraction(3, 5);        f = f.pow(2);        assertEquals(9, f.getNumerator());        assertEquals(25, f.getDenominator());                f = Fraction.getFraction(3, 5);        f = f.pow(3);        assertEquals(27, f.getNumerator());        assertEquals(125, f.getDenominator());                f = Fraction.getFraction(3, 5);        f = f.pow(-1);        assertEquals(5, f.getNumerator());        assertEquals(3, f.getDenominator());                f = Fraction.getFraction(3, 5);        f = f.pow(-2);        assertEquals(25, f.getNumerator());        assertEquals(9, f.getDenominator());                // check unreduced fractions stay that way.        f = Fraction.getFraction(6, 10);        assertEquals(Fraction.ONE, f.pow(0));                f = Fraction.getFraction(6, 10);        assertEquals(f, f.pow(1));        assertFalse(f.pow(1).equals(Fraction.getFraction(3,5)));        f = Fraction.getFraction(6, 10);        f = f.pow(2);        assertEquals(9, f.getNumerator());        assertEquals(25, f.getDenominator());                f = Fraction.getFraction(6, 10);        f = f.pow(3);        assertEquals(27, f.getNumerator());        assertEquals(125, f.getDenominator());                f = Fraction.getFraction(6, 10);        f = f.pow(-1);        assertEquals(10, f.getNumerator());        assertEquals(6, f.getDenominator());                f = Fraction.getFraction(6, 10);        f = f.pow(-2);        assertEquals(25, f.getNumerator());        assertEquals(9, f.getDenominator());                // zero to any positive power is still zero.        f = Fraction.getFraction(0, 1231);        f = f.pow(1);        assertTrue(0==f.compareTo(Fraction.ZERO));        assertEquals(0, f.getNumerator());        assertEquals(1231, f.getDenominator());        f = f.pow(2);        assertTrue(0==f.compareTo(Fraction.ZERO));        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());        // zero to negative powers should throw an exception        try {            f = f.pow(-1);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        try {            f = f.pow(Integer.MIN_VALUE);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        // one to any power is still one.        f = Fraction.getFraction(1, 1);        f = f.pow(0);        assertEquals(f, Fraction.ONE);        f = f.pow(1);        assertEquals(f, Fraction.ONE);        f = f.pow(-1);        assertEquals(f, Fraction.ONE);        f = f.pow(Integer.MAX_VALUE);        assertEquals(f, Fraction.ONE);        f = f.pow(Integer.MIN_VALUE);        assertEquals(f, Fraction.ONE);        f = Fraction.getFraction(Integer.MAX_VALUE, 1);        try {            f = f.pow(2);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        // Numerator growing too negative during the pow operation.        f = Fraction.getFraction(Integer.MIN_VALUE, 1);        try {            f = f.pow(3);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        f = Fraction.getFraction(65536, 1);        try {            f = f.pow(2);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}    }        public void testAdd() {        Fraction f = null;        Fraction f1 = null;        Fraction f2 = null;                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(1, 5);        f = f1.add(f2);        assertEquals(4, f.getNumerator());        assertEquals(5, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(2, 5);        f = f1.add(f2);        assertEquals(1, f.getNumerator());        assertEquals(1, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(3, 5);        f = f1.add(f2);        assertEquals(6, f.getNumerator());        assertEquals(5, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(-4, 5);        f = f1.add(f2);        assertEquals(-1, f.getNumerator());        assertEquals(5, f.getDenominator());                f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);        f2 = Fraction.ONE;        f = f1.add(f2);        assertEquals(Integer.MAX_VALUE, f.getNumerator());        assertEquals(1, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(1, 2);        f = f1.add(f2);        assertEquals(11, f.getNumerator());        assertEquals(10, f.getDenominator());                f1 = Fraction.getFraction(3, 8);        f2 = Fraction.getFraction(1, 6);        f = f1.add(f2);        assertEquals(13, f.getNumerator());        assertEquals(24, f.getDenominator());                f1 = Fraction.getFraction(0, 5);        f2 = Fraction.getFraction(1, 5);        f = f1.add(f2);        assertSame(f2, f);        f = f2.add(f1);        assertSame(f2, f);                f1 = Fraction.getFraction(-1, 13*13*2*2);        f2 = Fraction.getFraction(-2, 13*17*2);        f = f1.add(f2);        assertEquals(13*13*17*2*2, f.getDenominator());        assertEquals(-17 - 2*13*2, f.getNumerator());                try {            f.add(null);            fail("expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {}                // if this fraction is added naively, it will overflow.        // check that it doesn't.        f1 = Fraction.getFraction(1,32768*3);        f2 = Fraction.getFraction(1,59049);        f = f1.add(f2);        assertEquals(52451, f.getNumerator());        assertEquals(1934917632, f.getDenominator());        f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);        f2 = Fraction.ONE_THIRD;        f = f1.add(f2);        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());        assertEquals(3, f.getDenominator());                f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);        f2 = Fraction.ONE;        f = f1.add(f2);        assertEquals(Integer.MAX_VALUE, f.getNumerator());        assertEquals(1, f.getDenominator());                try {            f = f.add(Fraction.ONE); // should overflow            fail("expecting ArithmeticException but got: " + f.toString());        } catch (ArithmeticException ex) {}                // denominator should not be a multiple of 2 or 3 to trigger overflow        f1 = Fraction.getFraction(Integer.MIN_VALUE, 5);        f2 = Fraction.getFraction(-1,5);        try {            f = f1.add(f2); // should overflow            fail("expecting ArithmeticException but got: " + f.toString());        } catch (ArithmeticException ex) {}                try {            f= Fraction.getFraction(-Integer.MAX_VALUE, 1);            f = f.add(f);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                    try {            f= Fraction.getFraction(-Integer.MAX_VALUE, 1);            f = f.add(f);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                    f1 = Fraction.getFraction(3,327680);        f2 = Fraction.getFraction(2,59049);        try {            f = f1.add(f2); // should overflow            fail("expecting ArithmeticException but got: " + f.toString());        } catch (ArithmeticException ex) {}    }                public void testSubtract() {        Fraction f = null;        Fraction f1 = null;        Fraction f2 = null;                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(1, 5);        f = f1.subtract(f2);        assertEquals(2, f.getNumerator());        assertEquals(5, f.getDenominator());                f1 = Fraction.getFraction(7, 5);        f2 = Fraction.getFraction(2, 5);        f = f1.subtract(f2);        assertEquals(1, f.getNumerator());        assertEquals(1, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(3, 5);        f = f1.subtract(f2);        assertEquals(0, f.getNumerator());        assertEquals(1, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(-4, 5);        f = f1.subtract(f2);        assertEquals(7, f.getNumerator());        assertEquals(5, f.getDenominator());                f1 = Fraction.getFraction(0, 5);        f2 = Fraction.getFraction(4, 5);        f = f1.subtract(f2);        assertEquals(-4, f.getNumerator());        assertEquals(5, f.getDenominator());                f1 = Fraction.getFraction(0, 5);        f2 = Fraction.getFraction(-4, 5);        f = f1.subtract(f2);        assertEquals(4, f.getNumerator());        assertEquals(5, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(1, 2);        f = f1.subtract(f2);        assertEquals(1, f.getNumerator());        assertEquals(10, f.getDenominator());                f1 = Fraction.getFraction(0, 5);        f2 = Fraction.getFraction(1, 5);        f = f2.subtract(f1);        assertSame(f2, f);                try {            f.subtract(null);            fail("expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {}                // if this fraction is subtracted naively, it will overflow.        // check that it doesn't.        f1 = Fraction.getFraction(1,32768*3);        f2 = Fraction.getFraction(1,59049);        f = f1.subtract(f2);        assertEquals(-13085, f.getNumerator());        assertEquals(1934917632, f.getDenominator());        f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);        f2 = Fraction.ONE_THIRD.negate();        f = f1.subtract(f2);        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());        assertEquals(3, f.getDenominator());                f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);        f2 = Fraction.ONE;        f = f1.subtract(f2);        assertEquals(Integer.MAX_VALUE-1, f.getNumerator());        assertEquals(1, f.getDenominator());        try {            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);            f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1);            f = f1.subtract(f2);            fail("expecting ArithmeticException");  //should overflow        } catch (ArithmeticException ex) {}                    // denominator should not be a multiple of 2 or 3 to trigger overflow        f1 = Fraction.getFraction(Integer.MIN_VALUE, 5);        f2 = Fraction.getFraction(1,5);        try {            f = f1.subtract(f2); // should overflow            fail("expecting ArithmeticException but got: " + f.toString());        } catch (ArithmeticException ex) {}                try {            f= Fraction.getFraction(Integer.MIN_VALUE, 1);            f = f.subtract(Fraction.ONE);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                    try {            f= Fraction.getFraction(Integer.MAX_VALUE, 1);            f = f.subtract(Fraction.ONE.negate());            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                    f1 = Fraction.getFraction(3,327680);        f2 = Fraction.getFraction(2,59049);        try {            f = f1.subtract(f2); // should overflow            fail("expecting ArithmeticException but got: " + f.toString());        } catch (ArithmeticException ex) {}    }                public void testMultiply() {        Fraction f = null;        Fraction f1 = null;        Fraction f2 = null;                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(2, 5);        f = f1.multiplyBy(f2);        assertEquals(6, f.getNumerator());        assertEquals(25, f.getDenominator());                f1 = Fraction.getFraction(6, 10);        f2 = Fraction.getFraction(6, 10);        f = f1.multiplyBy(f2);        assertEquals(9, f.getNumerator());        assertEquals(25, f.getDenominator());        f = f.multiplyBy(f2);        assertEquals(27, f.getNumerator());        assertEquals(125, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(-2, 5);        f = f1.multiplyBy(f2);        assertEquals(-6, f.getNumerator());        assertEquals(25, f.getDenominator());                f1 = Fraction.getFraction(-3, 5);        f2 = Fraction.getFraction(-2, 5);        f = f1.multiplyBy(f2);        assertEquals(6, f.getNumerator());        assertEquals(25, f.getDenominator());                        f1 = Fraction.getFraction(0, 5);        f2 = Fraction.getFraction(2, 7);        f = f1.multiplyBy(f2);        assertSame(Fraction.ZERO, f);                f1 = Fraction.getFraction(2, 7);        f2 = Fraction.ONE;        f = f1.multiplyBy(f2);        assertEquals(2, f.getNumerator());        assertEquals(7, f.getDenominator());                f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);        f2 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);        f = f1.multiplyBy(f2);        assertEquals(Integer.MIN_VALUE, f.getNumerator());        assertEquals(1, f.getDenominator());        try {            f.multiplyBy(null);            fail("expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {}                try {            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);            f = f1.multiplyBy(f1);  // should overflow            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                    try {            f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);            f = f1.multiplyBy(f1);  // should overflow            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}    }                public void testDivide() {        Fraction f = null;        Fraction f1 = null;        Fraction f2 = null;                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(2, 5);        f = f1.divideBy(f2);        assertEquals(3, f.getNumerator());        assertEquals(2, f.getDenominator());                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.ZERO;        try {            f = f1.divideBy(f2);            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}                f1 = Fraction.getFraction(0, 5);        f2 = Fraction.getFraction(2, 7);        f = f1.divideBy(f2);        assertSame(Fraction.ZERO, f);                f1 = Fraction.getFraction(2, 7);        f2 = Fraction.ONE;        f = f1.divideBy(f2);        assertEquals(2, f.getNumerator());        assertEquals(7, f.getDenominator());                f1 = Fraction.getFraction(1, Integer.MAX_VALUE);        f = f1.divideBy(f1);          assertEquals(1, f.getNumerator());        assertEquals(1, f.getDenominator());                f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);        f2 = Fraction.getFraction(1, Integer.MAX_VALUE);        f = f1.divideBy(f2);        assertEquals(Integer.MIN_VALUE, f.getNumerator());        assertEquals(1, f.getDenominator());        try {            f.divideBy(null);            fail("IllegalArgumentException");        } catch (IllegalArgumentException ex) {}                try {            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);            f = f1.divideBy(f1.invert());  // should overflow            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}        try {            f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);            f = f1.divideBy(f1.invert());  // should overflow            fail("expecting ArithmeticException");        } catch (ArithmeticException ex) {}    }                public void testEquals() {        Fraction f1 = null;        Fraction f2 = null;                f1 = Fraction.getFraction(3, 5);        assertEquals(false, f1.equals(null));        assertEquals(false, f1.equals(new Object()));        assertEquals(false, f1.equals(new Integer(6)));                f1 = Fraction.getFraction(3, 5);        f2 = Fraction.getFraction(2, 5);        assertEquals(false, f1.equals(f2));        assertEquals(true, f1.equals(f1));        assertEquals(true, f2.equals(f2));                f2 = Fraction.getFraction(3, 5);        assertEquals(true, f1.equals(f2));                f2 = Fraction.getFraction(6, 10);        assertEquals(false, f1.equals(f2));    }        public void testHashCode() {        Fraction f1 = Fraction.getFraction(3, 5);        Fraction f2 = Fraction.getFraction(3, 5);                assertTrue(f1.hashCode() == f2.hashCode());                f2 = Fraction.getFraction(2, 5);        assertTrue(f1.hashCode() != f2.hashCode());                f2 = Fraction.getFraction(6, 10);        assertTrue(f1.hashCode() != f2.hashCode());    }        public void testCompareTo() {        Fraction f1 = null;        Fraction f2 = null;                f1 = Fraction.getFraction(3, 5);        assertTrue(f1.compareTo(f1) == 0);                try {            f1.compareTo(null);            fail("expecting NullPointerException");        } catch (NullPointerException ex) {}                f2 = Fraction.getFraction(2, 5);        assertTrue(f1.compareTo(f2) > 0);        assertTrue(f2.compareTo(f2) == 0);                f2 = Fraction.getFraction(4, 5);        assertTrue(f1.compareTo(f2) < 0);        assertTrue(f2.compareTo(f2) == 0);                f2 = Fraction.getFraction(3, 5);        assertTrue(f1.compareTo(f2) == 0);        assertTrue(f2.compareTo(f2) == 0);                f2 = Fraction.getFraction(6, 10);        assertTrue(f1.compareTo(f2) == 0);        assertTrue(f2.compareTo(f2) == 0);        f2 = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);        assertTrue(f1.compareTo(f2) > 0);        assertTrue(f2.compareTo(f2) == 0);    }        public void testToString() {        Fraction f = null;        f = Fraction.getFraction(3, 5);        String str = f.toString();        assertEquals("3/5", str);        assertSame(str, f.toString());                f = Fraction.getFraction(7, 5);        assertEquals("7/5", f.toString());                        f = Fraction.getFraction(4, 2);        assertEquals("4/2", f.toString());                        f = Fraction.getFraction(0, 2);        assertEquals("0/2", f.toString());                        f = Fraction.getFraction(2, 2);        assertEquals("2/2", f.toString());                f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);        assertEquals("-2147483648/1", f.toString());                f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);        assertEquals("-2147483648/2147483647", f.toString());    }        public void testToProperString() {        Fraction f = null;        f = Fraction.getFraction(3, 5);        String str = f.toProperString();        assertEquals("3/5", str);        assertSame(str, f.toProperString());                f = Fraction.getFraction(7, 5);        assertEquals("1 2/5", f.toProperString());                        f = Fraction.getFraction(14, 10);        assertEquals("1 4/10", f.toProperString());                        f = Fraction.getFraction(4, 2);        assertEquals("2", f.toProperString());                        f = Fraction.getFraction(0, 2);        assertEquals("0", f.toProperString());                        f = Fraction.getFraction(2, 2);        assertEquals("1", f.toProperString());                        f = Fraction.getFraction(-7, 5);        assertEquals("-1 2/5", f.toProperString());                f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);        assertEquals("-2147483648", f.toProperString());                f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);        assertEquals("-1 1/2147483647", f.toProperString());        assertEquals("-1", Fraction.getFraction(-1).toProperString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.lang.math;import junit.framework.Test;import junit.framework.TestSuite;/** * Test cases for the {@link NumberRange} class. *  * @author <a href="mailto:chrise@esha.com">Christopher Elkins</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Stephen Colebourne * @version $Id$ */public final class NumberRangeTest extends AbstractRangeTest {    public static Test suite() {        TestSuite suite = new TestSuite(NumberRangeTest.class);        suite.setName("NumberRange Tests");        return suite;    }    public NumberRangeTest(String name) {        super(name);    }    void checkConstructorException(Number num) {        try {            new NumberRange(num);            fail("Expected an IllegalArgumentException");        } catch (IllegalArgumentException e) {            // Expected.        }    }    void checkConstructorException(Number num1, Number num2) {        try {            new NumberRange(num1, num2);            fail("Expected an IllegalArgumentException");        } catch (IllegalArgumentException e) {            // Expected.        }    }    @Override    protected Range createRange(Integer integer) {        return new NumberRange(integer);    }    // --------------------------------------------------------------------------    @Override    protected Range createRange(Integer integer1, Integer integer2) {        return new NumberRange(integer1, integer2);    }    @Override    public void setUp() {        super.setUp();        tenToTwenty = new NumberRange(ten, twenty);        otherRange = new IntRange(ten, twenty);    }    /**     * Tests non-exceptional conditions for the one argument constructor.     */    public void testConstructor1() {        NumberRange nr = new NumberRange(five);        assertSame(five, nr.getMinimumNumber());        assertSame(five, nr.getMaximumNumber());    }    /**     * Tests exceptional conditions for the one argument constructor.     */    public void testConstructor1Exceptions() {        this.checkConstructorException(null);        this.checkConstructorException(nonComparableNumber);        this.checkConstructorException(new Float(Float.NaN));        this.checkConstructorException(new Double(Double.NaN));    }    /**     * Tests non-exceptional conditions for the two argument constructor.     */    public void testConstructor2() {        NumberRange nr = new NumberRange(five, ten);        assertSame(five, nr.getMinimumNumber());        assertSame(ten, nr.getMaximumNumber());        nr = new NumberRange(ten, five);        assertSame(five, nr.getMinimumNumber());        assertSame(ten, nr.getMaximumNumber());    }    /**     * Tests exceptional conditions for the two argument constructor.     */    public void testConstructor2Exceptions() {        this.checkConstructorException(null, null);        this.checkConstructorException(new Float(12.2f), new Double(12.2));        this.checkConstructorException(new Float(Float.NaN), new Double(12.2));        this.checkConstructorException(new Double(Double.NaN), new Double(12.2));        this.checkConstructorException(new Double(12.2), new Double(Double.NaN));        this.checkConstructorException(new Double(Double.NaN), new Double(Double.NaN));        this.checkConstructorException(null, new Double(12.2));        this.checkConstructorException(new Double(12.2), null);        this.checkConstructorException(new Double(12.2f), new Float(12.2));        this.checkConstructorException(new Double(Double.NaN), new Float(12.2));        this.checkConstructorException(new Float(Float.NaN), new Float(12.2));        this.checkConstructorException(new Float(12.2), new Float(Float.NaN));        this.checkConstructorException(new Float(Float.NaN), new Float(Float.NaN));        this.checkConstructorException(null, new Float(12.2));        this.checkConstructorException(new Float(12.2), null);        this.checkConstructorException(nonComparableNumber, nonComparableNumber);        this.checkConstructorException(null, nonComparableNumber);        this.checkConstructorException(nonComparableNumber, null);        this.checkConstructorException(new Float(12.2), nonComparableNumber);        this.checkConstructorException(nonComparableNumber, new Float(12.2));    }    // --------------------------------------------------------------------------    public void testContainsLongBig() {        // original NumberRange class failed this test        NumberRange big = new NumberRange(new Long(Long.MAX_VALUE), new Long(Long.MAX_VALUE - 2));        assertEquals(true, big.containsLong(Long.MAX_VALUE - 1));        assertEquals(false, big.containsLong(Long.MAX_VALUE - 3));    }    public void testContainsNumber() {        assertEquals(false, tenToTwenty.containsNumber(null));        assertEquals(false, tenToTwenty.containsNumber(five));        assertEquals(true, tenToTwenty.containsNumber(ten));        assertEquals(true, tenToTwenty.containsNumber(fifteen));        assertEquals(true, tenToTwenty.containsNumber(twenty));        assertEquals(false, tenToTwenty.containsNumber(twentyFive));        try {            tenToTwenty.containsNumber(long21);            fail();        } catch (IllegalArgumentException ex) {        }    }    // --------------------------------------------------------------------------}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.math;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.math.BigDecimal;import java.math.BigInteger;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;import org.apache.commons.lang.SystemUtils;/** * Unit tests {@link org.apache.commons.lang.math.NumberUtils}. * * @author <a href="mailto:rand_mcneely@yahoo.com">Rand McNeely</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Eric Pugh * @author Phil Steitz * @author Stephen Colebourne * @author Matthew Hawthorne * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> * @version $Id$ */public class NumberUtilsTest extends TestCase {    public NumberUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }        public static Test suite() {        TestSuite suite = new TestSuite(NumberUtilsTest.class);        suite.setName("NumberUtils Tests");        return suite;    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new NumberUtils());        Constructor[] cons = NumberUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(NumberUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(NumberUtils.class.getModifiers()));    }        //---------------------------------------------------------------------    /**     * Test for {@link NumberUtils#toInt(String)}.     */    public void testToIntString() {        assertTrue("toInt(String) 1 failed", NumberUtils.toInt("12345") == 12345);        assertTrue("toInt(String) 2 failed", NumberUtils.toInt("abc") == 0);        assertTrue("toInt(empty) failed", NumberUtils.toInt("") == 0);        assertTrue("toInt(null) failed", NumberUtils.toInt(null) == 0);    }    /**     * Test for {@link NumberUtils#toInt(String, int)}.     */    public void testToIntStringI() {        assertTrue("toInt(String,int) 1 failed", NumberUtils.toInt("12345", 5) == 12345);        assertTrue("toInt(String,int) 2 failed", NumberUtils.toInt("1234.5", 5) == 5);    }    /**     * Test for {@link NumberUtils#toLong(String)}.     */    public void testToLongString() {        assertTrue("toLong(String) 1 failed", NumberUtils.toLong("12345") == 12345l);        assertTrue("toLong(String) 2 failed", NumberUtils.toLong("abc") == 0l);        assertTrue("toLong(String) 3 failed", NumberUtils.toLong("1L") == 0l);        assertTrue("toLong(String) 4 failed", NumberUtils.toLong("1l") == 0l);        assertTrue("toLong(Long.MAX_VALUE) failed", NumberUtils.toLong(Long.MAX_VALUE+"") == Long.MAX_VALUE);        assertTrue("toLong(Long.MIN_VALUE) failed", NumberUtils.toLong(Long.MIN_VALUE+"") == Long.MIN_VALUE);        assertTrue("toLong(empty) failed", NumberUtils.toLong("") == 0l);        assertTrue("toLong(null) failed", NumberUtils.toLong(null) == 0l);    }    /**     * Test for {@link NumberUtils#toLong(String, long)}.     */    public void testToLongStringL() {        assertTrue("toLong(String,long) 1 failed", NumberUtils.toLong("12345", 5l) == 12345l);        assertTrue("toLong(String,long) 2 failed", NumberUtils.toLong("1234.5", 5l) == 5l);    }    /**     * Test for {@link NumberUtils#toFloat(String)}.     */    public void testToFloatString() {        assertTrue("toFloat(String) 1 failed", NumberUtils.toFloat("-1.2345") == -1.2345f);        assertTrue("toFloat(String) 2 failed", NumberUtils.toFloat("1.2345") == 1.2345f);        assertTrue("toFloat(String) 3 failed", NumberUtils.toFloat("abc") == 0.0f);        assertTrue("toFloat(Float.MAX_VALUE) failed", NumberUtils.toFloat(Float.MAX_VALUE+"") ==  Float.MAX_VALUE);        assertTrue("toFloat(Float.MIN_VALUE) failed", NumberUtils.toFloat(Float.MIN_VALUE+"") == Float.MIN_VALUE);        assertTrue("toFloat(empty) failed", NumberUtils.toFloat("") == 0.0f);        assertTrue("toFloat(null) failed", NumberUtils.toFloat(null) == 0.0f);    }    /**     * Test for {@link NumberUtils#toFloat(String, float)}.     */    public void testToFloatStringF() {        assertTrue("toFloat(String,int) 1 failed", NumberUtils.toFloat("1.2345", 5.1f) == 1.2345f);        assertTrue("toFloat(String,int) 2 failed", NumberUtils.toFloat("a", 5.0f) == 5.0f);    }    /**     * Test for {@link NumberUtils#toDouble(String)}.     */    public void testStringToDoubleString() {        assertTrue("toDouble(String) 1 failed", NumberUtils.toDouble("-1.2345") == -1.2345d);        assertTrue("toDouble(String) 2 failed", NumberUtils.toDouble("1.2345") == 1.2345d);        assertTrue("toDouble(String) 3 failed", NumberUtils.toDouble("abc") == 0.0d);        assertTrue("toDouble(Double.MAX_VALUE) failed", NumberUtils.toDouble(Double.MAX_VALUE+"") == Double.MAX_VALUE);        assertTrue("toDouble(Double.MIN_VALUE) failed", NumberUtils.toDouble(Double.MIN_VALUE+"") == Double.MIN_VALUE);        assertTrue("toDouble(empty) failed", NumberUtils.toDouble("") == 0.0d);        assertTrue("toDouble(null) failed", NumberUtils.toDouble(null) == 0.0d);    }    /**     * Test for {@link NumberUtils#toDouble(String, double)}.     */    public void testStringToDoubleStringD() {        assertTrue("toDouble(String,int) 1 failed", NumberUtils.toDouble("1.2345", 5.1d) == 1.2345d);        assertTrue("toDouble(String,int) 2 failed", NumberUtils.toDouble("a", 5.0d) == 5.0d);    }    public void testCreateNumber() {        // a lot of things can go wrong        assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));        assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));        assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));        assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));        assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""            + (Integer.MAX_VALUE + 1L)));        assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));        assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));        assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());        assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());        assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));        assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));        assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));        assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));        assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));        assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils                .createNumber("12345678901234567890L"));        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {            assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils                    .createNumber("1.1E-700F"));        }        assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils                .createNumber("10" + Integer.MAX_VALUE + "L"));        assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils                .createNumber("10" + Integer.MAX_VALUE));        assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils                .createNumber("10" + Long.MAX_VALUE));    }    public void testCreateFloat() {        assertEquals("createFloat(String) failed", new Float("1234.5"), NumberUtils.createFloat("1234.5"));        assertEquals("createFloat(null) failed", null, NumberUtils.createFloat(null));        this.testCreateFloatFailure("");        this.testCreateFloatFailure(" ");        this.testCreateFloatFailure("\b\t\n\f\r");        // Funky whitespaces        this.testCreateFloatFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F");    }    protected void testCreateFloatFailure(String str) {        try {            Float value = NumberUtils.createFloat(str);            fail("createFloat(blank) failed: " + value);        } catch (NumberFormatException ex) {            // empty        }    }    public void testCreateDouble() {        assertEquals("createDouble(String) failed", new Double("1234.5"), NumberUtils.createDouble("1234.5"));        assertEquals("createDouble(null) failed", null, NumberUtils.createDouble(null));        this.testCreateDoubleFailure("");        this.testCreateDoubleFailure(" ");        this.testCreateDoubleFailure("\b\t\n\f\r");        // Funky whitespaces        this.testCreateDoubleFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F");    }    protected void testCreateDoubleFailure(String str) {        try {            Double value = NumberUtils.createDouble(str);            fail("createDouble(blank) failed: " + value);        } catch (NumberFormatException ex) {            // empty        }    }    public void testCreateInteger() {        assertEquals("createInteger(String) failed", new Integer("12345"), NumberUtils.createInteger("12345"));        assertEquals("createInteger(null) failed", null, NumberUtils.createInteger(null));        this.testCreateIntegerFailure("");        this.testCreateIntegerFailure(" ");        this.testCreateIntegerFailure("\b\t\n\f\r");        // Funky whitespaces        this.testCreateIntegerFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F");    }    protected void testCreateIntegerFailure(String str) {        try {            Integer value = NumberUtils.createInteger(str);            fail("createInteger(blank) failed: " + value);        } catch (NumberFormatException ex) {            // empty        }    }    public void testCreateLong() {        assertEquals("createLong(String) failed", new Long("12345"), NumberUtils.createLong("12345"));        assertEquals("createLong(null) failed", null, NumberUtils.createLong(null));        this.testCreateLongFailure("");        this.testCreateLongFailure(" ");        this.testCreateLongFailure("\b\t\n\f\r");        // Funky whitespaces        this.testCreateLongFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F");    }    protected void testCreateLongFailure(String str) {        try {            Long value = NumberUtils.createLong(str);            fail("createLong(blank) failed: " + value);        } catch (NumberFormatException ex) {            // empty        }    }    public void testCreateBigInteger() {        assertEquals("createBigInteger(String) failed", new BigInteger("12345"), NumberUtils.createBigInteger("12345"));        assertEquals("createBigInteger(null) failed", null, NumberUtils.createBigInteger(null));        this.testCreateBigIntegerFailure("");        this.testCreateBigIntegerFailure(" ");        this.testCreateBigIntegerFailure("\b\t\n\f\r");        // Funky whitespaces        this.testCreateBigIntegerFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F");    }    protected void testCreateBigIntegerFailure(String str) {        try {            BigInteger value = NumberUtils.createBigInteger(str);            fail("createBigInteger(blank) failed: " + value);        } catch (NumberFormatException ex) {            // empty        }    }    public void testCreateBigDecimal() {        assertEquals("createBigDecimal(String) failed", new BigDecimal("1234.5"), NumberUtils.createBigDecimal("1234.5"));        assertEquals("createBigDecimal(null) failed", null, NumberUtils.createBigDecimal(null));        this.testCreateBigDecimalFailure("");        this.testCreateBigDecimalFailure(" ");        this.testCreateBigDecimalFailure("\b\t\n\f\r");        // Funky whitespaces        this.testCreateBigDecimalFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F");    }    protected void testCreateBigDecimalFailure(String str) {        try {            BigDecimal value = NumberUtils.createBigDecimal(str);            fail("createBigDecimal(blank) failed: " + value);        } catch (NumberFormatException ex) {            // empty        }    }    // min/max tests    // ----------------------------------------------------------------------    public void testMinLong() {        final long[] l = null;        try {            NumberUtils.min(l);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.min(new long[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "min(long[]) failed for array length 1",            5,            NumberUtils.min(new long[] { 5 }));        assertEquals(            "min(long[]) failed for array length 2",            6,            NumberUtils.min(new long[] { 6, 9 }));        assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 }));        assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 }));    }    public void testMinInt() {        final int[] i = null;        try {            NumberUtils.min(i);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.min(new int[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "min(int[]) failed for array length 1",            5,            NumberUtils.min(new int[] { 5 }));        assertEquals(            "min(int[]) failed for array length 2",            6,            NumberUtils.min(new int[] { 6, 9 }));        assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 }));        assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 }));    }    public void testMinShort() {        final short[] s = null;        try {            NumberUtils.min(s);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.min(new short[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "min(short[]) failed for array length 1",            5,            NumberUtils.min(new short[] { 5 }));        assertEquals(            "min(short[]) failed for array length 2",            6,            NumberUtils.min(new short[] { 6, 9 }));        assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 }));        assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 }));    }    public void testMinByte() {        final byte[] b = null;        try {            NumberUtils.min(b);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.min(new byte[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "min(byte[]) failed for array length 1",            5,            NumberUtils.min(new byte[] { 5 }));        assertEquals(            "min(byte[]) failed for array length 2",            6,            NumberUtils.min(new byte[] { 6, 9 }));        assertEquals(-10, NumberUtils.min(new byte[] { -10, -5, 0, 5, 10 }));        assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 }));    }    public void testMinDouble() {        final double[] d = null;        try {            NumberUtils.min(d);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.min(new double[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "min(double[]) failed for array length 1",            5.12,            NumberUtils.min(new double[] { 5.12 }),            0);        assertEquals(            "min(double[]) failed for array length 2",            6.23,            NumberUtils.min(new double[] { 6.23, 9.34 }),            0);        assertEquals(            "min(double[]) failed for array length 5",            -10.45,            NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }),            0);        assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001);        assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001);    }    public void testMinFloat() {        final float[] f = null;        try {            NumberUtils.min(f);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.min(new float[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "min(float[]) failed for array length 1",            5.9f,            NumberUtils.min(new float[] { 5.9f }),            0);        assertEquals(            "min(float[]) failed for array length 2",            6.8f,            NumberUtils.min(new float[] { 6.8f, 9.7f }),            0);        assertEquals(            "min(float[]) failed for array length 5",            -10.6f,            NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }),            0);        assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);        assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f);    }    public void testMaxLong() {        final long[] l = null;        try {            NumberUtils.max(l);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.max(new long[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "max(long[]) failed for array length 1",            5,            NumberUtils.max(new long[] { 5 }));        assertEquals(            "max(long[]) failed for array length 2",            9,            NumberUtils.max(new long[] { 6, 9 }));        assertEquals(            "max(long[]) failed for array length 5",            10,            NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));        assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));        assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 }));    }    public void testMaxInt() {        final int[] i = null;        try {            NumberUtils.max(i);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.max(new int[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "max(int[]) failed for array length 1",            5,            NumberUtils.max(new int[] { 5 }));        assertEquals(            "max(int[]) failed for array length 2",            9,            NumberUtils.max(new int[] { 6, 9 }));        assertEquals(            "max(int[]) failed for array length 5",            10,            NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));        assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));        assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 }));    }    public void testMaxShort() {        final short[] s = null;        try {            NumberUtils.max(s);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.max(new short[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "max(short[]) failed for array length 1",            5,            NumberUtils.max(new short[] { 5 }));        assertEquals(            "max(short[]) failed for array length 2",            9,            NumberUtils.max(new short[] { 6, 9 }));        assertEquals(            "max(short[]) failed for array length 5",            10,            NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));        assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));        assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 }));    }    public void testMaxByte() {        final byte[] b = null;        try {            NumberUtils.max(b);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.max(new byte[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "max(byte[]) failed for array length 1",            5,            NumberUtils.max(new byte[] { 5 }));        assertEquals(            "max(byte[]) failed for array length 2",            9,            NumberUtils.max(new byte[] { 6, 9 }));        assertEquals(            "max(byte[]) failed for array length 5",            10,            NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));        assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));        assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 }));    }    public void testMaxDouble() {        final double[] d = null;        try {            NumberUtils.max(d);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.max(new double[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "max(double[]) failed for array length 1",            5.1f,            NumberUtils.max(new double[] { 5.1f }),            0);        assertEquals(            "max(double[]) failed for array length 2",            9.2f,            NumberUtils.max(new double[] { 6.3f, 9.2f }),            0);        assertEquals(            "max(double[]) failed for float length 5",            10.4f,            NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),            0);        assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001);        assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001);    }     public void testMaxFloat() {        final float[] f = null;        try {            NumberUtils.max(f);            fail("No exception was thrown for null input.");        } catch (IllegalArgumentException ex) {}        try {            NumberUtils.max(new float[0]);            fail("No exception was thrown for empty input.");        } catch (IllegalArgumentException ex) {}        assertEquals(            "max(float[]) failed for array length 1",            5.1f,            NumberUtils.max(new float[] { 5.1f }),            0);        assertEquals(            "max(float[]) failed for array length 2",            9.2f,            NumberUtils.max(new float[] { 6.3f, 9.2f }),            0);        assertEquals(            "max(float[]) failed for float length 5",            10.4f,            NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),            0);        assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);        assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f);    }    public void testMinimumLong() {        assertEquals("minimum(long,long,long) 1 failed", 12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L));        assertEquals("minimum(long,long,long) 2 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L));        assertEquals("minimum(long,long,long) 3 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L));        assertEquals("minimum(long,long,long) 4 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L));        assertEquals("minimum(long,long,long) 5 failed", 12345L, NumberUtils.min(12345L, 12345L, 12345L));    }    public void testMinimumInt() {        assertEquals("minimum(int,int,int) 1 failed", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2));        assertEquals("minimum(int,int,int) 2 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2));        assertEquals("minimum(int,int,int) 3 failed", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345));        assertEquals("minimum(int,int,int) 4 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345));        assertEquals("minimum(int,int,int) 5 failed", 12345, NumberUtils.min(12345, 12345, 12345));    }    public void testMinimumShort() {        short low = 1234;        short mid = 1234 + 1;        short high = 1234 + 2;        assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(low, mid, high));        assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(mid, low, high));        assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(mid, high, low));        assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(low, mid, low));    }    public void testMinimumByte() {        byte low = 123;        byte mid = 123 + 1;        byte high = 123 + 2;        assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, high));        assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, low, high));        assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, high, low));        assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, low));    }    public void testMinimumDouble() {        double low = 12.3;        double mid = 12.3 + 1;        double high = 12.3 + 2;        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001);        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001);        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001);        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001);        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001);    }    public void testMinimumFloat() {        float low = 12.3f;        float mid = 12.3f + 1;        float high = 12.3f + 2;        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f);        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f);        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f);        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f);        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f);    }    public void testMaximumLong() {        assertEquals("maximum(long,long,long) 1 failed", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L));        assertEquals("maximum(long,long,long) 2 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L));        assertEquals("maximum(long,long,long) 3 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L));        assertEquals("maximum(long,long,long) 4 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L));        assertEquals("maximum(long,long,long) 5 failed", 12345L, NumberUtils.max(12345L, 12345L, 12345L));    }    public void testMaximumInt() {        assertEquals("maximum(int,int,int) 1 failed", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2));        assertEquals("maximum(int,int,int) 2 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2));        assertEquals("maximum(int,int,int) 3 failed", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345));        assertEquals("maximum(int,int,int) 4 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345));        assertEquals("maximum(int,int,int) 5 failed", 12345, NumberUtils.max(12345, 12345, 12345));    }    public void testMaximumShort() {        short low = 1234;        short mid = 1234 + 1;        short high = 1234 + 2;        assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(low, mid, high));        assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, low, high));        assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, high, low));        assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(high, mid, high));    }    public void testMaximumByte() {        byte low = 123;        byte mid = 123 + 1;        byte high = 123 + 2;        assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(low, mid, high));        assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(mid, low, high));        assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(mid, high, low));        assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(high, mid, high));    }    public void testMaximumDouble() {        double low = 12.3;        double mid = 12.3 + 1;        double high = 12.3 + 2;        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001);        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001);        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001);        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001);        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001);    }    public void testMaximumFloat() {        float low = 12.3f;        float mid = 12.3f + 1;        float high = 12.3f + 2;        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f);        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f);        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f);        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f);        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f);    }    // Testing JDK against old Lang functionality    public void testCompareDouble() {        assertTrue(Double.compare(Double.NaN, Double.NaN) == 0);        assertTrue(Double.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);        assertTrue(Double.compare(Double.NaN, Double.MAX_VALUE) == +1);        assertTrue(Double.compare(Double.NaN, 1.2d) == +1);        assertTrue(Double.compare(Double.NaN, 0.0d) == +1);        assertTrue(Double.compare(Double.NaN, -0.0d) == +1);        assertTrue(Double.compare(Double.NaN, -1.2d) == +1);        assertTrue(Double.compare(Double.NaN, -Double.MAX_VALUE) == +1);        assertTrue(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);                assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);        assertTrue(Double.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);        assertTrue(Double.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);                assertTrue(Double.compare(Double.MAX_VALUE, Double.NaN) == -1);        assertTrue(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);        assertTrue(Double.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);        assertTrue(Double.compare(Double.MAX_VALUE, 1.2d) == +1);        assertTrue(Double.compare(Double.MAX_VALUE, 0.0d) == +1);        assertTrue(Double.compare(Double.MAX_VALUE, -0.0d) == +1);        assertTrue(Double.compare(Double.MAX_VALUE, -1.2d) == +1);        assertTrue(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);        assertTrue(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);                assertTrue(Double.compare(1.2d, Double.NaN) == -1);        assertTrue(Double.compare(1.2d, Double.POSITIVE_INFINITY) == -1);        assertTrue(Double.compare(1.2d, Double.MAX_VALUE) == -1);        assertTrue(Double.compare(1.2d, 1.2d) == 0);        assertTrue(Double.compare(1.2d, 0.0d) == +1);        assertTrue(Double.compare(1.2d, -0.0d) == +1);        assertTrue(Double.compare(1.2d, -1.2d) == +1);        assertTrue(Double.compare(1.2d, -Double.MAX_VALUE) == +1);        assertTrue(Double.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);                assertTrue(Double.compare(0.0d, Double.NaN) == -1);        assertTrue(Double.compare(0.0d, Double.POSITIVE_INFINITY) == -1);        assertTrue(Double.compare(0.0d, Double.MAX_VALUE) == -1);        assertTrue(Double.compare(0.0d, 1.2d) == -1);        assertTrue(Double.compare(0.0d, 0.0d) == 0);        assertTrue(Double.compare(0.0d, -0.0d) == +1);        assertTrue(Double.compare(0.0d, -1.2d) == +1);        assertTrue(Double.compare(0.0d, -Double.MAX_VALUE) == +1);        assertTrue(Double.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);                assertTrue(Double.compare(-0.0d, Double.NaN) == -1);        assertTrue(Double.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);        assertTrue(Double.compare(-0.0d, Double.MAX_VALUE) == -1);        assertTrue(Double.compare(-0.0d, 1.2d) == -1);        assertTrue(Double.compare(-0.0d, 0.0d) == -1);        assertTrue(Double.compare(-0.0d, -0.0d) == 0);        assertTrue(Double.compare(-0.0d, -1.2d) == +1);        assertTrue(Double.compare(-0.0d, -Double.MAX_VALUE) == +1);        assertTrue(Double.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);                assertTrue(Double.compare(-1.2d, Double.NaN) == -1);        assertTrue(Double.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);        assertTrue(Double.compare(-1.2d, Double.MAX_VALUE) == -1);        assertTrue(Double.compare(-1.2d, 1.2d) == -1);        assertTrue(Double.compare(-1.2d, 0.0d) == -1);        assertTrue(Double.compare(-1.2d, -0.0d) == -1);        assertTrue(Double.compare(-1.2d, -1.2d) == 0);        assertTrue(Double.compare(-1.2d, -Double.MAX_VALUE) == +1);        assertTrue(Double.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);                assertTrue(Double.compare(-Double.MAX_VALUE, Double.NaN) == -1);        assertTrue(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);        assertTrue(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);        assertTrue(Double.compare(-Double.MAX_VALUE, 1.2d) == -1);        assertTrue(Double.compare(-Double.MAX_VALUE, 0.0d) == -1);        assertTrue(Double.compare(-Double.MAX_VALUE, -0.0d) == -1);        assertTrue(Double.compare(-Double.MAX_VALUE, -1.2d) == -1);        assertTrue(Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);        assertTrue(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);                assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);    }    public void testCompareFloat() {        assertTrue(Float.compare(Float.NaN, Float.NaN) == 0);        assertTrue(Float.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);        assertTrue(Float.compare(Float.NaN, Float.MAX_VALUE) == +1);        assertTrue(Float.compare(Float.NaN, 1.2f) == +1);        assertTrue(Float.compare(Float.NaN, 0.0f) == +1);        assertTrue(Float.compare(Float.NaN, -0.0f) == +1);        assertTrue(Float.compare(Float.NaN, -1.2f) == +1);        assertTrue(Float.compare(Float.NaN, -Float.MAX_VALUE) == +1);        assertTrue(Float.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);                assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);        assertTrue(Float.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);        assertTrue(Float.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);                assertTrue(Float.compare(Float.MAX_VALUE, Float.NaN) == -1);        assertTrue(Float.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);        assertTrue(Float.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);        assertTrue(Float.compare(Float.MAX_VALUE, 1.2f) == +1);        assertTrue(Float.compare(Float.MAX_VALUE, 0.0f) == +1);        assertTrue(Float.compare(Float.MAX_VALUE, -0.0f) == +1);        assertTrue(Float.compare(Float.MAX_VALUE, -1.2f) == +1);        assertTrue(Float.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);        assertTrue(Float.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);                assertTrue(Float.compare(1.2f, Float.NaN) == -1);        assertTrue(Float.compare(1.2f, Float.POSITIVE_INFINITY) == -1);        assertTrue(Float.compare(1.2f, Float.MAX_VALUE) == -1);        assertTrue(Float.compare(1.2f, 1.2f) == 0);        assertTrue(Float.compare(1.2f, 0.0f) == +1);        assertTrue(Float.compare(1.2f, -0.0f) == +1);        assertTrue(Float.compare(1.2f, -1.2f) == +1);        assertTrue(Float.compare(1.2f, -Float.MAX_VALUE) == +1);        assertTrue(Float.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);                assertTrue(Float.compare(0.0f, Float.NaN) == -1);        assertTrue(Float.compare(0.0f, Float.POSITIVE_INFINITY) == -1);        assertTrue(Float.compare(0.0f, Float.MAX_VALUE) == -1);        assertTrue(Float.compare(0.0f, 1.2f) == -1);        assertTrue(Float.compare(0.0f, 0.0f) == 0);        assertTrue(Float.compare(0.0f, -0.0f) == +1);        assertTrue(Float.compare(0.0f, -1.2f) == +1);        assertTrue(Float.compare(0.0f, -Float.MAX_VALUE) == +1);        assertTrue(Float.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);                assertTrue(Float.compare(-0.0f, Float.NaN) == -1);        assertTrue(Float.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);        assertTrue(Float.compare(-0.0f, Float.MAX_VALUE) == -1);        assertTrue(Float.compare(-0.0f, 1.2f) == -1);        assertTrue(Float.compare(-0.0f, 0.0f) == -1);        assertTrue(Float.compare(-0.0f, -0.0f) == 0);        assertTrue(Float.compare(-0.0f, -1.2f) == +1);        assertTrue(Float.compare(-0.0f, -Float.MAX_VALUE) == +1);        assertTrue(Float.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);                assertTrue(Float.compare(-1.2f, Float.NaN) == -1);        assertTrue(Float.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);        assertTrue(Float.compare(-1.2f, Float.MAX_VALUE) == -1);        assertTrue(Float.compare(-1.2f, 1.2f) == -1);        assertTrue(Float.compare(-1.2f, 0.0f) == -1);        assertTrue(Float.compare(-1.2f, -0.0f) == -1);        assertTrue(Float.compare(-1.2f, -1.2f) == 0);        assertTrue(Float.compare(-1.2f, -Float.MAX_VALUE) == +1);        assertTrue(Float.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);                assertTrue(Float.compare(-Float.MAX_VALUE, Float.NaN) == -1);        assertTrue(Float.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);        assertTrue(Float.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);        assertTrue(Float.compare(-Float.MAX_VALUE, 1.2f) == -1);        assertTrue(Float.compare(-Float.MAX_VALUE, 0.0f) == -1);        assertTrue(Float.compare(-Float.MAX_VALUE, -0.0f) == -1);        assertTrue(Float.compare(-Float.MAX_VALUE, -1.2f) == -1);        assertTrue(Float.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);        assertTrue(Float.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);                assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);    }    public void testIsDigits() {        assertEquals("isDigits(null) failed", false, NumberUtils.isDigits(null));        assertEquals("isDigits('') failed", false, NumberUtils.isDigits(""));        assertEquals("isDigits(String) failed", true, NumberUtils.isDigits("12345"));        assertEquals("isDigits(String) neg 1 failed", false, NumberUtils.isDigits("1234.5"));        assertEquals("isDigits(String) neg 3 failed", false, NumberUtils.isDigits("1ab"));        assertEquals("isDigits(String) neg 4 failed", false, NumberUtils.isDigits("abc"));    }        /**     * Tests isNumber(String) and tests that createNumber(String) returns     * a valid number iff isNumber(String) returns false.     */    public void testIsNumber() {        String val = "12345";        assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));        val = "1234.5";        assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));        val = ".12345";        assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));        val = "1234E5";        assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));        val = "1234E+5";        assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));        val = "1234E-5";        assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));        val = "123.4E5";        assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));        val = "-1234";        assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));        val = "-1234.5";        assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));        val = "-.12345";        assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));        val = "-1234E5";        assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));        val = "0";        assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));        val = "-0";        assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));        val = "01234";        assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));        val = "-01234";        assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));        val = "0xABC123";        assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));        val = "0x0";        assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));        val = "123.4E21D";        assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));        val = "-221.23F";        assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));        val = "22338L";        assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));        val = null;        assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));        val = "";        assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));        val = "--2.3";        assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));        val = ".12.3";        assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));        val = "-123E";        assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));        val = "-123E+-212";        assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));        val = "-123E2.12";        assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));        val = "0xGF";        assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));        val = "0xFAE-1";        assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));        val = ".";        assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));        val = "-0ABC123";        assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));        val = "123.4E-D";        assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));        val = "123.4ED";        assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));        val = "1234E5l";        assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));        val = "11a";        assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));         val = "1a";        assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));         val = "a";        assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));         val = "11g";        assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));         val = "11z";        assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));         val = "11def";        assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));         val = "11d11";        assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));         val = "11 11";        assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));        val = " 1111";        assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));        val = "1111 ";        assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));        assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));    }    private boolean checkCreateNumber(String val) {        try {            Object obj = NumberUtils.createNumber(val);            if (obj == null) {                return false;            }            return true;        } catch (NumberFormatException e) {            return false;       }    }    @SuppressWarnings("cast") // suppress instanceof warning check    public void testConstants() {        assertTrue(NumberUtils.LONG_ZERO instanceof Long);        assertTrue(NumberUtils.LONG_ONE instanceof Long);        assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long);        assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer);        assertTrue(NumberUtils.INTEGER_ONE instanceof Integer);        assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer);        assertTrue(NumberUtils.SHORT_ZERO instanceof Short);        assertTrue(NumberUtils.SHORT_ONE instanceof Short);        assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short);        assertTrue(NumberUtils.BYTE_ZERO instanceof Byte);        assertTrue(NumberUtils.BYTE_ONE instanceof Byte);        assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte);        assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double);        assertTrue(NumberUtils.DOUBLE_ONE instanceof Double);        assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double);        assertTrue(NumberUtils.FLOAT_ZERO instanceof Float);        assertTrue(NumberUtils.FLOAT_ONE instanceof Float);        assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float);                assertTrue(NumberUtils.LONG_ZERO.longValue() == 0);        assertTrue(NumberUtils.LONG_ONE.longValue() == 1);        assertTrue(NumberUtils.LONG_MINUS_ONE.longValue() == -1);        assertTrue(NumberUtils.INTEGER_ZERO.intValue() == 0);        assertTrue(NumberUtils.INTEGER_ONE.intValue() == 1);        assertTrue(NumberUtils.INTEGER_MINUS_ONE.intValue() == -1);        assertTrue(NumberUtils.SHORT_ZERO.shortValue() == 0);        assertTrue(NumberUtils.SHORT_ONE.shortValue() == 1);        assertTrue(NumberUtils.SHORT_MINUS_ONE.shortValue() == -1);        assertTrue(NumberUtils.BYTE_ZERO.byteValue() == 0);        assertTrue(NumberUtils.BYTE_ONE.byteValue() == 1);        assertTrue(NumberUtils.BYTE_MINUS_ONE.byteValue() == -1);        assertTrue(NumberUtils.DOUBLE_ZERO.doubleValue() == 0.0d);        assertTrue(NumberUtils.DOUBLE_ONE.doubleValue() == 1.0d);        assertTrue(NumberUtils.DOUBLE_MINUS_ONE.doubleValue() == -1.0d);        assertTrue(NumberUtils.FLOAT_ZERO.floatValue() == 0.0f);        assertTrue(NumberUtils.FLOAT_ONE.floatValue() == 1.0f);        assertTrue(NumberUtils.FLOAT_MINUS_ONE.floatValue() == -1.0f);    }    public void testLang300() {        NumberUtils.createNumber("-1l");        NumberUtils.createNumber("01l");        NumberUtils.createNumber("1l");    }    public void testLang381() {        assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN)));        assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN)));        assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN)));        assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN)));        double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };        assertTrue(Double.isNaN(NumberUtils.max(a)));        assertTrue(Double.isNaN(NumberUtils.min(a)));        double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };        assertTrue(Double.isNaN(NumberUtils.max(b)));        assertTrue(Double.isNaN(NumberUtils.min(b)));        float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };        assertTrue(Float.isNaN(NumberUtils.max(aF)));        float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };        assertTrue(Float.isNaN(NumberUtils.max(bF)));    }    }
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.util.ArrayList;import java.util.HashMap;import org.apache.commons.lang.builder.ToStringStyleTest.Person;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.builder.ToStringStyle}. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id$ */public class StandardToStringStyleTest extends TestCase {    private final Integer base = new Integer(5);    private final String baseStr = "Integer";        private static final StandardToStringStyle STYLE = new StandardToStringStyle();        static {        STYLE.setUseShortClassName(true);        STYLE.setUseIdentityHashCode(false);        STYLE.setArrayStart("[");        STYLE.setArraySeparator(", ");        STYLE.setArrayEnd("]");        STYLE.setNullText("%NULL%");        STYLE.setSizeStartText("%SIZE=");        STYLE.setSizeEndText("%");        STYLE.setSummaryObjectStartText("%");        STYLE.setSummaryObjectEndText("%");    }        public StandardToStringStyleTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(StandardToStringStyleTest.class);        suite.setName("StandardToStringStyle Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();        ToStringBuilder.setDefaultStyle(STYLE);    }    @Override    protected void tearDown() throws Exception {        super.tearDown();        ToStringBuilder.setDefaultStyle(STYLE);    }    //----------------------------------------------------------------        public void testBlank() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());    }    public void testAppendSuper() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).appendSuper("Integer@8888[%NULL%]").toString());                assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());        assertEquals(baseStr + "[%NULL%,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[%NULL%]").append("a", "hello").toString());        assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());    }        public void testObject() {        Integer i3 = new Integer(3);        Integer i4 = new Integer(4);        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) null).toString());        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());        assertEquals(baseStr + "[a=%NULL%]", new ToStringBuilder(base).append("a", (Object) null).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());        assertEquals(baseStr + "[a=%Integer%]", new ToStringBuilder(base).append("a", i3, false).toString());        assertEquals(baseStr + "[a=%SIZE=0%]", new ToStringBuilder(base).append("a", new ArrayList(), false).toString());        assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList(), true).toString());        assertEquals(baseStr + "[a=%SIZE=0%]", new ToStringBuilder(base).append("a", new HashMap(), false).toString());        assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap(), true).toString());        assertEquals(baseStr + "[a=%SIZE=0%]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());        assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());    }    public void testPerson() {        Person p = new Person();        p.name = "Suzy Queue";        p.age = 19;        p.smoker = false;        String pBaseStr = "ToStringStyleTest.Person";        assertEquals(pBaseStr + "[name=Suzy Queue,age=19,smoker=false]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());    }    public void testLong() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());    }    public void testObjectArray() {        Object[] array = new Object[] {null, base, new int[] {3, 6}};        assertEquals(baseStr + "[[%NULL%, 5, [3, 6]]]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[[%NULL%, 5, [3, 6]]]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArray() {        long[] array = new long[] {1, 2, -3, 4};        assertEquals(baseStr + "[[1, 2, -3, 4]]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[[1, 2, -3, 4]]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArrayArray() {        long[][] array = new long[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[[[1, 2], %NULL%, [5]]]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[[[1, 2], %NULL%, [5]]]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) array).toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.util.ArrayList;import java.util.HashMap;import org.apache.commons.lang.builder.ToStringStyleTest.Person;import junit.framework.TestCase;/** * Unit tests {@link org.apache.commons.lang.builder.ToStringStyle#SHORT_PREFIX_STYLE}. *  * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> * @version $Id$ */public class ShortPrefixToStringStyleTest extends TestCase {    private final Integer base = new Integer(5);    private final String baseStr = "Integer";        @Override    protected void setUp() throws Exception {        super.setUp();        ToStringBuilder.setDefaultStyle(ToStringStyle.SHORT_PREFIX_STYLE);    }    @Override    protected void tearDown() throws Exception {        super.tearDown();        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);    }    //----------------------------------------------------------------        public void testBlank() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());    }    public void testAppendSuper() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());                assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());        assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());        assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());    }        public void testObject() {        Integer i3 = new Integer(3);        Integer i4 = new Integer(4);        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());        assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());        assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList(), false).toString());        assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList(), true).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap(), false).toString());        assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap(), true).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());        assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());    }    public void testPerson() {        Person p = new Person();        p.name = "John Q. Public";        p.age = 45;        p.smoker = true;        String pBaseStr = "ToStringStyleTest.Person";        assertEquals(pBaseStr + "[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());    }    public void testLong() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());    }    public void testObjectArray() {        Object[] array = new Object[] {null, base, new int[] {3, 6}};        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArray() {        long[] array = new long[] {1, 2, -3, 4};        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArrayArray() {        long[][] array = new long[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    }
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.util.ArrayList;import java.util.HashMap;import org.apache.commons.lang.builder.ToStringStyleTest.Person;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.builder.DefaultToStringStyleTest}. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id$ */public class DefaultToStringStyleTest extends TestCase {    private final Integer base = new Integer(5);    private final String baseStr = base.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(base));        public DefaultToStringStyleTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(DefaultToStringStyleTest.class);        suite.setName("DefaultToStringStyle Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);    }    @Override    protected void tearDown() throws Exception {        super.tearDown();        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);    }    //----------------------------------------------------------------        public void testBlank() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());    }    public void testAppendSuper() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());                assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());        assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());        assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());    }        public void testObject() {        Integer i3 = new Integer(3);        Integer i4 = new Integer(4);        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());        assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());        assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList(), false).toString());        assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList(), true).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap(), false).toString());        assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap(), true).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());        assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());    }    public void testPerson() {        Person p = new Person();        p.name = "John Doe";        p.age = 33;        p.smoker = false;        String pBaseStr = p.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(p));        assertEquals(pBaseStr + "[name=John Doe,age=33,smoker=false]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());    }    public void testLong() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());    }    public void testObjectArray() {        Object[] array = new Object[] {null, base, new int[] {3, 6}};        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArray() {        long[] array = new long[] {1, 2, -3, 4};        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArrayArray() {        long[][] array = new long[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.builder.HashCodeBuilder}. *  * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id$ */public class HashCodeBuilderTest extends TestCase {    /**     * A reflection test fixture.     */    static class ReflectionTestCycleA {        ReflectionTestCycleB b;        @Override        public int hashCode() {            return HashCodeBuilder.reflectionHashCode(this);        }    }    /**     * A reflection test fixture.     */    static class ReflectionTestCycleB {        ReflectionTestCycleA a;        @Override        public int hashCode() {            return HashCodeBuilder.reflectionHashCode(this);        }    }    public HashCodeBuilderTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(HashCodeBuilderTest.class);        suite.setName("HashCodeBuilder Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    // -----------------------------------------------------------------------    public void testConstructorEx1() {        try {            new HashCodeBuilder(0, 0);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testConstructorEx2() {        try {            new HashCodeBuilder(2, 2);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    static class TestObject {        private int a;        public TestObject(int a) {            this.a = a;        }        @Override        public boolean equals(Object o) {            if (o == this) {                return true;            }            if (!(o instanceof TestObject)) {                return false;            }            TestObject rhs = (TestObject) o;            return (a == rhs.a);        }        public void setA(int a) {            this.a = a;        }        public int getA() {            return a;        }    }    static class TestSubObject extends TestObject {        private int b;        @SuppressWarnings("unused")        transient private int t;        public TestSubObject() {            super(0);        }        public TestSubObject(int a, int b, int t) {            super(a);            this.b = b;            this.t = t;        }        @Override        public boolean equals(Object o) {            if (o == this) {                return true;            }            if (!(o instanceof TestSubObject)) {                return false;            }            TestSubObject rhs = (TestSubObject) o;            return super.equals(o) && (b == rhs.b);        }    }    public void testReflectionHashCode() {        assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0)));        assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456)));    }    public void testReflectionHierarchyHashCode() {        assertEquals(17 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0)));        assertEquals(17 * 37 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0), true));        assertEquals((17 * 37 + 7890) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890,                0)));        assertEquals(((17 * 37 + 7890) * 37 + 0) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(                123456, 7890, 0), true));    }    public void testReflectionHierarchyHashCodeEx1() {        try {            HashCodeBuilder.reflectionHashCode(0, 0, new TestSubObject(0, 0, 0), true);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testReflectionHierarchyHashCodeEx2() {        try {            HashCodeBuilder.reflectionHashCode(2, 2, new TestSubObject(0, 0, 0), true);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testReflectionHashCodeEx1() {        try {            HashCodeBuilder.reflectionHashCode(0, 0, new TestObject(0), true);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testReflectionHashCodeEx2() {        try {            HashCodeBuilder.reflectionHashCode(2, 2, new TestObject(0), true);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testReflectionHashCodeEx3() {        try {            HashCodeBuilder.reflectionHashCode(13, 19, null, true);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testSuper() {        Object obj = new Object();        assertEquals(17 * 37 + (19 * 41 + obj.hashCode()), new HashCodeBuilder(17, 37).appendSuper(                new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode());    }    public void testObject() {        Object obj = null;        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj = new Object();        assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    @SuppressWarnings("cast") // cast is not really needed, keep for consistency    public void testLong() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long) 0L).toHashCode());        assertEquals(17 * 37 + (int) (123456789L ^ (123456789L >> 32)), new HashCodeBuilder(17, 37).append(                (long) 123456789L).toHashCode());    }    @SuppressWarnings("cast") // cast is not really needed, keep for consistency    public void testInt() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int) 0).toHashCode());        assertEquals(17 * 37 + 123456, new HashCodeBuilder(17, 37).append((int) 123456).toHashCode());    }    public void testShort() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short) 0).toHashCode());        assertEquals(17 * 37 + 12345, new HashCodeBuilder(17, 37).append((short) 12345).toHashCode());    }    public void testChar() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char) 0).toHashCode());        assertEquals(17 * 37 + 1234, new HashCodeBuilder(17, 37).append((char) 1234).toHashCode());    }    public void testByte() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte) 0).toHashCode());        assertEquals(17 * 37 + 123, new HashCodeBuilder(17, 37).append((byte) 123).toHashCode());    }    @SuppressWarnings("cast") // cast is not really needed, keep for consistency    public void testDouble() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double) 0d).toHashCode());        double d = 1234567.89;        long l = Double.doubleToLongBits(d);        assertEquals(17 * 37 + (int) (l ^ (l >> 32)), new HashCodeBuilder(17, 37).append(d).toHashCode());    }    @SuppressWarnings("cast") // cast is not really needed, keep for consistency    public void testFloat() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode());        float f = 1234.89f;        int i = Float.floatToIntBits(f);        assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode());    }    public void testBoolean() {        assertEquals(17 * 37 + 0, new HashCodeBuilder(17, 37).append(true).toHashCode());        assertEquals(17 * 37 + 1, new HashCodeBuilder(17, 37).append(false).toHashCode());    }    public void testObjectArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode());        Object[] obj = new Object[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = new Object();        assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = new Object();        assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj)                .toHashCode());    }    public void testObjectArrayAsObject() {        Object[] obj = new Object[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = new Object();        assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = new Object();        assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(                (Object) obj).toHashCode());    }    public void testLongArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode());        long[] obj = new long[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = 5L;        int h1 = (int) (5L ^ (5L >> 32));        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = 6L;        int h2 = (int) (6L ^ (6L >> 32));        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testLongArrayAsObject() {        long[] obj = new long[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = 5L;        int h1 = (int) (5L ^ (5L >> 32));        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = 6L;        int h2 = (int) (6L ^ (6L >> 32));        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testIntArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode());        int[] obj = new int[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = 6;        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testIntArrayAsObject() {        int[] obj = new int[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = 6;        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testShortArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode());        short[] obj = new short[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = (short) 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = (short) 6;        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testShortArrayAsObject() {        short[] obj = new short[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = (short) 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = (short) 6;        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testCharArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode());        char[] obj = new char[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = (char) 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = (char) 6;        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testCharArrayAsObject() {        char[] obj = new char[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = (char) 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = (char) 6;        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testByteArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode());        byte[] obj = new byte[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = (byte) 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = (byte) 6;        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testByteArrayAsObject() {        byte[] obj = new byte[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = (byte) 5;        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = (byte) 6;        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testDoubleArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode());        double[] obj = new double[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = 5.4d;        long l1 = Double.doubleToLongBits(5.4d);        int h1 = (int) (l1 ^ (l1 >> 32));        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = 6.3d;        long l2 = Double.doubleToLongBits(6.3d);        int h2 = (int) (l2 ^ (l2 >> 32));        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testDoubleArrayAsObject() {        double[] obj = new double[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = 5.4d;        long l1 = Double.doubleToLongBits(5.4d);        int h1 = (int) (l1 ^ (l1 >> 32));        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = 6.3d;        long l2 = Double.doubleToLongBits(6.3d);        int h2 = (int) (l2 ^ (l2 >> 32));        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testFloatArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode());        float[] obj = new float[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = 5.4f;        int h1 = Float.floatToIntBits(5.4f);        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = 6.3f;        int h2 = Float.floatToIntBits(6.3f);        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testFloatArrayAsObject() {        float[] obj = new float[2];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = 5.4f;        int h1 = Float.floatToIntBits(5.4f);        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = 6.3f;        int h2 = Float.floatToIntBits(6.3f);        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testBooleanArray() {        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode());        boolean[] obj = new boolean[2];        assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = true;        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = false;        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testBooleanArrayAsObject() {        boolean[] obj = new boolean[2];        assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[0] = true;        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());        obj[1] = false;        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());    }    public void testBooleanMultiArray() {        boolean[][] obj = new boolean[2][];        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = new boolean[0];        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = new boolean[1];        assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0] = new boolean[2];        assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[0][0] = true;        assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());        obj[1] = new boolean[1];        assertEquals((((17 * 37 + 0) * 37 + 1) * 37 + 1), new HashCodeBuilder(17, 37).append(obj).toHashCode());    }    public void testReflectionHashCodeExcludeFields() throws Exception {        TestObjectWithMultipleFields x = new TestObjectWithMultipleFields(1, 2, 3);        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x));        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, (String[]) null));        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[]{}));        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[]{"xxx"}));        assertEquals(((17 * 37 + 1) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[]{"two"}));        assertEquals(((17 * 37 + 1) * 37 + 2), HashCodeBuilder.reflectionHashCode(x, new String[]{"three"}));        assertEquals((17 * 37 + 1), HashCodeBuilder.reflectionHashCode(x, new String[]{"two", "three"}));        assertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[]{"one", "two", "three"}));        assertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[]{"one", "two", "three", "xxx"}));    }    static class TestObjectWithMultipleFields {        @SuppressWarnings("unused")        private int one = 0;        @SuppressWarnings("unused")        private int two = 0;        @SuppressWarnings("unused")        private int three = 0;        public TestObjectWithMultipleFields(int one, int two, int three) {            this.one = one;            this.two = two;            this.three = three;        }    }    /**     * Test Objects pointing to each other.     */    public void testReflectionObjectCycle() {        ReflectionTestCycleA a = new ReflectionTestCycleA();        ReflectionTestCycleB b = new ReflectionTestCycleB();        a.b = b;        b.a = a;                // Used to caused:        // java.lang.StackOverflowError        // at java.lang.ClassLoader.getCallerClassLoader(Native Method)        // at java.lang.Class.getDeclaredFields(Class.java:992)        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:373)        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)        // at        // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)        // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)        // at        // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)        // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)        a.hashCode();        b.hashCode();    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests for {@link org.apache.commons.lang.builder.ToStringBuilder}. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> * @author <a href="mailto:alex@apache.org">Alex Chaffee</a> * @version $Id$ */public class ToStringBuilderTest extends TestCase {    private final Integer base = new Integer(5);    private final String baseStr = base.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(base));        public ToStringBuilderTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(ToStringBuilderTest.class);        suite.setName("ToStringBuilder Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructorEx1() {        assertEquals("<null>", new ToStringBuilder(null).toString());    }    public void testConstructorEx2() {        assertEquals("<null>", new ToStringBuilder(null, null).toString());        new ToStringBuilder(this.base, null).toString();    }    public void testConstructorEx3() {        assertEquals("<null>", new ToStringBuilder(null, null, null).toString());        new ToStringBuilder(this.base, null, null);        new ToStringBuilder(this.base, ToStringStyle.DEFAULT_STYLE, null);    }    public void testGetSetDefault() {        try {            ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);            assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE, ToStringBuilder.getDefaultStyle());        } finally {            // reset for other tests            ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);        }    }    public void testSetDefaultEx() {        try {            ToStringBuilder.setDefaultStyle(null);                    } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testBlank() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());    }        /**     * Test wrapper for int primitive.     */    public void testReflectionInteger() {        assertEquals(baseStr + "[value=5]", ToStringBuilder.reflectionToString(base));    }    /**     * Test wrapper for char primitive.     */    public void testReflectionCharacter() {        Character c = new Character('A');        assertEquals(this.toBaseString(c) + "[value=A]", ToStringBuilder.reflectionToString(c));    }    /**     * Test wrapper for char boolean.     */    public void testReflectionBoolean() {        Boolean b;        b = Boolean.TRUE;        assertEquals(this.toBaseString(b) + "[value=true]", ToStringBuilder.reflectionToString(b));        b = Boolean.FALSE;        assertEquals(this.toBaseString(b) + "[value=false]", ToStringBuilder.reflectionToString(b));    }    /**     * Create the same toString() as Object.toString().     * @param o the object to create the string for.     * @return a String in the Object.toString format.     */    private String toBaseString(Object o) {        return o.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(o));    }        // Reflection Array tests        //    // Note on the following line of code repeated in the reflection array tests.    //    // assertReflectionArray("<null>", array);    //    // The expected value is not baseStr + "[<null>]" since array==null and is typed as Object.    // The null array does not carry array type information.    // If we added a primitive array type constructor and pile of associated methods,     // then type declaring type information could be carried forward. IMHO, null is null.    //    // Gary Gregory - 2003-03-12 - ggregory@seagullsw.com      //        public void assertReflectionArray(String expected, Object actual) {        if (actual == null) {            // Until ToStringBuilder supports null objects.            return;        }        assertEquals(expected, ToStringBuilder.reflectionToString(actual));        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null));        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, true));        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, false));    }    public void testReflectionObjectArray() {        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{<null>,5,{3,6}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionLongArray() {        long[] array = new long[] { 1, 2, -3, 4 };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionIntArray() {        int[] array = new int[] { 1, 2, -3, 4 };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionShortArray() {        short[] array = new short[] { 1, 2, -3, 4 };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionyteArray() {        byte[] array = new byte[] { 1, 2, -3, 4 };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionCharArray() {        char[] array = new char[] { 'A', '2', '_', 'D' };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{A,2,_,D}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionDoubleArray() {        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionFloatArray() {        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionBooleanArray() {        boolean[] array = new boolean[] { true, false, false };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{true,false,false}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }        // Reflection Array Array tests    public void testReflectionFloatArrayArray() {        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionLongArrayArray() {        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionIntArrayArray() {        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionhortArrayArray() {        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionByteArrayArray() {        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionCharArrayArray() {        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionDoubleArrayArray() {        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionBooleanArrayArray() {        boolean[][] array = new boolean[][] { { true, false }, null, { false } };        String baseStr = this.toBaseString(array);        assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));        assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));        array = null;        assertReflectionArray("<null>", array);        this.validateEmptyToStringStyleRegistry();    }        // Reflection hierarchy tests    public void testReflectionHierarchyArrayList() {        List base = new ArrayList();        String baseStr = this.toBaseString(base);        assertEquals(baseStr + "[elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>},size=0,modCount=0]", ToStringBuilder.reflectionToString(base, null, true));        assertEquals(baseStr + "[size=0]", ToStringBuilder.reflectionToString(base, null, false));        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionHierarchy() {        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();        String baseStr = this.toBaseString(baseA);        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));        assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));                ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();        baseStr = this.toBaseString(baseB);        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));        assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));        assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        this.validateEmptyToStringStyleRegistry();    }    static class ReflectionTestFixtureA {        @SuppressWarnings("unused")        private char a='a';        @SuppressWarnings("unused")        private transient char transientA='t';    }    static class ReflectionTestFixtureB extends ReflectionTestFixtureA {        @SuppressWarnings("unused")        private char b='b';        @SuppressWarnings("unused")        private transient char transientB='t';    }    public void testInnerClassReflection() {        Outer outer = new Outer();        assertEquals(toBaseString(outer) + "[inner=" + toBaseString(outer.inner) + "[]]", outer.toString());    }        static class Outer {        Inner inner = new Inner();        class Inner {            @Override            public String toString() {                return ToStringBuilder.reflectionToString(this);            }        }        @Override        public String toString() {            return ToStringBuilder.reflectionToString(this);        }    }        // Reflection cycle tests    /**     * Test an array element pointing to its container.     */    public void testReflectionArrayCycle() throws Exception {        Object[] objects = new Object[1];        objects[0] = objects;        assertEquals(            this.toBaseString(objects) + "[{" + this.toBaseString(objects) + "}]",            ToStringBuilder.reflectionToString(objects));        this.validateEmptyToStringStyleRegistry();    }    /**     * Test an array element pointing to its container.     */    public void testReflectionArrayCycleLevel2() throws Exception {        Object[] objects = new Object[1];        Object[] objectsLevel2 = new Object[1];        objects[0] = objectsLevel2;        objectsLevel2[0] = objects;        assertEquals(            this.toBaseString(objects) + "[{{" + this.toBaseString(objects) + "}}]",            ToStringBuilder.reflectionToString(objects));        assertEquals(            this.toBaseString(objectsLevel2) + "[{{" + this.toBaseString(objectsLevel2) + "}}]",            ToStringBuilder.reflectionToString(objectsLevel2));        this.validateEmptyToStringStyleRegistry();    }    public void testReflectionArrayArrayCycle() throws Exception {        Object[][] objects = new Object[2][2];        objects[0][0] = objects;        objects[0][1] = objects;        objects[1][0] = objects;        objects[1][1] = objects;        String basicToString = this.toBaseString(objects);        assertEquals(            basicToString                + "[{{"                + basicToString                + ","                + basicToString                + "},{"                + basicToString                + ","                + basicToString                + "}}]",            ToStringBuilder.reflectionToString(objects));        this.validateEmptyToStringStyleRegistry();    }    /**     * A reflection test fixture.     */    static class ReflectionTestCycleA {        ReflectionTestCycleB b;        @Override        public String toString() {            return ToStringBuilder.reflectionToString(this);        }    }    /**     * A reflection test fixture.     */    static class ReflectionTestCycleB {        ReflectionTestCycleA a;        @Override        public String toString() {            return ToStringBuilder.reflectionToString(this);        }    }    /**     * A reflection test fixture.     */    static class SimpleReflectionTestFixture {        Object o;        public SimpleReflectionTestFixture() {        }        public SimpleReflectionTestFixture(Object o) {            this.o = o;        }        @Override        public String toString() {            return ToStringBuilder.reflectionToString(this);        }    }    private static class SelfInstanceVarReflectionTestFixture {        @SuppressWarnings("unused")        private SelfInstanceVarReflectionTestFixture typeIsSelf;        public SelfInstanceVarReflectionTestFixture() {            this.typeIsSelf = this;        }        @Override        public String toString() {            return ToStringBuilder.reflectionToString(this);        }      }        private static class SelfInstanceTwoVarsReflectionTestFixture {        @SuppressWarnings("unused")        private SelfInstanceTwoVarsReflectionTestFixture typeIsSelf;        private String otherType = "The Other Type";        public SelfInstanceTwoVarsReflectionTestFixture() {            this.typeIsSelf = this;        }                public String getOtherType(){            return this.otherType;        }        @Override        public String toString() {            return ToStringBuilder.reflectionToString(this);        }      }            /**     * Test an Object pointing to itself, the simplest test.     *      * @throws Exception     */    public void testSimpleReflectionObjectCycle() throws Exception {        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();        simple.o = simple;        assertTrue(ToStringStyle.getRegistry().isEmpty());        assertEquals(this.toBaseString(simple) + "[o=" + this.toBaseString(simple) + "]", simple.toString());        this.validateEmptyToStringStyleRegistry();    }    /**     * Test a class that defines an ivar pointing to itself.     *      * @throws Exception     */    public void testSelfInstanceVarReflectionObjectCycle() throws Exception {        SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();        assertTrue(ToStringStyle.getRegistry().isEmpty());        assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + "]", test.toString());        this.validateEmptyToStringStyleRegistry();    }        /**     * Test a class that defines an ivar pointing to itself.  This test was      * created to show that handling cyclical object resulted in a missing endFieldSeparator call.     *      * @throws Exception     */    public void testSelfInstanceTwoVarsReflectionObjectCycle() throws Exception {        SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();        assertTrue(ToStringStyle.getRegistry().isEmpty());        assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + ",otherType=" + test.getOtherType().toString() + "]", test.toString());        this.validateEmptyToStringStyleRegistry();    }        /**     * Test Objects pointing to each other.     *      * @throws Exception     */    public void testReflectionObjectCycle() throws Exception {        ReflectionTestCycleA a = new ReflectionTestCycleA();        ReflectionTestCycleB b = new ReflectionTestCycleB();        a.b = b;        b.a = a;        assertEquals(            this.toBaseString(a) + "[b=" + this.toBaseString(b) + "[a=" + this.toBaseString(a) + "]]",            a.toString());        this.validateEmptyToStringStyleRegistry();    }        /**     * Test a nasty combination of arrays and Objects pointing to each other.     * objects[0] -> SimpleReflectionTestFixture[ o -> objects ]     *      * @throws Exception     */    public void testReflectionArrayAndObjectCycle() throws Exception {        Object[] objects = new Object[1];        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);        objects[0] = simple;        assertEquals(            this.toBaseString(objects)                + "[{"                + this.toBaseString(simple)                + "[o="                + this.toBaseString(objects)                + "]"                + "}]",            ToStringBuilder.reflectionToString(objects));        assertEquals(            this.toBaseString(simple)                + "[o={"                + this.toBaseString(simple)                + "}]",            ToStringBuilder.reflectionToString(simple));        this.validateEmptyToStringStyleRegistry();    }            void validateEmptyToStringStyleRegistry() {       if (!ToStringStyle.getRegistry().isEmpty()) {           System.out.println(ToStringStyle.getRegistry());       }               assertTrue(ToStringStyle.getRegistry().isEmpty());            }    //  End: Reflection cycle tests    public void testAppendSuper() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());                assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());        assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());        assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());    }        public void testAppendToString() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).appendToString("Integer@8888[]").toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendToString("Integer@8888[<null>]").toString());                assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendToString("Integer@8888[]").append("a", "hello").toString());        assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendToString("Integer@8888[<null>]").append("a", "hello").toString());        assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendToString(null).append("a", "hello").toString());    }        public void testObject() {        Integer i3 = new Integer(3);        Integer i4 = new Integer(4);        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());        assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());        assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList(), false).toString());        assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList(), true).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap(), false).toString());        assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap(), true).toString());        assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());        assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());    }    public void testLong() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());    }    @SuppressWarnings("cast") // cast is not really needed, keep for consistency    public void testInt() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((int) 3).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (int) 3).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (int) 3).append("b", (int) 4).toString());    }    public void testShort() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((short) 3).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (short) 3).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (short) 3).append("b", (short) 4).toString());    }    public void testChar() {        assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString());        assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString());        assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString());    }    public void testByte() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString());        assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString());        assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString());    }    @SuppressWarnings("cast")    public void testDouble() {        assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString());        assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString());        assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (double) 3.2).append("b", (double) 4.3).toString());    }    public void testFloat() {        assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString());        assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString());        assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString());    }    public void testBoolean() {        assertEquals(baseStr + "[true]", new ToStringBuilder(base).append(true).toString());        assertEquals(baseStr + "[a=true]", new ToStringBuilder(base).append("a", true).toString());        assertEquals(baseStr + "[a=true,b=false]", new ToStringBuilder(base).append("a", true).append("b", false).toString());    }    public void testObjectArray() {        Object[] array = new Object[] {null, base, new int[] {3, 6}};        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArray() {        long[] array = new long[] {1, 2, -3, 4};        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testIntArray() {        int[] array = new int[] {1, 2, -3, 4};        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testShortArray() {        short[] array = new short[] {1, 2, -3, 4};        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }        public void testByteArray() {        byte[] array = new byte[] {1, 2, -3, 4};        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testCharArray() {        char[] array = new char[] {'A', '2', '_', 'D'};        assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testDoubleArray() {        double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3};        assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testFloatArray() {        float[] array = new float[] {1.0f, 2.9876f, -3.00001f, 4.3f};        assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }        public void testBooleanArray() {        boolean[] array = new boolean[] {true, false, false};        assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArrayArray() {        long[][] array = new long[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testIntArrayArray() {        int[][] array = new int[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testShortArrayArray() {        short[][] array = new short[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testByteArrayArray() {        byte[][] array = new byte[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testCharArrayArray() {        char[][] array = new char[][] {{'A', 'B'}, null, {'p'}};        assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testDoubleArrayArray() {        double[][] array = new double[][] {{1.0, 2.29686}, null, {Double.NaN}};        assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testFloatArrayArray() {        float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}};        assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testBooleanArrayArray() {        boolean[][] array = new boolean[][] {{true, false}, null, {false}};        assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testObjectCycle() {        ObjectCycle a = new ObjectCycle();        ObjectCycle b = new ObjectCycle();        a.obj = b;        b.obj = a;               String expected = toBaseString(a) + "[" + toBaseString(b) + "[" + toBaseString(a) + "]]";        assertEquals(expected, a.toString());        validateEmptyToStringStyleRegistry();    }        static class ObjectCycle {        Object obj;               @Override        public String toString() {            return new ToStringBuilder(this).append(obj).toString();        }    }        public void testSimpleReflectionStatics() {        SimpleReflectionStaticFieldsFixture instance1 = new SimpleReflectionStaticFieldsFixture();        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]",            ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]",            ReflectionToStringBuilder.toString(instance1, null, true, true, SimpleReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]",            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]",            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));    }    /**     * Tests ReflectionToStringBuilder.toString() for statics.     */    public void testReflectionStatics() {        ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture();        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]",            ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]",            ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]",            this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]",            this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));    }    /**     * Tests ReflectionToStringBuilder.toString() for statics.     */    public void testInheritedReflectionStatics() {        InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture();        assertEquals(            this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]",            ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]",            ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]",            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));        assertEquals(            this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]",            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));    }    /**     * <p>This method uses reflection to build a suitable     * <code>toString</code> value which includes static fields.</p>     *     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private     * fields. This means that it will throw a security exception if run     * under a security manager, if the permissions are not set up correctly.     * It is also not as efficient as testing explicitly. </p>     *     * <p>Transient fields are not output.</p>     *     * <p>Superclass fields will be appended up to and including the specified superclass.      * A null superclass is treated as <code>java.lang.Object</code>.</p>     *     * <p>If the style is <code>null</code>, the default     * <code>ToStringStyle</code> is used.</p>     *      * @param object  the Object to be output     * @param style  the style of the <code>toString</code> to create,     *  may be <code>null</code>     * @param reflectUpToClass  the superclass to reflect up to (inclusive),     *  may be <code>null</code>     * @return the String result     * @throws IllegalArgumentException if the Object is <code>null</code>     */    public Object toStringWithStatics(Object object, ToStringStyle style, Class reflectUpToClass) {        return ReflectionToStringBuilder.toString(object, style, false, true, reflectUpToClass);    }    /**     * Tests ReflectionToStringBuilder.toString() for statics.     */    class ReflectionStaticFieldsFixture {        static final String staticString = "staticString";        static final int staticInt = 12345;        static final transient String staticTransientString = "staticTransientString";        static final transient int staticTransientInt = 54321;        String instanceString = "instanceString";        int instanceInt = 67890;        transient String transientString = "transientString";        transient int transientInt = 98765;    }    /**     * Test fixture for ReflectionToStringBuilder.toString() for statics.     */    class SimpleReflectionStaticFieldsFixture {        static final String staticString = "staticString";        static final int staticInt = 12345;    }    /**     * Test fixture for ReflectionToStringBuilder.toString() for statics.     */    class InheritedReflectionStaticFieldsFixture extends SimpleReflectionStaticFieldsFixture {        static final String staticString2 = "staticString2";        static final int staticInt2 = 67890;    }    public void testReflectionNull() {        assertEquals("<null>", ReflectionToStringBuilder.toString(null));    }    /**     * Points out failure to print anything from appendToString methods using MULTI_LINE_STYLE.     * See issue LANG-372.     */    class MultiLineTestObject {        Integer i = new Integer(31337);        @Override        public String toString() {            return new ToStringBuilder(this).append("testInt", i).toString();        }    }    public void testAppendToStringUsingMultiLineStyle() {        MultiLineTestObject obj = new MultiLineTestObject();        ToStringBuilder testBuilder = new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)                                          .appendToString(obj.toString());        assertEquals(testBuilder.toString().indexOf("testInt=31337"), -1);    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.util.ArrayList;import java.util.HashMap;import org.apache.commons.lang.builder.ToStringStyleTest.Person;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.builder.SimpleToStringStyleTest}. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id$ */public class SimpleToStringStyleTest extends TestCase {    private final Integer base = new Integer(5);        public SimpleToStringStyleTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(SimpleToStringStyleTest.class);        suite.setName("SimpleToStringStyle Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();        ToStringBuilder.setDefaultStyle(ToStringStyle.SIMPLE_STYLE);    }    @Override    protected void tearDown() throws Exception {        super.tearDown();        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);    }    //----------------------------------------------------------------        public void testBlank() {        assertEquals("", new ToStringBuilder(base).toString());    }    public void testAppendSuper() {        assertEquals("", new ToStringBuilder(base).appendSuper("").toString());        assertEquals("<null>", new ToStringBuilder(base).appendSuper("<null>").toString());                assertEquals("hello", new ToStringBuilder(base).appendSuper("").append("a", "hello").toString());        assertEquals("<null>,hello", new ToStringBuilder(base).appendSuper("<null>").append("a", "hello").toString());        assertEquals("hello", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());    }        public void testObject() {        Integer i3 = new Integer(3);        Integer i4 = new Integer(4);        assertEquals("<null>", new ToStringBuilder(base).append((Object) null).toString());        assertEquals("3", new ToStringBuilder(base).append(i3).toString());        assertEquals("<null>", new ToStringBuilder(base).append("a", (Object) null).toString());        assertEquals("3", new ToStringBuilder(base).append("a", i3).toString());        assertEquals("3,4", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());        assertEquals("<Integer>", new ToStringBuilder(base).append("a", i3, false).toString());        assertEquals("<size=0>", new ToStringBuilder(base).append("a", new ArrayList(), false).toString());        assertEquals("[]", new ToStringBuilder(base).append("a", new ArrayList(), true).toString());        assertEquals("<size=0>", new ToStringBuilder(base).append("a", new HashMap(), false).toString());        assertEquals("{}", new ToStringBuilder(base).append("a", new HashMap(), true).toString());        assertEquals("<size=0>", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());        assertEquals("{}", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());    }    public void testPerson() {        Person p = new Person();        p.name = "Jane Q. Public";        p.age = 47;        p.smoker = false;        assertEquals("Jane Q. Public,47,false", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());    }    public void testLong() {        assertEquals("3", new ToStringBuilder(base).append(3L).toString());        assertEquals("3", new ToStringBuilder(base).append("a", 3L).toString());        assertEquals("3,4", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());    }    public void testObjectArray() {        Object[] array = new Object[] {null, base, new int[] {3, 6}};        assertEquals("{<null>,5,{3,6}}", new ToStringBuilder(base).append(array).toString());        assertEquals("{<null>,5,{3,6}}", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals("<null>", new ToStringBuilder(base).append(array).toString());        assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArray() {        long[] array = new long[] {1, 2, -3, 4};        assertEquals("{1,2,-3,4}", new ToStringBuilder(base).append(array).toString());        assertEquals("{1,2,-3,4}", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals("<null>", new ToStringBuilder(base).append(array).toString());        assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArrayArray() {        long[][] array = new long[][] {{1, 2}, null, {5}};        assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString());        assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals("<null>", new ToStringBuilder(base).append(array).toString());        assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.math.BigDecimal;import java.util.Arrays;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.builder.EqualsBuilder}. * * @author <a href="mailto:sdowney@panix.com">Steve Downey</a> * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> * @author Maarten Coene * @version $Id$ */public class EqualsBuilderTest extends TestCase {    public EqualsBuilderTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(EqualsBuilderTest.class);        suite.setName("EqualsBuilder Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    static class TestObject {        private int a;        public TestObject() {        }        public TestObject(int a) {            this.a = a;        }        @Override        public boolean equals(Object o) {            if (o == null) { return false; }            if (o == this) { return true; }            if (o.getClass() != getClass()) {                return false;            }            TestObject rhs = (TestObject) o;            return (a == rhs.a);        }        public void setA(int a) {            this.a = a;        }        public int getA() {            return a;        }    }    static class TestSubObject extends TestObject {        private int b;        public TestSubObject() {            super(0);        }        public TestSubObject(int a, int b) {            super(a);            this.b = b;        }        @Override        public boolean equals(Object o) {            if (o == null) { return false; }            if (o == this) { return true; }            if (o.getClass() != getClass()) {                return false;            }            TestSubObject rhs = (TestSubObject) o;            return super.equals(o) && (b == rhs.b);        }        public void setB(int b) {            this.b = b;        }        public int getB() {            return b;        }    }        static class TestEmptySubObject extends TestObject {        public TestEmptySubObject(int a) {            super(a);        }    }    static class TestTSubObject extends TestObject {        @SuppressWarnings("unused")        private transient int t;        public TestTSubObject(int a, int t) {            super(a);            this.t = t;        }    }    static class TestTTSubObject extends TestTSubObject {        @SuppressWarnings("unused")        private transient int tt;        public TestTTSubObject(int a, int t, int tt) {            super(a, t);            this.tt = tt;        }    }    static class TestTTLeafObject extends TestTTSubObject {        @SuppressWarnings("unused")        private int leafValue;        public TestTTLeafObject(int a, int t, int tt, int leafValue) {            super(a, t, tt);            this.leafValue = leafValue;        }    }    static class TestTSubObject2 extends TestObject {        private transient int t;        public TestTSubObject2(int a, int t) {            super(a);        }        public int getT() {            return t;        }        public void setT(int t) {            this.t = t;        }    }    public void testReflectionEquals() {        TestObject o1 = new TestObject(4);        TestObject o2 = new TestObject(5);        assertTrue(EqualsBuilder.reflectionEquals(o1, o1));        assertTrue(!EqualsBuilder.reflectionEquals(o1, o2));        o2.setA(4);        assertTrue(EqualsBuilder.reflectionEquals(o1, o2));        assertTrue(!EqualsBuilder.reflectionEquals(o1, this));        assertTrue(!EqualsBuilder.reflectionEquals(o1, null));        assertTrue(!EqualsBuilder.reflectionEquals(null, o2));        assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null));    }        public void testReflectionHierarchyEquals() {        testReflectionHierarchyEquals(false);        testReflectionHierarchyEquals(true);        // Transients        assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));        assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), false));        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 0, 0, 4), new TestTTLeafObject(1, 2, 3, 4), true));        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 0), true));        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(0, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));    }    public void testReflectionHierarchyEquals(boolean testTransients) {        TestObject to1 = new TestObject(4);        TestObject to1Bis = new TestObject(4);        TestObject to1Ter = new TestObject(4);        TestObject to2 = new TestObject(5);        TestEmptySubObject teso = new TestEmptySubObject(4);        TestTSubObject ttso = new TestTSubObject(4, 1);        TestTTSubObject tttso = new TestTTSubObject(4, 1, 2);        TestTTLeafObject ttlo = new TestTTLeafObject(4, 1, 2, 3);        TestSubObject tso1 = new TestSubObject(1, 4);        TestSubObject tso1bis = new TestSubObject(1, 4);        TestSubObject tso1ter = new TestSubObject(1, 4);        TestSubObject tso2 = new TestSubObject(2, 5);        testReflectionEqualsEquivalenceRelationship(to1, to1Bis, to1Ter, to2, new TestObject(), testTransients);        testReflectionEqualsEquivalenceRelationship(tso1, tso1bis, tso1ter, tso2, new TestSubObject(), testTransients);        // More sanity checks:        // same values        assertTrue(EqualsBuilder.reflectionEquals(ttlo, ttlo, testTransients));        assertTrue(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 10), testTransients));        // same super values, diff sub values        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 11), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 11), new TestSubObject(1, 10), testTransients));        // diff super values, same sub values        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestSubObject(1, 10), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(0, 10), testTransients));        // mix super and sub types: equals        assertTrue(EqualsBuilder.reflectionEquals(to1, teso, testTransients));        assertTrue(EqualsBuilder.reflectionEquals(teso, to1, testTransients));        assertTrue(EqualsBuilder.reflectionEquals(to1, ttso, false)); // Force testTransients = false for this assert        assertTrue(EqualsBuilder.reflectionEquals(ttso, to1, false)); // Force testTransients = false for this assert        assertTrue(EqualsBuilder.reflectionEquals(to1, tttso, false)); // Force testTransients = false for this assert        assertTrue(EqualsBuilder.reflectionEquals(tttso, to1, false)); // Force testTransients = false for this assert        assertTrue(EqualsBuilder.reflectionEquals(ttso, tttso, false)); // Force testTransients = false for this assert        assertTrue(EqualsBuilder.reflectionEquals(tttso, ttso, false)); // Force testTransients = false for this assert        // mix super and sub types: NOT equals        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestEmptySubObject(1), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(new TestEmptySubObject(1), new TestObject(0), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestTSubObject(1, 1), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(new TestTSubObject(1, 1), new TestObject(0), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(1), new TestSubObject(0, 10), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestObject(1), testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(to1, ttlo));        assertTrue(!EqualsBuilder.reflectionEquals(tso1, this));    }    /**     * Equivalence relationship tests inspired by "Effective Java":     * <ul>     * <li>reflection</li>     * <li>symmetry</li>     * <li>transitive</li>     * <li>consistency</li>     * <li>non-null reference</li>     * </ul>     * @param to a TestObject     * @param toBis a TestObject, equal to to and toTer     * @param toTer Left hand side, equal to to and toBis     * @param to2 a different TestObject     * @param oToChange a TestObject that will be changed     */    public void testReflectionEqualsEquivalenceRelationship(        TestObject to,        TestObject toBis,        TestObject toTer,        TestObject to2,        TestObject oToChange,        boolean testTransients) {        // reflection test        assertTrue(EqualsBuilder.reflectionEquals(to, to, testTransients));        assertTrue(EqualsBuilder.reflectionEquals(to2, to2, testTransients));        // symmetry test        assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEquals(toBis, to, testTransients));        // transitive test        assertTrue(            EqualsBuilder.reflectionEquals(to, toBis, testTransients)                && EqualsBuilder.reflectionEquals(toBis, toTer, testTransients)                && EqualsBuilder.reflectionEquals(to, toTer, testTransients));        // consistency test        oToChange.setA(to.getA());        if (oToChange instanceof TestSubObject) {            ((TestSubObject) oToChange).setB(((TestSubObject) to).getB());        }        assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));        assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));        oToChange.setA(to.getA() + 1);        if (oToChange instanceof TestSubObject) {            ((TestSubObject) oToChange).setB(((TestSubObject) to).getB() + 1);        }        assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));        // non-null reference test        assertTrue(!EqualsBuilder.reflectionEquals(to, null, testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(to2, null, testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(null, to, testTransients));        assertTrue(!EqualsBuilder.reflectionEquals(null, to2, testTransients));        assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null, testTransients));    }    public void testSuper() {        TestObject o1 = new TestObject(4);        TestObject o2 = new TestObject(5);        assertEquals(true, new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals());        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals());        assertEquals(false, new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals());        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals());    }    public void testObject() {        TestObject o1 = new TestObject(4);        TestObject o2 = new TestObject(5);        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());        o2.setA(4);        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());        assertTrue(!new EqualsBuilder().append(o1, this).isEquals());                assertTrue(!new EqualsBuilder().append(o1, null).isEquals());        assertTrue(!new EqualsBuilder().append(null, o2).isEquals());        assertTrue(new EqualsBuilder().append((Object) null, (Object) null).isEquals());    }    public void testLong() {        long o1 = 1L;        long o2 = 2L;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());    }    public void testInt() {        int o1 = 1;        int o2 = 2;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());    }    public void testShort() {        short o1 = 1;        short o2 = 2;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());    }    public void testChar() {        char o1 = 1;        char o2 = 2;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());    }    public void testByte() {        byte o1 = 1;        byte o2 = 2;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());    }    public void testDouble() {        double o1 = 1;        double o2 = 2;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());        assertTrue(!new EqualsBuilder().append(o1, Double.NaN).isEquals());        assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals());        assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals());    }    public void testFloat() {        float o1 = 1;        float o2 = 2;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());        assertTrue(!new EqualsBuilder().append(o1, Float.NaN).isEquals());        assertTrue(new EqualsBuilder().append(Float.NaN, Float.NaN).isEquals());        assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals());    }    // https://issues.apache.org/jira/browse/LANG-393    public void testBigDecimal() {        BigDecimal o1 = new BigDecimal("2.0");        BigDecimal o2 = new BigDecimal("2.00");        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());    }    public void testAccessors() {        EqualsBuilder equalsBuilder = new EqualsBuilder();        assertTrue(equalsBuilder.isEquals());        equalsBuilder.setEquals(true);        assertTrue(equalsBuilder.isEquals());        equalsBuilder.setEquals(false);        assertFalse(equalsBuilder.isEquals());    }        public void testBoolean() {        boolean o1 = true;        boolean o2 = false;        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());    }    public void testObjectArray() {        TestObject[] obj1 = new TestObject[3];        obj1[0] = new TestObject(4);        obj1[1] = new TestObject(5);        obj1[2] = null;        TestObject[] obj2 = new TestObject[3];        obj2[0] = new TestObject(4);        obj2[1] = new TestObject(5);        obj2[2] = null;                assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj2, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1].setA(6);        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1].setA(5);        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[2] = obj1[1];        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[2] = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());                               obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testLongArray() {        long[] obj1 = new long[2];        obj1[0] = 5L;        obj1[1] = 6L;        long[] obj2 = new long[2];        obj2[0] = 5L;        obj2[1] = 6L;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testIntArray() {        int[] obj1 = new int[2];        obj1[0] = 5;        obj1[1] = 6;        int[] obj2 = new int[2];        obj2[0] = 5;        obj2[1] = 6;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testShortArray() {        short[] obj1 = new short[2];        obj1[0] = 5;        obj1[1] = 6;        short[] obj2 = new short[2];        obj2[0] = 5;        obj2[1] = 6;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testCharArray() {        char[] obj1 = new char[2];        obj1[0] = 5;        obj1[1] = 6;        char[] obj2 = new char[2];        obj2[0] = 5;        obj2[1] = 6;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testByteArray() {        byte[] obj1 = new byte[2];        obj1[0] = 5;        obj1[1] = 6;        byte[] obj2 = new byte[2];        obj2[0] = 5;        obj2[1] = 6;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testDoubleArray() {        double[] obj1 = new double[2];        obj1[0] = 5;        obj1[1] = 6;        double[] obj2 = new double[2];        obj2[0] = 5;        obj2[1] = 6;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testFloatArray() {        float[] obj1 = new float[2];        obj1[0] = 5;        obj1[1] = 6;        float[] obj2 = new float[2];        obj2[0] = 5;        obj2[1] = 6;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testBooleanArray() {        boolean[] obj1 = new boolean[2];        obj1[0] = true;        obj1[1] = false;        boolean[] obj2 = new boolean[2];        obj2[0] = true;        obj2[1] = false;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        obj1[1] = true;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj2 = null;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());        obj1 = null;        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testMultiLongArray() {        long[][] array1 = new long[2][2];        long[][] array2 = new long[2][2];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMultiIntArray() {        int[][] array1 = new int[2][2];        int[][] array2 = new int[2][2];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMultiShortArray() {        short[][] array1 = new short[2][2];        short[][] array2 = new short[2][2];        for (short i = 0; i < array1.length; ++i) {            for (short j = 0; j < array1[0].length; j++) {                array1[i][j] = i;                array2[i][j] = i;            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMultiCharArray() {        char[][] array1 = new char[2][2];        char[][] array2 = new char[2][2];        for (char i = 0; i < array1.length; ++i) {            for (char j = 0; j < array1[0].length; j++) {                array1[i][j] = i;                array2[i][j] = i;            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMultiByteArray() {        byte[][] array1 = new byte[2][2];        byte[][] array2 = new byte[2][2];        for (byte i = 0; i < array1.length; ++i) {            for (byte j = 0; j < array1[0].length; j++) {                array1[i][j] = i;                array2[i][j] = i;            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMultiFloatArray() {        float[][] array1 = new float[2][2];        float[][] array2 = new float[2][2];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMultiDoubleArray() {        double[][] array1 = new double[2][2];        double[][] array2 = new double[2][2];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMultiBooleanArray() {        boolean[][] array1 = new boolean[2][2];        boolean[][] array2 = new boolean[2][2];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = (i == 1) || (j == 1);                array2[i][j] = (i == 1) || (j == 1);            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = false;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());                // compare 1 dim to 2.        boolean[] array3 = new boolean[]{true, true};        assertFalse(new EqualsBuilder().append(array1, array3).isEquals());        assertFalse(new EqualsBuilder().append(array3, array1).isEquals());        assertFalse(new EqualsBuilder().append(array2, array3).isEquals());        assertFalse(new EqualsBuilder().append(array3, array2).isEquals());    }    public void testRaggedArray() {        long array1[][] = new long[2][];        long array2[][] = new long[2][];        for (int i = 0; i < array1.length; ++i) {            array1[i] = new long[2];            array2[i] = new long[2];            for (int j = 0; j < array1[i].length; ++j) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        array1[1][1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testMixedArray() {        Object array1[] = new Object[2];        Object array2[] = new Object[2];        for (int i = 0; i < array1.length; ++i) {            array1[i] = new long[2];            array2[i] = new long[2];            for (int j = 0; j < 2; ++j) {                ((long[]) array1[i])[j] = (i + 1) * (j + 1);                ((long[]) array2[i])[j] = (i + 1) * (j + 1);            }        }        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());        ((long[]) array1[1])[1] = 0;        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());    }    public void testObjectArrayHiddenByObject() {        TestObject[] array1 = new TestObject[2];        array1[0] = new TestObject(4);        array1[1] = new TestObject(5);        TestObject[] array2 = new TestObject[2];        array2[0] = new TestObject(4);        array2[1] = new TestObject(5);        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1].setA(6);        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testLongArrayHiddenByObject() {        long[] array1 = new long[2];        array1[0] = 5L;        array1[1] = 6L;        long[] array2 = new long[2];        array2[0] = 5L;        array2[1] = 6L;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testIntArrayHiddenByObject() {        int[] array1 = new int[2];        array1[0] = 5;        array1[1] = 6;        int[] array2 = new int[2];        array2[0] = 5;        array2[1] = 6;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testShortArrayHiddenByObject() {        short[] array1 = new short[2];        array1[0] = 5;        array1[1] = 6;        short[] array2 = new short[2];        array2[0] = 5;        array2[1] = 6;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testCharArrayHiddenByObject() {        char[] array1 = new char[2];        array1[0] = 5;        array1[1] = 6;        char[] array2 = new char[2];        array2[0] = 5;        array2[1] = 6;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testByteArrayHiddenByObject() {        byte[] array1 = new byte[2];        array1[0] = 5;        array1[1] = 6;        byte[] array2 = new byte[2];        array2[0] = 5;        array2[1] = 6;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testDoubleArrayHiddenByObject() {        double[] array1 = new double[2];        array1[0] = 5;        array1[1] = 6;        double[] array2 = new double[2];        array2[0] = 5;        array2[1] = 6;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testFloatArrayHiddenByObject() {        float[] array1 = new float[2];        array1[0] = 5;        array1[1] = 6;        float[] array2 = new float[2];        array2[0] = 5;        array2[1] = 6;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = 7;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }    public void testBooleanArrayHiddenByObject() {        boolean[] array1 = new boolean[2];        array1[0] = true;        array1[1] = false;        boolean[] array2 = new boolean[2];        array2[0] = true;        array2[1] = false;        Object obj1 = array1;        Object obj2 = array2;        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());        array1[1] = true;        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());    }        public static class TestACanEqualB {        private int a;        public TestACanEqualB(int a) {            this.a = a;        }        @Override        public boolean equals(Object o) {            if (o == this)                return true;            if (o instanceof TestACanEqualB)                return this.a == ((TestACanEqualB) o).getA();            if (o instanceof TestBCanEqualA)                return this.a == ((TestBCanEqualA) o).getB();            return false;        }        public int getA() {            return this.a;        }    }    public static class TestBCanEqualA {        private int b;        public TestBCanEqualA(int b) {            this.b = b;        }        @Override        public boolean equals(Object o) {            if (o == this)                return true;            if (o instanceof TestACanEqualB)                return this.b == ((TestACanEqualB) o).getA();            if (o instanceof TestBCanEqualA)                return this.b == ((TestBCanEqualA) o).getB();            return false;        }        public int getB() {            return this.b;        }    }        /**     * Tests two instances of classes that can be equal and that are not "related". The two classes are not subclasses     * of each other and do not share a parent aside from Object.     * See http://issues.apache.org/bugzilla/show_bug.cgi?id=33069     */    public void testUnrelatedClasses() {        Object[] x = new Object[]{new TestACanEqualB(1)};        Object[] y = new Object[]{new TestBCanEqualA(1)};        // sanity checks:        assertTrue(Arrays.equals(x, x));        assertTrue(Arrays.equals(y, y));        assertTrue(Arrays.equals(x, y));        assertTrue(Arrays.equals(y, x));        // real tests:        assertTrue(x[0].equals(x[0]));        assertTrue(y[0].equals(y[0]));        assertTrue(x[0].equals(y[0]));        assertTrue(y[0].equals(x[0]));        assertTrue(new EqualsBuilder().append(x, x).isEquals());        assertTrue(new EqualsBuilder().append(y, y).isEquals());        assertTrue(new EqualsBuilder().append(x, y).isEquals());        assertTrue(new EqualsBuilder().append(y, x).isEquals());    }        /**     * Test from http://issues.apache.org/bugzilla/show_bug.cgi?id=33067     */    public void testNpeForNullElement() {        Object[] x1 = new Object[] { new Integer(1), null, new Integer(3) };        Object[] x2 = new Object[] { new Integer(1), new Integer(2), new Integer(3) };        // causes an NPE in 2.0 according to:        // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067        new EqualsBuilder().append(x1, x2);    }    public void testReflectionEqualsExcludeFields() throws Exception {        TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3);        TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4);        // not equal when including all fields        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2));        // doesn't barf on null, empty array, or non-existent field, but still tests as not equal        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, (String[]) null));        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {}));        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {"xxx"}));        // not equal if only one of the differing fields excluded        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {"two"}));        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {"three"}));        // equal if both differing fields excluded        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {"two", "three"}));        // still equal as long as both differing fields are among excluded        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {"one", "two", "three"}));        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {"one", "two", "three", "xxx"}));    }    static class TestObjectWithMultipleFields {        @SuppressWarnings("unused")        private TestObject one;        @SuppressWarnings("unused")        private TestObject two;        @SuppressWarnings("unused")        private TestObject three;        public TestObjectWithMultipleFields(int one, int two, int three) {            this.one = new TestObject(one);            this.two = new TestObject(two);            this.three = new TestObject(three);        }    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.util.ArrayList;import java.util.Collection;import java.util.List;import junit.framework.Assert;import junit.framework.TestCase;import org.apache.commons.lang.ArrayUtils;/** * @author <a href="mailto:ggregory@seagullsw.com">ggregory</a> * @version $Id$ */public class ReflectionToStringBuilderExcludeTest extends TestCase {    class TestFixture {        @SuppressWarnings("unused")        private String secretField = SECRET_VALUE;        @SuppressWarnings("unused")        private String showField = NOT_SECRET_VALUE;    }    private static final String NOT_SECRET_FIELD = "showField";    private static final String NOT_SECRET_VALUE = "Hello World!";    private static final String SECRET_FIELD = "secretField";    private static final String SECRET_VALUE = "secret value";    public void test_toStringExclude() {        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), SECRET_FIELD);        this.validateSecretFieldAbsent(toString);    }    public void test_toStringExcludeArray() {        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[]{SECRET_FIELD});        this.validateSecretFieldAbsent(toString);    }    public void test_toStringExcludeArrayWithNull() {        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[]{null});        this.validateSecretFieldPresent(toString);    }    public void test_toStringExcludeArrayWithNulls() {        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[]{null, null});        this.validateSecretFieldPresent(toString);    }    public void test_toStringExcludeCollection() {        List excludeList = new ArrayList();        excludeList.add(SECRET_FIELD);        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);        this.validateSecretFieldAbsent(toString);    }    public void test_toStringExcludeCollectionWithNull() {        List excludeList = new ArrayList();        excludeList.add(null);        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);        this.validateSecretFieldPresent(toString);    }    public void test_toStringExcludeCollectionWithNulls() {        List excludeList = new ArrayList();        excludeList.add(null);        excludeList.add(null);        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);        this.validateSecretFieldPresent(toString);    }    public void test_toStringExcludeEmptyArray() {        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY);        this.validateSecretFieldPresent(toString);    }    public void test_toStringExcludeEmptyCollection() {        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new ArrayList());        this.validateSecretFieldPresent(toString);    }    public void test_toStringExcludeNullArray() {        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (String[]) null);        this.validateSecretFieldPresent(toString);    }    public void test_toStringExcludeNullCollection() {        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (Collection) null);        this.validateSecretFieldPresent(toString);    }    private void validateNonSecretField(String toString) {        Assert.assertTrue(toString.indexOf(NOT_SECRET_FIELD) > ArrayUtils.INDEX_NOT_FOUND);        Assert.assertTrue(toString.indexOf(NOT_SECRET_VALUE) > ArrayUtils.INDEX_NOT_FOUND);    }    private void validateSecretFieldAbsent(String toString) {        Assert.assertEquals(ArrayUtils.INDEX_NOT_FOUND, toString.indexOf(SECRET_VALUE));        this.validateNonSecretField(toString);    }    private void validateSecretFieldPresent(String toString) {        Assert.assertTrue(toString.indexOf(SECRET_VALUE) > 0);        this.validateNonSecretField(toString);    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.util.ArrayList;import java.util.HashMap;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;import org.apache.commons.lang.SystemUtils;import org.apache.commons.lang.builder.ToStringStyleTest.Person;/** * Unit tests {@link org.apache.commons.lang.builder.MultiLineToStringStyleTest}. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id$ */public class MultiLineToStringStyleTest extends TestCase {    private final Integer base = new Integer(5);    private final String baseStr = base.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(base));        public MultiLineToStringStyleTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(MultiLineToStringStyleTest.class);        suite.setName("MultiLineToStringStyle Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();        ToStringBuilder.setDefaultStyle(ToStringStyle.MULTI_LINE_STYLE);    }    @Override    protected void tearDown() throws Exception {        super.tearDown();        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);    }    //----------------------------------------------------------------        public void testBlank() {        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).toString());    }    public void testAppendSuper() {        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").toString());                assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());    }        public void testObject() {        Integer i3 = new Integer(3);        Integer i4 = new Integer(4);        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) null).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  3" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(i3).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=<null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", (Object) null).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=3" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", i3).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=3" + SystemUtils.LINE_SEPARATOR + "  b=4" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=<Integer>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", i3, false).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=<size=0>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", new ArrayList(), false).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=[]" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", new ArrayList(), true).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=<size=0>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", new HashMap(), false).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a={}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", new HashMap(), true).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=<size=0>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a={}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());    }    public void testPerson() {        Person p = new Person();        p.name = "Jane Doe";        p.age = 25;        p.smoker = true;        String pBaseStr = p.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(p));        assertEquals(pBaseStr + "[" + SystemUtils.LINE_SEPARATOR + "  name=Jane Doe" + SystemUtils.LINE_SEPARATOR + "  age=25" + SystemUtils.LINE_SEPARATOR + "  smoker=true" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());    }    public void testLong() {        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  3" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(3L).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=3" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", 3L).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=3" + SystemUtils.LINE_SEPARATOR + "  b=4" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());    }    public void testObjectArray() {        Object[] array = new Object[] {null, base, new int[] {3, 6}};        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {<null>,5,{3,6}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {<null>,5,{3,6}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArray() {        long[] array = new long[] {1, 2, -3, 4};        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArrayArray() {        long[][] array = new long[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {{1,2},<null>,{5}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {{1,2},<null>,{5}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.util.ArrayList;import java.util.HashMap;import org.apache.commons.lang.builder.ToStringStyleTest.Person;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest}. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id$ */public class NoFieldNamesToStringStyleTest extends TestCase {    private final Integer base = new Integer(5);    private final String baseStr = base.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(base));        public NoFieldNamesToStringStyleTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(NoFieldNamesToStringStyleTest.class);        suite.setName("NoFieldNamesToStringStyle Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();        ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);    }    @Override    protected void tearDown() throws Exception {        super.tearDown();        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);    }    //----------------------------------------------------------------        public void testBlank() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());    }    public void testAppendSuper() {        assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());                assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());        assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());        assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());    }        public void testObject() {        Integer i3 = new Integer(3);        Integer i4 = new Integer(4);        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append("a", i3).toString());        assertEquals(baseStr + "[3,4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());        assertEquals(baseStr + "[<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());        assertEquals(baseStr + "[<size=0>]", new ToStringBuilder(base).append("a", new ArrayList(), false).toString());        assertEquals(baseStr + "[[]]", new ToStringBuilder(base).append("a", new ArrayList(), true).toString());        assertEquals(baseStr + "[<size=0>]", new ToStringBuilder(base).append("a", new HashMap(), false).toString());        assertEquals(baseStr + "[{}]", new ToStringBuilder(base).append("a", new HashMap(), true).toString());        assertEquals(baseStr + "[<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());        assertEquals(baseStr + "[{}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());    }    public void testPerson() {        Person p = new Person();        p.name = "Ron Paul";        p.age = 72;        p.smoker = false;        String pBaseStr = p.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(p));        assertEquals(pBaseStr + "[Ron Paul,72,false]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());    }    public void testLong() {        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());        assertEquals(baseStr + "[3]", new ToStringBuilder(base).append("a", 3L).toString());        assertEquals(baseStr + "[3,4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());    }    public void testObjectArray() {        Object[] array = new Object[] {null, base, new int[] {3, 6}};        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArray() {        long[] array = new long[] {1, 2, -3, 4};        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }    public void testLongArrayArray() {        long[][] array = new long[][] {{1, 2}, null, {5}};        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());        array = null;        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());        assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Test case for ToStringStyle. *  * @author Masato Tezuka * @version $Id$ */public class ToStringStyleTest extends TestCase {    public ToStringStyleTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(ToStringStyleTest.class);        suite.setName("ToStringStyle Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    private static class ToStringStyleImpl extends ToStringStyle {    }    //-----------------------------------------------------------------------    public void testSetArrayStart() {        ToStringStyle style = new ToStringStyleImpl();        style.setArrayStart(null);        assertEquals("", style.getArrayStart());    }    public void testSetArrayEnd() {        ToStringStyle style = new ToStringStyleImpl();        style.setArrayEnd(null);        assertEquals("", style.getArrayEnd());    }    public void testSetArraySeparator() {        ToStringStyle style = new ToStringStyleImpl();        style.setArraySeparator(null);        assertEquals("", style.getArraySeparator());    }    public void testSetContentStart() {        ToStringStyle style = new ToStringStyleImpl();        style.setContentStart(null);        assertEquals("", style.getContentStart());    }    public void testSetContentEnd() {        ToStringStyle style = new ToStringStyleImpl();        style.setContentEnd(null);        assertEquals("", style.getContentEnd());    }    public void testSetFieldNameValueSeparator() {        ToStringStyle style = new ToStringStyleImpl();        style.setFieldNameValueSeparator(null);        assertEquals("", style.getFieldNameValueSeparator());    }    public void testSetFieldSeparator() {        ToStringStyle style = new ToStringStyleImpl();        style.setFieldSeparator(null);        assertEquals("", style.getFieldSeparator());    }    public void testSetNullText() {        ToStringStyle style = new ToStringStyleImpl();        style.setNullText(null);        assertEquals("", style.getNullText());    }    public void testSetSizeStartText() {        ToStringStyle style = new ToStringStyleImpl();        style.setSizeStartText(null);        assertEquals("", style.getSizeStartText());    }    public void testSetSizeEndText() {        ToStringStyle style = new ToStringStyleImpl();        style.setSizeEndText(null);        assertEquals("", style.getSizeEndText());    }    public void testSetSummaryObjectStartText() {        ToStringStyle style = new ToStringStyleImpl();        style.setSummaryObjectStartText(null);        assertEquals("", style.getSummaryObjectStartText());    }    public void testSetSummaryObjectEndText() {        ToStringStyle style = new ToStringStyleImpl();        style.setSummaryObjectEndText(null);        assertEquals("", style.getSummaryObjectEndText());    }    /**     * An object used to test {@link ToStringStyle}.     *      * @author Scott Bassin     */    static class Person {        /**         * Test String field.         */        String name;        /**         * Test integer field.         */        int age;        /**         * Test boolean field.         */        boolean smoker;    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Tests {@link org.apache.commons.lang.builder.HashCodeBuilder} and * {@link org.apache.commons.lang.builder.EqualsBuilderTest} to insure that equal * objects must have equal hash codes. *  * @author Gary Gregory * @version $Id$ */public class HashCodeBuilderAndEqualsBuilderTest extends TestCase {    /**     * Constructor for HashCodeBuilderAndEqualsBuilderTest.     * @param name     */    public HashCodeBuilderAndEqualsBuilderTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(HashCodeBuilderAndEqualsBuilderTest.class);        suite.setName("HashCodeBuilderAndEqualsBuilder Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testInteger(boolean testTransients) {        Integer i1 = new Integer(12345);        Integer i2 = new Integer(12345);        assertEqualsAndHashCodeContract(i1, i2, testTransients);    }    public void testInteger() {        testInteger(false);    }    public void testIntegerWithTransients() {        testInteger(true);    }    public void testFixture() {        testFixture(false);    }    public void testFixtureWithTransients() {        testFixture(true);    }    public void testFixture(boolean testTransients) {        assertEqualsAndHashCodeContract(new TestFixture(2, 'c', "Test", (short) 2), new TestFixture(2, 'c', "Test", (short) 2), testTransients);        assertEqualsAndHashCodeContract(            new AllTransientFixture(2, 'c', "Test", (short) 2),            new AllTransientFixture(2, 'c', "Test", (short) 2),            testTransients);        assertEqualsAndHashCodeContract(            new SubTestFixture(2, 'c', "Test", (short) 2, "Same"),            new SubTestFixture(2, 'c', "Test", (short) 2, "Same"),            testTransients);        assertEqualsAndHashCodeContract(            new SubAllTransientFixture(2, 'c', "Test", (short) 2, "Same"),            new SubAllTransientFixture(2, 'c', "Test", (short) 2, "Same"),            testTransients);    }    /**     * Asserts that if <code>lhs</code> equals <code>rhs</code>      * then their hash codes MUST be identical.     *      * @param lhs The Left-Hand-Side of the equals test     * @param rhs The Right-Hand-Side of the equals test     * @param testTransients wether to test transient fields     */    public void assertEqualsAndHashCodeContract(Object lhs, Object rhs, boolean testTransients) {        if (EqualsBuilder.reflectionEquals(lhs, rhs, testTransients)) {            // test a couple of times for consistency.            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));        }    }    static class TestFixture {        int i;        char c;        String string;        short s;        TestFixture(int i, char c, String string, short s) {            this.i = i;            this.c = c;            this.string = string;            this.s = s;        }    }    static class SubTestFixture extends TestFixture {        transient String tString;        SubTestFixture(int i, char c, String string, short s, String tString) {            super(i, c, string, s);            this.tString = tString;        }    }    static class AllTransientFixture {        transient int i;        transient char c;        transient String string;        transient short s;        AllTransientFixture(int i, char c, String string, short s) {            this.i = i;            this.c = c;            this.string = string;            this.s = s;        }    }    static class SubAllTransientFixture extends AllTransientFixture {        transient String tString;        SubAllTransientFixture(int i, char c, String string, short s, String tString) {            super(i, c, string, s);            this.tString = tString;        }    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang.builder;import java.math.BigInteger;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.builder.CompareToBuilder}. * * @author <a href="mailto:sdowney@panix.com">Steve Downey</a> * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @version $Id$ */public class CompareToBuilderTest extends TestCase {  public CompareToBuilderTest(String name) {    super(name);  }     public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(CompareToBuilderTest.class);        suite.setName("CompareToBuilder Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    static class TestObject implements Comparable {        private int a;        public TestObject(int a) {            this.a = a;        }        @Override        public boolean equals(Object o) {            if (o == this) {                return true;            }            if (!(o instanceof TestObject)) {                return false;            }            TestObject rhs = (TestObject) o;            return (a == rhs.a);        }        public void setA(int a) {            this.a = a;        }        public int getA() {            return a;        }        public int compareTo(Object o) {            TestObject rhs = (TestObject) o;            return (a < rhs.a) ? -1 : (a > rhs.a) ? +1 : 0;        }    }    static class TestSubObject extends TestObject {        private int b;        public TestSubObject() {            super(0);        }        public TestSubObject(int a, int b) {            super(a);            this.b = b;        }        @Override        public boolean equals(Object o) {            if (o == this) {                return true;            }            if (!(o instanceof TestSubObject)) {                return false;            }            TestSubObject rhs = (TestSubObject) o;            return super.equals(o) && (b == rhs.b);        }    }    static class TestTransientSubObject extends TestObject {        @SuppressWarnings("unused")        private transient int t;        public TestTransientSubObject(int a, int t) {            super(a);            this.t = t;        }    }        public void testReflectionCompare() {        TestObject o1 = new TestObject(4);        TestObject o2 = new TestObject(4);        assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0);        assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0);        o2.setA(5);        assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0);        assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0);    }    public void testReflectionCompareEx1() {        TestObject o1 = new TestObject(4);        try {            CompareToBuilder.reflectionCompare(o1, null);        } catch (NullPointerException ex) {            return;        }        fail();    }    public void testReflectionCompareEx2() {        TestObject o1 = new TestObject(4);        Object o2 = new Object();        try {            CompareToBuilder.reflectionCompare(o1, o2);            fail();        } catch (ClassCastException ex) {}    }    public void testReflectionHierarchyCompare() {        testReflectionHierarchyCompare(false, null);    }        public void testReflectionHierarchyCompareExcludeFields() {        String[] excludeFields = new String[] { "b" };        testReflectionHierarchyCompare(true, excludeFields);                TestSubObject x;        TestSubObject y;        TestSubObject z;                x = new TestSubObject(1, 1);        y = new TestSubObject(2, 1);        z = new TestSubObject(3, 1);        assertXYZCompareOrder(x, y, z, true, excludeFields);        x = new TestSubObject(1, 3);        y = new TestSubObject(2, 2);        z = new TestSubObject(3, 1);        assertXYZCompareOrder(x, y, z, true, excludeFields);    }        public void testReflectionHierarchyCompareTransients() {        testReflectionHierarchyCompare(true, null);        TestTransientSubObject x;        TestTransientSubObject y;        TestTransientSubObject z;        x = new TestTransientSubObject(1, 1);        y = new TestTransientSubObject(2, 2);        z = new TestTransientSubObject(3, 3);        assertXYZCompareOrder(x, y, z, true, null);                x = new TestTransientSubObject(1, 1);        y = new TestTransientSubObject(1, 2);        z = new TestTransientSubObject(1, 3);        assertXYZCompareOrder(x, y, z, true, null);      }        private void assertXYZCompareOrder(Object x, Object y, Object z, boolean testTransients, String[] excludeFields) {        assertTrue(0 == CompareToBuilder.reflectionCompare(x, x, testTransients, null, excludeFields));        assertTrue(0 == CompareToBuilder.reflectionCompare(y, y, testTransients, null, excludeFields));        assertTrue(0 == CompareToBuilder.reflectionCompare(z, z, testTransients, null, excludeFields));                assertTrue(0 > CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields));        assertTrue(0 > CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields));        assertTrue(0 > CompareToBuilder.reflectionCompare(y, z, testTransients, null, excludeFields));                assertTrue(0 < CompareToBuilder.reflectionCompare(y, x, testTransients, null, excludeFields));        assertTrue(0 < CompareToBuilder.reflectionCompare(z, x, testTransients, null, excludeFields));        assertTrue(0 < CompareToBuilder.reflectionCompare(z, y, testTransients, null, excludeFields));    }        public void testReflectionHierarchyCompare(boolean testTransients, String[] excludeFields) {        TestObject to1 = new TestObject(1);        TestObject to2 = new TestObject(2);        TestObject to3 = new TestObject(3);        TestSubObject tso1 = new TestSubObject(1, 1);        TestSubObject tso2 = new TestSubObject(2, 2);        TestSubObject tso3 = new TestSubObject(3, 3);                assertReflectionCompareContract(to1, to1, to1, false, excludeFields);        assertReflectionCompareContract(to1, to2, to3, false, excludeFields);        assertReflectionCompareContract(tso1, tso1, tso1, false, excludeFields);        assertReflectionCompareContract(tso1, tso2, tso3, false, excludeFields);        assertReflectionCompareContract("1", "2", "3", false, excludeFields);                assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(1, 0), testTransients));        assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(0, 1), testTransients));        // root class        assertXYZCompareOrder(to1, to2, to3, true, null);        // subclass          assertXYZCompareOrder(tso1, tso2, tso3, true, null);      }    /**     * See "Effective Java" under "Consider Implementing Comparable".     *       * @param x an object to compare      * @param y an object to compare     * @param z an object to compare     * @param testTransients Whether to include transients in the comparison     * @param excludeFields fields to exclude     */    public void assertReflectionCompareContract(Object x, Object y, Object z, boolean testTransients, String[] excludeFields) {        // signum        assertTrue(reflectionCompareSignum(x, y, testTransients, excludeFields) == -reflectionCompareSignum(y, x, testTransients, excludeFields));                // transitive        if (CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields) > 0                 && CompareToBuilder.reflectionCompare(y, z, testTransients, null, excludeFields) > 0){            assertTrue(CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields) > 0);        }                // un-named        if (CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields) == 0) {            assertTrue(reflectionCompareSignum(x, z, testTransients, excludeFields) == -reflectionCompareSignum(y, z, testTransients, excludeFields));        }                // strongly recommended but not strictly required        assertTrue((CompareToBuilder.reflectionCompare(x, y, testTransients) ==0 ) == EqualsBuilder.reflectionEquals(x, y, testTransients));    }        /**     * Returns the signum of the result of comparing x and y with     * <code>CompareToBuilder.reflectionCompare</code>     *      * @param lhs The "left-hand-side" of the comparison.     * @param rhs The "right-hand-side" of the comparison.     * @param testTransients Whether to include transients in the comparison     * @param excludeFields fields to exclude     * @return int The signum     */    private int reflectionCompareSignum(Object lhs, Object rhs, boolean testTransients, String[] excludeFields) {        return BigInteger.valueOf(CompareToBuilder.reflectionCompare(lhs, rhs, testTransients)).signum();    }        public void testAppendSuper() {        TestObject o1 = new TestObject(4);        TestObject o2 = new TestObject(5);        assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0);                assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0);        assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0);                assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0);    }        public void testObject() {        TestObject o1 = new TestObject(4);        TestObject o2 = new TestObject(4);        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0);        o2.setA(5);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);                assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0);    }    public void testObjectEx2() {        TestObject o1 = new TestObject(4);        Object o2 = new Object();        try {            new CompareToBuilder().append(o1, o2);            fail();        } catch (ClassCastException ex) {}    }    public void testObjectComparator() {        String o1 = "Fred";        String o2 = "Fred";        assertTrue(new CompareToBuilder().append(o1, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);        o2 = "FRED";        assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);        o2 = "FREDA";        assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);                assertTrue(new CompareToBuilder().append(o1, null, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);        assertTrue(new CompareToBuilder().append((Object) null, (Object) null, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, o1, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);    }        public void testObjectComparatorNull() {        String o1 = "Fred";        String o2 = "Fred";        assertTrue(new CompareToBuilder().append(o1, o1, null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() == 0);        o2 = "Zebra";        assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1, null).toComparison() > 0);                assertTrue(new CompareToBuilder().append(o1, null, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((Object) null, (Object) null, null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, o1, null).toComparison() < 0);    }    public void testLong() {        long o1 = 1L;        long o2 = 2L;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Long.MAX_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Long.MAX_VALUE, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Long.MIN_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Long.MIN_VALUE, o1).toComparison() < 0);    }    public void testInt() {        int o1 = 1;        int o2 = 2;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Integer.MAX_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Integer.MAX_VALUE, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Integer.MIN_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Integer.MIN_VALUE, o1).toComparison() < 0);    }    public void testShort() {        short o1 = 1;        short o2 = 2;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Short.MAX_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Short.MAX_VALUE, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Short.MIN_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Short.MIN_VALUE, o1).toComparison() < 0);    }    public void testChar() {        char o1 = 1;        char o2 = 2;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Character.MAX_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Character.MAX_VALUE, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Character.MIN_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Character.MIN_VALUE, o1).toComparison() < 0);    }    public void testByte() {        byte o1 = 1;        byte o2 = 2;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Byte.MAX_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Byte.MAX_VALUE, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Byte.MIN_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Byte.MIN_VALUE, o1).toComparison() < 0);    }    public void testDouble() {        double o1 = 1;        double o2 = 2;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Double.MAX_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Double.MAX_VALUE, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Double.MIN_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Double.MIN_VALUE, o1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Double.NaN, Double.NaN).toComparison() == 0);        assertTrue(new CompareToBuilder().append(Double.NaN, Double.MAX_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Double.POSITIVE_INFINITY, Double.MAX_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Double.NEGATIVE_INFINITY, Double.MIN_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o1, Double.NaN).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Double.NaN, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);        assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);    }    public void testFloat() {        float o1 = 1;        float o2 = 2;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Float.MAX_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Float.MAX_VALUE, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o1, Float.MIN_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Float.MIN_VALUE, o1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Float.NaN, Float.NaN).toComparison() == 0);        assertTrue(new CompareToBuilder().append(Float.NaN, Float.MAX_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Float.POSITIVE_INFINITY, Float.MAX_VALUE).toComparison() > 0);        assertTrue(new CompareToBuilder().append(Float.NEGATIVE_INFINITY, Float.MIN_VALUE).toComparison() < 0);        assertTrue(new CompareToBuilder().append(o1, Float.NaN).toComparison() < 0);        assertTrue(new CompareToBuilder().append(Float.NaN, o1).toComparison() > 0);        assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);        assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);    }    public void testBoolean() {        boolean o1 = true;        boolean o2 = false;        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o2, o2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() < 0);    }    public void testObjectArray() {        TestObject[] obj1 = new TestObject[2];        obj1[0] = new TestObject(4);        obj1[1] = new TestObject(5);        TestObject[] obj2 = new TestObject[2];        obj2[0] = new TestObject(4);        obj2[1] = new TestObject(5);        TestObject[] obj3 = new TestObject[3];        obj3[0] = new TestObject(4);        obj3[1] = new TestObject(5);        obj3[2] = new TestObject(6);                assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);                obj1[1] = new TestObject(7);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((Object[]) null, (Object[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testLongArray() {        long[] obj1 = new long[2];        obj1[0] = 5L;        obj1[1] = 6L;        long[] obj2 = new long[2];        obj2[0] = 5L;        obj2[1] = 6L;        long[] obj3 = new long[3];        obj3[0] = 5L;        obj3[1] = 6L;        obj3[2] = 7L;                assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((long[]) null, (long[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testIntArray() {        int[] obj1 = new int[2];        obj1[0] = 5;        obj1[1] = 6;        int[] obj2 = new int[2];        obj2[0] = 5;        obj2[1] = 6;        int[] obj3 = new int[3];        obj3[0] = 5;        obj3[1] = 6;        obj3[2] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((int[]) null, (int[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testShortArray() {        short[] obj1 = new short[2];        obj1[0] = 5;        obj1[1] = 6;        short[] obj2 = new short[2];        obj2[0] = 5;        obj2[1] = 6;        short[] obj3 = new short[3];        obj3[0] = 5;        obj3[1] = 6;        obj3[2] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testCharArray() {        char[] obj1 = new char[2];        obj1[0] = 5;        obj1[1] = 6;        char[] obj2 = new char[2];        obj2[0] = 5;        obj2[1] = 6;        char[] obj3 = new char[3];        obj3[0] = 5;        obj3[1] = 6;        obj3[2] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((char[]) null, (char[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testByteArray() {        byte[] obj1 = new byte[2];        obj1[0] = 5;        obj1[1] = 6;        byte[] obj2 = new byte[2];        obj2[0] = 5;        obj2[1] = 6;        byte[] obj3 = new byte[3];        obj3[0] = 5;        obj3[1] = 6;        obj3[2] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((byte[]) null, (byte[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testDoubleArray() {        double[] obj1 = new double[2];        obj1[0] = 5;        obj1[1] = 6;        double[] obj2 = new double[2];        obj2[0] = 5;        obj2[1] = 6;        double[] obj3 = new double[3];        obj3[0] = 5;        obj3[1] = 6;        obj3[2] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testFloatArray() {        float[] obj1 = new float[2];        obj1[0] = 5;        obj1[1] = 6;        float[] obj2 = new float[2];        obj2[0] = 5;        obj2[1] = 6;        float[] obj3 = new float[3];        obj3[0] = 5;        obj3[1] = 6;        obj3[2] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((float[]) null, (float[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testBooleanArray() {        boolean[] obj1 = new boolean[2];        obj1[0] = true;        obj1[1] = false;        boolean[] obj2 = new boolean[2];        obj2[0] = true;        obj2[1] = false;        boolean[] obj3 = new boolean[3];        obj3[0] = true;        obj3[1] = false;        obj3[2] = true;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        obj1[1] = true;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);        assertTrue(new CompareToBuilder().append((boolean[]) null, (boolean[]) null).toComparison() == 0);        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);    }    public void testMultiLongArray() {        long[][] array1 = new long[2][2];        long[][] array2 = new long[2][2];        long[][] array3 = new long[2][3];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);                array3[i][j] = (i + 1) * (j + 1);            }        }        array3[1][2] = 100;        array3[1][2] = 100;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 200;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testMultiIntArray() {        int[][] array1 = new int[2][2];        int[][] array2 = new int[2][2];        int[][] array3 = new int[2][3];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);                array3[i][j] = (i + 1) * (j + 1);            }        }        array3[1][2] = 100;        array3[1][2] = 100;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 200;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testMultiShortArray() {        short[][] array1 = new short[2][2];        short[][] array2 = new short[2][2];        short[][] array3 = new short[2][3];        for (short i = 0; i < array1.length; ++i) {            for (short j = 0; j < array1[0].length; j++) {                array1[i][j] = (short)((i + 1) * (j + 1));                array2[i][j] = (short)((i + 1) * (j + 1));                array3[i][j] = (short)((i + 1) * (j + 1));            }        }        array3[1][2] = 100;        array3[1][2] = 100;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 200;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testMultiCharArray() {        char[][] array1 = new char[2][2];        char[][] array2 = new char[2][2];        char[][] array3 = new char[2][3];        for (short i = 0; i < array1.length; ++i) {            for (short j = 0; j < array1[0].length; j++) {                array1[i][j] = (char)((i + 1) * (j + 1));                array2[i][j] = (char)((i + 1) * (j + 1));                array3[i][j] = (char)((i + 1) * (j + 1));            }        }        array3[1][2] = 100;        array3[1][2] = 100;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 200;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testMultiByteArray() {        byte[][] array1 = new byte[2][2];        byte[][] array2 = new byte[2][2];        byte[][] array3 = new byte[2][3];        for (byte i = 0; i < array1.length; ++i) {            for (byte j = 0; j < array1[0].length; j++) {                array1[i][j] = (byte)((i + 1) * (j + 1));                array2[i][j] = (byte)((i + 1) * (j + 1));                array3[i][j] = (byte)((i + 1) * (j + 1));            }        }        array3[1][2] = 100;        array3[1][2] = 100;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 127;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }        public void testMultiFloatArray() {        float[][] array1 = new float[2][2];        float[][] array2 = new float[2][2];        float[][] array3 = new float[2][3];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = ((i + 1) * (j + 1));                array2[i][j] = ((i + 1) * (j + 1));                array3[i][j] = ((i + 1) * (j + 1));            }        }        array3[1][2] = 100;        array3[1][2] = 100;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 127;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testMultiDoubleArray() {        double[][] array1 = new double[2][2];        double[][] array2 = new double[2][2];        double[][] array3 = new double[2][3];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = ((i + 1) * (j + 1));                array2[i][j] = ((i + 1) * (j + 1));                array3[i][j] = ((i + 1) * (j + 1));            }        }        array3[1][2] = 100;        array3[1][2] = 100;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 127;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testMultiBooleanArray() {        boolean[][] array1 = new boolean[2][2];        boolean[][] array2 = new boolean[2][2];        boolean[][] array3 = new boolean[2][3];        for (int i = 0; i < array1.length; ++i) {            for (int j = 0; j < array1[0].length; j++) {                array1[i][j] = ((i == 1) ^ (j == 1));                array2[i][j] = ((i == 1) ^ (j == 1));                array3[i][j] = ((i == 1) ^ (j == 1));            }        }        array3[1][2] = false;        array3[1][2] = false;                assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = true;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testRaggedArray() {        long array1[][] = new long[2][];        long array2[][] = new long[2][];        long array3[][] = new long[3][];        for (int i = 0; i < array1.length; ++i) {            array1[i] = new long[2];            array2[i] = new long[2];            array3[i] = new long[3];            for (int j = 0; j < array1[i].length; ++j) {                array1[i][j] = (i + 1) * (j + 1);                array2[i][j] = (i + 1) * (j + 1);                array3[i][j] = (i + 1) * (j + 1);            }        }        array3[1][2] = 100;        array3[1][2] = 100;                        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        array1[1][1] = 200;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testMixedArray() {        Object array1[] = new Object[2];        Object array2[] = new Object[2];        Object array3[] = new Object[2];        for (int i = 0; i < array1.length; ++i) {            array1[i] = new long[2];            array2[i] = new long[2];            array3[i] = new long[3];            for (int j = 0; j < 2; ++j) {                ((long[]) array1[i])[j] = (i + 1) * (j + 1);                ((long[]) array2[i])[j] = (i + 1) * (j + 1);                ((long[]) array3[i])[j] = (i + 1) * (j + 1);            }        }        ((long[]) array3[0])[2] = 1;        ((long[]) array3[1])[2] = 1;        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);        ((long[]) array1[1])[1] = 200;        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);    }    public void testObjectArrayHiddenByObject() {        TestObject[] array1 = new TestObject[2];        array1[0] = new TestObject(4);        array1[1] = new TestObject(5);        TestObject[] array2 = new TestObject[2];        array2[0] = new TestObject(4);        array2[1] = new TestObject(5);        TestObject[] array3 = new TestObject[3];        array3[0] = new TestObject(4);        array3[1] = new TestObject(5);        array3[2] = new TestObject(6);                Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;                assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = new TestObject(7);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testLongArrayHiddenByObject() {        long[] array1 = new long[2];        array1[0] = 5L;        array1[1] = 6L;        long[] array2 = new long[2];        array2[0] = 5L;        array2[1] = 6L;        long[] array3 = new long[3];        array3[0] = 5L;        array3[1] = 6L;        array3[2] = 7L;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testIntArrayHiddenByObject() {        int[] array1 = new int[2];        array1[0] = 5;        array1[1] = 6;        int[] array2 = new int[2];        array2[0] = 5;        array2[1] = 6;        int[] array3 = new int[3];        array3[0] = 5;        array3[1] = 6;        array3[2] = 7;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testShortArrayHiddenByObject() {        short[] array1 = new short[2];        array1[0] = 5;        array1[1] = 6;        short[] array2 = new short[2];        array2[0] = 5;        array2[1] = 6;        short[] array3 = new short[3];        array3[0] = 5;        array3[1] = 6;        array3[2] = 7;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testCharArrayHiddenByObject() {        char[] array1 = new char[2];        array1[0] = 5;        array1[1] = 6;        char[] array2 = new char[2];        array2[0] = 5;        array2[1] = 6;        char[] array3 = new char[3];        array3[0] = 5;        array3[1] = 6;        array3[2] = 7;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testByteArrayHiddenByObject() {        byte[] array1 = new byte[2];        array1[0] = 5;        array1[1] = 6;        byte[] array2 = new byte[2];        array2[0] = 5;        array2[1] = 6;        byte[] array3 = new byte[3];        array3[0] = 5;        array3[1] = 6;        array3[2] = 7;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testDoubleArrayHiddenByObject() {        double[] array1 = new double[2];        array1[0] = 5;        array1[1] = 6;        double[] array2 = new double[2];        array2[0] = 5;        array2[1] = 6;        double[] array3 = new double[3];        array3[0] = 5;        array3[1] = 6;        array3[2] = 7;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testFloatArrayHiddenByObject() {        float[] array1 = new float[2];        array1[0] = 5;        array1[1] = 6;        float[] array2 = new float[2];        array2[0] = 5;        array2[1] = 6;        float[] array3 = new float[3];        array3[0] = 5;        array3[1] = 6;        array3[2] = 7;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = 7;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }    public void testBooleanArrayHiddenByObject() {        boolean[] array1 = new boolean[2];        array1[0] = true;        array1[1] = false;        boolean[] array2 = new boolean[2];        array2[0] = true;        array2[1] = false;        boolean[] array3 = new boolean[3];        array3[0] = true;        array3[1] = false;        array3[2] = true;        Object obj1 = array1;        Object obj2 = array2;        Object obj3 = array3;        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);        array1[1] = true;        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);    }   }
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Tests for the IntHashMap class. * * @author  Steven Caswell * @version $Id$ */public class IntHashMapTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(IntHashMapTest.class);        suite.setName("IntHashMapTest Tests");        return suite;    }    public void testConstructor() {        try {            new IntHashMap(-1, 0.0f);            fail();        } catch (IllegalArgumentException e) {            assertEquals("Illegal Capacity: -1", e.getMessage());        }        try {            new IntHashMap(1, 0.0f);            fail();        } catch (IllegalArgumentException e) {            assertEquals("Illegal Load: 0.0", e.getMessage());        }        new IntHashMap(0, 1.0f);                try {            new IntHashMap(-1);            fail();        } catch (IllegalArgumentException e) {           assertEquals("Illegal Capacity: -1", e.getMessage());        }        IntHashMap map1 = new IntHashMap(0);        assertEquals(0, map1.size());    }        public void testClear() {        IntHashMap map = new IntHashMap();        assertNull(map.put(1, "hello"));        assertNull(map.put(2, "world"));        assertEquals(2, map.size());        map.clear();        assertEquals(0, map.size());    }      public void testContainsKey() {        IntHashMap map = new IntHashMap();        assertNull(map.put(1, "hello"));        assertNull(map.put(2, "world"));        assertEquals(2, map.size());        assertTrue(map.containsKey(1));        assertTrue(map.containsKey(2));        assertFalse(map.containsKey(3));    }    public void testContains() {        IntHashMap map = new IntHashMap();        assertNull(map.put(1, "hello"));        assertNull(map.put(2, "world"));        assertEquals(2, map.size());        assertTrue(map.containsValue("hello"));        assertTrue(map.containsValue("world"));        assertFalse(map.containsValue("goodbye"));        try {            map.containsValue(null);            fail();        } catch(NullPointerException e) {      }    }    public void testContainsValue() {        IntHashMap map = new IntHashMap();        assertNull(map.put(1, "hello"));        assertNull(map.put(2, "world"));        assertEquals(2, map.size());        assertTrue(map.containsValue("hello"));        assertTrue(map.containsValue("world"));        assertFalse(map.containsValue("goodbye"));        try {            map.containsValue(null);            fail();        } catch(NullPointerException e) {        }    }    public void testIsEmpty() {        IntHashMap map = new IntHashMap();        assertTrue(map.isEmpty());        assertNull(map.put(1, "hello"));        assertEquals(1, map.size());        assertFalse(map.isEmpty());    }      public void testPut() {        IntHashMap map = new IntHashMap();        assertNull(map.put(1, "hello"));        assertNull(map.put(2, "world"));        assertEquals(2, map.size());        assertEquals("hello", map.put(1, "hellooooo"));    }        public void testRemove() {        IntHashMap map = new IntHashMap();        assertNull(map.put(1, "hello"));        assertNull(map.put(2, "world"));        assertEquals(2, map.size());        assertEquals("hello", map.remove(1));        assertEquals(1, map.size());        assertNull(map.remove(3));    }    }
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.io.ByteArrayOutputStream;import java.io.PrintStream;import java.io.PrintWriter;import java.io.StringWriter;import java.lang.reflect.Constructor;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @author Matthew Hawthorne * @version $Id$ * @see NotImplementedException */public class NotImplementedExceptionTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(NotImplementedExceptionTest.class);    }    public NotImplementedExceptionTest(String testName) {        super(testName);    }    //-----------------------------------------------------------------------    public void testConstructor_() {        NotImplementedException ex = new NotImplementedException();        assertEquals("Code is not implemented", ex.getMessage());        assertEquals(null, ex.getCause());        assertEquals("Code is not implemented", ex.getMessage());    }    public void testConstructor_String1() {        NotImplementedException ex = new NotImplementedException((String) null);        assertEquals("Code is not implemented", ex.getMessage());        assertEquals(null, ex.getCause());        assertEquals("Code is not implemented", ex.getMessage());    }            public void testConstructor_String2() {        NotImplementedException ex = new NotImplementedException("msg");        assertEquals("msg", ex.getMessage());        assertEquals(null, ex.getCause());        assertEquals("msg", ex.getMessage());    }    public void testConstructor_Throwable1() {        NotImplementedException ex = new NotImplementedException((Throwable) null);        assertEquals("Code is not implemented", ex.getMessage());        assertEquals(null, ex.getCause());        assertEquals("Code is not implemented", ex.getMessage());    }            public void testConstructor_Throwable2() {        Exception npe = new NullPointerException();        NotImplementedException ex = new NotImplementedException(npe);        assertEquals("Code is not implemented", ex.getMessage());        assertSame(npe, ex.getCause());        assertEquals("Code is not implemented", ex.getMessage());    }    public void testConstructor_StringThrowable1() {        NotImplementedException ex = new NotImplementedException((String) null, (Throwable) null);        assertEquals("Code is not implemented", ex.getMessage());        assertEquals(null, ex.getCause());        assertEquals("Code is not implemented", ex.getMessage());    }    public void testConstructor_StringThrowable2() {        Exception npe = new NullPointerException();        NotImplementedException ex = new NotImplementedException("msg", npe);        assertEquals("msg", ex.getMessage());        assertSame(npe, ex.getCause());        assertEquals("msg", ex.getMessage());    }    public void testConstructor_Class1() {        NotImplementedException ex = new NotImplementedException((Class) null);        assertEquals("Code is not implemented", ex.getMessage());        assertEquals(null, ex.getCause());        assertEquals("Code is not implemented", ex.getMessage());    }    public void testConstructor_Class2() {        NotImplementedException ex = new NotImplementedException(String.class);        assertEquals("Code is not implemented in class java.lang.String", ex.getMessage());        assertEquals(null, ex.getCause());        assertEquals("Code is not implemented in class java.lang.String", ex.getMessage());    }    public void testPrintStackTrace() {        NotImplementedException ex = new NotImplementedException(new Exception("nested 1", new RuntimeException("nested 2")));        ByteArrayOutputStream baos = new ByteArrayOutputStream();        PrintStream ps = new PrintStream(baos);        PrintStream errStream = System.err;        System.setErr(ps);        ex.printStackTrace();        System.setErr(errStream);        assertTrue(baos.toString().length() > 0);    }        public void testPrintStackTrace_Stream() {        NotImplementedException ex = new NotImplementedException(new Exception("nested 1", new RuntimeException("nested 2")));        ByteArrayOutputStream baos = new ByteArrayOutputStream();        PrintStream ps = new PrintStream(baos);        ex.printStackTrace(ps);        assertTrue(baos.toString().length() > 0);    }        public void testPrintStackTrace_Writer() {        NotImplementedException ex = new NotImplementedException(new Exception("nested 1", new RuntimeException("nested 2")));        StringWriter stringWriter = new StringWriter();        PrintWriter writer = new PrintWriter(stringWriter);        ex.printStackTrace(writer);        assertTrue(stringWriter.toString().length() > 0);    }    }
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.BooleanUtils}. * * @author Stephen Colebourne * @author Matthew Hawthorne * @version $Id$ */public class BooleanUtilsTest extends TestCase {    public BooleanUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(BooleanUtilsTest.class);        suite.setName("BooleanUtils Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new BooleanUtils());        Constructor[] cons = BooleanUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(BooleanUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void test_negate_Boolean() {        assertSame(null, BooleanUtils.negate(null));        assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE));        assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE));    }    //-----------------------------------------------------------------------    public void test_isTrue_Boolean() {        assertEquals(true, BooleanUtils.isTrue(Boolean.TRUE));        assertEquals(false, BooleanUtils.isTrue(Boolean.FALSE));        assertEquals(false, BooleanUtils.isTrue((Boolean) null));    }    public void test_isNotTrue_Boolean() {        assertEquals(false, BooleanUtils.isNotTrue(Boolean.TRUE));        assertEquals(true, BooleanUtils.isNotTrue(Boolean.FALSE));        assertEquals(true, BooleanUtils.isNotTrue((Boolean) null));    }    //-----------------------------------------------------------------------    public void test_isFalse_Boolean() {        assertEquals(false, BooleanUtils.isFalse(Boolean.TRUE));        assertEquals(true, BooleanUtils.isFalse(Boolean.FALSE));        assertEquals(false, BooleanUtils.isFalse((Boolean) null));    }    public void test_isNotFalse_Boolean() {        assertEquals(true, BooleanUtils.isNotFalse(Boolean.TRUE));        assertEquals(false, BooleanUtils.isNotFalse(Boolean.FALSE));        assertEquals(true, BooleanUtils.isNotFalse((Boolean) null));    }    //-----------------------------------------------------------------------    public void test_toBoolean_Boolean() {        assertEquals(true, BooleanUtils.toBoolean(Boolean.TRUE));        assertEquals(false, BooleanUtils.toBoolean(Boolean.FALSE));        assertEquals(false, BooleanUtils.toBoolean((Boolean) null));    }    public void test_toBooleanDefaultIfNull_Boolean_boolean() {        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true));        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false));        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true));        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false));        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true));        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false));    }    //-----------------------------------------------------------------------    //-----------------------------------------------------------------------    public void test_toBoolean_int() {        assertEquals(true, BooleanUtils.toBoolean(1));        assertEquals(true, BooleanUtils.toBoolean(-1));        assertEquals(false, BooleanUtils.toBoolean(0));    }        public void test_toBooleanObject_int() {        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(1));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(-1));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(0));    }        public void test_toBooleanObject_Integer() {        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));        assertEquals(null, BooleanUtils.toBooleanObject((Integer) null));    }        //-----------------------------------------------------------------------    public void test_toBoolean_int_int_int() {        assertEquals(true, BooleanUtils.toBoolean(6, 6, 7));        assertEquals(false, BooleanUtils.toBoolean(7, 6, 7));        try {            BooleanUtils.toBoolean(8, 6, 7);            fail();        } catch (IllegalArgumentException ex) {}    }        public void test_toBoolean_Integer_Integer_Integer() {        Integer six = new Integer(6);        Integer seven = new Integer(7);        assertEquals(true, BooleanUtils.toBoolean((Integer) null, null, seven));        assertEquals(false, BooleanUtils.toBoolean((Integer) null, six, null));        try {            BooleanUtils.toBoolean(null, six, seven);            fail();        } catch (IllegalArgumentException ex) {}                assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));        assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));        try {            BooleanUtils.toBoolean(new Integer(8), six, seven);            fail();        } catch (IllegalArgumentException ex) {}    }        //-----------------------------------------------------------------------    public void test_toBooleanObject_int_int_int() {        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8));        assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8));        try {            BooleanUtils.toBooleanObject(9, 6, 7, 8);            fail();        } catch (IllegalArgumentException ex) {}    }        public void test_toBooleanObject_Integer_Integer_Integer_Integer() {        Integer six = new Integer(6);        Integer seven = new Integer(7);        Integer eight = new Integer(8);        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight));        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight));        assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null));        try {            BooleanUtils.toBooleanObject(null, six, seven, eight);            fail();        } catch (IllegalArgumentException ex) {}                assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));        assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));        try {            BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);            fail();        } catch (IllegalArgumentException ex) {}    }        //-----------------------------------------------------------------------    public void test_toInteger_boolean() {        assertEquals(1, BooleanUtils.toInteger(true));        assertEquals(0, BooleanUtils.toInteger(false));    }        public void test_toIntegerObject_boolean() {        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(false));    }        public void test_toIntegerObject_Boolean() {        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(Boolean.TRUE));        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(Boolean.FALSE));        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null));    }        //-----------------------------------------------------------------------    public void test_toInteger_boolean_int_int() {        assertEquals(6, BooleanUtils.toInteger(true, 6, 7));        assertEquals(7, BooleanUtils.toInteger(false, 6, 7));    }        public void test_toInteger_Boolean_int_int_int() {        assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8));        assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8));        assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8));    }        public void test_toIntegerObject_boolean_Integer_Integer() {        Integer six = new Integer(6);        Integer seven = new Integer(7);        assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven));        assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven));    }        public void test_toIntegerObject_Boolean_Integer_Integer_Integer() {        Integer six = new Integer(6);        Integer seven = new Integer(7);        Integer eight = new Integer(8);        assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight));        assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight));        assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight));        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null, six, seven, null));    }        //-----------------------------------------------------------------------    //-----------------------------------------------------------------------    public void test_toBooleanObject_String() {        assertEquals(null, BooleanUtils.toBooleanObject((String) null));        assertEquals(null, BooleanUtils.toBooleanObject(""));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false"));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no"));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off"));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE"));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO"));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF"));        assertEquals(null, BooleanUtils.toBooleanObject("oof"));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true"));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes"));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on"));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE"));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON"));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES"));        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE"));    }        public void test_toBooleanObject_String_String_String_String() {        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U"));        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U"));        assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null));        try {            BooleanUtils.toBooleanObject((String) null, "Y", "N", "U");            fail();        } catch (IllegalArgumentException ex) {}        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U"));        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U"));        assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U"));        try {            BooleanUtils.toBooleanObject(null, "Y", "N", "U");            fail();        } catch (IllegalArgumentException ex) {}        try {            BooleanUtils.toBooleanObject("X", "Y", "N", "U");            fail();        } catch (IllegalArgumentException ex) {}    }    //-----------------------------------------------------------------------    public void test_toBoolean_String() {        assertEquals(false, BooleanUtils.toBoolean((String) null));        assertEquals(false, BooleanUtils.toBoolean(""));        assertEquals(false, BooleanUtils.toBoolean("off"));        assertEquals(false, BooleanUtils.toBoolean("oof"));        assertEquals(false, BooleanUtils.toBoolean("yep"));        assertEquals(false, BooleanUtils.toBoolean("trux"));        assertEquals(false, BooleanUtils.toBoolean("false"));        assertEquals(false, BooleanUtils.toBoolean("a"));        assertEquals(true, BooleanUtils.toBoolean("true")); // interned handled differently        assertEquals(true, BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString()));        assertEquals(true, BooleanUtils.toBoolean("truE"));        assertEquals(true, BooleanUtils.toBoolean("trUe"));        assertEquals(true, BooleanUtils.toBoolean("trUE"));        assertEquals(true, BooleanUtils.toBoolean("tRue"));        assertEquals(true, BooleanUtils.toBoolean("tRuE"));        assertEquals(true, BooleanUtils.toBoolean("tRUe"));        assertEquals(true, BooleanUtils.toBoolean("tRUE"));        assertEquals(true, BooleanUtils.toBoolean("TRUE"));        assertEquals(true, BooleanUtils.toBoolean("TRUe"));        assertEquals(true, BooleanUtils.toBoolean("TRuE"));        assertEquals(true, BooleanUtils.toBoolean("TRue"));        assertEquals(true, BooleanUtils.toBoolean("TrUE"));        assertEquals(true, BooleanUtils.toBoolean("TrUe"));        assertEquals(true, BooleanUtils.toBoolean("TruE"));        assertEquals(true, BooleanUtils.toBoolean("True"));        assertEquals(true, BooleanUtils.toBoolean("on"));        assertEquals(true, BooleanUtils.toBoolean("oN"));        assertEquals(true, BooleanUtils.toBoolean("On"));        assertEquals(true, BooleanUtils.toBoolean("ON"));        assertEquals(true, BooleanUtils.toBoolean("yes"));        assertEquals(true, BooleanUtils.toBoolean("yeS"));        assertEquals(true, BooleanUtils.toBoolean("yEs"));        assertEquals(true, BooleanUtils.toBoolean("yES"));        assertEquals(true, BooleanUtils.toBoolean("Yes"));        assertEquals(true, BooleanUtils.toBoolean("YeS"));        assertEquals(true, BooleanUtils.toBoolean("YEs"));        assertEquals(true, BooleanUtils.toBoolean("YES"));        assertEquals(false, BooleanUtils.toBoolean("yes?"));        assertEquals(false, BooleanUtils.toBoolean("tru"));    }    public void test_toBoolean_String_String_String() {        assertEquals(true, BooleanUtils.toBoolean((String) null, null, "N"));        assertEquals(false, BooleanUtils.toBoolean((String) null, "Y", null));        try {            BooleanUtils.toBooleanObject((String) null, "Y", "N", "U");            fail();        } catch (IllegalArgumentException ex) {}                assertEquals(true, BooleanUtils.toBoolean("Y", "Y", "N"));        assertEquals(false, BooleanUtils.toBoolean("N", "Y", "N"));        try {            BooleanUtils.toBoolean(null, "Y", "N");            fail();        } catch (IllegalArgumentException ex) {}        try {            BooleanUtils.toBoolean("X", "Y", "N");            fail();        } catch (IllegalArgumentException ex) {}    }    //-----------------------------------------------------------------------    public void test_toStringTrueFalse_Boolean() {        assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null));        assertEquals("true", BooleanUtils.toStringTrueFalse(Boolean.TRUE));        assertEquals("false", BooleanUtils.toStringTrueFalse(Boolean.FALSE));    }        public void test_toStringOnOff_Boolean() {        assertEquals(null, BooleanUtils.toStringOnOff((Boolean) null));        assertEquals("on", BooleanUtils.toStringOnOff(Boolean.TRUE));        assertEquals("off", BooleanUtils.toStringOnOff(Boolean.FALSE));    }        public void test_toStringYesNo_Boolean() {        assertEquals(null, BooleanUtils.toStringYesNo((Boolean) null));        assertEquals("yes", BooleanUtils.toStringYesNo(Boolean.TRUE));        assertEquals("no", BooleanUtils.toStringYesNo(Boolean.FALSE));    }        public void test_toString_Boolean_String_String_String() {        assertEquals("U", BooleanUtils.toString((Boolean) null, "Y", "N", "U"));        assertEquals("Y", BooleanUtils.toString(Boolean.TRUE, "Y", "N", "U"));        assertEquals("N", BooleanUtils.toString(Boolean.FALSE, "Y", "N", "U"));    }        //-----------------------------------------------------------------------    public void test_toStringTrueFalse_boolean() {        assertEquals("true", BooleanUtils.toStringTrueFalse(true));        assertEquals("false", BooleanUtils.toStringTrueFalse(false));    }        public void test_toStringOnOff_boolean() {        assertEquals("on", BooleanUtils.toStringOnOff(true));        assertEquals("off", BooleanUtils.toStringOnOff(false));    }        public void test_toStringYesNo_boolean() {        assertEquals("yes", BooleanUtils.toStringYesNo(true));        assertEquals("no", BooleanUtils.toStringYesNo(false));    }        public void test_toString_boolean_String_String_String() {        assertEquals("Y", BooleanUtils.toString(true, "Y", "N"));        assertEquals("N", BooleanUtils.toString(false, "Y", "N"));    }        //  testXor    //  -----------------------------------------------------------------------    public void testXor_primitive_nullInput() {        final boolean[] b = null;        try {            BooleanUtils.xor(b);            fail("Exception was not thrown for null input.");        } catch (IllegalArgumentException ex) {}    }    public void testXor_primitive_emptyInput() {        try {            BooleanUtils.xor(new boolean[] {});            fail("Exception was not thrown for empty input.");        } catch (IllegalArgumentException ex) {}    }    public void testXor_primitive_validInput_2items() {        assertTrue(            "True result for (true, true)",            ! BooleanUtils.xor(new boolean[] { true, true }));        assertTrue(            "True result for (false, false)",            ! BooleanUtils.xor(new boolean[] { false, false }));        assertTrue(            "False result for (true, false)",            BooleanUtils.xor(new boolean[] { true, false }));        assertTrue(            "False result for (false, true)",            BooleanUtils.xor(new boolean[] { false, true }));    }    public void testXor_primitive_validInput_3items() {        assertTrue(            "False result for (false, false, true)",            BooleanUtils.xor(new boolean[] { false, false, true }));        assertTrue(            "False result for (false, true, false)",            BooleanUtils.xor(new boolean[] { false, true, false }));        assertTrue(            "False result for (true, false, false)",            BooleanUtils.xor(new boolean[] { true, false, false }));        assertTrue(            "True result for (true, true, true)",            ! BooleanUtils.xor(new boolean[] { true, true, true }));        assertTrue(            "True result for (false, false)",            ! BooleanUtils.xor(new boolean[] { false, false, false }));        assertTrue(            "True result for (true, true, false)",            ! BooleanUtils.xor(new boolean[] { true, true, false }));        assertTrue(            "True result for (true, false, true)",            ! BooleanUtils.xor(new boolean[] { true, false, true }));        assertTrue(            "False result for (false, true, true)",            ! BooleanUtils.xor(new boolean[] { false, true, true }));    }    public void testXor_object_nullInput() {        final Boolean[] b = null;        try {            BooleanUtils.xor(b);            fail("Exception was not thrown for null input.");        } catch (IllegalArgumentException ex) {}    }    public void testXor_object_emptyInput() {        try {            BooleanUtils.xor(new Boolean[] {});            fail("Exception was not thrown for empty input.");        } catch (IllegalArgumentException ex) {}    }        public void testXor_object_nullElementInput() {        try {            BooleanUtils.xor(new Boolean[] {null});            fail("Exception was not thrown for null element input.");        } catch (IllegalArgumentException ex) {}    }    public void testXor_object_validInput_2items() {        assertTrue(            "True result for (true, true)",            ! BooleanUtils                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })                .booleanValue());        assertTrue(            "True result for (false, false)",            ! BooleanUtils                .xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE })                .booleanValue());        assertTrue(            "False result for (true, false)",            BooleanUtils                .xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })                .booleanValue());        assertTrue(            "False result for (false, true)",            BooleanUtils                .xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE })                .booleanValue());    }    public void testXor_object_validInput_3items() {        assertTrue(            "False result for (false, false, true)",            BooleanUtils                .xor(                    new Boolean[] {                        Boolean.FALSE,                        Boolean.FALSE,                        Boolean.TRUE })                .booleanValue());        assertTrue(            "False result for (false, true, false)",            BooleanUtils                .xor(                    new Boolean[] {                        Boolean.FALSE,                        Boolean.TRUE,                        Boolean.FALSE })                .booleanValue());        assertTrue(            "False result for (true, false, false)",            BooleanUtils                .xor(                    new Boolean[] {                        Boolean.TRUE,                        Boolean.FALSE,                        Boolean.FALSE })                .booleanValue());        assertTrue(            "True result for (true, true, true)",            ! BooleanUtils                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE })                .booleanValue());        assertTrue(            "True result for (false, false)",            ! BooleanUtils.xor(                    new Boolean[] {                        Boolean.FALSE,                        Boolean.FALSE,                        Boolean.FALSE })                .booleanValue());        assertTrue(            "True result for (true, true, false)",            ! BooleanUtils.xor(                    new Boolean[] {                        Boolean.TRUE,                        Boolean.TRUE,                        Boolean.FALSE })                .booleanValue());        assertTrue(            "True result for (true, false, true)",            ! BooleanUtils.xor(                    new Boolean[] {                        Boolean.TRUE,                        Boolean.FALSE,                        Boolean.TRUE })                .booleanValue());        assertTrue(            "False result for (false, true, true)",            ! BooleanUtils.xor(                    new Boolean[] {                        Boolean.FALSE,                        Boolean.TRUE,                        Boolean.TRUE })                .booleanValue());                    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.StringUtils} - Substring methods * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author Michael Davey * @version $Id$ */public class StringUtilsIsTest extends TestCase {    public StringUtilsIsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(StringUtilsIsTest.class);        suite.setName("StringUtilsIsXxx Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testIsAlpha() {        assertEquals(false, StringUtils.isAlpha(null));        assertEquals(true, StringUtils.isAlpha(""));        assertEquals(false, StringUtils.isAlpha(" "));        assertEquals(true, StringUtils.isAlpha("a"));        assertEquals(true, StringUtils.isAlpha("A"));        assertEquals(true, StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));        assertEquals(false, StringUtils.isAlpha("ham kso"));        assertEquals(false, StringUtils.isAlpha("1"));        assertEquals(false, StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));        assertEquals(false, StringUtils.isAlpha("_"));        assertEquals(false, StringUtils.isAlpha("hkHKHik*khbkuh"));    }    public void testIsAlphanumeric() {        assertEquals(false, StringUtils.isAlphanumeric(null));        assertEquals(true, StringUtils.isAlphanumeric(""));        assertEquals(false, StringUtils.isAlphanumeric(" "));        assertEquals(true, StringUtils.isAlphanumeric("a"));        assertEquals(true, StringUtils.isAlphanumeric("A"));        assertEquals(true, StringUtils.isAlphanumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));        assertEquals(false, StringUtils.isAlphanumeric("ham kso"));        assertEquals(true, StringUtils.isAlphanumeric("1"));        assertEquals(true, StringUtils.isAlphanumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));        assertEquals(false, StringUtils.isAlphanumeric("_"));        assertEquals(false, StringUtils.isAlphanumeric("hkHKHik*khbkuh"));    }    public void testIsWhitespace() {        assertEquals(false, StringUtils.isWhitespace(null));        assertEquals(true, StringUtils.isWhitespace(""));        assertEquals(true, StringUtils.isWhitespace(" "));        assertEquals(true, StringUtils.isWhitespace("\t \n \t"));        assertEquals(false, StringUtils.isWhitespace("\t aa\n \t"));        assertEquals(true, StringUtils.isWhitespace(" "));        assertEquals(false, StringUtils.isWhitespace(" a "));        assertEquals(false, StringUtils.isWhitespace("a  "));        assertEquals(false, StringUtils.isWhitespace("  a"));        assertEquals(false, StringUtils.isWhitespace("aba"));        assertEquals(true, StringUtils.isWhitespace(StringUtilsTest.WHITESPACE));        assertEquals(false, StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE));    }    public void testIsAlphaspace() {        assertEquals(false, StringUtils.isAlphaSpace(null));        assertEquals(true, StringUtils.isAlphaSpace(""));        assertEquals(true, StringUtils.isAlphaSpace(" "));        assertEquals(true, StringUtils.isAlphaSpace("a"));        assertEquals(true, StringUtils.isAlphaSpace("A"));        assertEquals(true, StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));        assertEquals(true, StringUtils.isAlphaSpace("ham kso"));        assertEquals(false, StringUtils.isAlphaSpace("1"));        assertEquals(false, StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));        assertEquals(false, StringUtils.isAlphaSpace("_"));        assertEquals(false, StringUtils.isAlphaSpace("hkHKHik*khbkuh"));    }    public void testIsAlphanumericSpace() {        assertEquals(false, StringUtils.isAlphanumericSpace(null));        assertEquals(true, StringUtils.isAlphanumericSpace(""));        assertEquals(true, StringUtils.isAlphanumericSpace(" "));        assertEquals(true, StringUtils.isAlphanumericSpace("a"));        assertEquals(true, StringUtils.isAlphanumericSpace("A"));        assertEquals(true, StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));        assertEquals(true, StringUtils.isAlphanumericSpace("ham kso"));        assertEquals(true, StringUtils.isAlphanumericSpace("1"));        assertEquals(true, StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));        assertEquals(false, StringUtils.isAlphanumericSpace("_"));        assertEquals(false, StringUtils.isAlphanumericSpace("hkHKHik*khbkuh"));    }    public void testIsAsciiPrintable_String() {        assertEquals(false, StringUtils.isAsciiPrintable(null));        assertEquals(true, StringUtils.isAsciiPrintable(""));        assertEquals(true, StringUtils.isAsciiPrintable(" "));        assertEquals(true, StringUtils.isAsciiPrintable("a"));        assertEquals(true, StringUtils.isAsciiPrintable("A"));        assertEquals(true, StringUtils.isAsciiPrintable("1"));        assertEquals(true, StringUtils.isAsciiPrintable("Ceki"));        assertEquals(true, StringUtils.isAsciiPrintable("!ab2c~"));        assertEquals(true, StringUtils.isAsciiPrintable("1000"));        assertEquals(true, StringUtils.isAsciiPrintable("10 00"));        assertEquals(false, StringUtils.isAsciiPrintable("10\t00"));        assertEquals(true, StringUtils.isAsciiPrintable("10.00"));        assertEquals(true, StringUtils.isAsciiPrintable("10,00"));        assertEquals(true, StringUtils.isAsciiPrintable("!ab-c~"));        assertEquals(true, StringUtils.isAsciiPrintable("hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug"));        assertEquals(true, StringUtils.isAsciiPrintable("\u0020"));        assertEquals(true, StringUtils.isAsciiPrintable("\u0021"));        assertEquals(true, StringUtils.isAsciiPrintable("\u007e"));        assertEquals(false, StringUtils.isAsciiPrintable("\u007f"));        assertEquals(true, StringUtils.isAsciiPrintable("G?lc?"));        assertEquals(true, StringUtils.isAsciiPrintable("=?iso-8859-1?Q?G=FClc=FC?="));        assertEquals(false, StringUtils.isAsciiPrintable("G\u00fclc\u00fc"));    }      public void testIsNumeric() {        assertEquals(false, StringUtils.isNumeric(null));        assertEquals(true, StringUtils.isNumeric(""));        assertEquals(false, StringUtils.isNumeric(" "));        assertEquals(false, StringUtils.isNumeric("a"));        assertEquals(false, StringUtils.isNumeric("A"));        assertEquals(false, StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));        assertEquals(false, StringUtils.isNumeric("ham kso"));        assertEquals(true, StringUtils.isNumeric("1"));        assertEquals(true, StringUtils.isNumeric("1000"));        assertEquals(false, StringUtils.isNumeric("2.3"));        assertEquals(false, StringUtils.isNumeric("10 00"));        assertEquals(false, StringUtils.isNumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));        assertEquals(false, StringUtils.isNumeric("_"));        assertEquals(false, StringUtils.isNumeric("hkHKHik*khbkuh"));    }    public void testIsNumericSpace() {        assertEquals(false, StringUtils.isNumericSpace(null));        assertEquals(true, StringUtils.isNumericSpace(""));        assertEquals(true, StringUtils.isNumericSpace(" "));        assertEquals(false, StringUtils.isNumericSpace("a"));        assertEquals(false, StringUtils.isNumericSpace("A"));        assertEquals(false, StringUtils.isNumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));        assertEquals(false, StringUtils.isNumericSpace("ham kso"));        assertEquals(true, StringUtils.isNumericSpace("1"));        assertEquals(true, StringUtils.isNumericSpace("1000"));        assertEquals(false, StringUtils.isNumericSpace("2.3"));        assertEquals(true, StringUtils.isNumericSpace("10 00"));        assertEquals(false, StringUtils.isNumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));        assertEquals(false, StringUtils.isNumericSpace("_"));        assertEquals(false, StringUtils.isNumericSpace("hkHKHik*khbkuh"));    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.Calendar;import java.util.Date;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.ObjectUtils}. * * @author <a href="mailto:jmcnally@collab.net">John McNally</a> * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> * @version $Id$ */public class ObjectUtilsTest extends TestCase {    private static final String FOO = "foo";    private static final String BAR = "bar";    public ObjectUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(ObjectUtilsTest.class);        suite.setName("ObjectUtils Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new ObjectUtils());        Constructor[] cons = ObjectUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(ObjectUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(ObjectUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testIsNull() {        Object o = FOO;        Object dflt = BAR;        assertSame("dflt was not returned when o was null", dflt, ObjectUtils.defaultIfNull(null, dflt));        assertSame("dflt was returned when o was not null", o, ObjectUtils.defaultIfNull(o, dflt));    }    public void testEquals() {        assertTrue("ObjectUtils.equals(null, null) returned false", ObjectUtils.equals(null, null));        assertTrue("ObjectUtils.equals(\"foo\", null) returned true", !ObjectUtils.equals(FOO, null));        assertTrue("ObjectUtils.equals(null, \"bar\") returned true", !ObjectUtils.equals(null, BAR));        assertTrue("ObjectUtils.equals(\"foo\", \"bar\") returned true", !ObjectUtils.equals(FOO, BAR));        assertTrue("ObjectUtils.equals(\"foo\", \"foo\") returned false", ObjectUtils.equals(FOO, FOO));    }    public void testHashCode() {        assertEquals(0, ObjectUtils.hashCode(null));        assertEquals("a".hashCode(), ObjectUtils.hashCode("a"));    }//    /**//     * Show that java.util.Date and java.sql.Timestamp are apples and oranges.//     * Prompted by an email discussion. //     * //     * The behavior is different b/w Sun Java 1.3.1_10 and 1.4.2_03.//     *///    public void testDateEqualsJava() {//        long now = 1076957313284L; // Feb 16, 2004 10:49... PST//        java.util.Date date = new java.util.Date(now);//        java.sql.Timestamp realTimestamp = new java.sql.Timestamp(now);//        java.util.Date timestamp = realTimestamp;//        // sanity check 1://        assertEquals(284000000, realTimestamp.getNanos());//        assertEquals(1076957313284L, date.getTime());//        ////        // On Sun 1.3.1_10://        //junit.framework.AssertionFailedError: expected:<1076957313284> but was:<1076957313000>//        ////        //assertEquals(1076957313284L, timestamp.getTime());//        ////        //junit.framework.AssertionFailedError: expected:<1076957313284> but was:<1076957313000>//        ////        //assertEquals(1076957313284L, realTimestamp.getTime());//        // sanity check 2:        //        assertEquals(date.getDay(), realTimestamp.getDay());//        assertEquals(date.getHours(), realTimestamp.getHours());//        assertEquals(date.getMinutes(), realTimestamp.getMinutes());//        assertEquals(date.getMonth(), realTimestamp.getMonth());//        assertEquals(date.getSeconds(), realTimestamp.getSeconds());//        assertEquals(date.getTimezoneOffset(), realTimestamp.getTimezoneOffset());//        assertEquals(date.getYear(), realTimestamp.getYear());//        ////        // Time values are == and equals() on Sun 1.4.2_03 but NOT on Sun 1.3.1_10://        ////        //assertFalse("Sanity check failed: date.getTime() == timestamp.getTime()", date.getTime() == timestamp.getTime());//        //assertFalse("Sanity check failed: timestamp.equals(date)", timestamp.equals(date));//        //assertFalse("Sanity check failed: date.equals(timestamp)", date.equals(timestamp));//        // real test://        //assertFalse("java.util.Date and java.sql.Timestamp should be equal", ObjectUtils.equals(date, timestamp));//    }        public void testIdentityToString() {        assertEquals(null, ObjectUtils.identityToString(null));        assertEquals(            "java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)),            ObjectUtils.identityToString(FOO));        Integer i = new Integer(90);        String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i));        assertEquals(expected, ObjectUtils.identityToString(i));        StringBuffer buffer = new StringBuffer();        ObjectUtils.identityToString(buffer, i);        assertEquals(expected, buffer.toString());        try {            ObjectUtils.identityToString(null, "tmp");            fail("NullPointerException expected");        } catch(NullPointerException npe) {        }        try {            ObjectUtils.identityToString(new StringBuffer(), null);            fail("NullPointerException expected");        } catch(NullPointerException npe) {        }    }    public void testToString_Object() {        assertEquals("", ObjectUtils.toString((Object) null) );        assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE) );    }                public void testToString_ObjectString() {        assertEquals(BAR, ObjectUtils.toString((Object) null, BAR) );        assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE, BAR) );    }    public void testNull() {        assertNotNull(ObjectUtils.NULL);        assertTrue(ObjectUtils.NULL instanceof ObjectUtils.Null);        assertSame(ObjectUtils.NULL, SerializationUtils.clone(ObjectUtils.NULL));    }                public void testMax() {        Calendar calendar = Calendar.getInstance();        Date nonNullComparable1 = calendar.getTime();        Date nonNullComparable2 = calendar.getTime();                calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );        Date minComparable = calendar.getTime();                assertNotSame( nonNullComparable1, nonNullComparable2 );                assertSame( nonNullComparable1, ObjectUtils.max( null, nonNullComparable1 ) );        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, null ) );        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, nonNullComparable2 ) );        assertSame( nonNullComparable2, ObjectUtils.max( nonNullComparable2, nonNullComparable1 ) );        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, minComparable ) );        assertSame( nonNullComparable1, ObjectUtils.max( minComparable, nonNullComparable1 ) );        assertNull( ObjectUtils.max((String)null, (String)null) );    }        public void testMin() {        Calendar calendar = Calendar.getInstance();        Date nonNullComparable1 = calendar.getTime();        Date nonNullComparable2 = calendar.getTime();                calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );        Date minComparable = calendar.getTime();                assertNotSame( nonNullComparable1, nonNullComparable2 );                assertSame( nonNullComparable1, ObjectUtils.min( null, nonNullComparable1 ) );        assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, null ) );        assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, nonNullComparable2 ) );        assertSame( nonNullComparable2, ObjectUtils.min( nonNullComparable2, nonNullComparable1 ) );        assertSame( minComparable, ObjectUtils.min( nonNullComparable1, minComparable ) );        assertSame( minComparable, ObjectUtils.min( minComparable, nonNullComparable1 ) );        assertNull( ObjectUtils.min((String)null, (String)null) );    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Class to test BitField functionality * * @author Scott Sanders * @author Marc Johnson * @author Glen Stampoultzis * @version $Id$ */public class BitFieldTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(BitFieldTest.class);        suite.setName("BitField Tests");        return suite;    }    private static final BitField bf_multi  = new BitField(0x3F80);    private static final BitField bf_single = new BitField(0x4000);    private static final BitField bf_zero = new BitField(0);    /**     * Constructor BitFieldTest     *     * @param name     */    public BitFieldTest(String name) {        super(name);    }    /**     * test the getValue() method     */    public void testGetValue() {        assertEquals(bf_multi.getValue(-1), 127);        assertEquals(bf_multi.getValue(0), 0);        assertEquals(bf_single.getValue(-1), 1);        assertEquals(bf_single.getValue(0), 0);        assertEquals(bf_zero.getValue(-1), 0);        assertEquals(bf_zero.getValue(0), 0);    }    /**     * test the getShortValue() method     */    public void testGetShortValue() {        assertEquals(bf_multi.getShortValue((short) - 1), (short) 127);        assertEquals(bf_multi.getShortValue((short) 0), (short) 0);        assertEquals(bf_single.getShortValue((short) - 1), (short) 1);        assertEquals(bf_single.getShortValue((short) 0), (short) 0);        assertEquals(bf_zero.getShortValue((short) -1), (short) 0);        assertEquals(bf_zero.getShortValue((short) 0), (short) 0);    }    /**     * test the getRawValue() method     */    public void testGetRawValue() {        assertEquals(bf_multi.getRawValue(-1), 0x3F80);        assertEquals(bf_multi.getRawValue(0), 0);        assertEquals(bf_single.getRawValue(-1), 0x4000);        assertEquals(bf_single.getRawValue(0), 0);        assertEquals(bf_zero.getRawValue(-1), 0);        assertEquals(bf_zero.getRawValue(0), 0);    }    /**     * test the getShortRawValue() method     */    public void testGetShortRawValue() {        assertEquals(bf_multi.getShortRawValue((short) - 1), (short) 0x3F80);        assertEquals(bf_multi.getShortRawValue((short) 0), (short) 0);        assertEquals(bf_single.getShortRawValue((short) - 1), (short) 0x4000);        assertEquals(bf_single.getShortRawValue((short) 0), (short) 0);        assertEquals(bf_zero.getShortRawValue((short) -1), (short) 0);        assertEquals(bf_zero.getShortRawValue((short) 0), (short) 0);    }    /**     * test the isSet() method     */    public void testIsSet() {        assertTrue(!bf_multi.isSet(0));        assertTrue(!bf_zero.isSet(0));        for (int j = 0x80; j <= 0x3F80; j += 0x80) {            assertTrue(bf_multi.isSet(j));        }        for (int j = 0x80; j <= 0x3F80; j += 0x80) {            assertTrue(!bf_zero.isSet(j));        }        assertTrue(!bf_single.isSet(0));        assertTrue(bf_single.isSet(0x4000));    }    /**     * test the isAllSet() method     */    public void testIsAllSet() {        for (int j = 0; j < 0x3F80; j += 0x80) {            assertTrue(!bf_multi.isAllSet(j));            assertTrue(bf_zero.isAllSet(j));        }        assertTrue(bf_multi.isAllSet(0x3F80));        assertTrue(!bf_single.isAllSet(0));        assertTrue(bf_single.isAllSet(0x4000));    }    /**     * test the setValue() method     */    public void testSetValue() {        for (int j = 0; j < 128; j++) {            assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j);            assertEquals(bf_multi.setValue(0, j), j << 7);        }        for (int j = 0; j < 128; j++) {          assertEquals(bf_zero.getValue(bf_zero.setValue(0, j)), 0);          assertEquals(bf_zero.setValue(0, j), 0);      }        // verify that excess bits are stripped off        assertEquals(bf_multi.setValue(0x3f80, 128), 0);        for (int j = 0; j < 2; j++) {            assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j);            assertEquals(bf_single.setValue(0, j), j << 14);        }        // verify that excess bits are stripped off        assertEquals(bf_single.setValue(0x4000, 2), 0);    }    /**     * test the setShortValue() method     */    public void testSetShortValue() {        for (int j = 0; j < 128; j++) {            assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j);            assertEquals(bf_multi.setShortValue((short) 0, (short) j), (short) (j << 7));        }        for (int j = 0; j < 128; j++) {            assertEquals(bf_zero.getShortValue(bf_zero.setShortValue((short) 0, (short) j)), (short) 0);            assertEquals(bf_zero.setShortValue((short) 0, (short) j), (short) (0));        }        // verify that excess bits are stripped off        assertEquals(bf_multi.setShortValue((short) 0x3f80, (short) 128), (short) 0);        for (int j = 0; j < 2; j++) {            assertEquals(bf_single.getShortValue(bf_single.setShortValue((short) 0, (short) j)), (short) j);            assertEquals(bf_single.setShortValue((short) 0, (short) j), (short) (j << 14));        }        // verify that excess bits are stripped off        assertEquals(bf_single.setShortValue((short) 0x4000, (short) 2), (short) 0);    }    public void testByte() {        assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true));        assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true));        assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true));        assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true));        assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true));        assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true));        assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true));        assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true));        assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true));        assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false));        assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false));        assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false));        assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false));        assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false));        assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false));        assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false));        assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false));        assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false));        assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false));        byte clearedBit = new BitField(0x40).setByteBoolean((byte) - 63, false);        assertEquals(false, new BitField(0x40).isSet(clearedBit));    }    /**     * test the clear() method     */    public void testClear() {        assertEquals(bf_multi.clear(-1), 0xFFFFC07F);        assertEquals(bf_single.clear(-1), 0xFFFFBFFF);        assertEquals(bf_zero.clear(-1), 0xFFFFFFFF);    }    /**     * test the clearShort() method     */    public void testClearShort() {        assertEquals(bf_multi.clearShort((short) - 1), (short) 0xC07F);        assertEquals(bf_single.clearShort((short) - 1), (short) 0xBFFF);        assertEquals(bf_zero.clearShort((short) -1), (short) 0xFFFF);    }    /**     * test the set() method     */    public void testSet() {        assertEquals(bf_multi.set(0), 0x3F80);        assertEquals(bf_single.set(0), 0x4000);        assertEquals(bf_zero.set(0), 0);    }    /**     * test the setShort() method     */    public void testSetShort() {        assertEquals(bf_multi.setShort((short) 0), (short) 0x3F80);        assertEquals(bf_single.setShort((short) 0), (short) 0x4000);        assertEquals(bf_zero.setShort((short) 0), (short) 0);    }    /**     * test the setBoolean() method     */    public void testSetBoolean() {        assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true));        assertEquals(bf_single.set(0), bf_single.setBoolean(0, true));        assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true));        assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false));        assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false));        assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false));    }    /**     * test the setShortBoolean() method     */    public void testSetShortBoolean() {        assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true));        assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true));        assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true));        assertEquals(bf_multi.clearShort((short) - 1), bf_multi.setShortBoolean((short) - 1, false));        assertEquals(bf_single.clearShort((short) - 1), bf_single.setShortBoolean((short) - 1, false));        assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false));    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.util.ArrayList;import java.util.Collections;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.ClassUtils}. * * @author Stephen Colebourne * @author Gary D. Gregory * @author Tomasz Blachowicz * @version $Id$ */public class ClassUtilsTest extends TestCase {    public ClassUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(ClassUtilsTest.class);        suite.setName("ClassUtils Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    private static class Inner {    }        //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new ClassUtils());        Constructor[] cons = ClassUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(ClassUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(ClassUtils.class.getModifiers()));    }        // -------------------------------------------------------------------------    public void test_getShortClassName_Object() {        assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>"));        assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>"));        assertEquals("String", ClassUtils.getShortClassName("hello", "<null>"));        assertEquals("<null>", ClassUtils.getShortClassName(null, "<null>"));    }        public void test_getShortClassName_Class() {        assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));        assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));        assertEquals("", ClassUtils.getShortClassName((Class) null));    }        public void test_getShortClassName_String() {        assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class.getName()));        assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class.getName()));        assertEquals("", ClassUtils.getShortClassName((String) null));        assertEquals("", ClassUtils.getShortClassName(""));    }        // -------------------------------------------------------------------------    public void test_getPackageName_Object() {        assertEquals("org.apache.commons.lang", ClassUtils.getPackageName(new ClassUtils(), "<null>"));        assertEquals("org.apache.commons.lang", ClassUtils.getPackageName(new Inner(), "<null>"));        assertEquals("<null>", ClassUtils.getPackageName(null, "<null>"));    }        public void test_getPackageName_Class() {        assertEquals("java.lang", ClassUtils.getPackageName(String.class));        assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));        assertEquals("", ClassUtils.getPackageName((Class)null));    }        public void test_getPackageName_String() {        assertEquals("org.apache.commons.lang", ClassUtils.getPackageName(ClassUtils.class.getName()));        assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName()));        assertEquals("", ClassUtils.getPackageName((String)null));        assertEquals("", ClassUtils.getPackageName(""));    }        // -------------------------------------------------------------------------    public void test_getAllSuperclasses_Class() {        List list = ClassUtils.getAllSuperclasses(CY.class);        assertEquals(2, list.size());        assertEquals(CX.class, list.get(0));        assertEquals(Object.class, list.get(1));                assertEquals(null, ClassUtils.getAllSuperclasses(null));    }        public void test_getAllInterfaces_Class() {        List list = ClassUtils.getAllInterfaces(CY.class);        assertEquals(6, list.size());        assertEquals(IB.class, list.get(0));        assertEquals(IC.class, list.get(1));        assertEquals(ID.class, list.get(2));        assertEquals(IE.class, list.get(3));        assertEquals(IF.class, list.get(4));        assertEquals(IA.class, list.get(5));                assertEquals(null, ClassUtils.getAllInterfaces(null));    }        private static interface IA {    }    private static interface IB {    }    private static interface IC extends ID, IE {    }    private static interface ID {    }    private static interface IE extends IF {    }    private static interface IF {    }    private static class CX implements IB, IA, IE {    }    private static class CY extends CX implements IB, IC {    }        // -------------------------------------------------------------------------    public void test_convertClassNamesToClasses_List() {        List list = new ArrayList();        List result = ClassUtils.convertClassNamesToClasses(list);        assertEquals(0, result.size());                list.add("java.lang.String");        list.add("java.lang.xxx");        list.add("java.lang.Object");        result = ClassUtils.convertClassNamesToClasses(list);        assertEquals(3, result.size());        assertEquals(String.class, result.get(0));        assertEquals(null, result.get(1));        assertEquals(Object.class, result.get(2));        list.add(new Object());        try {            ClassUtils.convertClassNamesToClasses(list);            fail();        } catch (ClassCastException ex) {}        assertEquals(null, ClassUtils.convertClassNamesToClasses(null));    }        public void test_convertClassesToClassNames_List() {        List list = new ArrayList();        List result = ClassUtils.convertClassesToClassNames(list);        assertEquals(0, result.size());                list.add(String.class);        list.add(null);        list.add(Object.class);        result = ClassUtils.convertClassesToClassNames(list);        assertEquals(3, result.size());        assertEquals("java.lang.String", result.get(0));        assertEquals(null, result.get(1));        assertEquals("java.lang.Object", result.get(2));        list.add(new Object());        try {            ClassUtils.convertClassesToClassNames(list);            fail();        } catch (ClassCastException ex) {}        assertEquals(null, ClassUtils.convertClassesToClassNames(null));    }        // -------------------------------------------------------------------------    public void test_isInnerClass_Class() {        assertEquals(true, ClassUtils.isInnerClass(Inner.class));        assertEquals(true, ClassUtils.isInnerClass(Map.Entry.class));        assertEquals(true, ClassUtils.isInnerClass(new Cloneable() {        }.getClass()));        assertEquals(false, ClassUtils.isInnerClass(this.getClass()));        assertEquals(false, ClassUtils.isInnerClass(String.class));        assertEquals(false, ClassUtils.isInnerClass(null));    }        // -------------------------------------------------------------------------    public void test_isAssignable_ClassArray_ClassArray() throws Exception {        Class[] array2 = new Class[] {Object.class, Object.class};        Class[] array1 = new Class[] {Object.class};        Class[] array1s = new Class[] {String.class};        Class[] array0 = new Class[] {};        assertFalse(ClassUtils.isAssignable(array1, array2));        assertFalse(ClassUtils.isAssignable(null, array2));        assertTrue(ClassUtils.isAssignable(null, array0));        assertTrue(ClassUtils.isAssignable(array0, array0));        assertTrue(ClassUtils.isAssignable(array0, null));        assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null));                assertFalse(ClassUtils.isAssignable(array1, array1s));        assertTrue(ClassUtils.isAssignable(array1s, array1s));        assertTrue(ClassUtils.isAssignable(array1s, array1));    }        public void test_isAssignable() throws Exception {        assertFalse(ClassUtils.isAssignable((Class) null, null));        assertFalse(ClassUtils.isAssignable(String.class, null));                assertTrue(ClassUtils.isAssignable(null, Object.class));        assertTrue(ClassUtils.isAssignable(null, Integer.class));        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE));        assertTrue(ClassUtils.isAssignable(String.class, Object.class));        assertTrue(ClassUtils.isAssignable(String.class, String.class));        assertFalse(ClassUtils.isAssignable(Object.class, String.class));        assertFalse(ClassUtils.isAssignable(Integer.TYPE, Integer.class));        assertFalse(ClassUtils.isAssignable(Integer.class, Integer.TYPE));        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class));        assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class));        assertFalse(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class));    }        public void test_isAssignable_Autoboxing() throws Exception {        assertFalse(ClassUtils.isAssignable((Class) null, null, true));        assertFalse(ClassUtils.isAssignable(String.class, null, true));        assertTrue(ClassUtils.isAssignable(null, Object.class, true));        assertTrue(ClassUtils.isAssignable(null, Integer.class, true));        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, true));        assertTrue(ClassUtils.isAssignable(String.class, Object.class, true));        assertTrue(ClassUtils.isAssignable(String.class, String.class, true));        assertFalse(ClassUtils.isAssignable(Object.class, String.class, true));        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class, true));        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, true));        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, true));        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, true));        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, true));        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, true));    }    public void test_isAssignable_Widening() throws Exception {        // test byte conversions        assertFalse("byte -> char", ClassUtils.isAssignable(Byte.TYPE, Character.TYPE));        assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.TYPE, Byte.TYPE));        assertTrue("byte -> short", ClassUtils.isAssignable(Byte.TYPE, Short.TYPE));        assertTrue("byte -> int", ClassUtils.isAssignable(Byte.TYPE, Integer.TYPE));        assertTrue("byte -> long", ClassUtils.isAssignable(Byte.TYPE, Long.TYPE));        assertTrue("byte -> float", ClassUtils.isAssignable(Byte.TYPE, Float.TYPE));        assertTrue("byte -> double", ClassUtils.isAssignable(Byte.TYPE, Double.TYPE));        assertFalse("byte -> boolean", ClassUtils.isAssignable(Byte.TYPE, Boolean.TYPE));                // test short conversions        assertFalse("short -> char", ClassUtils.isAssignable(Short.TYPE, Character.TYPE));        assertFalse("short -> byte", ClassUtils.isAssignable(Short.TYPE, Byte.TYPE));        assertTrue("short -> short", ClassUtils.isAssignable(Short.TYPE, Short.TYPE));        assertTrue("short -> int", ClassUtils.isAssignable(Short.TYPE, Integer.TYPE));        assertTrue("short -> long", ClassUtils.isAssignable(Short.TYPE, Long.TYPE));        assertTrue("short -> float", ClassUtils.isAssignable(Short.TYPE, Float.TYPE));        assertTrue("short -> double", ClassUtils.isAssignable(Short.TYPE, Double.TYPE));        assertFalse("short -> boolean", ClassUtils.isAssignable(Short.TYPE, Boolean.TYPE));                // test char conversions        assertTrue("char -> char", ClassUtils.isAssignable(Character.TYPE, Character.TYPE));        assertFalse("char -> byte", ClassUtils.isAssignable(Character.TYPE, Byte.TYPE));        assertFalse("char -> short", ClassUtils.isAssignable(Character.TYPE, Short.TYPE));        assertTrue("char -> int", ClassUtils.isAssignable(Character.TYPE, Integer.TYPE));        assertTrue("char -> long", ClassUtils.isAssignable(Character.TYPE, Long.TYPE));        assertTrue("char -> float", ClassUtils.isAssignable(Character.TYPE, Float.TYPE));        assertTrue("char -> double", ClassUtils.isAssignable(Character.TYPE, Double.TYPE));        assertFalse("char -> boolean", ClassUtils.isAssignable(Character.TYPE, Boolean.TYPE));                // test int conversions        assertFalse("int -> char", ClassUtils.isAssignable(Integer.TYPE, Character.TYPE));        assertFalse("int -> byte", ClassUtils.isAssignable(Integer.TYPE, Byte.TYPE));        assertFalse("int -> short", ClassUtils.isAssignable(Integer.TYPE, Short.TYPE));        assertTrue("int -> int", ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));        assertTrue("int -> long", ClassUtils.isAssignable(Integer.TYPE, Long.TYPE));        assertTrue("int -> float", ClassUtils.isAssignable(Integer.TYPE, Float.TYPE));        assertTrue("int -> double", ClassUtils.isAssignable(Integer.TYPE, Double.TYPE));        assertFalse("int -> boolean", ClassUtils.isAssignable(Integer.TYPE, Boolean.TYPE));         // test long conversions        assertFalse("long -> char", ClassUtils.isAssignable(Long.TYPE, Character.TYPE));        assertFalse("long -> byte", ClassUtils.isAssignable(Long.TYPE, Byte.TYPE));        assertFalse("long -> short", ClassUtils.isAssignable(Long.TYPE, Short.TYPE));        assertFalse("long -> int", ClassUtils.isAssignable(Long.TYPE, Integer.TYPE));        assertTrue("long -> long", ClassUtils.isAssignable(Long.TYPE, Long.TYPE));        assertTrue("long -> float", ClassUtils.isAssignable(Long.TYPE, Float.TYPE));        assertTrue("long -> double", ClassUtils.isAssignable(Long.TYPE, Double.TYPE));        assertFalse("long -> boolean", ClassUtils.isAssignable(Long.TYPE, Boolean.TYPE));         // test float conversions        assertFalse("float -> char", ClassUtils.isAssignable(Float.TYPE, Character.TYPE));        assertFalse("float -> byte", ClassUtils.isAssignable(Float.TYPE, Byte.TYPE));        assertFalse("float -> short", ClassUtils.isAssignable(Float.TYPE, Short.TYPE));        assertFalse("float -> int", ClassUtils.isAssignable(Float.TYPE, Integer.TYPE));        assertFalse("float -> long", ClassUtils.isAssignable(Float.TYPE, Long.TYPE));        assertTrue("float -> float", ClassUtils.isAssignable(Float.TYPE, Float.TYPE));        assertTrue("float -> double", ClassUtils.isAssignable(Float.TYPE, Double.TYPE));        assertFalse("float -> boolean", ClassUtils.isAssignable(Float.TYPE, Boolean.TYPE));                // test double conversions        assertFalse("double -> char", ClassUtils.isAssignable(Double.TYPE, Character.TYPE));        assertFalse("double -> byte", ClassUtils.isAssignable(Double.TYPE, Byte.TYPE));        assertFalse("double -> short", ClassUtils.isAssignable(Double.TYPE, Short.TYPE));        assertFalse("double -> int", ClassUtils.isAssignable(Double.TYPE, Integer.TYPE));        assertFalse("double -> long", ClassUtils.isAssignable(Double.TYPE, Long.TYPE));        assertFalse("double -> float", ClassUtils.isAssignable(Double.TYPE, Float.TYPE));        assertTrue("double -> double", ClassUtils.isAssignable(Double.TYPE, Double.TYPE));        assertFalse("double -> boolean", ClassUtils.isAssignable(Double.TYPE, Boolean.TYPE));                // test boolean conversions        assertFalse("boolean -> char", ClassUtils.isAssignable(Boolean.TYPE, Character.TYPE));        assertFalse("boolean -> byte", ClassUtils.isAssignable(Boolean.TYPE, Byte.TYPE));        assertFalse("boolean -> short", ClassUtils.isAssignable(Boolean.TYPE, Short.TYPE));        assertFalse("boolean -> int", ClassUtils.isAssignable(Boolean.TYPE, Integer.TYPE));        assertFalse("boolean -> long", ClassUtils.isAssignable(Boolean.TYPE, Long.TYPE));        assertFalse("boolean -> float", ClassUtils.isAssignable(Boolean.TYPE, Float.TYPE));        assertFalse("boolean -> double", ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE));        assertTrue("boolean -> boolean", ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));    }        public void test_isAssignable_Unboxing_Widening() throws Exception {        // test byte conversions        assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true));        assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true));        assertTrue("byte -> short", ClassUtils.isAssignable(Byte.class, Short.TYPE, true));        assertTrue("byte -> int", ClassUtils.isAssignable(Byte.class, Integer.TYPE, true));        assertTrue("byte -> long", ClassUtils.isAssignable(Byte.class, Long.TYPE, true));        assertTrue("byte -> float", ClassUtils.isAssignable(Byte.class, Float.TYPE, true));        assertTrue("byte -> double", ClassUtils.isAssignable(Byte.class, Double.TYPE, true));        assertFalse("byte -> boolean", ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true));                // test short conversions        assertFalse("short -> char", ClassUtils.isAssignable(Short.class, Character.TYPE, true));        assertFalse("short -> byte", ClassUtils.isAssignable(Short.class, Byte.TYPE, true));        assertTrue("short -> short", ClassUtils.isAssignable(Short.class, Short.TYPE, true));        assertTrue("short -> int", ClassUtils.isAssignable(Short.class, Integer.TYPE, true));        assertTrue("short -> long", ClassUtils.isAssignable(Short.class, Long.TYPE, true));        assertTrue("short -> float", ClassUtils.isAssignable(Short.class, Float.TYPE, true));        assertTrue("short -> double", ClassUtils.isAssignable(Short.class, Double.TYPE, true));        assertFalse("short -> boolean", ClassUtils.isAssignable(Short.class, Boolean.TYPE, true));                // test char conversions        assertTrue("char -> char", ClassUtils.isAssignable(Character.class, Character.TYPE, true));        assertFalse("char -> byte", ClassUtils.isAssignable(Character.class, Byte.TYPE, true));        assertFalse("char -> short", ClassUtils.isAssignable(Character.class, Short.TYPE, true));        assertTrue("char -> int", ClassUtils.isAssignable(Character.class, Integer.TYPE, true));        assertTrue("char -> long", ClassUtils.isAssignable(Character.class, Long.TYPE, true));        assertTrue("char -> float", ClassUtils.isAssignable(Character.class, Float.TYPE, true));        assertTrue("char -> double", ClassUtils.isAssignable(Character.class, Double.TYPE, true));        assertFalse("char -> boolean", ClassUtils.isAssignable(Character.class, Boolean.TYPE, true));                // test int conversions        assertFalse("int -> char", ClassUtils.isAssignable(Integer.class, Character.TYPE, true));        assertFalse("int -> byte", ClassUtils.isAssignable(Integer.class, Byte.TYPE, true));        assertFalse("int -> short", ClassUtils.isAssignable(Integer.class, Short.TYPE, true));        assertTrue("int -> int", ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));        assertTrue("int -> long", ClassUtils.isAssignable(Integer.class, Long.TYPE, true));        assertTrue("int -> float", ClassUtils.isAssignable(Integer.class, Float.TYPE, true));        assertTrue("int -> double", ClassUtils.isAssignable(Integer.class, Double.TYPE, true));        assertFalse("int -> boolean", ClassUtils.isAssignable(Integer.class, Boolean.TYPE, true));                // test long conversions        assertFalse("long -> char", ClassUtils.isAssignable(Long.class, Character.TYPE, true));        assertFalse("long -> byte", ClassUtils.isAssignable(Long.class, Byte.TYPE, true));        assertFalse("long -> short", ClassUtils.isAssignable(Long.class, Short.TYPE, true));        assertFalse("long -> int", ClassUtils.isAssignable(Long.class, Integer.TYPE, true));        assertTrue("long -> long", ClassUtils.isAssignable(Long.class, Long.TYPE, true));        assertTrue("long -> float", ClassUtils.isAssignable(Long.class, Float.TYPE, true));        assertTrue("long -> double", ClassUtils.isAssignable(Long.class, Double.TYPE, true));        assertFalse("long -> boolean", ClassUtils.isAssignable(Long.class, Boolean.TYPE, true));                // test float conversions        assertFalse("float -> char", ClassUtils.isAssignable(Float.class, Character.TYPE, true));        assertFalse("float -> byte", ClassUtils.isAssignable(Float.class, Byte.TYPE, true));        assertFalse("float -> short", ClassUtils.isAssignable(Float.class, Short.TYPE, true));        assertFalse("float -> int", ClassUtils.isAssignable(Float.class, Integer.TYPE, true));        assertFalse("float -> long", ClassUtils.isAssignable(Float.class, Long.TYPE, true));        assertTrue("float -> float", ClassUtils.isAssignable(Float.class, Float.TYPE, true));        assertTrue("float -> double", ClassUtils.isAssignable(Float.class, Double.TYPE, true));        assertFalse("float -> boolean", ClassUtils.isAssignable(Float.class, Boolean.TYPE, true));                // test double conversions        assertFalse("double -> char", ClassUtils.isAssignable(Double.class, Character.TYPE, true));        assertFalse("double -> byte", ClassUtils.isAssignable(Double.class, Byte.TYPE, true));        assertFalse("double -> short", ClassUtils.isAssignable(Double.class, Short.TYPE, true));        assertFalse("double -> int", ClassUtils.isAssignable(Double.class, Integer.TYPE, true));        assertFalse("double -> long", ClassUtils.isAssignable(Double.class, Long.TYPE, true));        assertFalse("double -> float", ClassUtils.isAssignable(Double.class, Float.TYPE, true));        assertTrue("double -> double", ClassUtils.isAssignable(Double.class, Double.TYPE, true));        assertFalse("double -> boolean", ClassUtils.isAssignable(Double.class, Boolean.TYPE, true));                // test boolean conversions        assertFalse("boolean -> char", ClassUtils.isAssignable(Boolean.class, Character.TYPE, true));        assertFalse("boolean -> byte", ClassUtils.isAssignable(Boolean.class, Byte.TYPE, true));        assertFalse("boolean -> short", ClassUtils.isAssignable(Boolean.class, Short.TYPE, true));        assertFalse("boolean -> int", ClassUtils.isAssignable(Boolean.class, Integer.TYPE, true));        assertFalse("boolean -> long", ClassUtils.isAssignable(Boolean.class, Long.TYPE, true));        assertFalse("boolean -> float", ClassUtils.isAssignable(Boolean.class, Float.TYPE, true));        assertFalse("boolean -> double", ClassUtils.isAssignable(Boolean.class, Double.TYPE, true));        assertTrue("boolean -> boolean", ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));    }        public void testPrimitiveToWrapper() {               // test primitive classes        assertEquals("boolean -> Boolean.class",             Boolean.class, ClassUtils.primitiveToWrapper(Boolean.TYPE));           assertEquals("byte -> Byte.class",            Byte.class, ClassUtils.primitiveToWrapper(Byte.TYPE));        assertEquals("char -> Character.class",            Character.class, ClassUtils.primitiveToWrapper(Character.TYPE));        assertEquals("short -> Short.class",            Short.class, ClassUtils.primitiveToWrapper(Short.TYPE));        assertEquals("int -> Integer.class",            Integer.class, ClassUtils.primitiveToWrapper(Integer.TYPE));        assertEquals("long -> Long.class",            Long.class, ClassUtils.primitiveToWrapper(Long.TYPE));        assertEquals("double -> Double.class",            Double.class, ClassUtils.primitiveToWrapper(Double.TYPE));        assertEquals("float -> Float.class",            Float.class, ClassUtils.primitiveToWrapper(Float.TYPE));                // test a few other classes        assertEquals("String.class -> String.class",            String.class, ClassUtils.primitiveToWrapper(String.class));        assertEquals("ClassUtils.class -> ClassUtils.class",            org.apache.commons.lang.ClassUtils.class,             ClassUtils.primitiveToWrapper(org.apache.commons.lang.ClassUtils.class));        assertEquals("Void.TYPE -> Void.TYPE",            Void.TYPE, ClassUtils.primitiveToWrapper(Void.TYPE));                    // test null             assertNull("null -> null",            ClassUtils.primitiveToWrapper(null));    }    public void testPrimitivesToWrappers() {        // test null        assertNull("null -> null",            ClassUtils.primitivesToWrappers(null));        // test empty array        assertEquals("empty -> empty",                ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY));        // test an array of various classes        final Class[] primitives = new Class[] {                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE,                 Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE,                String.class, ClassUtils.class        };        Class[] wrappers= ClassUtils.primitivesToWrappers(primitives);                for (int i=0; i < primitives.length; i++) {            // test each returned wrapper            Class primitive = primitives[i];            Class expectedWrapper = ClassUtils.primitiveToWrapper(primitive);                        assertEquals(primitive + " -> " + expectedWrapper, expectedWrapper, wrappers[i]);        }        // test an array of no primitive classes        final Class[] noPrimitives = new Class[] {                String.class, ClassUtils.class, Void.TYPE        };        // This used to return the exact same array, but no longer does.        assertNotSame("unmodified", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives));    }    public void testWrapperToPrimitive() {        // an array with classes to convert        final Class[] primitives = {                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE,                Integer.TYPE, Long.TYPE, Float.TYPE, Double.TYPE        };        for (int i = 0; i < primitives.length; i++) {            Class wrapperCls = ClassUtils.primitiveToWrapper(primitives[i]);            assertFalse("Still primitive", wrapperCls.isPrimitive());            assertEquals(wrapperCls + " -> " + primitives[i], primitives[i],                    ClassUtils.wrapperToPrimitive(wrapperCls));        }    }    public void testWrapperToPrimitiveNoWrapper() {        assertNull("Wrong result for non wrapper class", ClassUtils.wrapperToPrimitive(String.class));    }    public void testWrapperToPrimitiveNull() {        assertNull("Wrong result for null class", ClassUtils.wrapperToPrimitive(null));    }    public void testWrappersToPrimitives() {        // an array with classes to test        final Class[] classes = {                Boolean.class, Byte.class, Character.class, Short.class,                Integer.class, Long.class, Float.class, Double.class,                String.class, ClassUtils.class, null        };        Class[] primitives = ClassUtils.wrappersToPrimitives(classes);        // now test the result        assertEquals("Wrong length of result array", classes.length, primitives.length);        for (int i = 0; i < classes.length; i++) {            Class expectedPrimitive = ClassUtils.wrapperToPrimitive(classes[i]);            assertEquals(classes[i] + " -> " + expectedPrimitive, expectedPrimitive,                    primitives[i]);        }    }    public void testWrappersToPrimitivesNull() {        assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives(null));    }    public void testWrappersToPrimitivesEmpty() {        Class[] empty = new Class[0];        assertEquals("Wrong result for empty input", empty, ClassUtils.wrappersToPrimitives(empty));    }    public void testGetClassClassNotFound() throws Exception {        assertGetClassThrowsClassNotFound( "bool" );        assertGetClassThrowsClassNotFound( "bool[]" );        assertGetClassThrowsClassNotFound( "integer[]" );    }    public void testGetClassInvalidArguments() throws Exception {        assertGetClassThrowsIllegalArgument( null );        assertGetClassThrowsClassNotFound( "[][][]" );        assertGetClassThrowsClassNotFound( "[[]" );        assertGetClassThrowsClassNotFound( "[" );        assertGetClassThrowsClassNotFound( "java.lang.String][" );        assertGetClassThrowsClassNotFound( ".hello.world" );        assertGetClassThrowsClassNotFound( "hello..world" );    }    public void testWithInterleavingWhitespace() throws ClassNotFoundException {        assertEquals( int[].class, ClassUtils.getClass( " int [ ] " ) );        assertEquals( long[].class, ClassUtils.getClass( "\rlong\t[\n]\r" ) );        assertEquals( short[].class, ClassUtils.getClass( "\tshort                \t\t[]" ) );        assertEquals( byte[].class, ClassUtils.getClass( "byte[\t\t\n\r]   " ) );    }    public void testGetClassByNormalNameArrays() throws ClassNotFoundException {        assertEquals( int[].class, ClassUtils.getClass( "int[]" ) );        assertEquals( long[].class, ClassUtils.getClass( "long[]" ) );        assertEquals( short[].class, ClassUtils.getClass( "short[]" ) );        assertEquals( byte[].class, ClassUtils.getClass( "byte[]" ) );        assertEquals( char[].class, ClassUtils.getClass( "char[]" ) );        assertEquals( float[].class, ClassUtils.getClass( "float[]" ) );        assertEquals( double[].class, ClassUtils.getClass( "double[]" ) );        assertEquals( boolean[].class, ClassUtils.getClass( "boolean[]" ) );        assertEquals( String[].class, ClassUtils.getClass( "java.lang.String[]" ) );    }    public void testGetClassByNormalNameArrays2D() throws ClassNotFoundException {        assertEquals( int[][].class, ClassUtils.getClass( "int[][]" ) );        assertEquals( long[][].class, ClassUtils.getClass( "long[][]" ) );        assertEquals( short[][].class, ClassUtils.getClass( "short[][]" ) );        assertEquals( byte[][].class, ClassUtils.getClass( "byte[][]" ) );        assertEquals( char[][].class, ClassUtils.getClass( "char[][]" ) );        assertEquals( float[][].class, ClassUtils.getClass( "float[][]" ) );        assertEquals( double[][].class, ClassUtils.getClass( "double[][]" ) );        assertEquals( boolean[][].class, ClassUtils.getClass( "boolean[][]" ) );        assertEquals( String[][].class, ClassUtils.getClass( "java.lang.String[][]" ) );    }    public void testGetClassWithArrayClasses2D() throws Exception {        assertGetClassReturnsClass( String[][].class );        assertGetClassReturnsClass( int[][].class );        assertGetClassReturnsClass( long[][].class );        assertGetClassReturnsClass( short[][].class );        assertGetClassReturnsClass( byte[][].class );        assertGetClassReturnsClass( char[][].class );        assertGetClassReturnsClass( float[][].class );        assertGetClassReturnsClass( double[][].class );        assertGetClassReturnsClass( boolean[][].class );    }    public void testGetClassWithArrayClasses() throws Exception {        assertGetClassReturnsClass( String[].class );        assertGetClassReturnsClass( int[].class );        assertGetClassReturnsClass( long[].class );        assertGetClassReturnsClass( short[].class );        assertGetClassReturnsClass( byte[].class );        assertGetClassReturnsClass( char[].class );        assertGetClassReturnsClass( float[].class );        assertGetClassReturnsClass( double[].class );        assertGetClassReturnsClass( boolean[].class );    }    public void testGetClassRawPrimitives() throws ClassNotFoundException {        assertEquals( int.class, ClassUtils.getClass( "int" ) );        assertEquals( long.class, ClassUtils.getClass( "long" ) );        assertEquals( short.class, ClassUtils.getClass( "short" ) );        assertEquals( byte.class, ClassUtils.getClass( "byte" ) );        assertEquals( char.class, ClassUtils.getClass( "char" ) );        assertEquals( float.class, ClassUtils.getClass( "float" ) );        assertEquals( double.class, ClassUtils.getClass( "double" ) );        assertEquals( boolean.class, ClassUtils.getClass( "boolean" ) );    }    private void assertGetClassReturnsClass( Class c ) throws Exception {        assertEquals( c, ClassUtils.getClass( c.getName() ) );    }    private void assertGetClassThrowsException( String className, Class exceptionType ) throws Exception {        try {            ClassUtils.getClass( className );            fail( "ClassUtils.getClass() should fail with an exception of type " + exceptionType.getName() + " when given class name \"" + className + "\"." );        }        catch( Exception e ) {            assertTrue( exceptionType.isAssignableFrom( e.getClass() ) );        }    }    private void assertGetClassThrowsIllegalArgument( String className ) throws Exception {        assertGetClassThrowsException( className, IllegalArgumentException.class );    }    private void assertGetClassThrowsClassNotFound( String className ) throws Exception {        assertGetClassThrowsException( className, ClassNotFoundException.class );    }    // Show the Java bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4071957    // We may have to delete this if a JDK fixes the bug.    public void testShowJavaBug() throws Exception {        // Tests with Collections$UnmodifiableSet        Set set = Collections.unmodifiableSet(new HashSet());        Method isEmptyMethod = set.getClass().getMethod("isEmpty",  new Class[0]);        try {            isEmptyMethod.invoke(set, new Object[0]);            fail("Failed to throw IllegalAccessException as expected");        } catch(IllegalAccessException iae) {            // expected        }    }    public void testGetPublicMethod() throws Exception {        // Tests with Collections$UnmodifiableSet        Set set = Collections.unmodifiableSet(new HashSet());        Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), "isEmpty",  new Class[0]);            assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers()));         try {            isEmptyMethod.invoke(set, new Object[0]);        } catch(java.lang.IllegalAccessException iae) {            fail("Should not have thrown IllegalAccessException");        }                       // Tests with a public Class        Method toStringMethod = ClassUtils.getPublicMethod(Object.class, "toString",  new Class[0]);            assertEquals(Object.class.getMethod("toString", new Class[0]), toStringMethod);    }     public void testToClass_object() {        assertEquals(null, ClassUtils.toClass(null));        assertSame(            ArrayUtils.EMPTY_CLASS_ARRAY,            ClassUtils.toClass(new Class[0]));        Object[] array = new Object[3];        array[0] = new String("Test");        array[1] = new Integer(1);        array[2] = new Double(99);        Class[] results = ClassUtils.toClass(array);        assertEquals("String", ClassUtils.getShortClassName(results[0]));        assertEquals("Integer", ClassUtils.getShortClassName(results[1]));        assertEquals("Double", ClassUtils.getShortClassName(results[2]));    }    public void test_getShortCanonicalName_Object() {        assertEquals("<null>", ClassUtils.getShortCanonicalName(null, "<null>"));        assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(new ClassUtils(), "<null>"));        assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(new ClassUtils[0], "<null>"));        assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(new ClassUtils[0][0], "<null>"));        assertEquals("int[]", ClassUtils.getShortCanonicalName(new int[0], "<null>"));        assertEquals("int[][]", ClassUtils.getShortCanonicalName(new int[0][0], "<null>"));    }    public void test_getShortCanonicalName_Class() {        assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(ClassUtils.class));        assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(ClassUtils[].class));        assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(ClassUtils[][].class));        assertEquals("int[]", ClassUtils.getShortCanonicalName(int[].class));        assertEquals("int[][]", ClassUtils.getShortCanonicalName(int[][].class));    }    public void test_getShortCanonicalName_String() {        assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang.ClassUtils"));        assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang.ClassUtils;"));        assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang.ClassUtils;"));        assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang.ClassUtils[]"));        assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang.ClassUtils[][]"));        assertEquals("int[]", ClassUtils.getShortCanonicalName("[I"));        assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I"));        assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]"));        assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]"));    }    public void test_getPackageCanonicalName_Object() {        assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>"));        assertEquals("org.apache.commons.lang", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>"));        assertEquals("org.apache.commons.lang", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>"));        assertEquals("org.apache.commons.lang", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>"));        assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>"));        assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>"));    }    public void test_getPackageCanonicalName_Class() {        assertEquals("org.apache.commons.lang", ClassUtils.getPackageCanonicalName(ClassUtils.class));        assertEquals("org.apache.commons.lang", ClassUtils.getPackageCanonicalName(ClassUtils[].class));        assertEquals("org.apache.commons.lang", ClassUtils.getPackageCanonicalName(ClassUtils[][].class));        assertEquals("", ClassUtils.getPackageCanonicalName(int[].class));        assertEquals("", ClassUtils.getPackageCanonicalName(int[][].class));    }    public void test_getPackageCanonicalName_String() {        assertEquals("org.apache.commons.lang",             ClassUtils.getPackageCanonicalName("org.apache.commons.lang.ClassUtils"));        assertEquals("org.apache.commons.lang",             ClassUtils.getPackageCanonicalName("[Lorg.apache.commons.lang.ClassUtils;"));        assertEquals("org.apache.commons.lang",             ClassUtils.getPackageCanonicalName("[[Lorg.apache.commons.lang.ClassUtils;"));        assertEquals("org.apache.commons.lang",             ClassUtils.getPackageCanonicalName("org.apache.commons.lang.ClassUtils[]"));        assertEquals("org.apache.commons.lang",             ClassUtils.getPackageCanonicalName("org.apache.commons.lang.ClassUtils[][]"));        assertEquals("", ClassUtils.getPackageCanonicalName("[I"));        assertEquals("", ClassUtils.getPackageCanonicalName("[[I"));        assertEquals("", ClassUtils.getPackageCanonicalName("int[]"));        assertEquals("", ClassUtils.getPackageCanonicalName("int[][]"));    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.CharSetUtils}. * * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Stephen Colebourne * @author Gary D. Gregory * @version $Id$ */public class CharSetUtilsTest extends TestCase {        public CharSetUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(CharSetUtilsTest.class);        suite.setName("CharSetUtils Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new CharSetUtils());        Constructor[] cons = CharSetUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(CharSetUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(CharSetUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testSqueeze_StringString() {        assertEquals(null, CharSetUtils.squeeze(null, (String) null));        assertEquals(null, CharSetUtils.squeeze(null, ""));                assertEquals("", CharSetUtils.squeeze("", (String) null));        assertEquals("", CharSetUtils.squeeze("", ""));        assertEquals("", CharSetUtils.squeeze("", "a-e"));                assertEquals("hello", CharSetUtils.squeeze("hello", (String) null));        assertEquals("hello", CharSetUtils.squeeze("hello", ""));        assertEquals("hello", CharSetUtils.squeeze("hello", "a-e"));        assertEquals("helo", CharSetUtils.squeeze("hello", "l-p"));        assertEquals("heloo", CharSetUtils.squeeze("helloo", "l"));        assertEquals("hello", CharSetUtils.squeeze("helloo", "^l"));    }        public void testSqueeze_StringStringarray() {        assertEquals(null, CharSetUtils.squeeze(null, (String[]) null));        assertEquals(null, CharSetUtils.squeeze(null, new String[0]));        assertEquals(null, CharSetUtils.squeeze(null, new String[] {null}));        assertEquals(null, CharSetUtils.squeeze(null, new String[] {"el"}));                assertEquals("", CharSetUtils.squeeze("", (String[]) null));        assertEquals("", CharSetUtils.squeeze("", new String[0]));        assertEquals("", CharSetUtils.squeeze("", new String[] {null}));        assertEquals("", CharSetUtils.squeeze("", new String[] {"a-e"}));                assertEquals("hello", CharSetUtils.squeeze("hello", (String[]) null));        assertEquals("hello", CharSetUtils.squeeze("hello", new String[0]));        assertEquals("hello", CharSetUtils.squeeze("hello", new String[] {null}));        assertEquals("hello", CharSetUtils.squeeze("hello", new String[] {"a-e"}));                assertEquals("helo", CharSetUtils.squeeze("hello", new String[] { "el" }));        assertEquals("hello", CharSetUtils.squeeze("hello", new String[] { "e" }));        assertEquals("fofof", CharSetUtils.squeeze("fooffooff", new String[] { "of" }));        assertEquals("fof", CharSetUtils.squeeze("fooooff", new String[] { "fo" }));    }    //-----------------------------------------------------------------------    public void testCount_StringString() {        assertEquals(0, CharSetUtils.count(null, (String) null));        assertEquals(0, CharSetUtils.count(null, ""));                assertEquals(0, CharSetUtils.count("", (String) null));        assertEquals(0, CharSetUtils.count("", ""));        assertEquals(0, CharSetUtils.count("", "a-e"));                assertEquals(0, CharSetUtils.count("hello", (String) null));        assertEquals(0, CharSetUtils.count("hello", ""));        assertEquals(1, CharSetUtils.count("hello", "a-e"));        assertEquals(3, CharSetUtils.count("hello", "l-p"));    }        public void testCount_StringStringarray() {        assertEquals(0, CharSetUtils.count(null, (String[]) null));        assertEquals(0, CharSetUtils.count(null, new String[0]));        assertEquals(0, CharSetUtils.count(null, new String[] {null}));        assertEquals(0, CharSetUtils.count(null, new String[] {"a-e"}));                assertEquals(0, CharSetUtils.count("", (String[]) null));        assertEquals(0, CharSetUtils.count("", new String[0]));        assertEquals(0, CharSetUtils.count("", new String[] {null}));        assertEquals(0, CharSetUtils.count("", new String[] {"a-e"}));                assertEquals(0, CharSetUtils.count("hello", (String[]) null));        assertEquals(0, CharSetUtils.count("hello", new String[0]));        assertEquals(0, CharSetUtils.count("hello", new String[] {null}));        assertEquals(1, CharSetUtils.count("hello", new String[] {"a-e"}));                assertEquals(3, CharSetUtils.count("hello", new String[] { "el" }));        assertEquals(0, CharSetUtils.count("hello", new String[] { "x" }));        assertEquals(2, CharSetUtils.count("hello", new String[] { "e-i" }));        assertEquals(5, CharSetUtils.count("hello", new String[] { "a-z" }));        assertEquals(0, CharSetUtils.count("hello", new String[] { "" }));    }    //-----------------------------------------------------------------------    public void testKeep_StringString() {        assertEquals(null, CharSetUtils.keep(null, (String) null));        assertEquals(null, CharSetUtils.keep(null, ""));                assertEquals("", CharSetUtils.keep("", (String) null));        assertEquals("", CharSetUtils.keep("", ""));        assertEquals("", CharSetUtils.keep("", "a-e"));                assertEquals("", CharSetUtils.keep("hello", (String) null));        assertEquals("", CharSetUtils.keep("hello", ""));        assertEquals("", CharSetUtils.keep("hello", "xyz"));        assertEquals("hello", CharSetUtils.keep("hello", "a-z"));        assertEquals("hello", CharSetUtils.keep("hello", "oleh"));        assertEquals("ell", CharSetUtils.keep("hello", "el"));    }        public void testKeep_StringStringarray() {        assertEquals(null, CharSetUtils.keep(null, (String[]) null));        assertEquals(null, CharSetUtils.keep(null, new String[0]));        assertEquals(null, CharSetUtils.keep(null, new String[] {null}));        assertEquals(null, CharSetUtils.keep(null, new String[] {"a-e"}));                assertEquals("", CharSetUtils.keep("", (String[]) null));        assertEquals("", CharSetUtils.keep("", new String[0]));        assertEquals("", CharSetUtils.keep("", new String[] {null}));        assertEquals("", CharSetUtils.keep("", new String[] {"a-e"}));                assertEquals("", CharSetUtils.keep("hello", (String[]) null));        assertEquals("", CharSetUtils.keep("hello", new String[0]));        assertEquals("", CharSetUtils.keep("hello", new String[] {null}));        assertEquals("e", CharSetUtils.keep("hello", new String[] {"a-e"}));                assertEquals("e", CharSetUtils.keep("hello", new String[] { "a-e" }));        assertEquals("ell", CharSetUtils.keep("hello", new String[] { "el" }));        assertEquals("hello", CharSetUtils.keep("hello", new String[] { "elho" }));        assertEquals("hello", CharSetUtils.keep("hello", new String[] { "a-z" }));        assertEquals("----", CharSetUtils.keep("----", new String[] { "-" }));        assertEquals("ll", CharSetUtils.keep("hello", new String[] { "l" }));    }    //-----------------------------------------------------------------------    public void testDelete_StringString() {        assertEquals(null, CharSetUtils.delete(null, (String) null));        assertEquals(null, CharSetUtils.delete(null, ""));                assertEquals("", CharSetUtils.delete("", (String) null));        assertEquals("", CharSetUtils.delete("", ""));        assertEquals("", CharSetUtils.delete("", "a-e"));                assertEquals("hello", CharSetUtils.delete("hello", (String) null));        assertEquals("hello", CharSetUtils.delete("hello", ""));        assertEquals("hllo", CharSetUtils.delete("hello", "a-e"));        assertEquals("he", CharSetUtils.delete("hello", "l-p"));        assertEquals("hello", CharSetUtils.delete("hello", "z"));    }        public void testDelete_StringStringarray() {        assertEquals(null, CharSetUtils.delete(null, (String[]) null));        assertEquals(null, CharSetUtils.delete(null, new String[0]));        assertEquals(null, CharSetUtils.delete(null, new String[] {null}));        assertEquals(null, CharSetUtils.delete(null, new String[] {"el"}));                assertEquals("", CharSetUtils.delete("", (String[]) null));        assertEquals("", CharSetUtils.delete("", new String[0]));        assertEquals("", CharSetUtils.delete("", new String[] {null}));        assertEquals("", CharSetUtils.delete("", new String[] {"a-e"}));                assertEquals("hello", CharSetUtils.delete("hello", (String[]) null));        assertEquals("hello", CharSetUtils.delete("hello", new String[0]));        assertEquals("hello", CharSetUtils.delete("hello", new String[] {null}));        assertEquals("hello", CharSetUtils.delete("hello", new String[] {"xyz"}));        assertEquals("ho", CharSetUtils.delete("hello", new String[] { "el" }));        assertEquals("", CharSetUtils.delete("hello", new String[] { "elho" }));        assertEquals("hello", CharSetUtils.delete("hello", new String[] { "" }));        assertEquals("hello", CharSetUtils.delete("hello", ""));        assertEquals("", CharSetUtils.delete("hello", new String[] { "a-z" }));        assertEquals("", CharSetUtils.delete("----", new String[] { "-" }));        assertEquals("heo", CharSetUtils.delete("hello", new String[] { "l" }));    }    }
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.util.Arrays;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Tests ArrayUtils remove and removeElement methods. *  * @author Maarten Coene * @version $Id$ */public class ArrayUtilsRemoveTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(ArrayUtilsRemoveTest.class);        suite.setName("ArrayUtils remove Tests");        return suite;    }    public void testRemoveObjectArray() {        Object[] array;        array = ArrayUtils.remove(new Object[] {"a"}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));        assertEquals(Object.class, array.getClass().getComponentType());        array = ArrayUtils.remove(new Object[] {"a", "b"}, 0);        assertTrue(Arrays.equals(new Object[] {"b"}, array));        assertEquals(Object.class, array.getClass().getComponentType());        array = ArrayUtils.remove(new Object[] {"a", "b"}, 1);        assertTrue(Arrays.equals(new Object[] {"a"}, array));        assertEquals(Object.class, array.getClass().getComponentType());        array = ArrayUtils.remove(new Object[] {"a", "b", "c"}, 1);        assertTrue(Arrays.equals(new Object[] {"a", "c"}, array));        assertEquals(Object.class, array.getClass().getComponentType());        try {            ArrayUtils.remove(new Object[] {"a", "b"}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new Object[] {"a", "b"}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((Object[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveBooleanArray() {        boolean[] array;        array = ArrayUtils.remove(new boolean[] {true}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new boolean[] {true, false}, 0);        assertTrue(Arrays.equals(new boolean[] {false}, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new boolean[] {true, false}, 1);        assertTrue(Arrays.equals(new boolean[] {true}, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new boolean[] {true, false, true}, 1);        assertTrue(Arrays.equals(new boolean[] {true, true}, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new boolean[] {true, false}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new boolean[] {true, false}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((boolean[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveByteArray() {        byte[] array;        array = ArrayUtils.remove(new byte[] {1}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new byte[] {1, 2}, 0);        assertTrue(Arrays.equals(new byte[] {2}, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new byte[] {1, 2}, 1);        assertTrue(Arrays.equals(new byte[] {1}, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new byte[] {1, 2, 1}, 1);        assertTrue(Arrays.equals(new byte[] {1, 1}, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new byte[] {1, 2}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new byte[] {1, 2}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((byte[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveCharArray() {        char[] array;        array = ArrayUtils.remove(new char[] {'a'}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new char[] {'a', 'b'}, 0);        assertTrue(Arrays.equals(new char[] {'b'}, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new char[] {'a', 'b'}, 1);        assertTrue(Arrays.equals(new char[] {'a'}, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new char[] {'a', 'b', 'c'}, 1);        assertTrue(Arrays.equals(new char[] {'a', 'c'}, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new char[] {'a', 'b'}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new char[] {'a', 'b'}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((char[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveDoubleArray() {        double[] array;        array = ArrayUtils.remove(new double[] {1}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new double[] {1, 2}, 0);        assertTrue(Arrays.equals(new double[] {2}, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new double[] {1, 2}, 1);        assertTrue(Arrays.equals(new double[] {1}, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new double[] {1, 2, 1}, 1);        assertTrue(Arrays.equals(new double[] {1, 1}, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new double[] {1, 2}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new double[] {1, 2}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((double[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveFloatArray() {        float[] array;        array = ArrayUtils.remove(new float[] {1}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new float[] {1, 2}, 0);        assertTrue(Arrays.equals(new float[] {2}, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new float[] {1, 2}, 1);        assertTrue(Arrays.equals(new float[] {1}, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new float[] {1, 2, 1}, 1);        assertTrue(Arrays.equals(new float[] {1, 1}, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new float[] {1, 2}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new float[] {1, 2}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((float[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveIntArray() {        int[] array;        array = ArrayUtils.remove(new int[] {1}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new int[] {1, 2}, 0);        assertTrue(Arrays.equals(new int[] {2}, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new int[] {1, 2}, 1);        assertTrue(Arrays.equals(new int[] {1}, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new int[] {1, 2, 1}, 1);        assertTrue(Arrays.equals(new int[] {1, 1}, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new int[] {1, 2}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new int[] {1, 2}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((int[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveLongArray() {        long[] array;        array = ArrayUtils.remove(new long[] {1}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new long[] {1, 2}, 0);        assertTrue(Arrays.equals(new long[] {2}, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new long[] {1, 2}, 1);        assertTrue(Arrays.equals(new long[] {1}, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new long[] {1, 2, 1}, 1);        assertTrue(Arrays.equals(new long[] {1, 1}, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new long[] {1, 2}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new long[] {1, 2}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((long[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveShortArray() {        short[] array;        array = ArrayUtils.remove(new short[] {1}, 0);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new short[] {1, 2}, 0);        assertTrue(Arrays.equals(new short[] {2}, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new short[] {1, 2}, 1);        assertTrue(Arrays.equals(new short[] {1}, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());        array = ArrayUtils.remove(new short[] {1, 2, 1}, 1);        assertTrue(Arrays.equals(new short[] {1, 1}, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());        try {            ArrayUtils.remove(new short[] {1, 2}, -1);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove(new short[] {1, 2}, 2);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}        try {            ArrayUtils.remove((short[]) null, 0);            fail("IndexOutOfBoundsException expected");        } catch (IndexOutOfBoundsException e) {}    }        public void testRemoveElementObjectArray() {        Object[] array;        array = ArrayUtils.removeElement((Object[]) null, "a");        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, "a");        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));        assertEquals(Object.class, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new Object[] {"a"}, "a");        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));        assertEquals(Object.class, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new Object[] {"a", "b"}, "a");        assertTrue(Arrays.equals(new Object[] {"b"}, array));        assertEquals(Object.class, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new Object[] {"a", "b", "a"}, "a");        assertTrue(Arrays.equals(new Object[] {"b", "a"}, array));        assertEquals(Object.class, array.getClass().getComponentType());    }        public void testRemoveElementBooleanArray() {        boolean[] array;        array = ArrayUtils.removeElement((boolean[]) null, true);        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new boolean[] {true}, true);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new boolean[] {true, false}, true);        assertTrue(Arrays.equals(new boolean[] {false}, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new boolean[] {true, false, true}, true);        assertTrue(Arrays.equals(new boolean[] {false, true}, array));        assertEquals(Boolean.TYPE, array.getClass().getComponentType());    }        public void testRemoveElementByteArray() {        byte[] array;        array = ArrayUtils.removeElement((byte[]) null, (byte) 1);        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new byte[] {1}, (byte) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new byte[] {1, 2}, (byte) 1);        assertTrue(Arrays.equals(new byte[] {2}, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new byte[] {1, 2, 1}, (byte) 1);        assertTrue(Arrays.equals(new byte[] {2, 1}, array));        assertEquals(Byte.TYPE, array.getClass().getComponentType());    }        public void testRemoveElementCharArray() {        char[] array;        array = ArrayUtils.removeElement((char[]) null, 'a');        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a');        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new char[] {'a'}, 'a');        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new char[] {'a', 'b'}, 'a');        assertTrue(Arrays.equals(new char[] {'b'}, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new char[] {'a', 'b', 'a'}, 'a');        assertTrue(Arrays.equals(new char[] {'b', 'a'}, array));        assertEquals(Character.TYPE, array.getClass().getComponentType());    }        @SuppressWarnings("cast")    public void testRemoveElementDoubleArray() {        double[] array;        array = ArrayUtils.removeElement((double[]) null, (double) 1);        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new double[] {1}, (double) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new double[] {1, 2}, (double) 1);        assertTrue(Arrays.equals(new double[] {2}, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new double[] {1, 2, 1}, (double) 1);        assertTrue(Arrays.equals(new double[] {2, 1}, array));        assertEquals(Double.TYPE, array.getClass().getComponentType());    }        @SuppressWarnings("cast")    public void testRemoveElementFloatArray() {        float[] array;        array = ArrayUtils.removeElement((float[]) null, (float) 1);        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new float[] {1}, (float) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new float[] {1, 2}, (float) 1);        assertTrue(Arrays.equals(new float[] {2}, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new float[] {1, 2, 1}, (float) 1);        assertTrue(Arrays.equals(new float[] {2, 1}, array));        assertEquals(Float.TYPE, array.getClass().getComponentType());    }        public void testRemoveElementIntArray() {        int[] array;        array = ArrayUtils.removeElement((int[]) null, 1);        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new int[] {1}, 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new int[] {1, 2}, 1);        assertTrue(Arrays.equals(new int[] {2}, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new int[] {1, 2, 1}, 1);        assertTrue(Arrays.equals(new int[] {2, 1}, array));        assertEquals(Integer.TYPE, array.getClass().getComponentType());    }        @SuppressWarnings("cast")    public void testRemoveElementLongArray() {        long[] array;        array = ArrayUtils.removeElement((long[]) null, (long) 1);        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new long[] {1}, (long) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new long[] {1, 2}, (long) 1);        assertTrue(Arrays.equals(new long[] {2}, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new long[] {1, 2, 1}, (long) 1);        assertTrue(Arrays.equals(new long[] {2, 1}, array));        assertEquals(Long.TYPE, array.getClass().getComponentType());    }        public void testRemoveElementShortArray() {        short[] array;        array = ArrayUtils.removeElement((short[]) null, (short) 1);        assertNull(array);        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new short[] {1}, (short) 1);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new short[] {1, 2}, (short) 1);        assertTrue(Arrays.equals(new short[] {2}, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());        array = ArrayUtils.removeElement(new short[] {1, 2, 1}, (short) 1);        assertTrue(Arrays.equals(new short[] {2, 1}, array));        assertEquals(Short.TYPE, array.getClass().getComponentType());    }    }
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.Arrays;import java.util.Date;import java.util.Map;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.ArrayUtils}. * * @author Stephen Colebourne * @author Moritz Petersen * @author Nikolay Metchev * @author Matthew Hawthorne * @author Tim O'Brien * @author <a href="mailto:equinus100@hotmail.com">Ashwin S</a> * @author Fredrik Westermarck * @author Gary Gregory * @author Maarten Coene * @version $Id$ */public class ArrayUtilsTest extends TestCase {    public ArrayUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(ArrayUtilsTest.class);        suite.setName("ArrayUtils Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new ArrayUtils());        Constructor[] cons = ArrayUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(ArrayUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(ArrayUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testToString() {        assertEquals("{}", ArrayUtils.toString(null));        assertEquals("{}", ArrayUtils.toString(new Object[0]));        assertEquals("{}", ArrayUtils.toString(new String[0]));        assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}));        assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}));                assertEquals("<empty>", ArrayUtils.toString(null, "<empty>"));        assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>"));        assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>"));        assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>"));        assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>"));    }    //-----------------------------------------------------------------------    public void testHashCode() {        long[][] array1 = new long[][] {{2,5}, {4,5}};        long[][] array2 = new long[][] {{2,5}, {4,6}};        assertEquals(true, ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array1));        assertEquals(false, ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array2));                Object[] array3 = new Object[] {new String(new char[] {'A', 'B'})};        Object[] array4 = new Object[] {"AB"};        assertEquals(true, ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array3));        assertEquals(true, ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array4));    }    //-----------------------------------------------------------------------    private void assertIsEquals(Object array1, Object array2, Object array3) {        assertEquals(true, ArrayUtils.isEquals(array1, array1));        assertEquals(true, ArrayUtils.isEquals(array2, array2));        assertEquals(true, ArrayUtils.isEquals(array3, array3));        assertEquals(false, ArrayUtils.isEquals(array1, array2));        assertEquals(false, ArrayUtils.isEquals(array2, array1));        assertEquals(false, ArrayUtils.isEquals(array1, array3));        assertEquals(false, ArrayUtils.isEquals(array3, array1));        assertEquals(false, ArrayUtils.isEquals(array1, array2));        assertEquals(false, ArrayUtils.isEquals(array2, array1));    }    public void testIsEquals() {        long[][] larray1 = new long[][]{{2, 5}, {4, 5}};        long[][] larray2 = new long[][]{{2, 5}, {4, 6}};        long[] larray3 = new long[]{2, 5};        this.assertIsEquals(larray1, larray2, larray3);        int[][] iarray1 = new int[][]{{2, 5}, {4, 5}};        int[][] iarray2 = new int[][]{{2, 5}, {4, 6}};        int[] iarray3 = new int[]{2, 5};        this.assertIsEquals(iarray1, iarray2, iarray3);        short[][] sarray1 = new short[][]{{2, 5}, {4, 5}};        short[][] sarray2 = new short[][]{{2, 5}, {4, 6}};        short[] sarray3 = new short[]{2, 5};        this.assertIsEquals(sarray1, sarray2, sarray3);        float[][] farray1 = new float[][]{{2, 5}, {4, 5}};        float[][] farray2 = new float[][]{{2, 5}, {4, 6}};        float[] farray3 = new float[]{2, 5};        this.assertIsEquals(farray1, farray2, farray3);        double[][] darray1 = new double[][]{{2, 5}, {4, 5}};        double[][] darray2 = new double[][]{{2, 5}, {4, 6}};        double[] darray3 = new double[]{2, 5};        this.assertIsEquals(darray1, darray2, darray3);        byte[][] byteArray1 = new byte[][]{{2, 5}, {4, 5}};        byte[][] byteArray2 = new byte[][]{{2, 5}, {4, 6}};        byte[] byteArray3 = new byte[]{2, 5};        this.assertIsEquals(byteArray1, byteArray2, byteArray3);        char[][] charArray1 = new char[][]{{2, 5}, {4, 5}};        char[][] charArray2 = new char[][]{{2, 5}, {4, 6}};        char[] charArray3 = new char[]{2, 5};        this.assertIsEquals(charArray1, charArray2, charArray3);        boolean[][] barray1 = new boolean[][]{{true, false}, {true, true}};        boolean[][] barray2 = new boolean[][]{{true, false}, {true, false}};        boolean[] barray3 = new boolean[]{false, true};        this.assertIsEquals(barray1, barray2, barray3);        Object[] array3 = new Object[]{new String(new char[]{'A', 'B'})};        Object[] array4 = new Object[]{"AB"};        assertEquals(true, ArrayUtils.isEquals(array3, array3));        assertEquals(true, ArrayUtils.isEquals(array3, array4));        assertEquals(true, ArrayUtils.isEquals(null, null));        assertEquals(false, ArrayUtils.isEquals(null, array4));    }        //-----------------------------------------------------------------------    public void testToMap() {        Map map = ArrayUtils.toMap(new String[][] {{"foo", "bar"}, {"hello", "world"}});                assertEquals("bar", map.get("foo"));        assertEquals("world", map.get("hello"));                assertEquals(null, ArrayUtils.toMap(null));        try {            ArrayUtils.toMap(new String[][] {{"foo", "bar"}, {"short"}});            fail("exception expected");        } catch (IllegalArgumentException ex) {}        try {            ArrayUtils.toMap(new Object[] {new Object[] {"foo", "bar"}, "illegal type"});            fail("exception expected");        } catch (IllegalArgumentException ex) {}        try {            ArrayUtils.toMap(new Object[] {new Object[] {"foo", "bar"}, null});            fail("exception expected");        } catch (IllegalArgumentException ex) {}                map = ArrayUtils.toMap(new Object[] {new Map.Entry() {            public Object getKey() {                return "foo";            }            public Object getValue() {                return "bar";            }            public Object setValue(Object value) {                throw new UnsupportedOperationException();            }            @Override            public boolean equals(Object o) {                throw new UnsupportedOperationException();            }            @Override            public int hashCode() {                throw new UnsupportedOperationException();            }        }});        assertEquals("bar", map.get("foo"));    }    //-----------------------------------------------------------------------    public void testClone() {        assertEquals(null, ArrayUtils.clone((Object[]) null));        Object[] original1 = new Object[0];        Object[] cloned1 = ArrayUtils.clone(original1);        assertTrue(Arrays.equals(original1, cloned1));        assertTrue(original1 != cloned1);                StringBuffer buf = new StringBuffer("pick");        original1 = new Object[] {buf, "a", new String[] {"stick"}};        cloned1 = ArrayUtils.clone(original1);        assertTrue(Arrays.equals(original1, cloned1));        assertTrue(original1 != cloned1);        assertSame(original1[0], cloned1[0]);        assertSame(original1[1], cloned1[1]);        assertSame(original1[2], cloned1[2]);    }    public void testCloneBoolean() {        assertEquals(null, ArrayUtils.clone((boolean[]) null));        boolean[] original = new boolean[] {true, false};        boolean[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }        public void testCloneLong() {        assertEquals(null, ArrayUtils.clone((long[]) null));        long[] original = new long[] {0L, 1L};        long[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }        public void testCloneInt() {        assertEquals(null, ArrayUtils.clone((int[]) null));        int[] original = new int[] {5, 8};        int[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }        public void testCloneShort() {        assertEquals(null, ArrayUtils.clone((short[]) null));        short[] original = new short[] {1, 4};        short[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }        public void testCloneChar() {        assertEquals(null, ArrayUtils.clone((char[]) null));        char[] original = new char[] {'a', '4'};        char[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }        public void testCloneByte() {        assertEquals(null, ArrayUtils.clone((byte[]) null));        byte[] original = new byte[] {1, 6};        byte[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }        public void testCloneDouble() {        assertEquals(null, ArrayUtils.clone((double[]) null));        double[] original = new double[] {2.4d, 5.7d};        double[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }        public void testCloneFloat() {        assertEquals(null, ArrayUtils.clone((float[]) null));        float[] original = new float[] {2.6f, 6.4f};        float[] cloned = ArrayUtils.clone(original);        assertTrue(Arrays.equals(original, cloned));        assertTrue(original != cloned);    }    //-----------------------------------------------------------------------    public void testSubarrayObject() {        Object[] nullArray = null;        Object[] objectArray = { "a", "b", "c", "d", "e", "f"};        assertEquals("0 start, mid end", "abcd",            StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4)));        assertEquals("0 start, length end", "abcdef",            StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length)));        assertEquals("mid start, mid end", "bcd",            StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4)));        assertEquals("mid start, length end", "bcdef",            StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", "",            StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2)));        assertEquals("start > end", "",            StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2)));        assertEquals("start == end", "",            StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3)));        assertEquals("start undershoot, normal end", "abcd",            StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4)));        assertEquals("start overshoot, any end", "",            StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4)));        assertEquals("normal start, end overshoot", "cdef",            StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33)));        assertEquals("start undershoot, end overshoot", "abcdef",            StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12)));                    // array type tests        Date[] dateArray = { new java.sql.Date(new Date().getTime()),            new Date(), new Date(), new Date(), new Date() };        assertSame("Object type", Object.class,            ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType());        assertSame("java.util.Date type", java.util.Date.class,            ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType());        assertNotSame("java.sql.Date type", java.sql.Date.class,            ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType());        try {            @SuppressWarnings("unused")            java.sql.Date[] dummy = (java.sql.Date[])ArrayUtils.subarray(dateArray, 1,3);            fail("Invalid downcast");        } catch (ClassCastException e) {}    }    public void testSubarrayLong() {        long[] nullArray = null;        long[] array = { 999910, 999911, 999912, 999913, 999914, 999915 };        long[] leftSubarray     = { 999910, 999911, 999912, 999913 };        long[] midSubarray      = { 999911, 999912, 999913, 999914 };        long[] rightSubarray    = { 999912, 999913, 999914, 999915 };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_LONG_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_LONG_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_LONG_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_LONG_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_LONG_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_LONG_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_LONG_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_LONG_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("long type", long.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }    public void testSubarrayInt() {        int[] nullArray = null;        int[] array = { 10, 11, 12, 13, 14, 15 };        int[] leftSubarray  = { 10, 11, 12, 13 };        int[] midSubarray   = { 11, 12, 13, 14 };        int[] rightSubarray = { 12, 13, 14, 15 };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_INT_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_INT_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_INT_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_INT_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_INT_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_INT_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_INT_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_INT_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("int type", int.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }    public void testSubarrayShort() {        short[] nullArray = null;        short[] array = { 10, 11, 12, 13, 14, 15 };        short[] leftSubarray    = { 10, 11, 12, 13 };        short[] midSubarray     = { 11, 12, 13, 14 };        short[] rightSubarray   = { 12, 13, 14, 15 };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_SHORT_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_SHORT_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_SHORT_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_SHORT_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_SHORT_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_SHORT_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_SHORT_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_SHORT_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("short type", short.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }    public void testSubarrChar() {        char[] nullArray = null;        char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' };        char[] leftSubarray     = { 'a', 'b', 'c', 'd', };        char[] midSubarray      = { 'b', 'c', 'd', 'e', };        char[] rightSubarray    = { 'c', 'd', 'e', 'f', };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_CHAR_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_CHAR_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_CHAR_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_CHAR_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_CHAR_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_CHAR_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_CHAR_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_CHAR_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("char type", char.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }    public void testSubarrayByte() {        byte[] nullArray = null;        byte[] array = { 10, 11, 12, 13, 14, 15 };        byte[] leftSubarray     = { 10, 11, 12, 13 };        byte[] midSubarray      = { 11, 12, 13, 14 };        byte[] rightSubarray = { 12, 13, 14, 15 };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_BYTE_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_BYTE_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_BYTE_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_BYTE_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_BYTE_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_BYTE_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_BYTE_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_BYTE_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("byte type", byte.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }    public void testSubarrayDouble() {        double[] nullArray = null;        double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 };        double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, };        double[] midSubarray    = { 11.234, 12.345, 13.456, 14.567, };        double[] rightSubarray  = { 12.345, 13.456, 14.567, 15.678 };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_DOUBLE_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_DOUBLE_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_DOUBLE_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_DOUBLE_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_DOUBLE_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_DOUBLE_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_DOUBLE_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_DOUBLE_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("double type", double.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }    public void testSubarrayFloat() {        float[] nullArray = null;        float[] array = { 10, 11, 12, 13, 14, 15 };        float[] leftSubarray    = { 10, 11, 12, 13 };        float[] midSubarray     = { 11, 12, 13, 14 };        float[] rightSubarray   = { 12, 13, 14, 15 };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_FLOAT_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_FLOAT_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_FLOAT_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_FLOAT_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_FLOAT_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_FLOAT_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_FLOAT_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_FLOAT_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("float type", float.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }    public void testSubarrayBoolean() {        boolean[] nullArray = null;        boolean[] array = { true, true, false, true, false, true };        boolean[] leftSubarray  = { true, true, false, true  };        boolean[] midSubarray   = { true, false, true, false };        boolean[] rightSubarray = { false, true, false, true };        assertTrue("0 start, mid end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, 0, 4)));        assertTrue("0 start, length end",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, 0, array.length)));        assertTrue("mid start, mid end",            ArrayUtils.isEquals(midSubarray,                ArrayUtils.subarray(array, 1, 5)));        assertTrue("mid start, length end",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, array.length)));        assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3));        assertEquals("empty array", ArrayUtils.EMPTY_BOOLEAN_ARRAY,            ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2));        assertEquals("start > end", ArrayUtils.EMPTY_BOOLEAN_ARRAY,            ArrayUtils.subarray(array, 4, 2));        assertEquals("start == end", ArrayUtils.EMPTY_BOOLEAN_ARRAY,            ArrayUtils.subarray(array, 3, 3));        assertTrue("start undershoot, normal end",            ArrayUtils.isEquals(leftSubarray,                ArrayUtils.subarray(array, -2, 4)));        assertEquals("start overshoot, any end",            ArrayUtils.EMPTY_BOOLEAN_ARRAY,                ArrayUtils.subarray(array, 33, 4));        assertTrue("normal start, end overshoot",            ArrayUtils.isEquals(rightSubarray,                ArrayUtils.subarray(array, 2, 33)));        assertTrue("start undershoot, end overshoot",            ArrayUtils.isEquals(array,                ArrayUtils.subarray(array, -2, 12)));        // empty-return tests        assertSame("empty array, object test",            ArrayUtils.EMPTY_BOOLEAN_ARRAY,                ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2));        assertSame("start > end, object test",            ArrayUtils.EMPTY_BOOLEAN_ARRAY,                ArrayUtils.subarray(array, 4, 1));        assertSame("start == end, object test",            ArrayUtils.EMPTY_BOOLEAN_ARRAY,                ArrayUtils.subarray(array, 3, 3));        assertSame("start overshoot, any end, object test",            ArrayUtils.EMPTY_BOOLEAN_ARRAY,                ArrayUtils.subarray(array, 8733, 4));        // array type tests        assertSame("boolean type", boolean.class,            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());    }        //-----------------------------------------------------------------------    public void testSameLength() {        Object[] nullArray = null;        Object[] emptyArray = new Object[0];        Object[] oneArray = new Object[] {"pick"};        Object[] twoArray = new Object[] {"pick", "stick"};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }    public void testSameLengthBoolean() {        boolean[] nullArray = null;        boolean[] emptyArray = new boolean[0];        boolean[] oneArray = new boolean[] {true};        boolean[] twoArray = new boolean[] {true, false};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        public void testSameLengthLong() {        long[] nullArray = null;        long[] emptyArray = new long[0];        long[] oneArray = new long[] {0L};        long[] twoArray = new long[] {0L, 76L};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        public void testSameLengthInt() {        int[] nullArray = null;        int[] emptyArray = new int[0];        int[] oneArray = new int[] {4};        int[] twoArray = new int[] {5, 7};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        public void testSameLengthShort() {        short[] nullArray = null;        short[] emptyArray = new short[0];        short[] oneArray = new short[] {4};        short[] twoArray = new short[] {6, 8};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        public void testSameLengthChar() {        char[] nullArray = null;        char[] emptyArray = new char[0];        char[] oneArray = new char[] {'f'};        char[] twoArray = new char[] {'d', 't'};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        public void testSameLengthByte() {        byte[] nullArray = null;        byte[] emptyArray = new byte[0];        byte[] oneArray = new byte[] {3};        byte[] twoArray = new byte[] {4, 6};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        public void testSameLengthDouble() {        double[] nullArray = null;        double[] emptyArray = new double[0];        double[] oneArray = new double[] {1.3d};        double[] twoArray = new double[] {4.5d, 6.3d};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        public void testSameLengthFloat() {        float[] nullArray = null;        float[] emptyArray = new float[0];        float[] oneArray = new float[] {2.5f};        float[] twoArray = new float[] {6.4f, 5.8f};                assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));                assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));                assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));    }        //-----------------------------------------------------------------------    public void testSameType() {        try {            ArrayUtils.isSameType(null, null);            fail();        } catch (IllegalArgumentException ex) {}        try {            ArrayUtils.isSameType(null, new Object[0]);            fail();        } catch (IllegalArgumentException ex) {}        try {            ArrayUtils.isSameType(new Object[0], null);            fail();        } catch (IllegalArgumentException ex) {}                assertEquals(true, ArrayUtils.isSameType(new Object[0], new Object[0]));        assertEquals(false, ArrayUtils.isSameType(new String[0], new Object[0]));        assertEquals(true, ArrayUtils.isSameType(new String[0][0], new String[0][0]));        assertEquals(false, ArrayUtils.isSameType(new String[0], new String[0][0]));        assertEquals(false, ArrayUtils.isSameType(new String[0][0], new String[0]));    }        //-----------------------------------------------------------------------    public void testReverse() {        StringBuffer str1 = new StringBuffer("pick");        String str2 = "a";        String[] str3 = new String[] {"stick"};        String str4 = "up";                Object[] array = new Object[] {str1, str2, str3};        ArrayUtils.reverse(array);        assertEquals(array[0], str3);        assertEquals(array[1], str2);        assertEquals(array[2], str1);                array = new Object[] {str1, str2, str3, str4};        ArrayUtils.reverse(array);        assertEquals(array[0], str4);        assertEquals(array[1], str3);        assertEquals(array[2], str2);        assertEquals(array[3], str1);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }    public void testReverseLong() {        long[] array = new long[] {1L, 2L, 3L};        ArrayUtils.reverse(array);        assertEquals(array[0], 3L);        assertEquals(array[1], 2L);        assertEquals(array[2], 1L);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        public void testReverseInt() {        int[] array = new int[] {1, 2, 3};        ArrayUtils.reverse(array);        assertEquals(array[0], 3);        assertEquals(array[1], 2);        assertEquals(array[2], 1);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        public void testReverseShort() {        short[] array = new short[] {1, 2, 3};        ArrayUtils.reverse(array);        assertEquals(array[0], 3);        assertEquals(array[1], 2);        assertEquals(array[2], 1);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        public void testReverseChar() {        char[] array = new char[] {'a', 'f', 'C'};        ArrayUtils.reverse(array);        assertEquals(array[0], 'C');        assertEquals(array[1], 'f');        assertEquals(array[2], 'a');        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        public void testReverseByte() {        byte[] array = new byte[] {2, 3, 4};        ArrayUtils.reverse(array);        assertEquals(array[0], 4);        assertEquals(array[1], 3);        assertEquals(array[2], 2);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        public void testReverseDouble() {        double[] array = new double[] {0.3d, 0.4d, 0.5d};        ArrayUtils.reverse(array);        assertEquals(array[0], 0.5d, 0.0d);        assertEquals(array[1], 0.4d, 0.0d);        assertEquals(array[2], 0.3d, 0.0d);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        public void testReverseFloat() {        float[] array = new float[] {0.3f, 0.4f, 0.5f};        ArrayUtils.reverse(array);        assertEquals(array[0], 0.5f, 0.0f);        assertEquals(array[1], 0.4f, 0.0f);        assertEquals(array[2], 0.3f, 0.0f);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        public void testReverseBoolean() {        boolean[] array = new boolean[] {false, false, true};        ArrayUtils.reverse(array);        assertEquals(array[0], true);        assertEquals(array[1], false);        assertEquals(array[2], false);        array = null;        ArrayUtils.reverse(array);        assertEquals(null, array);    }        //-----------------------------------------------------------------------    public void testIndexOf() {        Object[] array = new Object[] { "0", "1", "2", "3", null, "0" };        assertEquals(-1, ArrayUtils.indexOf(null, null));        assertEquals(-1, ArrayUtils.indexOf(null, "0"));        assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0"));        assertEquals(0, ArrayUtils.indexOf(array, "0"));        assertEquals(1, ArrayUtils.indexOf(array, "1"));        assertEquals(2, ArrayUtils.indexOf(array, "2"));        assertEquals(3, ArrayUtils.indexOf(array, "3"));        assertEquals(4, ArrayUtils.indexOf(array, null));        assertEquals(-1, ArrayUtils.indexOf(array, "notInArray"));    }    public void testIndexOfWithStartIndex() {        Object[] array = new Object[] { "0", "1", "2", "3", null, "0" };        assertEquals(-1, ArrayUtils.indexOf(null, null, 2));        assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0", 0));        assertEquals(-1, ArrayUtils.indexOf(null, "0", 2));        assertEquals(5, ArrayUtils.indexOf(array, "0", 2));        assertEquals(-1, ArrayUtils.indexOf(array, "1", 2));        assertEquals(2, ArrayUtils.indexOf(array, "2", 2));        assertEquals(3, ArrayUtils.indexOf(array, "3", 2));        assertEquals(4, ArrayUtils.indexOf(array, null, 2));        assertEquals(-1, ArrayUtils.indexOf(array, "notInArray", 2));                assertEquals(4, ArrayUtils.indexOf(array, null, -1));        assertEquals(-1, ArrayUtils.indexOf(array, null, 8));        assertEquals(-1, ArrayUtils.indexOf(array, "0", 8));    }    public void testLastIndexOf() {        Object[] array = new Object[] { "0", "1", "2", "3", null, "0" };        assertEquals(-1, ArrayUtils.lastIndexOf(null, null));        assertEquals(-1, ArrayUtils.lastIndexOf(null, "0"));        assertEquals(5, ArrayUtils.lastIndexOf(array, "0"));        assertEquals(1, ArrayUtils.lastIndexOf(array, "1"));        assertEquals(2, ArrayUtils.lastIndexOf(array, "2"));        assertEquals(3, ArrayUtils.lastIndexOf(array, "3"));        assertEquals(4, ArrayUtils.lastIndexOf(array, null));        assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray"));    }    public void testLastIndexOfWithStartIndex() {        Object[] array = new Object[] { "0", "1", "2", "3", null, "0" };        assertEquals(-1, ArrayUtils.lastIndexOf(null, null, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(null, "0", 2));        assertEquals(0, ArrayUtils.lastIndexOf(array, "0", 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, "1", 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, "2", 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, "3", 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, "3", -1));        assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5));        assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray", 5));                assertEquals(-1, ArrayUtils.lastIndexOf(array, null, -1));        assertEquals(5, ArrayUtils.lastIndexOf(array, "0", 88));    }    public void testContains() {        Object[] array = new Object[] { "0", "1", "2", "3", null, "0" };        assertEquals(false, ArrayUtils.contains(null, null));        assertEquals(false, ArrayUtils.contains(null, "1"));        assertEquals(true, ArrayUtils.contains(array, "0"));        assertEquals(true, ArrayUtils.contains(array, "1"));        assertEquals(true, ArrayUtils.contains(array, "2"));        assertEquals(true, ArrayUtils.contains(array, "3"));        assertEquals(true, ArrayUtils.contains(array, null));        assertEquals(false, ArrayUtils.contains(array, "notInArray"));    }        //-----------------------------------------------------------------------    public void testIndexOfLong() {        long[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, 0));        array = new long[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.indexOf(array, 0));        assertEquals(1, ArrayUtils.indexOf(array, 1));        assertEquals(2, ArrayUtils.indexOf(array, 2));        assertEquals(3, ArrayUtils.indexOf(array, 3));        assertEquals(-1, ArrayUtils.indexOf(array, 99));    }    public void testIndexOfLongWithStartIndex() {        long[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));        array = new long[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));    }    public void testLastIndexOfLong() {        long[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));        array = new long[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));    }    public void testLastIndexOfLongWithStartIndex() {        long[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));        array = new long[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4));        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));    }    public void testContainsLong() {        long[] array = null;        assertEquals(false, ArrayUtils.contains(array, 1));        array = new long[] { 0, 1, 2, 3, 0 };        assertEquals(true, ArrayUtils.contains(array, 0));        assertEquals(true, ArrayUtils.contains(array, 1));        assertEquals(true, ArrayUtils.contains(array, 2));        assertEquals(true, ArrayUtils.contains(array, 3));        assertEquals(false, ArrayUtils.contains(array, 99));    }        //-----------------------------------------------------------------------    public void testIndexOfInt() {        int[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, 0));        array = new int[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.indexOf(array, 0));        assertEquals(1, ArrayUtils.indexOf(array, 1));        assertEquals(2, ArrayUtils.indexOf(array, 2));        assertEquals(3, ArrayUtils.indexOf(array, 3));        assertEquals(-1, ArrayUtils.indexOf(array, 99));    }    public void testIndexOfIntWithStartIndex() {        int[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));        array = new int[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));    }    public void testLastIndexOfInt() {        int[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));        array = new int[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));    }    public void testLastIndexOfIntWithStartIndex() {        int[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));        array = new int[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));    }    public void testContainsInt() {        int[] array = null;        assertEquals(false, ArrayUtils.contains(array, 1));        array = new int[] { 0, 1, 2, 3, 0 };        assertEquals(true, ArrayUtils.contains(array, 0));        assertEquals(true, ArrayUtils.contains(array, 1));        assertEquals(true, ArrayUtils.contains(array, 2));        assertEquals(true, ArrayUtils.contains(array, 3));        assertEquals(false, ArrayUtils.contains(array, 99));    }        //-----------------------------------------------------------------------    public void testIndexOfShort() {        short[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0));        array = new short[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.indexOf(array, (short) 0));        assertEquals(1, ArrayUtils.indexOf(array, (short) 1));        assertEquals(2, ArrayUtils.indexOf(array, (short) 2));        assertEquals(3, ArrayUtils.indexOf(array, (short) 3));        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99));    }    public void testIndexOfShortWithStartIndex() {        short[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 2));        array = new short[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.indexOf(array, (short) 0, 2));        assertEquals(-1, ArrayUtils.indexOf(array, (short) 1, 2));        assertEquals(2, ArrayUtils.indexOf(array, (short) 2, 2));        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, 2));        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, -1));        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99, 0));        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 6));    }    public void testLastIndexOfShort() {        short[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0));        array = new short[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0));        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1));        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2));        assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));    }    public void testLastIndexOfShortWithStartIndex() {        short[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2));        array = new short[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88));    }    public void testContainsShort() {        short[] array = null;        assertEquals(false, ArrayUtils.contains(array, (short) 1));        array = new short[] { 0, 1, 2, 3, 0 };        assertEquals(true, ArrayUtils.contains(array, (short) 0));        assertEquals(true, ArrayUtils.contains(array, (short) 1));        assertEquals(true, ArrayUtils.contains(array, (short) 2));        assertEquals(true, ArrayUtils.contains(array, (short) 3));        assertEquals(false, ArrayUtils.contains(array, (short) 99));    }        //-----------------------------------------------------------------------    public void testIndexOfChar() {        char[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, 'a'));        array = new char[] { 'a', 'b', 'c', 'd', 'a' };        assertEquals(0, ArrayUtils.indexOf(array, 'a'));        assertEquals(1, ArrayUtils.indexOf(array, 'b'));        assertEquals(2, ArrayUtils.indexOf(array, 'c'));        assertEquals(3, ArrayUtils.indexOf(array, 'd'));        assertEquals(-1, ArrayUtils.indexOf(array, 'e'));    }    public void testIndexOfCharWithStartIndex() {        char[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2));        array = new char[] { 'a', 'b', 'c', 'd', 'a' };        assertEquals(4, ArrayUtils.indexOf(array, 'a', 2));        assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2));        assertEquals(2, ArrayUtils.indexOf(array, 'c', 2));        assertEquals(3, ArrayUtils.indexOf(array, 'd', 2));        assertEquals(3, ArrayUtils.indexOf(array, 'd', -1));        assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0));        assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6));    }    public void testLastIndexOfChar() {        char[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a'));        array = new char[] { 'a', 'b', 'c', 'd', 'a' };        assertEquals(4, ArrayUtils.lastIndexOf(array, 'a'));        assertEquals(1, ArrayUtils.lastIndexOf(array, 'b'));        assertEquals(2, ArrayUtils.lastIndexOf(array, 'c'));        assertEquals(3, ArrayUtils.lastIndexOf(array, 'd'));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));    }    public void testLastIndexOfCharWithStartIndex() {        char[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2));        array = new char[] { 'a', 'b', 'c', 'd', 'a' };        assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1));        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));        assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88));    }    public void testContainsChar() {        char[] array = null;        assertEquals(false, ArrayUtils.contains(array, 'b'));        array = new char[] { 'a', 'b', 'c', 'd', 'a' };        assertEquals(true, ArrayUtils.contains(array, 'a'));        assertEquals(true, ArrayUtils.contains(array, 'b'));        assertEquals(true, ArrayUtils.contains(array, 'c'));        assertEquals(true, ArrayUtils.contains(array, 'd'));        assertEquals(false, ArrayUtils.contains(array, 'e'));    }        //-----------------------------------------------------------------------    public void testIndexOfByte() {        byte[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0));        array = new byte[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.indexOf(array, (byte) 0));        assertEquals(1, ArrayUtils.indexOf(array, (byte) 1));        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2));        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3));        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99));    }    public void testIndexOfByteWithStartIndex() {        byte[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2));        array = new byte[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2));        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2));        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2));        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2));        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1));        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0));        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6));    }    public void testLastIndexOfByte() {        byte[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0));        array = new byte[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0));        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1));        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2));        assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));    }    public void testLastIndexOfByteWithStartIndex() {        byte[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2));        array = new byte[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88));    }    public void testContainsByte() {        byte[] array = null;        assertEquals(false, ArrayUtils.contains(array, (byte) 1));        array = new byte[] { 0, 1, 2, 3, 0 };        assertEquals(true, ArrayUtils.contains(array, (byte) 0));        assertEquals(true, ArrayUtils.contains(array, (byte) 1));        assertEquals(true, ArrayUtils.contains(array, (byte) 2));        assertEquals(true, ArrayUtils.contains(array, (byte) 3));        assertEquals(false, ArrayUtils.contains(array, (byte) 99));    }        //-----------------------------------------------------------------------    @SuppressWarnings("cast")    public void testIndexOfDouble() {        double[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));        array = new double[0];        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.indexOf(array, (double) 0));        assertEquals(1, ArrayUtils.indexOf(array, (double) 1));        assertEquals(2, ArrayUtils.indexOf(array, (double) 2));        assertEquals(3, ArrayUtils.indexOf(array, (double) 3));        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, -1));        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99));    }    @SuppressWarnings("cast")    public void testIndexOfDoubleTolerance() {        double[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));        array = new double[0];        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3));        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35));        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0));        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001));    }    @SuppressWarnings("cast")    public void testIndexOfDoubleWithStartIndex() {        double[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));        array = new double[0];        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 2));        assertEquals(-1, ArrayUtils.indexOf(array, (double) 1, 2));        assertEquals(2, ArrayUtils.indexOf(array, (double) 2, 2));        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, 2));        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99, 0));        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 6));    }        @SuppressWarnings("cast")    public void testIndexOfDoubleWithStartIndexTolerance() {        double[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));        array = new double[0];        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3));        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3));        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3));        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35));        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0));        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001));        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0));        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001));    }    @SuppressWarnings("cast")    public void testLastIndexOfDouble() {        double[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));        array = new double[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0));        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1));        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2));        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));    }    @SuppressWarnings("cast")    public void testLastIndexOfDoubleTolerance() {        double[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));        array = new double[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3));        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35));        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0));        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001));    }    @SuppressWarnings("cast")    public void testLastIndexOfDoubleWithStartIndex() {        double[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));        array = new double[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, -1));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88));    }    @SuppressWarnings("cast")    public void testLastIndexOfDoubleWithStartIndexTolerance() {        double[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));        array = new double[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));        array = new double[] { (double) 3 };        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3));        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3));        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35));        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0));        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0));    }    @SuppressWarnings("cast")    public void testContainsDouble() {        double[] array = null;        assertEquals(false, ArrayUtils.contains(array, (double) 1));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(true, ArrayUtils.contains(array, (double) 0));        assertEquals(true, ArrayUtils.contains(array, (double) 1));        assertEquals(true, ArrayUtils.contains(array, (double) 2));        assertEquals(true, ArrayUtils.contains(array, (double) 3));        assertEquals(false, ArrayUtils.contains(array, (double) 99));    }    @SuppressWarnings("cast")    public void testContainsDoubleTolerance() {        double[] array = null;        assertEquals(false, ArrayUtils.contains(array, (double) 1, (double) 0));        array = new double[] { 0, 1, 2, 3, 0 };        assertEquals(false, ArrayUtils.contains(array, (double) 4.0, (double) 0.33));        assertEquals(false, ArrayUtils.contains(array, (double) 2.5, (double) 0.49));        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.50));        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.51));    }        //-----------------------------------------------------------------------    @SuppressWarnings("cast")    public void testIndexOfFloat() {        float[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));        array = new float[0];        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));        array = new float[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.indexOf(array, (float) 0));        assertEquals(1, ArrayUtils.indexOf(array, (float) 1));        assertEquals(2, ArrayUtils.indexOf(array, (float) 2));        assertEquals(3, ArrayUtils.indexOf(array, (float) 3));        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99));    }    @SuppressWarnings("cast")    public void testIndexOfFloatWithStartIndex() {        float[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));        array = new float[0];        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));        array = new float[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2));        assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2));        assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2));        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2));        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1));        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0));        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6));    }    @SuppressWarnings("cast")    public void testLastIndexOfFloat() {        float[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));        array = new float[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));        array = new float[] { 0, 1, 2, 3, 0 };        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0));        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1));        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2));        assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));    }    @SuppressWarnings("cast")    public void testLastIndexOfFloatWithStartIndex() {        float[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));        array = new float[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));        array = new float[] { 0, 1, 2, 3, 0 };        assertEquals(0, ArrayUtils.lastIndexOf(array, (float) 0, 2));        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1, 2));        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, -1));        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0, 88));    }    @SuppressWarnings("cast")    public void testContainsFloat() {        float[] array = null;        assertEquals(false, ArrayUtils.contains(array, (float) 1));        array = new float[] { 0, 1, 2, 3, 0 };        assertEquals(true, ArrayUtils.contains(array, (float) 0));        assertEquals(true, ArrayUtils.contains(array, (float) 1));        assertEquals(true, ArrayUtils.contains(array, (float) 2));        assertEquals(true, ArrayUtils.contains(array, (float) 3));        assertEquals(false, ArrayUtils.contains(array, (float) 99));    }        //-----------------------------------------------------------------------    public void testIndexOfBoolean() {        boolean[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, true));        array = new boolean[0];        assertEquals(-1, ArrayUtils.indexOf(array, true));        array = new boolean[] { true, false, true };        assertEquals(0, ArrayUtils.indexOf(array, true));        assertEquals(1, ArrayUtils.indexOf(array, false));        array = new boolean[] { true, true };        assertEquals(-1, ArrayUtils.indexOf(array, false));    }    public void testIndexOfBooleanWithStartIndex() {        boolean[] array = null;        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));        array = new boolean[0];        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));        array = new boolean[] { true, false, true };        assertEquals(2, ArrayUtils.indexOf(array, true, 1));        assertEquals(-1, ArrayUtils.indexOf(array, false, 2));        assertEquals(1, ArrayUtils.indexOf(array, false, 0));        assertEquals(1, ArrayUtils.indexOf(array, false, -1));        array = new boolean[] { true, true };        assertEquals(-1, ArrayUtils.indexOf(array, false, 0));        assertEquals(-1, ArrayUtils.indexOf(array, false, -1));    }    public void testLastIndexOfBoolean() {        boolean[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));        array = new boolean[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));        array = new boolean[] { true, false, true };        assertEquals(2, ArrayUtils.lastIndexOf(array, true));        assertEquals(1, ArrayUtils.lastIndexOf(array, false));        array = new boolean[] { true, true };        assertEquals(-1, ArrayUtils.lastIndexOf(array, false));    }    public void testLastIndexOfBooleanWithStartIndex() {        boolean[] array = null;        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));        array = new boolean[0];        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));        array = new boolean[] { true, false, true };        assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2));        assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1));        assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));        array = new boolean[] { true, true };        assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2));        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));    }    public void testContainsBoolean() {        boolean[] array = null;        assertEquals(false, ArrayUtils.contains(array, true));        array = new boolean[] { true, false, true };        assertEquals(true, ArrayUtils.contains(array, true));        assertEquals(true, ArrayUtils.contains(array, false));        array = new boolean[] { true, true };        assertEquals(true, ArrayUtils.contains(array, true));        assertEquals(false, ArrayUtils.contains(array, false));    }        // testToPrimitive/Object for boolean    //  -----------------------------------------------------------------------    public void testToPrimitive_boolean() {        final Boolean[] b = null;        assertEquals(null, ArrayUtils.toPrimitive(b));        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0]));        assertTrue(Arrays.equals(            new boolean[] {true, false, true},            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}))        );        try {            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null});            fail();        } catch (NullPointerException ex) {}    }    public void testToPrimitive_boolean_boolean() {        assertEquals(null, ArrayUtils.toPrimitive(null, false));        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false));        assertTrue(Arrays.equals(            new boolean[] {true, false, true},            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, false))        );        assertTrue(Arrays.equals(            new boolean[] {true, false, false},            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, false))        );        assertTrue(Arrays.equals(            new boolean[] {true, true, false},            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, true))        );    }    public void testToObject_boolean() {        final boolean[] b = null;        assertEquals(null, ArrayUtils.toObject(b));        assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0]));        assertTrue(Arrays.equals(            new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE},            ArrayUtils.toObject(new boolean[] {true, false, true}))        );    }    // testToPrimitive/Object for byte    //  -----------------------------------------------------------------------    public void testToPrimitive_char() {        final Character[] b = null;        assertEquals(null, ArrayUtils.toPrimitive(b));                assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0]));                assertTrue(Arrays.equals(            new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE),                 new Character(Character.MAX_VALUE), new Character('0')}))        );        try {            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});            fail();        } catch (NullPointerException ex) {}    }    public void testToPrimitive_char_char() {        final Character[] b = null;        assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE));                assertSame(ArrayUtils.EMPTY_CHAR_ARRAY,             ArrayUtils.toPrimitive(new Character[0], (char)0));                assertTrue(Arrays.equals(            new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE),                 new Character(Character.MAX_VALUE), new Character('0')},                 Character.MIN_VALUE))        );                assertTrue(Arrays.equals(            new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null,                 new Character('0')}, Character.MAX_VALUE))        );    }    public void testToObject_char() {        final char[] b = null;        assertEquals(null, ArrayUtils.toObject(b));                assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY,             ArrayUtils.toObject(new char[0]));                assertTrue(Arrays.equals(            new Character[] {new Character(Character.MIN_VALUE),                 new Character(Character.MAX_VALUE), new Character('0')},                ArrayUtils.toObject(new char[] {Character.MIN_VALUE, Character.MAX_VALUE,                 '0'} ))        );    }        // testToPrimitive/Object for byte    //  -----------------------------------------------------------------------    public void testToPrimitive_byte() {        final Byte[] b = null;        assertEquals(null, ArrayUtils.toPrimitive(b));                assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0]));                assertTrue(Arrays.equals(            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE),                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)}))        );        try {            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null});            fail();        } catch (NullPointerException ex) {}    }    public void testToPrimitive_byte_byte() {        final Byte[] b = null;        assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE));                assertSame(ArrayUtils.EMPTY_BYTE_ARRAY,             ArrayUtils.toPrimitive(new Byte[0], (byte)1));                assertTrue(Arrays.equals(            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE),                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)},                 Byte.MIN_VALUE))        );                assertTrue(Arrays.equals(            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null,                 Byte.valueOf((byte)9999999)}, Byte.MAX_VALUE))        );    }    public void testToObject_byte() {        final byte[] b = null;        assertEquals(null, ArrayUtils.toObject(b));                assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY,             ArrayUtils.toObject(new byte[0]));                assertTrue(Arrays.equals(            new Byte[] {Byte.valueOf(Byte.MIN_VALUE),                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)},                ArrayUtils.toObject(new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE,                 (byte)9999999}))        );    }    // testToPrimitive/Object for short    //  -----------------------------------------------------------------------    public void testToPrimitive_short() {        final Short[] b = null;        assertEquals(null, ArrayUtils.toPrimitive(b));                assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0]));                assertTrue(Arrays.equals(            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE),                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))        );        try {            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});            fail();        } catch (NullPointerException ex) {}    }    public void testToPrimitive_short_short() {        final Short[] s = null;        assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE));                assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0],         Short.MIN_VALUE));                assertTrue(Arrays.equals(            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE),                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))        );                assertTrue(Arrays.equals(            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null,                 new Short((short)9999999)}, Short.MAX_VALUE))        );    }    public void testToObject_short() {        final short[] b = null;        assertEquals(null, ArrayUtils.toObject(b));                assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,         ArrayUtils.toObject(new short[0]));                assertTrue(Arrays.equals(            new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE),                 new Short((short)9999999)},            ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,                 (short)9999999}))        );    }    //  testToPrimitive/Object for int    //  -----------------------------------------------------------------------     public void testToPrimitive_int() {         final Integer[] b = null;         assertEquals(null, ArrayUtils.toPrimitive(b));         assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0]));         assertTrue(Arrays.equals(             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE),                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))         );         try {             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});             fail();         } catch (NullPointerException ex) {}     }     public void testToPrimitive_int_int() {         final Long[] l = null;         assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE));         assertSame(ArrayUtils.EMPTY_INT_ARRAY,          ArrayUtils.toPrimitive(new Integer[0], 1));         assertTrue(Arrays.equals(             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE),                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));         assertTrue(Arrays.equals(             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE),                  null, new Integer(9999999)}, Integer.MAX_VALUE))         );     }         public void testToPrimitive_intNull() {        Integer[] iArray = null;        assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE));    }    public void testToObject_int() {        final int[] b = null;        assertEquals(null, ArrayUtils.toObject(b));            assertSame(            ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY,            ArrayUtils.toObject(new int[0]));            assertTrue(            Arrays.equals(                new Integer[] {                    new Integer(Integer.MIN_VALUE),                    new Integer(Integer.MAX_VALUE),                    new Integer(9999999)},            ArrayUtils.toObject(                new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 })));    }    //  testToPrimitive/Object for long    //  -----------------------------------------------------------------------     public void testToPrimitive_long() {         final Long[] b = null;         assertEquals(null, ArrayUtils.toPrimitive(b));                  assertSame(ArrayUtils.EMPTY_LONG_ARRAY,             ArrayUtils.toPrimitive(new Long[0]));                  assertTrue(Arrays.equals(             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE),                  new Long(Long.MAX_VALUE), new Long(9999999)}))         );         try {             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});             fail();         } catch (NullPointerException ex) {}     }     public void testToPrimitive_long_long() {         final Long[] l = null;         assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE));                  assertSame(ArrayUtils.EMPTY_LONG_ARRAY,          ArrayUtils.toPrimitive(new Long[0], 1));                  assertTrue(Arrays.equals(             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE),                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));                  assertTrue(Arrays.equals(             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE),                  null, new Long(9999999)}, Long.MAX_VALUE))         );     }         public void testToObject_long() {        final long[] b = null;        assertEquals(null, ArrayUtils.toObject(b));            assertSame(            ArrayUtils.EMPTY_LONG_OBJECT_ARRAY,            ArrayUtils.toObject(new long[0]));            assertTrue(            Arrays.equals(                new Long[] {                    new Long(Long.MIN_VALUE),                    new Long(Long.MAX_VALUE),                    new Long(9999999)},            ArrayUtils.toObject(                new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 })));    }    //  testToPrimitive/Object for float    //  -----------------------------------------------------------------------     public void testToPrimitive_float() {         final Float[] b = null;         assertEquals(null, ArrayUtils.toPrimitive(b));                  assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,             ArrayUtils.toPrimitive(new Float[0]));                  assertTrue(Arrays.equals(             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE),                  new Float(Float.MAX_VALUE), new Float(9999999)}))         );         try {             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});             fail();         } catch (NullPointerException ex) {}     }     public void testToPrimitive_float_float() {         final Float[] l = null;         assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE));                  assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,          ArrayUtils.toPrimitive(new Float[0], 1));                  assertTrue(Arrays.equals(             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE),                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));                  assertTrue(Arrays.equals(             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE),                  null, new Float(9999999)}, Float.MAX_VALUE))         );     }         public void testToObject_float() {        final float[] b = null;        assertEquals(null, ArrayUtils.toObject(b));            assertSame(            ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY,            ArrayUtils.toObject(new float[0]));            assertTrue(            Arrays.equals(                new Float[] {                    new Float(Float.MIN_VALUE),                    new Float(Float.MAX_VALUE),                    new Float(9999999)},            ArrayUtils.toObject(                new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 })));    }    //  testToPrimitive/Object for double    //  -----------------------------------------------------------------------     public void testToPrimitive_double() {         final Double[] b = null;         assertEquals(null, ArrayUtils.toPrimitive(b));                  assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,             ArrayUtils.toPrimitive(new Double[0]));                  assertTrue(Arrays.equals(             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE),                  new Double(Double.MAX_VALUE), new Double(9999999)}))         );         try {             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});             fail();         } catch (NullPointerException ex) {}     }     public void testToPrimitive_double_double() {         final Double[] l = null;         assertEquals(null, ArrayUtils.toPrimitive(l, Double.MIN_VALUE));                  assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,          ArrayUtils.toPrimitive(new Double[0], 1));                  assertTrue(Arrays.equals(             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE),                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));                  assertTrue(Arrays.equals(             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE),                  null, new Double(9999999)}, Double.MAX_VALUE))         );     }         public void testToObject_double() {        final double[] b = null;        assertEquals(null, ArrayUtils.toObject(b));            assertSame(            ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY,            ArrayUtils.toObject(new double[0]));            assertTrue(            Arrays.equals(                new Double[] {                    new Double(Double.MIN_VALUE),                    new Double(Double.MAX_VALUE),                    new Double(9999999)},            ArrayUtils.toObject(                new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 })));    }    //-----------------------------------------------------------------------    /**     * Test for {@link ArrayUtils#isEmpty(java.lang.Object[])}.     */    public void testIsEmptyObject() {        Object[] emptyArray = new Object[] {};        Object[] notEmptyArray = new Object[] { new String("Value") };        assertEquals(true, ArrayUtils.isEmpty((Object[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyArray));    }    /**     * Tests for {@link ArrayUtils#isEmpty(long[])},     * {@link ArrayUtils#isEmpty(int[])},     * {@link ArrayUtils#isEmpty(short[])},     * {@link ArrayUtils#isEmpty(char[])},     * {@link ArrayUtils#isEmpty(byte[])},     * {@link ArrayUtils#isEmpty(double[])},     * {@link ArrayUtils#isEmpty(float[])} and     * {@link ArrayUtils#isEmpty(boolean[])}.     */    public void testIsEmptyPrimitives() {        long[] emptyLongArray = new long[] {};        long[] notEmptyLongArray = new long[] { 1L };        assertEquals(true, ArrayUtils.isEmpty((long[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyLongArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyLongArray));        int[] emptyIntArray = new int[] {};        int[] notEmptyIntArray = new int[] { 1 };        assertEquals(true, ArrayUtils.isEmpty((int[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyIntArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyIntArray));        short[] emptyShortArray = new short[] {};        short[] notEmptyShortArray = new short[] { 1 };        assertEquals(true, ArrayUtils.isEmpty((short[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyShortArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyShortArray));        char[] emptyCharArray = new char[] {};        char[] notEmptyCharArray = new char[] { 1 };        assertEquals(true, ArrayUtils.isEmpty((char[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyCharArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyCharArray));        byte[] emptyByteArray = new byte[] {};        byte[] notEmptyByteArray = new byte[] { 1 };        assertEquals(true, ArrayUtils.isEmpty((byte[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyByteArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyByteArray));        double[] emptyDoubleArray = new double[] {};        double[] notEmptyDoubleArray = new double[] { 1.0 };        assertEquals(true, ArrayUtils.isEmpty((double[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyDoubleArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyDoubleArray));        float[] emptyFloatArray = new float[] {};        float[] notEmptyFloatArray = new float[] { 1.0F };        assertEquals(true, ArrayUtils.isEmpty((float[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyFloatArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyFloatArray));        boolean[] emptyBooleanArray = new boolean[] {};        boolean[] notEmptyBooleanArray = new boolean[] { true };        assertEquals(true, ArrayUtils.isEmpty((boolean[])null));        assertEquals(true, ArrayUtils.isEmpty(emptyBooleanArray));        assertEquals(false, ArrayUtils.isEmpty(notEmptyBooleanArray));    }        // ------------------------------------------------------------------------    public void testGetLength() {        assertEquals(0, ArrayUtils.getLength(null));                Object[] emptyObjectArray = new Object[0];        Object[] notEmptyObjectArray = new Object[] {"aValue"};        assertEquals(0, ArrayUtils.getLength((Object[]) null));        assertEquals(0, ArrayUtils.getLength(emptyObjectArray));        assertEquals(1, ArrayUtils.getLength(notEmptyObjectArray));         int[] emptyIntArray = new int[] {};        int[] notEmptyIntArray = new int[] { 1 };        assertEquals(0, ArrayUtils.getLength((int[]) null));        assertEquals(0, ArrayUtils.getLength(emptyIntArray));        assertEquals(1, ArrayUtils.getLength(notEmptyIntArray));        short[] emptyShortArray = new short[] {};        short[] notEmptyShortArray = new short[] { 1 };        assertEquals(0, ArrayUtils.getLength((short[]) null));        assertEquals(0, ArrayUtils.getLength(emptyShortArray));        assertEquals(1, ArrayUtils.getLength(notEmptyShortArray));        char[] emptyCharArray = new char[] {};        char[] notEmptyCharArray = new char[] { 1 };        assertEquals(0, ArrayUtils.getLength((char[]) null));        assertEquals(0, ArrayUtils.getLength(emptyCharArray));        assertEquals(1, ArrayUtils.getLength(notEmptyCharArray));        byte[] emptyByteArray = new byte[] {};        byte[] notEmptyByteArray = new byte[] { 1 };        assertEquals(0, ArrayUtils.getLength((byte[]) null));        assertEquals(0, ArrayUtils.getLength(emptyByteArray));        assertEquals(1, ArrayUtils.getLength(notEmptyByteArray));        double[] emptyDoubleArray = new double[] {};        double[] notEmptyDoubleArray = new double[] { 1.0 };        assertEquals(0, ArrayUtils.getLength((double[]) null));        assertEquals(0, ArrayUtils.getLength(emptyDoubleArray));        assertEquals(1, ArrayUtils.getLength(notEmptyDoubleArray));        float[] emptyFloatArray = new float[] {};        float[] notEmptyFloatArray = new float[] { 1.0F };        assertEquals(0, ArrayUtils.getLength((float[]) null));        assertEquals(0, ArrayUtils.getLength(emptyFloatArray));        assertEquals(1, ArrayUtils.getLength(notEmptyFloatArray));        boolean[] emptyBooleanArray = new boolean[] {};        boolean[] notEmptyBooleanArray = new boolean[] { true };        assertEquals(0, ArrayUtils.getLength((boolean[]) null));        assertEquals(0, ArrayUtils.getLength(emptyBooleanArray));        assertEquals(1, ArrayUtils.getLength(notEmptyBooleanArray));                try {            ArrayUtils.getLength("notAnArray");            fail("IllegalArgumentException should have been thrown");        } catch (IllegalArgumentException e) {}    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @author Matthew Hawthorne * @version $Id$ * @see UnhandledException */public class UnhandledExceptionTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(UnhandledExceptionTest.class);    }    public UnhandledExceptionTest(String testName) {        super(testName);    }    // testConstructor    public void testConstructor_throwable_nullInput() {        final Throwable t = null;        new UnhandledException(t);    }    public void testConstructor_stringAndThrowable_nullInput() {        new UnhandledException(null, null);    }    // testGetCause    public void testGetCause() {        final Throwable t = new NullPointerException();        final Throwable n = new UnhandledException(t);        assertEquals(t, n.getCause());    }    public void testGetCauseAndGetMessage() {        final Throwable t = new NullPointerException();        final String msg = "nullArg";        final Throwable n = new UnhandledException(msg, t);        assertEquals(t, n.getCause());        assertEquals(msg, n.getMessage());    }} // UnhandledExceptionTest
/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.lang;import java.lang.reflect.Modifier;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.CharSet}. * * @author Stephen Colebourne * @author Phil Steitz * @version $Id$ */public class CharSetTest extends TestCase {        public CharSetTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(CharSetTest.class);        suite.setName("CharSet Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testClass() {        assertEquals(true, Modifier.isPublic(CharSet.class.getModifiers()));        assertEquals(false, Modifier.isFinal(CharSet.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testGetInstance() {        assertSame(CharSet.EMPTY, CharSet.getInstance( (String) null));        assertSame(CharSet.EMPTY, CharSet.getInstance(""));        assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("a-zA-Z"));        assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("A-Za-z"));        assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance("a-z"));        assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance("A-Z"));        assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance("0-9"));    }    //-----------------------------------------------------------------------    public void testGetInstance_Stringarray() {        assertEquals(null, CharSet.getInstance((String[]) null));        assertEquals("[]", CharSet.getInstance(new String[0]).toString());        assertEquals("[]", CharSet.getInstance(new String[] {null}).toString());        assertEquals("[a-e]", CharSet.getInstance(new String[] {"a-e"}).toString());    }        //-----------------------------------------------------------------------    public void testConstructor_String_simple() {        CharSet set;        CharRange[] array;                set = CharSet.getInstance((String) null);        array = set.getCharRanges();        assertEquals("[]", set.toString());        assertEquals(0, array.length);                set = CharSet.getInstance("");        array = set.getCharRanges();        assertEquals("[]", set.toString());        assertEquals(0, array.length);                set = CharSet.getInstance("a");        array = set.getCharRanges();        assertEquals("[a]", set.toString());        assertEquals(1, array.length);        assertEquals("a", array[0].toString());                set = CharSet.getInstance("^a");        array = set.getCharRanges();        assertEquals("[^a]", set.toString());        assertEquals(1, array.length);        assertEquals("^a", array[0].toString());                set = CharSet.getInstance("a-e");        array = set.getCharRanges();        assertEquals("[a-e]", set.toString());        assertEquals(1, array.length);        assertEquals("a-e", array[0].toString());                set = CharSet.getInstance("^a-e");        array = set.getCharRanges();        assertEquals("[^a-e]", set.toString());        assertEquals(1, array.length);        assertEquals("^a-e", array[0].toString());    }        public void testConstructor_String_combo() {        CharSet set;        CharRange[] array;                set = CharSet.getInstance("abc");        array = set.getCharRanges();        assertEquals(3, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));                set = CharSet.getInstance("a-ce-f");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'c')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));                set = CharSet.getInstance("ae-f");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));                set = CharSet.getInstance("e-fa");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));                set = CharSet.getInstance("ae-fm-pz");        array = set.getCharRanges();        assertEquals(4, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('m', 'p')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('z')));    }        public void testConstructor_String_comboNegated() {        CharSet set;        CharRange[] array;                set = CharSet.getInstance("^abc");        array = set.getCharRanges();        assertEquals(3, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));                set = CharSet.getInstance("b^ac");        array = set.getCharRanges();        assertEquals(3, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));                set = CharSet.getInstance("db^ac");        array = set.getCharRanges();        assertEquals(4, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('d')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));                set = CharSet.getInstance("^b^a");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('b', 'b', true)));        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));                set = CharSet.getInstance("b^a-c^z");        array = set.getCharRanges();        assertEquals(3, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'c', true)));        assertEquals(true, ArrayUtils.contains(array, new CharRange('z', 'z', true)));        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));    }            public void testConstructor_String_oddDash() {        CharSet set;        CharRange[] array;                set = CharSet.getInstance("-");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));                set = CharSet.getInstance("--");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));                set = CharSet.getInstance("---");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));                set = CharSet.getInstance("----");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));                set = CharSet.getInstance("-a");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));                set = CharSet.getInstance("a-");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));                set = CharSet.getInstance("a--");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '-')));                set = CharSet.getInstance("--a");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('-', 'a')));    }        public void testConstructor_String_oddNegate() {        CharSet set;        CharRange[] array;        set = CharSet.getInstance("^");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('^'))); // "^"                set = CharSet.getInstance("^^");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // "^^"                set = CharSet.getInstance("^^^");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // "^^"        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^'))); // "^"                set = CharSet.getInstance("^^^^");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // "^^" x2                set = CharSet.getInstance("a^");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a'))); // "a"        assertEquals(true, ArrayUtils.contains(array, new CharRange('^'))); // "^"                set = CharSet.getInstance("^a-");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true))); // "^a"        assertEquals(true, ArrayUtils.contains(array, new CharRange('-'))); // "-"                set = CharSet.getInstance("^^-c");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', 'c', true))); // "^^-c"                set = CharSet.getInstance("^c-^");        array = set.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true))); // "^c-^"                set = CharSet.getInstance("^c-^d");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true))); // "^c-^"        assertEquals(true, ArrayUtils.contains(array, new CharRange('d'))); // "d"                set = CharSet.getInstance("^^-");        array = set.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // "^^"        assertEquals(true, ArrayUtils.contains(array, new CharRange('-'))); // "-"    }        public void testConstructor_String_oddCombinations() {        CharSet set;        CharRange[] array = null;                set = CharSet.getInstance("a-^c");        array = set.getCharRanges();        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '^'))); // "a-^"        assertEquals(true, ArrayUtils.contains(array, new CharRange('c'))); // "c"        assertEquals(false, set.contains('b'));        assertEquals(true, set.contains('^'));          assertEquals(true, set.contains('_')); // between ^ and a        assertEquals(true, set.contains('c'));                  set = CharSet.getInstance("^a-^c");        array = set.getCharRanges();        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '^', true))); // "^a-^"        assertEquals(true, ArrayUtils.contains(array, new CharRange('c'))); // "c"        assertEquals(true, set.contains('b'));        assertEquals(false, set.contains('^'));          assertEquals(false, set.contains('_')); // between ^ and a                set = CharSet.getInstance("a- ^-- "); //contains everything        array = set.getCharRanges();        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', ' '))); // "a- "        assertEquals(true, ArrayUtils.contains(array, new CharRange('-', ' ', true))); // "^-- "        assertEquals(true, set.contains('#'));        assertEquals(true, set.contains('^'));        assertEquals(true, set.contains('a'));        assertEquals(true, set.contains('*'));        assertEquals(true, set.contains('A'));                set = CharSet.getInstance("^-b");        array = set.getCharRanges();        assertEquals(true, ArrayUtils.contains(array, new CharRange('^','b'))); // "^-b"        assertEquals(true, set.contains('b'));        assertEquals(true, set.contains('_')); // between ^ and a        assertEquals(false, set.contains('A'));        assertEquals(true, set.contains('^'));                 set = CharSet.getInstance("b-^");        array = set.getCharRanges();        assertEquals(true, ArrayUtils.contains(array, new CharRange('^','b'))); // "b-^"        assertEquals(true, set.contains('b'));        assertEquals(true, set.contains('^'));        assertEquals(true, set.contains('a')); // between ^ and b        assertEquals(false, set.contains('c'));     }            //-----------------------------------------------------------------------        public void testEquals_Object() {        CharSet abc = CharSet.getInstance("abc");        CharSet abc2 = CharSet.getInstance("abc");        CharSet atoc = CharSet.getInstance("a-c");        CharSet atoc2 = CharSet.getInstance("a-c");        CharSet notatoc = CharSet.getInstance("^a-c");        CharSet notatoc2 = CharSet.getInstance("^a-c");                assertEquals(false, abc.equals(null));                assertEquals(true, abc.equals(abc));        assertEquals(true, abc.equals(abc2));        assertEquals(false, abc.equals(atoc));        assertEquals(false, abc.equals(notatoc));                assertEquals(false, atoc.equals(abc));        assertEquals(true, atoc.equals(atoc));        assertEquals(true, atoc.equals(atoc2));        assertEquals(false, atoc.equals(notatoc));                assertEquals(false, notatoc.equals(abc));        assertEquals(false, notatoc.equals(atoc));        assertEquals(true, notatoc.equals(notatoc));        assertEquals(true, notatoc.equals(notatoc2));    }                public void testHashCode() {        CharSet abc = CharSet.getInstance("abc");        CharSet abc2 = CharSet.getInstance("abc");        CharSet atoc = CharSet.getInstance("a-c");        CharSet atoc2 = CharSet.getInstance("a-c");        CharSet notatoc = CharSet.getInstance("^a-c");        CharSet notatoc2 = CharSet.getInstance("^a-c");                assertEquals(abc.hashCode(), abc.hashCode());        assertEquals(abc.hashCode(), abc2.hashCode());        assertEquals(atoc.hashCode(), atoc.hashCode());        assertEquals(atoc.hashCode(), atoc2.hashCode());        assertEquals(notatoc.hashCode(), notatoc.hashCode());        assertEquals(notatoc.hashCode(), notatoc2.hashCode());    }        //-----------------------------------------------------------------------        public void testContains_Char() {        CharSet btod = CharSet.getInstance("b-d");        CharSet dtob = CharSet.getInstance("d-b");        CharSet bcd = CharSet.getInstance("bcd");        CharSet bd = CharSet.getInstance("bd");        CharSet notbtod = CharSet.getInstance("^b-d");                assertEquals(false, btod.contains('a'));        assertEquals(true, btod.contains('b'));        assertEquals(true, btod.contains('c'));        assertEquals(true, btod.contains('d'));        assertEquals(false, btod.contains('e'));                assertEquals(false, bcd.contains('a'));        assertEquals(true, bcd.contains('b'));        assertEquals(true, bcd.contains('c'));        assertEquals(true, bcd.contains('d'));        assertEquals(false, bcd.contains('e'));                assertEquals(false, bd.contains('a'));        assertEquals(true, bd.contains('b'));        assertEquals(false, bd.contains('c'));        assertEquals(true, bd.contains('d'));        assertEquals(false, bd.contains('e'));                assertEquals(true, notbtod.contains('a'));        assertEquals(false, notbtod.contains('b'));        assertEquals(false, notbtod.contains('c'));        assertEquals(false, notbtod.contains('d'));        assertEquals(true, notbtod.contains('e'));                assertEquals(false, dtob.contains('a'));        assertEquals(true, dtob.contains('b'));        assertEquals(true, dtob.contains('c'));        assertEquals(true, dtob.contains('d'));        assertEquals(false, dtob.contains('e'));              CharRange[] array = dtob.getCharRanges();        assertEquals("[b-d]", dtob.toString());        assertEquals(1, array.length);    }        //-----------------------------------------------------------------------        public void testSerialization() {        CharSet set = CharSet.getInstance("a");        assertEquals(set, SerializationUtils.clone(set));         set = CharSet.getInstance("a-e");        assertEquals(set, SerializationUtils.clone(set));         set = CharSet.getInstance("be-f^a-z");        assertEquals(set, SerializationUtils.clone(set));     }        //-----------------------------------------------------------------------        public void testStatics() {        CharRange[] array;                array = CharSet.EMPTY.getCharRanges();        assertEquals(0, array.length);                array = CharSet.ASCII_ALPHA.getCharRanges();        assertEquals(2, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'z')));        assertEquals(true, ArrayUtils.contains(array, new CharRange('A', 'Z')));                array = CharSet.ASCII_ALPHA_LOWER.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'z')));                array = CharSet.ASCII_ALPHA_UPPER.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('A', 'Z')));                array = CharSet.ASCII_NUMERIC.getCharRanges();        assertEquals(1, array.length);        assertEquals(true, ArrayUtils.contains(array, new CharRange('0', '9')));    }    }
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.StringUtils} - StartsWith/EndsWith methods * * @version $Id$ */public class StringUtilsStartsEndsWithTest extends TestCase {    private static final String foo    = "foo";    private static final String bar    = "bar";    private static final String foobar = "foobar";    private static final String FOO    = "FOO";    private static final String BAR    = "BAR";    private static final String FOOBAR = "FOOBAR";    public StringUtilsStartsEndsWithTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(StringUtilsStartsEndsWithTest.class);        suite.setName("StringUtilsStartsEndsWith Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    /**     * Test StringUtils.startsWith()     */    public void testStartsWith() {        assertTrue("startsWith(null, null)", StringUtils.startsWith(null, (String)null));        assertFalse("startsWith(FOOBAR, null)", StringUtils.startsWith(FOOBAR, (String)null));        assertFalse("startsWith(null, FOO)",    StringUtils.startsWith(null, FOO));        assertTrue("startsWith(FOOBAR, \"\")",  StringUtils.startsWith(FOOBAR, ""));        assertTrue("startsWith(foobar, foo)",  StringUtils.startsWith(foobar, foo));        assertTrue("startsWith(FOOBAR, FOO)",  StringUtils.startsWith(FOOBAR, FOO));        assertFalse("startsWith(foobar, FOO)", StringUtils.startsWith(foobar, FOO));        assertFalse("startsWith(FOOBAR, foo)", StringUtils.startsWith(FOOBAR, foo));        assertFalse("startsWith(foo, foobar)", StringUtils.startsWith(foo, foobar));        assertFalse("startsWith(foo, foobar)", StringUtils.startsWith(bar, foobar));        assertFalse("startsWith(foobar, bar)", StringUtils.startsWith(foobar, bar));        assertFalse("startsWith(FOOBAR, BAR)", StringUtils.startsWith(FOOBAR, BAR));        assertFalse("startsWith(foobar, BAR)", StringUtils.startsWith(foobar, BAR));        assertFalse("startsWith(FOOBAR, bar)", StringUtils.startsWith(FOOBAR, bar));    }    /**     * Test StringUtils.testStartsWithIgnoreCase()     */    public void testStartsWithIgnoreCase() {        assertTrue("startsWithIgnoreCase(null, null)",    StringUtils.startsWithIgnoreCase(null, (String)null));        assertFalse("startsWithIgnoreCase(FOOBAR, null)", StringUtils.startsWithIgnoreCase(FOOBAR, (String)null));        assertFalse("startsWithIgnoreCase(null, FOO)",    StringUtils.startsWithIgnoreCase(null, FOO));        assertTrue("startsWithIgnoreCase(FOOBAR, \"\")",  StringUtils.startsWithIgnoreCase(FOOBAR, ""));        assertTrue("startsWithIgnoreCase(foobar, foo)", StringUtils.startsWithIgnoreCase(foobar, foo));        assertTrue("startsWithIgnoreCase(FOOBAR, FOO)", StringUtils.startsWithIgnoreCase(FOOBAR, FOO));        assertTrue("startsWithIgnoreCase(foobar, FOO)", StringUtils.startsWithIgnoreCase(foobar, FOO));        assertTrue("startsWithIgnoreCase(FOOBAR, foo)", StringUtils.startsWithIgnoreCase(FOOBAR, foo));        assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(foo, foobar));        assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(bar, foobar));        assertFalse("startsWithIgnoreCase(foobar, bar)", StringUtils.startsWithIgnoreCase(foobar, bar));        assertFalse("startsWithIgnoreCase(FOOBAR, BAR)", StringUtils.startsWithIgnoreCase(FOOBAR, BAR));        assertFalse("startsWithIgnoreCase(foobar, BAR)", StringUtils.startsWithIgnoreCase(foobar, BAR));        assertFalse("startsWithIgnoreCase(FOOBAR, bar)", StringUtils.startsWithIgnoreCase(FOOBAR, bar));    }    /**     * Test StringUtils.endsWith()     */    public void testEndsWith() {        assertTrue("endsWith(null, null)",    StringUtils.endsWith(null, (String)null));        assertFalse("endsWith(FOOBAR, null)", StringUtils.endsWith(FOOBAR, (String)null));        assertFalse("endsWith(null, FOO)",    StringUtils.endsWith(null, FOO));        assertTrue("endsWith(FOOBAR, \"\")",  StringUtils.endsWith(FOOBAR, ""));        assertFalse("endsWith(foobar, foo)", StringUtils.endsWith(foobar, foo));        assertFalse("endsWith(FOOBAR, FOO)", StringUtils.endsWith(FOOBAR, FOO));        assertFalse("endsWith(foobar, FOO)", StringUtils.endsWith(foobar, FOO));        assertFalse("endsWith(FOOBAR, foo)", StringUtils.endsWith(FOOBAR, foo));        assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(foo, foobar));        assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(bar, foobar));        assertTrue("endsWith(foobar, bar)",  StringUtils.endsWith(foobar, bar));        assertTrue("endsWith(FOOBAR, BAR)",  StringUtils.endsWith(FOOBAR, BAR));        assertFalse("endsWith(foobar, BAR)", StringUtils.endsWith(foobar, BAR));        assertFalse("endsWith(FOOBAR, bar)", StringUtils.endsWith(FOOBAR, bar));    }    /**     * Test StringUtils.endsWithIgnoreCase()     */    public void testEndsWithIgnoreCase() {        assertTrue("endsWithIgnoreCase(null, null)",    StringUtils.endsWithIgnoreCase(null, (String)null));        assertFalse("endsWithIgnoreCase(FOOBAR, null)", StringUtils.endsWithIgnoreCase(FOOBAR, (String)null));        assertFalse("endsWithIgnoreCase(null, FOO)",    StringUtils.endsWithIgnoreCase(null, FOO));        assertTrue("endsWithIgnoreCase(FOOBAR, \"\")",  StringUtils.endsWithIgnoreCase(FOOBAR, ""));        assertFalse("endsWithIgnoreCase(foobar, foo)", StringUtils.endsWithIgnoreCase(foobar, foo));        assertFalse("endsWithIgnoreCase(FOOBAR, FOO)", StringUtils.endsWithIgnoreCase(FOOBAR, FOO));        assertFalse("endsWithIgnoreCase(foobar, FOO)", StringUtils.endsWithIgnoreCase(foobar, FOO));        assertFalse("endsWithIgnoreCase(FOOBAR, foo)", StringUtils.endsWithIgnoreCase(FOOBAR, foo));        assertFalse("endsWithIgnoreCase(foo, foobar)", StringUtils.endsWithIgnoreCase(foo, foobar));        assertFalse("endsWithIgnoreCase(foo, foobar)", StringUtils.endsWithIgnoreCase(bar, foobar));        assertTrue("endsWithIgnoreCase(foobar, bar)", StringUtils.endsWithIgnoreCase(foobar, bar));        assertTrue("endsWithIgnoreCase(FOOBAR, BAR)", StringUtils.endsWithIgnoreCase(FOOBAR, BAR));        assertTrue("endsWithIgnoreCase(foobar, BAR)", StringUtils.endsWithIgnoreCase(foobar, BAR));        assertTrue("endsWithIgnoreCase(FOOBAR, bar)", StringUtils.endsWithIgnoreCase(FOOBAR, bar));        // javadoc        assertTrue(StringUtils.endsWithIgnoreCase("abcdef", "def"));        assertTrue(StringUtils.endsWithIgnoreCase("ABCDEF", "def"));        assertFalse(StringUtils.endsWithIgnoreCase("ABCDEF", "cde"));    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.StringUtils} - Substring methods * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Phil Steitz * @version $Id$ */public class StringUtilsEqualsIndexOfTest extends TestCase {    private static final String FOO = "foo";    private static final String BAR = "bar";    private static final String FOOBAR = "foobar";    private static final String[] FOOBAR_SUB_ARRAY = new String[] {"ob", "ba"};    public StringUtilsEqualsIndexOfTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(StringUtilsEqualsIndexOfTest.class);        suite.setName("StringUtilsEqualsIndexOf Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testEquals() {        assertEquals(true, StringUtils.equals(null, null));        assertEquals(true, StringUtils.equals(FOO, FOO));        assertEquals(true, StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));        assertEquals(false, StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));        assertEquals(false, StringUtils.equals(FOO, BAR));        assertEquals(false, StringUtils.equals(FOO, null));        assertEquals(false, StringUtils.equals(null, FOO));    }    public void testEqualsIgnoreCase() {        assertEquals(true, StringUtils.equalsIgnoreCase(null, null));        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, FOO));        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' })));        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' })));        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, BAR));        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, null));        assertEquals(false, StringUtils.equalsIgnoreCase(null, FOO));    }    //-----------------------------------------------------------------------    public void testIndexOf_char() {        assertEquals(-1, StringUtils.indexOf(null, ' '));        assertEquals(-1, StringUtils.indexOf("", ' '));        assertEquals(0, StringUtils.indexOf("aabaabaa", 'a'));        assertEquals(2, StringUtils.indexOf("aabaabaa", 'b'));    }    public void testIndexOf_charInt() {        assertEquals(-1, StringUtils.indexOf(null, ' ', 0));        assertEquals(-1, StringUtils.indexOf(null, ' ', -1));        assertEquals(-1, StringUtils.indexOf("", ' ', 0));        assertEquals(-1, StringUtils.indexOf("", ' ', -1));        assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0));        assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0));        assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3));        assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9));        assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1));    }    public void testIndexOf_String() {        assertEquals(-1, StringUtils.indexOf(null, null));        assertEquals(-1, StringUtils.indexOf("", null));        assertEquals(0, StringUtils.indexOf("", ""));        assertEquals(0, StringUtils.indexOf("aabaabaa", "a"));        assertEquals(2, StringUtils.indexOf("aabaabaa", "b"));        assertEquals(1, StringUtils.indexOf("aabaabaa", "ab"));        assertEquals(0, StringUtils.indexOf("aabaabaa", ""));    }    public void testOrdinalIndexOf() {        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE));                assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1));        assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1));        assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1));        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0));        assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0));        assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0));        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1));        assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1));        assertEquals(0, StringUtils.ordinalIndexOf("", "", 1));        assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1));        assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1));        assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1));        assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1));        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2));        assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2));        assertEquals(0, StringUtils.ordinalIndexOf("", "", 2));        assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2));        assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2));        assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2));        assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2));                assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE));        assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE));        assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE));        assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE));                assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0));        assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1));        assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2));        assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3));        assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4));        assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5));        assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6));        assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7));        assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8));        assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9));        assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10));    }    public void testIndexOf_StringInt() {        assertEquals(-1, StringUtils.indexOf(null, null, 0));        assertEquals(-1, StringUtils.indexOf(null, null, -1));        assertEquals(-1, StringUtils.indexOf(null, "", 0));        assertEquals(-1, StringUtils.indexOf(null, "", -1));        assertEquals(-1, StringUtils.indexOf("", null, 0));        assertEquals(-1, StringUtils.indexOf("", null, -1));        assertEquals(0, StringUtils.indexOf("", "", 0));        assertEquals(0, StringUtils.indexOf("", "", -1));        assertEquals(0, StringUtils.indexOf("", "", 9));        assertEquals(0, StringUtils.indexOf("abc", "", 0));        assertEquals(0, StringUtils.indexOf("abc", "", -1));        assertEquals(3, StringUtils.indexOf("abc", "", 9));        assertEquals(3, StringUtils.indexOf("abc", "", 3));        assertEquals(0, StringUtils.indexOf("aabaabaa", "a", 0));        assertEquals(2, StringUtils.indexOf("aabaabaa", "b", 0));        assertEquals(1, StringUtils.indexOf("aabaabaa", "ab", 0));        assertEquals(5, StringUtils.indexOf("aabaabaa", "b", 3));        assertEquals(-1, StringUtils.indexOf("aabaabaa", "b", 9));        assertEquals(2, StringUtils.indexOf("aabaabaa", "b", -1));        assertEquals(2,StringUtils.indexOf("aabaabaa", "", 2));     }    //-----------------------------------------------------------------------    public void testLastIndexOf_char() {        assertEquals(-1, StringUtils.lastIndexOf(null, ' '));        assertEquals(-1, StringUtils.lastIndexOf("", ' '));        assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a'));        assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b'));    }    public void testLastIndexOf_charInt() {        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0));        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1));        assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0));        assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1));        assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8));        assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8));        assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3));        assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9));        assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1));        assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0));    }    public void testLastIndexOf_String() {        assertEquals(-1, StringUtils.lastIndexOf(null, null));        assertEquals(-1, StringUtils.lastIndexOf("", null));        assertEquals(-1, StringUtils.lastIndexOf("", "a"));        assertEquals(0, StringUtils.lastIndexOf("", ""));        assertEquals(8, StringUtils.lastIndexOf("aabaabaa", ""));        assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a"));        assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b"));        assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab"));    }    public void testLastIndexOf_StringInt() {        assertEquals(-1, StringUtils.lastIndexOf(null, null, 0));        assertEquals(-1, StringUtils.lastIndexOf(null, null, -1));        assertEquals(-1, StringUtils.lastIndexOf(null, "", 0));        assertEquals(-1, StringUtils.lastIndexOf(null, "", -1));        assertEquals(-1, StringUtils.lastIndexOf("", null, 0));        assertEquals(-1, StringUtils.lastIndexOf("", null, -1));        assertEquals(0, StringUtils.lastIndexOf("", "", 0));        assertEquals(-1, StringUtils.lastIndexOf("", "", -1));        assertEquals(0, StringUtils.lastIndexOf("", "", 9));        assertEquals(0, StringUtils.lastIndexOf("abc", "", 0));        assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1));        assertEquals(3, StringUtils.lastIndexOf("abc", "", 9));        assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8));        assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8));        assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8));        assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3));        assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9));        assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1));        assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0));        assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0));    }    //-----------------------------------------------------------------------    public void testContainsChar() {        assertEquals(false, StringUtils.contains(null, ' '));        assertEquals(false, StringUtils.contains("", ' '));        assertEquals(false, StringUtils.contains("",null));        assertEquals(false, StringUtils.contains(null,null));        assertEquals(true, StringUtils.contains("abc", 'a'));        assertEquals(true, StringUtils.contains("abc", 'b'));        assertEquals(true, StringUtils.contains("abc", 'c'));        assertEquals(false, StringUtils.contains("abc", 'z'));    }    public void testContainsString() {        assertEquals(false, StringUtils.contains(null, null));        assertEquals(false, StringUtils.contains(null, ""));        assertEquals(false, StringUtils.contains(null, "a"));        assertEquals(false, StringUtils.contains("", null));        assertEquals(true, StringUtils.contains("", ""));        assertEquals(false, StringUtils.contains("", "a"));        assertEquals(true, StringUtils.contains("abc", "a"));        assertEquals(true, StringUtils.contains("abc", "b"));        assertEquals(true, StringUtils.contains("abc", "c"));        assertEquals(true, StringUtils.contains("abc", "abc"));        assertEquals(false, StringUtils.contains("abc", "z"));    }    public void testContainsIgnoreCase_StringString() {        assertFalse(StringUtils.containsIgnoreCase(null, null));                // Null tests        assertFalse(StringUtils.containsIgnoreCase(null, ""));        assertFalse(StringUtils.containsIgnoreCase(null, "a"));        assertFalse(StringUtils.containsIgnoreCase(null, "abc"));                assertFalse(StringUtils.containsIgnoreCase("", null));        assertFalse(StringUtils.containsIgnoreCase("a", null));        assertFalse(StringUtils.containsIgnoreCase("abc", null));                // Match len = 0        assertTrue(StringUtils.containsIgnoreCase("", ""));        assertTrue(StringUtils.containsIgnoreCase("a", ""));        assertTrue(StringUtils.containsIgnoreCase("abc", ""));        // Match len = 1        assertFalse(StringUtils.containsIgnoreCase("", "a"));        assertTrue(StringUtils.containsIgnoreCase("a", "a"));        assertTrue(StringUtils.containsIgnoreCase("abc", "a"));        assertFalse(StringUtils.containsIgnoreCase("", "A"));        assertTrue(StringUtils.containsIgnoreCase("a", "A"));        assertTrue(StringUtils.containsIgnoreCase("abc", "A"));                // Match len > 1        assertFalse(StringUtils.containsIgnoreCase("", "abc"));        assertFalse(StringUtils.containsIgnoreCase("a", "abc"));        assertTrue(StringUtils.containsIgnoreCase("xabcz", "abc"));        assertFalse(StringUtils.containsIgnoreCase("", "ABC"));        assertFalse(StringUtils.containsIgnoreCase("a", "ABC"));        assertTrue(StringUtils.containsIgnoreCase("xabcz", "ABC"));    }    //-----------------------------------------------------------------------    public void testIndexOfAny_StringStringarray() {        assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null));        assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null));        assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0]));        assertEquals(-1, StringUtils.indexOfAny(null, new String[0]));        assertEquals(-1, StringUtils.indexOfAny("", new String[0]));        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {"llll"}));        assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {""}));        assertEquals(0, StringUtils.indexOfAny("", new String[] {""}));        assertEquals(-1, StringUtils.indexOfAny("", new String[] {"a"}));        assertEquals(-1, StringUtils.indexOfAny("", new String[] {null}));        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null}));        assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null}));    }    public void testLastIndexOfAny_StringStringarray() {        assertEquals(-1, StringUtils.lastIndexOfAny(null, null));        assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY));        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, null));        assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0]));        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0]));        assertEquals(-1, StringUtils.lastIndexOfAny("", new String[0]));        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {"llll"}));        assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {""}));        assertEquals(0, StringUtils.lastIndexOfAny("", new String[] {""}));        assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {"a"}));        assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {null}));        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null}));        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null}));    }    //-----------------------------------------------------------------------    public void testIndexOfAny_StringChararray() {        assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null));        assertEquals(-1, StringUtils.indexOfAny(null, new char[0]));        assertEquals(-1, StringUtils.indexOfAny(null, new char[] {'a','b'}));                assertEquals(-1, StringUtils.indexOfAny("", (char[]) null));        assertEquals(-1, StringUtils.indexOfAny("", new char[0]));        assertEquals(-1, StringUtils.indexOfAny("", new char[] {'a','b'}));                assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (char[]) null));         assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", new char[0]));         assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", new char[] {'z','a'}));         assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", new char[] {'b','y'}));        assertEquals(-1, StringUtils.indexOfAny("ab", new char[] {'z'}));    }    public void testIndexOfAny_StringString() {        assertEquals(-1, StringUtils.indexOfAny(null, (String) null));        assertEquals(-1, StringUtils.indexOfAny(null, ""));        assertEquals(-1, StringUtils.indexOfAny(null, "ab"));                assertEquals(-1, StringUtils.indexOfAny("", (String) null));        assertEquals(-1, StringUtils.indexOfAny("", ""));        assertEquals(-1, StringUtils.indexOfAny("", "ab"));                assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (String) null));         assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", ""));         assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", "za"));         assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", "by"));        assertEquals(-1, StringUtils.indexOfAny("ab", "z"));    }    //-----------------------------------------------------------------------    public void testContainsAny_StringChararray() {        assertFalse(StringUtils.containsAny(null, (char[]) null));        assertFalse(StringUtils.containsAny(null, new char[0]));        assertFalse(StringUtils.containsAny(null, new char[] {'a','b'}));                assertFalse(StringUtils.containsAny("", (char[]) null));        assertFalse(StringUtils.containsAny("", new char[0]));        assertFalse(StringUtils.containsAny("", new char[] {'a','b'}));                assertFalse(StringUtils.containsAny("zzabyycdxx", (char[]) null));         assertFalse(StringUtils.containsAny("zzabyycdxx", new char[0]));         assertTrue(StringUtils.containsAny("zzabyycdxx", new char[] {'z','a'}));         assertTrue(StringUtils.containsAny("zzabyycdxx", new char[] {'b','y'}));        assertFalse(StringUtils.containsAny("ab", new char[] {'z'}));    }    public void testContainsAny_StringString() {        assertFalse(StringUtils.containsAny(null, (String) null));        assertFalse(StringUtils.containsAny(null, ""));        assertFalse(StringUtils.containsAny(null, "ab"));                assertFalse(StringUtils.containsAny("", (String) null));        assertFalse(StringUtils.containsAny("", ""));        assertFalse(StringUtils.containsAny("", "ab"));                assertFalse(StringUtils.containsAny("zzabyycdxx", (String) null));         assertFalse(StringUtils.containsAny("zzabyycdxx", ""));         assertTrue(StringUtils.containsAny("zzabyycdxx", "za"));         assertTrue(StringUtils.containsAny("zzabyycdxx", "by"));        assertFalse(StringUtils.containsAny("ab", "z"));    }    //-----------------------------------------------------------------------    public void testIndexOfAnyBut_StringChararray() {        assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0]));        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[] {'a','b'}));                assertEquals(-1, StringUtils.indexOfAnyBut("", (char[]) null));        assertEquals(-1, StringUtils.indexOfAnyBut("", new char[0]));        assertEquals(-1, StringUtils.indexOfAnyBut("", new char[] {'a','b'}));                assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (char[]) null));        assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", new char[0]));        assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", new char[] {'z','a'}));         assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", new char[] {'b','y'}));         assertEquals(0, StringUtils.indexOfAnyBut("ab", new char[] {'z'}));    }    public void testIndexOfAnyBut_StringString() {        assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null));        assertEquals(-1, StringUtils.indexOfAnyBut(null, ""));        assertEquals(-1, StringUtils.indexOfAnyBut(null, "ab"));                assertEquals(-1, StringUtils.indexOfAnyBut("", (String) null));        assertEquals(-1, StringUtils.indexOfAnyBut("", ""));        assertEquals(-1, StringUtils.indexOfAnyBut("", "ab"));                assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (String) null));         assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", ""));         assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", "za"));         assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", "by"));        assertEquals(0, StringUtils.indexOfAnyBut("ab", "z"));    }        //-----------------------------------------------------------------------    public void testContainsOnly_String() {        String str1 = "a";        String str2 = "b";        String str3 = "ab";        String chars1= "b";        String chars2= "a";        String chars3= "ab";        assertEquals(false, StringUtils.containsOnly(null, (String) null));        assertEquals(false, StringUtils.containsOnly("", (String) null));        assertEquals(false, StringUtils.containsOnly(null, ""));        assertEquals(false, StringUtils.containsOnly(str1, ""));        assertEquals(true, StringUtils.containsOnly("", ""));        assertEquals(true, StringUtils.containsOnly("", chars1));        assertEquals(false, StringUtils.containsOnly(str1, chars1));        assertEquals(true, StringUtils.containsOnly(str1, chars2));        assertEquals(true, StringUtils.containsOnly(str1, chars3));        assertEquals(true, StringUtils.containsOnly(str2, chars1));        assertEquals(false, StringUtils.containsOnly(str2, chars2));        assertEquals(true, StringUtils.containsOnly(str2, chars3));        assertEquals(false, StringUtils.containsOnly(str3, chars1));        assertEquals(false, StringUtils.containsOnly(str3, chars2));        assertEquals(true, StringUtils.containsOnly(str3, chars3));    }    public void testContainsOnly_Chararray() {        String str1 = "a";        String str2 = "b";        String str3 = "ab";        char[] chars1= {'b'};        char[] chars2= {'a'};        char[] chars3= {'a', 'b'};        char[] emptyChars = new char[0];        assertEquals(false, StringUtils.containsOnly(null, (char[]) null));        assertEquals(false, StringUtils.containsOnly("", (char[]) null));        assertEquals(false, StringUtils.containsOnly(null, emptyChars));        assertEquals(false, StringUtils.containsOnly(str1, emptyChars));        assertEquals(true, StringUtils.containsOnly("", emptyChars));        assertEquals(true, StringUtils.containsOnly("", chars1));        assertEquals(false, StringUtils.containsOnly(str1, chars1));        assertEquals(true, StringUtils.containsOnly(str1, chars2));        assertEquals(true, StringUtils.containsOnly(str1, chars3));        assertEquals(true, StringUtils.containsOnly(str2, chars1));        assertEquals(false, StringUtils.containsOnly(str2, chars2));        assertEquals(true, StringUtils.containsOnly(str2, chars3));        assertEquals(false, StringUtils.containsOnly(str3, chars1));        assertEquals(false, StringUtils.containsOnly(str3, chars2));        assertEquals(true, StringUtils.containsOnly(str3, chars3));    }    public void testContainsNone_String() {        String str1 = "a";        String str2 = "b";        String str3 = "ab.";        String chars1= "b";        String chars2= ".";        String chars3= "cd";        assertEquals(true, StringUtils.containsNone(null, (String) null));        assertEquals(true, StringUtils.containsNone("", (String) null));        assertEquals(true, StringUtils.containsNone(null, ""));        assertEquals(true, StringUtils.containsNone(str1, ""));        assertEquals(true, StringUtils.containsNone("", ""));        assertEquals(true, StringUtils.containsNone("", chars1));        assertEquals(true, StringUtils.containsNone(str1, chars1));        assertEquals(true, StringUtils.containsNone(str1, chars2));        assertEquals(true, StringUtils.containsNone(str1, chars3));        assertEquals(false, StringUtils.containsNone(str2, chars1));        assertEquals(true, StringUtils.containsNone(str2, chars2));        assertEquals(true, StringUtils.containsNone(str2, chars3));        assertEquals(false, StringUtils.containsNone(str3, chars1));        assertEquals(false, StringUtils.containsNone(str3, chars2));        assertEquals(true, StringUtils.containsNone(str3, chars3));    }    public void testContainsNone_Chararray() {        String str1 = "a";        String str2 = "b";        String str3 = "ab.";        char[] chars1= {'b'};        char[] chars2= {'.'};        char[] chars3= {'c', 'd'};        char[] emptyChars = new char[0];        assertEquals(true, StringUtils.containsNone(null, (char[]) null));        assertEquals(true, StringUtils.containsNone("", (char[]) null));        assertEquals(true, StringUtils.containsNone(null, emptyChars));        assertEquals(true, StringUtils.containsNone(str1, emptyChars));        assertEquals(true, StringUtils.containsNone("", emptyChars));        assertEquals(true, StringUtils.containsNone("", chars1));        assertEquals(true, StringUtils.containsNone(str1, chars1));        assertEquals(true, StringUtils.containsNone(str1, chars2));        assertEquals(true, StringUtils.containsNone(str1, chars3));        assertEquals(false, StringUtils.containsNone(str2, chars1));        assertEquals(true, StringUtils.containsNone(str2, chars2));        assertEquals(true, StringUtils.containsNone(str2, chars3));        assertEquals(false, StringUtils.containsNone(str3, chars1));        assertEquals(false, StringUtils.containsNone(str3, chars2));        assertEquals(true, StringUtils.containsNone(str3, chars3));    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.io.IOException;import java.io.StringWriter;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests for {@link StringEscapeUtils}. * * @author <a href="mailto:alex@purpletech.com">Alexander Day Chaffee</a> * @version $Id$ */public class StringEscapeUtilsTest extends TestCase {    private final static String FOO = "foo";    public StringEscapeUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(StringEscapeUtilsTest.class);        suite.setName("StringEscapeUtilsTest Tests");        return suite;    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new StringEscapeUtils());        Constructor[] cons = StringEscapeUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(StringEscapeUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(StringEscapeUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testEscapeJava() throws IOException {        assertEquals(null, StringEscapeUtils.escapeJava(null));        try {            StringEscapeUtils.escapeJava(null, null);            fail();        } catch (IOException ex) {            fail();        } catch (IllegalArgumentException ex) {        }        try {            StringEscapeUtils.escapeJava(null, "");            fail();        } catch (IOException ex) {            fail();        } catch (IllegalArgumentException ex) {        }                assertEscapeJava("empty string", "", "");        assertEscapeJava(FOO, FOO);        assertEscapeJava("tab", "\\t", "\t");        assertEscapeJava("backslash", "\\\\", "\\");        assertEscapeJava("single quote should not be escaped", "'", "'");        assertEscapeJava("\\\\\\b\\t\\r", "\\\b\t\r");        assertEscapeJava("\\u1234", "\u1234");        assertEscapeJava("\\u0234", "\u0234");        assertEscapeJava("\\u00EF", "\u00ef");        assertEscapeJava("\\u0001", "\u0001");        assertEscapeJava("Should use capitalized unicode hex", "\\uABCD", "\uabcd");        assertEscapeJava("He didn't say, \\\"stop!\\\"",                "He didn't say, \"stop!\"");        assertEscapeJava("non-breaking space", "This space is non-breaking:" + "\\u00A0",                "This space is non-breaking:\u00a0");        assertEscapeJava("\\uABCD\\u1234\\u012C",                "\uABCD\u1234\u012C");    }    /**     * https://issues.apache.org/jira/browse/LANG-421     */    public void testEscapeJavaWithSlash() {        final String input = "String with a slash (/) in it";        final String expected = input;        final String actual = StringEscapeUtils.escapeJava(input);        /**         * In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters, which are not a valid character to escape         * in a Java string.         */        assertEquals(expected, actual);    }        private void assertEscapeJava(String escaped, String original) throws IOException {        assertEscapeJava(null, escaped, original);    }    private void assertEscapeJava(String message, String expected, String original) throws IOException {        String converted = StringEscapeUtils.escapeJava(original);        message = "escapeJava(String) failed" + (message == null ? "" : (": " + message));        assertEquals(message, expected, converted);        StringWriter writer = new StringWriter();        StringEscapeUtils.escapeJava(writer, original);        assertEquals(expected, writer.toString());    }    public void testUnescapeJava() throws IOException {        assertEquals(null, StringEscapeUtils.unescapeJava(null));        try {            StringEscapeUtils.unescapeJava(null, null);            fail();        } catch (IOException ex) {            fail();        } catch (IllegalArgumentException ex) {        }        try {            StringEscapeUtils.unescapeJava(null, "");            fail();        } catch (IOException ex) {            fail();        } catch (IllegalArgumentException ex) {        }        try {            StringEscapeUtils.unescapeJava("\\u02-3");            fail();        } catch (RuntimeException ex) {        }                assertUnescapeJava("", "");        assertUnescapeJava("test", "test");        assertUnescapeJava("\ntest\b", "\\ntest\\b");        assertUnescapeJava("\u123425foo\ntest\b", "\\u123425foo\\ntest\\b");        assertUnescapeJava("'\foo\teste\r", "\\'\\foo\\teste\\r");        assertUnescapeJava("\\", "\\");        //foo        assertUnescapeJava("lowercase unicode", "\uABCDx", "\\uabcdx");        assertUnescapeJava("uppercase unicode", "\uABCDx", "\\uABCDx");        assertUnescapeJava("unicode as final character", "\uABCD", "\\uabcd");    }    private void assertUnescapeJava(String unescaped, String original) throws IOException {        assertUnescapeJava(null, unescaped, original);    }    private void assertUnescapeJava(String message, String unescaped, String original) throws IOException {        String expected = unescaped;        String actual = StringEscapeUtils.unescapeJava(original);        assertEquals("unescape(String) failed" +                (message == null ? "" : (": " + message)) +                ": expected '" + StringEscapeUtils.escapeJava(expected) +                // we escape this so we can see it in the error message                "' actual '" + StringEscapeUtils.escapeJava(actual) + "'",                expected, actual);        StringWriter writer = new StringWriter();        StringEscapeUtils.unescapeJava(writer, original);        assertEquals(unescaped, writer.toString());    }    public void testEscapeJavaScript() {        assertEquals(null, StringEscapeUtils.escapeJavaScript(null));        try {            StringEscapeUtils.escapeJavaScript(null, null);            fail();        } catch (IOException ex) {            fail();        } catch (IllegalArgumentException ex) {        }        try {            StringEscapeUtils.escapeJavaScript(null, "");            fail();        } catch (IOException ex) {            fail();        } catch (IllegalArgumentException ex) {        }                assertEquals("He didn\\'t say, \\\"stop!\\\"", StringEscapeUtils.escapeJavaScript("He didn't say, \"stop!\""));        assertEquals("document.getElementById(\\\"test\\\").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';",                 StringEscapeUtils.escapeJavaScript("document.getElementById(\"test\").value = '<script>alert('aaa');</script>';"));    }    // HTML and XML    //--------------------------------------------------------------    String[][] htmlEscapes = {        {"no escaping", "plain text", "plain text"},        {"no escaping", "plain text", "plain text"},        {"empty string", "", ""},        {"null", null, null},        {"ampersand", "bread &amp; butter", "bread & butter"},        {"quotes", "&quot;bread&quot; &amp; butter", "\"bread\" & butter"},        {"final character only", "greater than &gt;", "greater than >"},        {"first character only", "&lt; less than", "< less than"},        {"apostrophe", "Huntington's chorea", "Huntington's chorea"},        {"languages", "English,Fran&ccedil;ais,&#26085;&#26412;&#35486; (nihongo)", "English,Fran\u00E7ais,\u65E5\u672C\u8A9E (nihongo)"},        {"8-bit ascii doesn't number-escape", "~\u007F", "\u007E\u007F"},        {"8-bit ascii does number-escape", "&#128;&#159;", "\u0080\u009F"},    };    public void testEscapeHtml() {        for (int i = 0; i < htmlEscapes.length; ++i) {            String message = htmlEscapes[i][0];            String expected = htmlEscapes[i][1];            String original = htmlEscapes[i][2];            assertEquals(message, expected, StringEscapeUtils.escapeHtml(original));            StringWriter sw = new StringWriter();            try {            StringEscapeUtils.escapeHtml(sw, original);            } catch (IOException e) {            }            String actual = original == null ? null : sw.toString();            assertEquals(message, expected, actual);        }    }    public void testUnescapeHtml() {        for (int i = 0; i < htmlEscapes.length; ++i) {            String message = htmlEscapes[i][0];            String expected = htmlEscapes[i][2];            String original = htmlEscapes[i][1];            assertEquals(message, expected, StringEscapeUtils.unescapeHtml(original));                        StringWriter sw = new StringWriter();            try {            StringEscapeUtils.unescapeHtml(sw, original);            } catch (IOException e) {            }            String actual = original == null ? null : sw.toString();            assertEquals(message, expected, actual);        }        // \u00E7 is a cedilla (c with wiggle under)        // note that the test string must be 7-bit-clean (unicode escaped) or else it will compile incorrectly        // on some locales                assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml("Fran\u00E7ais"));                assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml("Hello&;World"));        assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml("Hello&#;World"));        assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml("Hello&# ;World"));        assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml("Hello&##;World"));    }    public void testUnescapeHexCharsHtml() {        // Simple easy to grok test         assertEquals("hex number unescape", "\u0080\u009F", StringEscapeUtils.unescapeHtml("&#x80;&#x9F;"));        assertEquals("hex number unescape", "\u0080\u009F", StringEscapeUtils.unescapeHtml("&#X80;&#X9F;"));        // Test all Character values:        for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {            Character c1 = new Character(i);            Character c2 = new Character((char)(i+1));            String expected = c1.toString() + c2.toString();            String escapedC1 = "&#x" + Integer.toHexString((c1.charValue())) + ";";            String escapedC2 = "&#x" + Integer.toHexString((c2.charValue())) + ";";            assertEquals("hex number unescape index " + (int)i, expected, StringEscapeUtils.unescapeHtml(escapedC1 + escapedC2));        }    }    public void testUnescapeUnknownEntity() throws Exception    {        assertEquals("&zzzz;", StringEscapeUtils.unescapeHtml("&zzzz;"));    }    public void testEscapeHtmlVersions() throws Exception    {        assertEquals("&Beta;", StringEscapeUtils.escapeHtml("\u0392"));        assertEquals("\u0392", StringEscapeUtils.unescapeHtml("&Beta;"));        //todo: refine API for escaping/unescaping specific HTML versions    }    public void testEscapeXml() throws Exception {        assertEquals("&lt;abc&gt;", StringEscapeUtils.escapeXml("<abc>"));        assertEquals("<abc>", StringEscapeUtils.unescapeXml("&lt;abc&gt;"));        assertEquals("XML should use numbers, not names for HTML entities",                "&#161;", StringEscapeUtils.escapeXml("\u00A1"));        assertEquals("XML should use numbers, not names for HTML entities",                "\u00A0", StringEscapeUtils.unescapeXml("&#160;"));        assertEquals("ain't", StringEscapeUtils.unescapeXml("ain&apos;t"));        assertEquals("ain&apos;t", StringEscapeUtils.escapeXml("ain't"));        assertEquals("", StringEscapeUtils.escapeXml(""));        assertEquals(null, StringEscapeUtils.escapeXml(null));        assertEquals(null, StringEscapeUtils.unescapeXml(null));        StringWriter sw = new StringWriter();        try {            StringEscapeUtils.escapeXml(sw, "<abc>");        } catch (IOException e) {        }        assertEquals("XML was escaped incorrectly", "&lt;abc&gt;", sw.toString() );        sw = new StringWriter();        try {            StringEscapeUtils.unescapeXml(sw, "&lt;abc&gt;");        } catch (IOException e) {        }        assertEquals("XML was unescaped incorrectly", "<abc>", sw.toString() );    }    // SQL    // see http://www.jguru.com/faq/view.jsp?EID=8881    //--------------------    public void testEscapeSql() throws Exception    {        assertEquals("don''t stop", StringEscapeUtils.escapeSql("don't stop"));        assertEquals("", StringEscapeUtils.escapeSql(""));        assertEquals(null, StringEscapeUtils.escapeSql(null));    }    // Tests issue #38569    // http://issues.apache.org/bugzilla/show_bug.cgi?id=38569    public void testStandaloneAmphersand() {        assertEquals("<P&O>", StringEscapeUtils.unescapeHtml("&lt;P&O&gt;"));        assertEquals("test & <", StringEscapeUtils.unescapeHtml("test & &lt;"));        assertEquals("<P&O>", StringEscapeUtils.unescapeXml("&lt;P&O&gt;"));        assertEquals("test & <", StringEscapeUtils.unescapeXml("test & &lt;"));    }    public void testLang313() {        assertEquals("& &", StringEscapeUtils.unescapeHtml("& &amp;"));    }    public void testEscapeCsvString() throws Exception    {        assertEquals("foo.bar",          StringEscapeUtils.escapeCsv("foo.bar"));        assertEquals("\"foo,bar\"",      StringEscapeUtils.escapeCsv("foo,bar"));        assertEquals("\"foo\nbar\"",     StringEscapeUtils.escapeCsv("foo\nbar"));        assertEquals("\"foo\rbar\"",     StringEscapeUtils.escapeCsv("foo\rbar"));        assertEquals("\"foo\"\"bar\"",   StringEscapeUtils.escapeCsv("foo\"bar"));        assertEquals("",   StringEscapeUtils.escapeCsv(""));        assertEquals(null, StringEscapeUtils.escapeCsv(null));    }    public void testEscapeCsvWriter() throws Exception    {        checkCsvEscapeWriter("foo.bar",        "foo.bar");        checkCsvEscapeWriter("\"foo,bar\"",    "foo,bar");        checkCsvEscapeWriter("\"foo\nbar\"",   "foo\nbar");        checkCsvEscapeWriter("\"foo\rbar\"",   "foo\rbar");        checkCsvEscapeWriter("\"foo\"\"bar\"", "foo\"bar");        checkCsvEscapeWriter("", null);        checkCsvEscapeWriter("", "");    }    private void checkCsvEscapeWriter(String expected, String value) {        try {            StringWriter writer = new StringWriter();            StringEscapeUtils.escapeCsv(writer, value);            assertEquals(expected, writer.toString());        } catch (IOException e) {            fail("Threw: " + e);        }    }    public void testUnescapeCsvString() throws Exception    {        assertEquals("foo.bar",          StringEscapeUtils.unescapeCsv("foo.bar"));        assertEquals("foo,bar",      StringEscapeUtils.unescapeCsv("\"foo,bar\""));        assertEquals("foo\nbar",     StringEscapeUtils.unescapeCsv("\"foo\nbar\""));        assertEquals("foo\rbar",     StringEscapeUtils.unescapeCsv("\"foo\rbar\""));        assertEquals("foo\"bar",   StringEscapeUtils.unescapeCsv("\"foo\"\"bar\""));        assertEquals("",   StringEscapeUtils.unescapeCsv(""));        assertEquals(null, StringEscapeUtils.unescapeCsv(null));        assertEquals("\"foo.bar\"",          StringEscapeUtils.unescapeCsv("\"foo.bar\""));    }    public void testUnescapeCsvWriter() throws Exception    {        checkCsvUnescapeWriter("foo.bar",        "foo.bar");        checkCsvUnescapeWriter("foo,bar",    "\"foo,bar\"");        checkCsvUnescapeWriter("foo\nbar",   "\"foo\nbar\"");        checkCsvUnescapeWriter("foo\rbar",   "\"foo\rbar\"");        checkCsvUnescapeWriter("foo\"bar", "\"foo\"\"bar\"");        checkCsvUnescapeWriter("", null);        checkCsvUnescapeWriter("", "");        checkCsvUnescapeWriter("\"foo.bar\"",        "\"foo.bar\"");    }    private void checkCsvUnescapeWriter(String expected, String value) {        try {            StringWriter writer = new StringWriter();            StringEscapeUtils.unescapeCsv(writer, value);            assertEquals(expected, writer.toString());        } catch (IOException e) {            fail("Threw: " + e);        }    }    // https://issues.apache.org/jira/browse/LANG-480    public void testEscapeHtmlHighUnicode() throws java.io.UnsupportedEncodingException {        // this is the utf8 representation of the character:        // COUNTING ROD UNIT DIGIT THREE        // in unicode        // codepoint: U+1D362        byte[] data = new byte[] { (byte)0xF0, (byte)0x9D, (byte)0x8D, (byte)0xA2 };        String escaped = StringEscapeUtils.escapeHtml( new String(data, "UTF8") );        String unescaped = StringEscapeUtils.unescapeHtml( escaped );        assertEquals( "High unicode was not escaped correctly", "&#119650;", escaped);    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.Arrays;import java.util.Collection;import java.util.Collections;import java.util.Iterator;import java.util.Locale;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.StringUtils}. * * @author Daniel L. Rall * @author Stephen Colebourne * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author <a href="mailto:fredrik@westermarck.com>Fredrik Westermarck</a> * @author Holger Krauth * @author <a href="hps@intermeta.de">Henning P. Schmiedehausen</a> * @author Phil Steitz * @author Gary D. Gregory * @author Scott Johnson * @author Al Chou * @version $Id$ */public class StringUtilsTest extends TestCase {        static final String WHITESPACE;    static final String NON_WHITESPACE;    static final String TRIMMABLE;    static final String NON_TRIMMABLE;    static {        String ws = "";        String nws = "";        String tr = "";        String ntr = "";        for (int i = 0; i < Character.MAX_VALUE; i++) {            if (Character.isWhitespace((char) i)) {                ws += String.valueOf((char) i);                if (i > 32) {                    ntr += String.valueOf((char) i);                }            } else if (i < 40) {                nws += String.valueOf((char) i);            }        }        for (int i = 0; i <= 32; i++) {            tr += String.valueOf((char) i);        }        WHITESPACE = ws;        NON_WHITESPACE = nws;        TRIMMABLE = tr;        NON_TRIMMABLE = ntr;    }    private static final String[] ARRAY_LIST = { "foo", "bar", "baz" };    private static final String[] EMPTY_ARRAY_LIST = {};    private static final String[] NULL_ARRAY_LIST = {null};    private static final String[] MIXED_ARRAY_LIST = {null, "", "foo"};    private static final Object[] MIXED_TYPE_LIST = {new String("foo"), new Long(2)};    private static final String SEPARATOR = ",";    private static final char   SEPARATOR_CHAR = ';';    private static final String TEXT_LIST = "foo,bar,baz";    private static final String TEXT_LIST_CHAR = "foo;bar;baz";    private static final String TEXT_LIST_NOSEP = "foobarbaz";    private static final String FOO_UNCAP = "foo";    private static final String FOO_CAP = "Foo";    private static final String SENTENCE_UNCAP = "foo bar baz";    private static final String SENTENCE_CAP = "Foo Bar Baz";    public StringUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(StringUtilsTest.class);        suite.setName("StringUtilsTest Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new StringUtils());        Constructor[] cons = StringUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(StringUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(StringUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testCaseFunctions() {        assertEquals(null, StringUtils.upperCase(null));        assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH));        assertEquals(null, StringUtils.lowerCase(null));        assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH));        assertEquals(null, StringUtils.capitalize(null));        assertEquals(null, StringUtils.uncapitalize(null));        assertEquals("capitalize(empty-string) failed",                     "", StringUtils.capitalize("") );        assertEquals("capitalize(single-char-string) failed",                     "X", StringUtils.capitalize("x") );        assertEquals("uncapitalize(String) failed",                     FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) );        assertEquals("uncapitalize(empty-string) failed",                     "", StringUtils.uncapitalize("") );        assertEquals("uncapitalize(single-char-string) failed",                     "x", StringUtils.uncapitalize("X") );                             // reflection type of tests: Sentences.        assertEquals("uncapitalize(capitalize(String)) failed",                     SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) );        assertEquals("capitalize(uncapitalize(String)) failed",                     SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) );        // reflection type of tests: One word.        assertEquals("uncapitalize(capitalize(String)) failed",                     FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) );        assertEquals("capitalize(uncapitalize(String)) failed",                     FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) );        assertEquals("upperCase(String) failed",                     "FOO TEST THING", StringUtils.upperCase("fOo test THING") );        assertEquals("upperCase(empty-string) failed",                     "", StringUtils.upperCase("") );        assertEquals("lowerCase(String) failed",                     "foo test thing", StringUtils.lowerCase("fOo test THING") );        assertEquals("lowerCase(empty-string) failed",                     "", StringUtils.lowerCase("") );        assertEquals("upperCase(String, Locale) failed",                     "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH) );        assertEquals("upperCase(empty-string, Locale) failed",                     "", StringUtils.upperCase("", Locale.ENGLISH) );        assertEquals("lowerCase(String, Locale) failed",                     "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH) );        assertEquals("lowerCase(empty-string, Locale) failed",                     "", StringUtils.lowerCase("", Locale.ENGLISH) );    }    public void testSwapCase_String() {        assertEquals(null, StringUtils.swapCase(null));        assertEquals("", StringUtils.swapCase(""));        assertEquals("  ", StringUtils.swapCase("  "));                assertEquals("i", WordUtils.swapCase("I") );        assertEquals("I", WordUtils.swapCase("i") );        assertEquals("I AM HERE 123", StringUtils.swapCase("i am here 123") );        assertEquals("i aM hERE 123", StringUtils.swapCase("I Am Here 123") );        assertEquals("I AM here 123", StringUtils.swapCase("i am HERE 123") );        assertEquals("i am here 123", StringUtils.swapCase("I AM HERE 123") );                String test = "This String contains a TitleCase character: \u01C8";        String expect = "tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9";        assertEquals(expect, WordUtils.swapCase(test));    }    //-----------------------------------------------------------------------    public void testJoin_Objectarray() {        assertEquals(null, StringUtils.join(null));        assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));        assertEquals("", StringUtils.join(NULL_ARRAY_LIST));        assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"}));        assertEquals("a", StringUtils.join(new String[] {null, "a", ""}));        assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));        assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));    }            public void testJoin_ArrayChar() {        assertEquals(null, StringUtils.join((Object[]) null, ','));        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));        assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));        assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));        assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));        assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));        assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));        assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));        assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));        assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));    }        public void testJoin_ArrayString() {        assertEquals(null, StringUtils.join((Object[]) null, null));        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null));        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, ""));                assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null));                assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null));        assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, ""));        assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR));        assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR));        assertEquals(",,foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR));        assertEquals("foo,2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR));        assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, "/", 0, MIXED_ARRAY_LIST.length-1));        assertEquals("", StringUtils.join(MIXED_ARRAY_LIST, "", 0, MIXED_ARRAY_LIST.length-1));        assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 1));        assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 2));        assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, "/", 1, 2));        assertEquals("", StringUtils.join(MIXED_TYPE_LIST, "/", 2, 1));    }        public void testJoin_IteratorChar() {        assertEquals(null, StringUtils.join((Iterator) null, ','));        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));        assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));        assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));        assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x'));    }        public void testJoin_IteratorString() {        assertEquals(null, StringUtils.join((Iterator) null, null));        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), ""));        assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), "x"));        assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), null));        assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));                assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));        assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), ""));        assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR));                assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));    }    public void testJoin_CollectionChar() {        assertEquals(null, StringUtils.join((Collection) null, ','));        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));        assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));        assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));        assertEquals("foo", StringUtils.join(Collections.singleton("foo"), 'x'));    }    public void testJoin_CollectionString() {        assertEquals(null, StringUtils.join((Collection) null, null));        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), ""));        assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x"));        assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null));        assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null));        assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null));        assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), ""));        assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR));        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));    }    public void testSplit_String() {        assertEquals(null, StringUtils.split(null));        assertEquals(0, StringUtils.split("").length);                String str = "a b  .c";        String[] res = StringUtils.split(str);        assertEquals(3, res.length);        assertEquals("a", res[0]);        assertEquals("b", res[1]);        assertEquals(".c", res[2]);                str = " a ";        res = StringUtils.split(str);        assertEquals(1, res.length);        assertEquals("a", res[0]);                str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c";        res = StringUtils.split(str);        assertEquals(2, res.length);        assertEquals("a", res[0]);        assertEquals("b" + NON_WHITESPACE + "c", res[1]);                           }        public void testSplit_StringChar() {        assertEquals(null, StringUtils.split(null, '.'));        assertEquals(0, StringUtils.split("", '.').length);        String str = "a.b.. c";        String[] res = StringUtils.split(str, '.');        assertEquals(3, res.length);        assertEquals("a", res[0]);        assertEquals("b", res[1]);        assertEquals(" c", res[2]);                    str = ".a.";        res = StringUtils.split(str, '.');        assertEquals(1, res.length);        assertEquals("a", res[0]);                str = "a b c";        res = StringUtils.split(str,' ');        assertEquals(3, res.length);        assertEquals("a", res[0]);        assertEquals("b", res[1]);        assertEquals("c", res[2]);    }        public void testSplit_StringString_StringStringInt() {        assertEquals(null, StringUtils.split(null, "."));        assertEquals(null, StringUtils.split(null, ".", 3));                assertEquals(0, StringUtils.split("", ".").length);        assertEquals(0, StringUtils.split("", ".", 3).length);                innerTestSplit('.', ".", ' ');        innerTestSplit('.', ".", ',');        innerTestSplit('.', ".,", 'x');        for (int i = 0; i < WHITESPACE.length(); i++) {            for (int j = 0; j < NON_WHITESPACE.length(); j++) {                innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));                innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));            }        }                String[] results = null;        String[] expectedResults = {"ab", "de fg"};        results = StringUtils.split("ab   de fg", null, 2);        assertEquals(expectedResults.length, results.length);        for (int i = 0; i < expectedResults.length; i++) {            assertEquals(expectedResults[i], results[i]);        }                String[] expectedResults2 = {"ab", "cd:ef"};        results = StringUtils.split("ab:cd:ef",":", 2);        assertEquals(expectedResults2.length, results.length);        for (int i = 0; i < expectedResults2.length; i++) {            assertEquals(expectedResults2[i], results[i]);        }    }        private void innerTestSplit(char separator, String sepStr, char noMatch) {        String msg = "Failed on separator hex(" + Integer.toHexString(separator) +            "), noMatch hex(" + Integer.toHexString(noMatch) + "), sepStr(" + sepStr + ")";                final String str = "a" + separator + "b" + separator + separator + noMatch + "c";        String[] res;        // (str, sepStr)        res = StringUtils.split(str, sepStr);        assertEquals(msg, 3, res.length);        assertEquals(msg, "a", res[0]);        assertEquals(msg, "b", res[1]);        assertEquals(msg, noMatch + "c", res[2]);                final String str2 = separator + "a" + separator;        res = StringUtils.split(str2, sepStr);        assertEquals(msg, 1, res.length);        assertEquals(msg, "a", res[0]);        res = StringUtils.split(str, sepStr, -1);        assertEquals(msg, 3, res.length);        assertEquals(msg, "a", res[0]);        assertEquals(msg, "b", res[1]);        assertEquals(msg, noMatch + "c", res[2]);                res = StringUtils.split(str, sepStr, 0);        assertEquals(msg, 3, res.length);        assertEquals(msg, "a", res[0]);        assertEquals(msg, "b", res[1]);        assertEquals(msg, noMatch + "c", res[2]);                res = StringUtils.split(str, sepStr, 1);        assertEquals(msg, 1, res.length);        assertEquals(msg, str, res[0]);                res = StringUtils.split(str, sepStr, 2);        assertEquals(msg, 2, res.length);        assertEquals(msg, "a", res[0]);        assertEquals(msg, str.substring(2), res[1]);    }    public void testSplitByWholeString_StringStringBoolean() {        assertEquals( null, StringUtils.splitByWholeSeparator( null, "." ) ) ;        assertEquals( 0, StringUtils.splitByWholeSeparator( "", "." ).length ) ;        String stringToSplitOnNulls = "ab   de fg" ;        String[] splitOnNullExpectedResults = { "ab", "de", "fg" } ;        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null ) ;        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;        }        String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiously" ;        String[] splitOnStringExpectedResults = { "abstemiously", "abstemiously" } ;        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, "aeiouy" ) ;        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i+= 1 ) {            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;        }        String[] splitWithMultipleSeparatorExpectedResults = {"ab", "cd", "ef"};        String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator("ab:cd::ef", ":");        assertEquals( splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length );        for( int i = 0; i < splitWithMultipleSeparatorExpectedResults.length ; i++ ) {            assertEquals( splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i] ) ;        }    }    public void testSplitByWholeString_StringStringBooleanInt() {        assertEquals( null, StringUtils.splitByWholeSeparator( null, ".", 3 ) ) ;        assertEquals( 0, StringUtils.splitByWholeSeparator( "", ".", 3 ).length ) ;        String stringToSplitOnNulls = "ab   de fg" ;        String[] splitOnNullExpectedResults = { "ab", "de fg" } ;        //String[] splitOnNullExpectedResults = { "ab", "de" } ;        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null, 2 ) ;        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;        }        String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiouslyaeiouyabstemiously" ;        String[] splitOnStringExpectedResults = { "abstemiously", "abstemiouslyaeiouyabstemiously" } ;        //String[] splitOnStringExpectedResults = { "abstemiously", "abstemiously" } ;        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, "aeiouy", 2 ) ;        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i++ ) {            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;        }    }    public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() {        assertEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ;        assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ;        // test whitespace        String input = "ab   de fg" ;        String[] expected = new String[] { "ab", "", "", "de", "fg" } ;        String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ;        assertEquals( expected.length, actual.length ) ;        for ( int i = 0 ; i < actual.length ; i+= 1 ) {            assertEquals( expected[i], actual[i] );        }        // test delimiter singlechar        input = "1::2:::3::::4";        expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" };        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ;        assertEquals( expected.length, actual.length ) ;        for ( int i = 0 ; i < actual.length ; i+= 1 ) {            assertEquals( expected[i], actual[i] );        }        // test delimiter multichar        input = "1::2:::3::::4";        expected = new String[] { "1", "2", ":3", "", "4" };        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, "::", -1 ) ;        assertEquals( expected.length, actual.length ) ;        for ( int i = 0 ; i < actual.length ; i+= 1 ) {            assertEquals( expected[i], actual[i] );        }        // test delimiter char with max        input = "1::2::3:4";        expected = new String[] { "1", "", "2", ":3:4" };        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", 4 ) ;        assertEquals( expected.length, actual.length ) ;        for ( int i = 0 ; i < actual.length ; i+= 1 ) {            assertEquals( expected[i], actual[i] );        }    }        public void testSplitPreserveAllTokens_String() {        assertEquals(null, StringUtils.splitPreserveAllTokens(null));        assertEquals(0, StringUtils.splitPreserveAllTokens("").length);                String str = "abc def";        String[] res = StringUtils.splitPreserveAllTokens(str);        assertEquals(2, res.length);        assertEquals("abc", res[0]);        assertEquals("def", res[1]);                str = "abc  def";        res = StringUtils.splitPreserveAllTokens(str);        assertEquals(3, res.length);        assertEquals("abc", res[0]);        assertEquals("", res[1]);        assertEquals("def", res[2]);                str = " abc ";        res = StringUtils.splitPreserveAllTokens(str);        assertEquals(3, res.length);        assertEquals("", res[0]);        assertEquals("abc", res[1]);        assertEquals("", res[2]);                str = "a b .c";        res = StringUtils.splitPreserveAllTokens(str);        assertEquals(3, res.length);        assertEquals("a", res[0]);        assertEquals("b", res[1]);        assertEquals(".c", res[2]);                str = " a b .c";        res = StringUtils.splitPreserveAllTokens(str);        assertEquals(4, res.length);        assertEquals("", res[0]);        assertEquals("a", res[1]);        assertEquals("b", res[2]);        assertEquals(".c", res[3]);                str = "a  b  .c";        res = StringUtils.splitPreserveAllTokens(str);        assertEquals(5, res.length);        assertEquals("a", res[0]);        assertEquals("", res[1]);        assertEquals("b", res[2]);        assertEquals("", res[3]);        assertEquals(".c", res[4]);                str = " a  ";        res = StringUtils.splitPreserveAllTokens(str);        assertEquals(4, res.length);        assertEquals("", res[0]);        assertEquals("a", res[1]);        assertEquals("", res[2]);        assertEquals("", res[3]);        str = " a  b";        res = StringUtils.splitPreserveAllTokens(str);        assertEquals(4, res.length);        assertEquals("", res[0]);        assertEquals("a", res[1]);        assertEquals("", res[2]);        assertEquals("b", res[3]);        str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c";        res = StringUtils.splitPreserveAllTokens(str);        assertEquals(WHITESPACE.length() + 1, res.length);        assertEquals("a", res[0]);        for(int i = 1; i < WHITESPACE.length()-1; i++)        {          assertEquals("", res[i]);        }        assertEquals("b" + NON_WHITESPACE + "c", res[WHITESPACE.length()]);                           }        public void testSplitPreserveAllTokens_StringChar() {        assertEquals(null, StringUtils.splitPreserveAllTokens(null, '.'));        assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length);        String str = "a.b. c";        String[] res = StringUtils.splitPreserveAllTokens(str, '.');        assertEquals(3, res.length);        assertEquals("a", res[0]);        assertEquals("b", res[1]);        assertEquals(" c", res[2]);                    str = "a.b.. c";        res = StringUtils.splitPreserveAllTokens(str, '.');        assertEquals(4, res.length);        assertEquals("a", res[0]);        assertEquals("b", res[1]);        assertEquals("", res[2]);        assertEquals(" c", res[3]);        str = ".a.";        res = StringUtils.splitPreserveAllTokens(str, '.');        assertEquals(3, res.length);        assertEquals("", res[0]);        assertEquals("a", res[1]);        assertEquals("", res[2]);               str = ".a..";        res = StringUtils.splitPreserveAllTokens(str, '.');        assertEquals(4, res.length);        assertEquals("", res[0]);        assertEquals("a", res[1]);        assertEquals("", res[2]);        assertEquals("", res[3]);                str = "..a.";        res = StringUtils.splitPreserveAllTokens(str, '.');        assertEquals(4, res.length);        assertEquals("", res[0]);        assertEquals("", res[1]);        assertEquals("a", res[2]);        assertEquals("", res[3]);                str = "..a";        res = StringUtils.splitPreserveAllTokens(str, '.');        assertEquals(3, res.length);        assertEquals("", res[0]);        assertEquals("", res[1]);        assertEquals("a", res[2]);                str = "a b c";        res = StringUtils.splitPreserveAllTokens(str,' ');        assertEquals(3, res.length);        assertEquals("a", res[0]);        assertEquals("b", res[1]);        assertEquals("c", res[2]);        str = "a  b  c";        res = StringUtils.splitPreserveAllTokens(str,' ');        assertEquals(5, res.length);        assertEquals("a", res[0]);        assertEquals("", res[1]);        assertEquals("b", res[2]);        assertEquals("", res[3]);        assertEquals("c", res[4]);                str = " a b c";        res = StringUtils.splitPreserveAllTokens(str,' ');        assertEquals(4, res.length);        assertEquals("", res[0]);        assertEquals("a", res[1]);        assertEquals("b", res[2]);        assertEquals("c", res[3]);        str = "  a b c";        res = StringUtils.splitPreserveAllTokens(str,' ');        assertEquals(5, res.length);        assertEquals("", res[0]);        assertEquals("", res[1]);        assertEquals("a", res[2]);        assertEquals("b", res[3]);        assertEquals("c", res[4]);        str = "a b c ";        res = StringUtils.splitPreserveAllTokens(str,' ');        assertEquals(4, res.length);        assertEquals("a", res[0]);        assertEquals("b", res[1]);        assertEquals("c", res[2]);        assertEquals("", res[3]);        str = "a b c  ";        res = StringUtils.splitPreserveAllTokens(str,' ');        assertEquals(5, res.length);        assertEquals("a", res[0]);        assertEquals("b", res[1]);        assertEquals("c", res[2]);        assertEquals("", res[3]);        assertEquals("", res[3]);        // Match example in javadoc        {          String[] results = null;          String[] expectedResults = {"a", "", "b", "c"};          results = StringUtils.splitPreserveAllTokens("a..b.c",'.');          assertEquals(expectedResults.length, results.length);          for (int i = 0; i < expectedResults.length; i++) {              assertEquals(expectedResults[i], results[i]);          }        }    }        public void testSplitPreserveAllTokens_StringString_StringStringInt() {        assertEquals(null, StringUtils.splitPreserveAllTokens(null, "."));        assertEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3));                assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length);        assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length);                innerTestSplitPreserveAllTokens('.', ".", ' ');        innerTestSplitPreserveAllTokens('.', ".", ',');        innerTestSplitPreserveAllTokens('.', ".,", 'x');        for (int i = 0; i < WHITESPACE.length(); i++) {            for (int j = 0; j < NON_WHITESPACE.length(); j++) {                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));            }        }        {          String[] results = null;          String[] expectedResults = {"ab", "de fg"};          results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2);          assertEquals(expectedResults.length, results.length);          for (int i = 0; i < expectedResults.length; i++) {              assertEquals(expectedResults[i], results[i]);          }        }        {          String[] results = null;          String[] expectedResults = {"ab", "  de fg"};          results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2);          assertEquals(expectedResults.length, results.length);          for (int i = 0; i < expectedResults.length; i++) {              assertEquals(expectedResults[i], results[i]);          }        }                {          String[] results = null;          String[] expectedResults = {"ab", "::de:fg"};          results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2);          assertEquals(expectedResults.length, results.length);          for (int i = 0; i < expectedResults.length; i++) {              assertEquals(expectedResults[i], results[i]);          }        }                {          String[] results = null;          String[] expectedResults = {"ab", "", " de fg"};          results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3);          assertEquals(expectedResults.length, results.length);          for (int i = 0; i < expectedResults.length; i++) {              assertEquals(expectedResults[i], results[i]);          }        }                {          String[] results = null;          String[] expectedResults = {"ab", "", "", "de fg"};          results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4);          assertEquals(expectedResults.length, results.length);          for (int i = 0; i < expectedResults.length; i++) {              assertEquals(expectedResults[i], results[i]);          }        }        {          String[] expectedResults = {"ab", "cd:ef"};          String[] results = null;          results = StringUtils.splitPreserveAllTokens("ab:cd:ef",":", 2);          assertEquals(expectedResults.length, results.length);          for (int i = 0; i < expectedResults.length; i++) {              assertEquals(expectedResults[i], results[i]);          }        }        {          String[] results = null;          String[] expectedResults = {"ab", ":cd:ef"};          results = StringUtils.splitPreserveAllTokens("ab::cd:ef",":", 2);          assertEquals(expectedResults.length, results.length);          for (int i = 0; i < expectedResults.length; i++) {              assertEquals(expectedResults[i], results[i]);          }        }        {          String[] results = null;          String[] expectedResults = {"ab", "", ":cd:ef"};          results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 3);          assertEquals(expectedResults.length, results.length);          for (int i = 0; i < expectedResults.length; i++) {              assertEquals(expectedResults[i], results[i]);          }        }        {          String[] results = null;          String[] expectedResults = {"ab", "", "", "cd:ef"};          results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 4);          assertEquals(expectedResults.length, results.length);          for (int i = 0; i < expectedResults.length; i++) {              assertEquals(expectedResults[i], results[i]);          }        }        {          String[] results = null;          String[] expectedResults = {"", "ab", "", "", "cd:ef"};          results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef",":", 5);          assertEquals(expectedResults.length, results.length);          for (int i = 0; i < expectedResults.length; i++) {              assertEquals(expectedResults[i], results[i]);          }        }                {          String[] results = null;          String[] expectedResults = {"", "", "ab", "", "", "cd:ef"};          results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef",":", 6);          assertEquals(expectedResults.length, results.length);          for (int i = 0; i < expectedResults.length; i++) {              assertEquals(expectedResults[i], results[i]);          }        }            }        private void innerTestSplitPreserveAllTokens(char separator, String sepStr, char noMatch) {        String msg = "Failed on separator hex(" + Integer.toHexString(separator) +            "), noMatch hex(" + Integer.toHexString(noMatch) + "), sepStr(" + sepStr + ")";                final String str = "a" + separator + "b" + separator + separator + noMatch + "c";        String[] res;        // (str, sepStr)        res = StringUtils.splitPreserveAllTokens(str, sepStr);        assertEquals(msg, 4, res.length);        assertEquals(msg, "a", res[0]);        assertEquals(msg, "b", res[1]);        assertEquals(msg, "", res[2]);        assertEquals(msg, noMatch + "c", res[3]);                final String str2 = separator + "a" + separator;        res = StringUtils.splitPreserveAllTokens(str2, sepStr);        assertEquals(msg, 3, res.length);        assertEquals(msg, "", res[0]);        assertEquals(msg, "a", res[1]);        assertEquals(msg, "", res[2]);        res = StringUtils.splitPreserveAllTokens(str, sepStr, -1);        assertEquals(msg, 4, res.length);        assertEquals(msg, "a", res[0]);        assertEquals(msg, "b", res[1]);        assertEquals(msg, "", res[2]);        assertEquals(msg, noMatch + "c", res[3]);                res = StringUtils.splitPreserveAllTokens(str, sepStr, 0);        assertEquals(msg, 4, res.length);        assertEquals(msg, "a", res[0]);        assertEquals(msg, "b", res[1]);        assertEquals(msg, "", res[2]);        assertEquals(msg, noMatch + "c", res[3]);                res = StringUtils.splitPreserveAllTokens(str, sepStr, 1);        assertEquals(msg, 1, res.length);        assertEquals(msg, str, res[0]);                res = StringUtils.splitPreserveAllTokens(str, sepStr, 2);        assertEquals(msg, 2, res.length);        assertEquals(msg, "a", res[0]);        assertEquals(msg, str.substring(2), res[1]);    }    public void testSplitByCharacterType() {        assertNull(StringUtils.splitByCharacterType(null));        assertEquals(0, StringUtils.splitByCharacterType("").length);                assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ",        "fg" }, StringUtils.splitByCharacterType("ab de fg")));                assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ",        "fg" }, StringUtils.splitByCharacterType("ab   de fg")));                assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":",        "ef" }, StringUtils.splitByCharacterType("ab:cd:ef")));                assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" },                StringUtils.splitByCharacterType("number5")));                assertTrue(ArrayUtils.isEquals(new String[] { "foo", "B", "ar" },                StringUtils.splitByCharacterType("fooBar")));                assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "B", "ar" },                StringUtils.splitByCharacterType("foo200Bar")));                assertTrue(ArrayUtils.isEquals(new String[] { "ASFR", "ules" },                StringUtils.splitByCharacterType("ASFRules")));    }        public void testSplitByCharacterTypeCamelCase() {        assertNull(StringUtils.splitByCharacterTypeCamelCase(null));        assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length);        assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ",                "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg")));        assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ",                "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg")));        assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":",                "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef")));                assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" },                StringUtils.splitByCharacterTypeCamelCase("number5")));        assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" },                StringUtils.splitByCharacterTypeCamelCase("fooBar")));        assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" },                StringUtils.splitByCharacterTypeCamelCase("foo200Bar")));        assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" },                StringUtils.splitByCharacterTypeCamelCase("ASFRules")));    }    public void testDeleteWhitespace_String() {        assertEquals(null, StringUtils.deleteWhitespace(null));        assertEquals("", StringUtils.deleteWhitespace(""));        assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  "));        assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));        assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));        // Note: u-2007 and u-000A both cause problems in the source code        // it should ignore 2007 but delete 000A        assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  "));        assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F"));        assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt"));    }    public void testReplace_StringStringString() {        assertEquals(null, StringUtils.replace(null, null, null));        assertEquals(null, StringUtils.replace(null, null, "any"));        assertEquals(null, StringUtils.replace(null, "any", null));        assertEquals(null, StringUtils.replace(null, "any", "any"));        assertEquals("", StringUtils.replace("", null, null));        assertEquals("", StringUtils.replace("", null, "any"));        assertEquals("", StringUtils.replace("", "any", null));        assertEquals("", StringUtils.replace("", "any", "any"));        assertEquals("FOO", StringUtils.replace("FOO", "", "any"));        assertEquals("FOO", StringUtils.replace("FOO", null, "any"));        assertEquals("FOO", StringUtils.replace("FOO", "F", null));        assertEquals("FOO", StringUtils.replace("FOO", null, null));        assertEquals("", StringUtils.replace("foofoofoo", "foo", ""));        assertEquals("barbarbar", StringUtils.replace("foofoofoo", "foo", "bar"));        assertEquals("farfarfar", StringUtils.replace("foofoofoo", "oo", "ar"));       }        public void testReplace_StringStringStringInt() {        assertEquals(null, StringUtils.replace(null, null, null, 2));        assertEquals(null, StringUtils.replace(null, null, "any", 2));        assertEquals(null, StringUtils.replace(null, "any", null, 2));        assertEquals(null, StringUtils.replace(null, "any", "any", 2));        assertEquals("", StringUtils.replace("", null, null, 2));        assertEquals("", StringUtils.replace("", null, "any", 2));        assertEquals("", StringUtils.replace("", "any", null, 2));        assertEquals("", StringUtils.replace("", "any", "any", 2));                String str = new String(new char[] {'o', 'o', 'f', 'o', 'o'});        assertSame(str, StringUtils.replace(str, "x", "", -1));                assertEquals("f", StringUtils.replace("oofoo", "o", "", -1));        assertEquals("oofoo", StringUtils.replace("oofoo", "o", "", 0));        assertEquals("ofoo", StringUtils.replace("oofoo", "o", "", 1));        assertEquals("foo", StringUtils.replace("oofoo", "o", "", 2));        assertEquals("fo", StringUtils.replace("oofoo", "o", "", 3));        assertEquals("f", StringUtils.replace("oofoo", "o", "", 4));                assertEquals("f", StringUtils.replace("oofoo", "o", "", -5));        assertEquals("f", StringUtils.replace("oofoo", "o", "", 1000));    }        public void testReplaceOnce_StringStringString() {        assertEquals(null, StringUtils.replaceOnce(null, null, null));        assertEquals(null, StringUtils.replaceOnce(null, null, "any"));        assertEquals(null, StringUtils.replaceOnce(null, "any", null));        assertEquals(null, StringUtils.replaceOnce(null, "any", "any"));        assertEquals("", StringUtils.replaceOnce("", null, null));        assertEquals("", StringUtils.replaceOnce("", null, "any"));        assertEquals("", StringUtils.replaceOnce("", "any", null));        assertEquals("", StringUtils.replaceOnce("", "any", "any"));        assertEquals("FOO", StringUtils.replaceOnce("FOO", "", "any"));        assertEquals("FOO", StringUtils.replaceOnce("FOO", null, "any"));        assertEquals("FOO", StringUtils.replaceOnce("FOO", "F", null));        assertEquals("FOO", StringUtils.replaceOnce("FOO", null, null));        assertEquals("foofoo", StringUtils.replaceOnce("foofoofoo", "foo", ""));    }    /**     * Test method for 'org.apache.commons.lang.StringUtils.replaceEach(String, String[], String[])'     */    public void testReplace_StringStringArrayStringArray() {                //JAVADOC TESTS START        assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"}));        assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),"");        assertEquals(StringUtils.replaceEach("aba", null, null),"aba");        assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba");        assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba");        assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba");        assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b");        assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}),"aba");        assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte");        assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"dcte");        //JAVADOC TESTS END        assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b"}, new String[]{"b", "c"}));        assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren",            new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",                 "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D",                 "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",                 "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9"},            new String[]{"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a",                 "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q",                 "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G",                 "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4"}));    }    /**     * Test method for 'org.apache.commons.lang.StringUtils.replaceEachRepeatedly(String, String[], String[])'     */    public void testReplace_StringStringArrayStringArrayBoolean() {        //JAVADOC TESTS START        assertNull(StringUtils.replaceEachRepeatedly(null, new String[]{"a"}, new String[]{"b"}));        assertEquals(StringUtils.replaceEachRepeatedly("", new String[]{"a"}, new String[]{"b"}),"");        assertEquals(StringUtils.replaceEachRepeatedly("aba", null, null),"aba");        assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null),"aba");        assertEquals(StringUtils.replaceEachRepeatedly("aba", null, new String[0]),"aba");        assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null),"aba");        assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[]{"a"}, new String[]{""}),"b");        assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[]{null}, new String[]{"a"}),"aba");        assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte");        assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"tcte");        try {            StringUtils.replaceEachRepeatedly("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"});            fail("Should be a circular reference");        } catch (IllegalStateException e) {}        //JAVADOC TESTS END    }        public void testReplaceChars_StringCharChar() {        assertEquals(null, StringUtils.replaceChars(null, 'b', 'z'));        assertEquals("", StringUtils.replaceChars("", 'b', 'z'));        assertEquals("azcza", StringUtils.replaceChars("abcba", 'b', 'z'));        assertEquals("abcba", StringUtils.replaceChars("abcba", 'x', 'z'));    }        public void testReplaceChars_StringStringString() {        assertEquals(null, StringUtils.replaceChars(null, null, null));        assertEquals(null, StringUtils.replaceChars(null, "", null));        assertEquals(null, StringUtils.replaceChars(null, "a", null));        assertEquals(null, StringUtils.replaceChars(null, null, ""));        assertEquals(null, StringUtils.replaceChars(null, null, "x"));                assertEquals("", StringUtils.replaceChars("", null, null));        assertEquals("", StringUtils.replaceChars("", "", null));        assertEquals("", StringUtils.replaceChars("", "a", null));        assertEquals("", StringUtils.replaceChars("", null, ""));        assertEquals("", StringUtils.replaceChars("", null, "x"));        assertEquals("abc", StringUtils.replaceChars("abc", null, null));        assertEquals("abc", StringUtils.replaceChars("abc", null, ""));        assertEquals("abc", StringUtils.replaceChars("abc", null, "x"));                assertEquals("abc", StringUtils.replaceChars("abc", "", null));        assertEquals("abc", StringUtils.replaceChars("abc", "", ""));        assertEquals("abc", StringUtils.replaceChars("abc", "", "x"));                assertEquals("ac", StringUtils.replaceChars("abc", "b", null));        assertEquals("ac", StringUtils.replaceChars("abc", "b", ""));        assertEquals("axc", StringUtils.replaceChars("abc", "b", "x"));                assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz"));        assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y"));        assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx"));                assertEquals("abcba", StringUtils.replaceChars("abcba", "z", "w"));        assertSame("abcba", StringUtils.replaceChars("abcba", "z", "w"));                // Javadoc examples:        assertEquals("jelly", StringUtils.replaceChars("hello", "ho", "jy"));        assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz"));        assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y"));        assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx"));                // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454        assertEquals("bcc", StringUtils.replaceChars("abc", "ab", "bc"));        assertEquals("q651.506bera", StringUtils.replaceChars("d216.102oren",            "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789",            "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234"));    }        public void testOverlay_StringStringIntInt() {        assertEquals(null, StringUtils.overlay(null, null, 2, 4));        assertEquals(null, StringUtils.overlay(null, null, -2, -4));                assertEquals("", StringUtils.overlay("", null, 0, 0));        assertEquals("", StringUtils.overlay("", "", 0, 0));        assertEquals("zzzz", StringUtils.overlay("", "zzzz", 0, 0));        assertEquals("zzzz", StringUtils.overlay("", "zzzz", 2, 4));        assertEquals("zzzz", StringUtils.overlay("", "zzzz", -2, -4));                assertEquals("abef", StringUtils.overlay("abcdef", null, 2, 4));        assertEquals("abef", StringUtils.overlay("abcdef", null, 4, 2));        assertEquals("abef", StringUtils.overlay("abcdef", "", 2, 4));        assertEquals("abef", StringUtils.overlay("abcdef", "", 4, 2));        assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 2, 4));        assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 4, 2));                assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", -1, 4));        assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", 4, -1));        assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -2, -1));        assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -1, -2));        assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 4, 10));        assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 4));        assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 8, 10));        assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 8));    }    public void testRepeat_StringInt() {        assertEquals(null, StringUtils.repeat(null, 2));        assertEquals("", StringUtils.repeat("ab", 0));        assertEquals("", StringUtils.repeat("", 3));        assertEquals("aaa", StringUtils.repeat("a", 3));        assertEquals("ababab", StringUtils.repeat("ab", 3));        assertEquals("abcabcabc", StringUtils.repeat("abc", 3));        String str = StringUtils.repeat("a", 10000);  // bigger than pad limit        assertEquals(10000, str.length());        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));    }    public void testChop() {        String[][] chopCases = {            { FOO_UNCAP + "\r\n", FOO_UNCAP } ,            { FOO_UNCAP + "\n" , FOO_UNCAP } ,            { FOO_UNCAP + "\r", FOO_UNCAP },            { FOO_UNCAP + " \r", FOO_UNCAP + " " },            { "foo", "fo"},            { "foo\nfoo", "foo\nfo" },            { "\n", "" },            { "\r", "" },            { "\r\n", "" },            { null, null },            { "", "" },            { "a", "" },        };        for (int i = 0; i < chopCases.length; i++) {            String original = chopCases[i][0];            String expectedResult = chopCases[i][1];            assertEquals("chop(String) failed",                    expectedResult, StringUtils.chop(original));        }    }    public void testChomp() {        String[][] chompCases = {            { FOO_UNCAP + "\r\n", FOO_UNCAP },            { FOO_UNCAP + "\n" , FOO_UNCAP },            { FOO_UNCAP + "\r", FOO_UNCAP },            { FOO_UNCAP + " \r", FOO_UNCAP + " " },            { FOO_UNCAP, FOO_UNCAP },            { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n"},            { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" },            { "foo\nfoo", "foo\nfoo" },            { "foo\n\rfoo", "foo\n\rfoo" },            { "\n", "" },            { "\r", "" },            { "a", "a" },            { "\r\n", "" },            { "", "" },            { null, null },            { FOO_UNCAP + "\n\r", FOO_UNCAP + "\n"}        };        for (int i = 0; i < chompCases.length; i++) {            String original = chompCases[i][0];            String expectedResult = chompCases[i][1];            assertEquals("chomp(String) failed",                    expectedResult, StringUtils.chomp(original));        }        assertEquals("chomp(String, String) failed",                "foo", StringUtils.chomp("foobar", "bar"));        assertEquals("chomp(String, String) failed",                "foobar", StringUtils.chomp("foobar", "baz"));        assertEquals("chomp(String, String) failed",                "foo", StringUtils.chomp("foo", "foooo"));        assertEquals("chomp(String, String) failed",                "foobar", StringUtils.chomp("foobar", ""));        assertEquals("chomp(String, String) failed",                "foobar", StringUtils.chomp("foobar", null));        assertEquals("chomp(String, String) failed",                "", StringUtils.chomp("", "foo"));        assertEquals("chomp(String, String) failed",                "", StringUtils.chomp("", null));        assertEquals("chomp(String, String) failed",                "", StringUtils.chomp("", ""));        assertEquals("chomp(String, String) failed",                null, StringUtils.chomp(null, "foo"));        assertEquals("chomp(String, String) failed",                null, StringUtils.chomp(null, null));        assertEquals("chomp(String, String) failed",                null, StringUtils.chomp(null, ""));        assertEquals("chomp(String, String) failed",                "", StringUtils.chomp("foo", "foo"));        assertEquals("chomp(String, String) failed",                " ", StringUtils.chomp(" foo", "foo"));        assertEquals("chomp(String, String) failed",                "foo ", StringUtils.chomp("foo ", "foo"));    }    //-----------------------------------------------------------------------    public void testRightPad_StringInt() {        assertEquals(null, StringUtils.rightPad(null, 5));        assertEquals("     ", StringUtils.rightPad("", 5));        assertEquals("abc  ", StringUtils.rightPad("abc", 5));        assertEquals("abc", StringUtils.rightPad("abc", 2));        assertEquals("abc", StringUtils.rightPad("abc", -1));    }    public void testRightPad_StringIntChar() {        assertEquals(null, StringUtils.rightPad(null, 5, ' '));        assertEquals("     ", StringUtils.rightPad("", 5, ' '));        assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' '));        assertEquals("abc", StringUtils.rightPad("abc", 2, ' '));        assertEquals("abc", StringUtils.rightPad("abc", -1, ' '));        assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x'));        String str = StringUtils.rightPad("aaa", 10000, 'a');  // bigger than pad length        assertEquals(10000, str.length());        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));    }    public void testRightPad_StringIntString() {        assertEquals(null, StringUtils.rightPad(null, 5, "-+"));        assertEquals("     ", StringUtils.rightPad("", 5, " "));        assertEquals(null, StringUtils.rightPad(null, 8, null));        assertEquals("abc-+-+", StringUtils.rightPad("abc", 7, "-+"));        assertEquals("abc-+~", StringUtils.rightPad("abc", 6, "-+~"));        assertEquals("abc-+", StringUtils.rightPad("abc", 5, "-+~"));        assertEquals("abc", StringUtils.rightPad("abc", 2, " "));        assertEquals("abc", StringUtils.rightPad("abc", -1, " "));        assertEquals("abc  ", StringUtils.rightPad("abc", 5, null));        assertEquals("abc  ", StringUtils.rightPad("abc", 5, ""));    }            //-----------------------------------------------------------------------    public void testLeftPad_StringInt() {        assertEquals(null, StringUtils.leftPad(null, 5));        assertEquals("     ", StringUtils.leftPad("", 5));        assertEquals("  abc", StringUtils.leftPad("abc", 5));        assertEquals("abc", StringUtils.leftPad("abc", 2));    }            public void testLeftPad_StringIntChar() {        assertEquals(null, StringUtils.leftPad(null, 5, ' '));        assertEquals("     ", StringUtils.leftPad("", 5, ' '));        assertEquals("  abc", StringUtils.leftPad("abc", 5, ' '));        assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x'));        assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff'));        assertEquals("abc", StringUtils.leftPad("abc", 2, ' '));        String str = StringUtils.leftPad("aaa", 10000, 'a');  // bigger than pad length        assertEquals(10000, str.length());        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));    }            public void testLeftPad_StringIntString() {        assertEquals(null, StringUtils.leftPad(null, 5, "-+"));        assertEquals(null, StringUtils.leftPad(null, 5, null));        assertEquals("     ", StringUtils.leftPad("", 5, " "));        assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+"));        assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~"));        assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~"));        assertEquals("abc", StringUtils.leftPad("abc", 2, " "));        assertEquals("abc", StringUtils.leftPad("abc", -1, " "));        assertEquals("  abc", StringUtils.leftPad("abc", 5, null));        assertEquals("  abc", StringUtils.leftPad("abc", 5, ""));    }    public void testLength() {        assertEquals(0, StringUtils.length(null));        assertEquals(0, StringUtils.length(""));        assertEquals(0, StringUtils.length(StringUtils.EMPTY));        assertEquals(1, StringUtils.length("A"));        assertEquals(1, StringUtils.length(" "));        assertEquals(8, StringUtils.length("ABCDEFGH"));    }        //-----------------------------------------------------------------------    public void testCenter_StringInt() {        assertEquals(null, StringUtils.center(null, -1));        assertEquals(null, StringUtils.center(null, 4));        assertEquals("    ", StringUtils.center("", 4));        assertEquals("ab", StringUtils.center("ab", 0));        assertEquals("ab", StringUtils.center("ab", -1));        assertEquals("ab", StringUtils.center("ab", 1));        assertEquals("    ", StringUtils.center("", 4));        assertEquals(" ab ", StringUtils.center("ab", 4));        assertEquals("abcd", StringUtils.center("abcd", 2));        assertEquals(" a  ", StringUtils.center("a", 4));        assertEquals("  a  ", StringUtils.center("a", 5));    }        public void testCenter_StringIntChar() {        assertEquals(null, StringUtils.center(null, -1, ' '));        assertEquals(null, StringUtils.center(null, 4, ' '));        assertEquals("    ", StringUtils.center("", 4, ' '));        assertEquals("ab", StringUtils.center("ab", 0, ' '));        assertEquals("ab", StringUtils.center("ab", -1, ' '));        assertEquals("ab", StringUtils.center("ab", 1, ' '));        assertEquals("    ", StringUtils.center("", 4, ' '));        assertEquals(" ab ", StringUtils.center("ab", 4, ' '));        assertEquals("abcd", StringUtils.center("abcd", 2, ' '));        assertEquals(" a  ", StringUtils.center("a", 4, ' '));        assertEquals("  a  ", StringUtils.center("a", 5, ' '));        assertEquals("xxaxx", StringUtils.center("a", 5, 'x'));    }        public void testCenter_StringIntString() {        assertEquals(null, StringUtils.center(null, 4, null));        assertEquals(null, StringUtils.center(null, -1, " "));        assertEquals(null, StringUtils.center(null, 4, " "));        assertEquals("    ", StringUtils.center("", 4, " "));        assertEquals("ab", StringUtils.center("ab", 0, " "));        assertEquals("ab", StringUtils.center("ab", -1, " "));        assertEquals("ab", StringUtils.center("ab", 1, " "));        assertEquals("    ", StringUtils.center("", 4, " "));        assertEquals(" ab ", StringUtils.center("ab", 4, " "));        assertEquals("abcd", StringUtils.center("abcd", 2, " "));        assertEquals(" a  ", StringUtils.center("a", 4, " "));        assertEquals("yayz", StringUtils.center("a", 4, "yz"));        assertEquals("yzyayzy", StringUtils.center("a", 7, "yz"));        assertEquals("  abc  ", StringUtils.center("abc", 7, null));        assertEquals("  abc  ", StringUtils.center("abc", 7, ""));    }    //-----------------------------------------------------------------------    public void testReverse_String() {        assertEquals(null, StringUtils.reverse(null) );        assertEquals("", StringUtils.reverse("") );        assertEquals("sdrawkcab", StringUtils.reverse("backwards") );    }            public void testReverseDelimited_StringChar() {        assertEquals(null, StringUtils.reverseDelimited(null, '.') );        assertEquals("", StringUtils.reverseDelimited("", '.') );        assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.') );        assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.') );        assertEquals("", StringUtils.reverseDelimited("", '.') );    }    //-----------------------------------------------------------------------    public void testDefault_String() {        assertEquals("", StringUtils.defaultString(null));        assertEquals("", StringUtils.defaultString(""));        assertEquals("abc", StringUtils.defaultString("abc"));    }    public void testDefault_StringString() {        assertEquals("NULL", StringUtils.defaultString(null, "NULL"));        assertEquals("", StringUtils.defaultString("", "NULL"));        assertEquals("abc", StringUtils.defaultString("abc", "NULL"));    }    public void testDefaultIfEmpty_StringString() {        assertEquals("NULL", StringUtils.defaultIfEmpty(null, "NULL"));        assertEquals("NULL", StringUtils.defaultIfEmpty("", "NULL"));        assertEquals("abc", StringUtils.defaultIfEmpty("abc", "NULL"));        assertNull(StringUtils.defaultIfEmpty("", null));    }    //-----------------------------------------------------------------------    public void testAbbreviate_StringInt() {        assertEquals(null, StringUtils.abbreviate(null, 10));        assertEquals("", StringUtils.abbreviate("", 10));        assertEquals("short", StringUtils.abbreviate("short", 10));        assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all good men to come to the aid of their party.", 10));        String raspberry = "raspberry peach";        assertEquals("raspberry p...", StringUtils.abbreviate(raspberry, 14));        assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 15));        assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 16));        assertEquals("abc...", StringUtils.abbreviate("abcdefg", 6));        assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 7));        assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 8));        assertEquals("a...", StringUtils.abbreviate("abcdefg", 4));        assertEquals("", StringUtils.abbreviate("", 4));                try {            @SuppressWarnings("unused")            String res = StringUtils.abbreviate("abc", 3);            fail("StringUtils.abbreviate expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {                // empty        }                  }        public void testAbbreviate_StringIntInt() {        assertEquals(null, StringUtils.abbreviate(null, 10, 12));        assertEquals("", StringUtils.abbreviate("", 0, 10));        assertEquals("", StringUtils.abbreviate("", 2, 10));                try {            @SuppressWarnings("unused")            String res = StringUtils.abbreviate("abcdefghij", 0, 3);            fail("StringUtils.abbreviate expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {                // empty        }              try {            @SuppressWarnings("unused")            String res = StringUtils.abbreviate("abcdefghij", 5, 6);            fail("StringUtils.abbreviate expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {                // empty        }                      String raspberry = "raspberry peach";        assertEquals("raspberry peach", StringUtils.abbreviate(raspberry, 11, 15));        assertEquals(null, StringUtils.abbreviate(null, 7, 14));        assertAbbreviateWithOffset("abcdefg...", -1, 10);        assertAbbreviateWithOffset("abcdefg...", 0, 10);        assertAbbreviateWithOffset("abcdefg...", 1, 10);        assertAbbreviateWithOffset("abcdefg...", 2, 10);        assertAbbreviateWithOffset("abcdefg...", 3, 10);        assertAbbreviateWithOffset("abcdefg...", 4, 10);        assertAbbreviateWithOffset("...fghi...", 5, 10);        assertAbbreviateWithOffset("...ghij...", 6, 10);        assertAbbreviateWithOffset("...hijk...", 7, 10);        assertAbbreviateWithOffset("...ijklmno", 8, 10);        assertAbbreviateWithOffset("...ijklmno", 9, 10);        assertAbbreviateWithOffset("...ijklmno", 10, 10);        assertAbbreviateWithOffset("...ijklmno", 10, 10);        assertAbbreviateWithOffset("...ijklmno", 11, 10);        assertAbbreviateWithOffset("...ijklmno", 12, 10);        assertAbbreviateWithOffset("...ijklmno", 13, 10);        assertAbbreviateWithOffset("...ijklmno", 14, 10);        assertAbbreviateWithOffset("...ijklmno", 15, 10);        assertAbbreviateWithOffset("...ijklmno", 16, 10);        assertAbbreviateWithOffset("...ijklmno", Integer.MAX_VALUE, 10);    }    private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth) {        String abcdefghijklmno = "abcdefghijklmno";        String message = "abbreviate(String,int,int) failed";        String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);        if (offset >= 0 && offset < abcdefghijklmno.length()) {            assertTrue(message + " -- should contain offset character",                    actual.indexOf((char)('a'+offset)) != -1);        }        assertTrue(message + " -- should not be greater than maxWidth",                actual.length() <= maxWidth);        assertEquals(message, expected, actual);    }    //-----------------------------------------------------------------------    public void testDifference_StringString() {        assertEquals(null, StringUtils.difference(null, null));        assertEquals("", StringUtils.difference("", ""));        assertEquals("abc", StringUtils.difference("", "abc"));        assertEquals("", StringUtils.difference("abc", ""));        assertEquals("i am a robot", StringUtils.difference(null, "i am a robot"));        assertEquals("i am a machine", StringUtils.difference("i am a machine", null));        assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot"));        assertEquals("", StringUtils.difference("abc", "abc"));        assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot"));    }    public void testDifferenceAt_StringString() {        assertEquals(-1, StringUtils.indexOfDifference(null, null));        assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot"));        assertEquals(-1, StringUtils.indexOfDifference("", ""));        assertEquals(0, StringUtils.indexOfDifference("", "abc"));        assertEquals(0, StringUtils.indexOfDifference("abc", ""));        assertEquals(0, StringUtils.indexOfDifference("i am a machine", null));        assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot"));        assertEquals(-1, StringUtils.indexOfDifference("foo", "foo"));        assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot"));        //System.out.println("indexOfDiff: " + StringUtils.indexOfDifference("i am a robot", "not machine"));    }    //-----------------------------------------------------------------------    public void testGetLevenshteinDistance_StringString() {        assertEquals(0, StringUtils.getLevenshteinDistance("", "") );        assertEquals(1, StringUtils.getLevenshteinDistance("", "a") );        assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") );        assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") );        assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") );        assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") );        assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") );        assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") );        assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo") );        assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo") );        try {            @SuppressWarnings("unused")            int d = StringUtils.getLevenshteinDistance("a", null);            fail("expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            // empty        }        try {            @SuppressWarnings("unused")            int d = StringUtils.getLevenshteinDistance(null, "a");            fail("expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            // empty        }    }    /**     * A sanity check for {@link StringUtils#EMPTY}.     */    public void testEMPTY() {        assertNotNull(StringUtils.EMPTY);        assertEquals("", StringUtils.EMPTY);        assertEquals(0, StringUtils.EMPTY.length());    }        public void testRemoveStart() {        // StringUtils.removeStart("", *)        = ""        assertNull(StringUtils.removeStart(null, null));        assertNull(StringUtils.removeStart(null, ""));        assertNull(StringUtils.removeStart(null, "a"));                // StringUtils.removeStart(*, null)      = *        assertEquals(StringUtils.removeStart("", null), "");        assertEquals(StringUtils.removeStart("", ""), "");        assertEquals(StringUtils.removeStart("", "a"), "");                // All others:        assertEquals(StringUtils.removeStart("www.domain.com", "www."), "domain.com");        assertEquals(StringUtils.removeStart("domain.com", "www."), "domain.com");        assertEquals(StringUtils.removeStart("domain.com", ""), "domain.com");                assertEquals(StringUtils.removeStart("domain.com", null), "domain.com");            }        public void testRemoveStartIgnoreCase() {        // StringUtils.removeStart("", *)        = ""        assertNull("removeStartIgnoreCase(null, null)", StringUtils.removeStartIgnoreCase(null, null));        assertNull("removeStartIgnoreCase(null, \"\")", StringUtils.removeStartIgnoreCase(null, ""));        assertNull("removeStartIgnoreCase(null, \"a\")", StringUtils.removeStartIgnoreCase(null, "a"));                // StringUtils.removeStart(*, null)      = *        assertEquals("removeStartIgnoreCase(\"\", null)", StringUtils.removeStartIgnoreCase("", null), "");        assertEquals("removeStartIgnoreCase(\"\", \"\")", StringUtils.removeStartIgnoreCase("", ""), "");        assertEquals("removeStartIgnoreCase(\"\", \"a\")", StringUtils.removeStartIgnoreCase("", "a"), "");                // All others:        assertEquals("removeStartIgnoreCase(\"www.domain.com\", \"www.\")", StringUtils.removeStartIgnoreCase("www.domain.com", "www."), "domain.com");        assertEquals("removeStartIgnoreCase(\"domain.com\", \"www.\")", StringUtils.removeStartIgnoreCase("domain.com", "www."), "domain.com");        assertEquals("removeStartIgnoreCase(\"domain.com\", \"\")", StringUtils.removeStartIgnoreCase("domain.com", ""), "domain.com");                assertEquals("removeStartIgnoreCase(\"domain.com\", null)", StringUtils.removeStartIgnoreCase("domain.com", null), "domain.com");                        // Case insensitive:        assertEquals("removeStartIgnoreCase(\"www.domain.com\", \"WWW.\")", StringUtils.removeStartIgnoreCase("www.domain.com", "WWW."), "domain.com");    }    public void testRemoveEnd() {        // StringUtils.removeEnd("", *)        = ""        assertNull(StringUtils.removeEnd(null, null));        assertNull(StringUtils.removeEnd(null, ""));        assertNull(StringUtils.removeEnd(null, "a"));                // StringUtils.removeEnd(*, null)      = *        assertEquals(StringUtils.removeEnd("", null), "");        assertEquals(StringUtils.removeEnd("", ""), "");        assertEquals(StringUtils.removeEnd("", "a"), "");                // All others:        assertEquals(StringUtils.removeEnd("www.domain.com.", ".com"), "www.domain.com.");        assertEquals(StringUtils.removeEnd("www.domain.com", ".com"), "www.domain");        assertEquals(StringUtils.removeEnd("www.domain", ".com"), "www.domain");        assertEquals(StringUtils.removeEnd("domain.com", ""), "domain.com");           assertEquals(StringUtils.removeEnd("domain.com", null), "domain.com");       }    public void testRemoveEndIgnoreCase() {        // StringUtils.removeEndIgnoreCase("", *)        = ""        assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null));        assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, ""));        assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a"));                // StringUtils.removeEnd(*, null)      = *        assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), "");        assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), "");        assertEquals("removeEndIgnoreCase(\"\", \"a\")", StringUtils.removeEndIgnoreCase("", "a"), "");                // All others:        assertEquals("removeEndIgnoreCase(\"www.domain.com.\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com.");        assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain");        assertEquals("removeEndIgnoreCase(\"www.domain\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain");        assertEquals("removeEndIgnoreCase(\"domain.com\", \"\")", StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com");           assertEquals("removeEndIgnoreCase(\"domain.com\", null)", StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com");           // Case insensitive:        assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain");    }    public void testRemove_String() {        // StringUtils.remove(null, *)        = null        assertEquals(null, StringUtils.remove(null, null));        assertEquals(null, StringUtils.remove(null, ""));        assertEquals(null, StringUtils.remove(null, "a"));                // StringUtils.remove("", *)          = ""        assertEquals("", StringUtils.remove("", null));        assertEquals("", StringUtils.remove("", ""));        assertEquals("", StringUtils.remove("", "a"));                // StringUtils.remove(*, null)        = *        assertEquals(null, StringUtils.remove(null, null));        assertEquals("", StringUtils.remove("", null));        assertEquals("a", StringUtils.remove("a", null));                // StringUtils.remove(*, "")          = *        assertEquals(null, StringUtils.remove(null, ""));        assertEquals("", StringUtils.remove("", ""));        assertEquals("a", StringUtils.remove("a", ""));                // StringUtils.remove("queued", "ue") = "qd"        assertEquals("qd", StringUtils.remove("queued", "ue"));                // StringUtils.remove("queued", "zz") = "queued"        assertEquals("queued", StringUtils.remove("queued", "zz"));    }    public void testRemove_char() {        // StringUtils.remove(null, *)       = null        assertEquals(null, StringUtils.remove(null, 'a'));        assertEquals(null, StringUtils.remove(null, 'a'));        assertEquals(null, StringUtils.remove(null, 'a'));                // StringUtils.remove("", *)          = ""        assertEquals("", StringUtils.remove("", 'a'));        assertEquals("", StringUtils.remove("", 'a'));        assertEquals("", StringUtils.remove("", 'a'));                // StringUtils.remove("queued", 'u') = "qeed"        assertEquals("qeed", StringUtils.remove("queued", 'u'));                // StringUtils.remove("queued", 'z') = "queued"        assertEquals("queued", StringUtils.remove("queued", 'z'));    }        public void testDifferenceAt_StringArray(){                assertEquals(-1, StringUtils.indexOfDifference(null));        assertEquals(-1, StringUtils.indexOfDifference(new String[] {}));        assertEquals(-1, StringUtils.indexOfDifference(new String[] {"abc"}));        assertEquals(-1, StringUtils.indexOfDifference(new String[] {null, null}));        assertEquals(-1, StringUtils.indexOfDifference(new String[] {"", ""}));        assertEquals(0, StringUtils.indexOfDifference(new String[] {"", null}));        assertEquals(0, StringUtils.indexOfDifference(new String[] {"abc", null, null}));        assertEquals(0, StringUtils.indexOfDifference(new String[] {null, null, "abc"}));        assertEquals(0, StringUtils.indexOfDifference(new String[] {"", "abc"}));        assertEquals(0, StringUtils.indexOfDifference(new String[] {"abc", ""}));        assertEquals(-1, StringUtils.indexOfDifference(new String[] {"abc", "abc"}));        assertEquals(1, StringUtils.indexOfDifference(new String[] {"abc", "a"}));        assertEquals(2, StringUtils.indexOfDifference(new String[] {"ab", "abxyz"}));        assertEquals(2, StringUtils.indexOfDifference(new String[] {"abcde", "abxyz"}));        assertEquals(0, StringUtils.indexOfDifference(new String[] {"abcde", "xyz"}));        assertEquals(0, StringUtils.indexOfDifference(new String[] {"xyz", "abcde"}));        assertEquals(7, StringUtils.indexOfDifference(new String[] {"i am a machine", "i am a robot"}));    }        public void testGetCommonPrefix_StringArray(){                assertEquals("", StringUtils.getCommonPrefix(null));        assertEquals("", StringUtils.getCommonPrefix(new String[] {}));        assertEquals("abc", StringUtils.getCommonPrefix(new String[] {"abc"}));        assertEquals("", StringUtils.getCommonPrefix(new String[] {null, null}));        assertEquals("", StringUtils.getCommonPrefix(new String[] {"", ""}));        assertEquals("", StringUtils.getCommonPrefix(new String[] {"", null}));        assertEquals("", StringUtils.getCommonPrefix(new String[] {"abc", null, null}));        assertEquals("", StringUtils.getCommonPrefix(new String[] {null, null, "abc"}));        assertEquals("", StringUtils.getCommonPrefix(new String[] {"", "abc"}));        assertEquals("", StringUtils.getCommonPrefix(new String[] {"abc", ""}));        assertEquals("abc", StringUtils.getCommonPrefix(new String[] {"abc", "abc"}));        assertEquals("a", StringUtils.getCommonPrefix(new String[] {"abc", "a"}));        assertEquals("ab", StringUtils.getCommonPrefix(new String[] {"ab", "abxyz"}));        assertEquals("ab", StringUtils.getCommonPrefix(new String[] {"abcde", "abxyz"}));        assertEquals("", StringUtils.getCommonPrefix(new String[] {"abcde", "xyz"}));        assertEquals("", StringUtils.getCommonPrefix(new String[] {"xyz", "abcde"}));        assertEquals("i am a ", StringUtils.getCommonPrefix(new String[] {"i am a machine", "i am a robot"}));    }            public void testStartsWithAny() {        assertFalse(StringUtils.startsWithAny(null, null));        assertFalse(StringUtils.startsWithAny(null, new String[] {"abc"}));        assertFalse(StringUtils.startsWithAny("abcxyz", null));        assertFalse(StringUtils.startsWithAny("abcxyz", new String[] {}));        assertTrue(StringUtils.startsWithAny("abcxyz", new String[] {"abc"}));        assertTrue(StringUtils.startsWithAny("abcxyz", new String[] {null, "xyz", "abc"}));        assertFalse(StringUtils.startsWithAny("abcxyz", new String[] {null, "xyz", "abcd"}));    } }
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;public class EntitiesPerformanceTest extends TestCase {    private int COUNT = 10000;    private int STRING_LENGTH = 1000;    private static String stringWithUnicode;    private static String stringWithEntities;    private static Entities treeEntities;    private static Entities hashEntities;    private static Entities arrayEntities;    private static Entities binaryEntities;    private static Entities primitiveEntities;    private static Entities lookupEntities;    public EntitiesPerformanceTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(EntitiesPerformanceTest.class);        return suite;    }    @Override    public void setUp() {        if (stringWithUnicode == null) {            StringBuffer buf = new StringBuffer(STRING_LENGTH);            for (int i = 0; i < STRING_LENGTH / 5; ++i) {                buf.append("xxxx");                char ch = isovalue(i);                buf.append(ch);            }            stringWithUnicode = buf.toString();            stringWithEntities = Entities.HTML40.unescape(stringWithUnicode);        }    }    private char html40value(int i) {        String entityValue = Entities.getHTML40(i % Entities.HTML40_ARRAY_LENGTH, 1);        char ch = (char) Integer.parseInt(entityValue);        return ch;    }    private char isovalue(int i) {        String entityValue = Entities.getISO8859_1(i % Entities.ISO8859_1_ARRAY_LENGTH, 1);        char ch = (char) Integer.parseInt(entityValue);        return ch;    }    public void testBuildHash() throws Exception {        for (int i = 0; i < COUNT; ++i) {            hashEntities = build(new Entities.HashEntityMap());        }    }    public void testBuildTree() throws Exception {        for (int i = 0; i < COUNT; ++i) {            treeEntities = build(new Entities.TreeEntityMap());        }    }    public void testBuildArray() throws Exception {        for (int i = 0; i < COUNT; ++i) {            arrayEntities = build(new Entities.ArrayEntityMap());        }    }    public void testBuildBinary() throws Exception {        for (int i = 0; i < COUNT; ++i) {            binaryEntities = build(new Entities.BinaryEntityMap());        }    }    public void testBuildPrimitive() throws Exception {        for (int i = 0; i < COUNT; ++i) {            buildPrimitive();        }    }    private void buildPrimitive()    {        primitiveEntities = build(new Entities.PrimitiveEntityMap());    }    public void testBuildLookup() throws Exception {        for (int i = 0; i < COUNT; ++i) {            buildLookup();        }    }    private void buildLookup()    {        lookupEntities = build(new Entities.LookupEntityMap());    }    private Entities build(Entities.EntityMap intMap) {        Entities entities;        entities = new Entities();        entities.map = intMap;        Entities.fillWithHtml40Entities(entities);        return entities;    }    public void testLookupHash() throws Exception {        lookup(hashEntities);    }    public void testLookupTree() throws Exception {        lookup(treeEntities);    }    public void testLookupArray() throws Exception {        lookup(arrayEntities);    }    public void testLookupBinary() throws Exception {        lookup(binaryEntities);    }    public void testLookupPrimitive() throws Exception {        if (primitiveEntities == null) buildPrimitive();        lookup(primitiveEntities);    }    public void testLookupLookup() throws Exception {        if (lookupEntities == null) buildLookup();        lookup(lookupEntities);    }    public void testEscapeHash() throws Exception {        escapeIt(hashEntities);    }    public void testEscapeTree() throws Exception {        escapeIt(treeEntities);    }    public void testEscapeArray() throws Exception {        escapeIt(arrayEntities);    }    public void testEscapeBinary() throws Exception {        escapeIt(binaryEntities);    }    public void testEscapePrimitive() throws Exception {        escapeIt(primitiveEntities);    }    public void testEscapeLookup() throws Exception {        escapeIt(lookupEntities);    }    public void testUnescapeHash() throws Exception {        unescapeIt(hashEntities);    }    public void testUnescapeTree() throws Exception {        unescapeIt(treeEntities);    }    public void testUnescapeArray() throws Exception {        unescapeIt(arrayEntities);    }    public void testUnescapeBinary() throws Exception {        unescapeIt(binaryEntities);    }    private void lookup(Entities entities) {        for (int i = 0; i < COUNT * 1000; ++i) {            entities.entityName(isovalue(i));        }    }    private void escapeIt(Entities entities) {        for (int i = 0; i < COUNT; ++i) {            String escaped = entities.escape(stringWithUnicode);            assertEquals("xxxx&nbsp;", escaped.substring(0, 10));        }    }    private void unescapeIt(Entities entities) {        for (int i = 0; i < COUNT; ++i) {            String unescaped = entities.unescape(stringWithEntities);            assertEquals("xxxx\u00A0", unescaped.substring(0, 5));        }    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Tests CharEncoding. *  * @see CharEncoding * @author Gary D. Gregory * @version $Id$ */public class CharEncodingTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(CharEncodingTest.class);        suite.setName("CharEncoding Tests");        return suite;    }    private void assertSupportedEncoding(String name) {        assertTrue("Encoding should be supported: " + name, CharEncoding.isSupported(name));    }    /**     * The class can be instantiated.     */    public void testConstructor() {        new CharEncoding();    }    public void testMustBeSupportedJava1_3_1() {        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {            this.assertSupportedEncoding(CharEncoding.ISO_8859_1);            this.assertSupportedEncoding(CharEncoding.US_ASCII);            this.assertSupportedEncoding(CharEncoding.UTF_16);            this.assertSupportedEncoding(CharEncoding.UTF_16BE);            this.assertSupportedEncoding(CharEncoding.UTF_16LE);            this.assertSupportedEncoding(CharEncoding.UTF_8);        } else {            this.warn("Java 1.3 tests not run since the current version is " + SystemUtils.JAVA_VERSION);        }    }    public void testNotSupported() {        assertFalse(CharEncoding.isSupported(null));        assertFalse(CharEncoding.isSupported(""));        assertFalse(CharEncoding.isSupported(" "));        assertFalse(CharEncoding.isSupported("\t\r\n"));        assertFalse(CharEncoding.isSupported("DOESNOTEXIST"));        assertFalse(CharEncoding.isSupported("this is not a valid encoding name"));    }    public void testWorksOnJava1_1_8() {        //        // In this test, I simply deleted the encodings from the 1.3.1 list.        // The Javadoc do not specify which encodings are required.        //        if (SystemUtils.isJavaVersionAtLeast(1.1f)) {            this.assertSupportedEncoding(CharEncoding.ISO_8859_1);            this.assertSupportedEncoding(CharEncoding.US_ASCII);            this.assertSupportedEncoding(CharEncoding.UTF_8);        } else {            this.warn("Java 1.1 tests not run since the current version is " + SystemUtils.JAVA_VERSION);        }    }    public void testWorksOnJava1_2_2() {        //        // In this test, I simply deleted the encodings from the 1.3.1 list.        // The Javadoc do not specify which encodings are required.        //        if (SystemUtils.isJavaVersionAtLeast(1.2f)) {            this.assertSupportedEncoding(CharEncoding.ISO_8859_1);            this.assertSupportedEncoding(CharEncoding.US_ASCII);            this.assertSupportedEncoding(CharEncoding.UTF_8);        } else {            this.warn("Java 1.2 tests not run since the current version is " + SystemUtils.JAVA_VERSION);        }    }    void warn(String msg) {        System.err.println(msg);    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.StringUtils} - Trim/Empty methods * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @version $Id$ */public class StringUtilsTrimEmptyTest extends TestCase {    private static final String FOO = "foo";    public StringUtilsTrimEmptyTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(StringUtilsTrimEmptyTest.class);        suite.setName("StringUtilsTrimEmpty Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testIsEmpty() {        assertEquals(true, StringUtils.isEmpty(null));        assertEquals(true, StringUtils.isEmpty(""));        assertEquals(false, StringUtils.isEmpty(" "));        assertEquals(false, StringUtils.isEmpty("foo"));        assertEquals(false, StringUtils.isEmpty("  foo  "));    }    public void testIsNotEmpty() {        assertEquals(false, StringUtils.isNotEmpty(null));        assertEquals(false, StringUtils.isNotEmpty(""));        assertEquals(true, StringUtils.isNotEmpty(" "));        assertEquals(true, StringUtils.isNotEmpty("foo"));        assertEquals(true, StringUtils.isNotEmpty("  foo  "));    }    public void testIsBlank() {        assertEquals(true, StringUtils.isBlank(null));        assertEquals(true, StringUtils.isBlank(""));        assertEquals(true, StringUtils.isBlank(StringUtilsTest.WHITESPACE));        assertEquals(false, StringUtils.isBlank("foo"));        assertEquals(false, StringUtils.isBlank("  foo  "));    }    public void testIsNotBlank() {        assertEquals(false, StringUtils.isNotBlank(null));        assertEquals(false, StringUtils.isNotBlank(""));        assertEquals(false, StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));        assertEquals(true, StringUtils.isNotBlank("foo"));        assertEquals(true, StringUtils.isNotBlank("  foo  "));    }    //-----------------------------------------------------------------------    public void testTrim() {        assertEquals(FOO, StringUtils.trim(FOO + "  "));        assertEquals(FOO, StringUtils.trim(" " + FOO + "  "));        assertEquals(FOO, StringUtils.trim(" " + FOO));        assertEquals(FOO, StringUtils.trim(FOO + ""));        assertEquals("", StringUtils.trim(" \t\r\n\b "));        assertEquals("", StringUtils.trim(StringUtilsTest.TRIMMABLE));        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE));        assertEquals("", StringUtils.trim(""));        assertEquals(null, StringUtils.trim(null));    }    public void testTrimToNull() {        assertEquals(FOO, StringUtils.trimToNull(FOO + "  "));        assertEquals(FOO, StringUtils.trimToNull(" " + FOO + "  "));        assertEquals(FOO, StringUtils.trimToNull(" " + FOO));        assertEquals(FOO, StringUtils.trimToNull(FOO + ""));        assertEquals(null, StringUtils.trimToNull(" \t\r\n\b "));        assertEquals(null, StringUtils.trimToNull(StringUtilsTest.TRIMMABLE));        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE));        assertEquals(null, StringUtils.trimToNull(""));        assertEquals(null, StringUtils.trimToNull(null));    }    public void testTrimToEmpty() {        assertEquals(FOO, StringUtils.trimToEmpty(FOO + "  "));        assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO + "  "));        assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO));        assertEquals(FOO, StringUtils.trimToEmpty(FOO + ""));        assertEquals("", StringUtils.trimToEmpty(" \t\r\n\b "));        assertEquals("", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE));        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE));        assertEquals("", StringUtils.trimToEmpty(""));        assertEquals("", StringUtils.trimToEmpty(null));    }    //-----------------------------------------------------------------------    public void testStrip_String() {        assertEquals(null, StringUtils.strip(null));        assertEquals("", StringUtils.strip(""));        assertEquals("", StringUtils.strip("        "));        assertEquals("abc", StringUtils.strip("  abc  "));        assertEquals(StringUtilsTest.NON_WHITESPACE,             StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));    }        public void testStripToNull_String() {        assertEquals(null, StringUtils.stripToNull(null));        assertEquals(null, StringUtils.stripToNull(""));        assertEquals(null, StringUtils.stripToNull("        "));        assertEquals(null, StringUtils.stripToNull(StringUtilsTest.WHITESPACE));        assertEquals("ab c", StringUtils.stripToNull("  ab c  "));        assertEquals(StringUtilsTest.NON_WHITESPACE,             StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));    }        public void testStripToEmpty_String() {        assertEquals("", StringUtils.stripToEmpty(null));        assertEquals("", StringUtils.stripToEmpty(""));        assertEquals("", StringUtils.stripToEmpty("        "));        assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE));        assertEquals("ab c", StringUtils.stripToEmpty("  ab c  "));        assertEquals(StringUtilsTest.NON_WHITESPACE,             StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));    }        public void testStrip_StringString() {        // null strip        assertEquals(null, StringUtils.strip(null, null));        assertEquals("", StringUtils.strip("", null));        assertEquals("", StringUtils.strip("        ", null));        assertEquals("abc", StringUtils.strip("  abc  ", null));        assertEquals(StringUtilsTest.NON_WHITESPACE,             StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));        // "" strip        assertEquals(null, StringUtils.strip(null, ""));        assertEquals("", StringUtils.strip("", ""));        assertEquals("        ", StringUtils.strip("        ", ""));        assertEquals("  abc  ", StringUtils.strip("  abc  ", ""));        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, ""));                // " " strip        assertEquals(null, StringUtils.strip(null, " "));        assertEquals("", StringUtils.strip("", " "));        assertEquals("", StringUtils.strip("        ", " "));        assertEquals("abc", StringUtils.strip("  abc  ", " "));                // "ab" strip        assertEquals(null, StringUtils.strip(null, "ab"));        assertEquals("", StringUtils.strip("", "ab"));        assertEquals("        ", StringUtils.strip("        ", "ab"));        assertEquals("  abc  ", StringUtils.strip("  abc  ", "ab"));        assertEquals("c", StringUtils.strip("abcabab", "ab"));        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, ""));    }        public void testStripStart_StringString() {        // null stripStart        assertEquals(null, StringUtils.stripStart(null, null));        assertEquals("", StringUtils.stripStart("", null));        assertEquals("", StringUtils.stripStart("        ", null));        assertEquals("abc  ", StringUtils.stripStart("  abc  ", null));        assertEquals(StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE,             StringUtils.stripStart(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));        // "" stripStart        assertEquals(null, StringUtils.stripStart(null, ""));        assertEquals("", StringUtils.stripStart("", ""));        assertEquals("        ", StringUtils.stripStart("        ", ""));        assertEquals("  abc  ", StringUtils.stripStart("  abc  ", ""));        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, ""));                // " " stripStart        assertEquals(null, StringUtils.stripStart(null, " "));        assertEquals("", StringUtils.stripStart("", " "));        assertEquals("", StringUtils.stripStart("        ", " "));        assertEquals("abc  ", StringUtils.stripStart("  abc  ", " "));                // "ab" stripStart        assertEquals(null, StringUtils.stripStart(null, "ab"));        assertEquals("", StringUtils.stripStart("", "ab"));        assertEquals("        ", StringUtils.stripStart("        ", "ab"));        assertEquals("  abc  ", StringUtils.stripStart("  abc  ", "ab"));        assertEquals("cabab", StringUtils.stripStart("abcabab", "ab"));        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, ""));    }        public void testStripEnd_StringString() {        // null stripEnd        assertEquals(null, StringUtils.stripEnd(null, null));        assertEquals("", StringUtils.stripEnd("", null));        assertEquals("", StringUtils.stripEnd("        ", null));        assertEquals("  abc", StringUtils.stripEnd("  abc  ", null));        assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE,             StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));        // "" stripEnd        assertEquals(null, StringUtils.stripEnd(null, ""));        assertEquals("", StringUtils.stripEnd("", ""));        assertEquals("        ", StringUtils.stripEnd("        ", ""));        assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", ""));        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, ""));                // " " stripEnd        assertEquals(null, StringUtils.stripEnd(null, " "));        assertEquals("", StringUtils.stripEnd("", " "));        assertEquals("", StringUtils.stripEnd("        ", " "));        assertEquals("  abc", StringUtils.stripEnd("  abc  ", " "));                // "ab" stripEnd        assertEquals(null, StringUtils.stripEnd(null, "ab"));        assertEquals("", StringUtils.stripEnd("", "ab"));        assertEquals("        ", StringUtils.stripEnd("        ", "ab"));        assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", "ab"));        assertEquals("abc", StringUtils.stripEnd("abcabab", "ab"));        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, ""));    }    public void testStripAll() {        // test stripAll method, merely an array version of the above strip        String[] empty = new String[0];        String[] fooSpace = new String[] { "  "+FOO+"  ", "  "+FOO, FOO+"  " };        String[] fooDots = new String[] { ".."+FOO+"..", ".."+FOO, FOO+".." };        String[] foo = new String[] { FOO, FOO, FOO };        assertEquals(null, StringUtils.stripAll(null));        assertArrayEquals(empty, StringUtils.stripAll(empty));        assertArrayEquals(foo, StringUtils.stripAll(fooSpace));                assertEquals(null, StringUtils.stripAll(null, null));        assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null));        assertArrayEquals(foo, StringUtils.stripAll(fooDots, "."));    }    private void assertArrayEquals(Object[] o1, Object[] o2) {        if(o1 == null) {            assertEquals(o1,o2);            return;        }        assertEquals("Length not equal. ", o1.length, o2.length);        int sz = o1.length;        for(int i=0; i<sz; i++) {            if(o1[i] instanceof Object[]) {                // do an assert equals on type....                assertArrayEquals( (Object[]) o1[i], (Object[]) o2[i] );            } else {                assertEquals(o1[i], o2[i]);            }        }    }}
/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.ArrayList;import java.util.Collection;import java.util.HashMap;import java.util.List;import java.util.Map;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.Validate}. * * @author Stephen Colebourne * @author Norm Deane * @version $Id$ */public class ValidateTest extends TestCase {    public ValidateTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(ValidateTest.class);        suite.setName("Validate Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testIsTrue1() {        Validate.isTrue(true);        try {            Validate.isTrue(false);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated expression is false", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testIsTrue2() {        Validate.isTrue(true, "MSG");        try {            Validate.isTrue(false, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testIsTrue3() {        Validate.isTrue(true, "MSG", new Integer(6));        try {            Validate.isTrue(false, "MSG", new Integer(6));            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG6", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testIsTrue4() {        Validate.isTrue(true, "MSG", 7);        try {            Validate.isTrue(false, "MSG", 7);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG7", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testIsTrue5() {        Validate.isTrue(true, "MSG", 7.4d);        try {            Validate.isTrue(false, "MSG", 7.4d);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG7.4", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNotNull1() {        Validate.notNull(new Object());        try {            Validate.notNull(null);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated object is null", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNotNull2() {        Validate.notNull(new Object(), "MSG");        try {            Validate.notNull(null, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNotEmptyArray1() {        Validate.notEmpty(new Object[] {null});        try {            Validate.notEmpty((Object[]) null);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated array is empty", ex.getMessage());        }        try {            Validate.notEmpty(new Object[0]);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated array is empty", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNotEmptyArray2() {        Validate.notEmpty(new Object[] {null}, "MSG");        try {            Validate.notEmpty((Object[]) null, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }        try {            Validate.notEmpty(new Object[0], "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNotEmptyCollection1() {        Collection coll = new ArrayList();        try {            Validate.notEmpty((Collection) null);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated collection is empty", ex.getMessage());        }        try {            Validate.notEmpty(coll);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated collection is empty", ex.getMessage());        }        coll.add(new Integer(8));        Validate.notEmpty(coll);    }    //-----------------------------------------------------------------------    public void testNotEmptyCollection2() {        Collection coll = new ArrayList();        try {            Validate.notEmpty((Collection) null, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }        try {            Validate.notEmpty(coll, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }        coll.add(new Integer(8));        Validate.notEmpty(coll, "MSG");    }    //-----------------------------------------------------------------------    public void testNotEmptyMap1() {        Map map = new HashMap();        try {            Validate.notEmpty((Map) null);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated map is empty", ex.getMessage());        }        try {            Validate.notEmpty(map);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated map is empty", ex.getMessage());        }        map.put("ll", new Integer(8));        Validate.notEmpty(map);    }    //-----------------------------------------------------------------------    public void testNotEmptyMap2() {        Map map = new HashMap();        try {            Validate.notEmpty((Map) null, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }        try {            Validate.notEmpty(map, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }        map.put("ll", new Integer(8));        Validate.notEmpty(map, "MSG");    }    //-----------------------------------------------------------------------    public void testNotEmptyString1() {        Validate.notEmpty("hjl");        try {            Validate.notEmpty((String) null);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated string is empty", ex.getMessage());        }        try {            Validate.notEmpty("");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated string is empty", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNotEmptyString2() {        Validate.notEmpty("a", "MSG");        try {            Validate.notEmpty((String) null, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }        try {            Validate.notEmpty("", "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNoNullElementsArray1() {        String[] array = new String[] {"a", "b"};        Validate.noNullElements(array);        try {            Validate.noNullElements((Object[]) null);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated object is null", ex.getMessage());        }        array[1] = null;        try {            Validate.noNullElements(array);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated array contains null element at index: 1", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNoNullElementsArray2() {        String[] array = new String[] {"a", "b"};        Validate.noNullElements(array, "MSG");        try {            Validate.noNullElements((Object[]) null, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated object is null", ex.getMessage());        }        array[1] = null;        try {            Validate.noNullElements(array, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNoNullElementsCollection1() {        List coll = new ArrayList();        coll.add("a");        coll.add("b");        Validate.noNullElements(coll);        try {            Validate.noNullElements((Collection) null);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated object is null", ex.getMessage());        }        coll.set(1, null);        try {            Validate.noNullElements(coll);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated collection contains null element at index: 1", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testNoNullElementsCollection2() {        List coll = new ArrayList();        coll.add("a");        coll.add("b");        Validate.noNullElements(coll, "MSG");        try {            Validate.noNullElements((Collection) null, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated object is null", ex.getMessage());        }        coll.set(1, null);        try {            Validate.noNullElements(coll, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }    }    //-----------------------------------------------------------------------    public void testAllElementsOfType() {        List coll = new ArrayList();        coll.add("a");        coll.add("b");        Validate.allElementsOfType(coll, String.class, "MSG");        Validate.allElementsOfType(coll, String.class);        try {            Validate.allElementsOfType(coll, Integer.class, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }        coll.set(1, Boolean.FALSE);        try {            Validate.allElementsOfType(coll, String.class);            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("The validated collection contains an element not of type java.lang.String at index: 1", ex.getMessage());        }                coll = new ArrayList();        coll.add(new Integer(5));        coll.add(new Double(2.0d));        Validate.allElementsOfType(coll, Number.class, "MSG");        try {            Validate.allElementsOfType(coll, Integer.class, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }        try {            Validate.allElementsOfType(coll, Double.class, "MSG");            fail("Expecting IllegalArgumentException");        } catch (IllegalArgumentException ex) {            assertEquals("MSG", ex.getMessage());        }    }    public void testConstructor() {        assertNotNull(new Validate());        Constructor[] cons = Validate.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(Validate.class.getModifiers()));        assertEquals(false, Modifier.isFinal(Validate.class.getModifiers()));    }    }
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @author Matthew Hawthorne * @version $Id$ * @see IllegalClassException */public class IllegalClassExceptionTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(IllegalClassExceptionTest.class);    }    public IllegalClassExceptionTest(String testName) {        super(testName);    }    // testConstructor_classArgs    public void testConstructor_classArgs_allNullInput() {        new IllegalClassException(null, null);    }    public void testConstructor_classArgs_nullExpected() {        new IllegalClassException(null, String.class);    }    public void testConstructor_classArgs_nullActual() {        new IllegalClassException(String.class, null);    }    //  testConstructor_stringArg    public void testConstructor_stringArg_nullInput() {        new IllegalClassException(null);    }    // testConstructor_classObjectArgs    public void testConstructor_classObjectArgs_allNullInput() {        new IllegalClassException(null, (Object) null);    }    public void testConstructor_classObjectArgs_nullExpected() {        new IllegalClassException(null, new Object());    }    public void testConstructor_classObjectArgs_nullActual() {        new IllegalClassException(String.class, (Object) null);    }    // testGetMessage    public void testGetMessage_classArgs_nullInput() {        final Throwable t = new IllegalClassException(null, null);        assertEquals("Expected: null, actual: null", t.getMessage());    }    public void testGetMessage_classArgs_normalInput() {        final Throwable t =            new IllegalClassException(String.class, Integer.class);        assertEquals(            "Expected: java.lang.String, actual: java.lang.Integer",            t.getMessage());    }    public void testGetMessage_classObjectArgs_nullInput() {        final Throwable t = new IllegalClassException(null, (Object) null);        assertEquals("Expected: null, actual: null", t.getMessage());    }    public void testGetMessage_classObjectArgs_normalInput() {        final Throwable t =            new IllegalClassException(String.class, new Object());        assertEquals(            "Expected: java.lang.String, actual: java.lang.Object",            t.getMessage());    }    public void testGetMessage_stringArg_nullInput() {        final Throwable t = new IllegalClassException(null);        assertEquals(null, t.getMessage());    }    public void testGetMessage_stringArg_validInput() {        final String message = "message";        final Throwable t = new IllegalClassException(message);        assertEquals(message, t.getMessage());    }} // IllegalClassExceptionTest
/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.lang;import java.lang.reflect.Modifier;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.CharRange}. * * @author Stephen Colebourne * @version $Id$ */public class CharRangeTest extends TestCase {        public CharRangeTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(CharRangeTest.class);        suite.setName("CharRange Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testClass() {        assertEquals(true, Modifier.isPublic(CharRange.class.getModifiers()));        assertEquals(true, Modifier.isFinal(CharRange.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testConstructorAccessors_Char() {        CharRange rangea = new CharRange('a');        assertEquals('a', rangea.getStart());        assertEquals('a', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a", rangea.toString());    }        public void testConstructorAccessors_CharBoolean_Normal() {        CharRange rangea = new CharRange('a');        assertEquals('a', rangea.getStart());        assertEquals('a', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a", rangea.toString());    }        public void testConstructorAccessors_CharBoolean_Negated() {        CharRange rangea = new CharRange('a', true);        assertEquals('a', rangea.getStart());        assertEquals('a', rangea.getEnd());        assertEquals(true, rangea.isNegated());        assertEquals("^a", rangea.toString());    }        public void testConstructorAccessors_CharChar_Same() {        CharRange rangea = new CharRange('a', 'a');        assertEquals('a', rangea.getStart());        assertEquals('a', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a", rangea.toString());    }        public void testConstructorAccessors_CharChar_Normal() {        CharRange rangea = new CharRange('a', 'e');        assertEquals('a', rangea.getStart());        assertEquals('e', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a-e", rangea.toString());    }        public void testConstructorAccessors_CharChar_Reversed() {        CharRange rangea = new CharRange('e', 'a');        assertEquals('a', rangea.getStart());        assertEquals('e', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a-e", rangea.toString());    }        public void testConstructorAccessors_CharCharBoolean_Same() {        CharRange rangea = new CharRange('a', 'a', false);        assertEquals('a', rangea.getStart());        assertEquals('a', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a", rangea.toString());    }        public void testConstructorAccessors_CharCharBoolean_Normal() {        CharRange rangea = new CharRange('a', 'e', false);        assertEquals('a', rangea.getStart());        assertEquals('e', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a-e", rangea.toString());    }        public void testConstructorAccessors_CharCharBoolean_Reversed() {        CharRange rangea = new CharRange('e', 'a', false);        assertEquals('a', rangea.getStart());        assertEquals('e', rangea.getEnd());        assertEquals(false, rangea.isNegated());        assertEquals("a-e", rangea.toString());    }        public void testConstructorAccessors_CharCharBoolean_SameNegated() {        CharRange rangea = new CharRange('a', 'a', true);        assertEquals('a', rangea.getStart());        assertEquals('a', rangea.getEnd());        assertEquals(true, rangea.isNegated());        assertEquals("^a", rangea.toString());    }        public void testConstructorAccessors_CharCharBoolean_NormalNegated() {        CharRange rangea = new CharRange('a', 'e', true);        assertEquals('a', rangea.getStart());        assertEquals('e', rangea.getEnd());        assertEquals(true, rangea.isNegated());        assertEquals("^a-e", rangea.toString());    }        public void testConstructorAccessors_CharCharBoolean_ReversedNegated() {        CharRange rangea = new CharRange('e', 'a', true);        assertEquals('a', rangea.getStart());        assertEquals('e', rangea.getEnd());        assertEquals(true, rangea.isNegated());        assertEquals("^a-e", rangea.toString());    }    //-----------------------------------------------------------------------        public void testEquals_Object() {        CharRange rangea = new CharRange('a');        CharRange rangeae = new CharRange('a', 'e');        CharRange rangenotbf = new CharRange('b', 'f', false);                assertEquals(false, rangea.equals(null));                assertEquals(true, rangea.equals(rangea));        assertEquals(true, rangea.equals(new CharRange('a')));        assertEquals(true, rangeae.equals(rangeae));        assertEquals(true, rangeae.equals(new CharRange('a', 'e')));        assertEquals(true, rangenotbf.equals(rangenotbf));        assertEquals(true, rangenotbf.equals(new CharRange('b', 'f', false)));                assertEquals(false, rangea.equals(rangeae));        assertEquals(false, rangea.equals(rangenotbf));        assertEquals(false, rangeae.equals(rangea));        assertEquals(false, rangeae.equals(rangenotbf));        assertEquals(false, rangenotbf.equals(rangea));        assertEquals(false, rangenotbf.equals(rangeae));    }                public void testHashCode() {        CharRange rangea = new CharRange('a');        CharRange rangeae = new CharRange('a', 'e');        CharRange rangenotbf = new CharRange('b', 'f', false);                assertEquals(true, rangea.hashCode() == rangea.hashCode());        assertEquals(true, rangea.hashCode() == new CharRange('a').hashCode());        assertEquals(true, rangeae.hashCode() == rangeae.hashCode());        assertEquals(true, rangeae.hashCode() == new CharRange('a', 'e').hashCode());        assertEquals(true, rangenotbf.hashCode() == rangenotbf.hashCode());        assertEquals(true, rangenotbf.hashCode() == new CharRange('b', 'f', false).hashCode());                assertEquals(false, rangea.hashCode() == rangeae.hashCode());        assertEquals(false, rangea.hashCode() == rangenotbf.hashCode());        assertEquals(false, rangeae.hashCode() == rangea.hashCode());        assertEquals(false, rangeae.hashCode() == rangenotbf.hashCode());        assertEquals(false, rangenotbf.hashCode() == rangea.hashCode());        assertEquals(false, rangenotbf.hashCode() == rangeae.hashCode());    }        //-----------------------------------------------------------------------        public void testContains_Char() {        CharRange range = new CharRange('c');        assertEquals(false, range.contains('b'));        assertEquals(true, range.contains('c'));        assertEquals(false, range.contains('d'));        assertEquals(false, range.contains('e'));                range = new CharRange('c', 'd');        assertEquals(false, range.contains('b'));        assertEquals(true, range.contains('c'));        assertEquals(true, range.contains('d'));        assertEquals(false, range.contains('e'));                range = new CharRange('d', 'c');        assertEquals(false, range.contains('b'));        assertEquals(true, range.contains('c'));        assertEquals(true, range.contains('d'));        assertEquals(false, range.contains('e'));                range = new CharRange('c', 'd', false);        assertEquals(false, range.contains('b'));        assertEquals(true, range.contains('c'));        assertEquals(true, range.contains('d'));        assertEquals(false, range.contains('e'));                range = new CharRange('c', 'd', true);        assertEquals(true, range.contains('b'));        assertEquals(false, range.contains('c'));        assertEquals(false, range.contains('d'));        assertEquals(true, range.contains('e'));        assertEquals(true, range.contains((char) 0));        assertEquals(true, range.contains(Character.MAX_VALUE));    }        //-----------------------------------------------------------------------        public void testContains_Charrange() {        CharRange a = new CharRange('a');        CharRange b = new CharRange('b');        CharRange c = new CharRange('c');        CharRange c2 = new CharRange('c');        CharRange d = new CharRange('d');        CharRange e = new CharRange('e');        CharRange cd = new CharRange('c', 'd');        CharRange bd = new CharRange('b', 'd');        CharRange bc = new CharRange('b', 'c');        CharRange ab = new CharRange('a', 'b');        CharRange de = new CharRange('d', 'e');        CharRange ef = new CharRange('e', 'f');        CharRange ae = new CharRange('a', 'e');                // normal/normal        assertEquals(false, c.contains(b));        assertEquals(true, c.contains(c));        assertEquals(true, c.contains(c2));        assertEquals(false, c.contains(d));                assertEquals(false, c.contains(cd));        assertEquals(false, c.contains(bd));        assertEquals(false, c.contains(bc));        assertEquals(false, c.contains(ab));        assertEquals(false, c.contains(de));                assertEquals(true, cd.contains(c));        assertEquals(true, bd.contains(c));        assertEquals(true, bc.contains(c));        assertEquals(false, ab.contains(c));        assertEquals(false, de.contains(c));        assertEquals(true, ae.contains(b));        assertEquals(true, ae.contains(ab));        assertEquals(true, ae.contains(bc));        assertEquals(true, ae.contains(cd));        assertEquals(true, ae.contains(de));                CharRange notb = new CharRange('b', 'b', true);        CharRange notc = new CharRange('c', 'c', true);        CharRange notd = new CharRange('d', 'd', true);        CharRange notab = new CharRange('a', 'b', true);        CharRange notbc = new CharRange('b', 'c', true);        CharRange notbd = new CharRange('b', 'd', true);        CharRange notcd = new CharRange('c', 'd', true);        CharRange notde = new CharRange('d', 'e', true);        CharRange notae = new CharRange('a', 'e', true);        CharRange all = new CharRange((char) 0, Character.MAX_VALUE);        CharRange allbutfirst = new CharRange((char) 1, Character.MAX_VALUE);                // normal/negated        assertEquals(false, c.contains(notc));        assertEquals(false, c.contains(notbd));        assertEquals(true, all.contains(notc));        assertEquals(true, all.contains(notbd));        assertEquals(false, allbutfirst.contains(notc));        assertEquals(false, allbutfirst.contains(notbd));                // negated/normal        assertEquals(true, notc.contains(a));        assertEquals(true, notc.contains(b));        assertEquals(false, notc.contains(c));        assertEquals(true, notc.contains(d));        assertEquals(true, notc.contains(e));                assertEquals(true, notc.contains(ab));        assertEquals(false, notc.contains(bc));        assertEquals(false, notc.contains(bd));        assertEquals(false, notc.contains(cd));        assertEquals(true, notc.contains(de));        assertEquals(false, notc.contains(ae));        assertEquals(false, notc.contains(all));        assertEquals(false, notc.contains(allbutfirst));                assertEquals(true, notbd.contains(a));        assertEquals(false, notbd.contains(b));        assertEquals(false, notbd.contains(c));        assertEquals(false, notbd.contains(d));        assertEquals(true, notbd.contains(e));                assertEquals(true, notcd.contains(ab));        assertEquals(false, notcd.contains(bc));        assertEquals(false, notcd.contains(bd));        assertEquals(false, notcd.contains(cd));        assertEquals(false, notcd.contains(de));        assertEquals(false, notcd.contains(ae));        assertEquals(true, notcd.contains(ef));        assertEquals(false, notcd.contains(all));        assertEquals(false, notcd.contains(allbutfirst));                // negated/negated        assertEquals(false, notc.contains(notb));        assertEquals(true, notc.contains(notc));        assertEquals(false, notc.contains(notd));                assertEquals(false, notc.contains(notab));        assertEquals(true, notc.contains(notbc));        assertEquals(true, notc.contains(notbd));        assertEquals(true, notc.contains(notcd));        assertEquals(false, notc.contains(notde));                assertEquals(false, notbd.contains(notb));        assertEquals(false, notbd.contains(notc));        assertEquals(false, notbd.contains(notd));                assertEquals(false, notbd.contains(notab));        assertEquals(false, notbd.contains(notbc));        assertEquals(true, notbd.contains(notbd));        assertEquals(false, notbd.contains(notcd));        assertEquals(false, notbd.contains(notde));        assertEquals(true, notbd.contains(notae));    }        public void testContainsNullArg() {        CharRange range = new CharRange('a');        try {            @SuppressWarnings("unused")            boolean contains = range.contains(null);        } catch(IllegalArgumentException e) {            assertEquals("The Range must not be null", e.getMessage());        }    }        //-----------------------------------------------------------------------        public void testSerialization() {        CharRange range = new CharRange('a');        assertEquals(range, SerializationUtils.clone(range));         range = new CharRange('a', 'e');        assertEquals(range, SerializationUtils.clone(range));         range = new CharRange('a', 'e', true);        assertEquals(range, SerializationUtils.clone(range));     }    }
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.util.Arrays;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Tests ArrayUtils add methods. *  * @author Gary D. Gregory * @version $Id$ */public class ArrayUtilsAddTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(ArrayUtilsAddTest.class);        suite.setName("ArrayUtils add Tests");        return suite;    }    public void testAddObjectArrayBoolean() {        boolean[] newArray;        newArray = ArrayUtils.add((boolean[])null, false);        assertTrue(Arrays.equals(new boolean[]{false}, newArray));        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((boolean[])null, true);        assertTrue(Arrays.equals(new boolean[]{true}, newArray));        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());        boolean[] array1 = new boolean[]{true, false, true};        newArray = ArrayUtils.add(array1, false);        assertTrue(Arrays.equals(new boolean[]{true, false, true, false}, newArray));        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());    }        public void testAddObjectArrayByte() {        byte[] newArray;        newArray = ArrayUtils.add((byte[])null, (byte)0);        assertTrue(Arrays.equals(new byte[]{0}, newArray));        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((byte[])null, (byte)1);        assertTrue(Arrays.equals(new byte[]{1}, newArray));        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());        byte[] array1 = new byte[]{1, 2, 3};        newArray = ArrayUtils.add(array1, (byte)0);        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 0}, newArray));        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(array1, (byte)4);        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 4}, newArray));        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());            }        public void testAddObjectArrayChar() {        char[] newArray;        newArray = ArrayUtils.add((char[])null, (char)0);        assertTrue(Arrays.equals(new char[]{0}, newArray));        assertEquals(Character.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((char[])null, (char)1);        assertTrue(Arrays.equals(new char[]{1}, newArray));        assertEquals(Character.TYPE, newArray.getClass().getComponentType());        char[] array1 = new char[]{1, 2, 3};        newArray = ArrayUtils.add(array1, (char)0);        assertTrue(Arrays.equals(new char[]{1, 2, 3, 0}, newArray));        assertEquals(Character.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(array1, (char)4);        assertTrue(Arrays.equals(new char[]{1, 2, 3, 4}, newArray));        assertEquals(Character.TYPE, newArray.getClass().getComponentType());            }        public void testAddObjectArrayDouble() {        double[] newArray;        newArray = ArrayUtils.add((double[])null, 0);        assertTrue(Arrays.equals(new double[]{0}, newArray));        assertEquals(Double.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((double[])null, 1);        assertTrue(Arrays.equals(new double[]{1}, newArray));        assertEquals(Double.TYPE, newArray.getClass().getComponentType());        double[] array1 = new double[]{1, 2, 3};        newArray = ArrayUtils.add(array1, 0);        assertTrue(Arrays.equals(new double[]{1, 2, 3, 0}, newArray));        assertEquals(Double.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(array1, 4);        assertTrue(Arrays.equals(new double[]{1, 2, 3, 4}, newArray));        assertEquals(Double.TYPE, newArray.getClass().getComponentType());            }        public void testAddObjectArrayFloat() {        float[] newArray;        newArray = ArrayUtils.add((float[])null, 0);        assertTrue(Arrays.equals(new float[]{0}, newArray));        assertEquals(Float.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((float[])null, 1);        assertTrue(Arrays.equals(new float[]{1}, newArray));        assertEquals(Float.TYPE, newArray.getClass().getComponentType());        float[] array1 = new float[]{1, 2, 3};        newArray = ArrayUtils.add(array1, 0);        assertTrue(Arrays.equals(new float[]{1, 2, 3, 0}, newArray));        assertEquals(Float.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(array1, 4);        assertTrue(Arrays.equals(new float[]{1, 2, 3, 4}, newArray));        assertEquals(Float.TYPE, newArray.getClass().getComponentType());            }        public void testAddObjectArrayInt() {        int[] newArray;        newArray = ArrayUtils.add((int[])null, 0);        assertTrue(Arrays.equals(new int[]{0}, newArray));        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((int[])null, 1);        assertTrue(Arrays.equals(new int[]{1}, newArray));        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());        int[] array1 = new int[]{1, 2, 3};        newArray = ArrayUtils.add(array1, 0);        assertTrue(Arrays.equals(new int[]{1, 2, 3, 0}, newArray));        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(array1, 4);        assertTrue(Arrays.equals(new int[]{1, 2, 3, 4}, newArray));        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());            }        public void testAddObjectArrayLong() {        long[] newArray;        newArray = ArrayUtils.add((long[])null, 0);        assertTrue(Arrays.equals(new long[]{0}, newArray));        assertEquals(Long.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((long[])null, 1);        assertTrue(Arrays.equals(new long[]{1}, newArray));        assertEquals(Long.TYPE, newArray.getClass().getComponentType());        long[] array1 = new long[]{1, 2, 3};        newArray = ArrayUtils.add(array1, 0);        assertTrue(Arrays.equals(new long[]{1, 2, 3, 0}, newArray));        assertEquals(Long.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(array1, 4);        assertTrue(Arrays.equals(new long[]{1, 2, 3, 4}, newArray));        assertEquals(Long.TYPE, newArray.getClass().getComponentType());            }        public void testAddObjectArrayShort() {        short[] newArray;        newArray = ArrayUtils.add((short[])null, (short)0);        assertTrue(Arrays.equals(new short[]{0}, newArray));        assertEquals(Short.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((short[])null, (short)1);        assertTrue(Arrays.equals(new short[]{1}, newArray));        assertEquals(Short.TYPE, newArray.getClass().getComponentType());        short[] array1 = new short[]{1, 2, 3};        newArray = ArrayUtils.add(array1, (short)0);        assertTrue(Arrays.equals(new short[]{1, 2, 3, 0}, newArray));        assertEquals(Short.TYPE, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(array1, (short)4);        assertTrue(Arrays.equals(new short[]{1, 2, 3, 4}, newArray));        assertEquals(Short.TYPE, newArray.getClass().getComponentType());            }        public void testAddObjectArrayObject() {        Object[] newArray;        newArray = ArrayUtils.add((Object[])null, null);        assertTrue(Arrays.equals((new Object[]{null}), newArray));        assertEquals(Object.class, newArray.getClass().getComponentType());                newArray = ArrayUtils.add((Object[])null, "a");        assertTrue(Arrays.equals((new String[]{"a"}), newArray));        assertTrue(Arrays.equals((new Object[]{"a"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());                String[] stringArray1 = new String[]{"a", "b", "c"};        newArray = ArrayUtils.add(stringArray1, null);        assertTrue(Arrays.equals((new String[]{"a", "b", "c", null}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());                newArray = ArrayUtils.add(stringArray1, "d");        assertTrue(Arrays.equals((new String[]{"a", "b", "c", "d"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());                Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};        newArray = ArrayUtils.add(numberArray1, new Float(3));        assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));        assertEquals(Number.class, newArray.getClass().getComponentType());                numberArray1 = null;        newArray = ArrayUtils.add(numberArray1, new Float(3));        assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));        assertEquals(Float.class, newArray.getClass().getComponentType());                numberArray1 = null;        newArray = ArrayUtils.add(numberArray1, null);        assertTrue(Arrays.equals((new Object[]{null}), newArray));        assertEquals(Object.class, newArray.getClass().getComponentType());    }        public void testAddObjectArrayToObjectArray() {        assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null));        Object[] newArray;        String[] stringArray1 = new String[]{"a", "b", "c"};        String[] stringArray2 = new String[]{"1", "2", "3"};        newArray = ArrayUtils.addAll(stringArray1, null);        assertNotSame(stringArray1, newArray);        assertTrue(Arrays.equals(stringArray1, newArray));        assertTrue(Arrays.equals((new String[]{"a", "b", "c"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.addAll(null, stringArray2);        assertNotSame(stringArray2, newArray);        assertTrue(Arrays.equals(stringArray2, newArray));        assertTrue(Arrays.equals((new String[]{"1", "2", "3"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.addAll(stringArray1, stringArray2);        assertTrue(Arrays.equals((new String[]{"a", "b", "c", "1", "2", "3"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));        assertTrue(Arrays.equals((new String[]{}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));        assertTrue(Arrays.equals((new String[]{}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY);        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));        assertTrue(Arrays.equals((new String[]{}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        String[] stringArrayNull = new String []{null};        newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);                assertTrue(Arrays.equals((new String[]{null, null}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        // boolean        assertTrue( Arrays.equals( new boolean[] { true, false, false, true },             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) );        assertTrue( Arrays.equals( new boolean[] { false, true },             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) );        assertTrue( Arrays.equals( new boolean[] { true, false },             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) );        // char        assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' },             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) );        assertTrue( Arrays.equals( new char[] { 'c', 'd' },             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) );        assertTrue( Arrays.equals( new char[] { 'a', 'b' },             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) );        // byte        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 },             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) );        assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 },             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) );        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 },             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) );        // short        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 },             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) );        assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 },             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) );        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 },             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) );        // int        assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 },             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) );        assertTrue( Arrays.equals( new int[] { -1000, -1 },             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) );        assertTrue( Arrays.equals( new int[] { 1, 1000 },             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) );        // long        assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L },             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) );        assertTrue( Arrays.equals( new long[] { 1000L, -1000L },             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) );                assertTrue( Arrays.equals( new long[] { 1L, -1L },             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) );        // float        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f },             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) );        assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f },             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) );        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f },             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) );        // double        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 },             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) );        assertTrue( Arrays.equals( new double[] { 0, 9.99 },             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) );        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI },             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) );    }            public void testAddObjectAtIndex() {        Object[] newArray;        newArray = ArrayUtils.add((Object[])null, 0, null);        assertTrue(Arrays.equals((new Object[]{null}), newArray));        assertEquals(Object.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.add((Object[])null, 0, "a");        assertTrue(Arrays.equals((new String[]{"a"}), newArray));        assertTrue(Arrays.equals((new Object[]{"a"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        String[] stringArray1 = new String[]{"a", "b", "c"};        newArray = ArrayUtils.add(stringArray1, 0, null);        assertTrue(Arrays.equals((new String[]{null, "a", "b", "c"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(stringArray1, 1, null);        assertTrue(Arrays.equals((new String[]{"a", null, "b", "c"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(stringArray1, 3, null);        assertTrue(Arrays.equals((new String[]{"a", "b", "c", null}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());        newArray = ArrayUtils.add(stringArray1, 3, "d");        assertTrue(Arrays.equals((new String[]{"a", "b", "c", "d"}), newArray));        assertEquals(String.class, newArray.getClass().getComponentType());                assertEquals(String.class, newArray.getClass().getComponentType());        Object[] o = new Object[] {"1", "2", "4"};        Object[] result = ArrayUtils.add(o, 2, "3");        Object[] result2 = ArrayUtils.add(o, 3, "5");                assertNotNull(result);        assertEquals(4, result.length);        assertEquals("1", result[0]);        assertEquals("2", result[1]);        assertEquals("3", result[2]);        assertEquals("4", result[3]);        assertNotNull(result2);        assertEquals(4, result2.length);        assertEquals("1", result2[0]);        assertEquals("2", result2[1]);        assertEquals("4", result2[2]);        assertEquals("5", result2[3]);        // boolean tests        boolean[] booleanArray = ArrayUtils.add( null, 0, true );        assertTrue( Arrays.equals( new boolean[] { true }, booleanArray ) );        try {            booleanArray = ArrayUtils.add( null, -1, true );        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 0", e.getMessage());        }        booleanArray = ArrayUtils.add( new boolean[] { true }, 0, false);        assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );        booleanArray = ArrayUtils.add( new boolean[] { false }, 1, true);        assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );        booleanArray = ArrayUtils.add( new boolean[] { true, false }, 1, true);        assertTrue( Arrays.equals( new boolean[] { true, true, false }, booleanArray ) );        try {            booleanArray = ArrayUtils.add( new boolean[] { true, false }, 4, true);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: 4, Length: 2", e.getMessage());        }        try {            booleanArray = ArrayUtils.add( new boolean[] { true, false }, -1, true);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 2", e.getMessage());        }        // char tests        char[] charArray = ArrayUtils.add( (char[]) null, 0, 'a' );        assertTrue( Arrays.equals( new char[] { 'a' }, charArray ) );        try {            charArray = ArrayUtils.add( (char[]) null, -1, 'a' );        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 0", e.getMessage());        }        charArray = ArrayUtils.add( new char[] { 'a' }, 0, 'b');        assertTrue( Arrays.equals( new char[] { 'b', 'a' }, charArray ) );        charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 0, 'c');        assertTrue( Arrays.equals( new char[] { 'c', 'a', 'b' }, charArray ) );        charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 1, 'k');        assertTrue( Arrays.equals( new char[] { 'a', 'k', 'b' }, charArray ) );        charArray = ArrayUtils.add( new char[] { 'a', 'b', 'c' }, 1, 't');        assertTrue( Arrays.equals( new char[] { 'a', 't', 'b', 'c' }, charArray ) );        try {            charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c');        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: 4, Length: 2", e.getMessage());        }        try {            charArray = ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c');        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 2", e.getMessage());        }        // short tests        short[] shortArray = ArrayUtils.add( new short[] { 1 }, 0, (short) 2);        assertTrue( Arrays.equals( new short[] { 2, 1 }, shortArray ) );        try {            shortArray = ArrayUtils.add( (short[]) null, -1, (short) 2);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 0", e.getMessage());        }        shortArray = ArrayUtils.add( new short[] { 2, 6 }, 2, (short) 10);        assertTrue( Arrays.equals( new short[] { 2, 6, 10 }, shortArray ) );        shortArray = ArrayUtils.add( new short[] { 2, 6 }, 0, (short) -4);        assertTrue( Arrays.equals( new short[] { -4, 2, 6 }, shortArray ) );        shortArray = ArrayUtils.add( new short[] { 2, 6, 3 }, 2, (short) 1);        assertTrue( Arrays.equals( new short[] { 2, 6, 1, 3 }, shortArray ) );        try {            shortArray = ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: 4, Length: 2", e.getMessage());        }        try {            shortArray = ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 2", e.getMessage());        }        // byte tests        byte[] byteArray = ArrayUtils.add( new byte[] { 1 }, 0, (byte) 2);        assertTrue( Arrays.equals( new byte[] { 2, 1 }, byteArray ) );        try {            byteArray = ArrayUtils.add( (byte[]) null, -1, (byte) 2);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 0", e.getMessage());        }        byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 2, (byte) 3);        assertTrue( Arrays.equals( new byte[] { 2, 6, 3 }, byteArray ) );        byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 0, (byte) 1);        assertTrue( Arrays.equals( new byte[] { 1, 2, 6 }, byteArray ) );        byteArray = ArrayUtils.add( new byte[] { 2, 6, 3 }, 2, (byte) 1);        assertTrue( Arrays.equals( new byte[] { 2, 6, 1, 3 }, byteArray ) );        try {            byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: 4, Length: 2", e.getMessage());        }        try {            byteArray = ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 2", e.getMessage());        }        // int tests        int[] intArray = ArrayUtils.add( new int[] { 1 }, 0, 2);        assertTrue( Arrays.equals( new int[] { 2, 1 }, intArray ) );        try {            intArray = ArrayUtils.add( (int[]) null, -1, 2);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 0", e.getMessage());        }        intArray = ArrayUtils.add( new int[] { 2, 6 }, 2, 10);        assertTrue( Arrays.equals( new int[] { 2, 6, 10 }, intArray ) );        intArray = ArrayUtils.add( new int[] { 2, 6 }, 0, -4);        assertTrue( Arrays.equals( new int[] { -4, 2, 6 }, intArray ) );        intArray = ArrayUtils.add( new int[] { 2, 6, 3 }, 2, 1);        assertTrue( Arrays.equals( new int[] { 2, 6, 1, 3 }, intArray ) );        try {            intArray = ArrayUtils.add( new int[] { 2, 6 }, 4, 10);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: 4, Length: 2", e.getMessage());        }        try {            intArray = ArrayUtils.add( new int[] { 2, 6 }, -1, 10);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 2", e.getMessage());        }        // long tests        long[] longArray = ArrayUtils.add( new long[] { 1L }, 0, 2L);        assertTrue( Arrays.equals( new long[] { 2L, 1L }, longArray ) );        try {            longArray = ArrayUtils.add( (long[]) null, -1, 2L);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 0", e.getMessage());        }        longArray = ArrayUtils.add( new long[] { 2L, 6L }, 2, 10L);        assertTrue( Arrays.equals( new long[] { 2L, 6L, 10L }, longArray ) );        longArray = ArrayUtils.add( new long[] { 2L, 6L }, 0, -4L);        assertTrue( Arrays.equals( new long[] { -4L, 2L, 6L }, longArray ) );        longArray = ArrayUtils.add( new long[] { 2L, 6L, 3L }, 2, 1L);        assertTrue( Arrays.equals( new long[] { 2L, 6L, 1L, 3L }, longArray ) );        try {            longArray = ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: 4, Length: 2", e.getMessage());        }        try {            longArray = ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 2", e.getMessage());        }        // float tests        float[] floatArray = ArrayUtils.add( new float[] { 1.1f }, 0, 2.2f);        assertTrue( Arrays.equals( new float[] { 2.2f, 1.1f }, floatArray ) );        try {            floatArray = ArrayUtils.add( (float[]) null, -1, 2.2f);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 0", e.getMessage());        }        floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 2, 10.5f);        assertTrue( Arrays.equals( new float[] { 2.3f, 6.4f, 10.5f }, floatArray ) );        floatArray = ArrayUtils.add( new float[] { 2.6f, 6.7f }, 0, -4.8f);        assertTrue( Arrays.equals( new float[] { -4.8f, 2.6f, 6.7f }, floatArray ) );        floatArray = ArrayUtils.add( new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f);        assertTrue( Arrays.equals( new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray ) );        try {            floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: 4, Length: 2", e.getMessage());        }        try {            floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 2", e.getMessage());        }        // double tests        double[] doubleArray = ArrayUtils.add( new double[] { 1.1 }, 0, 2.2);        assertTrue( Arrays.equals( new double[] { 2.2, 1.1 }, doubleArray ) );        try {          doubleArray = ArrayUtils.add( (double[]) null, -1, 2.2);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 0", e.getMessage());        }        doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 2, 10.5);        assertTrue( Arrays.equals( new double[] { 2.3, 6.4, 10.5 }, doubleArray ) );        doubleArray = ArrayUtils.add( new double[] { 2.6, 6.7 }, 0, -4.8);        assertTrue( Arrays.equals( new double[] { -4.8, 2.6, 6.7 }, doubleArray ) );        doubleArray = ArrayUtils.add( new double[] { 2.9, 6.0, 0.3 }, 2, 1.0);        assertTrue( Arrays.equals( new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray ) );        try {            doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: 4, Length: 2", e.getMessage());        }        try {            doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5);        } catch(IndexOutOfBoundsException e) {            assertEquals("Index: -1, Length: 2", e.getMessage());        }    }    }
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.StringUtils} - Substring methods * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Phil Steitz * @version $Id$ */public class StringUtilsSubstringTest extends TestCase {    private static final String FOO = "foo";    private static final String BAR = "bar";    private static final String BAZ = "baz";    private static final String FOOBAR = "foobar";    private static final String SENTENCE = "foo bar baz";    public StringUtilsSubstringTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(StringUtilsSubstringTest.class);        suite.setName("StringUtilsSubstring Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testSubstring_StringInt() {        assertEquals(null, StringUtils.substring(null, 0));        assertEquals("", StringUtils.substring("", 0));        assertEquals("", StringUtils.substring("", 2));                assertEquals("", StringUtils.substring(SENTENCE, 80));        assertEquals(BAZ, StringUtils.substring(SENTENCE, 8));        assertEquals(BAZ, StringUtils.substring(SENTENCE, -3));        assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0));        assertEquals("abc", StringUtils.substring("abc", -4));        assertEquals("abc", StringUtils.substring("abc", -3));        assertEquals("bc", StringUtils.substring("abc", -2));        assertEquals("c", StringUtils.substring("abc", -1));        assertEquals("abc", StringUtils.substring("abc", 0));        assertEquals("bc", StringUtils.substring("abc", 1));        assertEquals("c", StringUtils.substring("abc", 2));        assertEquals("", StringUtils.substring("abc", 3));        assertEquals("", StringUtils.substring("abc", 4));    }        public void testSubstring_StringIntInt() {        assertEquals(null, StringUtils.substring(null, 0, 0));        assertEquals(null, StringUtils.substring(null, 1, 2));        assertEquals("", StringUtils.substring("", 0, 0));        assertEquals("", StringUtils.substring("", 1, 2));        assertEquals("", StringUtils.substring("", -2, -1));                assertEquals("", StringUtils.substring(SENTENCE, 8, 6));        assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3));        assertEquals("o", StringUtils.substring(SENTENCE, -9, 3));        assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8));        assertEquals("o", StringUtils.substring(SENTENCE, -9, -8));        assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80));        assertEquals("", StringUtils.substring(SENTENCE, 2, 2));        assertEquals("b",StringUtils.substring("abc", -2, -1));    }               public void testLeft_String() {        assertSame(null, StringUtils.left(null, -1));        assertSame(null, StringUtils.left(null, 0));        assertSame(null, StringUtils.left(null, 2));                assertEquals("", StringUtils.left("", -1));        assertEquals("", StringUtils.left("", 0));        assertEquals("", StringUtils.left("", 2));                assertEquals("", StringUtils.left(FOOBAR, -1));        assertEquals("", StringUtils.left(FOOBAR, 0));        assertEquals(FOO, StringUtils.left(FOOBAR, 3));        assertSame(FOOBAR, StringUtils.left(FOOBAR, 80));    }        public void testRight_String() {        assertSame(null, StringUtils.right(null, -1));        assertSame(null, StringUtils.right(null, 0));        assertSame(null, StringUtils.right(null, 2));                assertEquals("", StringUtils.right("", -1));        assertEquals("", StringUtils.right("", 0));        assertEquals("", StringUtils.right("", 2));                assertEquals("", StringUtils.right(FOOBAR, -1));        assertEquals("", StringUtils.right(FOOBAR, 0));        assertEquals(BAR, StringUtils.right(FOOBAR, 3));        assertSame(FOOBAR, StringUtils.right(FOOBAR, 80));    }        public void testMid_String() {        assertSame(null, StringUtils.mid(null, -1, 0));        assertSame(null, StringUtils.mid(null, 0, -1));        assertSame(null, StringUtils.mid(null, 3, 0));        assertSame(null, StringUtils.mid(null, 3, 2));                assertEquals("", StringUtils.mid("", 0, -1));        assertEquals("", StringUtils.mid("", 0, 0));        assertEquals("", StringUtils.mid("", 0, 2));                assertEquals("", StringUtils.mid(FOOBAR, 3, -1));        assertEquals("", StringUtils.mid(FOOBAR, 3, 0));        assertEquals("b", StringUtils.mid(FOOBAR, 3, 1));        assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3));        assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3));        assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80));        assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80));        assertEquals("", StringUtils.mid(FOOBAR, 9, 3));        assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3));    }        //-----------------------------------------------------------------------    public void testSubstringBefore_StringString() {        assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX"));        assertEquals(null, StringUtils.substringBefore(null, null));        assertEquals(null, StringUtils.substringBefore(null, ""));        assertEquals(null, StringUtils.substringBefore(null, "XX"));        assertEquals("", StringUtils.substringBefore("", null));        assertEquals("", StringUtils.substringBefore("", ""));        assertEquals("", StringUtils.substringBefore("", "XX"));                assertEquals("foo", StringUtils.substringBefore("foo", null));        assertEquals("foo", StringUtils.substringBefore("foo", "b"));        assertEquals("f", StringUtils.substringBefore("foot", "o"));        assertEquals("", StringUtils.substringBefore("abc", "a"));        assertEquals("a", StringUtils.substringBefore("abcba", "b"));        assertEquals("ab", StringUtils.substringBefore("abc", "c"));        assertEquals("", StringUtils.substringBefore("abc", ""));    }        public void testSubstringAfter_StringString() {        assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX"));                assertEquals(null, StringUtils.substringAfter(null, null));        assertEquals(null, StringUtils.substringAfter(null, ""));        assertEquals(null, StringUtils.substringAfter(null, "XX"));        assertEquals("", StringUtils.substringAfter("", null));        assertEquals("", StringUtils.substringAfter("", ""));        assertEquals("", StringUtils.substringAfter("", "XX"));                assertEquals("", StringUtils.substringAfter("foo", null));        assertEquals("ot", StringUtils.substringAfter("foot", "o"));        assertEquals("bc", StringUtils.substringAfter("abc", "a"));        assertEquals("cba", StringUtils.substringAfter("abcba", "b"));        assertEquals("", StringUtils.substringAfter("abc", "c"));        assertEquals("abc", StringUtils.substringAfter("abc", ""));        assertEquals("", StringUtils.substringAfter("abc", "d"));    }    public void testSubstringBeforeLast_StringString() {        assertEquals("fooXXbar", StringUtils.substringBeforeLast("fooXXbarXXbaz", "XX"));        assertEquals(null, StringUtils.substringBeforeLast(null, null));        assertEquals(null, StringUtils.substringBeforeLast(null, ""));        assertEquals(null, StringUtils.substringBeforeLast(null, "XX"));        assertEquals("", StringUtils.substringBeforeLast("", null));        assertEquals("", StringUtils.substringBeforeLast("", ""));        assertEquals("", StringUtils.substringBeforeLast("", "XX"));        assertEquals("foo", StringUtils.substringBeforeLast("foo", null));        assertEquals("foo", StringUtils.substringBeforeLast("foo", "b"));        assertEquals("fo", StringUtils.substringBeforeLast("foo", "o"));        assertEquals("abc\r\n", StringUtils.substringBeforeLast("abc\r\n", "d"));        assertEquals("abc", StringUtils.substringBeforeLast("abcdabc", "d"));        assertEquals("abcdabc", StringUtils.substringBeforeLast("abcdabcd", "d"));        assertEquals("a", StringUtils.substringBeforeLast("abc", "b"));        assertEquals("abc ", StringUtils.substringBeforeLast("abc \n", "\n"));        assertEquals("a", StringUtils.substringBeforeLast("a", null));        assertEquals("a", StringUtils.substringBeforeLast("a", ""));        assertEquals("", StringUtils.substringBeforeLast("a", "a"));    }        public void testSubstringAfterLast_StringString() {        assertEquals("baz", StringUtils.substringAfterLast("fooXXbarXXbaz", "XX"));        assertEquals(null, StringUtils.substringAfterLast(null, null));        assertEquals(null, StringUtils.substringAfterLast(null, ""));        assertEquals(null, StringUtils.substringAfterLast(null, "XX"));        assertEquals("", StringUtils.substringAfterLast("", null));        assertEquals("", StringUtils.substringAfterLast("", ""));        assertEquals("", StringUtils.substringAfterLast("", "a"));        assertEquals("", StringUtils.substringAfterLast("foo", null));        assertEquals("", StringUtils.substringAfterLast("foo", "b"));        assertEquals("t", StringUtils.substringAfterLast("foot", "o"));        assertEquals("bc", StringUtils.substringAfterLast("abc", "a"));        assertEquals("a", StringUtils.substringAfterLast("abcba", "b"));        assertEquals("", StringUtils.substringAfterLast("abc", "c"));        assertEquals("", StringUtils.substringAfterLast("", "d"));        assertEquals("", StringUtils.substringAfterLast("abc", ""));    }                    //-----------------------------------------------------------------------    public void testSubstringBetween_StringString() {        assertEquals(null, StringUtils.substringBetween(null, "tag"));        assertEquals("", StringUtils.substringBetween("", ""));        assertEquals(null, StringUtils.substringBetween("", "abc"));        assertEquals("", StringUtils.substringBetween("    ", " "));        assertEquals(null, StringUtils.substringBetween("abc", null));        assertEquals("", StringUtils.substringBetween("abc", ""));        assertEquals(null, StringUtils.substringBetween("abc", "a"));        assertEquals("bc", StringUtils.substringBetween("abca", "a"));        assertEquals("bc", StringUtils.substringBetween("abcabca", "a"));        assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n"));    }                public void testSubstringBetween_StringStringString() {        assertEquals(null, StringUtils.substringBetween(null, "", ""));        assertEquals("", StringUtils.substringBetween("", "", ""));        assertEquals("", StringUtils.substringBetween("foo", "", ""));        assertEquals(null, StringUtils.substringBetween("foo", "", "]"));        assertEquals(null, StringUtils.substringBetween("foo", "[", "]"));        assertEquals("", StringUtils.substringBetween("    ", " ", "  "));        assertEquals("bar", StringUtils.substringBetween("<foo>bar</foo>", "<foo>", "</foo>") );    }   /**     * Tests the substringsBetween method that returns an String Array of substrings.     */    public void testSubstringsBetween_StringStringString() {        String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]");        assertEquals(3, results.length);        assertEquals("one", results[0]);        assertEquals("two", results[1]);        assertEquals("three", results[2]);        results = StringUtils.substringsBetween("[one], [two], three", "[", "]");        assertEquals(2, results.length);        assertEquals("one", results[0]);        assertEquals("two", results[1]);        results = StringUtils.substringsBetween("[one], [two], three]", "[", "]");        assertEquals(2, results.length);        assertEquals("one", results[0]);        assertEquals("two", results[1]);        results = StringUtils.substringsBetween("[one], two], three]", "[", "]");        assertEquals(1, results.length);        assertEquals("one", results[0]);        results = StringUtils.substringsBetween("one], two], [three]", "[", "]");        assertEquals(1, results.length);        assertEquals("three", results[0]);        // 'ab hello ba' will match, but 'ab non ba' won't        // this is because the 'a' is shared between the two and can't be matched twice        results = StringUtils.substringsBetween("aabhellobabnonba", "ab", "ba");        assertEquals(1, results.length);        assertEquals("hello", results[0]);        results = StringUtils.substringsBetween("one, two, three", "[", "]");        assertNull(results);        results = StringUtils.substringsBetween("[one, two, three", "[", "]");        assertNull(results);        results = StringUtils.substringsBetween("one, two, three]", "[", "]");        assertNull(results);        results = StringUtils.substringsBetween("[one], [two], [three]", "[", null);        assertNull(results);        results = StringUtils.substringsBetween("[one], [two], [three]", null, "]");        assertNull(results);        results = StringUtils.substringsBetween("[one], [two], [three]", "", "");        assertNull(results);        results = StringUtils.substringsBetween(null, "[", "]");        assertNull(results);        results = StringUtils.substringsBetween("", "[", "]");        assertEquals(0, results.length);    }    //-----------------------------------------------------------------------    public void testCountMatches_String() {        assertEquals(0, StringUtils.countMatches(null, null));        assertEquals(0, StringUtils.countMatches("blah", null));        assertEquals(0, StringUtils.countMatches(null, "DD"));        assertEquals(0, StringUtils.countMatches("x", ""));        assertEquals(0, StringUtils.countMatches("", ""));        assertEquals(3,              StringUtils.countMatches("one long someone sentence of one", "one"));        assertEquals(0,              StringUtils.countMatches("one long someone sentence of one", "two"));        assertEquals(4,              StringUtils.countMatches("oooooooooooo", "ooo"));    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Unit tests for WordUtils class. *  * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Stephen Colebourne * @version $Id$ */public class WordUtilsTest extends TestCase {    public WordUtilsTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(WordUtilsTest.class);        suite.setName("WordUtilsTests");        return suite;    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new WordUtils());        Constructor[] cons = WordUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(WordUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(WordUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testWrap_StringInt() {        assertEquals(null, WordUtils.wrap(null, 20));        assertEquals(null, WordUtils.wrap(null, -1));                assertEquals("", WordUtils.wrap("", 20));        assertEquals("", WordUtils.wrap("", -1));                // normal        String systemNewLine = System.getProperty("line.separator");        String input = "Here is one line of text that is going to be wrapped after 20 columns.";        String expected = "Here is one line of" + systemNewLine + "text that is going"             + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns.";        assertEquals(expected, WordUtils.wrap(input, 20));                // long word at end        input = "Click here to jump to the jakarta website - http://jakarta.apache.org";        expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine             + "website -" + systemNewLine + "http://jakarta.apache.org";        assertEquals(expected, WordUtils.wrap(input, 20));                // long word in middle        input = "Click here, http://jakarta.apache.org, to jump to the jakarta website";        expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine             + "to jump to the" + systemNewLine + "jakarta website";        assertEquals(expected, WordUtils.wrap(input, 20));    }        public void testWrap_StringIntStringBoolean() {        assertEquals(null, WordUtils.wrap(null, 20, "\n", false));        assertEquals(null, WordUtils.wrap(null, 20, "\n", true));        assertEquals(null, WordUtils.wrap(null, 20, null, true));        assertEquals(null, WordUtils.wrap(null, 20, null, false));        assertEquals(null, WordUtils.wrap(null, -1, null, true));        assertEquals(null, WordUtils.wrap(null, -1, null, false));                assertEquals("", WordUtils.wrap("", 20, "\n", false));        assertEquals("", WordUtils.wrap("", 20, "\n", true));        assertEquals("", WordUtils.wrap("", 20, null, false));        assertEquals("", WordUtils.wrap("", 20, null, true));        assertEquals("", WordUtils.wrap("", -1, null, false));        assertEquals("", WordUtils.wrap("", -1, null, true));                // normal        String input = "Here is one line of text that is going to be wrapped after 20 columns.";        String expected = "Here is one line of\ntext that is going\nto be wrapped after\n20 columns.";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));        assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));        // unusual newline char        input = "Here is one line of text that is going to be wrapped after 20 columns.";        expected = "Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns.";        assertEquals(expected, WordUtils.wrap(input, 20, "<br />", false));        assertEquals(expected, WordUtils.wrap(input, 20, "<br />", true));        // short line length        input = "Here is one line";        expected = "Here\nis one\nline";        assertEquals(expected, WordUtils.wrap(input, 6, "\n", false));        expected = "Here\nis\none\nline";        assertEquals(expected, WordUtils.wrap(input, 2, "\n", false));        assertEquals(expected, WordUtils.wrap(input, -1, "\n", false));        // system newline char        String systemNewLine = System.getProperty("line.separator");        input = "Here is one line of text that is going to be wrapped after 20 columns.";        expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine             + "to be wrapped after" + systemNewLine + "20 columns.";        assertEquals(expected, WordUtils.wrap(input, 20, null, false));        assertEquals(expected, WordUtils.wrap(input, 20, null, true));        // with extra spaces        input = " Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns.";        expected = "Here:  is  one  line\nof  text  that  is \ngoing  to  be \nwrapped  after  20 \ncolumns.";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));        assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));                // with tab        input = "Here is\tone line of text that is going to be wrapped after 20 columns.";        expected = "Here is\tone line of\ntext that is going\nto be wrapped after\n20 columns.";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));        assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));                // with tab at wrapColumn        input = "Here is one line of\ttext that is going to be wrapped after 20 columns.";        expected = "Here is one line\nof\ttext that is\ngoing to be wrapped\nafter 20 columns.";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));        assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));                // difference because of long word        input = "Click here to jump to the jakarta website - http://jakarta.apache.org";        expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apache.org";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));        expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apach\ne.org";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));                // difference because of long word in middle        input = "Click here, http://jakarta.apache.org, to jump to the jakarta website";        expected = "Click here,\nhttp://jakarta.apache.org,\nto jump to the\njakarta website";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));        expected = "Click here,\nhttp://jakarta.apach\ne.org, to jump to\nthe jakarta website";        assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));//        System.err.println(expected);//        System.err.println(WordUtils.wrap(input, 20, "\n", false));    }        //-----------------------------------------------------------------------    public void testCapitalize_String() {        assertEquals(null, WordUtils.capitalize(null));        assertEquals("", WordUtils.capitalize(""));        assertEquals("  ", WordUtils.capitalize("  "));                assertEquals("I", WordUtils.capitalize("I") );        assertEquals("I", WordUtils.capitalize("i") );        assertEquals("I Am Here 123", WordUtils.capitalize("i am here 123") );        assertEquals("I Am Here 123", WordUtils.capitalize("I Am Here 123") );        assertEquals("I Am HERE 123", WordUtils.capitalize("i am HERE 123") );        assertEquals("I AM HERE 123", WordUtils.capitalize("I AM HERE 123") );    }        public void testCapitalizeWithDelimiters_String() {        assertEquals(null, WordUtils.capitalize(null, null));        assertEquals("", WordUtils.capitalize("", new char[0]));        assertEquals("  ", WordUtils.capitalize("  ", new char[0]));                char[] chars = new char[] { '-', '+', ' ', '@' };        assertEquals("I", WordUtils.capitalize("I", chars) );        assertEquals("I", WordUtils.capitalize("i", chars) );        assertEquals("I-Am Here+123", WordUtils.capitalize("i-am here+123", chars) );        assertEquals("I Am+Here-123", WordUtils.capitalize("I Am+Here-123", chars) );        assertEquals("I+Am-HERE 123", WordUtils.capitalize("i+am-HERE 123", chars) );        assertEquals("I-AM HERE+123", WordUtils.capitalize("I-AM HERE+123", chars) );        chars = new char[] {'.'};        assertEquals("I aM.Fine", WordUtils.capitalize("i aM.fine", chars) );        assertEquals("I Am.fine", WordUtils.capitalize("i am.fine", null) );    }    public void testCapitalizeFully_String() {        assertEquals(null, WordUtils.capitalizeFully(null));        assertEquals("", WordUtils.capitalizeFully(""));        assertEquals("  ", WordUtils.capitalizeFully("  "));                assertEquals("I", WordUtils.capitalizeFully("I") );        assertEquals("I", WordUtils.capitalizeFully("i") );        assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123") );        assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123") );        assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123") );        assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123") );    }        public void testCapitalizeFullyWithDelimiters_String() {        assertEquals(null, WordUtils.capitalizeFully(null, null));        assertEquals("", WordUtils.capitalizeFully("", new char[0]));        assertEquals("  ", WordUtils.capitalizeFully("  ", new char[0]));                char[] chars = new char[] { '-', '+', ' ', '@' };        assertEquals("I", WordUtils.capitalizeFully("I", chars) );        assertEquals("I", WordUtils.capitalizeFully("i", chars) );        assertEquals("I-Am Here+123", WordUtils.capitalizeFully("i-am here+123", chars) );        assertEquals("I Am+Here-123", WordUtils.capitalizeFully("I Am+Here-123", chars) );        assertEquals("I+Am-Here 123", WordUtils.capitalizeFully("i+am-HERE 123", chars) );        assertEquals("I-Am Here+123", WordUtils.capitalizeFully("I-AM HERE+123", chars) );        chars = new char[] {'.'};        assertEquals("I am.Fine", WordUtils.capitalizeFully("i aM.fine", chars) );        assertEquals("I Am.fine", WordUtils.capitalizeFully("i am.fine", null) );    }    public void testUncapitalize_String() {        assertEquals(null, WordUtils.uncapitalize(null));        assertEquals("", WordUtils.uncapitalize(""));        assertEquals("  ", WordUtils.uncapitalize("  "));                assertEquals("i", WordUtils.uncapitalize("I") );        assertEquals("i", WordUtils.uncapitalize("i") );        assertEquals("i am here 123", WordUtils.uncapitalize("i am here 123") );        assertEquals("i am here 123", WordUtils.uncapitalize("I Am Here 123") );        assertEquals("i am hERE 123", WordUtils.uncapitalize("i am HERE 123") );        assertEquals("i aM hERE 123", WordUtils.uncapitalize("I AM HERE 123") );    }        public void testUncapitalizeWithDelimiters_String() {        assertEquals(null, WordUtils.uncapitalize(null, null));        assertEquals("", WordUtils.uncapitalize("", new char[0]));        assertEquals("  ", WordUtils.uncapitalize("  ", new char[0]));                char[] chars = new char[] { '-', '+', ' ', '@' };        assertEquals("i", WordUtils.uncapitalize("I", chars) );        assertEquals("i", WordUtils.uncapitalize("i", chars) );        assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) );        assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) );        assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars) );        assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars) );        chars = new char[] {'.'};        assertEquals("i AM.fINE", WordUtils.uncapitalize("I AM.FINE", chars) );        assertEquals("i aM.FINE", WordUtils.uncapitalize("I AM.FINE", null) );    }    //-----------------------------------------------------------------------    public void testInitials_String() {        assertEquals(null, WordUtils.initials(null));        assertEquals("", WordUtils.initials(""));        assertEquals("", WordUtils.initials("  "));        assertEquals("I", WordUtils.initials("I"));        assertEquals("i", WordUtils.initials("i"));        assertEquals("BJL", WordUtils.initials("Ben John Lee"));        assertEquals("BJ", WordUtils.initials("Ben J.Lee"));        assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee"));        assertEquals("iah1", WordUtils.initials("i am here 123"));    }    // -----------------------------------------------------------------------    public void testInitials_String_charArray() {        char[] array = null;        assertEquals(null, WordUtils.initials(null, array));        assertEquals("", WordUtils.initials("", array));        assertEquals("", WordUtils.initials("  ", array));        assertEquals("I", WordUtils.initials("I", array));        assertEquals("i", WordUtils.initials("i", array));        assertEquals("S", WordUtils.initials("SJC", array));        assertEquals("BJL", WordUtils.initials("Ben John Lee", array));        assertEquals("BJ", WordUtils.initials("Ben J.Lee", array));        assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee", array));        assertEquals("KO", WordUtils.initials("Kay O'Murphy", array));        assertEquals("iah1", WordUtils.initials("i am here 123", array));                array = new char[0];        assertEquals(null, WordUtils.initials(null, array));        assertEquals("", WordUtils.initials("", array));        assertEquals("", WordUtils.initials("  ", array));        assertEquals("", WordUtils.initials("I", array));        assertEquals("", WordUtils.initials("i", array));        assertEquals("", WordUtils.initials("SJC", array));        assertEquals("", WordUtils.initials("Ben John Lee", array));        assertEquals("", WordUtils.initials("Ben J.Lee", array));        assertEquals("", WordUtils.initials(" Ben   John  . Lee", array));        assertEquals("", WordUtils.initials("Kay O'Murphy", array));        assertEquals("", WordUtils.initials("i am here 123", array));                array = " ".toCharArray();        assertEquals(null, WordUtils.initials(null, array));        assertEquals("", WordUtils.initials("", array));        assertEquals("", WordUtils.initials("  ", array));        assertEquals("I", WordUtils.initials("I", array));        assertEquals("i", WordUtils.initials("i", array));        assertEquals("S", WordUtils.initials("SJC", array));        assertEquals("BJL", WordUtils.initials("Ben John Lee", array));        assertEquals("BJ", WordUtils.initials("Ben J.Lee", array));        assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee", array));        assertEquals("KO", WordUtils.initials("Kay O'Murphy", array));        assertEquals("iah1", WordUtils.initials("i am here 123", array));                array = " .".toCharArray();        assertEquals(null, WordUtils.initials(null, array));        assertEquals("", WordUtils.initials("", array));        assertEquals("", WordUtils.initials("  ", array));        assertEquals("I", WordUtils.initials("I", array));        assertEquals("i", WordUtils.initials("i", array));        assertEquals("S", WordUtils.initials("SJC", array));        assertEquals("BJL", WordUtils.initials("Ben John Lee", array));        assertEquals("BJL", WordUtils.initials("Ben J.Lee", array));        assertEquals("BJL", WordUtils.initials(" Ben   John  . Lee", array));        assertEquals("KO", WordUtils.initials("Kay O'Murphy", array));        assertEquals("iah1", WordUtils.initials("i am here 123", array));                array = " .'".toCharArray();        assertEquals(null, WordUtils.initials(null, array));        assertEquals("", WordUtils.initials("", array));        assertEquals("", WordUtils.initials("  ", array));        assertEquals("I", WordUtils.initials("I", array));        assertEquals("i", WordUtils.initials("i", array));        assertEquals("S", WordUtils.initials("SJC", array));        assertEquals("BJL", WordUtils.initials("Ben John Lee", array));        assertEquals("BJL", WordUtils.initials("Ben J.Lee", array));        assertEquals("BJL", WordUtils.initials(" Ben   John  . Lee", array));        assertEquals("KOM", WordUtils.initials("Kay O'Murphy", array));        assertEquals("iah1", WordUtils.initials("i am here 123", array));                array = "SIJo1".toCharArray();        assertEquals(null, WordUtils.initials(null, array));        assertEquals("", WordUtils.initials("", array));        assertEquals(" ", WordUtils.initials("  ", array));        assertEquals("", WordUtils.initials("I", array));        assertEquals("i", WordUtils.initials("i", array));        assertEquals("C", WordUtils.initials("SJC", array));        assertEquals("Bh", WordUtils.initials("Ben John Lee", array));        assertEquals("B.", WordUtils.initials("Ben J.Lee", array));        assertEquals(" h", WordUtils.initials(" Ben   John  . Lee", array));        assertEquals("K", WordUtils.initials("Kay O'Murphy", array));        assertEquals("i2", WordUtils.initials("i am here 123", array));    }    // -----------------------------------------------------------------------    public void testSwapCase_String() {        assertEquals(null, WordUtils.swapCase(null));        assertEquals("", WordUtils.swapCase(""));        assertEquals("  ", WordUtils.swapCase("  "));                assertEquals("i", WordUtils.swapCase("I") );        assertEquals("I", WordUtils.swapCase("i") );        assertEquals("I AM HERE 123", WordUtils.swapCase("i am here 123") );        assertEquals("i aM hERE 123", WordUtils.swapCase("I Am Here 123") );        assertEquals("I AM here 123", WordUtils.swapCase("i am HERE 123") );        assertEquals("i am here 123", WordUtils.swapCase("I AM HERE 123") );        String test = "This String contains a TitleCase character: \u01C8";        String expect = "tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9";        assertEquals(expect, WordUtils.swapCase(test));    }    // -----------------------------------------------------------------------    public void testAbbreviate() {        // check null and empty are returned respectively        assertNull(WordUtils.abbreviate(null, 1,-1,""));        assertEquals(StringUtils.EMPTY, WordUtils.abbreviate("", 1,-1,""));        // test upper limit        assertEquals("01234", WordUtils.abbreviate("0123456789", 0,5,""));        assertEquals("01234", WordUtils.abbreviate("0123456789", 5, 2,""));        assertEquals("012", WordUtils.abbreviate("012 3456789", 2, 5,""));        assertEquals("012 3", WordUtils.abbreviate("012 3456789", 5, 2,""));        assertEquals("0123456789", WordUtils.abbreviate("0123456789", 0,-1,""));        // test upper limit + append string        assertEquals("01234-", WordUtils.abbreviate("0123456789", 0,5,"-"));        assertEquals("01234-", WordUtils.abbreviate("0123456789", 5, 2,"-"));        assertEquals("012", WordUtils.abbreviate("012 3456789", 2, 5, null));        assertEquals("012 3", WordUtils.abbreviate("012 3456789", 5, 2,""));        assertEquals("0123456789", WordUtils.abbreviate("0123456789", 0,-1,""));        // test lower value        assertEquals("012", WordUtils.abbreviate("012 3456789", 0,5, null));        assertEquals("01234", WordUtils.abbreviate("01234 56789", 5, 10, null));        assertEquals("01 23 45 67", WordUtils.abbreviate("01 23 45 67 89", 9, -1, null));        assertEquals("01 23 45 6", WordUtils.abbreviate("01 23 45 67 89", 9, 10, null));        assertEquals("0123456789", WordUtils.abbreviate("0123456789", 15, 20, null));        // test lower value + append        assertEquals("012", WordUtils.abbreviate("012 3456789", 0,5, null));        assertEquals("01234-", WordUtils.abbreviate("01234 56789", 5, 10, "-"));        assertEquals("01 23 45 67abc", WordUtils.abbreviate("01 23 45 67 89", 9, -1, "abc"));        assertEquals("01 23 45 6", WordUtils.abbreviate("01 23 45 67 89", 9, 10, ""));        // others        assertEquals("", WordUtils.abbreviate("0123456790", 0,0,""));        assertEquals("", WordUtils.abbreviate(" 0123456790", 0,-1,""));    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.io.StringWriter;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests for {@link StringEscapeUtils}. * * @author <a href="mailto:alex@purpletech.com">Alexander Day Chaffee</a> * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a> * @version $Id$ */public class EntitiesTest extends TestCase{    public EntitiesTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(EntitiesTest.class);        suite.setName("EntitiesTest Tests");        return suite;    }    Entities entities;    @Override    public void setUp()    {        entities = new Entities();        entities.addEntity("foo", 161);        entities.addEntity("bar", 162);    }    public void testEscapeNamedEntity() throws Exception    {        doTestEscapeNamedEntity("&foo;", "\u00A1");        doTestEscapeNamedEntity("x&foo;", "x\u00A1");        doTestEscapeNamedEntity("&foo;x", "\u00A1x");        doTestEscapeNamedEntity("x&foo;x", "x\u00A1x");        doTestEscapeNamedEntity("&foo;&bar;", "\u00A1\u00A2");    }    private void doTestEscapeNamedEntity(final String expected, final String entity) throws Exception    {        assertEquals(expected, entities.escape(entity));        StringWriter writer = new StringWriter();        entities.escape(writer, entity);        assertEquals(expected, writer.toString());    }        public void testUnescapeNamedEntity() throws Exception    {        assertEquals("\u00A1", entities.unescape("&foo;"));        assertEquals("x\u00A1", entities.unescape("x&foo;"));        assertEquals("\u00A1x", entities.unescape("&foo;x"));        assertEquals("x\u00A1x", entities.unescape("x&foo;x"));        assertEquals("\u00A1\u00A2", entities.unescape("&foo;&bar;"));    }    public void testUnescapeUnknownEntity() throws Exception    {        doTestUnescapeEntity("&zzzz;", "&zzzz;");    }    public void testUnescapeMiscellaneous() throws Exception    {      doTestUnescapeEntity("&hello", "&hello");      doTestUnescapeEntity("&;", "&;");      doTestUnescapeEntity("&#;", "&#;");      doTestUnescapeEntity("&#invalid;", "&#invalid;");      doTestUnescapeEntity("A", "&#X41;");    }        private void doTestUnescapeEntity(final String expected, final String entity) throws Exception    {        assertEquals(expected, entities.unescape(entity));        StringWriter writer = new StringWriter();        entities.unescape(writer, entity);        assertEquals(expected, writer.toString());    }        public void testAddEntitiesArray() throws Exception    {        String[][] array = {{"foo", "100"}, {"bar", "101"}};        Entities e = new Entities();        e.addEntities(array);        assertEquals("foo", e.entityName(100));        assertEquals("bar", e.entityName(101));        assertEquals(100, e.entityValue("foo"));        assertEquals(101, e.entityValue("bar"));    }    public void testEntitiesXmlObject() throws Exception    {        assertEquals("gt", Entities.XML.entityName('>'));        assertEquals('>', Entities.XML.entityValue("gt"));        assertEquals(-1, Entities.XML.entityValue("xyzzy"));    }    public void testArrayIntMap() throws Exception    {        Entities.ArrayEntityMap map = new Entities.ArrayEntityMap(2);        checkSomeEntityMap(map);        Entities.ArrayEntityMap map1 = new Entities.ArrayEntityMap();        checkSomeEntityMap(map1);        assertEquals(-1, map.value("null"));        assertNull(map.name(-1));    }    public void testTreeIntMap() throws Exception    {        Entities.EntityMap map = new Entities.TreeEntityMap();        checkSomeEntityMap(map);    }    public void testHashIntMap() throws Exception    {        Entities.EntityMap map = new Entities.HashEntityMap();        checkSomeEntityMap(map);        assertEquals(-1, map.value("noname"));    }    public void testBinaryIntMap() throws Exception    {        Entities.BinaryEntityMap map = new Entities.BinaryEntityMap(2);        checkSomeEntityMap(map);        Entities.BinaryEntityMap map1 = new Entities.BinaryEntityMap();        checkSomeEntityMap(map1);                // value cannot be added twice        map1.add("baz4a", 4);        map1.add("baz4b", 4);        assertEquals(-1, map1.value("baz4b"));        assertEquals("baz4a", map1.name(4));        assertNull(map1.name(99));                Entities.BinaryEntityMap map2 = new Entities.BinaryEntityMap();        map2.add("val1", 1);        map2.add("val2", 2);        map2.add("val3", 3);        map2.add("val4", 4);        map2.add("val5", 5);        assertEquals("val5", map2.name(5));        assertEquals("val4", map2.name(4));        assertEquals("val3", map2.name(3));        assertEquals("val2", map2.name(2));        assertEquals("val1", map2.name(1));    }    public void testPrimitiveIntMap() throws Exception    {        Entities.PrimitiveEntityMap map = new Entities.PrimitiveEntityMap();        checkSomeEntityMap(map);    }    private void checkSomeEntityMap(Entities.EntityMap map) {        map.add("foo", 1);        assertEquals(1, map.value("foo"));        assertEquals("foo", map.name(1));        map.add("bar", 2);        map.add("baz", 3);        assertEquals(3, map.value("baz"));        assertEquals("baz", map.name(3));    }        public void testHtml40Nbsp() throws Exception    {        assertEquals("&nbsp;", Entities.HTML40.escape("\u00A0"));        Entities e = new Entities();        e.map = new Entities.PrimitiveEntityMap();        Entities.fillWithHtml40Entities(e);        assertEquals("&nbsp;", e.escape("\u00A0"));    }    public void testNumberOverflow() throws Exception {        doTestUnescapeEntity("&#12345678;", "&#12345678;");        doTestUnescapeEntity("x&#12345678;y", "x&#12345678;y");        doTestUnescapeEntity("&#x12345678;", "&#x12345678;");        doTestUnescapeEntity("x&#x12345678;y", "x&#x12345678;y");    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.io.OutputStream;import java.io.Serializable;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.HashMap;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.SerializationUtils}. * * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @version $Id$ */public class SerializationUtilsTest extends TestCase {  static final String CLASS_NOT_FOUND_MESSAGE = "ClassNotFoundSerializationTest.readObject fake exception";    protected static final String SERIALIZE_IO_EXCEPTION_MESSAGE = "Anonymous OutputStream I/O exception";      private String iString;    private Integer iInteger;    private HashMap iMap;    public SerializationUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(SerializationUtilsTest.class);        suite.setName("SerializationUtils Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();        iString = "foo";        iInteger = new Integer(7);        iMap = new HashMap();        iMap.put("FOO", iString);        iMap.put("BAR", iInteger);    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new SerializationUtils());        Constructor[] cons = SerializationUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(SerializationUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(SerializationUtils.class.getModifiers()));    }        public void testException() {        SerializationException serEx;        Exception ex = new Exception();                serEx = new SerializationException();        assertSame(null, serEx.getMessage());        assertSame(null, serEx.getCause());                serEx = new SerializationException("Message");        assertSame("Message", serEx.getMessage());        assertSame(null, serEx.getCause());                serEx = new SerializationException(ex);        assertEquals("java.lang.Exception", serEx.getMessage());        assertSame(ex, serEx.getCause());                serEx = new SerializationException("Message", ex);        assertSame("Message", serEx.getMessage());        assertSame(ex, serEx.getCause());    }        //-----------------------------------------------------------------------    public void testSerializeStream() throws Exception {        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();        SerializationUtils.serialize(iMap, streamTest);        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(iMap);        oos.flush();        oos.close();        byte[] testBytes = streamTest.toByteArray();        byte[] realBytes = streamReal.toByteArray();        assertEquals(testBytes.length, realBytes.length);        for (int i = 0; i < realBytes.length; i++) {            assertEquals(realBytes[i], testBytes[i]);        }    }    public void testSerializeStreamUnserializable() throws Exception {        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();        try {            iMap.put(new Object(), new Object());            SerializationUtils.serialize(iMap, streamTest);        } catch (SerializationException ex) {            return;        }        fail();    }    public void testSerializeStreamNullObj() throws Exception {        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();        SerializationUtils.serialize(null, streamTest);        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(null);        oos.flush();        oos.close();        byte[] testBytes = streamTest.toByteArray();        byte[] realBytes = streamReal.toByteArray();        assertEquals(testBytes.length, realBytes.length);        for (int i = 0; i < realBytes.length; i++) {            assertEquals(realBytes[i], testBytes[i]);        }    }    public void testSerializeStreamObjNull() throws Exception {        // TODO NOT USED - but should it be?        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();        try {            SerializationUtils.serialize(iMap, null);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testSerializeStreamNullNull() throws Exception {        // TODO NOT USED - but should it be?        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();        try {            SerializationUtils.serialize(null, null);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }        public void testSerializeIOException() throws Exception {        // forces an IOException when the ObjectOutputStream is created, to test not closing the stream        // in the finally block        OutputStream streamTest = new OutputStream() {            @Override            public void write(int arg0) throws IOException {                throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);            }        };        try {            SerializationUtils.serialize(iMap, streamTest);        }        catch(SerializationException e) {            assertEquals("java.io.IOException: " + SERIALIZE_IO_EXCEPTION_MESSAGE, e.getMessage());        }    }    //-----------------------------------------------------------------------    public void testDeserializeStream() throws Exception {        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(iMap);        oos.flush();        oos.close();        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());        Object test = SerializationUtils.deserialize(inTest);        assertNotNull(test);        assertTrue(test instanceof HashMap);        assertTrue(test != iMap);        HashMap testMap = (HashMap) test;        assertEquals(iString, testMap.get("FOO"));        assertTrue(iString != testMap.get("FOO"));        assertEquals(iInteger, testMap.get("BAR"));        assertTrue(iInteger != testMap.get("BAR"));        assertEquals(iMap, testMap);    }    public void testDeserializeStreamOfNull() throws Exception {        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(null);        oos.flush();        oos.close();        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());        Object test = SerializationUtils.deserialize(inTest);        assertNull(test);    }    public void testDeserializeStreamNull() throws Exception {        try {            SerializationUtils.deserialize((InputStream) null);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testDeserializeStreamBadStream() throws Exception {        try {            SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0]));        } catch (SerializationException ex) {            return;        }        fail();    }    public void testDeserializeStreamClassNotFound() throws Exception {        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(new ClassNotFoundSerializationTest());        oos.flush();        oos.close();        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());        try {            @SuppressWarnings("unused")            Object test = SerializationUtils.deserialize(inTest);        } catch(SerializationException se) {            assertEquals("java.lang.ClassNotFoundException: " + CLASS_NOT_FOUND_MESSAGE, se.getMessage());        }    }        //-----------------------------------------------------------------------    public void testSerializeBytes() throws Exception {        byte[] testBytes = SerializationUtils.serialize(iMap);        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(iMap);        oos.flush();        oos.close();        byte[] realBytes = streamReal.toByteArray();        assertEquals(testBytes.length, realBytes.length);        for (int i = 0; i < realBytes.length; i++) {            assertEquals(realBytes[i], testBytes[i]);        }    }    public void testSerializeBytesUnserializable() throws Exception {        try {            iMap.put(new Object(), new Object());            SerializationUtils.serialize(iMap);        } catch (SerializationException ex) {            return;        }        fail();    }    public void testSerializeBytesNull() throws Exception {        byte[] testBytes = SerializationUtils.serialize(null);        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(null);        oos.flush();        oos.close();        byte[] realBytes = streamReal.toByteArray();        assertEquals(testBytes.length, realBytes.length);        for (int i = 0; i < realBytes.length; i++) {            assertEquals(realBytes[i], testBytes[i]);        }    }    //-----------------------------------------------------------------------    public void testDeserializeBytes() throws Exception {        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(iMap);        oos.flush();        oos.close();        Object test = SerializationUtils.deserialize(streamReal.toByteArray());        assertNotNull(test);        assertTrue(test instanceof HashMap);        assertTrue(test != iMap);        HashMap testMap = (HashMap) test;        assertEquals(iString, testMap.get("FOO"));        assertTrue(iString != testMap.get("FOO"));        assertEquals(iInteger, testMap.get("BAR"));        assertTrue(iInteger != testMap.get("BAR"));        assertEquals(iMap, testMap);    }    public void testDeserializeBytesOfNull() throws Exception {        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();        ObjectOutputStream oos = new ObjectOutputStream(streamReal);        oos.writeObject(null);        oos.flush();        oos.close();        Object test = SerializationUtils.deserialize(streamReal.toByteArray());        assertNull(test);    }    public void testDeserializeBytesNull() throws Exception {        try {            SerializationUtils.deserialize((byte[]) null);        } catch (IllegalArgumentException ex) {            return;        }        fail();    }    public void testDeserializeBytesBadStream() throws Exception {        try {            SerializationUtils.deserialize(new byte[0]);        } catch (SerializationException ex) {            return;        }        fail();    }    //-----------------------------------------------------------------------    public void testClone() throws Exception {        Object test = SerializationUtils.clone(iMap);        assertNotNull(test);        assertTrue(test instanceof HashMap);        assertTrue(test != iMap);        HashMap testMap = (HashMap) test;        assertEquals(iString, testMap.get("FOO"));        assertTrue(iString != testMap.get("FOO"));        assertEquals(iInteger, testMap.get("BAR"));        assertTrue(iInteger != testMap.get("BAR"));        assertEquals(iMap, testMap);    }    public void testCloneNull() throws Exception {        Object test = SerializationUtils.clone(null);        assertNull(test);    }    public void testCloneUnserializable() throws Exception {        try {            iMap.put(new Object(), new Object());            SerializationUtils.clone(iMap);        } catch (SerializationException ex) {            return;        }        fail();    }}class ClassNotFoundSerializationTest implements Serializable{    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException    {        throw new ClassNotFoundException(SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE);    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @author Matthew Hawthorne * @author Stephen Colebourne * @version $Id$ * @see NullArgumentException */public class NullArgumentExceptionTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(NullArgumentExceptionTest.class);    }    public NullArgumentExceptionTest(String testName) {        super(testName);    }    // testConstructor    public void testConstructor_nullInput() {        new NullArgumentException(null);    }    // testGetMessage    public void testGetMessage_nullConstructorInput() {        final Throwable t = new NullArgumentException(null);        assertEquals("Argument must not be null.", t.getMessage());    }    public void testGetMessage_validConstructorInput() {        final String argName = "name";        final Throwable t = new NullArgumentException(argName);        assertEquals(argName + " must not be null.", t.getMessage());    }} // NullArgumentExceptionTest
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.CharUtils}. * * @author Stephen Colebourne * @version $Id$ */public class CharUtilsTest extends TestCase {    private static final Character CHARACTER_A = new Character('A');    private static final Character CHARACTER_B = new Character('B');    private static final char CHAR_COPY = '\u00a9';        public CharUtilsTest(String name) {        super(name);    }    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(CharUtilsTest.class);        suite.setName("CharUtils Tests");        return suite;    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new CharUtils());        Constructor[] cons = CharUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(BooleanUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    public void testToCharacterObject_char() {        assertEquals(new Character('a'), CharUtils.toCharacterObject('a'));        assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a'));               for (int i = 0; i < 128; i++) {            Character ch = CharUtils.toCharacterObject((char) i);            Character ch2 = CharUtils.toCharacterObject((char) i);            assertSame(ch, ch2);            assertEquals(i, ch.charValue());        }        for (int i = 128; i < 196; i++) {            Character ch = CharUtils.toCharacterObject((char) i);            Character ch2 = CharUtils.toCharacterObject((char) i);            assertEquals(ch, ch2);            assertTrue(ch != ch2);            assertEquals(i, ch.charValue());            assertEquals(i, ch2.charValue());        }    }        public void testToCharacterObject_String() {        assertEquals(null, CharUtils.toCharacterObject(null));        assertEquals(null, CharUtils.toCharacterObject(""));        assertEquals(new Character('a'), CharUtils.toCharacterObject("a"));        assertEquals(new Character('a'), CharUtils.toCharacterObject("abc"));        assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject("a"));        assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject('a'));    }        //-----------------------------------------------------------------------    public void testToChar_Character() {        assertEquals('A', CharUtils.toChar(CHARACTER_A));        assertEquals('B', CharUtils.toChar(CHARACTER_B));        try {            CharUtils.toChar((Character) null);        } catch (IllegalArgumentException ex) {}    }        public void testToChar_Character_char() {        assertEquals('A', CharUtils.toChar(CHARACTER_A, 'X'));        assertEquals('B', CharUtils.toChar(CHARACTER_B, 'X'));        assertEquals('X', CharUtils.toChar((Character) null, 'X'));    }        //-----------------------------------------------------------------------    public void testToChar_String() {        assertEquals('A', CharUtils.toChar("A"));        assertEquals('B', CharUtils.toChar("BA"));        try {            CharUtils.toChar((String) null);        } catch (IllegalArgumentException ex) {}        try {            CharUtils.toChar("");        } catch (IllegalArgumentException ex) {}    }        public void testToChar_String_char() {        assertEquals('A', CharUtils.toChar("A", 'X'));        assertEquals('B', CharUtils.toChar("BA", 'X'));        assertEquals('X', CharUtils.toChar("", 'X'));        assertEquals('X', CharUtils.toChar((String) null, 'X'));    }        //-----------------------------------------------------------------------    public void testToIntValue_char() {        assertEquals(0, CharUtils.toIntValue('0'));        assertEquals(1, CharUtils.toIntValue('1'));        assertEquals(2, CharUtils.toIntValue('2'));        assertEquals(3, CharUtils.toIntValue('3'));        assertEquals(4, CharUtils.toIntValue('4'));        assertEquals(5, CharUtils.toIntValue('5'));        assertEquals(6, CharUtils.toIntValue('6'));        assertEquals(7, CharUtils.toIntValue('7'));        assertEquals(8, CharUtils.toIntValue('8'));        assertEquals(9, CharUtils.toIntValue('9'));        try {            CharUtils.toIntValue('a');        } catch (IllegalArgumentException ex) {}    }        public void testToIntValue_char_int() {        assertEquals(0, CharUtils.toIntValue('0', -1));        assertEquals(3, CharUtils.toIntValue('3', -1));        assertEquals(-1, CharUtils.toIntValue('a', -1));    }        //-----------------------------------------------------------------------    public void testToIntValue_Character() {        assertEquals(0, CharUtils.toIntValue(new Character('0')));        assertEquals(3, CharUtils.toIntValue(new Character('3')));        try {            CharUtils.toIntValue(null);        } catch (IllegalArgumentException ex) {}        try {            CharUtils.toIntValue(CHARACTER_A);        } catch (IllegalArgumentException ex) {}    }        public void testToIntValue_Character_int() {        assertEquals(0, CharUtils.toIntValue(new Character('0'), -1));        assertEquals(3, CharUtils.toIntValue(new Character('3'), -1));        assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1));        assertEquals(-1, CharUtils.toIntValue(null, -1));    }        //-----------------------------------------------------------------------    public void testToString_char() {        assertEquals("a", CharUtils.toString('a'));        assertSame(CharUtils.toString('a'), CharUtils.toString('a'));               for (int i = 0; i < 128; i++) {            String str = CharUtils.toString((char) i);            String str2 = CharUtils.toString((char) i);            assertSame(str, str2);            assertEquals(1, str.length());            assertEquals(i, str.charAt(0));        }        for (int i = 128; i < 196; i++) {            String str = CharUtils.toString((char) i);            String str2 = CharUtils.toString((char) i);            assertEquals(str, str2);            assertTrue(str != str2);            assertEquals(1, str.length());            assertEquals(i, str.charAt(0));            assertEquals(1, str2.length());            assertEquals(i, str2.charAt(0));        }    }        public void testToString_Character() {        assertEquals(null, CharUtils.toString(null));        assertEquals("A", CharUtils.toString(CHARACTER_A));        assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A));    }        //-----------------------------------------------------------------------    public void testToUnicodeEscaped_char() {        assertEquals("\\u0041", CharUtils.unicodeEscaped('A'));               for (int i = 0; i < 196; i++) {            String str = CharUtils.unicodeEscaped((char) i);            assertEquals(6, str.length());            int val = Integer.parseInt(str.substring(2), 16);            assertEquals(i, val);        }        assertEquals("\\u0999", CharUtils.unicodeEscaped((char) 0x999));        assertEquals("\\u1001", CharUtils.unicodeEscaped((char) 0x1001));    }        public void testToUnicodeEscaped_Character() {        assertEquals(null, CharUtils.unicodeEscaped(null));        assertEquals("\\u0041", CharUtils.unicodeEscaped(CHARACTER_A));    }        //-----------------------------------------------------------------------    public void testIsAscii_char() {        assertEquals(true, CharUtils.isAscii('a'));        assertEquals(true, CharUtils.isAscii('A'));        assertEquals(true, CharUtils.isAscii('3'));        assertEquals(true, CharUtils.isAscii('-'));        assertEquals(true, CharUtils.isAscii('\n'));        assertEquals(false, CharUtils.isAscii(CHAR_COPY));               for (int i = 0; i < 128; i++) {            if (i < 128) {                assertEquals(true, CharUtils.isAscii((char) i));            } else {                assertEquals(false, CharUtils.isAscii((char) i));            }        }    }        //-----------------------------------------------------------------------    public void testIsAsciiPrintable_char() {        assertEquals(true, CharUtils.isAsciiPrintable('a'));        assertEquals(true, CharUtils.isAsciiPrintable('A'));        assertEquals(true, CharUtils.isAsciiPrintable('3'));        assertEquals(true, CharUtils.isAsciiPrintable('-'));        assertEquals(false, CharUtils.isAsciiPrintable('\n'));        assertEquals(false, CharUtils.isAscii(CHAR_COPY));               for (int i = 0; i < 196; i++) {            if (i >= 32 && i <= 126) {                assertEquals(true, CharUtils.isAsciiPrintable((char) i));            } else {                assertEquals(false, CharUtils.isAsciiPrintable((char) i));            }        }    }        //-----------------------------------------------------------------------    public void testIsAsciiControl_char() {        assertEquals(false, CharUtils.isAsciiControl('a'));        assertEquals(false, CharUtils.isAsciiControl('A'));        assertEquals(false, CharUtils.isAsciiControl('3'));        assertEquals(false, CharUtils.isAsciiControl('-'));        assertEquals(true, CharUtils.isAsciiControl('\n'));        assertEquals(false, CharUtils.isAsciiControl(CHAR_COPY));               for (int i = 0; i < 196; i++) {            if (i < 32 || i == 127) {                assertEquals(true, CharUtils.isAsciiControl((char) i));            } else {                assertEquals(false, CharUtils.isAsciiControl((char) i));            }        }    }        //-----------------------------------------------------------------------    public void testIsAsciiAlpha_char() {        assertEquals(true, CharUtils.isAsciiAlpha('a'));        assertEquals(true, CharUtils.isAsciiAlpha('A'));        assertEquals(false, CharUtils.isAsciiAlpha('3'));        assertEquals(false, CharUtils.isAsciiAlpha('-'));        assertEquals(false, CharUtils.isAsciiAlpha('\n'));        assertEquals(false, CharUtils.isAsciiAlpha(CHAR_COPY));               for (int i = 0; i < 196; i++) {            if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z')) {                assertEquals(true, CharUtils.isAsciiAlpha((char) i));            } else {                assertEquals(false, CharUtils.isAsciiAlpha((char) i));            }        }    }        //-----------------------------------------------------------------------    public void testIsAsciiAlphaUpper_char() {        assertEquals(false, CharUtils.isAsciiAlphaUpper('a'));        assertEquals(true, CharUtils.isAsciiAlphaUpper('A'));        assertEquals(false, CharUtils.isAsciiAlphaUpper('3'));        assertEquals(false, CharUtils.isAsciiAlphaUpper('-'));        assertEquals(false, CharUtils.isAsciiAlphaUpper('\n'));        assertEquals(false, CharUtils.isAsciiAlphaUpper(CHAR_COPY));               for (int i = 0; i < 196; i++) {            if (i >= 'A' && i <= 'Z') {                assertEquals(true, CharUtils.isAsciiAlphaUpper((char) i));            } else {                assertEquals(false, CharUtils.isAsciiAlphaUpper((char) i));            }        }    }        //-----------------------------------------------------------------------    public void testIsAsciiAlphaLower_char() {        assertEquals(true, CharUtils.isAsciiAlphaLower('a'));        assertEquals(false, CharUtils.isAsciiAlphaLower('A'));        assertEquals(false, CharUtils.isAsciiAlphaLower('3'));        assertEquals(false, CharUtils.isAsciiAlphaLower('-'));        assertEquals(false, CharUtils.isAsciiAlphaLower('\n'));        assertEquals(false, CharUtils.isAsciiAlphaLower(CHAR_COPY));               for (int i = 0; i < 196; i++) {            if (i >= 'a' && i <= 'z') {                assertEquals(true, CharUtils.isAsciiAlphaLower((char) i));            } else {                assertEquals(false, CharUtils.isAsciiAlphaLower((char) i));            }        }    }        //-----------------------------------------------------------------------    public void testIsAsciiNumeric_char() {        assertEquals(false, CharUtils.isAsciiNumeric('a'));        assertEquals(false, CharUtils.isAsciiNumeric('A'));        assertEquals(true, CharUtils.isAsciiNumeric('3'));        assertEquals(false, CharUtils.isAsciiNumeric('-'));        assertEquals(false, CharUtils.isAsciiNumeric('\n'));        assertEquals(false, CharUtils.isAsciiNumeric(CHAR_COPY));               for (int i = 0; i < 196; i++) {            if (i >= '0' && i <= '9') {                assertEquals(true, CharUtils.isAsciiNumeric((char) i));            } else {                assertEquals(false, CharUtils.isAsciiNumeric((char) i));            }        }    }        //-----------------------------------------------------------------------    public void testIsAsciiAlphanumeric_char() {        assertEquals(true, CharUtils.isAsciiAlphanumeric('a'));        assertEquals(true, CharUtils.isAsciiAlphanumeric('A'));        assertEquals(true, CharUtils.isAsciiAlphanumeric('3'));        assertEquals(false, CharUtils.isAsciiAlphanumeric('-'));        assertEquals(false, CharUtils.isAsciiAlphanumeric('\n'));        assertEquals(false, CharUtils.isAsciiAlphanumeric(CHAR_COPY));               for (int i = 0; i < 196; i++) {            if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z') || (i >= '0' && i <= '9')) {                assertEquals(true, CharUtils.isAsciiAlphanumeric((char) i));            } else {                assertEquals(false, CharUtils.isAsciiAlphanumeric((char) i));            }        }    }    }
/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;public class EnumUtilsTest extends TestCase {    public static Test suite() {        TestSuite suite = new TestSuite(EnumUtilsTest.class);        suite.setName("EnumUtils Tests");        return suite;    }    public void testConstructable() {        // enforce public constructor        new EnumUtils();    }    public void testGetEnumMap() {        try {            EnumUtils.getEnumMap(null);            fail("NullPointerException expected");        } catch(NullPointerException npe) {            // expected        }        try {            EnumUtils.getEnumMap(getClass());            fail("ClassCastException expected");        } catch(ClassCastException cce) {            // expected        }        String toString = EnumUtils.getEnumMap(Traffic.class).toString();         assertEquals( "getEnumMap not created correctly", "{RED=RED, AMBER=AMBER, GREEN=GREEN}", toString);    }}enum Traffic {    RED, AMBER, GREEN}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.Arrays;import java.util.Collection;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Locale;import java.util.Set;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests for {@link LocaleUtils}. * * @author Chris Hyzer * @author Stephen Colebourne * @version $Id$ */public class LocaleUtilsTest extends TestCase {    private static final Locale LOCALE_EN = new Locale("en", "");    private static final Locale LOCALE_EN_US = new Locale("en", "US");    private static final Locale LOCALE_EN_US_ZZZZ = new Locale("en", "US", "ZZZZ");    private static final Locale LOCALE_FR = new Locale("fr", "");    private static final Locale LOCALE_FR_CA = new Locale("fr", "CA");    private static final Locale LOCALE_QQ = new Locale("qq", "");    private static final Locale LOCALE_QQ_ZZ = new Locale("qq", "ZZ");    /**     * Constructor.     *      * @param name     */    public LocaleUtilsTest(String name) {        super(name);    }    /**     * Main.     * @param args     */    public static void main(String[] args) {        TestRunner.run(suite());    }    /**     * Run the test cases as a suite.     * @return the Test     */    public static Test suite() {        TestSuite suite = new TestSuite(LocaleUtilsTest.class);        suite.setName("LocaleUtils Tests");        return suite;    }    @Override    public void setUp() throws Exception {        super.setUp();        // Testing #LANG-304. Must be called before availableLocaleSet is called.        LocaleUtils.isAvailableLocale(Locale.getDefault());    }    //-----------------------------------------------------------------------    /**     * Test that constructors are public, and work, etc.     */    public void testConstructor() {        assertNotNull(new LocaleUtils());        Constructor<?>[] cons = LocaleUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(LocaleUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(LocaleUtils.class.getModifiers()));    }    //-----------------------------------------------------------------------    /**     * Pass in a valid language, test toLocale.     *     * @param language  the language string     */    private void assertValidToLocale(String language) {        Locale locale = LocaleUtils.toLocale(language);        assertNotNull("valid locale", locale);        assertEquals(language, locale.getLanguage());        //country and variant are empty        assertTrue(locale.getCountry() == null || locale.getCountry().length() == 0);        assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);    }    /**     * Pass in a valid language, test toLocale.     *     * @param localeString to pass to toLocale()     * @param language of the resulting Locale     * @param country of the resulting Locale     */    private void assertValidToLocale(String localeString, String language, String country) {        Locale locale = LocaleUtils.toLocale(localeString);        assertNotNull("valid locale", locale);        assertEquals(language, locale.getLanguage());        assertEquals(country, locale.getCountry());        //variant is empty        assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);    }    /**     * Pass in a valid language, test toLocale.     *     * @param localeString to pass to toLocale()     * @param language of the resulting Locale     * @param country of the resulting Locale     * @param variant of the resulting Locale     */    private void assertValidToLocale(            String localeString, String language,             String country, String variant) {        Locale locale = LocaleUtils.toLocale(localeString);        assertNotNull("valid locale", locale);        assertEquals(language, locale.getLanguage());        assertEquals(country, locale.getCountry());        assertEquals(variant, locale.getVariant());            }    /**     * Test toLocale() method.     */    public void testToLocale_1Part() {        assertEquals(null, LocaleUtils.toLocale((String) null));                assertValidToLocale("us");        assertValidToLocale("fr");        assertValidToLocale("de");        assertValidToLocale("zh");        // Valid format but lang doesnt exist, should make instance anyway        assertValidToLocale("qq");                try {            LocaleUtils.toLocale("Us");            fail("Should fail if not lowercase");        } catch (IllegalArgumentException iae) {}        try {            LocaleUtils.toLocale("US");            fail("Should fail if not lowercase");        } catch (IllegalArgumentException iae) {}        try {            LocaleUtils.toLocale("uS");            fail("Should fail if not lowercase");        } catch (IllegalArgumentException iae) {}        try {            LocaleUtils.toLocale("u#");            fail("Should fail if not lowercase");        } catch (IllegalArgumentException iae) {}                try {            LocaleUtils.toLocale("u");            fail("Must be 2 chars if less than 5");        } catch (IllegalArgumentException iae) {}               try {            LocaleUtils.toLocale("uuu");            fail("Must be 2 chars if less than 5");        } catch (IllegalArgumentException iae) {}        try {            LocaleUtils.toLocale("uu_U");            fail("Must be 2 chars if less than 5");        } catch (IllegalArgumentException iae) {}    }            /**     * Test toLocale() method.     */    public void testToLocale_2Part() {        assertValidToLocale("us_EN", "us", "EN");        //valid though doesnt exist        assertValidToLocale("us_ZH", "us", "ZH");                try {            LocaleUtils.toLocale("us-EN");            fail("Should fail as not underscore");        } catch (IllegalArgumentException iae) {}        try {            LocaleUtils.toLocale("us_En");            fail("Should fail second part not uppercase");        } catch (IllegalArgumentException iae) {}        try {            LocaleUtils.toLocale("us_en");            fail("Should fail second part not uppercase");        } catch (IllegalArgumentException iae) {}        try {            LocaleUtils.toLocale("us_eN");            fail("Should fail second part not uppercase");        } catch (IllegalArgumentException iae) {}        try {            LocaleUtils.toLocale("uS_EN");            fail("Should fail first part not lowercase");        } catch (IllegalArgumentException iae) {}        try {            LocaleUtils.toLocale("us_E3");            fail("Should fail second part not uppercase");        } catch (IllegalArgumentException iae) {}    }            /**     * Test toLocale() method.     */    public void testToLocale_3Part() {        assertValidToLocale("us_EN_A", "us", "EN", "A");        // this isn't pretty, but was caused by a jdk bug it seems        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4210525        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {            assertValidToLocale("us_EN_a", "us", "EN", "a");            assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF");        } else {            assertValidToLocale("us_EN_a", "us", "EN", "A");            assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF");        }                try {            LocaleUtils.toLocale("us_EN-a");            fail("Should fail as not underscore");        } catch (IllegalArgumentException iae) {}        try {            LocaleUtils.toLocale("uu_UU_");            fail("Must be 3, 5 or 7+ in length");        } catch (IllegalArgumentException iae) {}    }    //-----------------------------------------------------------------------    /**     * Helper method for local lookups.     *     * @param locale  the input locale     * @param defaultLocale  the input default locale     * @param expected  expected results     */    private void assertLocaleLookupList(Locale locale, Locale defaultLocale, Locale[] expected) {        List<Locale> localeList = defaultLocale == null ?                LocaleUtils.localeLookupList(locale) :                LocaleUtils.localeLookupList(locale, defaultLocale);                assertEquals(expected.length, localeList.size());        assertEquals(Arrays.asList(expected), localeList);        assertUnmodifiableCollection(localeList);    }    //-----------------------------------------------------------------------    /**     * Test localeLookupList() method.     */    public void testLocaleLookupList_Locale() {        assertLocaleLookupList(null, null, new Locale[0]);        assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ});        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});        assertLocaleLookupList(LOCALE_EN_US, null,            new Locale[] {                LOCALE_EN_US,                LOCALE_EN});        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,            new Locale[] {                LOCALE_EN_US_ZZZZ,                LOCALE_EN_US,                LOCALE_EN});    }            /**     * Test localeLookupList() method.     */    public void testLocaleLookupList_LocaleLocale() {        assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ,                 new Locale[]{LOCALE_QQ});        assertLocaleLookupList(LOCALE_EN, LOCALE_EN,                 new Locale[]{LOCALE_EN});                assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US,             new Locale[]{                LOCALE_EN_US,                LOCALE_EN});        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ,            new Locale[] {                LOCALE_EN_US,                LOCALE_EN,                LOCALE_QQ});        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ,            new Locale[] {                LOCALE_EN_US,                LOCALE_EN,                LOCALE_QQ_ZZ});                assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,            new Locale[] {                LOCALE_EN_US_ZZZZ,                LOCALE_EN_US,                LOCALE_EN});        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ,            new Locale[] {                LOCALE_EN_US_ZZZZ,                LOCALE_EN_US,                LOCALE_EN});        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ,            new Locale[] {                LOCALE_EN_US_ZZZZ,                LOCALE_EN_US,                LOCALE_EN,                LOCALE_QQ});        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ,            new Locale[] {                LOCALE_EN_US_ZZZZ,                LOCALE_EN_US,                LOCALE_EN,                LOCALE_QQ_ZZ});        assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN,            new Locale[] {                LOCALE_FR_CA,                LOCALE_FR,                LOCALE_EN});    }    //-----------------------------------------------------------------------    /**     * Test availableLocaleList() method.     */    public void testAvailableLocaleList() {        List<Locale> list = LocaleUtils.availableLocaleList();        List<Locale> list2 = LocaleUtils.availableLocaleList();        assertNotNull(list);        assertSame(list, list2);        assertUnmodifiableCollection(list);                Locale[] jdkLocaleArray = Locale.getAvailableLocales();        List<Locale> jdkLocaleList = Arrays.asList(jdkLocaleArray);        assertEquals(jdkLocaleList, list);    }    //-----------------------------------------------------------------------    /**     * Test availableLocaleSet() method.     */    public void testAvailableLocaleSet() {        Set<Locale> set = LocaleUtils.availableLocaleSet();        Set<Locale> set2 = LocaleUtils.availableLocaleSet();        assertNotNull(set);        assertSame(set, set2);        assertUnmodifiableCollection(set);                Locale[] jdkLocaleArray = Locale.getAvailableLocales();        List<Locale> jdkLocaleList = Arrays.asList(jdkLocaleArray);        Set<Locale> jdkLocaleSet = new HashSet<Locale>(jdkLocaleList);        assertEquals(jdkLocaleSet, set);    }    //-----------------------------------------------------------------------    /**     * Test availableLocaleSet() method.     */    public void testIsAvailableLocale() {        Set<Locale> set = LocaleUtils.availableLocaleSet();        assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));        assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US));        assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));        assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR));        assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA));        assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ));        assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ));    }    //-----------------------------------------------------------------------    /**     * Make sure the language by country is correct. It checks that      * the LocaleUtils.languagesByCountry(country) call contains the      * array of languages passed in. It may contain more due to JVM      * variations.     *     * @param country     * @param languages array of languages that should be returned     */    private void assertLanguageByCountry(String country, String[] languages) {        List<Locale> list = LocaleUtils.languagesByCountry(country);        List<Locale> list2 = LocaleUtils.languagesByCountry(country);        assertNotNull(list);        assertSame(list, list2);        //search through langauges        for (int i = 0; i < languages.length; i++) {            Iterator<Locale> iterator = list.iterator();            boolean found = false;            // see if it was returned by the set            while (iterator.hasNext()) {                Locale locale = iterator.next();                // should have an en empty variant                assertTrue(locale.getVariant() == null                        || locale.getVariant().length() == 0);                assertEquals(country, locale.getCountry());                if (languages[i].equals(locale.getLanguage())) {                    found = true;                    break;                }            }            if (!found) {                fail("Cound not find language: " + languages[i]                        + " for country: " + country);            }        }        assertUnmodifiableCollection(list);    }    /**     * Test languagesByCountry() method.     */    public void testLanguagesByCountry() {        assertLanguageByCountry(null, new String[0]);        assertLanguageByCountry("GB", new String[]{"en"});        assertLanguageByCountry("ZZ", new String[0]);        assertLanguageByCountry("CH", new String[]{"fr", "de", "it"});    }    //-----------------------------------------------------------------------    /**     * Make sure the country by language is correct. It checks that      * the LocaleUtils.countryByLanguage(language) call contains the      * array of countries passed in. It may contain more due to JVM      * variations.     *     *     * @param language     * @param countries array of countries that should be returned     */    private void assertCountriesByLanguage(String language, String[] countries) {        List<Locale> list = LocaleUtils.countriesByLanguage(language);        List<Locale> list2 = LocaleUtils.countriesByLanguage(language);        assertNotNull(list);        assertSame(list, list2);        //search through langauges        for (int i = 0; i < countries.length; i++) {            Iterator<Locale> iterator = list.iterator();            boolean found = false;            // see if it was returned by the set            while (iterator.hasNext()) {                Locale locale = iterator.next();                // should have an en empty variant                assertTrue(locale.getVariant() == null                        || locale.getVariant().length() == 0);                assertEquals(language, locale.getLanguage());                if (countries[i].equals(locale.getCountry())) {                    found = true;                    break;                }            }            if (!found) {                fail("Cound not find language: " + countries[i]                        + " for country: " + language);            }        }        assertUnmodifiableCollection(list);    }    /**     * Test countriesByLanguage() method.     */    public void testCountriesByLanguage() {        assertCountriesByLanguage(null, new String[0]);        assertCountriesByLanguage("de", new String[]{"DE", "CH", "AT", "LU"});        assertCountriesByLanguage("zz", new String[0]);        assertCountriesByLanguage("it", new String[]{"IT", "CH"});    }    /**     * @param coll  the collection to check     */    private static void assertUnmodifiableCollection(Collection<?> coll) {        try {            coll.add(null);            fail();        } catch (UnsupportedOperationException ex) {}    }    /**     * Tests #LANG-328 - only language+variant     */    public void testLang328() {        assertValidToLocale("fr__POSIX", "fr", "", "POSIX");    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.text.NumberFormat;import java.util.Calendar;/** * Tests the difference in performance between CharUtils and CharSet. *  * Sample runs:Now: Thu Mar 18 14:29:48 PST 2004Sun Microsystems Inc. Java(TM) 2 Runtime Environment, Standard Edition 1.3.1_10-b03Sun Microsystems Inc. Java HotSpot(TM) Client VM 1.3.1_10-b03Windows XP 5.1 x86 pentium i486 i386Do nohting: 0 milliseconds.run_CharUtils_isAsciiNumeric: 4,545 milliseconds.run_inlined_CharUtils_isAsciiNumeric: 3,417 milliseconds.run_inlined_CharUtils_isAsciiNumeric: 85,679 milliseconds.Now: Thu Mar 18 14:24:51 PST 2004Sun Microsystems Inc. Java(TM) 2 Runtime Environment, Standard Edition 1.4.2_04-b05Sun Microsystems Inc. Java HotSpot(TM) Client VM 1.4.2_04-b05Windows XP 5.1 x86 pentium i486 i386Do nohting: 0 milliseconds.run_CharUtils_isAsciiNumeric: 2,578 milliseconds.run_inlined_CharUtils_isAsciiNumeric: 2,477 milliseconds.run_inlined_CharUtils_isAsciiNumeric: 114,429 milliseconds.Now: Thu Mar 18 14:27:55 PST 2004Sun Microsystems Inc. Java(TM) 2 Runtime Environment, Standard Edition 1.4.2_04-b05Sun Microsystems Inc. Java HotSpot(TM) Server VM 1.4.2_04-b05Windows XP 5.1 x86 pentium i486 i386Do nohting: 0 milliseconds.run_CharUtils_isAsciiNumeric: 630 milliseconds.run_inlined_CharUtils_isAsciiNumeric: 709 milliseconds.run_inlined_CharUtils_isAsciiNumeric: 84,420 milliseconds. * @version $Id$ */public class CharUtilsPerfTest {    final static String VERSION = "$Id$";    final static int WARM_UP = 100;    final static int COUNT = 5000;    final static char[] CHAR_SAMPLES;    static {        CHAR_SAMPLES = new char[Character.MAX_VALUE];        for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {            CHAR_SAMPLES[i] = i;        }    }    public static void main(String[] args) {        new CharUtilsPerfTest().run();    }    private void printSysInfo() {        System.out.println(VERSION);        System.out.println("Now: " + Calendar.getInstance().getTime());        System.out.println(System.getProperty("java.vendor")                + " "                + System.getProperty("java.runtime.name")                + " "                + System.getProperty("java.runtime.version"));        System.out.println(System.getProperty("java.vm.vendor")                + " "                + System.getProperty("java.vm.name")                + " "                + System.getProperty("java.vm.version"));        System.out.println(System.getProperty("os.name")            + " "            + System.getProperty("os.version")            + " "            + System.getProperty("os.arch")            + " "            + System.getProperty("sun.cpu.isalist"));    }    private void run() {        this.printSysInfo();        long start;        start = System.currentTimeMillis();        this.printlnTotal("Do nohting", start);        //System.out.println("Warming up...");        run_CharUtils_isAsciiNumeric(WARM_UP);        //System.out.println("Measuring...");        start = System.currentTimeMillis();        run_CharUtils_isAsciiNumeric(COUNT);        this.printlnTotal("run_CharUtils_isAsciiNumeric", start);        //System.out.println("Warming up...");        run_inlined_CharUtils_isAsciiNumeric(WARM_UP);        //System.out.println("Measuring...");        start = System.currentTimeMillis();        run_inlined_CharUtils_isAsciiNumeric(COUNT);        this.printlnTotal("run_inlined_CharUtils_isAsciiNumeric", start);        //System.out.println("Warming up...");        run_CharSet(WARM_UP);        //System.out.println("Measuring...");        start = System.currentTimeMillis();        run_CharSet(COUNT);        this.printlnTotal("run_CharSet", start);    }    private int run_CharSet(int loopCount) {        int t = 0;        for (int i = 0; i < loopCount; i++) {            for (int j = 0; j < CHAR_SAMPLES.length; j++) {                char ch = CHAR_SAMPLES[j];                boolean b = CharSet.ASCII_NUMERIC.contains(ch);                t += b ? 1 : 0;            }        }        return t;    }    private int run_CharUtils_isAsciiNumeric(int loopCount) {        int t = 0;        for (int i = 0; i < loopCount; i++) {            for (int j = 0; j < CHAR_SAMPLES.length; j++) {                char ch = CHAR_SAMPLES[j];                boolean b = CharUtils.isAsciiNumeric(ch);                t += b ? 1 : 0;            }        }        return t;    }    private int run_inlined_CharUtils_isAsciiNumeric(int loopCount) {        int t = 0;        for (int i = 0; i < loopCount; i++) {            for (int j = 0; j < CHAR_SAMPLES.length; j++) {                char ch = CHAR_SAMPLES[j];                boolean b = (ch >= '0' && ch <= '9');                t += b ? 1 : 0;            }        }        return t;    }    private void printlnTotal(String prefix, long start) {        long total = System.currentTimeMillis() - start;        System.out.println(prefix + ": " + NumberFormat.getInstance().format(total) + " milliseconds.");    }}
/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.lang;import java.io.File;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.Locale;import junit.framework.Assert;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.SystemUtils}. *  * Only limited testing can be performed. *  * @author Stephen Colebourne * @author Tetsuya Kaneuchi * @author Gary D. Gregory * @version $Id$ */public class SystemUtilsTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        TestSuite suite = new TestSuite(SystemUtilsTest.class);        suite.setName("SystemUtils Tests");        return suite;    }    //-----------------------------------------------------------------------    // COPIED FROM SystemUtils    //-----------------------------------------------------------------------    private String JAVA_VERSION;    private String JAVA_VERSION_TRIMMED;    private String OS_NAME;    private String OS_VERSION;    public SystemUtilsTest(String name) {        super(name);    }    /**     * <p>Gets the Java version number as a <code>float</code>.</p>     *     * <p>Example return values:</p>     * <ul>     *  <li><code>1.2f</code> for JDK 1.2     *  <li><code>1.31f</code> for JDK 1.3.1     * </ul>     *      * <p>Patch releases are not reported.     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>     *      * @return the version, for example 1.31f for JDK 1.3.1     */    private float getJavaVersionAsFloat() {        if (JAVA_VERSION_TRIMMED == null) {            return 0f;        }        String str = JAVA_VERSION_TRIMMED.substring(0, 3);        if (JAVA_VERSION_TRIMMED.length() >= 5) {            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);        }        try {            return Float.parseFloat(str);        } catch (Exception ex) {            return 0;        }    }    /**     * <p>Gets the Java version number as an <code>int</code>.</p>     *     * <p>Example return values:</p>     * <ul>     *  <li><code>120</code> for JDK 1.2     *  <li><code>131</code> for JDK 1.3.1     * </ul>     *      * <p>Patch releases are not reported.     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>     *      * @return the version, for example 131 for JDK 1.3.1     */    private int getJavaVersionAsInt() {        if (JAVA_VERSION == null) {            return 0;        }        String str = JAVA_VERSION_TRIMMED.substring(0, 1);        str = str + JAVA_VERSION_TRIMMED.substring(2, 3);        if (JAVA_VERSION_TRIMMED.length() >= 5) {            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);        } else {            str = str + "0";        }        try {            return Integer.parseInt(str);        } catch (Exception ex) {            return 0;        }    }    /**     * Trims the text of the java version to start with numbers.     *      * @return the trimmed java version     */    private String getJavaVersionTrimmed() {        if (JAVA_VERSION != null) {            for (int i = 0; i < JAVA_VERSION.length(); i++) {                char ch = JAVA_VERSION.charAt(i);                if (ch >= '0' && ch <= '9') {                    return JAVA_VERSION.substring(i);                }            }        }        return null;    }    /**     * Decides if the java version matches.     *      * @param versionPrefix     *                  the prefix for the java version     * @return true if matches, or false if not or can't determine     */    private boolean getJavaVersionMatches(String versionPrefix) {        if (JAVA_VERSION_TRIMMED == null) {            return false;        }        return JAVA_VERSION_TRIMMED.startsWith(versionPrefix);    }    /**     * Decides if the operating system matches.     *      * @param osNamePrefix     *                  the prefix for the os name     * @return true if matches, or false if not or can't determine     */    private boolean getOSMatches(String osNamePrefix) {        if (OS_NAME == null) {            return false;        }        return OS_NAME.startsWith(osNamePrefix);    }    /**     * Decides if the operating system matches.     *      * @param osNamePrefix     *                  the prefix for the os name     * @param osVersionPrefix     *                  the prefix for the version     * @return true if matches, or false if not or can't determine     */    private boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {        if (OS_NAME == null || OS_VERSION == null) {            return false;        }        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);    }    @Override    protected void setUp() throws Exception {        super.setUp();    }    @Override    protected void tearDown() throws Exception {        super.tearDown();    }    //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new SystemUtils());        Constructor[] cons = SystemUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(SystemUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(SystemUtils.class.getModifiers()));    }    /**     * Assums no security manager exists.     */    public void testGetJavaHome() {        File dir = SystemUtils.getJavaHome();        Assert.assertNotNull(dir);        Assert.assertTrue(dir.exists());    }    /**     * Assums no security manager exists.     */    public void testGetJavaIoTmpDir() {        File dir = SystemUtils.getJavaIoTmpDir();        Assert.assertNotNull(dir);        Assert.assertTrue(dir.exists());    }    /**     * Assums no security manager exists.     */    public void testGetUserDir() {        File dir = SystemUtils.getUserDir();        Assert.assertNotNull(dir);        Assert.assertTrue(dir.exists());    }    /**     * Assums no security manager exists.     */    public void testGetUserHome() {        File dir = SystemUtils.getUserHome();        Assert.assertNotNull(dir);        Assert.assertTrue(dir.exists());    }    public void testIS_JAVA() {        String javaVersion = System.getProperty("java.version");        if (javaVersion == null) {            assertEquals(false, SystemUtils.IS_JAVA_1_1);            assertEquals(false, SystemUtils.IS_JAVA_1_2);            assertEquals(false, SystemUtils.IS_JAVA_1_3);            assertEquals(false, SystemUtils.IS_JAVA_1_4);            assertEquals(false, SystemUtils.IS_JAVA_1_5);            assertEquals(false, SystemUtils.IS_JAVA_1_6);        } else if (javaVersion.startsWith("1.1")) {            assertEquals(true, SystemUtils.IS_JAVA_1_1);            assertEquals(false, SystemUtils.IS_JAVA_1_2);            assertEquals(false, SystemUtils.IS_JAVA_1_3);            assertEquals(false, SystemUtils.IS_JAVA_1_4);            assertEquals(false, SystemUtils.IS_JAVA_1_5);            assertEquals(false, SystemUtils.IS_JAVA_1_6);        } else if (javaVersion.startsWith("1.2")) {            assertEquals(false, SystemUtils.IS_JAVA_1_1);            assertEquals(true, SystemUtils.IS_JAVA_1_2);            assertEquals(false, SystemUtils.IS_JAVA_1_3);            assertEquals(false, SystemUtils.IS_JAVA_1_4);            assertEquals(false, SystemUtils.IS_JAVA_1_5);            assertEquals(false, SystemUtils.IS_JAVA_1_6);        } else if (javaVersion.startsWith("1.3")) {            assertEquals(false, SystemUtils.IS_JAVA_1_1);            assertEquals(false, SystemUtils.IS_JAVA_1_2);            assertEquals(true, SystemUtils.IS_JAVA_1_3);            assertEquals(false, SystemUtils.IS_JAVA_1_4);            assertEquals(false, SystemUtils.IS_JAVA_1_5);            assertEquals(false, SystemUtils.IS_JAVA_1_6);        } else if (javaVersion.startsWith("1.4")) {            assertEquals(false, SystemUtils.IS_JAVA_1_1);            assertEquals(false, SystemUtils.IS_JAVA_1_2);            assertEquals(false, SystemUtils.IS_JAVA_1_3);            assertEquals(true, SystemUtils.IS_JAVA_1_4);            assertEquals(false, SystemUtils.IS_JAVA_1_5);            assertEquals(false, SystemUtils.IS_JAVA_1_6);        } else if (javaVersion.startsWith("1.5")) {            assertEquals(false, SystemUtils.IS_JAVA_1_1);            assertEquals(false, SystemUtils.IS_JAVA_1_2);            assertEquals(false, SystemUtils.IS_JAVA_1_3);            assertEquals(false, SystemUtils.IS_JAVA_1_4);            assertEquals(true, SystemUtils.IS_JAVA_1_5);            assertEquals(false, SystemUtils.IS_JAVA_1_6);        } else if (javaVersion.startsWith("1.6")) {            assertEquals(false, SystemUtils.IS_JAVA_1_1);            assertEquals(false, SystemUtils.IS_JAVA_1_2);            assertEquals(false, SystemUtils.IS_JAVA_1_3);            assertEquals(false, SystemUtils.IS_JAVA_1_4);            assertEquals(false, SystemUtils.IS_JAVA_1_5);            assertEquals(true, SystemUtils.IS_JAVA_1_6);        } else {            System.out.println("Can't test IS_JAVA value");        }    }    public void testIS_OS() {        String osName = System.getProperty("os.name");        if (osName == null) {            assertEquals(false, SystemUtils.IS_OS_WINDOWS);            assertEquals(false, SystemUtils.IS_OS_UNIX);            assertEquals(false, SystemUtils.IS_OS_SOLARIS);            assertEquals(false, SystemUtils.IS_OS_LINUX);            assertEquals(false, SystemUtils.IS_OS_MAC_OSX);        } else if (osName.startsWith("Windows")) {            assertEquals(false, SystemUtils.IS_OS_UNIX);            assertEquals(true, SystemUtils.IS_OS_WINDOWS);        } else if (osName.startsWith("Solaris")) {            assertEquals(true, SystemUtils.IS_OS_SOLARIS);            assertEquals(true, SystemUtils.IS_OS_UNIX);            assertEquals(false, SystemUtils.IS_OS_WINDOWS);        } else if (osName.toLowerCase(Locale.ENGLISH).startsWith("linux")) {            assertEquals(true, SystemUtils.IS_OS_LINUX);            assertEquals(true, SystemUtils.IS_OS_UNIX);            assertEquals(false, SystemUtils.IS_OS_WINDOWS);        } else if (osName.startsWith("Mac OS X")) {            assertEquals(true, SystemUtils.IS_OS_MAC_OSX);            assertEquals(true, SystemUtils.IS_OS_UNIX);            assertEquals(false, SystemUtils.IS_OS_WINDOWS);        } else if (osName.startsWith("OS/2")) {            assertEquals(true, SystemUtils.IS_OS_OS2);            assertEquals(false, SystemUtils.IS_OS_UNIX);            assertEquals(false, SystemUtils.IS_OS_WINDOWS);        } else if (osName.startsWith("SunOS")) {            assertEquals(true, SystemUtils.IS_OS_SUN_OS);            assertEquals(true, SystemUtils.IS_OS_UNIX);            assertEquals(false, SystemUtils.IS_OS_WINDOWS);        } else {            System.out.println("Can't test IS_OS value");        }    }    //-----------------------------------------------------------------------    public void testJavaVersionAsFloat() {        JAVA_VERSION = null;        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(0f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.1";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(1.1f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.2";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(1.2f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.3.0";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(1.3f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.3.1";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(1.31f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.4.0";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(1.4f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.4.1";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(1.41f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.5.0";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(1.5f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "1.6.0";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(1.6f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "JavaVM-1.3.1";  //HP-UX        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(1.31f, getJavaVersionAsFloat(), 0.000001f);        JAVA_VERSION = "XXX-1.3.x";  //error        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(0.0f, getJavaVersionAsFloat(), 0.000001f);    }    public void testJavaVersionAsInt() {        JAVA_VERSION = null;        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(0, getJavaVersionAsInt());        JAVA_VERSION = "1.1";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(110, getJavaVersionAsInt());        JAVA_VERSION = "1.2";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(120, getJavaVersionAsInt());        JAVA_VERSION = "1.3.0";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(130, getJavaVersionAsInt());        JAVA_VERSION = "1.3.1";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(131, getJavaVersionAsInt());        JAVA_VERSION = "1.4.0";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(140, getJavaVersionAsInt());        JAVA_VERSION = "1.4.1";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(141, getJavaVersionAsInt());        JAVA_VERSION = "1.5.0";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(150, getJavaVersionAsInt());        JAVA_VERSION = "1.6.0";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(160, getJavaVersionAsInt());        JAVA_VERSION = "JavaVM-1.3.1";  //HP-UX        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(131, getJavaVersionAsInt());        JAVA_VERSION = "XXX-1.3.x";  //error        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(0, getJavaVersionAsInt());    }    public void testJavaVersionAtLeastFloat() {        float version = SystemUtils.JAVA_VERSION_FLOAT;        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));        version -= 0.1f;        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));        version += 0.2f;        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));    }    public void testJavaVersionAtLeastInt() {        int version = SystemUtils.JAVA_VERSION_INT;        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));        version -= 10;        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));        version += 20;        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));    }    //-----------------------------------------------------------------------    public void testJavaVersionMatches() {        JAVA_VERSION = null;        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(false, getJavaVersionMatches("1.3"));        assertEquals(false, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.1";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(true, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(false, getJavaVersionMatches("1.3"));        assertEquals(false, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.2";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(true, getJavaVersionMatches("1.2"));        assertEquals(false, getJavaVersionMatches("1.3"));        assertEquals(false, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.3.0";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(true, getJavaVersionMatches("1.3"));        assertEquals(false, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.3.1";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(true, getJavaVersionMatches("1.3"));        assertEquals(false, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.4.0";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(false, getJavaVersionMatches("1.3"));        assertEquals(true, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.4.1";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(false, getJavaVersionMatches("1.3"));        assertEquals(true, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.5.0";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(false, getJavaVersionMatches("1.3"));        assertEquals(false, getJavaVersionMatches("1.4"));        assertEquals(true, getJavaVersionMatches("1.5"));        JAVA_VERSION = "1.6.0";        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();        assertEquals(false, getJavaVersionMatches("1.1"));        assertEquals(false, getJavaVersionMatches("1.2"));        assertEquals(false, getJavaVersionMatches("1.3"));        assertEquals(false, getJavaVersionMatches("1.4"));        assertEquals(false, getJavaVersionMatches("1.5"));    }    public void testOSMatches() {        OS_NAME = null;        assertEquals(false, getOSMatches("Windows"));        OS_NAME = "Windows 95";        assertEquals(true, getOSMatches("Windows"));        OS_NAME = "Windows NT";        assertEquals(true, getOSMatches("Windows"));        OS_NAME = "OS/2";        assertEquals(false, getOSMatches("Windows"));    }    public void testOSMatches2() {        OS_NAME = null;        OS_VERSION = null;        assertEquals(false, getOSMatches("Windows 9", "4.1"));        OS_NAME = "Windows 95";        OS_VERSION = "4.0";        assertEquals(false, getOSMatches("Windows 9", "4.1"));        OS_NAME = "Windows 95";        OS_VERSION = "4.1";        assertEquals(true, getOSMatches("Windows 9", "4.1"));        OS_NAME = "Windows 98";        OS_VERSION = "4.1";        assertEquals(true, getOSMatches("Windows 9", "4.1"));        OS_NAME = "Windows NT";        OS_VERSION = "4.0";        assertEquals(false, getOSMatches("Windows 9", "4.1"));        OS_NAME = "OS/2";        OS_VERSION = "4.0";        assertEquals(false, getOSMatches("Windows 9", "4.1"));    }    public void testJavaAwtHeadless() {        boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(140);        String expectedStringValue = System.getProperty("java.awt.headless");        String expectedStringValueWithDefault = System.getProperty("java.awt.headless", "false");        assertNotNull(expectedStringValueWithDefault);        if (atLeastJava14) {            boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue();            if (expectedStringValue != null) {                assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS);            }            assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless());        } else {            assertNull(expectedStringValue);            assertNull(SystemUtils.JAVA_AWT_HEADLESS);            assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless());        }        assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless());    }}
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * JUnit tests. *  * @author Matthew Hawthorne * @version $Id$ * @see IncompleteArgumentException */public class IncompleteArgumentExceptionTest extends TestCase {    public static void main(String[] args) {        TestRunner.run(suite());    }    public static Test suite() {        return new TestSuite(IncompleteArgumentExceptionTest.class);    }    public IncompleteArgumentExceptionTest(String testName) {        super(testName);    }    // testConstructor    public void test1arg_nullInput() {        final Throwable t = new IncompleteArgumentException(null);        assertEquals("null is incomplete.", t.getMessage());    }    public void test1arg_validInput() {        final String name = "argument";        final Throwable t = new IncompleteArgumentException(name);        assertEquals(name + " is incomplete.", t.getMessage());    }    public void test2arg_allNullInput() {        final Throwable t = new IncompleteArgumentException(null, null);        assertEquals(            "null is missing the following items: null",            t.getMessage());    }    public void test2arg_nullString() {        final Throwable t =            new IncompleteArgumentException(                null,                new String[] { "one", "two" });        assertEquals(            "null is missing the following items: [one, two]",            t.getMessage());    }    public void test2arg_nullArray() {        final String name = "one";        final Throwable t = new IncompleteArgumentException(name, null);        assertEquals(            name + " is missing the following items: null",            t.getMessage());    }    public void test2arg_validInput() {        final String name = "input";        final Throwable t =            new IncompleteArgumentException(                name,                new String[] { "one", "two" });        assertEquals(            name + " is missing the following items: [one, two]",            t.getMessage());    }} // IncompleteArgumentExceptionTest
/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.lang;import java.lang.reflect.Constructor;import java.lang.reflect.Modifier;import java.util.Random;import junit.framework.Test;import junit.framework.TestSuite;import junit.textui.TestRunner;/** * Unit tests {@link org.apache.commons.lang.RandomStringUtils}. * * @author <a href="mailto:steven@caswell.name">Steven Caswell</a> * @author <a href="mailto:ridesmet@users.sourceforge.net">Ringo De Smet</a> * @author Phil Steitz * @version $Id$ */public class RandomStringUtilsTest extends junit.framework.TestCase {    /**     * Construct a new instance of RandomStringUtilsTest with the specified name     */    public RandomStringUtilsTest(String name) {        super(name);    }    public static Test suite() {        TestSuite suite = new TestSuite(RandomStringUtilsTest.class);        suite.setName("RandomStringUtils Tests");        return suite;    }        /**     * Set up instance variables required by this test case.     */    @Override    public void setUp() {    }        /**     * Tear down instance variables required by this test case.     */    @Override    public void tearDown() {    }        //-----------------------------------------------------------------------    public void testConstructor() {        assertNotNull(new RandomStringUtils());        Constructor[] cons = RandomStringUtils.class.getDeclaredConstructors();        assertEquals(1, cons.length);        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));        assertEquals(true, Modifier.isPublic(RandomStringUtils.class.getModifiers()));        assertEquals(false, Modifier.isFinal(RandomStringUtils.class.getModifiers()));    }        //-----------------------------------------------------------------------    /**     * Test the implementation     */    public void testRandomStringUtils() {        String r1 = RandomStringUtils.random(50);        assertEquals("random(50) length", 50, r1.length());        String r2 = RandomStringUtils.random(50);        assertEquals("random(50) length", 50, r2.length());        assertTrue("!r1.equals(r2)", !r1.equals(r2));                r1 = RandomStringUtils.randomAscii(50);        assertEquals("randomAscii(50) length", 50, r1.length());        for(int i = 0; i < r1.length(); i++) {            assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127);        }                r2 = RandomStringUtils.randomAscii(50);        assertTrue("!r1.equals(r2)", !r1.equals(r2));        r1 = RandomStringUtils.randomAlphabetic(50);        assertEquals("randomAlphabetic(50)", 50, r1.length());        for(int i = 0; i < r1.length(); i++) {            assertEquals("r1 contains alphabetic", true, Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i)));        }        r2 = RandomStringUtils.randomAlphabetic(50);        assertTrue("!r1.equals(r2)", !r1.equals(r2));                r1 = RandomStringUtils.randomAlphanumeric(50);        assertEquals("randomAlphanumeric(50)", 50, r1.length());        for(int i = 0; i < r1.length(); i++) {            assertEquals("r1 contains alphanumeric", true, Character.isLetterOrDigit(r1.charAt(i)));        }        r2 = RandomStringUtils.randomAlphabetic(50);        assertTrue("!r1.equals(r2)", !r1.equals(r2));                r1 = RandomStringUtils.randomNumeric(50);        assertEquals("randomNumeric(50)", 50, r1.length());        for(int i = 0; i < r1.length(); i++) {            assertEquals("r1 contains numeric", true, Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i)));        }        r2 = RandomStringUtils.randomNumeric(50);        assertTrue("!r1.equals(r2)", !r1.equals(r2));                String set = "abcdefg";        r1 = RandomStringUtils.random(50, set);        assertEquals("random(50, \"abcdefg\")", 50, r1.length());        for(int i = 0; i < r1.length(); i++) {            assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1);        }        r2 = RandomStringUtils.random(50, set);        assertTrue("!r1.equals(r2)", !r1.equals(r2));                r1 = RandomStringUtils.random(50, (String) null);        assertEquals("random(50) length", 50, r1.length());        r2 = RandomStringUtils.random(50, (String) null);        assertEquals("random(50) length", 50, r2.length());        assertTrue("!r1.equals(r2)", !r1.equals(r2));                set = "stuvwxyz";        r1 = RandomStringUtils.random(50, set.toCharArray());        assertEquals("random(50, \"stuvwxyz\")", 50, r1.length());        for(int i = 0; i < r1.length(); i++) {            assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1);        }        r2 = RandomStringUtils.random(50, set);        assertTrue("!r1.equals(r2)", !r1.equals(r2));                r1 = RandomStringUtils.random(50, (char[]) null);        assertEquals("random(50) length", 50, r1.length());        r2 = RandomStringUtils.random(50, (char[]) null);        assertEquals("random(50) length", 50, r2.length());        assertTrue("!r1.equals(r2)", !r1.equals(r2));        long seed = System.currentTimeMillis();        r1 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));        r2 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));        assertEquals("r1.equals(r2)", r1, r2);        r1 = RandomStringUtils.random(0);        assertEquals("random(0).equals(\"\")", "", r1);    }    public void testExceptions() {        try {            RandomStringUtils.random(-1);            fail();        } catch (IllegalArgumentException ex) {}        try {            RandomStringUtils.random(-1, true, true);            fail();        } catch (IllegalArgumentException ex) {}        try {            RandomStringUtils.random(-1, new char[0]);            fail();        } catch (IllegalArgumentException ex) {}        try {            RandomStringUtils.random(-1, "");            fail();        } catch (IllegalArgumentException ex) {}        try {            RandomStringUtils.random(-1, 'a', 'z', false, false);            fail();        } catch (IllegalArgumentException ex) {}        try {            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0]);            fail();        } catch (IllegalArgumentException ex) {}        try {            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0], new Random());            fail();        } catch (IllegalArgumentException ex) {}    }        /**     * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric     * This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7     */      public void testRandomAlphaNumeric() {        char[] testChars = {'a', 'z', 'A', 'Z', '0', '9'};        boolean[] found = {false, false, false, false, false, false};        for (int i = 0; i < 100; i++) {            String randString = RandomStringUtils.randomAlphanumeric(10);            for (int j = 0; j < testChars.length; j++) {                if (randString.indexOf(testChars[j]) > 0) {                    found[j] = true;                }            }        }        for (int i = 0; i < testChars.length; i++) {            if (!found[i]) {                fail("alphanumeric character not generated in 1000 attempts: "                    + testChars[i] +" -- repeated failures indicate a problem ");            }        }    }        /**     * Make sure '0' and '9' are generated by randomNumeric     * This test will fail randomly with probability = 2 * (9/10)**1000 ~ 3.5E-46     */      public void testRandomNumeric() {        char[] testChars = {'0','9'};        boolean[] found = {false, false};        for (int i = 0; i < 100; i++) {            String randString = RandomStringUtils.randomNumeric(10);            for (int j = 0; j < testChars.length; j++) {                if (randString.indexOf(testChars[j]) > 0) {                    found[j] = true;                }            }        }        for (int i = 0; i < testChars.length; i++) {            if (!found[i]) {                fail("digit not generated in 1000 attempts: "                    + testChars[i] +" -- repeated failures indicate a problem ");            }        }      }        /**     * Make sure boundary alpha characters are generated by randomAlphabetic     * This test will fail randomly with probability = 4 * (51/52)**1000 ~ 1.58E-8     */      public void testRandomAlphabetic() {        char[] testChars = {'a', 'z', 'A', 'Z'};        boolean[] found = {false, false, false, false};        for (int i = 0; i < 100; i++) {            String randString = RandomStringUtils.randomAlphabetic(10);            for (int j = 0; j < testChars.length; j++) {                if (randString.indexOf(testChars[j]) > 0) {                    found[j] = true;                }            }        }        for (int i = 0; i < testChars.length; i++) {            if (!found[i]) {                fail("alphanumeric character not generated in 1000 attempts: "                    + testChars[i] +" -- repeated failures indicate a problem ");            }        }    }        /**     * Make sure 32 and 127 are generated by randomNumeric     * This test will fail randomly with probability = 2*(95/96)**1000 ~ 5.7E-5     */      public void testRandomAscii() {        char[] testChars = {(char) 32, (char) 126};        boolean[] found = {false, false};        for (int i = 0; i < 100; i++) {            String randString = RandomStringUtils.randomAscii(10);            for (int j = 0; j < testChars.length; j++) {                if (randString.indexOf(testChars[j]) > 0) {                    found[j] = true;                }            }        }        for (int i = 0; i < testChars.length; i++) {            if (!found[i]) {                fail("ascii character not generated in 1000 attempts: "                 + (int) testChars[i] +                  " -- repeated failures indicate a problem");            }        }      }        /**      * Test homogeneity of random strings generated --     * i.e., test that characters show up with expected frequencies     * in generated strings.  Will fail randomly about 1 in 1000 times.     * Repeated failures indicate a problem.     */    public void testRandomStringUtilsHomog() {        String set = "abc";        char[] chars = set.toCharArray();        String gen = "";        int[] counts = {0,0,0};        int[] expected = {200,200,200};        for (int i = 0; i< 100; i++) {           gen = RandomStringUtils.random(6,chars);           for (int j = 0; j < 6; j++) {               switch (gen.charAt(j)) {                   case 'a': {counts[0]++; break;}                   case 'b': {counts[1]++; break;}                   case 'c': {counts[2]++; break;}                   default: {fail("generated character not in set");}               }           }        }         // Perform chi-square test with df = 3-1 = 2, testing at .001 level        assertTrue("test homogeneity -- will fail about 1 in 1000 times",            chiSquare(expected,counts) < 13.82);      }        /**     * Computes Chi-Square statistic given observed and expected counts     * @param observed array of observed frequency counts     * @param expected array of expected frequency counts     */    private double chiSquare(int[] expected, int[] observed) {        double sumSq = 0.0d;        double dev = 0.0d;        for (int i = 0; i < observed.length; i++) {            dev = (observed[i] - expected[i]);            sumSq += dev * dev / expected[i];        }        return sumSq;    }               /**     * Checks if the string got by {@link RandomStringUtils#random(int)}     * can be converted to UTF-8 and back without loss.     *     * @author stefanhoehne@fastmail.fm     * @throws Exception     */    public void testLang100() throws Exception {        int size = 5000;        String encoding = "UTF-8";        String orig = RandomStringUtils.random(size);        byte[] bytes = orig.getBytes(encoding);        String copy = new String(bytes, encoding);        // for a verbose compare:        for (int i=0; i < orig.length() && i < copy.length(); i++) {            char o = orig.charAt(i);            char c = copy.charAt(i);            assertEquals("differs at " + i + "(" + Integer.toHexString((new Character(o)).hashCode()) + "," +            Integer.toHexString((new Character(c)).hashCode()) + ")", o, c);        }        // compare length also        assertEquals(orig.length(), copy.length());        // just to be complete        assertEquals(orig, copy);    }    public static void main(String args[]) {        TestRunner.run(suite());    }}