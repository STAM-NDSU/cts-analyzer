/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */import java.io.File;import java.io.IOException;import javax.xml.transform.TransformerException;import net.sourceforge.pmd.build.PmdBuildException;import net.sourceforge.pmd.build.RuleSetToDocs;import org.junit.AfterClass;import org.junit.Before;import org.junit.Test;/** * @author Romain PELISSE, belaran@gmail.com * */public class PmdBuildTest {    private static String TEST_DIR = "target-test/";    private static File testDir;    /**     * @throws java.lang.Exception     */    @Before    public void setUp() throws Exception {testDir = new File(TEST_DIR);if (! testDir.exists() && ! testDir.mkdir() ){    throw new PmdBuildException("Can't create " + TEST_DIR);}else if ( ! testDir.isDirectory() ){    throw new PmdBuildException("testdir " + TEST_DIR + " exist !");}    }    @Test    public void convertRulesetsTest() throws IOException {RuleSetToDocs builder = new RuleSetToDocs();builder.setRulesDirectory("rulesets");builder.setTargetDirectory(TEST_DIR);try {    builder.convertRulesets();} catch (PmdBuildException e) {    e.printStackTrace();}    }    @Test    public void generateIndexRules() throws IOException, TransformerException {RuleSetToDocs builder = new RuleSetToDocs();builder.setRulesDirectory("rulesets");builder.setTargetDirectory(TEST_DIR);try {    builder.generateRulesIndex();} catch (PmdBuildException e) {    e.printStackTrace();}    }    /**     * @throws java.lang.Exception     */    @AfterClass    public static void tearDown() throws Exception {RuleSetToDocs.deleteFile(testDir);    }}
import net.sourceforge.pmd.ant.PmdBuildTask;import org.apache.tools.ant.BuildException;import org.junit.After;import org.junit.Before;import org.junit.BeforeClass;import org.junit.Test;/** * @author rpelisse * */public class AntTaskTest {    /**     * @throws java.lang.Exception     */    @BeforeClass    public static void setUpBeforeClass() throws Exception {    }    /**     * @throws java.lang.Exception     */    @Before    public void setUp() throws Exception {    }    /**     * @throws java.lang.Exception     */    @After    public void tearDown() throws Exception {    }    @Test    public void antTask() {PmdBuildTask task = new PmdBuildTask();task.setRulesDirectory("rulesets");task.setTarget("target-test");try {    task.execute();} catch (BuildException e) {    e.printStackTrace();}    }}
/* *  */package test.net.sourceforge.pmd.jdbc;import com.mockobjects.sql.MockConnection;import com.mockobjects.sql.MockDriver;import com.mockobjects.sql.MockPreparedStatement;import com.mockobjects.sql.MockSingleRowResultSet;import junit.framework.TestCase;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.jdbc.JDBCReportListener;import net.sourceforge.pmd.stat.Metric;import test.net.sourceforge.pmd.MockRule;import java.sql.Date;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.util.Properties;public class JDBCReportListenerTest extends TestCase {    private MockDriver driver = null;    private MockPreparedStatement violInsert = null;    private MockPreparedStatement metInsert = null;    public void setUp() {driver = new MockDriver();try {    DriverManager.registerDriver( driver );} catch (Exception e) {    e.printStackTrace();}    }    public void tearDown() {try {    DriverManager.deregisterDriver( driver );} catch (Exception e) {    e.printStackTrace();}    }    private class MockInsertPMDRunsextends MockPreparedStatement    {private int runId = 0;public MockInsertPMDRuns( int projectId, int runId ) {    //    setExpectedQueryString("INSERT INTO PMD_RUNS (PROJECT_ID, RUN_DATE) VALUES (?, ?)");    addExpectedSetParameter( 1, projectId );    this.runId = runId;}public void setDate( int position, Date dateTime ) {    assertEquals("Date in wrong position.", 2, position);    assertTrue( "Didn't add the current date.",dateTime.getTime() > System.currentTimeMillis() - 5000);    assertTrue( "Set a future date.",dateTime.getTime() < System.currentTimeMillis() + 5000);}public ResultSet getGeneratedKeys() {    MockSingleRowResultSet RC = new MockSingleRowResultSet();    RC.addExpectedIndexedValues( new Object[] { new Integer(runId) });    return RC;}    }    private class MockPMDConxextends MockConnection    {public MockPMDConx( int projectId, int runId ) {    super();    setupAddPreparedStatement( new MockInsertPMDRuns( projectId, runId ) );    violInsert = new MockPreparedStatement();    setupAddPreparedStatement( violInsert );        metInsert = new MockPreparedStatement();    setupAddPreparedStatement( metInsert );}public PreparedStatement prepareStatement( String sql, int returnKeys )    throws SQLException{    assertEquals( "Not set to return generated keys.",   returnKeys, Statement.RETURN_GENERATED_KEYS );    return prepareStatement( sql );}    }    public JDBCReportListener getIUT(int projectId) throws SQLException    {return new JDBCReportListener( "jdbc:mock:getIUT",       "iut_user", "iut_pw", projectId );    }    public void testLongConstructor() throws Throwable {MockConnection conx = new MockPMDConx(1, 5);driver.setupConnect( conx );new JDBCReportListener("jdbc:mock:testLongConstructor", "tlc_user", "tlc_pw", 1);    }    public void testPropConstructor() throws Throwable {MockConnection conx = new MockPMDConx(2, 8);driver.setupConnect( conx );Properties props = new Properties();props.put( JDBCReportListener.JDBC_URL, "jdbc:mock:testPropConstructor" );props.put( JDBCReportListener.JDBC_USER, "tpc_user" );props.put( JDBCReportListener.JDBC_PASSWORD, "tpc_pw" );props.put( JDBCReportListener.JDBC_PROJECTID, "2");new JDBCReportListener(props);    }    public void testSingleViolation() throws Throwable {MockConnection conx = new MockPMDConx( 16, 36 );driver.setupConnect( conx );violInsert.addExpectedSetParameter( 1, 36 ); // Run IDviolInsert.addExpectedSetParameter( 2, "viol1" ); // RuleviolInsert.addExpectedSetParameter( 3, "fileA" );      // File NameviolInsert.addExpectedSetParameter( 4, 256 );          // Line NumberviolInsert.addExpectedSetParameter( 5, "packageB" );   // Package NameviolInsert.addExpectedSetParameter( 6, "classC" );     // Class NameviolInsert.addExpectedSetParameter( 7, "msg" );JDBCReportListener IUT = getIUT( 16 );RuleContext ctx = new RuleContext();ctx.setSourceCodeFilename( "fileA" );ctx.setPackageName( "packageB" );ctx.setClassName( "classC" );IUT.ruleViolationAdded( new RuleViolation( new MockRule("viol1", "Description", "msg" ),    256, ctx ));    }    public void testMultiViolation() throws Throwable {MockConnection conx = new MockPMDConx( 16, 36 );driver.setupConnect( conx );JDBCReportListener IUT = getIUT( 16 );violInsert.addExpectedSetParameter( 1, 36 ); // Run IDviolInsert.addExpectedSetParameter( 2, "viol1" ); // RuleviolInsert.addExpectedSetParameter( 3, "fileA" );      // File NameviolInsert.addExpectedSetParameter( 4, 256 );          // Line NumberviolInsert.addExpectedSetParameter( 5, "packageB" );   // Package NameviolInsert.addExpectedSetParameter( 6, "classC" );     // Class NameviolInsert.addExpectedSetParameter( 7, "msg" );RuleContext ctx = new RuleContext();ctx.setSourceCodeFilename( "fileA" );ctx.setPackageName( "packageB" );ctx.setClassName( "classC" );IUT.ruleViolationAdded( new RuleViolation( new MockRule("viol1", "Description", "msg" ),    256, ctx ));violInsert.addExpectedSetParameter( 1, 36 ); // Run IDviolInsert.addExpectedSetParameter( 2, "viol1a" ); // RuleviolInsert.addExpectedSetParameter( 3, "fileAa" );      // File NameviolInsert.addExpectedSetParameter( 4, 2561 );          // Line NumberviolInsert.addExpectedSetParameter( 5, "packageBa" );   // Package NameviolInsert.addExpectedSetParameter( 6, "classCa" );     // Class NameviolInsert.addExpectedSetParameter( 7, "msga" );ctx = new RuleContext();ctx.setSourceCodeFilename( "fileAa" );ctx.setPackageName( "packageBa" );ctx.setClassName( "classCa" );IUT.ruleViolationAdded( new RuleViolation( new MockRule("viol1a", "Descriptiona", "msga" ),    2561, ctx ));    }    public void testSingleMetric() throws Throwable {MockConnection conx = new MockPMDConx( 18, 378 );driver.setupConnect( conx );metInsert.addExpectedSetParameter( 1, 378 );metInsert.addExpectedSetParameter( 2, "single" );metInsert.addExpectedSetParameter( 3, new Double( 1.0 ));metInsert.addExpectedSetParameter( 4, new Double( 6.0 ));metInsert.addExpectedSetParameter( 5, new Double( 3.0 ));metInsert.addExpectedSetParameter( 6, new Double( 1.5 ));JDBCReportListener IUT = getIUT( 18 );IUT.metricAdded( new Metric("single", 5, 30, 1.0, 6.0, 3.0, 1.5) );    }    public void testMultiMetric() throws Throwable {MockConnection conx = new MockPMDConx( 18, 378 );driver.setupConnect( conx );JDBCReportListener IUT = getIUT( 18 );metInsert.addExpectedSetParameter( 1, 378 );metInsert.addExpectedSetParameter( 2, "first" );metInsert.addExpectedSetParameter( 3, new Double( 1.0 ));metInsert.addExpectedSetParameter( 4, new Double( 6.0 ));metInsert.addExpectedSetParameter( 5, new Double( 3.0 ));metInsert.addExpectedSetParameter( 6, new Double( 1.5 ));IUT.metricAdded( new Metric("first", 5, 30, 1.0, 6.0, 3.0, 1.5) );metInsert.addExpectedSetParameter( 1, 378 );metInsert.addExpectedSetParameter( 2, "second" );metInsert.addExpectedSetParameter( 3, new Double( 1.01 ));metInsert.addExpectedSetParameter( 4, new Double( 6.01 ));metInsert.addExpectedSetParameter( 5, new Double( 3.01 ));metInsert.addExpectedSetParameter( 6, new Double( 1.51 ));IUT.metricAdded( new Metric("second", 7, 32.5, 1.01, 6.01, 3.01, 1.51) );    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.junit;import java.util.Iterator;import java.util.List;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;public class TestClassWithoutTestCasesRule extends AbstractJUnitRule {    @Override    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {        if (node.isAbstract() || node.isInterface() || node.isNested()) {            return data;        }        List<ASTMethodDeclaration> m = node.findDescendantsOfType(ASTMethodDeclaration.class);        boolean testsFound = false;        if (m != null) {        for (Iterator<ASTMethodDeclaration> it = m.iterator(); it.hasNext() && !testsFound;) {        ASTMethodDeclaration md = it.next();        if (!isInInnerClassOrInterface(md)        && isJUnitMethod(md, data)) {    testsFound = true;}            }        }        if (!testsFound) {        addViolation(data, node);        }        return data;    }    private boolean isInInnerClassOrInterface(ASTMethodDeclaration md) {        ASTClassOrInterfaceDeclaration p = md.getFirstParentOfType(ASTClassOrInterfaceDeclaration.class);        return p != null && p.isNested();    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.util.filter;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.util.filter.RegexStringFilter;import org.junit.Test;public class RegexStringFilterTest {    @Test    public void testFilterAbsoluteWithExtension() {String pattern = "C:/workspace/project/X.java";verifyFilterFalse("same relative path w/ extension", pattern, "X.java");verifyFilterFalse("same relative path w/o extension", pattern, "X");verifyFilterFalse("different relative path w/ extension", pattern, "Y.java");verifyFilterFalse("different relative path w/o extension", pattern, "Y");verifyFilterTrue("same absolute path w/ extension", pattern, "C:/workspace/project/X.java");verifyFilterFalse("same absolute path w/o extension", pattern, "C:/workspace/project/X");verifyFilterFalse("different absolute path w/ extension", pattern, "C:/workspace/project/Y.java");verifyFilterFalse("different absolute path w/o extension", pattern, "C:/workspace/project/Y");    }    @Test    public void testFilterAbsoluteWithoutExtension() {String pattern = "C:/workspace/project/X";verifyFilterFalse("same relative path w/ extension", pattern, "X.java");verifyFilterFalse("same relative path w/o extension", pattern, "X");verifyFilterFalse("different relative path w/ extension", pattern, "Y.java");verifyFilterFalse("different relative path w/o extension", pattern, "Y");verifyFilterFalse("same absolute path w/ extension", pattern, "C:/workspace/project/X.java");verifyFilterTrue("same absolute path w/o extension", pattern, "C:/workspace/project/X");verifyFilterFalse("different absolute path w/ extension", pattern, "C:/workspace/project/Y.java");verifyFilterFalse("different absolute path w/o extension", pattern, "C:/workspace/project/Y");    }    @Test    public void testFilterRelativeWithExtension() {String pattern = ".*X.java";verifyFilterTrue("same relative path w/ extension", pattern, "X.java");verifyFilterFalse("same relative path w/o extension", pattern, "X");verifyFilterFalse("different relative path w/ extension", pattern, "Y.java");verifyFilterFalse("different relative path w/o extension", pattern, "Y");verifyFilterTrue("same absolute path w/ extension", pattern, "C:/workspace/project/X.java");verifyFilterFalse("same absolute path w/o extension", pattern, "C:/workspace/project/X");verifyFilterFalse("different absolute path w/ extension", pattern, "C:/workspace/project/Y.java");verifyFilterFalse("different absolute path w/o extension", pattern, "C:/workspace/project/Y");    }    @Test    public void testFilterRelativeWithoutExtension() {String pattern = ".*X";verifyFilterFalse("same relative path w/ extension", pattern, "X.java");verifyFilterTrue("same relative path w/o extension", pattern, "X");verifyFilterFalse("different relative path w/ extension", pattern, "Y.java");verifyFilterFalse("different relative path w/o extension", pattern, "Y");verifyFilterFalse("same absolute path w/ extension", pattern, "C:/workspace/project/X.java");verifyFilterTrue("same absolute path w/o extension", pattern, "C:/workspace/project/X");verifyFilterFalse("different absolute path w/ extension", pattern, "C:/workspace/project/Y.java");verifyFilterFalse("different absolute path w/o extension", pattern, "C:/workspace/project/Y");    }    @Test    public void testEndsWith() {// These patterns cannot be optimized to use String.endsWithverifyEndsWith("no literal path", ".*", null);verifyEndsWith("not ends with", "x", null);verifyEndsWith("glob on end", ".*XXX.*", null);verifyEndsWith("special character \\", ".*X\\Y", null);verifyEndsWith("special character [", ".*X[Y", null);verifyEndsWith("special character (", ".*X(Y", null);verifyEndsWith("special character *", ".*X*Y", null);verifyEndsWith("special character ?", ".*X?Y", null);verifyEndsWith("special character +", ".*X+Y", null);verifyEndsWith("special character |", ".*X|Y", null);verifyEndsWith("special character {", ".*X{Y", null);verifyEndsWith("special character $", ".*X$Y", null);verifyEndsWith("too many .", ".*X.Y.java", null);// These patterns can be optimized to use String.endsWithverifyEndsWith("unescaped .", ".*X.java", "X.java");verifyEndsWith("escaped .", ".*X\\.java", "X.java");verifyEndsWith("no extension", ".*X", "X");verifyEndsWith("begin anchor, unescaped .", "^.*X.java", "X.java");verifyEndsWith("begin anchor, escaped .", "^.*X\\.java", "X.java");verifyEndsWith("begin anchor, no extension", "^.*X", "X");verifyEndsWith("end anchor, unescaped .", ".*X.java$", "X.java");verifyEndsWith("end anchor, escaped .", ".*X\\.java$", "X.java");verifyEndsWith("end anchor, no extension", ".*X$", "X");verifyEndsWith("begin and end anchors, unescaped .", "^.*X.java$", "X.java");verifyEndsWith("begin and end anchors, escaped .", "^.*X\\.java$", "X.java");verifyEndsWith("begin and end anchors, no extension", "^.*X$", "X");    }    private static void verifyFilterTrue(final String message, final String pattern, final String file) {assertTrue("filter: " + message, new RegexStringFilter(pattern).filter(file));    }    private static void verifyFilterFalse(final String message, final String pattern, final String file) {assertFalse("filter: " + message, new RegexStringFilter(pattern).filter(file));    }    private static void verifyEndsWith(final String message, final String pattern, final String endsWith) {assertEquals("endsWith: " + message, endsWith, new RegexStringFilter(pattern).getEndsWith());    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(RegexStringFilterTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.util;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.lang.java.symboltable.Applier;import net.sourceforge.pmd.util.UnaryFunction;import org.junit.Test;import java.util.ArrayList;import java.util.List;public class ApplierTest {    private static class MyFunction implements UnaryFunction<Object> {        private boolean gotCallback;        public void applyTo(Object o) {            this.gotCallback = true;        }        public boolean gotCallback() {            return this.gotCallback;        }    }    @Test    public void testSimple() {        MyFunction f = new MyFunction();        List<Object> l = new ArrayList<Object>();        l.add(new Object());        Applier.apply(f, l.iterator());        assertTrue(f.gotCallback());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ApplierTest.class);    }}
package net.sourceforge.pmd.util;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.NoSuchElementException;import net.sourceforge.pmd.util.CompoundIterator;import org.junit.Before;import org.junit.Test;public class CompoundListTest {    private List<String> l1;    private List<String> l2;    private Iterator<String> iterator;    @Before    public void setUp() {l1 = new ArrayList<String>();l1.add("1");l1.add("2");l2 = new ArrayList<String>();l2.add("3");l2.add("4");iterator = new CompoundIterator<String>(l1.iterator(), l2.iterator());    }    @Test    public void testHappyPath() {assertTrue(iterator.hasNext());assertEquals("1", iterator.next());assertTrue(iterator.hasNext());assertEquals("2", iterator.next());assertTrue(iterator.hasNext());assertEquals("3", iterator.next());assertTrue(iterator.hasNext());assertEquals("4", iterator.next());assertFalse(iterator.hasNext());assertEquals(2, l1.size());assertEquals(2, l2.size());    }    @Test    public void testHappyPathRemove() {assertTrue(iterator.hasNext());assertEquals("1", iterator.next());iterator.remove();assertTrue(iterator.hasNext());assertEquals("2", iterator.next());assertTrue(iterator.hasNext());assertEquals("3", iterator.next());iterator.remove();assertTrue(iterator.hasNext());assertEquals("4", iterator.next());assertFalse(iterator.hasNext());assertEquals(1, l1.size());assertEquals("2", l1.get(0));assertEquals(1, l2.size());assertEquals("4", l2.get(0));    }    @Test    public void testEmpty() {Iterator<?> iterator = new CompoundIterator();assertFalse(iterator.hasNext());    }    @Test(expected = NoSuchElementException.class)    public void testEmptyBadNext() {Iterator<?> iterator = new CompoundIterator();iterator.next();    }    @Test(expected = IllegalStateException.class)    public void testEmptyBadRemove() {Iterator<?> iterator = new CompoundIterator();iterator.remove();    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(CompoundListTest.class);    }}
package net.sourceforge.pmd.util;import static org.junit.Assert.fail;import java.util.HashMap;import java.util.List;import java.util.Map;import junit.framework.Assert;import net.sourceforge.pmd.util.TypeMap;import org.junit.Test;/** * Evaluates all major functionality of the TypeMap class. *  * @author Brian Remedios */public class TypeMapTest {@Testpublic void testAddClassOfQ() {TypeMap map = new TypeMap(2);map.add(java.util.List.class);try { map.add(java.awt.List.class);} catch (IllegalArgumentException ex) {return;// caught ok}fail("Uncaught error inserting type with same root names");}@Testpublic void testContainsClassOfQ() {TypeMap map = new TypeMap(2);map.add(String.class);map.add(List.class);Assert.assertTrue(map.contains(String.class));Assert.assertTrue(map.contains(List.class));Assert.assertFalse(map.contains(Map.class));}@Testpublic void testContainsString() {TypeMap map = new TypeMap(2);map.add(String.class);map.add(List.class);Assert.assertTrue(map.contains("String"));Assert.assertTrue(map.contains("java.lang.String"));}@Testpublic void testTypeFor() {TypeMap map = new TypeMap(2);map.add(String.class);map.add(List.class);Assert.assertTrue(map.typeFor("String") == String.class);Assert.assertTrue(map.typeFor("java.lang.String") == String.class);Assert.assertTrue(map.typeFor("List") == List.class);Assert.assertTrue(map.typeFor("java.util.List") == List.class);}@Testpublic void testSize() {TypeMap map = new TypeMap(4);map.add(String.class);map.add(HashMap.class);map.add(Integer.class);Assert.assertTrue(map.size() == 6);}    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(TypeMapTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.util;import static org.junit.Assert.assertEquals;import java.util.Collection;import net.sourceforge.pmd.ReadableDurationTest;import net.sourceforge.pmd.util.DateTimeUtil;import org.junit.Test;/** *  * @author Brian Remedios */public class DateTimeUtilTest {    @Test    public void testConversions() {        Collection<Object[]> stringNumberPairs = ReadableDurationTest.data();        for (Object[] stringAndNumber : stringNumberPairs) {    String result = (String)stringAndNumber[0];    Integer milliseconds = (Integer)stringAndNumber[1];        assertEquals(result, DateTimeUtil.asHoursMinutesSeconds(milliseconds));    }          }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(DateTimeUtilTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.util;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.util.StringUtil;import org.junit.Test;public class StringUtilTest {    @Test    public void testReplaceWithOneChar() {        assertEquals("faa", StringUtil.replaceString("foo", 'o', "a"));    }    @Test    public void testReplaceWithMultipleChars() {        assertEquals("faaaa", StringUtil.replaceString("foo", 'o', "aa"));    }    @Test    public void testReplaceStringWithString() {        assertEquals("foo]]&gt;bar", StringUtil.replaceString("foo]]>bar", "]]>", "]]&gt;"));    }    @Test    public void testReplaceStringWithString2() {        assertEquals("replaceString didn't work with a >", "foobar", StringUtil.replaceString("foobar", "]]>", "]]&gt;"));    }    @Test    public void testReplaceWithNull() {        assertEquals("replaceString didn't work with a char", "f", StringUtil.replaceString("foo", 'o', null));    }    /**     * Usually you would set the system property "net.sourceforge.pmd.supportUTF8" to either "no" or "yes", to     * switch UTF8 support.     *     * e.g.     * <code>System.setProperty("net.sourceforge.pmd.supportUTF8","yes");</code>     */    @Test    public void testUTF8NotSupported() {    StringBuilder sb = new StringBuilder();        String test = "é";        StringUtil.appendXmlEscaped(sb, test, false);        assertEquals("&#xe9;", sb.toString());    }    @Test    public void testUTF8Supported() {    StringBuilder sb = new StringBuilder();        String test = "é";        StringUtil.appendXmlEscaped(sb, test, true);        assertEquals("é", sb.toString());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(StringUtilTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.testframework;import java.util.Properties;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.lang.LanguageVersion;/** * Stores the information required to run a complete test. */public class TestDescriptor {    private Rule rule;    private Properties properties;    private String description;    private int numberOfProblemsExpected;    private String code;    private LanguageVersion languageVersion;    private boolean reinitializeRule = true;   //default, avoids unintentional mixing of state between test cases    private boolean isRegressionTest = true;    // Empty descriptor added to please mvn surefire plugin    public TestDescriptor() {        }        public TestDescriptor(String code, String description, int numberOfProblemsExpected, Rule rule) {        this(code, description, numberOfProblemsExpected, rule, RuleTst.DEFAULT_LANGUAGE_VERSION);    }        public TestDescriptor(String code, String description, int numberOfProblemsExpected, Rule rule, LanguageVersion languageVersion) {        this.rule = rule;        this.code = code;        this.description = description;        this.numberOfProblemsExpected = numberOfProblemsExpected;        this.languageVersion = languageVersion;    }    public void setProperties(Properties properties) {        this.properties = properties;    }        public Properties getProperties() {        return properties;    }        public String getCode() {        return code;    }    public LanguageVersion getLanguageVersion() {        return languageVersion;    }    public String getDescription() {        return description;    }    public int getNumberOfProblemsExpected() {        return numberOfProblemsExpected;    }    public Rule getRule() {        return rule;    }    public boolean getReinitializeRule() {        return reinitializeRule;    }    public void setReinitializeRule(boolean reinitializeRule) {        this.reinitializeRule = reinitializeRule;    }    /**     * Checks whether we are testing for regression problems only.     * Return value is based on the system property "pmd.regress".     *      * @return <code>false</code> if system property "pmd.regress" is set to <code>false</code>, <code>true</code> otherwise     */    public static boolean inRegressionTestMode() {boolean inRegressionMode = true; // defaulttry {    //get the "pmd.regress" System property    String property = System.getProperty("pmd.regress");    if (property != null) {inRegressionMode = Boolean.parseBoolean(property);    }} catch (IllegalArgumentException e) {} catch (NullPointerException e) {}        return inRegressionMode;    }    public boolean isRegressionTest() {        return isRegressionTest;    }    public void setRegressionTest(boolean isRegressionTest) {        this.isRegressionTest = isRegressionTest;    }}
/** * */package net.sourceforge.pmd.testframework;import static org.junit.Assert.assertEquals;import java.io.IOException;import java.util.List;import net.sourceforge.pmd.cpd.SourceCode;import net.sourceforge.pmd.cpd.TokenEntry;import net.sourceforge.pmd.cpd.Tokenizer;import net.sourceforge.pmd.cpd.Tokens;/** * @author Romain PELISSE, belaran@gmail.com * */public abstract class AbstractTokenizerTest {protected int expectedTokenCount;protected Tokenizer tokenizer;protected SourceCode sourceCode;public abstract void buildTokenizer();public abstract String getSampleCode();protected void tokenizeTest() throws IOException {Tokens tokens = new Tokens();tokenizer.tokenize(sourceCode, tokens);List<TokenEntry> entries = tokens.getTokens();assertEquals(expectedTokenCount,entries.size());}}
/** * <copyright> *  Copyright 1997-2002 BBNT Solutions, LLC *  under sponsorship of the Defense Advanced Research Projects Agency (DARPA). * *  This program is free software; you can redistribute it and/or modify *  it under the terms of the Cougaar Open Source License as published by *  DARPA on the Cougaar Open Source Website (www.cougaar.org). * *  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS *  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS, *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR *  PERFORMANCE OF THE COUGAAR SOFTWARE. * </copyright> * * Created on Aug 26, 2002 */package net.sourceforge.pmd.stat;import static net.sourceforge.pmd.lang.rule.stat.StatisticalRule.MINIMUM_DESCRIPTOR;import static net.sourceforge.pmd.lang.rule.stat.StatisticalRule.SIGMA_DESCRIPTOR;import static net.sourceforge.pmd.lang.rule.stat.StatisticalRule.TOP_SCORE_DESCRIPTOR;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.util.ArrayList;import java.util.Collections;import java.util.Iterator;import java.util.List;import java.util.Random;import junit.framework.AssertionFailedError;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.java.ast.DummyJavaNode;import net.sourceforge.pmd.lang.java.symboltable.SourceFileScope;import net.sourceforge.pmd.lang.rule.stat.StatisticalRule;import net.sourceforge.pmd.stat.DataPoint;import net.sourceforge.pmd.stat.Metric;import org.junit.Before;import org.junit.Ignore;import org.junit.Test;/** * This class tests the Statistical Rules in PMD. * <p/> * The idea is, that we fill up 999 datapoints into * the Stat Rule, and then throw random parameters * at it. * <p/> * The three parameters which are checked are: * sigma - # Sigmas over the mean. * topscore - Only the top 5 or so items. * minimum - Only things of score 10 or better * <p/> * When more than one parameter is lumped together, then * we expect the one which would return the fewest to * determine what gets sent back. * <p/> * So, we throw each collection of parameters, where each * one is a different order into the system.  We check the * results off of what the smallest value should be. * <p/> * If you are going to work with StatisticalRule any, please * bump the "NUM_TESTS" number up to something like 128.  That * way you are more likely to identify problems.  It is set low * now to make building and running tests easier (when we aren't * touching the file.) * <p/> * Note also, that when verifying the Sigma, I wasn't quite able * to determine how many results it would return (it would vary * from -2 to 2 of what I expected.)  That is what the delta * parameter on the verify method takes.  If you can figure it * out exactly, (without stealing code from the StatRule) then * feel free to change it and tighten the deltas. */public class StatisticalRuleTest  {    private static final int POINTS = 100;    private DataPoint points[] = new DataPoint[POINTS];    private MockStatisticalRule IUT = null;    private String testName = "";//FIXME - why/when was this added. It was never set.    private Random random = new Random();    public static final double MAX_MINIMUM = POINTS;    public static final double NO_MINIMUM = -1.0;    public static final double MAX_SIGMA = 5.0;    public static final double NO_SIGMA = -1.0;    public static final int MIN_TOPSCORE = 0;    public static final int NO_TOPSCORE = -1;    public static final double MEAN = 49.5;    public static final double SIGMA = 29.0115;    public static final int NUM_TESTS = 1;    public static final double DELTA = 0.005;    @Before    public void setUp() {        IUT = new MockStatisticalRule();        if (testName.endsWith("0")) {            for (int i = 0; i < POINTS; i++) {                points[i] = new DataPoint();                points[i].setScore(1.0 * i);                DummyJavaNode s = new DummyJavaNode(1);                s.setScope(new SourceFileScope("foo"));                s.testingOnly__setBeginLine(i);                s.testingOnly__setBeginColumn(1);                points[i].setNode(s);                points[i].setMessage("DataPoint[" + Integer.toString(i) + "]");                IUT.addDataPoint(points[i]);            }        } else if (testName.endsWith("1")) {            for (int i = POINTS - 1; i >= 0; i--) {                points[i] = new DataPoint();                points[i].setScore(1.0 * i);                DummyJavaNode s = new DummyJavaNode(1);                s.setScope(new SourceFileScope("foo"));                s.testingOnly__setBeginLine(i);                s.testingOnly__setBeginColumn(1);                points[i].setNode(s);                points[i].setMessage("DataPoint[" + Integer.toString(i) + "]");                IUT.addDataPoint(points[i]);            }        } else {            List<DataPoint> lPoints = new ArrayList<DataPoint>();            for (int i = 0; i < POINTS; i++) {                points[i] = new DataPoint();                points[i].setScore(1.0 * i);                DummyJavaNode s = new DummyJavaNode(1);                s.setScope(new SourceFileScope("foo"));                s.testingOnly__setBeginLine(i);                s.testingOnly__setBeginColumn(1);                s.testingOnly__setBeginColumn(1);                points[i].setNode(s);                points[i].setMessage("DataPoint[" + Integer.toString(i) + "]");                lPoints.add(points[i]);            }            Collections.shuffle(lPoints);            for (int i = 0; i < POINTS; i++) {                IUT.addDataPoint(lPoints.get(i));            }        }    }    /**     * This test verifies that the Stat rule creates a Metric,     * with the proper values.     */    @Test    public void testMetrics() throws Throwable {        Report report = makeReport(IUT);        Iterator metrics = report.metrics();        assertTrue(metrics.hasNext());        Object o = metrics.next();        assertTrue(o instanceof Metric);        Metric m = (Metric) o;        assertEquals("net.sourceforge.pmd.stat.MockStatisticalRule", m.getMetricName());        assertEquals(0.0, m.getLowValue(), 0.05);        assertEquals(POINTS - 1.0, m.getHighValue(), 0.05);        assertEquals(MEAN, m.getAverage(), 0.05);        assertEquals(SIGMA, m.getStandardDeviation(), 0.05);    }    /**     * This returns a Random value for Sigma which will     * return some values.     */    public double randomSigma() {        return random.nextDouble() * 1.0;    }    /**     * This returns a Random value for Sigma which value     * is greater than the parameter.     */    public double randomSigma(int minimum) {        double minSigma = ((POINTS - 1 - minimum) - MEAN) / SIGMA;        if ((minSigma <= 0) || (minSigma > 2))            return randomSigma();        return minSigma + (random.nextDouble() * (2 - minSigma));    }    /**     * This returns the expected number of results when     * the Sigma rating is the smallest.     */    public int expectedSigma(double sigma) {        long expectedMin = Math.round(MEAN + (sigma * SIGMA));        if (((POINTS - 1) - expectedMin) < 0)            return 0;        return (POINTS - 1) - (int) expectedMin;    }    /**     * This generates a random minimum value for testing.     */    public double randomMinimum() {        return random.nextDouble() * (POINTS - 1);    }    /**     * This generates a random minimum value for which fewer     * results would be returned.     */    public double randomMinimum(int minimum) {        double diffTarget = 1.0 * (POINTS - 1 - minimum);        return (random.nextDouble() * minimum) + diffTarget;    }    /**     * This returns the expected number of reports.     * <p/>     * If the Minimum comes in at 521.569 then we expect     * 522, 523, ... 999 will pass.     */    public int expectedMinimum(double minimum) {        Double d = Double.valueOf(minimum);        return POINTS - 1 - d.intValue();    }    @Test    public void testExpectedMinimum() {        for (int i = 0; i < POINTS - 1; i++) {            assertEquals("Integer Min", POINTS - 1 - i, expectedMinimum(i * 1.0));            assertEquals("Double Min", POINTS - 1 - i, expectedMinimum((i * 1.0) + 0.5));        }    }    /**     * This returns a random value for Top Score.     */    public int randomTopScore() {        return random.nextInt(POINTS - 1);    }    /**     * This will return a random value for the Top Score     * which will return more than the minimum provided.     */    public int randomTopScore(double target) {        if (target < 0)            return 0;        return random.nextInt(Double.valueOf(target).intValue());    }    /**     * This will return the expected number of results     * with the given Top Score.     */    public int expectedTopScore(int target) {        return target;    }    // Test Single Datapoint    @Test    public void testSingleDatapoint() {        StatisticalRule IUT = new MockStatisticalRule();        DataPoint point = new DataPoint();        point.setScore(POINTS + 1.0);        DummyJavaNode s = new DummyJavaNode(1);        s.setScope(new SourceFileScope("foo"));        s.testingOnly__setBeginLine(POINTS + 1);        s.testingOnly__setBeginColumn(1);        point.setNode(s);        point.setMessage("SingleDataPoint");        IUT.setProperty(MINIMUM_DESCRIPTOR, (double)POINTS);        IUT.addDataPoint(point);        Report report = makeReport(IUT);        assertEquals("Expecting only one result", 1, report.size());    }    // Okay, we have three properties we need to    // test in Combination:    //  S = Sigma    //  T = Top Score    //  M = Minimum    //    // They are listed in decreasing order of what    // to expect.    //    // Thus testSM() should have the Sigma less than    // the minimum, so we expect the Minimum # of results.    //    @Test    public void testS() throws Throwable {        verifyResults(MAX_SIGMA, NO_MINIMUM, NO_TOPSCORE, 0, 2);        for (int i = 0; i < NUM_TESTS; i++) {            double sigma = randomSigma();            verifyResults(sigma, -1.0, -1, expectedSigma(sigma), 2);        }    }    @Test    public void testS1() throws Throwable {        testS();    }    @Test    public void testS2() throws Throwable {        testS();    }    @Test    public void testS3() throws Throwable {        testS();    }    @Test    public void testS4() throws Throwable {        testS();    }    @Test    public void testS5() throws Throwable {        testS();    }    @Test    public void testT() throws Throwable {        verifyResults(NO_SIGMA, NO_MINIMUM, MIN_TOPSCORE, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            int topScore = randomTopScore();            verifyResults(-1.0, -1.0, topScore, expectedTopScore(topScore), 0);        }    }    @Test    public void testT1() throws Throwable {        testT();    }    @Test    public void testT2() throws Throwable {        testT();    }    @Test    public void testT3() throws Throwable {        testT();    }    @Test    public void testT4() throws Throwable {        testT();    }    @Test    public void testT5() throws Throwable {        testT();    }    @Test    public void testM() throws Throwable {        verifyResults(NO_SIGMA, MAX_MINIMUM, NO_TOPSCORE, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            double minimum = randomMinimum();            verifyResults(-1.0, minimum, -1, expectedMinimum(minimum), 0);        }    }    @Test    public void testM1() throws Throwable {        testM();    }    @Test    public void testM2() throws Throwable {        testM();    }    @Test    public void testM3() throws Throwable {        testM();    }    @Test    public void testM4() throws Throwable {        testM();    }    @Test    public void testM5() throws Throwable {        testM();    }    @Test    public void testST() throws Throwable {        verifyResults(randomSigma(), NO_MINIMUM, MIN_TOPSCORE, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            double sigma = randomSigma();            int topScore = randomTopScore(expectedSigma(sigma));            verifyResults(sigma, NO_MINIMUM, topScore, expectedTopScore(topScore), 0);        }    }    @Test    public void testST1() throws Throwable {        testST();    }    @Test    public void testST2() throws Throwable {        testST();    }    @Test    public void testST3() throws Throwable {        testST();    }    @Test    public void testST4() throws Throwable {        testST();    }    @Test    public void testST5() throws Throwable {        testST();    }    @Test    public void testTS() throws Throwable {        verifyResults(MAX_SIGMA, NO_MINIMUM, randomTopScore(), 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            int topScore = randomTopScore();            double sigma = randomSigma(expectedTopScore(topScore));            verifyResults(sigma, -1.0, topScore, expectedSigma(sigma), 2);        }    }    @Test    public void testTS1() throws Throwable {        testTS();    }    @Test    public void testTS2() throws Throwable {        testTS();    }    @Test    public void testTS3() throws Throwable {        testTS();    }    @Test    public void testTS4() throws Throwable {        testTS();    }    @Test    public void testTS5() throws Throwable {        testTS();    }    @Test    public void testSM() throws Throwable {        verifyResults(randomSigma(), MAX_MINIMUM, NO_TOPSCORE, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            double sigma = randomSigma();            double minimum = randomMinimum(expectedSigma(sigma));            verifyResults(sigma, minimum, -1, expectedMinimum(minimum), 0);        }    }    @Test    public void testSM1() throws Throwable {        testSM();    }    @Test    public void testSM2() throws Throwable {        testSM();    }    @Test    public void testSM3() throws Throwable {        testSM();    }    @Test    public void testSM4() throws Throwable {        testSM();    }    @Test    public void testSM5() throws Throwable {        testSM();    }    @Test    public void testMS() throws Throwable {        verifyResults(MAX_SIGMA, randomMinimum(), NO_TOPSCORE, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            double minimum = randomMinimum();            double sigma = randomSigma(expectedMinimum(minimum));            verifyResults(sigma, minimum, -1, expectedSigma(sigma), 2);        }    }    @Test    public void testMS1() throws Throwable {        testMS();    }    @Test    public void testMS2() throws Throwable {        testMS();    }    @Test    public void testMS3() throws Throwable {        testMS();    }    @Test    public void testMS4() throws Throwable {        testMS();    }    @Test    public void testMS5() throws Throwable {        testMS();    }    @Test    public void testTM() throws Throwable {        verifyResults(NO_SIGMA, MAX_MINIMUM, randomTopScore(), 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            int topScore = randomTopScore();            double minimum = randomMinimum(expectedTopScore(topScore));            verifyResults(NO_SIGMA, minimum, topScore, expectedMinimum(minimum), 0);        }    }    @Test    public void testTM1() throws Throwable {        testTM();    }    @Test    public void testTM2() throws Throwable {        testTM();    }    @Test    public void testTM3() throws Throwable {        testTM();    }    @Test    public void testTM4() throws Throwable {        testTM();    }    @Test    public void testTM5() throws Throwable {        testTM();    }    @Test    public void testMT() throws Throwable {        verifyResults(NO_SIGMA, randomMinimum(), MIN_TOPSCORE, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            double minimum = randomMinimum();            int topScore = randomTopScore(expectedMinimum(minimum));            verifyResults(NO_SIGMA, minimum, topScore, expectedTopScore(topScore), 0);        }    }    @Test    public void testMT1() throws Throwable {        testMT();    }    @Test    public void testMT2() throws Throwable {        testMT();    }    @Test    public void testMT3() throws Throwable {        testMT();    }    @Test    public void testMT4() throws Throwable {        testMT();    }    @Test    public void testMT5() throws Throwable {        testMT();    }    @Test    public void testSTM() throws Throwable {        double sigma = randomSigma();        verifyResults(sigma, MAX_MINIMUM, randomTopScore(expectedSigma(sigma)), 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            sigma = randomSigma();            int topScore = randomTopScore(expectedSigma(sigma));            double minimum = randomMinimum(expectedTopScore(topScore));            verifyResults(sigma, minimum, topScore, expectedMinimum(minimum), 0);        }    }    @Test    public void testSTM1() throws Throwable {        testSTM();    }    @Test    public void testSTM2() throws Throwable {        testSTM();    }    @Test    public void testSTM3() throws Throwable {        testSTM();    }    @Test    public void testSTM4() throws Throwable {        testSTM();    }    @Test    public void testSTM5() throws Throwable {        testSTM();    }    @Test    public void testSMT() throws Throwable {        double sigma = randomSigma();        verifyResults(sigma, randomMinimum(expectedSigma(sigma)), MIN_TOPSCORE, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            sigma = randomSigma();            double minimum = randomMinimum(expectedSigma(sigma));            int topScore = randomTopScore(expectedMinimum(minimum));            verifyResults(sigma, minimum, topScore, expectedTopScore(topScore), 0);        }    }    @Test    public void testSMT1() throws Throwable {        testSMT();    }    @Test    public void testSMT2() throws Throwable {        testSMT();    }    @Test    public void testSMT3() throws Throwable {        testSMT();    }    @Test    public void testSMT4() throws Throwable {        testSMT();    }    @Test    public void testSMT5() throws Throwable {        testSMT();    }    @Test    // because of random failures during continuous integration,    // tests are disabled in regress mode until somebody figures out    // what the tests are supposed to measure and why they sometime fail    @Ignore("random failures during continuous integration")    public void testTSM() throws Throwable {        int topScore = randomTopScore();        verifyResults(randomSigma(expectedTopScore(topScore)), MAX_MINIMUM, topScore, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            topScore = randomTopScore();            double sigma = randomSigma(expectedTopScore(topScore));            double minimum = randomMinimum(expectedSigma(sigma));            verifyResults(sigma, minimum, topScore, expectedMinimum(minimum), 0);        }    }    @Test    @Ignore("random failures during continuous integration")    public void testTSM1() throws Throwable {        testTSM();    }    @Test    @Ignore("random failures during continuous integration")    public void testTSM2() throws Throwable {        testTSM();    }    @Test    @Ignore("random failures during continuous integration")    public void testTSM3() throws Throwable {        testTSM();    }    @Test    @Ignore("random failures during continuous integration")    public void testTSM4() throws Throwable {        testTSM();    }    @Test    @Ignore("random failures during continuous integration")    public void testTSM5() throws Throwable {        testTSM();    }    @Test    public void testTMS() throws Throwable {        int topScore = randomTopScore();        verifyResults(MAX_SIGMA, randomMinimum(expectedTopScore(topScore)), topScore, 0, 0);        for (int i = 0; i < NUM_TESTS; i++) {            topScore = randomTopScore();            double minimum = randomMinimum(expectedTopScore(topScore));            double sigma = randomSigma(expectedMinimum(minimum));            verifyResults(sigma, minimum, topScore, expectedSigma(sigma), 2);        }    }    @Test    public void testTMS1() throws Throwable {        testTMS();    }    @Test    public void testTMS2() throws Throwable {        testTMS();    }    @Test    public void testTMS3() throws Throwable {        testTMS();    }    @Test    public void testTMS4() throws Throwable {        testTMS();    }    @Test    public void testTMS5() throws Throwable {        testTMS();    }    /**     * Verifies what happens when you pass these parameters     * into the thing.  DELTA is the amount of error allowed.     * Usually DELTA is only used for Sigma, as we really can't     * calculate it exactly.     */    public void verifyResults(double sigma, double minimum, int topScore, int expected, int delta) {        try {            setUp();            if (sigma >= 0) {            IUT.setProperty(SIGMA_DESCRIPTOR, sigma);            }            if (minimum >= 0) {            IUT.setProperty(MINIMUM_DESCRIPTOR, minimum);            }            if (topScore >= 0) {                IUT.setProperty(TOP_SCORE_DESCRIPTOR, topScore);            }            Report report = makeReport(IUT);            if (delta == 0) {                assertEquals("Unexpected number of results: sigma= " + Double.toString(sigma) + " min= " + Double.toString(minimum) + " topscore= " + Integer.toString(topScore), expected, report.size());            } else {                String assertStr = "Unexpected number of results: sigma= " + Double.toString(sigma) + " min= " + Double.toString(minimum) + " topscore= " + Integer.toString(topScore) + " expected= " + Integer.toString(expected) + " +/- " + Integer.toString(delta) + " actual-result= " + report.size();                assertTrue(assertStr, report.size() >= (expected - delta));                assertTrue(assertStr, report.size() <= (expected + delta));            }        } catch (AssertionFailedError afe) {            System.err.println("******** " + testName + " ***********");            if (sigma != NO_SIGMA) {                System.err.println("SIGMA: " + Double.toString(sigma) + " EXPECT: " + Integer.toString(expectedSigma(sigma)));            }            if (minimum != NO_MINIMUM) {                System.err.println("MIN: " + Double.toString(minimum) + " EXPECT: " + Integer.toString(expectedMinimum(minimum)));            }            if (topScore != NO_TOPSCORE) {                System.err.println("TOP: " + Integer.toString(topScore) + " EXPECT: " + Integer.toString(expectedTopScore(topScore)));            }            throw afe;        }    }    public Report makeReport(Rule IUT) {        List list = new ArrayList();        Report report = new Report();        RuleContext ctx = new RuleContext();        ctx.setReport(report);        ctx.setSourceCodeFilename(testName);        ctx.setLanguageVersion(Language.JAVA.getDefaultVersion());        IUT.apply(list, ctx);        return report;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(StatisticalRuleTest.class);    }}
/** * <copyright> *  Copyright 1997-2002 BBNT Solutions, LLC *  under sponsorship of the Defense Advanced Research Projects Agency (DARPA). * *  This program is free software; you can redistribute it and/or modify *  it under the terms of the Cougaar Open Source License as published by *  DARPA on the Cougaar Open Source Website (www.cougaar.org). * *  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS *  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS, *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR *  PERFORMANCE OF THE COUGAAR SOFTWARE. * </copyright> * * Created on Aug 26, 2002 */package net.sourceforge.pmd.stat;import static org.junit.Assert.assertEquals;import org.junit.Test;import net.sourceforge.pmd.stat.Metric;import java.util.Random;/** * @author David Dixon-Peugh */public class MetricTest  {    private String testName = "";    private Random random = new Random();    @Test    public void testGetMetricName() {        Metric IUT = new Metric(testName, 0, 0.0, 0.0, 0.0, 0.0, 0.0);        assertEquals(testName, IUT.getMetricName());    }    @Test    public void testGetCount() {        int count = random.nextInt();        Metric IUT = new Metric(testName, count, 0.0, 0.0, 0.0, 0.0, 0.0);        assertEquals(count, IUT.getCount());    }    @Test    public void testGetTotal() {        double total = random.nextDouble();        Metric IUT = new Metric(testName, 0, total, 0.0, 0.0, 0.0, 0.0);        assertEquals(total, IUT.getTotal(), 0.05);    }    @Test    public void testGetLowValue() {        double low = random.nextDouble();        Metric IUT = new Metric(testName, 0, 0.0, low, 0.0, 0.0, 0.0);        assertEquals(low, IUT.getLowValue(), 0.05);    }    @Test    public void testGetHighValue() {        double high = random.nextDouble();        Metric IUT = new Metric(testName, 0, 0.0, 0.0, high, 0.0, 0.0);        assertEquals(high, IUT.getHighValue(), 0.05);    }    @Test    public void testGetAverage() {        double mean = random.nextDouble();        Metric IUT = new Metric(testName, 0, 0.0, 0.0, 0.0, mean, 0.0);        assertEquals(mean, IUT.getAverage(), 0.05);    }    @Test    public void testGetStandardDeviation() {        double stdev = random.nextDouble();        Metric IUT = new Metric(testName, 0, 0.0, 0.0, 0.0, 0.0, stdev);        assertEquals(stdev, IUT.getStandardDeviation(), 0.05);    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(MetricTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.coverage;import static org.junit.Assert.fail;import java.io.BufferedReader;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import net.sourceforge.pmd.PMD;import org.junit.Test;public class PMDCoverageTest {    /**     * Test some of the PMD command line options     */    @Test    public void testPmdOptions() {runPmd("src/net/sourceforge/pmd/lang/java/rule/design text rulesets/internal/all-java.xml -version java 1.5 -stress -benchmark");    }    /**     * Run the PMD command line tool, i.e. call PMD.main().     *      * @param commandLine     */    private void runPmd(String commandLine) {    String args[];    args = commandLine.split("\\s");    File f = null;    try {    f = File.createTempFile("pmd", ".txt");    int n = args.length;    String a[] = new String[n + 2];    System.arraycopy(args, 0, a, 0, n);    a[n] = "-reportfile";    a[n + 1] = f.getAbsolutePath();    args = a;    PMD.run(args);    // FIXME: check that output doesn't have parsing errors    } catch (IOException ioe) {    fail("Problem creating temporary file: " + ioe.getLocalizedMessage());    } finally {    f.delete();    }    }    /**     * Name of the configuration file used by testResourceFileCommands().     */    private static final String PMD_CONFIG_FILE = "pmd_tests.conf";    /**     * Run PMD using the command lines found in PMD_CONFIG_FILE.     */    @Test    public void testResourceFileCommands() {InputStream is = getClass().getResourceAsStream(PMD_CONFIG_FILE);if (is != null) {    try {BufferedReader r = new BufferedReader(new InputStreamReader(is));String l;while ((l = r.readLine()) != null) {    l = l.trim();    if (l.length() == 0 || l.charAt(0) == '#') {continue;    }    runPmd(l);}r.close();    } catch (IOException ioe) {fail("Problem reading config file: " + ioe.getLocalizedMessage());    }} else {    fail("Missing config file: " + PMD_CONFIG_FILE);}    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(PMDCoverageTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.xml.rule.basic;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class BasicRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "xml-basic";    @Before    public void setUp() {        addRule(RULESET, "MistypedCDATASection");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(BasicRulesTest.class);    }}
package net.sourceforge.pmd.lang.xml.rule;import static org.junit.Assert.assertEquals;import java.io.StringReader;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.Parser;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.xml.XmlParserOptions;import net.sourceforge.pmd.lang.xml.ast.XmlNode;import net.sourceforge.pmd.lang.xml.rule.AbstractDomXmlRule;import org.junit.Test;import org.w3c.dom.Attr;import org.w3c.dom.CharacterData;import org.w3c.dom.Comment;import org.w3c.dom.Document;import org.w3c.dom.DocumentType;import org.w3c.dom.Element;import org.w3c.dom.Entity;import org.w3c.dom.EntityReference;import org.w3c.dom.Notation;import org.w3c.dom.ProcessingInstruction;import org.w3c.dom.Text;public class AbstractDomXmlRuleTest {    @Test    public void testVisit() throws Exception {String source = "<?xml version=\"1.0\"?><?mypi?><!DOCTYPE testDoc [<!ENTITY entity \"e\">]><!--Comment--><foo abc=\"abc\"><bar>TEXT</bar><![CDATA[cdata!]]>&gt;&entity;&lt;</foo>";XmlParserOptions parserOptions = new XmlParserOptions();parserOptions.setExpandEntityReferences(false);Parser parser = Language.XML.getDefaultVersion().getLanguageVersionHandler().getParser(parserOptions);XmlNode xmlNode = (XmlNode) parser.parse(null, new StringReader(source));List<XmlNode> nodes = new ArrayList<XmlNode>();nodes.add(xmlNode);MyRule rule = new MyRule();rule.apply(nodes, null);List<org.w3c.dom.Node> visited = rule.visitedNodes.get("Attr");assertEquals(1, visited.size());assertEquals("abc", visited.get(0).getLocalName());visited = rule.visitedNodes.get("CharacterData");assertEquals(1, visited.size());assertEquals("cdata!", ((CharacterData) visited.get(0)).getData());visited = rule.visitedNodes.get("Comment");assertEquals("Comment", ((Comment) visited.get(0)).getData());visited = rule.visitedNodes.get("Document");assertEquals(1, visited.size());visited = rule.visitedNodes.get("DocumentType");assertEquals("testDoc", ((DocumentType) visited.get(0)).getName());visited = rule.visitedNodes.get("Element");assertEquals(2, visited.size());assertEquals("foo", visited.get(0).getLocalName());assertEquals("bar", visited.get(1).getLocalName());// TODO Figure out how to trigger this.// visited = rule.visitedNodes.get("Entity");// assertEquals(0, visited.size());visited = rule.visitedNodes.get("EntityReference");assertEquals(1, visited.size());assertEquals("entity", ((EntityReference) visited.get(0)).getNodeName());// TODO Figure out how to trigger this.// visited = rule.visitedNodes.get("Notation");// assertEquals(0, visited.size());visited = rule.visitedNodes.get("ProcessingInstruction");assertEquals(1, visited.size());assertEquals("mypi", ((ProcessingInstruction) visited.get(0)).getTarget());visited = rule.visitedNodes.get("Text");assertEquals(4, visited.size());assertEquals("TEXT", ((Text) visited.get(0)).getData());assertEquals(">", ((Text) visited.get(1)).getData());assertEquals("e", ((Text) visited.get(2)).getData());assertEquals("<", ((Text) visited.get(3)).getData());    }    private static class MyRule extends AbstractDomXmlRule {final Map<String, List<org.w3c.dom.Node>> visitedNodes = new HashMap<String, List<org.w3c.dom.Node>>();public MyRule() {}private void visit(String key, org.w3c.dom.Node node) {    List<org.w3c.dom.Node> nodes = visitedNodes.get(key);    if (nodes == null) {nodes = new ArrayList<org.w3c.dom.Node>();visitedNodes.put(key, nodes);    }    nodes.add(node);}@Overridepublic void apply(List<? extends Node> nodes, RuleContext ctx) {    super.apply(nodes, ctx);}@Overrideprotected void visit(XmlNode node, Attr attr, RuleContext ctx) {    visit("Attr", attr);    super.visit(node, attr, ctx);}@Overrideprotected void visit(XmlNode node, CharacterData characterData, RuleContext ctx) {    visit("CharacterData", characterData);    super.visit(node, characterData, ctx);}@Overrideprotected void visit(XmlNode node, Comment comment, RuleContext ctx) {    visit("Comment", comment);    super.visit(node, comment, ctx);}@Overrideprotected void visit(XmlNode node, Document document, RuleContext ctx) {    visit("Document", document);    super.visit(node, document, ctx);}@Overrideprotected void visit(XmlNode node, DocumentType documentType, RuleContext ctx) {    visit("DocumentType", documentType);    super.visit(node, documentType, ctx);}@Overrideprotected void visit(XmlNode node, Element element, RuleContext ctx) {    visit("Element", element);    super.visit(node, element, ctx);}@Overrideprotected void visit(XmlNode node, Entity entity, RuleContext ctx) {    visit("Entity", entity);    super.visit(node, entity, ctx);}@Overrideprotected void visit(XmlNode node, EntityReference entityReference, RuleContext ctx) {    visit("EntityReference", entityReference);    super.visit(node, entityReference, ctx);}@Overrideprotected void visit(XmlNode node, Notation notation, RuleContext ctx) {    visit("Notation", notation);    super.visit(node, notation, ctx);}@Overrideprotected void visit(XmlNode node, ProcessingInstruction processingInstruction, RuleContext ctx) {    visit("ProcessingInstruction", processingInstruction);    super.visit(node, processingInstruction, ctx);}@Overrideprotected void visit(XmlNode node, Text text, RuleContext ctx) {    visit("Text", text);    super.visit(node, text, ctx);}    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(AbstractDomXmlRuleTest.class);    }}
package net.sourceforge.pmd.lang.xml.rule;import static org.junit.Assert.assertEquals;import java.io.StringReader;import java.util.ArrayList;import java.util.List;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.Parser;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.xml.XmlParserOptions;import net.sourceforge.pmd.lang.xml.ast.XmlNode;import net.sourceforge.pmd.lang.xml.rule.AbstractXmlRule;import org.junit.Test;public class AbstractXmlRuleTest {    @Test    public void testVisit() throws Exception {String source = "<?xml version=\"1.0\"?><foo abc=\"abc\"><bar/></foo>";XmlParserOptions parserOptions = new XmlParserOptions();Parser parser = Language.XML.getDefaultVersion().getLanguageVersionHandler().getParser(parserOptions);XmlNode xmlNode = (XmlNode) parser.parse(null, new StringReader(source));List<XmlNode> nodes = new ArrayList<XmlNode>();nodes.add(xmlNode);MyRule rule = new MyRule();rule.apply(nodes, null);assertEquals(3, rule.visitedNodes.size());assertEquals("document", rule.visitedNodes.get(0).toString());assertEquals("foo", rule.visitedNodes.get(1).toString());assertEquals("bar", rule.visitedNodes.get(2).toString());    }    private static class MyRule extends AbstractXmlRule {final List<XmlNode> visitedNodes = new ArrayList<XmlNode>();public MyRule() {}@Overridepublic void apply(List<? extends Node> nodes, RuleContext ctx) {    visitedNodes.clear();    super.apply(nodes, ctx);}@Overrideprotected void visit(XmlNode node, RuleContext ctx) {    visitedNodes.add(node);    super.visit(node, ctx);}    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(AbstractXmlRuleTest.class);    }}
package net.sourceforge.pmd.lang.xml;import static net.sourceforge.pmd.lang.ParserOptionsTest.verifyOptionsEqualsHashcode;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.lang.ParserOptions;import net.sourceforge.pmd.lang.rule.properties.BooleanProperty;import net.sourceforge.pmd.lang.xml.XmlParserOptions;import net.sourceforge.pmd.lang.xml.rule.AbstractXmlRule;import org.junit.Test;public class XmlParserOptionsTest {    @Test    public void testDefaults() throws Exception {XmlParserOptions options = new XmlParserOptions();assertFalse(options.isCoalescing());assertTrue(options.isExpandEntityReferences());assertFalse(options.isIgnoringComments());assertFalse(options.isIgnoringElementContentWhitespace());assertTrue(options.isNamespaceAware());assertFalse(options.isValidating());assertFalse(options.isXincludeAware());MyRule rule = new MyRule();options = (XmlParserOptions) rule.getParserOptions();assertFalse(options.isCoalescing());assertTrue(options.isExpandEntityReferences());assertFalse(options.isIgnoringComments());assertFalse(options.isIgnoringElementContentWhitespace());assertTrue(options.isNamespaceAware());assertFalse(options.isValidating());assertFalse(options.isXincludeAware());    }    @Test    public void testConstructor() throws Exception {MyRule rule = new MyRule();rule.setProperty(XmlParserOptions.COALESCING_DESCRIPTOR, true);assertTrue(((XmlParserOptions) rule.getParserOptions()).isCoalescing());rule.setProperty(XmlParserOptions.COALESCING_DESCRIPTOR, false);assertFalse(((XmlParserOptions) rule.getParserOptions()).isCoalescing());rule.setProperty(XmlParserOptions.EXPAND_ENTITY_REFERENCES_DESCRIPTOR, true);assertTrue(((XmlParserOptions) rule.getParserOptions()).isExpandEntityReferences());rule.setProperty(XmlParserOptions.EXPAND_ENTITY_REFERENCES_DESCRIPTOR, false);assertFalse(((XmlParserOptions) rule.getParserOptions()).isExpandEntityReferences());rule.setProperty(XmlParserOptions.IGNORING_COMMENTS_DESCRIPTOR, true);assertTrue(((XmlParserOptions) rule.getParserOptions()).isIgnoringComments());rule.setProperty(XmlParserOptions.IGNORING_COMMENTS_DESCRIPTOR, false);assertFalse(((XmlParserOptions) rule.getParserOptions()).isIgnoringComments());rule.setProperty(XmlParserOptions.IGNORING_ELEMENT_CONTENT_WHITESPACE_DESCRIPTOR, true);assertTrue(((XmlParserOptions) rule.getParserOptions()).isIgnoringElementContentWhitespace());rule.setProperty(XmlParserOptions.IGNORING_ELEMENT_CONTENT_WHITESPACE_DESCRIPTOR, false);assertFalse(((XmlParserOptions) rule.getParserOptions()).isIgnoringElementContentWhitespace());rule.setProperty(XmlParserOptions.NAMESPACE_AWARE_DESCRIPTOR, true);assertTrue(((XmlParserOptions) rule.getParserOptions()).isNamespaceAware());rule.setProperty(XmlParserOptions.NAMESPACE_AWARE_DESCRIPTOR, false);assertFalse(((XmlParserOptions) rule.getParserOptions()).isNamespaceAware());rule.setProperty(XmlParserOptions.VALIDATING_DESCRIPTOR, true);assertTrue(((XmlParserOptions) rule.getParserOptions()).isValidating());rule.setProperty(XmlParserOptions.VALIDATING_DESCRIPTOR, false);assertFalse(((XmlParserOptions) rule.getParserOptions()).isValidating());rule.setProperty(XmlParserOptions.XINCLUDE_AWARE_DESCRIPTOR, true);assertTrue(((XmlParserOptions) rule.getParserOptions()).isXincludeAware());rule.setProperty(XmlParserOptions.XINCLUDE_AWARE_DESCRIPTOR, false);assertFalse(((XmlParserOptions) rule.getParserOptions()).isXincludeAware());    }    @Test    public void testSetters() {XmlParserOptions options = new XmlParserOptions();options.setSuppressMarker("foo");assertEquals("foo", options.getSuppressMarker());options.setSuppressMarker(null);assertNull(options.getSuppressMarker());options.setCoalescing(true);assertTrue(options.isCoalescing());options.setCoalescing(false);assertFalse(options.isCoalescing());options.setExpandEntityReferences(true);assertTrue(options.isExpandEntityReferences());options.setExpandEntityReferences(false);assertFalse(options.isExpandEntityReferences());options.setIgnoringComments(true);assertTrue(options.isIgnoringComments());options.setIgnoringComments(false);assertFalse(options.isIgnoringComments());options.setIgnoringElementContentWhitespace(true);assertTrue(options.isIgnoringElementContentWhitespace());options.setIgnoringElementContentWhitespace(false);assertFalse(options.isIgnoringElementContentWhitespace());options.setNamespaceAware(true);assertTrue(options.isNamespaceAware());options.setNamespaceAware(false);assertFalse(options.isNamespaceAware());options.setValidating(true);assertTrue(options.isValidating());options.setValidating(false);assertFalse(options.isValidating());options.setXincludeAware(true);assertTrue(options.isXincludeAware());options.setXincludeAware(false);assertFalse(options.isXincludeAware());    }    @Test    public void testEqualsHashcode() throws Exception {BooleanProperty[] properties = new BooleanProperty[] { XmlParserOptions.COALESCING_DESCRIPTOR,XmlParserOptions.EXPAND_ENTITY_REFERENCES_DESCRIPTOR, XmlParserOptions.IGNORING_COMMENTS_DESCRIPTOR,XmlParserOptions.IGNORING_ELEMENT_CONTENT_WHITESPACE_DESCRIPTOR,XmlParserOptions.NAMESPACE_AWARE_DESCRIPTOR, XmlParserOptions.VALIDATING_DESCRIPTOR,XmlParserOptions.XINCLUDE_AWARE_DESCRIPTOR, };for (int i = 0; i < properties.length; i++) {    BooleanProperty property = properties[i];    MyRule rule = new MyRule();    rule.setProperty(property, true);    ParserOptions options1 = rule.getParserOptions();    rule.setProperty(property, false);    ParserOptions options2 = rule.getParserOptions();    rule.setProperty(property, true);    ParserOptions options3 = rule.getParserOptions();    rule.setProperty(property, false);    ParserOptions options4 = rule.getParserOptions();    verifyOptionsEqualsHashcode(options1, options2, options3, options4);}XmlParserOptions options1 = new XmlParserOptions();options1.setSuppressMarker("foo");XmlParserOptions options2 = new XmlParserOptions();options2.setSuppressMarker("bar");XmlParserOptions options3 = new XmlParserOptions();options3.setSuppressMarker("foo");XmlParserOptions options4 = new XmlParserOptions();options4.setSuppressMarker("bar");verifyOptionsEqualsHashcode(options1, options2, options3, options4);    }    private static final class MyRule extends AbstractXmlRule {    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(XmlParserOptionsTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.jsp.rule.basic;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class BasicRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "jsp-basic";    @Before    public void setUp() {addRule(RULESET, "DuplicateJspImports");addRule(RULESET, "IframeMissingSrcAttribute");addRule(RULESET, "JspEncoding");addRule(RULESET, "NoClassAttribute");addRule(RULESET, "NoHtmlComments");addRule(RULESET, "NoInlineScript");addRule(RULESET, "NoInlineStyleInformation");addRule(RULESET, "NoJspForward");addRule(RULESET, "NoLongScripts");addRule(RULESET, "NoScriptlets");    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(BasicRulesTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.jsp.rule.basicjsf;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class BasicJsfRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "jsp-basic-jsf";    @Before    public void setUp() {addRule(RULESET, "DontNestJsfInJstlIteration");    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(BasicJsfRulesTest.class);    }}
package net.sourceforge.pmd.lang.jsp.ast;import static org.junit.Assert.assertEquals;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;import java.util.Set;import net.sourceforge.pmd.lang.jsp.ast.ASTAttribute;import net.sourceforge.pmd.lang.jsp.ast.ASTAttributeValue;import net.sourceforge.pmd.lang.jsp.ast.ASTCData;import net.sourceforge.pmd.lang.jsp.ast.ASTCommentTag;import net.sourceforge.pmd.lang.jsp.ast.ASTDoctypeDeclaration;import net.sourceforge.pmd.lang.jsp.ast.ASTDoctypeExternalId;import net.sourceforge.pmd.lang.jsp.ast.ASTElement;import net.sourceforge.pmd.lang.jsp.ast.ASTHtmlScript;import org.junit.Test;/** * Test parsing of a JSP in document style, by checking the generated AST. * * @author pieter_van_raemdonck - Application Engineers NV/SA - www.ae.be * */public class JspDocStyleTest extends AbstractJspNodesTst {/** * Smoke test for JSP parser. * * @throws Throwable */    @Test    public void testSimplestJsp() throws Throwable {assertNumberOfNodes(ASTElement.class, TEST_SIMPLEST_HTML, 1);}/** * Test the information on a Element and Attribute. * * @throws Throwable */    @Testpublic void testElementAttributeAndNamespace() throws Throwable {Set nodes = getNodes(null, TEST_ELEMENT_AND_NAMESPACE);Set<ASTElement> elementNodes = getNodesOfType(ASTElement.class, nodes);assertEquals("One element node expected!", 1, elementNodes.size());ASTElement element = elementNodes.iterator().next();assertEquals("Correct name expected!", "h:html", element.getName());assertEquals("Has namespace prefix!", true, element.isHasNamespacePrefix());assertEquals("Element is empty!", true, element.isEmpty());assertEquals("Correct namespace prefix of element expected!", "h", element.getNamespacePrefix());assertEquals("Correct local name of element expected!", "html", element.getLocalName());Set attributeNodes = getNodesOfType(ASTAttribute.class, nodes);assertEquals("One attribute node expected!", 1, attributeNodes.size());ASTAttribute attribute = (ASTAttribute) attributeNodes.iterator().next();assertEquals("Correct name expected!", "MyNsPrefix:MyAttr", attribute.getName());assertEquals("Has namespace prefix!", true, attribute.isHasNamespacePrefix());assertEquals("Correct namespace prefix of element expected!", "MyNsPrefix",attribute.getNamespacePrefix());assertEquals("Correct local name of element expected!", "MyAttr", attribute.getLocalName());}/** * Test exposing a bug of parsing error when having a hash as last character * in an attribute value. * */    @Test    public void testAttributeValueContainingHash(){Set nodes = getNodes(null, TEST_ATTRIBUTE_VALUE_CONTAINING_HASH);Set<ASTAttribute> attributes = getNodesOfType(ASTAttribute.class, nodes);assertEquals("Three attributes expected!", 3, attributes.size());List<ASTAttribute> attrsList = new ArrayList<ASTAttribute>(attributes);Collections.sort(attrsList, new Comparator<ASTAttribute>() {public int compare(ASTAttribute arg0, ASTAttribute arg1) {return arg0.getName().compareTo(arg1.getName());}});ASTAttribute attr = attrsList.get(0);assertEquals("Correct attribute name expected!","foo", attr.getName());assertEquals("Correct attribute value expected!","CREATE", attr.getFirstDescendantOfType(ASTAttributeValue.class).getImage());attr = attrsList.get(1);assertEquals("Correct attribute name expected!","href", attr.getName());assertEquals("Correct attribute value expected!","#", attr.getFirstDescendantOfType(ASTAttributeValue.class).getImage());attr = attrsList.get(2);assertEquals("Correct attribute name expected!","something", attr.getName());assertEquals("Correct attribute value expected!","#yes#", attr.getFirstDescendantOfType(ASTAttributeValue.class).getImage());}/** * Test correct parsing of CDATA. */    @Test    public void testCData() {Set cdataNodes = getNodes(ASTCData.class, TEST_CDATA);assertEquals("One CDATA node expected!", 1, cdataNodes.size());ASTCData cdata = (ASTCData) cdataNodes.iterator().next();assertEquals("Content incorrectly parsed!", " some <cdata> ]] ]> ", cdata.getImage());}/** * Test parsing of Doctype declaration. */    @Test    public void testDoctype() {Set nodes = getNodes(null, TEST_DOCTYPE);Set<ASTDoctypeDeclaration> docTypeDeclarations = getNodesOfType(ASTDoctypeDeclaration.class, nodes);assertEquals("One doctype declaration expected!", 1, docTypeDeclarations.size());ASTDoctypeDeclaration docTypeDecl = docTypeDeclarations.iterator().next();assertEquals("Correct doctype-name expected!", "html", docTypeDecl.getName());Set externalIds = getNodesOfType(ASTDoctypeExternalId.class, nodes);assertEquals("One doctype external id expected!", 1, externalIds.size());ASTDoctypeExternalId externalId = (ASTDoctypeExternalId) externalIds.iterator().next();assertEquals("Correct external public id expected!", "-//W3C//DTD XHTML 1.1//EN",externalId.getPublicId());assertEquals("Correct external uri expected!", "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd",externalId.getUri());}/** * Test parsing of a XML comment. * */    @Test    public void testComment() {Set comments = getNodes(ASTCommentTag.class, TEST_COMMENT);assertEquals("One comment expected!", 1, comments.size());ASTCommentTag comment = (ASTCommentTag) comments.iterator().next();assertEquals("Correct comment content expected!", "comment", comment.getImage());}    /**     * Test parsing of HTML <script> element.     */    @Test    public void testHtmlScript() {Set scripts = getNodes(ASTHtmlScript.class, TEST_HTML_SCRIPT);assertEquals("One script expected!", 1, scripts.size());ASTHtmlScript script = (ASTHtmlScript) scripts.iterator().next();assertEquals("Correct script content expected!", "Script!", script.getImage());    }private static final String TEST_SIMPLEST_HTML = "<html/>";private static final String TEST_ELEMENT_AND_NAMESPACE = "<h:html MyNsPrefix:MyAttr='MyValue'/>";private static final String TEST_CDATA = "<html><![CDATA[ some <cdata> ]] ]> ]]></html>";private static final String TEST_DOCTYPE = "<?xml version=\"1.0\" standalone='yes'?>\n"+ "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" "+ "\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n"+ "<greeting>Hello, world!</greeting>";private static final String TEST_COMMENT = "<html><!-- comment --></html>";private static final String TEST_ATTRIBUTE_VALUE_CONTAINING_HASH ="<tag:if something=\"#yes#\" foo=\"CREATE\">  <a href=\"#\">foo</a> </tag:if>";private static final String TEST_HTML_SCRIPT ="<html><head><script>Script!</script></head></html>";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(JspDocStyleTest.class);    }}
package net.sourceforge.pmd.lang.jsp.ast;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.lang.jsp.ast.ASTElExpression;import net.sourceforge.pmd.lang.jsp.ast.ASTJspComment;import net.sourceforge.pmd.lang.jsp.ast.ASTJspDeclaration;import net.sourceforge.pmd.lang.jsp.ast.ASTJspDirective;import net.sourceforge.pmd.lang.jsp.ast.ASTJspDirectiveAttribute;import net.sourceforge.pmd.lang.jsp.ast.ASTJspExpression;import net.sourceforge.pmd.lang.jsp.ast.ASTJspExpressionInAttribute;import net.sourceforge.pmd.lang.jsp.ast.ASTJspScriptlet;import net.sourceforge.pmd.lang.jsp.ast.ASTValueBinding;import org.junit.Test;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;import java.util.Set;public class JspPageStyleTest extends AbstractJspNodesTst {    /**     * Test parsing of a JSP comment.     */    @Test    public void testComment() {        Set comments = getNodes(ASTJspComment.class, JSP_COMMENT);        assertEquals("One comment expected!", 1, comments.size());        ASTJspComment comment = (ASTJspComment) comments.iterator().next();        assertEquals("Correct comment content expected!", "some comment", comment.getImage());    }    /**     * Test parsing a JSP directive.     */    @Test    public void testDirective() {        Set nodes = getNodes(null, JSP_DIRECTIVE);        Set<ASTJspDirective> directives = getNodesOfType(ASTJspDirective.class, nodes);        assertEquals("One directive expected!", 1, directives.size());        ASTJspDirective directive = directives.iterator().next();        assertEquals("Correct directive name expected!",                "page", directive.getName());        Set<ASTJspDirectiveAttribute> directiveAttrs = getNodesOfType(ASTJspDirectiveAttribute.class, nodes);        assertEquals("Two directive attributes expected!", 2, directiveAttrs.size());        List<ASTJspDirectiveAttribute> attrsList = new ArrayList<ASTJspDirectiveAttribute>(directiveAttrs);        Collections.sort(attrsList, new Comparator<ASTJspDirectiveAttribute>() {            public int compare(ASTJspDirectiveAttribute arg0, ASTJspDirectiveAttribute arg1) {                return arg0.getName().compareTo(arg1.getName());            }        });        ASTJspDirectiveAttribute attr = attrsList.get(0);        assertEquals("Correct directive attribute name expected!",                "language", attr.getName());        assertEquals("Correct directive attribute value expected!",                "java", attr.getValue());        attr = attrsList.get(1);        assertEquals("Correct directive attribute name expected!",                "session", attr.getName());        assertEquals("Correct directive attribute value expected!",                "true", attr.getValue());    }    /**     * Test parsing of a JSP declaration.     */    @Test    public void testDeclaration() {        Set declarations = getNodes(ASTJspDeclaration.class, JSP_DECLARATION);        assertEquals("One declaration expected!", 1, declarations.size());        ASTJspDeclaration declaration = (ASTJspDeclaration) declarations.iterator().next();        assertEquals("Correct declaration content expected!",                "String someString = \"s\";", declaration.getImage());    }    /**     * Test parsing of a JSP scriptlet.     */    @Test    public void testScriptlet() {        Set scriptlets = getNodes(ASTJspScriptlet.class, JSP_SCRIPTLET);        assertEquals("One scriptlet expected!", 1, scriptlets.size());        ASTJspScriptlet scriptlet = (ASTJspScriptlet) scriptlets.iterator().next();        assertEquals("Correct scriptlet content expected!",                "someString = someString + \"suffix\";", scriptlet.getImage());    }    /**     * Test parsing of a JSP expression.     */    @Test    public void testExpression() {        Set expressions = getNodes(ASTJspExpression.class, JSP_EXPRESSION);        assertEquals("One expression expected!", 1, expressions.size());        ASTJspExpression expression = (ASTJspExpression) expressions.iterator().next();        assertEquals("Correct expression content expected!",                "someString", expression.getImage());    }    /**     * Test parsing of a JSP expression in an attribute.     */    @Test    public void testExpressionInAttribute() {        Set expressions = getNodes(ASTJspExpressionInAttribute.class,                JSP_EXPRESSION_IN_ATTRIBUTE);        assertEquals("One expression expected!", 1, expressions.size());        ASTJspExpressionInAttribute expression = (ASTJspExpressionInAttribute) expressions.iterator().next();        assertEquals("Correct expression content expected!",                "style.getClass()", expression.getImage());    }    /**     * Test parsing of a EL expression.     */    @Test    public void testElExpression() {        Set expressions = getNodes(ASTElExpression.class, JSP_EL_EXPRESSION);        assertEquals("One expression expected!", 1, expressions.size());        ASTElExpression expression = (ASTElExpression) expressions.iterator().next();        assertEquals("Correct expression content expected!",                "myBean.get(\"${ World }\")", expression.getImage());    }    /**     * Test parsing of a EL expression in an attribute.     */    @Test    public void testElExpressionInAttribute() {        Set expressions = getNodes(ASTElExpression.class, JSP_EL_EXPRESSION_IN_ATTRIBUTE);        assertEquals("One expression expected!", 1, expressions.size());        ASTElExpression expression = (ASTElExpression) expressions.iterator().next();        assertEquals("Correct expression content expected!",                "myValidator.find(\"'jsp'\")", expression.getImage());    }    /**     * Test parsing of a EL expression in an attribute.     */    @Test    public void testJsfValueBinding() {        Set valueBindings = getNodes(ASTValueBinding.class, JSF_VALUE_BINDING);        assertEquals("One value binding expected!", 1, valueBindings.size());        ASTValueBinding valueBinding = (ASTValueBinding) valueBindings.iterator().next();        assertEquals("Correct expression content expected!",                "myValidator.find(\"'jsf'\")", valueBinding.getImage());    }    private static final String JSP_COMMENT            = "<html> <%-- some comment --%> </html>";    private static final String JSP_DIRECTIVE            = "<html> <%@ page language=\"java\" session='true'%> </html>";    private static final String JSP_DECLARATION            = "<html><%! String someString = \"s\"; %></html>";    private static final String JSP_SCRIPTLET            = "<html> <% someString = someString + \"suffix\"; %> </html>";    private static final String JSP_EXPRESSION            = "<html><head><title> <%= someString %> </title></head></html>";    private static final String JSP_EXPRESSION_IN_ATTRIBUTE            = "<html> <body> <p class='<%= style.getClass() %>'> Hello </p> </body> </html>";    private static final String JSP_EL_EXPRESSION            = "<html><title>Hello ${myBean.get(\"${ World }\") } .jsp</title></html>";    private static final String JSP_EL_EXPRESSION_IN_ATTRIBUTE            = "<html> <f:validator type=\"get('type').${myValidator.find(\"'jsp'\")}\" /> </html>";    private static final String JSF_VALUE_BINDING            = "<html> <body> <p class='#{myValidator.find(\"'jsf'\")}'> Hello </p> </body> </html>";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(JspPageStyleTest.class);    }}
package net.sourceforge.pmd.lang.jsp.ast;import static org.junit.Assert.assertEquals;import java.io.StringReader;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSets;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.rule.XPathRule;import net.sourceforge.pmd.testframework.RuleTst;import org.junit.Test;public class XPathJspRuleTest extends RuleTst {    /**     * Test matching a XPath expression against a JSP source.     *     * @throws Throwable     */    @Test    public void testExpressionMatching() throws Throwable {        Rule rule = new XPathRule(XPATH_EXPRESSION);        rule.setMessage("Test");        rule.setLanguage(Language.JSP);        RuleSet rules = new RuleSet();        rules.addRule(rule);        RuleContext ctx = new RuleContext();        Report report = new Report();        ctx.setReport(report);        ctx.setSourceCodeFilename("n/a");        ctx.setLanguageVersion(LanguageVersion.JSP);        PMD p = new PMD();        p.getSourceCodeProcessor().processSourceCode(new StringReader(MATCH), new RuleSets(rules), ctx);        assertEquals("One violation expected!", 1, report.size());        RuleViolation rv = (RuleViolation) report.iterator().next();        assertEquals(1, rv.getBeginLine());    }    private static final String MATCH            = "<html><hr/></html>";    private static final String XPATH_EXPRESSION            = "//Element [@Name='hr']";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(XPathJspRuleTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.ecmascript.rule.basic;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class BasicRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "ecmascript-basic";    @Before    public void setUp() {addRule(RULESET, "AssignmentInOperand");addRule(RULESET, "ConsistentReturn");addRule(RULESET, "InnaccurateNumericLiteral");addRule(RULESET, "ScopeForInVariable");addRule(RULESET, "UnreachableCode");    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(BasicRulesTest.class);    }}
package net.sourceforge.pmd.lang.ecmascript.rule.braces;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class BracesRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "ecmascript-braces";    @Before    public void setUp() {addRule(RULESET, "ForLoopsMustUseBraces");addRule(RULESET, "IfElseStmtsMustUseBraces");addRule(RULESET, "IfStmtsMustUseBraces");addRule(RULESET, "WhileLoopsMustUseBraces");    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(BracesRulesTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.ecmascript.rule.unnecessary;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class UnnecessaryRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "ecmascript-unnecessary";    @Before    public void setUp() {addRule(RULESET, "UnnecessaryBlock");addRule(RULESET, "UnnecessaryParentheses");    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(UnnecessaryRulesTest.class);    }}
package net.sourceforge.pmd.lang.ecmascript;import static net.sourceforge.pmd.lang.ParserOptionsTest.verifyOptionsEqualsHashcode;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.lang.ParserOptions;import net.sourceforge.pmd.lang.ecmascript.EcmascriptParserOptions;import net.sourceforge.pmd.lang.ecmascript.rule.AbstractEcmascriptRule;import net.sourceforge.pmd.lang.rule.properties.BooleanProperty;import net.sourceforge.pmd.lang.xml.XmlParserOptions;import org.junit.Test;public class EcmascriptParserOptionsTest {    @Test    public void testDefaults() throws Exception {EcmascriptParserOptions parserOptions = new EcmascriptParserOptions();assertTrue(parserOptions.isRecordingComments());assertTrue(parserOptions.isRecordingLocalJsDocComments());assertEquals(EcmascriptParserOptions.Version.VERSION_DEFAULT, parserOptions.getRhinoLanguageVersion());MyRule rule = new MyRule();parserOptions = (EcmascriptParserOptions) rule.getParserOptions();assertTrue(parserOptions.isRecordingComments());assertTrue(parserOptions.isRecordingLocalJsDocComments());assertEquals(EcmascriptParserOptions.Version.VERSION_DEFAULT, parserOptions.getRhinoLanguageVersion());    }    @Test    public void testConstructor() throws Exception {MyRule rule = new MyRule();rule.setProperty(EcmascriptParserOptions.RECORDING_COMMENTS_DESCRIPTOR, true);assertTrue(((EcmascriptParserOptions) rule.getParserOptions()).isRecordingComments());rule.setProperty(EcmascriptParserOptions.RECORDING_COMMENTS_DESCRIPTOR, false);assertFalse(((EcmascriptParserOptions) rule.getParserOptions()).isRecordingComments());rule.setProperty(EcmascriptParserOptions.RECORDING_LOCAL_JSDOC_COMMENTS_DESCRIPTOR, true);assertTrue(((EcmascriptParserOptions) rule.getParserOptions()).isRecordingLocalJsDocComments());rule.setProperty(EcmascriptParserOptions.RECORDING_LOCAL_JSDOC_COMMENTS_DESCRIPTOR, false);assertFalse(((EcmascriptParserOptions) rule.getParserOptions()).isRecordingLocalJsDocComments());rule.setProperty(EcmascriptParserOptions.RHINO_LANGUAGE_VERSION, "default");assertEquals(EcmascriptParserOptions.Version.VERSION_DEFAULT, ((EcmascriptParserOptions) rule.getParserOptions()).getRhinoLanguageVersion());rule.setProperty(EcmascriptParserOptions.RHINO_LANGUAGE_VERSION, "1.8");assertEquals(EcmascriptParserOptions.Version.VERSION_1_8, ((EcmascriptParserOptions) rule.getParserOptions()).getRhinoLanguageVersion());    }    @Test    public void testSetters() {XmlParserOptions options = new XmlParserOptions();options.setSuppressMarker("foo");assertEquals("foo", options.getSuppressMarker());options.setSuppressMarker(null);assertNull(options.getSuppressMarker());options.setCoalescing(true);assertTrue(options.isCoalescing());options.setCoalescing(false);assertFalse(options.isCoalescing());options.setExpandEntityReferences(true);assertTrue(options.isExpandEntityReferences());options.setExpandEntityReferences(false);assertFalse(options.isExpandEntityReferences());options.setIgnoringComments(true);assertTrue(options.isIgnoringComments());options.setIgnoringComments(false);assertFalse(options.isIgnoringComments());    }    @Test    public void testEqualsHashcode() throws Exception {BooleanProperty[] properties = new BooleanProperty[] { EcmascriptParserOptions.RECORDING_COMMENTS_DESCRIPTOR,EcmascriptParserOptions.RECORDING_LOCAL_JSDOC_COMMENTS_DESCRIPTOR };for (int i = 0; i < properties.length; i++) {    BooleanProperty property = properties[i];    MyRule rule = new MyRule();    rule.setProperty(property, true);    ParserOptions options1 = rule.getParserOptions();    rule.setProperty(property, false);    ParserOptions options2 = rule.getParserOptions();    rule.setProperty(property, true);    ParserOptions options3 = rule.getParserOptions();    rule.setProperty(property, false);    ParserOptions options4 = rule.getParserOptions();    verifyOptionsEqualsHashcode(options1, options2, options3, options4);}EcmascriptParserOptions options1 = new EcmascriptParserOptions();options1.setSuppressMarker("foo");EcmascriptParserOptions options2 = new EcmascriptParserOptions();options2.setSuppressMarker("bar");EcmascriptParserOptions options3 = new EcmascriptParserOptions();options3.setSuppressMarker("foo");EcmascriptParserOptions options4 = new EcmascriptParserOptions();options4.setSuppressMarker("bar");verifyOptionsEqualsHashcode(options1, options2, options3, options4);options1 = new EcmascriptParserOptions();options1.setRhinoLanguageVersion(EcmascriptParserOptions.Version.VERSION_DEFAULT);options2 = new EcmascriptParserOptions();options2.setRhinoLanguageVersion(EcmascriptParserOptions.Version.VERSION_1_8);options3 = new EcmascriptParserOptions();options3.setRhinoLanguageVersion(EcmascriptParserOptions.Version.VERSION_DEFAULT);options4 = new EcmascriptParserOptions();options4.setRhinoLanguageVersion(EcmascriptParserOptions.Version.VERSION_1_8);verifyOptionsEqualsHashcode(options1, options2, options3, options4);    }    private static final class MyRule extends AbstractEcmascriptRule {    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(EcmascriptParserOptionsTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.optimizations;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class OptimizationsRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-optimizations";    @Before    public void setUp() {        addRule(RULESET, "AddEmptyString");        addRule(RULESET, "AvoidArrayLoops");        addRule(RULESET, "AvoidInstantiatingObjectsInLoops");        addRule(RULESET, "LocalVariableCouldBeFinal");        addRule(RULESET, "MethodArgumentCouldBeFinal");        addRule(RULESET, "RedundantFieldInitializer");        addRule(RULESET, "SimplifyStartsWith");        addRule(RULESET, "UnnecessaryWrapperObjectCreation");        addRule(RULESET, "UseArrayListInsteadOfVector");        addRule(RULESET, "UseArraysAsList");        addRule(RULESET, "UseStringBufferForStringAppends");        addRule(RULESET, "PrematureDeclaration");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(OptimizationsRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.controversial;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class ControversialRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-controversial";    @Before    public void setUp() {        addRule(RULESET, "AssignmentInOperand");        addRule(RULESET, "AvoidFinalLocalVariable");        addRule(RULESET, "AvoidLiteralsInIfCondition");        addRule(RULESET, "AvoidPrefixingMethodParameters");        addRule(RULESET, "AvoidUsingNativeCode");        addRule(RULESET, "AvoidUsingShortType");        addRule(RULESET, "AvoidUsingVolatile");        addRule(RULESET, "AtLeastOneConstructor");        addRule(RULESET, "AvoidFinalLocalVariable");        addRule(RULESET, "BooleanInversion");        addRule(RULESET, "CallSuperInConstructor");        addRule(RULESET, "DataflowAnomalyAnalysis");        addRule(RULESET, "DefaultPackage");        addRule(RULESET, "DontImportSun");        addRule(RULESET, "DoNotCallGarbageCollectionExplicitly");        addRule(RULESET, "NullAssignment");        addRule(RULESET, "OnlyOneReturn");        addRule(RULESET, "OneDeclarationPerLine");        addRule(RULESET, "SuspiciousOctalEscape");        addRule(RULESET, "UnnecessaryConstructor");        addRule(RULESET, "UnnecessaryParentheses");        addRule(RULESET,"UseConcurrentHashMap");addRule(RULESET, "UseObjectForClearerAPI");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ControversialRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.imports;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class ImportsRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-imports";    @Before    public void setUp() {        addRule(RULESET, "DontImportJavaLang");        addRule(RULESET, "DuplicateImports");        addRule(RULESET, "ImportFromSamePackage");        addRule(RULESET, "TooManyStaticImports");        addRule(RULESET, "UnnecessaryFullyQualifiedName");        addRule(RULESET, "UnusedImports");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ImportsRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.javabeans;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class JavabeansRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-javabeans";    @Before    public void setUp() {        addRule(RULESET, "BeanMembersShouldSerialize");        addRule(RULESET, "MissingSerialVersionUID");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(JavabeansRulesTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.basic;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class BasicRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-basic";    @Before    public void setUp() {        addRule(RULESET, "AvoidBranchingStatementAsLastInLoop");        addRule(RULESET, "AvoidDecimalLiteralsInBigDecimalConstructor");    addRule(RULESET, "AvoidMultipleUnaryOperators");        addRule(RULESET, "AvoidThreadGroup");        addRule(RULESET, "AvoidUsingHardCodedIP");//        addRule(RULESET, "AvoidUsingHardCodedURL");        addRule(RULESET, "AvoidUsingOctalValues");        addRule(RULESET, "BigIntegerInstantiation");        addRule(RULESET, "BooleanInstantiation");        addRule(RULESET, "BrokenNullCheck");        addRule(RULESET, "CheckResultSet");        addRule(RULESET, "CheckSkipResult");        addRule(RULESET, "ClassCastExceptionWithToArray");        addRule(RULESET, "CollapsibleIfStatements");        addRule(RULESET, "DoubleCheckedLocking");        addRule(RULESET, "ExtendsObject");        addRule(RULESET, "ForLoopShouldBeWhileLoop");        addRule(RULESET, "JumbledIncrementer");        addRule(RULESET, "MisplacedNullCheck");        addRule(RULESET, "OverrideBothEqualsAndHashcode");        addRule(RULESET, "ReturnFromFinallyBlock");        addRule(RULESET, "DontCallThreadRun");        addRule(RULESET, "DontUseFloatTypeForLoopIndices");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(BasicRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.junit;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class JunitRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-junit";    @Before    public void setUp() {        addRule(RULESET, "JUnitAssertionsShouldIncludeMessage");        addRule(RULESET, "JUnitSpelling");        addRule(RULESET, "JUnitStaticSuite");        addRule(RULESET, "JUnitTestContainsTooManyAsserts");        addRule(RULESET, "JUnitTestsShouldIncludeAssert");        addRule(RULESET, "SimplifyBooleanAssertion");        addRule(RULESET, "TestClassWithoutTestCases");        addRule(RULESET, "UnnecessaryBooleanAssertion");        addRule(RULESET, "UseAssertEqualsInsteadOfAssertTrue");        addRule(RULESET, "UseAssertNullInsteadOfAssertTrue");        addRule(RULESET, "UseAssertSameInsteadOfAssertTrue");        addRule(RULESET, "UseAssertTrueInsteadOfAssertEquals");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(JunitRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.j2ee;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class J2EERulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-j2ee";    @Before    public void setUp() {    addRule(RULESET, "DoNotCallSystemExit");    addRule(RULESET, "DoNotUseThreads");        addRule(RULESET, "LocalHomeNamingConvention");        addRule(RULESET, "LocalInterfaceSessionNamingConvention");        addRule(RULESET, "MDBAndSessionBeanNamingConvention");        addRule(RULESET, "RemoteInterfaceNamingConvention");        addRule(RULESET, "RemoteSessionInterfaceNamingConvention");        addRule(RULESET, "StaticEJBFieldShouldBeFinal");        addRule(RULESET, "UseProperClassLoader");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(J2EERulesTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.coupling;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class LawOfDemeterRuleTest extends SimpleAggregatorTst {    private static final String RULESET = "java-coupling";    @Before    public void setUp() {        addRule(RULESET, "LawOfDemeter");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(LawOfDemeterRuleTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.coupling;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class CouplingRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-coupling";    @Before    public void setUp() {        addRule(RULESET, "CouplingBetweenObjects");        addRule(RULESET, "ExcessiveImports");        addRule(RULESET, "LooseCoupling");        addRule(RULESET, "LoosePackageCoupling");        addRule(RULESET, "LawOfDemeter");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(CouplingRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.naming;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class NamingRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-naming";    @Before    public void setUp() {        addRule(RULESET, "AbstractNaming");        addRule(RULESET, "AvoidDollarSigns");        addRule(RULESET, "AvoidFieldNameMatchingMethodName");        addRule(RULESET, "AvoidFieldNameMatchingTypeName");        addRule(RULESET, "BooleanGetMethodName");        addRule(RULESET, "ClassNamingConventions");        addRule(RULESET, "LongVariable");        addRule(RULESET, "MethodNamingConventions");        addRule(RULESET, "MethodWithSameNameAsEnclosingClass");        addRule(RULESET, "MisleadingVariableName");        addRule(RULESET, "NoPackage");        addRule(RULESET, "PackageCase");        addRule(RULESET, "ShortMethodName");        addRule(RULESET, "ShortClassName");        addRule(RULESET, "ShortVariable");        addRule(RULESET, "SuspiciousConstantFieldName");        addRule(RULESET, "SuspiciousEqualsMethodName");        addRule(RULESET, "SuspiciousHashcodeMethodName");        addRule(RULESET, "VariableNamingConventions");addRule(RULESET, "GenericsNaming");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(NamingRulesTest.class);    }}
 /**  * BSD-style license; for more info see http://pmd.sourceforge.net/license.html  */ package net.sourceforge.pmd.lang.java.rule.design;  import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import net.sourceforge.pmd.testframework.TestDescriptor;import org.junit.Before;import org.junit.Test;  public class UncommentedEmptyConstructorRuleTest extends SimpleAggregatorTst {      private Rule rule;     private TestDescriptor[] tests;      @Before     public void setUp() {         rule = findRule("java-design", "UncommentedEmptyConstructor");         tests = extractTestsFromXml(rule);     }      @Test     public void testDefault() {         runTests(tests);     }      @Test     public void testIgnoredConstructorInvocation() { PropertyDescriptor<Boolean> descriptor = (PropertyDescriptor<Boolean>)rule.getPropertyDescriptor("ignoreExplicitConstructorInvocation");         rule.setProperty(descriptor, true);         TestDescriptor[] testDescriptors = new TestDescriptor[] {new TestDescriptor(tests[0].getCode(), "simple failure", 1, rule),new TestDescriptor(tests[1].getCode(), "only 'this(...)' failure", 1, rule),new TestDescriptor(tests[2].getCode(), "only 'super(...)' failure", 1, rule),new TestDescriptor(tests[3].getCode(), "single-line comment is OK", 0, rule),new TestDescriptor(tests[4].getCode(), "multiple-line comment is OK", 0, rule),new TestDescriptor(tests[5].getCode(), "Javadoc comment is OK", 0, rule),new TestDescriptor(tests[6].getCode(), "ok", 0, rule),new TestDescriptor(tests[7].getCode(), "with 'this(...)' ok", 0, rule),new TestDescriptor(tests[8].getCode(), "with 'super(...)' ok", 0, rule),new TestDescriptor(tests[9].getCode(), "private is ok", 0, rule), };         for (TestDescriptor testDescriptor : testDescriptors) {             testDescriptor.setReinitializeRule(false);         }         runTests(testDescriptors);     }     public static junit.framework.Test suite() {         return new junit.framework.JUnit4TestAdapter(UncommentedEmptyConstructorRuleTest.class);     } }
package net.sourceforge.pmd.lang.java.rule.design;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class ConfusingTernaryRuleTest extends SimpleAggregatorTst {        private static final String RULESET = "java-design";    @Before    public void setUp() {        addRule(RULESET, "ConfusingTernary");    }    /*public class BadTernaries {  public static void main(String[] args) {    int i = 0;    int j = 1;    int k = 2;    boolean x = true;    boolean y = false;    boolean z = true;    // flag all of these, lines 11 - 42:    if (i != 11) {a();} else {b();}    if (i != 12 && j != 0) {a();} else {b();}    if (i != 13 || j != 0) {a();} else {b();}    if (i != 14 && j != 0 && k != 0) {a();} else {b();}    if (i != 15 || j != 0 || k != 0) {a();} else {b();}    if (i != 16) {a();} else if (i != j) {b();} else{c();}    if (i != 17) {a();} else if (i == j) {b();} else{c();}    if (i == 18) {a();} else if (i != j) {b();} else{c();}    x = (!y ? x : y);    x = (!(x && y) ? y : z);    x = (!(x || y) ? y : z);    x = ((!x && !y) ? y : z);    x = ((!x || !y) ? y : z);    if (i != 24 && !x) {a();} else {b();}    if (i != 25 || !x) {a();} else {b();}    if (i != 26 && j != 0 && !y) {a();} else {b();}    if (i != 27 || j != 0 || !y) {a();} else {b();}    if (i != 28) {a();} else if (!x) {b();} else{c();}    if (i != 29) {a();} else if (x) {b();} else{c();}    if (i == 30) {a();} else if (!x) {b();} else{c();}    x = !(c() == y) ? y : !z;    if (!c()) {a();} else {b();}    if (c() != x) {a();} else {b();}    if (!c() != x) {a();} else {b();}    if (!c() != !x) {a();} else {b();}    if ((i != 36) || !(j == 0)) {a();} else {b();}    if ((i != 37) || !(x ? y : z)) {a();} else {b();}    if ((i != 38)) {a();} else {b();}    if (i != 39 || (j != 0 || k != 0)) {a();} else {b();}    if (i != 40 && (j != 0 && k != 0)) {a();} else {b();}    if (!x && (j != 41 && k != 0)) {a();} else {b();}    if (((x != y)) || !(x)) { a(); } else { b(); }    // don't flag these:    if (i != 0) {a();}    if (!x) {a();}    if (i == 0) {a();} else {b();}    if (i == 0 && j != 0) {a();} else {b();}    if (i == 0 || j != 0) {a();} else {b();}    if (i == 0 && !x) {a();} else {b();}    if (x) {a();} else {b();}    if (x ? y : !z) {a();} else {b();}    if (c() == !x) {a();} else {b();}    if (c() ? !x : !c()) {a();} else {b();}    if (!x && d() instanceof String) {a();} else {b();}    if (!x && (d() instanceof String)) {a();} else {b();}  }  private static void a() { }  private static void b() { }  private static boolean c() { return true; }  private static Object d() { return null; }}    */    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ConfusingTernaryRuleTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.design;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class DesignRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-design";    @Before    public void setUp() {        addRule(RULESET, "AbstractClassWithoutAbstractMethod");        addRule(RULESET, "AbstractClassWithoutAnyMethod");        addRule(RULESET, "AccessorClassGeneration");        addRule(RULESET, "AssignmentToNonFinalStatic");        addRule(RULESET, "AvoidConstantsInterface");        addRule(RULESET, "AvoidDeeplyNestedIfStmts");        addRule(RULESET, "AvoidInstanceofChecksInCatchClause");        addRule(RULESET, "AvoidProtectedFieldInFinalClass");        addRule(RULESET, "AvoidReassigningParameters");        addRule(RULESET, "AvoidSynchronizedAtMethodLevel");        addRule(RULESET, "BadComparison");        addRule(RULESET, "ClassWithOnlyPrivateConstructorsShouldBeFinal");        addRule(RULESET, "CloseResource");        addRule(RULESET, "CompareObjectsWithEquals");        addRule(RULESET, "DefaultLabelNotLastInSwitchStmt");        addRule(RULESET, "EmptyMethodInAbstractClassShouldBeAbstract");        addRule(RULESET, "EqualsNull");        addRule(RULESET, "FinalFieldCouldBeStatic");        addRule(RULESET, "FieldDeclarationsShouldBeAtStartOfClass");        addRule(RULESET, "GodClass");        addRule(RULESET, "IdempotentOperations");        addRule(RULESET, "ImmutableField");        addRule(RULESET, "InstantiationToGetClass");        addRule(RULESET, "LogicInversion");        addRule(RULESET, "MissingBreakInSwitch");        addRule(RULESET, "MissingStaticMethodInNonInstantiatableClass");        addRule(RULESET, "NonCaseLabelInSwitchStatement");        addRule(RULESET, "NonStaticInitializer");        addRule(RULESET, "NonThreadSafeSingleton");        addRule(RULESET, "OptimizableToArrayCall");        addRule(RULESET, "PositionLiteralsFirstInComparisons");        addRule(RULESET, "PreserveStackTrace");        addRule(RULESET, "ReturnEmptyArrayRatherThanNull");        addRule(RULESET, "SimpleDateFormatNeedsLocale");        addRule(RULESET, "SimplifyBooleanExpressions");        addRule(RULESET, "SimplifyBooleanReturns");        addRule(RULESET, "SimplifyConditional");        addRule(RULESET, "SingularField");        addRule(RULESET, "SwitchDensity");        addRule(RULESET, "SwitchStmtsShouldHaveDefault");        addRule(RULESET, "TooFewBranchesForASwitchStatement");//      addRule(RULESET, "TooManyHttpFilter.xml");        addRule(RULESET, "UncommentedEmptyMethod");        addRule(RULESET, "UnnecessaryLocalBeforeReturn");        addRule(RULESET, "UnsynchronizedStaticDateFormatter");        addRule(RULESET, "UseCollectionIsEmpty");        addRule(RULESET, "UseLocaleWithCaseConversions");        addRule(RULESET, "UseNotifyAllInsteadOfNotify");        addRule(RULESET, "UseSingleton");        addRule(RULESET, "UseVarargs");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(DesignRulesTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.design;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class UncommentedEmptyMethodRuleTest extends SimpleAggregatorTst {        private static final String RULESET = "java-design";    @Before    public void setUp() {        addRule(RULESET, "UncommentedEmptyMethod");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(                UncommentedEmptyMethodRuleTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.design;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class GodClassRuleTest extends SimpleAggregatorTst {    private static final String RULESET = "java-design";    @Before    public void setUp() {        addRule(RULESET, "GodClass");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(GodClassRuleTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.design;import org.junit.Before;import org.junit.Test;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import net.sourceforge.pmd.testframework.TestDescriptor;/** * * * @author Romain PELISSE, belaran@gmail.com * */public class TooManyHttpFilterTest extends SimpleAggregatorTst {     private Rule rule;     private TestDescriptor[] tests;     @Before     public void setUp() {//         rule = findRule("design", "TooManyHttpFilter");//         tests = extractTestsFromXml(rule);     }     @Test     public void testDefault() { //        runTests(tests);     }     public static junit.framework.Test suite() {         return new junit.framework.JUnit4TestAdapter(TooManyHttpFilterTest.class);     } }
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.design;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class ConstructorCallsOverridableMethodTest extends SimpleAggregatorTst {        private static final String RULESET = "java-design";    @Before    public void setUp() {        addRule(RULESET, "ConstructorCallsOverridableMethod");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(                ConstructorCallsOverridableMethodTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.comments;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class CommentRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-comments";    @Before    public void setUp() {    addRule(RULESET, "CommentRequired");        addRule(RULESET, "CommentSize");        addRule(RULESET, "CommentContent");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(CommentRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.loggingjakartacommons;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class LoggingJakartaCommonsRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-logging-jakarta-commons";    @Before    public void setUp() {        addRule(RULESET, "ProperLogger");        addRule(RULESET, "UseCorrectExceptionLogging");        addRule(RULESET, "GuardDebugLogging");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(LoggingJakartaCommonsRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.braces;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class BracesRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-braces";    @Before    public void setUp() {        addRule(RULESET, "ForLoopsMustUseBraces");        addRule(RULESET, "IfElseStmtsMustUseBraces");        addRule(RULESET, "IfStmtsMustUseBraces");        addRule(RULESET, "WhileLoopsMustUseBraces");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(BracesRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.migrating;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class MigratingRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-migrating";    @Before    public void setUp() {        addRule(RULESET, "AvoidAssertAsIdentifier");        addRule(RULESET, "AvoidEnumAsIdentifier");        addRule(RULESET, "ByteInstantiation");        addRule(RULESET, "IntegerInstantiation");        addRule(RULESET, "JUnit4SuitesShouldUseSuiteAnnotation");        addRule(RULESET, "JUnit4TestShouldUseAfterAnnotation");        addRule(RULESET, "JUnit4TestShouldUseBeforeAnnotation");        addRule(RULESET, "JUnit4TestShouldUseTestAnnotation");        addRule(RULESET, "JUnitUseExpected");        addRule(RULESET, "LongInstantiation");        addRule(RULESET, "ReplaceEnumerationWithIterator");        addRule(RULESET, "ReplaceHashtableWithMap");        addRule(RULESET, "ReplaceVectorWithList");        addRule(RULESET, "ShortInstantiation");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(MigratingRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.loggingjava;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class LoggingJavaRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-logging-java";    @Before    public void setUp() {        addRule(RULESET, "AvoidPrintStackTrace");        addRule(RULESET, "LoggerIsNotStaticFinal");        addRule(RULESET, "MoreThanOneLogger");        addRule(RULESET, "SystemPrintln");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(LoggingJavaRulesTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.empty;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class EmptyRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-empty";    @Before    public void setUp() {        addRule(RULESET, "EmptyCatchBlock");        addRule(RULESET, "EmptyFinallyBlock");        addRule(RULESET, "EmptyIfStmt");        addRule(RULESET, "EmptyInitializer");        addRule(RULESET, "EmptyStatementBlock");        addRule(RULESET, "EmptyStatementNotInLoop");        addRule(RULESET, "EmptyStaticInitializer");        addRule(RULESET, "EmptySwitchStatements");        addRule(RULESET, "EmptySynchronizedBlock");        addRule(RULESET, "EmptyTryBlock");        addRule(RULESET, "EmptyWhileStmt");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(EmptyRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.sunsecure;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class SunSecureRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-sunsecure";    @Before    public void setUp() {        addRule(RULESET, "MethodReturnsInternalArray");        addRule(RULESET, "ArrayIsStoredDirectly");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(SunSecureRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.clone;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class CloneRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-clone";    @Before    public void setUp() {        addRule(RULESET, "CloneMethodMustImplementCloneable");        addRule(RULESET, "CloneThrowsCloneNotSupportedException");        addRule(RULESET, "ProperCloneImplementation");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(CloneRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.codesize;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class CodesizeRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-codesize";    @Before    public void setUp() {        addRule(RULESET, "ExcessivePublicCount");        addRule(RULESET, "ExcessiveClassLength");        addRule(RULESET, "ExcessiveParameterList");        addRule(RULESET, "ExcessiveMethodLength");        addRule(RULESET, "NcssConstructorCount");        addRule(RULESET, "NcssMethodCount");        addRule(RULESET, "NcssTypeCount");        addRule(RULESET, "NPathComplexity");        addRule(RULESET, "TooManyFields");        addRule(RULESET, "TooManyMethods");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(CodesizeRulesTest.class);    }}
 /**  * BSD-style license; for more info see http://pmd.sourceforge.net/license.html  */package net.sourceforge.pmd.lang.java.rule.codesize; import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNotSame;import java.util.Iterator;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.lang.java.rule.codesize.CyclomaticComplexityRule;import net.sourceforge.pmd.testframework.RuleTst;import net.sourceforge.pmd.testframework.TestDescriptor;import org.junit.Before;import org.junit.Test; public class CyclomaticComplexityTest extends RuleTst {     private Rule rule;     private TestDescriptor[] tests;      @Before public void setUp() {         rule = findRule("java-codesize", "CyclomaticComplexity");         tests = extractTestsFromXml(rule);     }      @Test     public void testOneMethod() throws Throwable {         rule.setProperty(CyclomaticComplexityRule.REPORT_LEVEL_DESCRIPTOR, 1);         Report report = new Report();         runTestFromString(tests[0].getCode(), rule, report);         Iterator i = report.iterator();         RuleViolation rv = (RuleViolation) i.next();         assertNotSame(rv.getDescription().indexOf("Highest = 1"), -1);     }      @Test     public void testNastyComplicatedMethod() throws Throwable {         rule.setProperty(CyclomaticComplexityRule.REPORT_LEVEL_DESCRIPTOR, 10);         Report report = new Report();         runTestFromString(tests[1].getCode(), rule, report);         Iterator i = report.iterator();         RuleViolation rv = (RuleViolation) i.next();         assertNotSame(rv.getDescription().indexOf("Highest = 11"), -1);     }      @Test     public void testConstructor() throws Throwable {         rule.setProperty(CyclomaticComplexityRule.REPORT_LEVEL_DESCRIPTOR, 1);         Report report = new Report();         runTestFromString(tests[2].getCode(), rule, report);         Iterator i = report.iterator();         RuleViolation rv = (RuleViolation) i.next();         assertNotSame(rv.getDescription().indexOf("Highest = 1"), -1);     }      @Test     public void testLessComplicatedThanReportLevel() throws Throwable {         rule.setProperty(CyclomaticComplexityRule.REPORT_LEVEL_DESCRIPTOR, 10);         Report report = new Report();         runTestFromString(tests[0].getCode(), rule, report);         assertEquals(0, report.size());     }     public static junit.framework.Test suite() {         return new junit.framework.JUnit4TestAdapter(CyclomaticComplexityTest.class);     } }
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.codesize;import static org.junit.Assert.assertEquals;import java.util.Iterator;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.lang.java.rule.codesize.NPathComplexityRule;import net.sourceforge.pmd.testframework.RuleTst;import net.sourceforge.pmd.testframework.TestDescriptor;import org.junit.Before;import org.junit.Test;public class NPathComplexityTest extends RuleTst {    private Rule rule;    private TestDescriptor[] tests;    @Before    public void setUp() {rule = findRule("java-codesize", "NPathComplexity");tests = extractTestsFromXml(rule);    }    @Test    public void testViolationMessage() throws Throwable {rule.setProperty(NPathComplexityRule.MINIMUM_DESCRIPTOR, 1.0);Report report = new Report();runTestFromString(tests[0].getCode(), rule, report);Iterator i = report.iterator();RuleViolation rv = (RuleViolation) i.next();assertEquals("correct violation message", "The method bar() has an NPath complexity of 2", rv.getDescription());    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(NPathComplexityTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.typeresolution;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class SignatureDeclareThrowsExceptionTest extends SimpleAggregatorTst {        private static final String RULESET = "java-typeresolution";    @Before    public void setUp() {        addRule(RULESET, "SignatureDeclareThrowsException");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(SignatureDeclareThrowsExceptionTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.typeresolution;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class CloneMethodMustImplementCloneableTest extends SimpleAggregatorTst {        private static final String RULESET = "java-typeresolution";    @Beforepublic void setUp() {//addRule(RULESET, "CloneMethodMustImplementCloneable");}    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(CloneMethodMustImplementCloneableTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.typeresolution;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class UnusedImportsTest extends SimpleAggregatorTst {        private static final String RULESET = "java-typeresolution";    @Before    public void setUp() {        addRule(RULESET, "UnusedImports");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(UnusedImportsTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.typeresolution;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class LooseCouplingTest extends SimpleAggregatorTst {        private static final String RULESET = "java-typeresolution";    @Before    public void setUp() {        addRule(RULESET, "LooseCoupling");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(LooseCouplingTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.android;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class AndroidRulesTest extends SimpleAggregatorTst {    private static final String RULESET = "java-android";    @Before    public void setUp() {        addRule(RULESET, "CallSuperFirst");        addRule(RULESET, "CallSuperLast");        addRule(RULESET, "DoNotHardCodeSDCard");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(AndroidRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.finalizers;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class FinalizersRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-finalizers";    @Before    public void setUp() {        addRule(RULESET, "AvoidCallingFinalize");        addRule(RULESET, "EmptyFinalizer");        addRule(RULESET, "FinalizeDoesNotCallSuperFinalize");        addRule(RULESET, "FinalizeOnlyCallsSuperFinalize");        addRule(RULESET, "FinalizeOverloaded");        addRule(RULESET, "FinalizeShouldBeProtected");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(FinalizersRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.strictexception;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class StrictExceptionRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-strictexception";    @Before    public void setUp() {        addRule(RULESET, "AvoidCatchingGenericException");        addRule(RULESET, "AvoidCatchingNPE");        addRule(RULESET, "AvoidCatchingThrowable");        addRule(RULESET, "AvoidLosingExceptionInformation");        addRule(RULESET, "AvoidRethrowingException");        addRule(RULESET, "AvoidThrowingNewInstanceOfSameException");        addRule(RULESET, "AvoidThrowingNullPointerException");        addRule(RULESET, "AvoidThrowingRawExceptionTypes");        addRule(RULESET, "DoNotExtendJavaLangError");        addRule(RULESET, "ExceptionAsFlowControl");        addRule(RULESET, "SignatureDeclareThrowsException");        addRule(RULESET, "DoNotThrowExceptionInFinally");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(StrictExceptionRulesTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.unnecessary;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class UnnecessaryRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-unnecessary";    @Before    public void setUp() {        addRule(RULESET, "UnnecessaryConversionTemporary");        addRule(RULESET, "UnnecessaryReturn");        addRule(RULESET, "UnnecessaryFinalModifier");addRule(RULESET, "UnusedNullCheckInEquals");        addRule(RULESET, "UselessOverridingMethod");        addRule(RULESET, "UselessOperationOnImmutable");        addRule(RULESET, "UselessParentheses");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(UnnecessaryRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule.strings;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class StringsRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-strings";    @Before    public void setUp() {        addRule(RULESET, "AppendCharacterWithChar");        addRule(RULESET,"AvoidStringBufferField");        addRule(RULESET, "ConsecutiveLiteralAppends");        addRule(RULESET, "InefficientEmptyStringCheck");        addRule(RULESET, "InefficientStringBuffering");        addRule(RULESET, "InsufficientStringBufferDeclaration");        addRule(RULESET, "StringBufferInstantiationWithChar");        addRule(RULESET, "StringInstantiation");        addRule(RULESET, "StringToString");        addRule(RULESET, "UnnecessaryCaseChange");        addRule(RULESET, "UseEqualsToCompareStrings");        addRule(RULESET, "UseIndexOfChar");        addRule(RULESET, "UselessStringValueOf");        addRule(RULESET, "UseStringBufferLength");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(StringsRulesTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.java.rule.strings; import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.lang.java.rule.strings.AvoidDuplicateLiteralsRule;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Test;import java.util.Set;  public class AvoidDuplicateLiteralsRuleTest extends SimpleAggregatorTst {          @Test     public void testAll() {         Rule rule = findRule("java-strings", "AvoidDuplicateLiterals");         rule.setProperty(AvoidDuplicateLiteralsRule.THRESHOLD_DESCRIPTOR, 2);         runTests(rule);     }      @Test     public void testStringParserEmptyString() {         AvoidDuplicateLiteralsRule.ExceptionParser p = new AvoidDuplicateLiteralsRule.ExceptionParser(',');         Set res = p.parse("");         assertTrue(res.isEmpty());     }      @Test     public void testStringParserSimple() {         AvoidDuplicateLiteralsRule.ExceptionParser p = new AvoidDuplicateLiteralsRule.ExceptionParser(',');         Set res = p.parse("a,b,c");         assertEquals(3, res.size());         assertTrue(res.contains("a"));         assertTrue(res.contains("b"));         assertTrue(res.contains("c"));     }      @Test     public void testStringParserEscapedChar() {         AvoidDuplicateLiteralsRule.ExceptionParser p = new AvoidDuplicateLiteralsRule.ExceptionParser(',');         Set res = p.parse("a,b,\\,");         assertEquals(3, res.size());         assertTrue(res.contains("a"));         assertTrue(res.contains("b"));         assertTrue(res.contains(","));     }      @Test     public void testStringParserEscapedEscapedChar() {         AvoidDuplicateLiteralsRule.ExceptionParser p = new AvoidDuplicateLiteralsRule.ExceptionParser(',');         Set res = p.parse("a,b,\\\\");         assertEquals(3, res.size());         assertTrue(res.contains("a"));         assertTrue(res.contains("b"));         assertTrue(res.contains("\\"));     }     public static junit.framework.Test suite() {         return new junit.framework.JUnit4TestAdapter(AvoidDuplicateLiteralsRuleTest.class);     } }
package net.sourceforge.pmd.lang.java.rule.unusedcode;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class UnusedCodeRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "java-unusedcode";    @Before    public void setUp() {        addRule(RULESET, "UnusedFormalParameter");        addRule(RULESET, "UnusedLocalVariable");        addRule(RULESET, "UnusedPrivateField");        addRule(RULESET, "UnusedPrivateMethod");        addRule(RULESET, "UnusedModifier");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(UnusedCodeRulesTest.class);    }}
package net.sourceforge.pmd.lang.java.rule; import static org.junit.Assert.assertEquals;import java.io.StringReader;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSets;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.rule.XPathRule;import net.sourceforge.pmd.lang.rule.properties.StringProperty;import net.sourceforge.pmd.testframework.RuleTst;import org.junit.Before;import org.junit.Test; /**  * @author daniels  */ public class XPathRuleTest extends RuleTst {      XPathRule rule;      @Before     public void setUp() {         rule = new XPathRule();         rule.setLanguage(Language.JAVA);         rule.setMessage("XPath Rule Failed");     }      @Test     public void testPluginname() throws Throwable {         rule.setXPath("//VariableDeclaratorId[string-length(@Image) < 3]");         rule.setMessage("{0}");         PMD p = new PMD();         RuleContext ctx = new RuleContext();         Report report = new Report();         ctx.setReport(report);         ctx.setSourceCodeFilename("n/a");         RuleSet rules = new RuleSet();         rules.addRule(rule);         p.getSourceCodeProcessor().processSourceCode(new StringReader(TEST1), new RuleSets(rules), ctx);         RuleViolation rv = (RuleViolation) report.iterator().next();         assertEquals("a", rv.getDescription());     }      @Test     public void testVariables() throws Throwable {         rule.setXPath("//VariableDeclaratorId[@Image=$var]");         rule.setMessage("Avoid vars");         StringProperty varDescriptor = new StringProperty("var", "Test var", null, 1.0f);         rule.definePropertyDescriptor(varDescriptor);         rule.setProperty(varDescriptor, "fiddle");         PMD p = new PMD();         RuleContext ctx = new RuleContext();         Report report = new Report();         ctx.setReport(report);         ctx.setSourceCodeFilename("n/a");         RuleSet rules = new RuleSet();         rules.addRule(rule);         p.getSourceCodeProcessor().processSourceCode(new StringReader(TEST2), new RuleSets(rules), ctx);         RuleViolation rv = (RuleViolation) report.iterator().next();         assertEquals(3, rv.getBeginLine());     }      private static final String TEST1 =             "public class Foo {" + PMD.EOL +             " int a;" + PMD.EOL +             "}";      private static final String TEST2 =             "public class Foo {" + PMD.EOL +             " int faddle;" + PMD.EOL +             " int fiddle;" + PMD.EOL +             "}";     public static junit.framework.Test suite() {         return new junit.framework.JUnit4TestAdapter(XPathRuleTest.class);     } }
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.lang.xsl.rule.xpath;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import org.junit.Before;public class XPathRulesTest extends SimpleAggregatorTst {        private static final String RULESET = "xsl-xpath";    @Before    public void setUp() {        addRule(RULESET, "UseConcatOnce");addRule(RULESET, "AvoidAxisNavigation");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(XPathRulesTest.class);    }}
package net.sourceforge.pmd.lang;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNotSame;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.lang.ParserOptions;import org.junit.Test;public class ParserOptionsTest {    @Test    public void testSuppressMarker() throws Exception {ParserOptions parserOptions = new ParserOptions();assertNull(parserOptions.getSuppressMarker());parserOptions.setSuppressMarker("foo");assertEquals("foo", parserOptions.getSuppressMarker());    }    @Test    public void testEqualsHashcode() throws Exception {ParserOptions options1 = new ParserOptions();options1.setSuppressMarker("foo");ParserOptions options2 = new ParserOptions();options2.setSuppressMarker("bar");ParserOptions options3 = new ParserOptions();options3.setSuppressMarker("foo");ParserOptions options4 = new ParserOptions();options4.setSuppressMarker("bar");verifyOptionsEqualsHashcode(options1, options2, options3, options4);    }    // 1 and 3 are equals, as are 2 and 4.    @SuppressWarnings("PMD.UseAssertSameInsteadOfAssertTrue")    public static void verifyOptionsEqualsHashcode(ParserOptions options1, ParserOptions options2,    ParserOptions options3, ParserOptions options4) {// Objects should be differentassertNotSame(options1, options2);assertNotSame(options1, options2);assertNotSame(options1, options3);assertNotSame(options2, options3);assertNotSame(options2, options4);assertNotSame(options3, options4);// Check all 16 equality combinationsassertEquals(options1, options1);assertFalse(options1.equals(options2));assertEquals(options1, options3);assertFalse(options1.equals(options4));assertFalse(options2.equals(options1));assertEquals(options2, options2);assertFalse(options2.equals(options3));assertEquals(options2, options4);assertEquals(options3, options1);assertFalse(options3.equals(options2));assertEquals(options3, options3);assertFalse(options3.equals(options4));assertFalse(options4.equals(options1));assertEquals(options4, options2);assertFalse(options4.equals(options3));assertEquals(options4, options4);// Hashcodes should match upassertFalse(options1.hashCode() == options2.hashCode());assertTrue(options1.hashCode() == options3.hashCode());assertFalse(options1.hashCode() == options4.hashCode());assertFalse(options2.hashCode() == options3.hashCode());assertTrue(options2.hashCode() == options4.hashCode());assertFalse(options3.hashCode() == options4.hashCode());    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(ParserOptionsTest.class);    }}
package net.sourceforge.pmd.properties;import java.util.Comparator;import java.util.HashMap;import java.util.Map;import java.util.Observer;import java.util.Set;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.TypeMultiProperty;import net.sourceforge.pmd.lang.rule.properties.TypeProperty;/** * Evaluates the functionality of the TypeProperty descriptor by testing its ability to catch creation * errors (illegal args), flag invalid Type values per the allowable packages, and serialize/deserialize * groups of types onto/from a string buffer. *  * We're using java.lang classes for 'normal' constructors and applying java.util types as ones we expect * to fail. *  * @author Brian Remedios */public class TypePropertyTest extends AbstractPropertyDescriptorTester {private static final Class[] javaLangClasses = new Class[] { String.class, Integer.class, Thread.class, Object.class, Runtime.class };private static final Class[] javaUtilTypes = new Class[] { HashMap.class, Map.class, Comparator.class, Set.class, Observer.class };public TypePropertyTest() {super();}/** * Method createValue. * @param count int * @return Object */protected Object createValue(int count) {if (count == 1) return randomChoice(javaLangClasses);Object[] values = new Object[count];for (int i=0; i<values.length; i++) values[i] = createValue(1);return values;}/** * Method createBadValue. * @param count int * @return Object */protected Object createBadValue(int count) {if (count == 1) return randomChoice(javaUtilTypes);Object[] values = new Object[count];for (int i=0; i<values.length; i++) values[i] = createBadValue(1);return values;}/** * Method createProperty. * @param multiValue boolean * @return PropertyDescriptor */protected PropertyDescriptor createProperty(boolean multiValue) {return multiValue ?new TypeMultiProperty("testType", "Test type property", javaLangClasses, new String[] { "java.lang" }, 1.0f) :new TypeProperty("testType", "Test type property", javaLangClasses[0], new String[] { "java.lang" }, 1.0f);}/** * Method createProperty. * @param multiValue boolean * @return PropertyDescriptor */protected PropertyDescriptor createBadProperty(boolean multiValue) {return multiValue ?new TypeMultiProperty("testType", "Test type property", new Class[]{Set.class}, new String[] { "java.lang" }, 1.0f) :new TypeProperty("testType", "Test type property", javaLangClasses[0], new String[] { "java.util" }, 1.0f);}    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(TypePropertyTest.class);    }}
package net.sourceforge.pmd.properties;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertTrue;import java.lang.reflect.Method;import java.util.HashMap;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.MethodMultiProperty;import net.sourceforge.pmd.lang.rule.properties.MethodProperty;import net.sourceforge.pmd.util.ClassUtil;import org.junit.Test;/** * Evaluates the functionality of the MethodProperty descriptor by testing its ability to catch creation * errors (illegal args), flag invalid methods per the allowable packages, and serialize/deserialize * groups of methods onto/from a string buffer. *  * We're using methods from java.lang classes for 'normal' constructors and applying ones from * java.util types as ones we expect to fail. *  * @author Brian Remedios */public class MethodPropertyTest extends AbstractPropertyDescriptorTester {private static final String[] methodSignatures = new String[] {"String#indexOf(int)", "String#substring(int,int)","java.lang.String#substring(int,int)","Integer#parseInt(String)","java.util.HashMap#put(Object,Object)","HashMap#containsKey(Object)"};public MethodPropertyTest() {}@Test    public void testAsStringOn() {Method method = null;for (int i=0; i<methodSignatures.length; i++) {method = MethodProperty.methodFrom(methodSignatures[i],MethodProperty.CLASS_METHOD_DELIMITER,MethodProperty.METHOD_ARG_DELIMITER);assertNotNull("Unable to identify method: " + methodSignatures[i], method);}}@Testpublic void testAsMethodOn() {Method[] methods = new Method[methodSignatures.length];for (int i=0; i<methodSignatures.length; i++) {methods[i] = MethodProperty.methodFrom(methodSignatures[i],MethodProperty.CLASS_METHOD_DELIMITER,MethodProperty.METHOD_ARG_DELIMITER);assertNotNull("Unable to identify method: " + methodSignatures[i], methods[i]);}String translatedMethod = null;for (int i=0; i<methods.length; i++) {translatedMethod = MethodProperty.asStringFor(methods[i]);assertTrue("Translated method does not match",ClassUtil.withoutPackageName(methodSignatures[i]).equals(ClassUtil.withoutPackageName(translatedMethod)));}}@Overrideprotected PropertyDescriptor createBadProperty(boolean multiValue) {Method[] methods = String.class.getDeclaredMethods();return multiValue ?new MethodMultiProperty("methodProperty", "asdf", new Method[] { methods[2], methods[3] }, new String[] { "java.util" } , 1.0f) :new MethodProperty("methodProperty", "asdf", methods[1], new String[] { "java.util" }, 1.0f); }@Overrideprotected Object createBadValue(int count) {Method[] allMethods = HashMap.class.getDeclaredMethods();if (count == 1) {return (Method)randomChoice(allMethods);}Method[] methods = new Method[count];for (int i=0; i<count; i++) {methods[i] = allMethods[i];}return methods;}@Overrideprotected PropertyDescriptor createProperty(boolean multiValue) {Method[] methods = String.class.getDeclaredMethods();return multiValue ?new MethodMultiProperty("methodProperty", "asdf", new Method[] { methods[2], methods[3] }, new String[] { "java.lang" } , 1.0f) :new MethodProperty("methodProperty", "asdf", methods[1], new String[] { "java.lang" }, 1.0f); }@Overrideprotected Object createValue(int count) {Method[] allMethods = String.class.getDeclaredMethods();if (count == 1) {return (Method)randomChoice(allMethods);}Method[] methods = new Method[count];for (int i=0; i<count; i++) {methods[i] = allMethods[i];}return methods;}    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(MethodPropertyTest.class);    }}
package net.sourceforge.pmd.properties;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.BooleanMultiProperty;import net.sourceforge.pmd.lang.rule.properties.BooleanProperty;import org.junit.Test;/** * @author Brian Remedios */public class BooleanPropertyTest extends AbstractPropertyDescriptorTester {public BooleanPropertyTest() {super();}/** * Method createValue. * @param valueCount int * @return Object */protected Object createValue(int valueCount) {if (valueCount == 1) return System.currentTimeMillis() % 1 > 0 ?Boolean.TRUE : Boolean.FALSE;Boolean[] values = new Boolean[valueCount];for (int i=0; i<values.length; i++) values[i] = (Boolean)createValue(1);return values;} @Testpublic void testErrorForBad() { // override, cannot create a 'bad' boolean per se}     protected Object createBadValue(int count) { return null;}/** * Method createProperty. * @param multiValue boolean * @return PropertyDescriptor */ protected PropertyDescriptor createProperty(boolean multiValue) {return multiValue ?new BooleanMultiProperty("testBoolean", "Test boolean property", new Boolean[] {false, true, true}, 1.0f) :new BooleanProperty("testBoolean", "Test boolean property", false, 1.0f);}/** * Method createBadProperty. * @param multiValue boolean * @return PropertyDescriptor */ protected PropertyDescriptor createBadProperty(boolean multiValue) {return multiValue ?new BooleanMultiProperty("", "Test boolean property", new Boolean[] {false, true, true}, 1.0f) :new BooleanProperty("testBoolean", "", false, 1.0f);}    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(BooleanPropertyTest.class);    }}
package net.sourceforge.pmd.properties;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.StringMultiProperty;import net.sourceforge.pmd.lang.rule.properties.StringProperty;/** * Evaluates the functionality of the StringProperty descriptor by testing its ability to catch creation * errors (illegal args), flag invalid strings per any specified expressions, and serialize/deserialize * groups of strings onto/from a string buffer. *  * @author Brian Remedios */public class StringPropertyTest extends AbstractPropertyDescriptorTester {private static final int maxStringLength = 52;private static final char delimiter = '|';private static final char[] charSet = filter(allChars.toCharArray(), delimiter);public StringPropertyTest() {super();}/** * Method createValue. * @param count int * @return Object */protected Object createValue(int count) {if (count == 1) return newString();String[] values = new String[count];for (int i=0; i<count; i++) values[i] = (String)createValue(1);return values;}/** * Method createBadValue. * @param count int * @return Object */protected Object createBadValue(int count) {if (count == 1) return null;Object[] values = new Object[count];for (int i=0; i<count; i++) values[i] = createBadValue(1);return values;}/** * Method newString. * @return String */private String newString() {int strLength = randomInt(0, maxStringLength);char[] chars = new char[strLength];for (int i=0; i<chars.length; i++) chars[i] = randomCharIn(charSet);return new String(chars);}/** * Method randomCharIn. * @param chars char[] * @return char */private char randomCharIn(char[] chars) {return randomChar(chars);}/** * Method createProperty. * @param multiValue boolean * @return PropertyDescriptor */protected PropertyDescriptor createProperty(boolean multiValue) {return multiValue ?new StringMultiProperty("testString", "Test string property", new String[] {"hello", "world"}, 1.0f, delimiter) :new StringProperty("testString", "Test string property", "brian", 1.0f);}/** * Method createBadProperty. * @param multiValue boolean * @return PropertyDescriptor */protected PropertyDescriptor createBadProperty(boolean multiValue) {return multiValue ?new StringMultiProperty("testString", "Test string property", new String[] {"hello", "world", "a"+delimiter+"b"}, 1.0f, delimiter) :new StringProperty("", "Test string property", "brian", 1.0f);}    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(StringPropertyTest.class);    }}
package net.sourceforge.pmd.properties;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.CharacterMultiProperty;import net.sourceforge.pmd.lang.rule.properties.CharacterProperty;import org.junit.Test;/** * Evaluates the functionality of the CharacterProperty descriptor by testing its ability to catch creation * errors (illegal args), flag invalid characters, and serialize/deserialize any default values. *   * @author Brian Remedios */public class CharacterPropertyTest extends AbstractPropertyDescriptorTester {private static final char delimiter = '|';private static final char[] charSet = filter(allChars.toCharArray(), delimiter);public CharacterPropertyTest() {super();}/** * Method createValue. * @param count int * @return Object */protected Object createValue(int count) {if (count == 1) return new Character(randomChar(charSet));Character[] values = new Character[count];for (int i=0; i<values.length; i++) values[i] = (Character)createValue(1);return values;}/** * Method createBadValue. * @param count int * @return Object */protected Object createBadValue(int count) {if (count == 1) return null;Character[] values = new Character[count];for (int i=0; i<values.length; i++) values[i] = (Character)createBadValue(1);return values;} @Test public void testErrorForBad() { }// not until char properties use illegal chars/** * Method createProperty. * @param multiValue boolean * @return PropertyDescriptor */protected PropertyDescriptor createProperty(boolean multiValue) {return multiValue ?new CharacterMultiProperty("testCharacter", "Test character property", new Character[] {'a', 'b', 'c'}, 1.0f, delimiter) :new CharacterProperty("testCharacter", "Test character property", 'a', 1.0f);}/** * Creates a bad property that is missing either its name or description or includes a delimiter * in the set of legal values. *  * @param multiValue boolean * @return PropertyDescriptor */protected PropertyDescriptor createBadProperty(boolean multiValue) {return multiValue ?new CharacterMultiProperty("testCharacter", "Test character property", new Character[] {'a', 'b', 'c'}, 1.0f, delimiter) :new CharacterProperty("", "Test character property", 'a', 1.0f);}    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(CharacterPropertyTest.class);    }}
package net.sourceforge.pmd.properties;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.IntegerMultiProperty;import net.sourceforge.pmd.lang.rule.properties.IntegerProperty;import org.junit.Test;/** * Evaluates the functionality of the IntegerProperty descriptor by testing its ability to catch creation * errors (illegal args), flag out-of-range test values, and serialize/deserialize groups of integers * onto/from a string buffer. *  * @author Brian Remedios */public class IntegerPropertyTest extends AbstractPropertyDescriptorTester {private static final int MIN = 1;private static final int MAX = 12;private static final int SHIFT = 3;/** * Method createValue. * @param count int * @return Object */protected Object createValue(int count) {if (count == 1) return Integer.valueOf(randomInt(MIN, MAX));Integer[] values = new Integer[count];for (int i=0; i<values.length; i++) values[i] = (Integer)createValue(1);return values;}/** * Creates and returns (count) number of out-of-range Integer values *  * @param count int * @return Object */protected Object createBadValue(int count) {if (count == 1) return Integer.valueOf(randomBool() ?randomInt(MIN - SHIFT, MIN) :randomInt(MAX, MAX + SHIFT));Integer[] values = new Integer[count];for (int i=0; i<values.length; i++) values[i] = (Integer)createBadValue(1);return values;} @Testpublic void testErrorForBad() { }// not until int properties get ranges/** * Method createProperty. * @param multiValue boolean * @return PropertyDescriptor */protected PropertyDescriptor createProperty(boolean multiValue) {return multiValue ?new IntegerMultiProperty("testInteger", "Test integer property", MIN, MAX, new Integer[] {MIN, MIN+1, MAX-1, MAX}, 1.0f) :new IntegerProperty("testInteger", "Test integer property", MIN, MAX, MAX-1, 1.0f);}/** * Method createBadProperty. * @param multiValue boolean * @return PropertyDescriptor */protected PropertyDescriptor createBadProperty(boolean multiValue) {return multiValue ?new IntegerMultiProperty("testInteger", "", MIN, MAX, new Integer[] {MIN-1, MAX}, 1.0f) :new IntegerProperty("", "Test integer property", MIN, MAX, MAX+1, 1.0f); }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(IntegerPropertyTest.class);    }}
package net.sourceforge.pmd.properties;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.FloatMultiProperty;import net.sourceforge.pmd.lang.rule.properties.FloatProperty;/** * Evaluates the functionality of the FloatProperty descriptor by testing its ability to catch creation * errors (illegal args), flag out-of-range test values, and serialize/deserialize groups of float values * onto/from a string buffer. *  * @author Brian Remedios */public class FloatPropertyTest extends AbstractPropertyDescriptorTester {private static final float MIN = 1.0f;private static final float MAX = 11.0f;private static final float SHIFT = 3.0f;public static FloatProperty randomProperty(int nameLength, int descLength, boolean multiValue) {float defalt = randomFloat(0, 1000f);return new FloatProperty(randomString(nameLength), randomString(descLength),defalt - 1000f, defalt + 1000, defalt, 0f);}public FloatPropertyTest() {super();}/** * Method createValue. * @param count int * @return Object */protected Object createValue(int count) {if (count == 1) return Float.valueOf(randomFloat(MIN, MAX));Float[] values = new Float[count];for (int i=0; i<values.length; i++) values[i] = (Float)createValue(1);return values;}/** * Creates and returns (count) number of out-of-range float values *  * @param count int * @return Object */protected Object createBadValue(int count) {if (count == 1) return Float.valueOf(randomBool() ?randomFloat(MIN - SHIFT, MIN) :randomFloat(MAX, MAX + SHIFT));Float[] values = new Float[count];for (int i=0; i<values.length; i++) values[i] = (Float)createBadValue(1);return values;}/** * Method createProperty. * @param multiValue boolean * @return PropertyDescriptor */protected PropertyDescriptor createProperty(boolean multiValue) {return multiValue ?new FloatMultiProperty("testFloat", "Test float property", MIN, MAX, new Float[] {-1f,0f,1f,2f}, 1.0f) :new FloatProperty("testFloat", "Test float property", MIN, MAX, 9.0f, 1.0f) ;}/** * Method createBadProperty. * @param multiValue boolean * @return PropertyDescriptor */protected PropertyDescriptor createBadProperty(boolean multiValue) {return multiValue ?new FloatMultiProperty("testFloat", "Test float property", 0f, 5f, new Float[] {-1f,0f,1f,2f}, 1.0f) :new FloatProperty("testFloat", "Test float property", 5f, 4f, 9.0f, 1.0f) ;}    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(FloatPropertyTest.class);    }}
package net.sourceforge.pmd.properties;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.DoubleMultiProperty;import net.sourceforge.pmd.lang.rule.properties.DoubleProperty;/** * Evaluates the functionality of the DoubleProperty descriptor by testing its ability to catch creation * errors (illegal args), flag out-of-range test values, and serialize/deserialize groups of double values * onto/from a string buffer. *  * @author Brian Remedios */public class DoublePropertyTest extends AbstractPropertyDescriptorTester {private static final double MIN = -10.0;private static final double MAX = 100.0;private static final double SHIFT = 5.0;public DoublePropertyTest() {super();}/** * Creates and returns (count) number of legal Double values *  * @param count int * @return Object */protected Object createValue(int count) {if (count == 1) return Double.valueOf(randomDouble(MIN, MAX));Double[] values = new Double[count];for (int i=0; i<values.length; i++) values[i] = (Double)createValue(1);return values;}/** * Creates and returns (count) number of out-of-range values *  * @param count int * @return Object */protected Object createBadValue(int count) {if (count == 1) return Double.valueOf(randomBool() ?randomDouble(MIN - SHIFT, MIN - 0.01) :randomDouble(MAX + 0.01, MAX + SHIFT));Double[] values = new Double[count];for (int i=0; i<values.length; i++) values[i] = (Double)createBadValue(1);return values;}/** * Creates and returns a property with a (maxCount) value cardinality. *  * @param multiValue boolean * @return PropertyDescriptor */protected PropertyDescriptor createProperty(boolean multiValue) {return multiValue ?new DoubleMultiProperty("testDouble", "Test double property", MIN, MAX, new Double[] {-1d,0d,1d,2d}, 1.0f) :new DoubleProperty("testDouble", "Test double property", MIN, MAX, 9.0, 1.0f);}/** * Attempts to create a property with invalid constructor arguments. *  * @param multiValue boolean * @return PropertyDescriptor */protected PropertyDescriptor createBadProperty(boolean multiValue) {return multiValue ?new DoubleMultiProperty("testDouble", "Test double property", MIN, MAX, new Double[] {MIN-SHIFT,MIN,MIN+SHIFT,MAX+SHIFT}, 1.0f) :new DoubleProperty("testDouble", "Test double property", MAX, MIN, 9.0, 1.0f) ;}    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(DoublePropertyTest.class);    }}
package net.sourceforge.pmd.properties;import static org.junit.Assert.assertArrayEquals;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertSame;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.cpd.ReportException;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import net.sourceforge.pmd.util.CollectionUtil;import net.sourceforge.pmd.util.NumericConstants;import org.junit.Before;import org.junit.Ignore;import org.junit.Test;/** * @author Brian Remedios */public class PropertyAccessorTest extends SimpleAggregatorTst {    private Rule rule;    @Before    public void setUp() {        rule = new NonRuleWithAllPropertyTypes();    }    @Test    public void testIntegers() {    rule.setProperty(NonRuleWithAllPropertyTypes.singleInt, NumericConstants.ZERO);        assertSame(rule.getProperty(NonRuleWithAllPropertyTypes.singleInt), 0);    rule.setProperty(NonRuleWithAllPropertyTypes.multiInt, new Integer[] {NumericConstants.ZERO, NumericConstants.ONE});        assertArrayEquals(rule.getProperty(NonRuleWithAllPropertyTypes.multiInt), new Integer[]{0, 1});    }    @Test    public void testBooleans() {    rule.setProperty(NonRuleWithAllPropertyTypes.singleBool, Boolean.FALSE);        assertFalse(rule.getProperty(NonRuleWithAllPropertyTypes.singleBool));    rule.setProperty(NonRuleWithAllPropertyTypes.multiBool, new Boolean[] {Boolean.TRUE, Boolean.FALSE});    assertArrayEquals(rule.getProperty(NonRuleWithAllPropertyTypes.multiBool), new Boolean[]{true, false});    }    @Ignore    @Test    public void testFloats() throws ReportException {/*    rule.setProperty("singleFloat", new Float(0));        assertTrue(rule.getFloatProperty("singleFloat") == 0f);    rule.setProperties("multiBool", new Boolean[] {Boolean.TRUE, Boolean.FALSE});        assertTrue(areEqual(rule.getBooleanProperties("multiBool"), new boolean[]{true, false}));        boolean exceptionOccurred = false;        try {        rule.setProperties("singleBool", new Boolean[] {Boolean.TRUE, Boolean.FALSE});        } catch (Exception ex) {        exceptionOccurred = true;        }        assertTrue(exceptionOccurred);        exceptionOccurred = false;        try {        rule.setProperty("multiBool", Boolean.TRUE);        } catch (Exception ex) {        exceptionOccurred = true;        }        assertTrue(exceptionOccurred);*/    }    @Test    public void testStrings() {    rule.setProperty(NonRuleWithAllPropertyTypes.singleStr, "brian");        assertEquals(rule.getProperty(NonRuleWithAllPropertyTypes.singleStr), "brian");    rule.setProperty(NonRuleWithAllPropertyTypes.multiStr, new String[] {"hello", "world"});    assertTrue(CollectionUtil.arraysAreEqual(rule.getProperty(NonRuleWithAllPropertyTypes.multiStr),  new String[] {"hello", "world"}));    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(PropertyAccessorTest.class);    }}
package net.sourceforge.pmd.properties;import java.util.ArrayList;import java.util.HashMap;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.lang.rule.properties.EnumeratedMultiProperty;import net.sourceforge.pmd.lang.rule.properties.EnumeratedProperty;/** * Evaluates the functionality of the EnumeratedProperty descriptor by testing its ability to catch creation * errors (illegal args), flag invalid selections, and serialize/deserialize selection options. *  * @author Brian Remedios */public class EnumeratedPropertyTest extends AbstractPropertyDescriptorTester {private static final String[] keys = new String[] {"map","emptyArray","list","string",};    private static final Object[] values = new Object[] {        new HashMap(),        new Object[0],        new ArrayList(),        "Hello World!",        };    public EnumeratedPropertyTest() {super();}/** * Method createValue. * @param count int * @return Object */protected Object createValue(int count) {if (count == 1) return randomChoice(values);Object[] values = new Object[count];for (int i=0; i<values.length; i++) values[i] = createValue(1);return values;}/** * Returns a (count) number of values that are not in the set of legal values. *  * @param count int * @return Object */protected Object createBadValue(int count) {if (count == 1) return Integer.toString(randomInt());// not in the set of valuesObject[] values = new Object[count];for (int i=0; i<values.length; i++) values[i] = createBadValue(1);return values;}/** * Method createProperty. * @param multiValue boolean * @return PropertyDescriptor */protected PropertyDescriptor createProperty(boolean multiValue) {return multiValue ?new EnumeratedMultiProperty<Object>("testEnumerations", "Test enumerations with complex types", keys, values, new int[] {0,1}, 1.0f) :new EnumeratedProperty<Object>("testEnumerations", "Test enumerations with complex types", keys, values, 0, 1.0f);}/** * Method createBadProperty. * @param multiValue boolean * @return PropertyDescriptor */protected PropertyDescriptor createBadProperty(boolean multiValue) {return multiValue ?new EnumeratedMultiProperty<Object>("testEnumerations", "Test enumerations with complex types", keys, new Object[0], new int[] {99}, 1.0f) :new EnumeratedProperty<Object>("testEnumerations", "Test enumerations with complex types", new String[0], values, -1, 1.0f);}    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(EnumeratedPropertyTest.class);    }}
package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.cpd.CPPTokenizer;import net.sourceforge.pmd.cpd.SourceCode;import net.sourceforge.pmd.cpd.Tokens;import org.junit.Test;public class CPPTokenizerTest {    @Test    public void testMultiLineMacros() throws Throwable {        CPPTokenizer tokenizer = new CPPTokenizer();        SourceCode code = new SourceCode(new SourceCode.StringCodeLoader(TEST1));        Tokens tokens = new Tokens();        tokenizer.tokenize(code, tokens);        assertEquals(7, tokens.size());    }    @Test    public void testDollarSignInIdentifier() {        parse(TEST2);    }    @Test    public void testDollarSignStartingIdentifier() {        parse(TEST3);    }    @Test    public void testWideCharacters() {        parse(TEST4);    }    private void parse(String snippet) {        CPPTokenizer tokenizer = new CPPTokenizer();        SourceCode code = new SourceCode(new SourceCode.StringCodeLoader(snippet));        Tokens tokens = new Tokens();        tokenizer.tokenize(code, tokens);    }    private static final String TEST1 =            "#define FOO a +\\" + PMD.EOL +            "            b +\\" + PMD.EOL +            "            c +\\" + PMD.EOL +            "            d +\\" + PMD.EOL +            "            e +\\" + PMD.EOL +            "            f +\\" + PMD.EOL +            "            g" + PMD.EOL +            " void main() {}";    private static final String TEST2 =            " void main() { int x$y = 42; }";    private static final String TEST3 =            " void main() { int $x = 42; }";    private static final String TEST4 =            " void main() { char x = L'a'; }";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(CPPTokenizerTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.cpd.*;import org.junit.Test;public class LanguageFactoryTest {    @Test    public void testSimple() {        LanguageFactory f = new LanguageFactory();        assertTrue(f.createLanguage("java") instanceof JavaLanguage);        assertTrue(f.createLanguage("cpp") instanceof CPPLanguage);        assertTrue(f.createLanguage("c") instanceof CPPLanguage);        assertTrue(f.createLanguage("php") instanceof PHPLanguage);        assertTrue(f.createLanguage("ruby") instanceof RubyLanguage);    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(LanguageFactoryTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.cpd.Match;import net.sourceforge.pmd.cpd.TokenEntry;import org.junit.Test;import java.util.Iterator;public class MatchTest {    @Test    public void testSimple() {        TokenEntry mark1 = new TokenEntry("public", "/var/Foo.java", 1);        TokenEntry mark2 = new TokenEntry("class", "/var/Foo.java", 1);        Match match = new Match(1, mark1, mark2);        match.setSourceCodeSlice("public class Foo {}");        assertEquals("public class Foo {}", match.getSourceCodeSlice());        match.setLineCount(10);        assertEquals(10, match.getLineCount());        assertEquals(1, match.getTokenCount());        Iterator i = match.iterator();        assertEquals(mark1, i.next());        assertEquals(mark2, i.next());        assertFalse(i.hasNext());    }    @Test    public void testCompareTo() {        Match m1 = new Match(1, new TokenEntry("public", "/var/Foo.java", 1), new TokenEntry("class", "/var/Foo.java", 1));        Match m2 = new Match(2, new TokenEntry("Foo", "/var/Foo.java", 1), new TokenEntry("{", "/var/Foo.java", 1));        assertTrue(m2.compareTo(m1) < 0);    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(MatchTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.cpd.JavaTokenizer;import net.sourceforge.pmd.cpd.SourceCode;import net.sourceforge.pmd.cpd.Tokens;import org.junit.Test;public class SourceCodeTest {    @Test    public void testSimple() throws Throwable {        JavaTokenizer tokenizer = new JavaTokenizer();        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(MatchAlgorithmTest.getSampleCode(), "Foo.java"));        assertEquals("Foo.java", sourceCode.getFileName());        tokenizer.tokenize(sourceCode, new Tokens());        assertEquals(MatchAlgorithmTest.LINE_1, sourceCode.getSlice(1, 1));        assertEquals(MatchAlgorithmTest.LINE_2, sourceCode.getSlice(2, 2));        assertEquals(MatchAlgorithmTest.LINE_1 + PMD.EOL + MatchAlgorithmTest.LINE_2, sourceCode.getSlice(1, 2));    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(SourceCodeTest.class);    }}
/*** BSD-style license; for more info see http://pmd.sourceforge.net/license.html*/package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.cpd.EcmascriptTokenizer;import net.sourceforge.pmd.cpd.SourceCode;import net.sourceforge.pmd.cpd.Tokenizer;import net.sourceforge.pmd.cpd.Tokens;import org.junit.Test;public class EcmascriptTokenizerTest {    @Test    public void test1() throws Throwable {        Tokenizer tokenizer = new EcmascriptTokenizer();        SourceCode sourceCode = new SourceCode( new SourceCode.StringCodeLoader( getCode1() ) );        Tokens tokens = new Tokens();        tokenizer.tokenize( sourceCode, tokens );        assertEquals( 22, tokens.size() );    }    @Test    public void test2() throws Throwable {        Tokenizer t = new EcmascriptTokenizer();        SourceCode sourceCode = new SourceCode( new SourceCode.StringCodeLoader( getCode2() ) );        Tokens tokens = new Tokens();        t.tokenize( sourceCode, tokens );        assertEquals( 22, tokens.size() );    }    // no semi-colons    private String getCode1() {        StringBuilder sb = new StringBuilder();        sb.append( "function switchToRealPassword() {" ).append(PMD.EOL);        sb.append( "   var real = $('realPass')" ).append(PMD.EOL);        sb.append( "   var prompt = $('promptPass')" ).append(PMD.EOL);        sb.append( "   real.style.display = 'inline'" ).append(PMD.EOL);        sb.append( "   prompt.style.display = 'none'" ).append(PMD.EOL);        sb.append( "   real.focus()" ).append(PMD.EOL);        sb.append( "}" ).append(PMD.EOL);        return sb.toString();    }    // same as getCode1, but lines are ended with semi-colons    private String getCode2() {        StringBuilder sb = new StringBuilder();        sb.append( "function switchToRealPassword() {" ).append(PMD.EOL);        sb.append( "   var real = $('realPass');" ).append(PMD.EOL);        sb.append( "   var prompt = $('promptPass');" ).append(PMD.EOL);        sb.append( "   real.style.display = 'inline';" ).append(PMD.EOL);        sb.append( "   prompt.style.display = 'none';" ).append(PMD.EOL);        sb.append( "   real.focus();" ).append(PMD.EOL);        sb.append( "}" ).append(PMD.EOL);        return sb.toString();    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter( EcmascriptTokenizerTest.class );    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.cpd.JavaTokenizer;import net.sourceforge.pmd.cpd.SourceCode;import net.sourceforge.pmd.cpd.Tokenizer;import net.sourceforge.pmd.cpd.Tokens;import org.junit.Test;public class JavaTokensTokenizerTest {    @Test    public void test1() throws Throwable {        Tokenizer tokenizer = new JavaTokenizer();        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader("public class Foo {}"));        Tokens tokens = new Tokens();        tokenizer.tokenize(sourceCode, tokens);        assertEquals(6, tokens.size());        assertEquals("public class Foo {}", sourceCode.getSlice(1, 1));    }    @Test    public void test2() throws Throwable {        Tokenizer t = new JavaTokenizer();        String data = "public class Foo {" + PMD.EOL + "public void bar() {}" + PMD.EOL + "public void buz() {}" + PMD.EOL + "}";        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(data));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        assertEquals("public class Foo {" + PMD.EOL + "public void bar() {}", sourceCode.getSlice(1, 2));    }    @Test    public void testDiscardSemicolons() throws Throwable {        Tokenizer t = new JavaTokenizer();        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader("public class Foo {private int x;}"));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        assertEquals(9, tokens.size());    }    @Test    public void testDiscardImports() throws Throwable {        Tokenizer t = new JavaTokenizer();        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader("import java.io.File;" + PMD.EOL + "public class Foo {}"));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        assertEquals(6, tokens.size());    }    @Test    public void testDiscardPkgStmts() throws Throwable {        Tokenizer t = new JavaTokenizer();        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader("package foo.bar.baz;" + PMD.EOL + "public class Foo {}"));        Tokens tokens = new Tokens();        t.tokenize(sourceCode, tokens);        assertEquals(6, tokens.size());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(JavaTokensTokenizerTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.cpd.FileReporter;import net.sourceforge.pmd.cpd.ReportException;import org.junit.Test;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;/** * @author Philippe T'Seyen */public class FileReporterTest {    @Test    public void testCreation() {        new FileReporter((String)null);        new FileReporter((File)null);    }    @Test    public void testEmptyReport() throws ReportException {        File reportFile = new File("report.tmp");        FileReporter fileReporter = new FileReporter(reportFile);        fileReporter.report("");        assertTrue(reportFile.exists());        assertEquals(0L, reportFile.length());        assertTrue(reportFile.delete());    }    @Test    public void testReport() throws ReportException, IOException {        String testString = "first line\nsecond line";        File reportFile = new File("report.tmp");        FileReporter fileReporter = new FileReporter(reportFile);        fileReporter.report(testString);        assertEquals(testString, readFile(reportFile));        assertTrue(reportFile.delete());    }    @Test(expected = ReportException.class)    public void testInvalidFile() throws ReportException {        File reportFile = new File("/invalid_folder/report.tmp");        FileReporter fileReporter = new FileReporter(reportFile);        fileReporter.report("");    }    private String readFile(File file) throws IOException {        BufferedReader reader = null;        try {            reader = new BufferedReader(new FileReader(file));            StringBuffer buffer = new StringBuffer();            String line = reader.readLine();            while (line != null) {                buffer.append(line);                line = reader.readLine();                if (line != null) {                    buffer.append('\n');                }            }            return buffer.toString();        } finally {            if (reader != null)                reader.close();        }    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(FileReporterTest.class);    }}
package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.cpd.AnyTokenizer;import net.sourceforge.pmd.cpd.SourceCode;import net.sourceforge.pmd.cpd.Tokens;import org.junit.Test;public class AnyTokenizerTest {    @Test    public void testMultiLineMacros() throws Throwable {        AnyTokenizer tokenizer = new AnyTokenizer();        SourceCode code = new SourceCode(new SourceCode.StringCodeLoader(TEST1));        Tokens tokens = new Tokens();        tokenizer.tokenize(code, tokens);        assertEquals(30, tokens.size());    }    private static final String TEST1 =            "using System;" + PMD.EOL +            "namespace HelloNameSpace {" + PMD.EOL +            "" + PMD.EOL +            "    public class HelloWorld {" + PMD.EOL +            "        static void Main(string[] args) {" + PMD.EOL +            "            Console.WriteLine(\"Hello World!\");" + PMD.EOL +            "        }" + PMD.EOL +            "    }" + PMD.EOL +            "}" + PMD.EOL;    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(AnyTokenizerTest.class);    }}
package net.sourceforge.pmd.cpd;import java.io.IOException;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.cpd.RubyTokenizer;import net.sourceforge.pmd.cpd.SourceCode;import net.sourceforge.pmd.testframework.AbstractTokenizerTest;import org.junit.Before;import org.junit.Test;public class RubyTokenizerTest extends AbstractTokenizerTest {@Before@Overridepublic void buildTokenizer() {this.tokenizer = new RubyTokenizer();this.sourceCode = new SourceCode(new SourceCode.StringCodeLoader(this.getSampleCode(), "server.rb"));}@Overridepublic String getSampleCode() { return "require \"socket\"" + PMD.EOL + "" + PMD.EOL + "gs = TCPServer.open(0)" + PMD.EOL + "addr = gs.addr" + PMD.EOL + "addr.shift" + PMD.EOL + "" + PMD.EOL + "while true" + PMD.EOL + "  ns = gs.accept" + PMD.EOL + "  print(ns, \" is accepted\")" + PMD.EOL + "  Thread.start do" + PMD.EOL + "    s = ns                      # save to dynamic variable" + PMD.EOL + "    while s.gets" + PMD.EOL + "      s.write($_)" + PMD.EOL + "    end" + PMD.EOL + "    print(s, \" is " + PMD.EOL + "               gone" + PMD.EOL + "                       and" + PMD.EOL + "                               dead\")" + PMD.EOL + "    s.close" + PMD.EOL + "  end" + PMD.EOL + "end" + PMD.EOL; }@Testpublic void tokenizeTest() throws IOException {this.expectedTokenCount = 30;super.tokenizeTest();}    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(RubyTokenizerTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.cpd.JavaTokenizer;import net.sourceforge.pmd.cpd.Match;import net.sourceforge.pmd.cpd.MatchAlgorithm;import net.sourceforge.pmd.cpd.SourceCode;import net.sourceforge.pmd.cpd.TokenEntry;import net.sourceforge.pmd.cpd.Tokens;import org.junit.Test;import java.util.HashMap;import java.util.Iterator;import java.util.Map;public class MatchAlgorithmTest {    public static final String LINE_1 = "public class Foo { ";    public static final String LINE_2 = " public void bar() {";    public static final String LINE_3 = "  System.out.println(\"hello\");";    public static final String LINE_4 = "  System.out.println(\"hello\");";    public static final String LINE_5 = "  int i = 5";    public static final String LINE_6 = "  System.out.print(\"hello\");";    public static final String LINE_7 = " }";    public static final String LINE_8 = "}";    public static String getSampleCode() {        return                LINE_1 + PMD.EOL +                LINE_2 + PMD.EOL +                LINE_3 + PMD.EOL +                LINE_4 + PMD.EOL +                LINE_5 + PMD.EOL +                LINE_6 + PMD.EOL +                LINE_7 + PMD.EOL +                LINE_8;    }    @Test    public void testSimple() throws Throwable {        JavaTokenizer tokenizer = new JavaTokenizer();        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(getSampleCode(), "Foo.java"));        Tokens tokens = new Tokens();        TokenEntry.clearImages();        tokenizer.tokenize(sourceCode, tokens);        assertEquals(41, tokens.size());        Map<String, SourceCode> codeMap = new HashMap<String, SourceCode>();        codeMap.put("Foo.java", sourceCode);        MatchAlgorithm matchAlgorithm = new MatchAlgorithm(codeMap, tokens, 5);        matchAlgorithm.findMatches();        Iterator matches = matchAlgorithm.matches();        Match match = (Match) matches.next();        assertFalse(matches.hasNext());        Iterator marks = match.iterator();        TokenEntry mark1 = (TokenEntry) marks.next();        TokenEntry mark2 = (TokenEntry) marks.next();        assertFalse(marks.hasNext());        assertEquals(3, mark1.getBeginLine());        assertEquals(4, mark2.getBeginLine());        assertTrue("Foo.java" == mark1.getTokenSrcID() && "Foo.java" == mark2.getTokenSrcID());        assertEquals(LINE_3, match.getSourceCodeSlice());    }    @Test    public void testIgnore() throws Throwable {        JavaTokenizer tokenizer = new JavaTokenizer();        tokenizer.setIgnoreLiterals(true);        tokenizer.setIgnoreIdentifiers(true);        SourceCode sourceCode = new SourceCode(new SourceCode.StringCodeLoader(getSampleCode(), "Foo.java"));        Tokens tokens = new Tokens();        TokenEntry.clearImages();        tokenizer.tokenize(sourceCode, tokens);        Map<String, SourceCode> codeMap = new HashMap<String, SourceCode>();        codeMap.put("Foo.java", sourceCode);        MatchAlgorithm matchAlgorithm = new MatchAlgorithm(codeMap, tokens, 5);        matchAlgorithm.findMatches();        Iterator matches = matchAlgorithm.matches();        Match match = (Match) matches.next();        assertFalse(matches.hasNext());        Iterator marks = match.iterator();        marks.next();        marks.next();        marks.next();        assertFalse(marks.hasNext());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(MatchAlgorithmTest.class);    }}
package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.cpd.TokenEntry;import org.junit.Test;public class TokenEntryTest  {    @Test    public void testSimple() {        TokenEntry.clearImages();        TokenEntry mark = new TokenEntry("public", "/var/Foo.java", 1);        assertEquals(1, mark.getBeginLine());        assertEquals("/var/Foo.java", mark.getTokenSrcID());        assertEquals(0, mark.getIndex());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(TokenEntryTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.cpd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import static org.junit.Assert.fail;import java.io.ByteArrayInputStream;import java.util.ArrayList;import java.util.List;import javax.xml.parsers.DocumentBuilderFactory;import org.junit.Test;import org.w3c.dom.Document;import org.w3c.dom.Node;import org.w3c.dom.NodeList;/** * @author Philippe T'Seyen * @author Romain Pelisse <belaran@gmail.com> *  */public class XMLRendererTest {private final static String ENCODING = (String) System.getProperties().get("file.encoding");    @Test    public void testWithNoDuplication() {        Renderer renderer = new XMLRenderer();        List<Match> list = new ArrayList<Match>();        String report = renderer.render(list.iterator());        try {            Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(report.getBytes(ENCODING)));            NodeList nodes = doc.getChildNodes();            Node n = nodes.item(0);            assertEquals("pmd-cpd", n.getNodeName());            assertEquals(0, doc.getElementsByTagName("duplication").getLength());        } catch (Exception e) {            e.printStackTrace();            fail(e.getMessage());        }    }    @Test    public void testWithOneDuplication() {        Renderer renderer = new XMLRenderer();        List<Match> list = new ArrayList<Match>();        Match match = new Match(75, new TokenEntry("public", "/var/Foo.java", 48), new TokenEntry("stuff", "/var/Foo.java", 73));        match.setLineCount(6);        match.setSourceCodeSlice("code fragment");        list.add(match);        String report = renderer.render(list.iterator());        System.out.println(report);        try {            Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(report.getBytes(ENCODING)));            NodeList dupes = doc.getElementsByTagName("duplication");            assertEquals(1, dupes.getLength());            Node file = dupes.item(0).getFirstChild();            while (file != null && file.getNodeType() != Node.ELEMENT_NODE) {                file = file.getNextSibling();            }            assertEquals("48", file.getAttributes().getNamedItem("line").getNodeValue());            assertEquals("/var/Foo.java", file.getAttributes().getNamedItem("path").getNodeValue());            file = file.getNextSibling();            while (file != null && file.getNodeType() != Node.ELEMENT_NODE) {                file = file.getNextSibling();            }            assertEquals("73", file.getAttributes().getNamedItem("line").getNodeValue());            assertEquals(1, doc.getElementsByTagName("codefragment").getLength());            assertEquals("code fragment", doc.getElementsByTagName("codefragment").item(0).getTextContent());        } catch (Exception e) {            e.printStackTrace();            fail(e.getMessage());        }    }    @Test    public void testRenderWithMultipleMatch() {        Renderer renderer = new XMLRenderer();        List<Match> list = new ArrayList<Match>();        Match match1 = new Match(75, new TokenEntry("public", "/var/Foo.java", 48), new TokenEntry("void", "/var/Foo.java", 73));        match1.setLineCount(6);        match1.setSourceCodeSlice("code fragment");        Match match2 = new Match(76, new TokenEntry("void", "/var/Foo2.java", 49), new TokenEntry("stuff", "/var/Foo2.java", 74));        match2.setLineCount(7);        match2.setSourceCodeSlice("code fragment 2");        list.add(match1);        list.add(match2);        String report = renderer.render(list.iterator());        try {            Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(report.getBytes(ENCODING)));            assertEquals(2, doc.getElementsByTagName("duplication").getLength());            assertEquals(4, doc.getElementsByTagName("file").getLength());        } catch (Exception e) {            e.printStackTrace();            fail(e.getMessage());        }    }    @Test    public void testRendererEncodedPath() {        Renderer renderer = new XMLRenderer();        List<Match> list = new ArrayList<Match>();        final String espaceChar = "&lt;";        Match match1 = new Match(75, new TokenEntry("public", "/var/F" + '<' + "oo.java", 48), new TokenEntry("void", "/var/F<oo.java", 73));        match1.setLineCount(6);        match1.setSourceCodeSlice("code fragment");        list.add(match1);        String report = renderer.render(list.iterator());        assertTrue(report.contains(espaceChar));    }         public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(XMLRendererTest.class);    }}
/** * */package net.sourceforge.pmd.cpd;import java.io.IOException;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.cpd.FortranTokenizer;import net.sourceforge.pmd.cpd.SourceCode;import net.sourceforge.pmd.testframework.AbstractTokenizerTest;import org.junit.Before;import org.junit.Test;/** * @author rpelisse * */public class FortranTokenizerTest extends AbstractTokenizerTest {@Before@Overridepublic void buildTokenizer() {this.tokenizer = new FortranTokenizer();this.sourceCode = new SourceCode(new SourceCode.StringCodeLoader(this.getSampleCode(), "sample.for"));}@Overridepublic String getSampleCode() { return "       options/extend_source" + PMD.EOL + "       program tp3" + PMD.EOL + "       implicit none" + PMD.EOL + "" + PMD.EOL + "! Ce programme va demander la saisie de la commande, puis on va separer les differentes" + PMD.EOL + "!parties de la chaine en plusieurs variables, ensuite selon l'action demandee on appelera le" + PMD.EOL + "!sous programme correspondant." + PMD.EOL + "" + PMD.EOL + "       character*60 COMMANDE" + PMD.EOL + "       integer*4 IOS," + PMD.EOL + "       1         COMPTEUR," + PMD.EOL + "       1         SORTIE," + PMD.EOL + "       1         ERRONE," + PMD.EOL + "       1         CONF," + PMD.EOL + "       1         POSITION_ESPACE," + PMD.EOL + "       1         DEBUT_MOT," + PMD.EOL + "       1         FIN_MOT," + PMD.EOL + "       1         NB_MOTS," + PMD.EOL + "       1         NB_MOTS_MAX," + PMD.EOL + "       1         FIN_CHAINE," + PMD.EOL + "       1         TROUVER_FIN," + PMD.EOL + "       1         NUM_CARACTERE," + PMD.EOL + "       1         ACTION," + PMD.EOL + "       1         PREMIERE_LETTRE," + PMD.EOL + "       1         DERNIERE_LETTRE," + PMD.EOL + "       1         INTERVALLE_MAJ_MIN," + PMD.EOL + "       1         APRES_MAJ," + PMD.EOL + "       1         TAILLE_COLONNE," + PMD.EOL + "       1         TAILLE_LIGNE," + PMD.EOL + "       1         LIGNES_DESC" + PMD.EOL + "" + PMD.EOL + "       parameter(NB_MOTS_MAX = 9) !une saisie correcte ne contient pas plus de 8 mots, si" + PMD.EOL + "!elle en contient 9, alors la saisie sera jugee incorrecte." + PMD.EOL + "       parameter(ERRONE = 1)" + PMD.EOL + "       parameter(SORTIE = - 1)" + PMD.EOL + "       parameter(ACTION = 1)  !il s'agit du 1er mot de la chaine de caracteres" + PMD.EOL + "       parameter(PREMIERE_LETTRE = 1)  !correspond a la 1ere lettre d'un mot" + PMD.EOL + "       parameter(DERNIERE_LETTRE = 18)  !correspond a la derniere lettre d'un mot" + PMD.EOL + "       parameter(INTERVALLE_MAJ_MIN = 32)  !nombre separant un meme caractere" + PMD.EOL + "!minuscule de son majuscule" + PMD.EOL + "       parameter(APRES_MAJ = 96)  !correspond au dernier caractere avant les MIN" + PMD.EOL + "       parameter(TAILLE_COLONNE = 7)" + PMD.EOL + "       parameter(TAILLE_LIGNE = 12)" + PMD.EOL + "       parameter(LIGNES_DESC = 11)" + PMD.EOL + "" + PMD.EOL + "        character*19 N(TAILLE_COLONNE,TAILLE_LIGNE)" + PMD.EOL + "       character*19 MOTS_COMMANDE(NB_MOTS_MAX)" + PMD.EOL + "       character*60 DESC(LIGNES_DESC)" + PMD.EOL + "" + PMD.EOL + "       write(*,*) ' '" + PMD.EOL + "       write(*,*) '      -----------------------------------------------------'" + PMD.EOL + "       write(*,*) '      | Bonjour, et bienvenue dans le programme DASHBOARD |'" + PMD.EOL + "       write(*,*) '      -----------------------------------------------------'" + PMD.EOL + "       write(*,*) ' '" + PMD.EOL + "       write(*,*) ' '" + PMD.EOL + "       write(*,*) ' Voici un rappel des fonctions disponibles pour ce DASHBOARD : '" + PMD.EOL + "       write(*,*) ' '" + PMD.EOL + "       write(*,*) '   _ TASK pour creer une tache (ex : TASK IDTACHE CIBLE AUTEUR)'" + PMD.EOL + "       write(*,*) ' '" + PMD.EOL + "       write(*,*) '   _ SHOW pour voir la description (ex : SHOW IDTACHE)'" + PMD.EOL + "       write(*,*) ' '" + PMD.EOL + "       write(*,*) '   _ REMOVE pour enlever une tache (ex : REMOVE IDTACHE)'" + PMD.EOL + "       write(*,*) ' '" + PMD.EOL + "       write(*,*) '   _ CLEAR pour effacer le DASHBOARD (ex : CLEAR)'" + PMD.EOL + "       write(*,*) ' '" + PMD.EOL + "       write(*,*) '   _ CANCEL, DONE, TODO pour modifier lHEREetat de la tache (ex : DONE IDTACHE)'" + PMD.EOL + "       write(*,*) ' '" + PMD.EOL + "" + PMD.EOL + "! La boucle de sortie pour quitter si l'on appuie sur F10" + PMD.EOL + "       do while (IOS .ne. SORTIE)" + PMD.EOL + "" + PMD.EOL + "! Initialisons les variables, afin de ne pas garder les anciennes valeurs pour chaque variable." + PMD.EOL + "               POSITION_ESPACE = 0" + PMD.EOL + "               DEBUT_MOT = 0" + PMD.EOL + "               FIN_MOT = 0" + PMD.EOL + "               NB_MOTS = 0" + PMD.EOL + "               FIN_CHAINE = 0" + PMD.EOL + "" + PMD.EOL + "! Initialisons aussi le tableau des MOTS_COMMANDE" + PMD.EOL + "               do COMPTEUR = ACTION, NB_MOTS_MAX" + PMD.EOL + "                       MOTS_COMMANDE (COMPTEUR) = ' '" + PMD.EOL + "               end do" + PMD.EOL + "" + PMD.EOL + "! Appelons le sous prgramme qui gere la saisie de la commande et aussi la sortie, si " + PMD.EOL + "!l'utilisateur le demande" + PMD.EOL + "               call SAISIE(COMMANDE, IOS)" + PMD.EOL + "" + PMD.EOL + "               if (IOS .eq. 0) then" + PMD.EOL + "" + PMD.EOL + "! Trouvons la fin de la chaine" + PMD.EOL + "                       FIN_CHAINE = TROUVER_FIN (COMMANDE)" + PMD.EOL + "                       COMPTEUR = 1" + PMD.EOL + "                       do while (POSITION_ESPACE .lt. FIN_CHAINE .and. NB_MOTS .lt. NB_MOTS_MAX)" + PMD.EOL + "                               DEBUT_MOT = POSITION_ESPACE + 1" + PMD.EOL + "" + PMD.EOL + "! Decoupons les mots" + PMD.EOL + "                               POSITION_ESPACE = POSITION_ESPACE + index (COMMANDE (DEBUT_MOT:), ' ')" + PMD.EOL + "                               FIN_MOT = POSITION_ESPACE - 1" + PMD.EOL + "" + PMD.EOL + "! Ensuite on les enregistre dans MOTS_COMMANDE" + PMD.EOL + "                               MOTS_COMMANDE (COMPTEUR) = COMMANDE (DEBUT_MOT : FIN_MOT)" + PMD.EOL + "" + PMD.EOL + "! Comptons les mots" + PMD.EOL + "                               if (MOTS_COMMANDE (COMPTEUR) .ne. ' ') then" + PMD.EOL + "                                       NB_MOTS = NB_MOTS + 1" + PMD.EOL + "                                       COMPTEUR = COMPTEUR + 1" + PMD.EOL + "                               end if" + PMD.EOL + "                       end do" + PMD.EOL + "" + PMD.EOL + "! Le programme ne doit pas tenir compte de la casse, ainsi peu importe la maniere" + PMD.EOL + "!dont est ecrit le mot, il sera mis en majuscule" + PMD.EOL + "                       do COMPTEUR = 1, NB_MOTS" + PMD.EOL + "                               do NUM_CARACTERE = PREMIERE_LETTRE, DERNIERE_LETTRE" + PMD.EOL + "                                       if (ichar(MOTS_COMMANDE (COMPTEUR)(NUM_CARACTERE:NUM_CARACTERE))" + PMD.EOL + "       1 .gt. APRES_MAJ) then" + PMD.EOL + "                                               MOTS_COMMANDE (COMPTEUR)(NUM_CARACTERE:NUM_CARACTERE) =" + PMD.EOL + "       1 char(ichar(MOTS_COMMANDE (COMPTEUR)(NUM_CARACTERE:NUM_CARACTERE)) - INTERVALLE_MAJ_MIN)" + PMD.EOL + "                                       end if" + PMD.EOL + "                               end do" + PMD.EOL + "                       end do" + PMD.EOL + "" + PMD.EOL + "!! Affichons les mots (provisoire)" + PMD.EOL + "!!                     do COMPTEUR = 1, NB_MOTS" + PMD.EOL + "!!                             write(*,*) COMPTEUR, ': ', MOTS_COMMANDE (COMPTEUR)" + PMD.EOL + "!!                     end do" + PMD.EOL + "!!" + PMD.EOL + "!! Testons si le mot est bien en majuscule (etape provisoire)" + PMD.EOL + "!!                     write(*,*) MOTS_COMMANDE (ACTION), ': voila lHEREaction'" + PMD.EOL + "" + PMD.EOL + "" + PMD.EOL + "! Si la commande contient plus de 8 mots, on demande de recommencer" + PMD.EOL + "" + PMD.EOL + "                       if (NB_MOTS .eq. NB_MOTS_MAX) then" + PMD.EOL + "                               write(*,*) ' '" + PMD.EOL + "                               write(*,*) 'ERR> Trop de mot, veuillez ressaisir'" + PMD.EOL + "                       else" + PMD.EOL + "" + PMD.EOL + "! Maintenant, en fonction du premier mot entre, on va appeler le sous programme correspondant" + PMD.EOL + "                               if (MOTS_COMMANDE (ACTION) .eq. 'TASK') then" + PMD.EOL + "                                       call TACHE(MOTS_COMMANDE, DESC, N)" + PMD.EOL + "                               else if (MOTS_COMMANDE (ACTION) .eq. 'SHOW') then" + PMD.EOL + "!                                      write(*,*) 'on appelle le sous prgrm SHOW'" + PMD.EOL + "                                       call SHOW(MOTS_COMMANDE, N)" + PMD.EOL + "                               else if (MOTS_COMMANDE (ACTION) .eq. 'REMOVE') then" + PMD.EOL + "!                                      write(*,*) 'on appelle le sous prgrm REMOVE'" + PMD.EOL + "                                       call REMOVE(MOTS_COMMANDE, DESC, N)" + PMD.EOL + "                               else if (MOTS_COMMANDE (ACTION) .eq. 'CLEAR') then" + PMD.EOL + "!                                      write(*,*) 'on appelle le sous prgrm CLEAR'" + PMD.EOL + "                                       call CLEAR(MOTS_COMMANDE, N)" + PMD.EOL + "                               else if (MOTS_COMMANDE (ACTION) .eq. 'CANCEL') then" + PMD.EOL + "!                                      write(*,*) 'on appelle le sous prgrm CANCEL'" + PMD.EOL + "                                       call CANCEL(MOTS_COMMANDE, N)" + PMD.EOL + "                               else if (MOTS_COMMANDE (ACTION) .eq. 'DONE') then" + PMD.EOL + "!                                      write(*,*) 'on appelle le sous prgrm DONE'" + PMD.EOL + "                                       call DONE(MOTS_COMMANDE, N)" + PMD.EOL + "                               else if (MOTS_COMMANDE (ACTION) .eq. 'TODO') then" + PMD.EOL + "!                                      write(*,*) 'on appelle le sous prgrm TODO'" + PMD.EOL + "                                       call TODO(MOTS_COMMANDE, N)" + PMD.EOL + "                               else" + PMD.EOL + "                                       write(*,*) ' '" + PMD.EOL + "                                       write(*,*) 'L''action suivante n''a pas ete'," + PMD.EOL + "       1 ' comprise: ', MOTS_COMMANDE (ACTION)" + PMD.EOL + "                               end if" + PMD.EOL + "                       end if" + PMD.EOL + "               end if" + PMD.EOL + "       end do" + PMD.EOL + "       end" + PMD.EOL; }@Testpublic void tokenizeTest() throws IOException {this.expectedTokenCount = 434;super.tokenizeTest();}    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(FortranTokenizerTest.class);    }}
package net.sourceforge.pmd.dfa;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.dfa.Structure;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;import org.junit.Test;public class StructureTest {    @Test    public void testAddResultsinDFANodeContainingAddedNode() {        Structure s = new Structure(Language.JAVA.getDefaultVersion().getLanguageVersionHandler().getDataFlowHandler());        Node n = new ASTMethodDeclaration(1);        assertEquals(n, s.createNewNode(n).getNode());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(StructureTest.class);    }}
package net.sourceforge.pmd.dfa;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.LinkedList;import net.sourceforge.pmd.lang.dfa.DataFlowNode;import net.sourceforge.pmd.lang.dfa.NodeType;import net.sourceforge.pmd.lang.dfa.StartOrEndDataFlowNode;import org.junit.Test;public class DataFlowNodeTest {    @Test    public void testAddPathToChild() {        DataFlowNode parent = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 10, false);        DataFlowNode child = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 12, false);        parent.addPathToChild(child);        assertEquals(parent.getChildren().size(), 1);        assertTrue(child.getParents().contains(parent));        assertTrue(parent.getChildren().contains(child));    }    @Test    public void testRemovePathToChild() {        DataFlowNode parent = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 10, false);        DataFlowNode child = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 12, false);        parent.addPathToChild(child);        assertTrue(parent.removePathToChild(child));        assertFalse(child.getParents().contains(parent));        assertFalse(parent.getChildren().contains(child));    }    @Test    public void testRemovePathWithNonChild() {        DataFlowNode parent = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 10, false);        DataFlowNode child = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 12, false);        assertFalse(parent.removePathToChild(child));    }    @Test    public void testReverseParentPathsTo() {        DataFlowNode parent1 = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 10, false);        DataFlowNode parent2 = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 12, false);        DataFlowNode child1 = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 13, false);        DataFlowNode child2 = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 13, false);        parent1.addPathToChild(child1);        parent2.addPathToChild(child1);        assertTrue(parent1.getChildren().contains(child1));        child1.reverseParentPathsTo(child2);        assertTrue(parent1.getChildren().contains(child2));        assertFalse(parent1.getChildren().contains(child1));        assertTrue(parent2.getChildren().contains(child2));        assertFalse(parent2.getChildren().contains(child1));        assertEquals(0, child1.getParents().size());        assertEquals(2, child2.getParents().size());    }    @Test    public void testSetType() {        DataFlowNode node = new StartOrEndDataFlowNode(new LinkedList<DataFlowNode>(), 10, false);        node.setType(NodeType.BREAK_STATEMENT);        assertTrue(node.isType(NodeType.BREAK_STATEMENT));        assertFalse(node.isType(NodeType.CASE_LAST_STATEMENT));    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(DataFlowNodeTest.class);    }}
package net.sourceforge.pmd.dfa;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.lang.dfa.VariableAccess;import org.junit.Test;public class VariableAccessTest {    @Test    public void testGetVariableName() {        VariableAccess va = new VariableAccess(VariableAccess.DEFINITION, "foo.bar");        assertEquals("foo", va.getVariableName());        va = new VariableAccess(VariableAccess.DEFINITION, ".foobar");        assertEquals("", va.getVariableName());        va = new VariableAccess(VariableAccess.DEFINITION, "foobar.");        assertEquals("foobar", va.getVariableName());        va = new VariableAccess(VariableAccess.DEFINITION, "foobar");        assertEquals("foobar", va.getVariableName());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(VariableAccessTest.class);    }}
package net.sourceforge.pmd.dfa;import org.junit.Test;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.dfa.pathfinder.CurrentPath;import net.sourceforge.pmd.lang.dfa.pathfinder.DAAPathFinder;import net.sourceforge.pmd.lang.dfa.pathfinder.Executable;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator;import net.sourceforge.pmd.testframework.ParserTst;public class DAAPathFinderTest extends ParserTst implements Executable {    @Test    public void testTwoUpdateDefs() throws Throwable {        ASTMethodDeclarator meth = getOrderedNodes(ASTMethodDeclarator.class, TWO_UPDATE_DEFS).get(0);        DAAPathFinder a = new DAAPathFinder(meth.getDataFlowNode().getFlow().get(0), this);//        a.run();    }    public void execute(CurrentPath path) {    }    private static final String TWO_UPDATE_DEFS =            "class Foo {" + PMD.EOL +            " void bar(int x) {" + PMD.EOL +            "  for (int i=0; i<10; i++, j--) {}" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(DAAPathFinderTest.class);    }}
package net.sourceforge.pmd.dfa;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.dfa.DataFlowNode;import net.sourceforge.pmd.lang.dfa.NodeType;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTExpression;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTStatementExpression;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;import net.sourceforge.pmd.lang.java.dfa.StatementAndBraceFinder;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;public class StatementAndBraceFinderTest extends ParserTst {    @Test    public void testStatementExpressionParentChildLinks() throws Throwable {        ASTStatementExpression se = getOrderedNodes(ASTStatementExpression.class, TEST1).get(0);        ASTMethodDeclaration seParent = (ASTMethodDeclaration) ((DataFlowNode) se.getDataFlowNode().getParents().get(0)).getNode();        assertEquals(se, ((DataFlowNode) seParent.getDataFlowNode().getChildren().get(0)).getNode());        assertEquals(seParent, ((DataFlowNode) se.getDataFlowNode().getParents().get(0)).getNode());    }    @Test    public void testVariableDeclaratorParentChildLinks() throws Throwable {        ASTVariableDeclarator vd = getOrderedNodes(ASTVariableDeclarator.class, TEST2).get(0);        ASTMethodDeclaration vdParent = (ASTMethodDeclaration) ((DataFlowNode) vd.getDataFlowNode().getParents().get(0)).getNode();        assertEquals(vd, ((DataFlowNode) vdParent.getDataFlowNode().getChildren().get(0)).getNode());        assertEquals(vdParent, ((DataFlowNode) vd.getDataFlowNode().getParents().get(0)).getNode());    }    @Test    public void testIfStmtHasCorrectTypes() throws Throwable {        ASTExpression exp = getOrderedNodes(ASTExpression.class, TEST3).get(0);        DataFlowNode dfn = exp.getDataFlowNode().getFlow().get(2);        assertTrue(dfn.isType(NodeType.IF_EXPR));        assertTrue(dfn.isType(NodeType.IF_LAST_STATEMENT_WITHOUT_ELSE));    }    @Test    public void testWhileStmtHasCorrectTypes() throws Throwable {        ASTExpression exp = getOrderedNodes(ASTExpression.class, TEST4).get(0);        DataFlowNode dfn = exp.getDataFlowNode().getFlow().get(2);        assertTrue(dfn.isType(NodeType.WHILE_EXPR));        assertTrue(dfn.isType(NodeType.WHILE_LAST_STATEMENT));    }    @Test    public void testForStmtHasCorrectTypes() throws Throwable {        ASTExpression exp = getOrderedNodes(ASTExpression.class, TEST5).get(0);        DataFlowNode dfn = exp.getDataFlowNode().getFlow().get(2);        assertTrue(dfn.isType(NodeType.FOR_INIT));        dfn = exp.getDataFlowNode().getFlow().get(3);        assertTrue(dfn.isType(NodeType.FOR_EXPR));        dfn = exp.getDataFlowNode().getFlow().get(4);        assertTrue(dfn.isType(NodeType.FOR_UPDATE));        assertTrue(dfn.isType(NodeType.FOR_BEFORE_FIRST_STATEMENT));        assertTrue(dfn.isType(NodeType.FOR_END));    }    @Test(expected = RuntimeException.class)    public void testOnlyWorksForMethodsAndConstructors() {        StatementAndBraceFinder sbf = new StatementAndBraceFinder(Language.JAVA.getDefaultVersion().getLanguageVersionHandler().getDataFlowHandler());        sbf.buildDataFlowFor(new ASTMethodDeclaration(1));        sbf.buildDataFlowFor(new ASTConstructorDeclaration(1));        sbf.buildDataFlowFor(new ASTCompilationUnit(1));    }    private static final String TEST1 =            "class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  x = 2;" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String TEST2 =            "class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  int x;" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String TEST3 =            "class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  if (x) {}" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String TEST4 =            "class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  while (x) {}" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String TEST5 =            "class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  for (int i=0; i<10; i++) {}" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(StatementAndBraceFinderTest.class);    }}
package net.sourceforge.pmd.dfa;import java.util.Iterator;import java.util.List;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.dfa.DataFlowNode;import net.sourceforge.pmd.lang.dfa.VariableAccess;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;public class GeneralFiddlingTest extends ParserTst {    @Test    public void test1() throws Throwable {        ASTCompilationUnit acu = buildDFA(TEST1);        ASTMethodDeclarator meth = acu.findDescendantsOfType(ASTMethodDeclarator.class).get(0);        DataFlowNode n = meth.getDataFlowNode();        List f = n.getFlow();        for (Iterator i = f.iterator(); i.hasNext();) {            DataFlowNode dfan = (DataFlowNode) i.next();            System.out.println(dfan);            List va = dfan.getVariableAccess();            for (Iterator j = va.iterator(); j.hasNext();) {                VariableAccess o = (VariableAccess) j.next();                System.out.println(o);            }        }    }    private static final String TEST1 =            "class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  int x = 2;" + PMD.EOL +            "  foo(x);" + PMD.EOL +            "  x = 3;" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(GeneralFiddlingTest.class);    }}
/* * Created on 18.08.2004 */package net.sourceforge.pmd.dfa;import static org.junit.Assert.assertTrue;import java.util.List;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.dfa.DataFlowNode;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;public class AcceptanceTest extends ParserTst {    @Test    public void testbook() throws Throwable {        getOrderedNodes(ASTMethodDeclarator.class, FOO);    }    private static final String FOO =            "class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  int x = 2;" + PMD.EOL +            " }" + PMD.EOL +            "}";    @Test    public void testLabelledBreakLockup() throws Throwable {        getOrderedNodes(ASTMethodDeclarator.class, LABELLED_BREAK_LOCKUP);    }    private static final String LABELLED_BREAK_LOCKUP =            "class Foo {" + PMD.EOL +            " void bar(int x) {" + PMD.EOL +            "  here: if (x>2) {" + PMD.EOL +            "   break here;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            "}";    private boolean check(int[][] array, List methodNodes) {        for (int i = 0; i < methodNodes.size(); i++) {            ASTMethodDeclarator decl = (ASTMethodDeclarator) methodNodes.get(i);            DataFlowNode inode = decl.getDataFlowNode();            for (int j = 0; j < inode.getChildren().size(); j++) {        DataFlowNode child = inode.getChildren().get(j);                if (array[i][j] != child.getIndex() - 1) {                    return false;                }            }        }        return true;    }    @Test    public void test_1() throws Throwable {        assertTrue(check(TEST1_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST1)));    }    @Test    public void test_2() throws Throwable {        assertTrue(check(TEST2_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST2)));    }    @Test    public void test_3() throws Throwable {        assertTrue(check(TEST3_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST3)));    }    @Test    public void test_4() throws Throwable {        assertTrue(check(TEST4_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST4)));    }    @Test    public void test_6() throws Throwable {        assertTrue(check(TEST5_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST6)));    }    @Test    public void test_7() throws Throwable {        assertTrue(check(TEST5_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST7)));    }    @Test    public void test_8() throws Throwable {        assertTrue(check(TEST8_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST8)));    }    @Test    public void test_9() throws Throwable {        assertTrue(check(TEST5_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST9)));    }    @Test    public void test_10() throws Throwable {        assertTrue(check(TEST8_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST10)));    }    @Test    public void test_11() throws Throwable {        assertTrue(check(TEST8_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST11)));    }    @Test    public void test_12() throws Throwable {        assertTrue(check(TEST12_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST12)));    }    @Test    public void test_13() throws Throwable {        assertTrue(check(TEST13_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST13)));    }    @Test    public void test_14() throws Throwable {        assertTrue(check(TEST14_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST14)));    }    @Test    public void test_15() throws Throwable {        assertTrue(check(TEST15_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST15)));    }    @Test    public void test_16() throws Throwable {        assertTrue(check(TEST16_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST16)));    }    @Test    public void test_17() throws Throwable {        assertTrue(check(TEST17_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST17)));    }    @Test    public void test_18() throws Throwable {        assertTrue(check(TEST18_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST18)));    }    @Test    public void test_19() throws Throwable {        assertTrue(check(TEST19_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST19)));    }    @Test    public void test_20() throws Throwable {        assertTrue(check(TEST20_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST20)));    }    @Test    public void test_21() throws Throwable {        assertTrue(check(TEST21_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST21)));    }    @Test    public void test_22() throws Throwable {        assertTrue(check(TEST22_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST22)));    }    @Test    public void test_23() throws Throwable {        assertTrue(check(TEST23_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST23)));    }    @Test    public void test_24() throws Throwable {        assertTrue(check(TEST24_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST24)));    }    @Test    public void test_25() throws Throwable {        assertTrue(check(TEST25_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST25)));    }    @Test    public void test_26() throws Throwable {        assertTrue(check(TEST26_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST26)));    }    @Test    public void test_27() throws Throwable {        assertTrue(check(TEST27_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST27)));    }    @Test    public void test_28() throws Throwable {        assertTrue(check(TEST28_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST28)));    }    @Test    public void test_29() throws Throwable {        assertTrue(check(TEST29_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST29)));    }    @Test    public void test_30() throws Throwable {        assertTrue(check(TEST30_NODES, getOrderedNodes(ASTMethodDeclarator.class, TEST30)));    }    //  first dimension: the index of a node    //  second dimension: the indices of the children    private static final int[][] TEST1_NODES = {        {1},        {2},        {3},        {4, 6},        {5},        {6},        {}    };    private static final String TEST1 =            "class Foo {" + PMD.EOL +            " void test_1() {" + PMD.EOL +            "  int x = 0;" + PMD.EOL +            "  if (x == 0) {" + PMD.EOL +            "   x++;" + PMD.EOL +            "   x = 0;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST2_NODES = {        {1},        {2},        {3},        {5, 7},        {3},        {6},        {4},        {}    };    private static final String TEST2 =            "class Foo {" + PMD.EOL +            " public void test_2() {" + PMD.EOL +            "  for (int i = 0; i < 1; i++) {" + PMD.EOL +            "   i++;" + PMD.EOL +            "   i = 8;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST3_NODES = {        {1},        {2},        {3},        {4, 5},        {3},        {}    };    private static final String TEST3 =            "public class Foo {" + PMD.EOL +            " public void test_3() {" + PMD.EOL +            "  for (int i = 0; i < 1; i++) {" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST4_NODES = {        {1},        {2},        {3},        {}    };    private static final String TEST4 =            "public class Foo {" + PMD.EOL +            " public void test_4() {" + PMD.EOL +            "  for (; ;) {" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST5_NODES = {        {1},        {2},        {3},        {4},        {}    };    private static final String TEST6 =            "public class Foo {" + PMD.EOL +            " public void test_6() {" + PMD.EOL +            "  for (int i = 0; ;) {" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final String TEST7 =            "public class Foo {" + PMD.EOL +            " public void test_7() {" + PMD.EOL +            "  for (int i = 0; i < 0;) {" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST8_NODES = {        {1},        {2},        {3},        {4, 5},        {3},        {}    };    public static final String TEST8 =            "public class Foo {" + PMD.EOL +            " public void test_8() {" + PMD.EOL +            "  for (int i = 0; ; i++) {" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    public static final String TEST9 =            "public class Foo {" + PMD.EOL +            " public void test_9() {" + PMD.EOL +            "  int i = 0;" + PMD.EOL +            "  for (; i < 0;) {" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    public static final String TEST10 =            "public class Foo {" + PMD.EOL +            " public void test_10() {" + PMD.EOL +            "  int i = 0;" + PMD.EOL +            "  for (; i < 0; i++) {" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    public static final String TEST11 =            "public class Foo {" + PMD.EOL +            " public void test_11() {" + PMD.EOL +            "  int i = 0;" + PMD.EOL +            "  for (; ; i++) {" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST12_NODES = {        {1},        {2},        {3},        {4, 5},        {3},        {}    };    public static final String TEST12 =            "public class Foo {" + PMD.EOL +            " public void test_12() {" + PMD.EOL +            "  for (; ;) {" + PMD.EOL +            "   int i = 0;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST13_NODES = {        {1},        {2},        {3},        {5, 9},        {3},        {6},        {7, 8},        {8},        {4},        {}    };    public static final String TEST13 =            "public class Foo {" + PMD.EOL +            " public void test_13() {" + PMD.EOL +            "  for (int i = 0; i < 0; i++) {" + PMD.EOL +            "   i = 9;" + PMD.EOL +            "   if (i < 8) {" + PMD.EOL +            "    i = 7;" + PMD.EOL +            "   }" + PMD.EOL +            "   i = 6;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST14_NODES = {        {1},        {2},        {3},        {5, 8},        {3},        {6},        {7, 4},        {4},        {}    };    public static final String TEST14 =            "public class Foo {" + PMD.EOL +            " public void test_14() {" + PMD.EOL +            "  for (int i = 0; i < 0; i++) {" + PMD.EOL +            "   i = 9;" + PMD.EOL +            "   if (i < 8) {" + PMD.EOL +            "    i = 7;" + PMD.EOL +            "   }" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST15_NODES = {        {1},        {2},        {3},        {5, 7},        {3},        {6, 4},        {4},        {}    };    public static final String TEST15 =            "public class Foo {" + PMD.EOL +            " public void test_15() {" + PMD.EOL +            "  for (int i = 0; i < 0; i++) {" + PMD.EOL +            "   if (i < 8) {" + PMD.EOL +            "    i = 7;" + PMD.EOL +            "   }" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST16_NODES = {        {1},        {2},        {3},        {5, 8},        {3},        {6, 7},        {4},        {4},        {}    };    public static final String TEST16 =            "public class Foo {" + PMD.EOL +            " public void test_16() {" + PMD.EOL +            "  for (int i = 0; i < 0; i++) {" + PMD.EOL +            "   if (i < 8) {" + PMD.EOL +            "    i = 7;" + PMD.EOL +            "   } else {" + PMD.EOL +            "    i = 6;" + PMD.EOL +            "   }" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST17_NODES = {        {1},        {2},        {3},        {5, 10},        {3},        {6, 7},        {4},        {8, 9},        {4},        {4},        {}    };    public static final String TEST17 =            "public class Foo {" + PMD.EOL +            " public void test_17() {" + PMD.EOL +            "  for (int i = 0; i < 0; i++) {" + PMD.EOL +            "   if (i < 6) {" + PMD.EOL +            "    i = 7;" + PMD.EOL +            "   } else if (i > 8) {" + PMD.EOL +            "    i = 9;" + PMD.EOL +            "   } else {" + PMD.EOL +            "    i = 10;" + PMD.EOL +            "   }" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST18_NODES = {        {1},        {2},        {3},        {5, 9},        {3},        {6},        {8, 4},        {6},        {7},        {}    };    public static final String TEST18 =            "public class Foo {" + PMD.EOL +            " public void test_18() {" + PMD.EOL +            "  for (int i = 0; i < 0; i++) {" + PMD.EOL +            "   for (int j = 0; j < 0; j++) {" + PMD.EOL +            "    j++;" + PMD.EOL +            "   }" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST19_NODES = {        {1},        {2},        {3},        {4, 5},        {10},        {6, 7},        {10},        {8, 9},        {10},        {10},        {}    };    public static final String TEST19 =            "public class Foo {" + PMD.EOL +            " public void test_19() {" + PMD.EOL +            "  int i = 0;" + PMD.EOL +            "  if (i == 1) {" + PMD.EOL +            "   i = 2;" + PMD.EOL +            "  } else if (i == 3) {" + PMD.EOL +            "   i = 4;" + PMD.EOL +            "  } else if (i == 5) {" + PMD.EOL +            "   i = 6;" + PMD.EOL +            "  } else {" + PMD.EOL +            "   i = 7;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST20_NODES = {        {1},        {2},        {3},        {4, 6},        {5, 7},        {7},        {7},        {}    };    public static final String TEST20 =            "public class Foo {" + PMD.EOL +            " public void test_20() {" + PMD.EOL +            "  int i = 0;" + PMD.EOL +            "  if (i == 1) {" + PMD.EOL +            "   if (i == 2) {" + PMD.EOL +            "    i = 3;" + PMD.EOL +            "   }" + PMD.EOL +            "  } else {" + PMD.EOL +            "   i = 7;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST21_NODES = {        {1},        {2},        {3},        {4, 9},        {5},        {7, 8},        {5},        {6},        {11},        {10, 11},        {11},        {}    };    public static final String TEST21 =            "public class Foo {" + PMD.EOL +            " public void test_21() {" + PMD.EOL +            "  int i = 0;" + PMD.EOL +            "  if (i == 1) {" + PMD.EOL +            "   for (i = 3; i < 4; i++) {" + PMD.EOL +            "    i = 5;" + PMD.EOL +            "   }" + PMD.EOL +            "   i++;" + PMD.EOL +            "  } else if (i < 6) {" + PMD.EOL +            "   i = 7;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST22_NODES = {        {1},        {2},        {3},        {4, 8},        {5},        {7, 9},        {5},        {6},        {9},        {}    };    public static final String TEST22 =            "public class Foo {" + PMD.EOL +            " public void test_22() {" + PMD.EOL +            "  int i = 0;" + PMD.EOL +            "  if (i == 1) {" + PMD.EOL +            "   for (i = 3; i < 4; i++) {" + PMD.EOL +            "    i = 5;" + PMD.EOL +            "   }" + PMD.EOL +            "  } else {" + PMD.EOL +            "   i = 7;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST23_NODES = {        {1},        {2},        {3},        {4, 8},        {5},        {7, 10},        {5},        {6},        {9, 10},        {10},        {}    };    public static final String TEST23 =            "public class Foo {" + PMD.EOL +            " public void test_23() {" + PMD.EOL +            "  int i = 0;" + PMD.EOL +            "  if (i == 1) {" + PMD.EOL +            "   for (i = 3; i < 4; i++) {" + PMD.EOL +            "    i = 5;" + PMD.EOL +            "   }" + PMD.EOL +            "  } else if (i < 6) {" + PMD.EOL +            "   i = 7;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST24_NODES = {        {1},        {2},        {3},        {4, 9},        {5},        {7, 11},        {5},        {8, 6},        {6},        {10, 11},        {11},        {}    };    public static final String TEST24 =            "public class Foo {" + PMD.EOL +            " public void test_24() {" + PMD.EOL +            "  int x = 0;" + PMD.EOL +            "  if (x > 2) {" + PMD.EOL +            "   for (int i = 0; i < 1; i++) {" + PMD.EOL +            "    if (x > 3) {" + PMD.EOL +            "     x++;" + PMD.EOL +            "    }" + PMD.EOL +            "   }" + PMD.EOL +            "  } else if (x > 4) {" + PMD.EOL +            "   x++;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST25_NODES = {        {1},        {2},        {3},        {4, 5},        {5},        {}    };    public static final String TEST25 =            "public class Foo {" + PMD.EOL +            " public void test_25() {" + PMD.EOL +            "  int x = 0;" + PMD.EOL +            "  switch (x) {" + PMD.EOL +            "   default:" + PMD.EOL +            "    x = 9;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST26_NODES = {        {1},        {2},        {3},        {4},        {5, 6},        {6},        {7},        {8, 3},        {9},        {}    };    public static final String TEST26 =            "public class Foo {" + PMD.EOL +            " public void test_26() {" + PMD.EOL +            "  int x = 0;" + PMD.EOL +            "  do {" + PMD.EOL +            "   if (x > 0) {" + PMD.EOL +            "    x++;" + PMD.EOL +            "   }" + PMD.EOL +            "   x++;" + PMD.EOL +            "  } while (x < 9);" + PMD.EOL +            "  x++;" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST27_NODES = {        {1},        {2},        {3},        {5, 9},        {3},        {6},        {7},        {8},        {6, 4},        {}    };    public static final String TEST27 =            "public class Foo {" + PMD.EOL +            " public void test_27() {" + PMD.EOL +            "  for (int i = 0; i < 36; i++) {" + PMD.EOL +            "   int x = 0;" + PMD.EOL +            "   do {" + PMD.EOL +            "    x++;" + PMD.EOL +            "   } while (x < 9);" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST28_NODES = {        {1},        {2},        {3},        {5, 14},        {3},        {6},        {7},        {8, 12},        {9},        {10, 12},        {11},        {12},        {13},        {6, 4},        {}    };    public static final String TEST28 =            "public class Foo {" + PMD.EOL +            " private void test_28() {" + PMD.EOL +            "  for (int i = 0; i < 36; i++) {" + PMD.EOL +            "   int x = 0;" + PMD.EOL +            "   do {" + PMD.EOL +            "    if (x > 0) {" + PMD.EOL +            "     x++;" + PMD.EOL +            "     switch (i) {" + PMD.EOL +            "      case 0:" + PMD.EOL +            "       x = 0;" + PMD.EOL +            "       break;" + PMD.EOL +            "     }" + PMD.EOL +            "    }" + PMD.EOL +            "    x++;" + PMD.EOL +            "   } while (x < 9);" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            " }";    private static final int[][] TEST29_NODES = {        {1},        {2},        {3, 4, 5},        {6},        {6},        {6},        {}    };    public static final String TEST29 =            "public class Foo {" + PMD.EOL +            " private void test_29() {" + PMD.EOL +            "  switch(x) {" + PMD.EOL +            "   case 1:" + PMD.EOL +            "    break; " + PMD.EOL +            "   default: " + PMD.EOL +            "    break;" + PMD.EOL +            "   case 2:" + PMD.EOL +            "    break;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final int[][] TEST30_NODES = {        {1},        {2},        {3},        {4, 7},        {5, 6},        {4},        {3},        {}    };    public static final String TEST30 =            "public class Foo {" + PMD.EOL +            " private void test_30() {" + PMD.EOL +            "  int x = 0;" + PMD.EOL +            "  while (true) {" + PMD.EOL +            "   while (x>0) {" + PMD.EOL +            "     x++;" + PMD.EOL +            "   }" + PMD.EOL +            "   continue;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(AcceptanceTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ant;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNull;import net.sourceforge.pmd.ant.Version;import org.junit.Test;public class VersionTest {    @Test    public void testHappyPath() {Version version = new Version();assertNull("default", version.getTerseName());version.addText("terseName");assertEquals("set terse name", "terseName", version.getTerseName());    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(VersionTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ant;import org.apache.tools.ant.BuildFileTest;import org.junit.Test;public class PMDTaskTest extends BuildFileTest {    @Override    public void setUp() {        // initialize Ant            configureProject("target/test-classes/net/sourceforge/pmd/ant/xml/pmdtasktest.xml");        if (!project.getBaseDir().toString().endsWith("pmd/ant/xml")) {            // when running from maven, the path needs to be adapted...            // FIXME: this is more a workaround than a good solution...            project.setBasedir(project.getBaseDir().toString()            + "/target/test-classes/net/sourceforge/pmd/ant/xml");        }    }    @Test    public void testNoFormattersValidation() {        executeTarget("testNoFormattersValidation");        assertOutputContaining("Fields should be declared at the top of the class");    }    @Test    public void testFormatterWithNoToFileAttribute() {        expectBuildExceptionContaining("testFormatterWithNoToFileAttribute", "Valid Error Message", "toFile or toConsole needs to be specified in Formatter");    }    @Test    public void testNoRuleSets() {        expectBuildExceptionContaining("testNoRuleSets", "Valid Error Message", "No rulesets specified");    }    @Test    public void testNestedRuleset() {        executeTarget("testNestedRuleset");        assertOutputContaining("Avoid really long methods");        assertOutputContaining("Deeply nested if");    }    @Test    public void testFormatterWithProperties() {        executeTarget("testFormatterWithProperties");        assertOutputContaining("Avoid really long methods");        assertOutputContaining("Deeply nested if");        assertOutputContaining("link_prefix");        assertOutputContaining("line_prefix");    }    @Test    public void testAbstractNames() {        executeTarget("testAbstractNames");        assertOutputContaining("Avoid really long methods");        assertOutputContaining("Deeply nested if");    }    @Test    public void testAbstractNamesInNestedRuleset() {        executeTarget("testAbstractNamesInNestedRuleset");        assertOutputContaining("Avoid really long methods");        assertOutputContaining("Deeply nested if");    }    @Test    public void testCommaInRulesetfiles() {        executeTarget("testCommaInRulesetfiles");        assertOutputContaining("Avoid really long methods");        assertOutputContaining("Deeply nested if");    }    @Test    public void testRelativeRulesets() {        executeTarget("testRelativeRulesets");        assertOutputContaining("Avoid really long methods");        assertOutputContaining("Deeply nested if");    }    @Test    public void testRelativeRulesetsInRulesetfiles() {        executeTarget("testRelativeRulesetsInRulesetfiles");        assertOutputContaining("Avoid really long methods");        assertOutputContaining("Deeply nested if");    }    @Test    public void testBasic() {        executeTarget("testBasic");    }    @Test    public void testInvalidLanguageVersion() {        expectBuildExceptionContaining("testInvalidLanguageVersion", "Fail requested.", "The <version> element, if used, must be one of 'java 1.3', 'java 1.4', 'java 1.5', 'java 1.6', 'java 1.7'.");    }        @Test    public void testExplicitRuleInRuleSet() {        executeTarget("testExplicitRuleInRuleSet");        assertOutputContaining("Avoid really long methods");    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(PMDTaskTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ant;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.ant.Formatter;import org.junit.Ignore;import org.junit.Test;import java.io.File;public class FormatterTest {    @Ignore    @Test    public void testType() {/*        Formatter f = new Formatter();        f.setType("xml");        assertTrue(f.getRenderer() instanceof XMLRenderer);        f.setType("text");        assertTrue(f.getRenderer() instanceof TextRenderer);        f.setType("csv");        assertTrue(f.getRenderer() instanceof CSVRenderer);        f.setType("html");        assertTrue(f.getRenderer() instanceof HTMLRenderer);        try {            f.setType("FAIL");            f.getRenderer();            throw new RuntimeException("Should have failed!");        } catch (BuildException be) {            // cool        }*/    }    @Test    public void testNull() {        Formatter f = new Formatter();        assertTrue("Formatter toFile should start off null!", f.isNoOutputSupplied());        f.setToFile(new File("foo"));        assertFalse("Formatter toFile should not be null!", f.isNoOutputSupplied());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(FormatterTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.jaxen;import net.sourceforge.pmd.lang.ast.xpath.AttributeAxisIterator;import net.sourceforge.pmd.lang.java.ast.DummyJavaNode;import org.junit.Test;public class AttributeAxisIteratorTest {    @Test(expected = UnsupportedOperationException.class)    public void testRemove() {DummyJavaNode n = new DummyJavaNode(0);        n.testingOnly__setBeginColumn(1);        n.testingOnly__setBeginLine(1);        AttributeAxisIterator iter = new AttributeAxisIterator(n);        iter.remove();    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(AttributeAxisIteratorTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.jaxen;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.lang.ast.xpath.Attribute;import net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix;import org.junit.Test;import java.lang.reflect.Method;public class AttributeTest{    @Test    public void testConstructor() {        ASTPrimaryPrefix p = new ASTPrimaryPrefix(1);        p.testingOnly__setBeginLine(5);        Method[] methods = p.getClass().getMethods();        Method m = null;        for (int i = 0; i < methods.length; i++) {            if (methods[i].getName().equals("getBeginLine")) {                m = methods[i];                break;            }        }        Attribute a = new Attribute(p, "BeginLine", m);        assertEquals("BeginLine", a.getName());        assertEquals(5, a.getValue());        assertEquals("5", a.getStringValue());        assertEquals(p, a.getParent());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(AttributeTest.class);    }}
package net.sourceforge.pmd.jaxen; import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.rule.XPathRule;import net.sourceforge.pmd.testframework.SimpleAggregatorTst;import net.sourceforge.pmd.testframework.TestDescriptor;import org.junit.Test; public class RegexpAcceptanceTest extends SimpleAggregatorTst {private static final String xPath = "//ClassOrInterfaceDeclaration[matches(@Image, 'F?o')]";     @Test     public void testSimple() throws Throwable {         Rule r = new XPathRule(xPath);         r.setLanguage(Language.JAVA);         r.setMessage("");         TestDescriptor[] testDescriptors = extractTestsFromXml(r, "RegexpAcceptance");         for (TestDescriptor testDescriptor: testDescriptors) {             testDescriptor.setReinitializeRule(false);         }         runTests(testDescriptors);     }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(RegexpAcceptanceTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.jaxen;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertSame;import static org.junit.Assert.fail;import java.util.Iterator;import java.util.List;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.ast.xpath.DocumentNavigator;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression;import net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix;import net.sourceforge.pmd.lang.java.ast.ASTStatement;import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;import net.sourceforge.pmd.testframework.RuleTst;import org.jaxen.BaseXPath;import org.jaxen.JaxenException;import org.jaxen.UnsupportedAxisException;import org.junit.Before;import org.junit.Test;public class DocumentNavigatorTest extends RuleTst {    private TestRule rule;    private class TestRule extends AbstractJavaRule {        private Node compilationUnit;        private Node importDeclaration;        private Node statement;        private Node primaryPrefix;        private Node primaryExpression;        /**         * @see net.sourceforge.pmd.lang.java.ast.JavaParserVisitor#visit(ASTCompilationUnit, Object)         */        public Object visit(ASTCompilationUnit node, Object data) {            this.compilationUnit = node;            return super.visit(node, data);        }        public Object visit(ASTImportDeclaration node, Object data) {            this.importDeclaration = node;            return super.visit(node, data);        }        public Object visit(ASTStatement node, Object data) {            this.statement = node;            return super.visit(node, data);        }        public Object visit(ASTPrimaryPrefix node, Object data) {            this.primaryPrefix = node;            return super.visit(node, data);        }        public Object visit(ASTPrimaryExpression node, Object data) {            this.primaryExpression = node;            return super.visit(node, data);        }    }    @Before     public void setUp() throws Exception {        try {            rule = new TestRule();            runTestFromString(TEST, rule, new Report());        } catch (Throwable xx) {            xx.printStackTrace();            fail();        }    }    @Test    public void testChildAxisIterator() {        DocumentNavigator nav = new DocumentNavigator();        Iterator iter = nav.getChildAxisIterator(rule.compilationUnit);        assertSame(rule.compilationUnit.jjtGetChild(0), iter.next());        assertSame(rule.compilationUnit.jjtGetChild(1), iter.next());        assertFalse(iter.hasNext());    }    @Test    public void testParentAxisIterator() {        DocumentNavigator nav = new DocumentNavigator();        Iterator iter = nav.getParentAxisIterator(rule.importDeclaration);        assertSame(rule.importDeclaration.jjtGetParent(), iter.next());        assertFalse(iter.hasNext());    }    @Test    public void testParentAxisIterator2() {        DocumentNavigator nav = new DocumentNavigator();        Iterator iter = nav.getParentAxisIterator(rule.compilationUnit);        assertFalse(iter.hasNext());    }    @Test    public void testDescendantAxisIterator() throws UnsupportedAxisException {        DocumentNavigator nav = new DocumentNavigator();        Iterator iter = nav.getDescendantAxisIterator(rule.statement);        Node statementExpression = rule.statement.jjtGetChild(0);        assertSame(statementExpression, iter.next());        Node primaryExpression = statementExpression.jjtGetChild(0);        assertSame(primaryExpression, iter.next());        Node primaryPrefix = primaryExpression.jjtGetChild(0);        assertSame(primaryPrefix, iter.next());        Node primarySuffix = primaryExpression.jjtGetChild(1);//        assertSame(primarySuffix, iter.next());        Node name = primaryPrefix.jjtGetChild(0);//        assertSame(name, iter.next());        Node arguments = primarySuffix.jjtGetChild(0);//        assertSame(arguments, iter.next());//        assertFalse(iter.hasNext());    }    @Test    public void testDescendantAxisIterator2() throws UnsupportedAxisException {        DocumentNavigator nav = new DocumentNavigator();        Iterator iter = nav.getDescendantAxisIterator(rule.primaryPrefix);        Node name = rule.primaryPrefix.jjtGetChild(0);        assertSame(name, iter.next());        assertFalse(iter.hasNext());    }    @Test    public void testFollowingSiblingAxisIterator() {        DocumentNavigator nav = new DocumentNavigator();        Iterator iter = nav.getFollowingSiblingAxisIterator(rule.primaryExpression.jjtGetChild(0));        assertSame(rule.primaryExpression.jjtGetChild(1), iter.next());        assertFalse(iter.hasNext());    }    @Test    public void testFollowingSiblingAxisIterator2() {        DocumentNavigator nav = new DocumentNavigator();        Iterator iter = nav.getFollowingSiblingAxisIterator(rule.primaryExpression.jjtGetChild(1));        assertFalse(iter.hasNext());    }    @Test    public void testPrecedingSiblingAxisIterator() {        DocumentNavigator nav = new DocumentNavigator();        Iterator iter = nav.getPrecedingSiblingAxisIterator(rule.primaryExpression.jjtGetChild(1));        assertSame(rule.primaryExpression.jjtGetChild(0), iter.next());        assertFalse(iter.hasNext());    }    @Test    public void testPrecedingSiblingAxisIterator2() {        DocumentNavigator nav = new DocumentNavigator();        Iterator iter = nav.getPrecedingSiblingAxisIterator(rule.primaryExpression.jjtGetChild(0));        assertFalse(iter.hasNext());    }    @Test    public void testXPath() throws JaxenException {        BaseXPath xPath = new BaseXPath(".//*", new DocumentNavigator());        List matches = xPath.selectNodes(rule.statement);        assertEquals(6, matches.size());    }    @Test    public void testXPath2() throws JaxenException {        BaseXPath xPath = new BaseXPath(".//*", new DocumentNavigator());        List matches = xPath.selectNodes(rule.importDeclaration);        assertEquals(1, matches.size());    }    public static final String TEST =            "import java.io.*;" + PMD.EOL +            "public class Foo {" + PMD.EOL +            " public Foo() {" + PMD.EOL +            "  try {" + PMD.EOL +            "   FileReader fr = new FileReader(\"/dev/null\");" + PMD.EOL +            "  } catch (Exception e) {}" + PMD.EOL +            "  try {" + PMD.EOL +            "   FileReader fr = new FileReader(\"/dev/null\");" + PMD.EOL +            "  } catch (Exception e) {" + PMD.EOL +            "   e.printStackTrace();" + PMD.EOL +            "   // this shouldn't show up on the report" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(DocumentNavigatorTest.class);    }}
package net.sourceforge.pmd.jaxen;import static org.junit.Assert.assertTrue;import java.util.ArrayList;import java.util.List;import net.sourceforge.pmd.lang.ast.AbstractNode;import net.sourceforge.pmd.lang.ast.xpath.Attribute;import net.sourceforge.pmd.lang.xpath.MatchesFunction;import org.jaxen.Context;import org.jaxen.FunctionCallException;import org.junit.Test;public class MatchesFunctionTest {        public static class MyNode extends AbstractNode    {private String className;public MyNode() {    super(1);}public String toString() {    return "MyNode";}public void setClassName(String className) {   this.className = className;}public String getClassName() {    return className;}    };    @Test    public void testMatch() throws FunctionCallException, NoSuchMethodException {MyNode myNode = new MyNode();myNode.setClassName("Foo");        assertTrue(tryRegexp(myNode, "Foo") instanceof List);    }    @Test    public void testNoMatch() throws FunctionCallException, NoSuchMethodException {MyNode myNode = new MyNode();myNode.setClassName("bar");        assertTrue(tryRegexp(myNode, "Foo") instanceof Boolean);myNode.setClassName("FobboBar");        assertTrue(tryRegexp(myNode, "Foo") instanceof Boolean);    }    private Object tryRegexp(MyNode myNode, String exp) throws FunctionCallException, NoSuchMethodException {        MatchesFunction function = new MatchesFunction();        List<Object> list = new ArrayList<Object>();        List<Attribute> attrs = new ArrayList<Attribute>();        attrs.add(new Attribute(myNode, "matches", myNode.getClass().getMethod("getClassName", new Class[0])));        list.add(attrs);        list.add(exp);        Context c = new Context(null);        c.setNodeSet(new ArrayList());        return function.call(c, list);    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(MatchesFunctionTest.class);    }}    
package net.sourceforge.pmd.renderers;import java.util.Properties;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report.ProcessingError;import net.sourceforge.pmd.renderers.HTMLRenderer;import net.sourceforge.pmd.renderers.Renderer;public class HTMLRendererTest extends AbstractRendererTst {    @Override    public Renderer getRenderer() {        return new HTMLRenderer(new Properties());    }    @Override    public String getExpected() {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL +        "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>" + PMD.EOL +        "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL +        "<tr bgcolor=\"lightgrey\"> " + PMD.EOL + "<td align=\"center\">1</td>" + PMD.EOL + "<td width=\"*%\">n/a</td>" + PMD.EOL +        "<td align=\"center\" width=\"5%\">1</td>" + PMD.EOL +        "<td width=\"*\">msg</td>" + PMD.EOL +        "</tr>" + PMD.EOL +        "</table></body></html>" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL +        "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>" + PMD.EOL +        "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL +        "</table></body></html>" + PMD.EOL;    }    @Override    public String getExpectedMultiple() {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL +        "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>" + PMD.EOL +        "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL +        "<tr bgcolor=\"lightgrey\"> " + PMD.EOL + "<td align=\"center\">1</td>" + PMD.EOL + "<td width=\"*%\">n/a</td>" + PMD.EOL +        "<td align=\"center\" width=\"5%\">1</td>" + PMD.EOL +        "<td width=\"*\">msg</td>" + PMD.EOL +        "</tr>" + PMD.EOL +        "<tr> " + PMD.EOL + "<td align=\"center\">2</td>" + PMD.EOL + "<td width=\"*%\">n/a</td>" + PMD.EOL +        "<td align=\"center\" width=\"5%\">1</td>" + PMD.EOL +        "<td width=\"*\">msg</td>" + PMD.EOL +        "</tr>" + PMD.EOL +        "</table></body></html>" + PMD.EOL;    }    @Override    public String getExpectedError(ProcessingError error) {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL +            "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>" + PMD.EOL +            "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL +            "</table><hr/><center><h3>Processing errors</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>" + PMD.EOL +            "<th>File</th><th>Problem</th></tr>" + PMD.EOL +            "<tr bgcolor=\"lightgrey\"> " + PMD.EOL +            "<td>file</td>" + PMD.EOL +            "<td>Error</td>" + PMD.EOL +            "</tr>" + PMD.EOL +            "</table></body></html>" + PMD.EOL;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(HTMLRendererTest.class);    }}
package net.sourceforge.pmd.renderers;import java.util.Properties;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.renderers.IDEAJRenderer;import net.sourceforge.pmd.renderers.Renderer;public class IDEAJRendererTest extends AbstractRendererTst {    public Renderer getRenderer() {Properties properties = new Properties();properties.put(IDEAJRenderer.SOURCE_PATH, "");properties.put(IDEAJRenderer.CLASS_AND_METHOD_NAME, "Foo <init>");properties.put(IDEAJRenderer.FILE_NAME, "Foo.java");        return new IDEAJRenderer(properties);    }    public String getExpected() {        return "msg" + PMD.EOL + " at Foo <init>(Foo.java:1)" + PMD.EOL;    }        public String getExpectedEmpty() {        return "";    }        public String getExpectedMultiple() {        return "msg" + PMD.EOL + " at Foo <init>(Foo.java:1)" + PMD.EOL + "msg" + PMD.EOL + " at Foo <init>(Foo.java:1)" + PMD.EOL;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(IDEAJRendererTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import java.util.Properties;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.renderers.Renderer;import net.sourceforge.pmd.renderers.TextPadRenderer;public class TextPadRendererTest extends AbstractRendererTst{    @Override    public Renderer getRenderer() {        return new TextPadRenderer(new Properties());    }    @Override    public String getExpected() {        return "n/a(1,  Foo):  msg" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "";    }    @Override    public String getExpectedMultiple() {        return "n/a(1,  Foo):  msg" + PMD.EOL + "n/a(1,  Foo):  msg" + PMD.EOL;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(TextPadRendererTest.class);    }}
package net.sourceforge.pmd.renderers;import java.io.File;import java.io.FileNotFoundException;import java.io.Reader;import java.io.StringReader;import java.util.Properties;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report.ProcessingError;import net.sourceforge.pmd.renderers.Renderer;import net.sourceforge.pmd.renderers.TextColorRenderer;public class PapariTextRendererTest extends AbstractRendererTst {    private static String naString = "n/a";    static {        naString = naString.substring(naString.lastIndexOf(File.separator) + 1);    }        public Renderer getRenderer() {        return new TextColorRenderer(new Properties()){            protected Reader getReader(String sourceFile) throws FileNotFoundException {                return new StringReader("public class Foo {}");            }        };    }    public String getExpected() {        return "* file: n/a" + PMD.EOL + "    src:  " + naString + ":1:1" + PMD.EOL + "    rule: Foo" + PMD.EOL + "    msg:  msg" + PMD.EOL + "    code: public class Foo {}" + PMD.EOL + PMD.EOL + PMD.EOL + PMD.EOL + "Summary:" + PMD.EOL + PMD.EOL + " : 1" + PMD.EOL + "* warnings: 1" + PMD.EOL;    }        public String getExpectedEmpty() {        return PMD.EOL + PMD.EOL + "Summary:" + PMD.EOL + PMD.EOL + "* warnings: 0" + PMD.EOL;    }        public String getExpectedMultiple() {        return "* file: n/a" + PMD.EOL + "    src:  " + naString + ":1:1" + PMD.EOL + "    rule: Foo" + PMD.EOL + "    msg:  msg" + PMD.EOL + "    code: public class Foo {}" + PMD.EOL + PMD.EOL + "    src:  " + naString + ":1:1" + PMD.EOL + "    rule: Foo" + PMD.EOL + "    msg:  msg" + PMD.EOL + "    code: public class Foo {}" + PMD.EOL + PMD.EOL + PMD.EOL + PMD.EOL + "Summary:" + PMD.EOL + PMD.EOL + " : 2" + PMD.EOL + "* warnings: 2" + PMD.EOL;    }        public String getExpectedError(ProcessingError error) {        return PMD.EOL + PMD.EOL + "Summary:" + PMD.EOL + PMD.EOL + "    err:  Error" + PMD.EOL + PMD.EOL + "* errors:   0" + PMD.EOL + "* warnings: 0" + PMD.EOL;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(PapariTextRendererTest.class);    }}
package net.sourceforge.pmd.renderers;import java.util.Properties;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.renderers.EmacsRenderer;import net.sourceforge.pmd.renderers.Renderer;public class EmacsRendererTest extends AbstractRendererTst {    @Override    public Renderer getRenderer() {        return new EmacsRenderer(new Properties());    }    @Override    public String getExpected() {        return "n/a:1: msg" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "";    }    @Override    public String getExpectedMultiple() {        return "n/a:1: msg" + PMD.EOL + "n/a:1: msg" + PMD.EOL;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(EmacsRendererTest.class);    }}
package net.sourceforge.pmd.renderers;import java.util.Properties;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report.ProcessingError;import net.sourceforge.pmd.renderers.Renderer;import net.sourceforge.pmd.renderers.VBHTMLRenderer;public class VBHTMLRendererTest extends AbstractRendererTst {    @Override    public Renderer getRenderer() {        return new VBHTMLRenderer(new Properties());    }    @Override    public String getExpected() {        return  "<html><head><title>PMD</title></head><style type=\"text/css\"><!--" + PMD.EOL +                "body { background-color: white; font-family:verdana, arial, helvetica, geneva; font-size: 16px; font-style: italic; color: black; }" + PMD.EOL +                ".title { font-family: verdana, arial, helvetica,geneva; font-size: 12px; font-weight:bold; color: white; }" + PMD.EOL +                ".body { font-family: verdana, arial, helvetica, geneva; font-size: 12px; font-weight:plain; color: black; }" + PMD.EOL +                "#TableHeader { background-color: #003366; }" + PMD.EOL +                "#RowColor1 { background-color: #eeeeee; }" + PMD.EOL +                "#RowColor2 { background-color: white; }" + PMD.EOL +                "--></style><body><center><table border=\"0\" width=\"80%\"><tr id=TableHeader><td colspan=\"2\"><font class=title>&nbsp;n/a</font></tr>" + PMD.EOL +                "<tr id=RowColor2><td width=\"50\" align=\"right\"><font class=body>1&nbsp;&nbsp;&nbsp;</font></td><td><font class=body>msg</font></td></tr>" + PMD.EOL +                "</table><br></center></body></html>" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "<html><head><title>PMD</title></head><style type=\"text/css\"><!--" + PMD.EOL +        "body { background-color: white; font-family:verdana, arial, helvetica, geneva; font-size: 16px; font-style: italic; color: black; }" + PMD.EOL +        ".title { font-family: verdana, arial, helvetica,geneva; font-size: 12px; font-weight:bold; color: white; }" + PMD.EOL +        ".body { font-family: verdana, arial, helvetica, geneva; font-size: 12px; font-weight:plain; color: black; }" + PMD.EOL +        "#TableHeader { background-color: #003366; }" + PMD.EOL +        "#RowColor1 { background-color: #eeeeee; }" + PMD.EOL +        "#RowColor2 { background-color: white; }" + PMD.EOL +        "--></style><body><center><br></center></body></html>" + PMD.EOL;    }    @Override    public String getExpectedMultiple() {        return  "<html><head><title>PMD</title></head><style type=\"text/css\"><!--" + PMD.EOL +                "body { background-color: white; font-family:verdana, arial, helvetica, geneva; font-size: 16px; font-style: italic; color: black; }" + PMD.EOL +                ".title { font-family: verdana, arial, helvetica,geneva; font-size: 12px; font-weight:bold; color: white; }" + PMD.EOL +                ".body { font-family: verdana, arial, helvetica, geneva; font-size: 12px; font-weight:plain; color: black; }" + PMD.EOL +                "#TableHeader { background-color: #003366; }" + PMD.EOL +                "#RowColor1 { background-color: #eeeeee; }" + PMD.EOL +                "#RowColor2 { background-color: white; }" + PMD.EOL +                "--></style><body><center><table border=\"0\" width=\"80%\"><tr id=TableHeader><td colspan=\"2\"><font class=title>&nbsp;n/a</font></tr>" + PMD.EOL +                "<tr id=RowColor2><td width=\"50\" align=\"right\"><font class=body>1&nbsp;&nbsp;&nbsp;</font></td><td><font class=body>msg</font></td></tr>" + PMD.EOL +                "<tr id=RowColor1><td width=\"50\" align=\"right\"><font class=body>1&nbsp;&nbsp;&nbsp;</font></td><td><font class=body>msg</font></td></tr>" + PMD.EOL +                "</table><br></center></body></html>" + PMD.EOL;    }    @Override    public String getExpectedError(ProcessingError error) {        return  "<html><head><title>PMD</title></head><style type=\"text/css\"><!--" + PMD.EOL +                "body { background-color: white; font-family:verdana, arial, helvetica, geneva; font-size: 16px; font-style: italic; color: black; }" + PMD.EOL +                ".title { font-family: verdana, arial, helvetica,geneva; font-size: 12px; font-weight:bold; color: white; }" + PMD.EOL +                ".body { font-family: verdana, arial, helvetica, geneva; font-size: 12px; font-weight:plain; color: black; }" + PMD.EOL +                "#TableHeader { background-color: #003366; }" + PMD.EOL +                "#RowColor1 { background-color: #eeeeee; }" + PMD.EOL +                "#RowColor2 { background-color: white; }" + PMD.EOL +                "--></style><body><center><br><table border=\"0\" width=\"80%\"><tr id=TableHeader><td><font class=title>&nbsp;Problems found</font></td></tr><tr id=RowColor2><td><font class=body>" + error +"\"</font></td></tr></table></center></body></html>" + PMD.EOL;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(VBHTMLRendererTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import java.util.Properties;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report.ProcessingError;import net.sourceforge.pmd.renderers.CSVRenderer;import net.sourceforge.pmd.renderers.Renderer;public class CSVRendererTest extends AbstractRendererTst {    public Renderer getRenderer() {        return new CSVRenderer(new Properties());    }    public String getExpected() {        return "\"Problem\",\"Package\",\"File\",\"Priority\",\"Line\",\"Description\",\"Rule set\",\"Rule\"" + PMD.EOL                + "\"1\",\"\",\"n/a\",\"5\",\"1\",\"msg\",\"RuleSet\",\"Foo\"" + PMD.EOL;    }    public String getExpectedEmpty() {        return "\"Problem\",\"Package\",\"File\",\"Priority\",\"Line\",\"Description\",\"Rule set\",\"Rule\"" + PMD.EOL;    }    public String getExpectedMultiple() {        return "\"Problem\",\"Package\",\"File\",\"Priority\",\"Line\",\"Description\",\"Rule set\",\"Rule\"" + PMD.EOL        + "\"1\",\"\",\"n/a\",\"5\",\"1\",\"msg\",\"RuleSet\",\"Foo\"" + PMD.EOL         + "\"2\",\"\",\"n/a\",\"5\",\"1\",\"msg\",\"RuleSet\",\"Foo\"" + PMD.EOL;    }    public String getExpectedError(ProcessingError error) {        return "\"Problem\",\"Package\",\"File\",\"Priority\",\"Line\",\"Description\",\"Rule set\",\"Rule\"" + PMD.EOL;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(CSVRendererTest.class);    }}
package net.sourceforge.pmd.renderers;import java.util.Properties;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report.ProcessingError;import net.sourceforge.pmd.renderers.Renderer;import net.sourceforge.pmd.renderers.TextRenderer;public class TextRendererTest extends AbstractRendererTst {    @Override    public Renderer getRenderer() {        return new TextRenderer(new Properties());    }    @Override    public String getExpected() {        return "n/a:1\tmsg" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "";    }    @Override    public String getExpectedMultiple() {        return "n/a:1\tmsg" + PMD.EOL + "n/a:1\tmsg" + PMD.EOL;    }    @Override    public String getExpectedError(ProcessingError error) {        return "file\t-\tError" + PMD.EOL;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(TextRendererTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.renderers;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNull;import java.io.IOException;import java.io.StringReader;import java.util.Properties;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.ReportTest;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSets;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;import net.sourceforge.pmd.renderers.XMLRenderer;import net.sourceforge.pmd.testframework.RuleTst;import org.junit.Test;import org.w3c.dom.Element;import org.xml.sax.InputSource;import org.xml.sax.SAXException;public class XMLRendererTest extends RuleTst {    private static class FooRule extends AbstractJavaRule {        public Object visit(ASTClassOrInterfaceDeclaration c, Object ctx) {            if (c.getImage().equals("Foo")) addViolation(ctx, c);            return ctx;        }        public String getMessage() {            return "blah";        }        public String getName() {            return "Foo";        }        public String getRuleSetName() {            return "RuleSet";        }        public String getDescription() {            return "desc";        }    }    @Test    public void testEmptyReport() throws Throwable {        Element root = parseRootElement(new Report());        assertEquals("pmd", root.getNodeName());        assertNull(root.getFirstChild().getNextSibling()); // only one child, it's whitespace    }    @Test    public void testErrorReport() throws Throwable {        Report report = new Report();        report.addError(new Report.ProcessingError("test_msg", "test_filename"));        Element root = parseRootElement(report);        assertEquals("test_msg", root.getFirstChild().getNextSibling().getAttributes().getNamedItem("msg").getNodeValue());    }    @Test    public void testSingleReport() throws Throwable {        Report report = new Report();        runTestFromString(TEST1, new FooRule(), report);        Element root = parseRootElement(report);        assertEquals("n/a", root.getFirstChild().getNextSibling().getAttributes().getNamedItem("name").getNodeValue());        assertEquals("Foo", root.getFirstChild().getNextSibling().getFirstChild().getNextSibling().getAttributes().getNamedItem("rule").getNodeValue());        assertEquals("RuleSet", root.getFirstChild().getNextSibling().getFirstChild().getNextSibling().getAttributes().getNamedItem("ruleset").getNodeValue());        assertEquals("1", root.getFirstChild().getNextSibling().getFirstChild().getNextSibling().getAttributes().getNamedItem("beginline").getNodeValue());    }    private static final String TEST1 =            "public class Foo {}" + PMD.EOL;    private static final String TEST2 =            "public class Foo {" + PMD.EOL +            " public class Foo {}" + PMD.EOL +            "}" + PMD.EOL;    @Test    public void testDoubleReport() throws Throwable {        Report report = new Report();        runTestFromString(TEST2, new FooRule(), report);        runTestFromString(TEST2, new FooRule(), report);        Element root = parseRootElement(report);        assertEquals("Foo", root.getFirstChild().getNextSibling().getFirstChild().getNextSibling().getAttributes().getNamedItem("rule").getNodeValue());        assertEquals("Foo", root.getFirstChild().getNextSibling().getFirstChild().getNextSibling().getNextSibling().getNextSibling().getAttributes().getNamedItem("rule").getNodeValue());    }    @Test    public void testTwoFiles() throws Throwable {        Report report = new Report();        FooRule rule = new FooRule();        runTestFromString(TEST2, rule, report);        PMD p = new PMD();        p.getConfiguration().setDefaultLanguageVersion(LanguageVersion.JAVA_14);        RuleContext ctx = new RuleContext();        ctx.setReport(report);        ctx.setSourceCodeFilename("bar");        RuleSet rules = new RuleSet();        rules.addRule(rule);        p.getSourceCodeProcessor().processSourceCode(new StringReader(TEST2), new RuleSets(rules), ctx);        Element root = parseRootElement(report);        assertEquals("bar", root.getFirstChild().getNextSibling().getAttributes().getNamedItem("name").getNodeValue());        assertEquals("n/a", root.getFirstChild().getNextSibling().getNextSibling().getNextSibling().getAttributes().getNamedItem("name").getNodeValue());    }    private Element parseRootElement(Report rpt) throws SAXException, IOException, ParserConfigurationException {String result = ReportTest.render(new XMLRenderer(new Properties()), rpt);        return DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new InputSource(new StringReader(result))).getDocumentElement();    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(XMLRendererTest.class);    }}
package net.sourceforge.pmd.renderers;import java.io.File;import java.io.IOException;import java.util.Properties;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report.ProcessingError;import net.sourceforge.pmd.renderers.Renderer;import net.sourceforge.pmd.renderers.YAHTMLRenderer;import org.junit.After;import org.junit.Before;public class YAHTMLRendererTest extends AbstractRendererTst {    private String outputDir;    @Before    public void setUp() throws IOException {        outputDir = getTemporaryDirectory("pmdtest").getAbsolutePath();    }    @After    public void cleanUp() {        deleteDirectory(new File(outputDir));    }    private File getTemporaryDirectory(String prefix) throws IOException {        // TODO: move to util class?        File dir = File.createTempFile(prefix, "");        dir.delete();        dir.mkdir();        return dir;    }    private void deleteDirectory(File dir) {        // TODO: move to util class?        File[] a = dir.listFiles();        if (a != null) {            for (File f: a) {                if (f.isDirectory()) {                    deleteDirectory(f);                } else {                    f.delete();                }            }        }        dir.delete();    }    @Override    public Renderer getRenderer() {Properties properties = new  Properties();properties.put(YAHTMLRenderer.OUTPUT_DIR, outputDir);        return new YAHTMLRenderer(properties);    }    @Override    public String getExpected() {        return "<h3 align=\"center\">The HTML files are located in '" + outputDir + "'.</h3>" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return getExpected();    }    @Override    public String getExpectedMultiple() {        return getExpected();    }    @Override    public String getExpectedError(ProcessingError error) {        return getExpected();    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(YAHTMLRendererTest.class);    }}
package net.sourceforge.pmd.renderers;import java.util.Properties;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report.ProcessingError;import net.sourceforge.pmd.renderers.Renderer;import net.sourceforge.pmd.renderers.SummaryHTMLRenderer;public class SummaryHTMLRendererTest extends AbstractRendererTst {    @Override    public Renderer getRenderer() {Properties properties = new Properties();properties.put(SummaryHTMLRenderer.LINK_PREFIX, "link_prefix");properties.put(SummaryHTMLRenderer.LINE_PREFIX, "line_prefix");        return new SummaryHTMLRenderer(properties);    }    @Override    public String getExpected() {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL +                "<h2><center>Summary</h2></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><th>Rule name</th><th>Number of violations</th><tr><td>Foo</td><td align=center>1</td></tr></table><h2><center>Detail</h2></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>" + PMD.EOL +                "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>" + PMD.EOL +                "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL +                "<tr bgcolor=\"lightgrey\"> " + PMD.EOL +                "<td align=\"center\">1</td>" + PMD.EOL +                "<td width=\"*%\"><a href=\"link_prefixn/a.html#line_prefix1\">n/a</a></td>" + PMD.EOL +                "<td align=\"center\" width=\"5%\">1</td>" + PMD.EOL +                "<td width=\"*\">msg</td>" + PMD.EOL +                "</tr>" + PMD.EOL +                "</table></table></body></html>" + PMD.EOL;    }    @Override    public String getExpectedEmpty() {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL +        "<h2><center>Summary</h2></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><th>Rule name</th><th>Number of violations</th></table><h2><center>Detail</h2></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>" + PMD.EOL +        "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>" + PMD.EOL +        "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL +        "</table></table></body></html>" + PMD.EOL;    }    @Override    public String getExpectedMultiple() {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL +        "<h2><center>Summary</h2></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><th>Rule name</th><th>Number of violations</th><tr><td>Foo</td><td align=center>2</td></tr></table><h2><center>Detail</h2></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>" + PMD.EOL +        "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>" + PMD.EOL +        "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL +        "<tr bgcolor=\"lightgrey\"> " + PMD.EOL +        "<td align=\"center\">1</td>" + PMD.EOL +        "<td width=\"*%\"><a href=\"link_prefixn/a.html#line_prefix1\">n/a</a></td>" + PMD.EOL +        "<td align=\"center\" width=\"5%\">1</td>" + PMD.EOL +        "<td width=\"*\">msg</td>" + PMD.EOL +        "</tr>" + PMD.EOL +        "<tr> " + PMD.EOL +        "<td align=\"center\">2</td>" + PMD.EOL +        "<td width=\"*%\"><a href=\"link_prefixn/a.html#line_prefix1\">n/a</a></td>" + PMD.EOL +        "<td align=\"center\" width=\"5%\">1</td>" + PMD.EOL +        "<td width=\"*\">msg</td>" + PMD.EOL +        "</tr>" + PMD.EOL +        "</table></table></body></html>" + PMD.EOL;    }    @Override    public String getExpectedError(ProcessingError error) {        return "<html><head><title>PMD</title></head><body>" + PMD.EOL +        "<h2><center>Summary</h2></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><th>Rule name</th><th>Number of violations</th></table><h2><center>Detail</h2></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>" + PMD.EOL +        "<center><h3>PMD report</h3></center><center><h3>Problems found</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>" + PMD.EOL +        "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL +        "</table><hr/><center><h3>Processing errors</h3></center><table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>" + PMD.EOL +        "<th>File</th><th>Problem</th></tr>" + PMD.EOL +        "<tr bgcolor=\"lightgrey\"> " + PMD.EOL +        "<td>file</td>" + PMD.EOL +        "<td>Error</td>" + PMD.EOL +        "</tr>" + PMD.EOL +        "</table></table></body></html>" + PMD.EOL;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(SummaryHTMLRendererTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.symboltable;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.symboltable.TypeSet;import org.junit.Test;import java.io.File;import java.util.HashSet;import java.util.Set;public class TypeSetTest {    @Test    public void testASTCompilationUnitPackage() {        TypeSet t = new TypeSet();        t.setASTCompilationUnitPackage("java.lang.");        assertEquals("java.lang.", t.getASTCompilationUnitPackage());    }    @Test    public void testAddImport() {        TypeSet t = new TypeSet();        t.addImport("java.io.File");        assertEquals(1, t.getImportsCount());    }    @Test    public void testFindClassImplicitImport() throws Throwable {        TypeSet t = new TypeSet();        Class clazz = t.findClass("String");        assertEquals(String.class, clazz);    }    @Test    public void testFindClassSamePackage() throws Throwable {        TypeSet t = new TypeSet();        t.setASTCompilationUnitPackage("net.sourceforge.pmd.");        Class clazz = t.findClass("PMD");        assertEquals(PMD.class, clazz);    }    @Test    public void testFindClassExplicitImport() throws Throwable {        TypeSet t = new TypeSet();        t.addImport("java.io.File");        Class clazz = t.findClass("File");        assertEquals(File.class, clazz);    }    @Test    public void testFindClassImportOnDemand() throws Throwable {        TypeSet t = new TypeSet();        t.addImport("java.io.*");        Class clazz = t.findClass("File");        assertEquals(File.class, clazz);    }    @Test    public void testFindClassPrimitive() throws Throwable {        TypeSet t = new TypeSet();        assertEquals(int.class, t.findClass("int"));    }    @Test    public void testFindClassVoid() throws Throwable {        TypeSet t = new TypeSet();        assertEquals(void.class, t.findClass("void"));    }    @Test    public void testFindFullyQualified() throws Throwable {        TypeSet t = new TypeSet();        assertEquals(String.class, t.findClass("java.lang.String"));        assertEquals(Set.class, t.findClass("java.util.Set"));    }    // inner class tests    @Test    public void testPrimitiveTypeResolver() throws Throwable {        TypeSet.Resolver r = new TypeSet.PrimitiveTypeResolver();        assertEquals(int.class, r.resolve("int"));        assertEquals(byte.class, r.resolve("byte"));        assertEquals(long.class, r.resolve("long"));    }    @Test    public void testVoidTypeResolver() throws Throwable {        TypeSet.Resolver r = new TypeSet.VoidResolver();        assertEquals(void.class, r.resolve("void"));    }    @Test    public void testExplicitImportResolver() throws Throwable {        Set<String> imports = new HashSet<String>();        imports.add("java.io.File");        TypeSet.Resolver r = new TypeSet.ExplicitImportResolver(imports);        assertEquals(File.class, r.resolve("File"));    }    @Test    public void testImplicitImportResolverPass() throws Throwable {        TypeSet.Resolver r = new TypeSet.ImplicitImportResolver();        assertEquals(String.class, r.resolve("String"));    }    @Test(expected=ClassNotFoundException.class)    public void testImplicitImportResolverPassFail() throws Throwable {        TypeSet.Resolver r = new TypeSet.ImplicitImportResolver();        r.resolve("PMD");    }    @Test    public void testCurrentPackageResolverPass() throws Throwable {        TypeSet.Resolver r = new TypeSet.CurrentPackageResolver("net.sourceforge.pmd.");        assertEquals(PMD.class, r.resolve("PMD"));    }    @Test    public void testImportOnDemandResolverPass() throws Throwable {        TypeSet.Resolver r = getResolver();        assertEquals(Set.class, r.resolve("Set"));        assertEquals(File.class, r.resolve("File"));    }    @Test(expected = ClassNotFoundException.class)    public void importOnDemandResolverFail1() throws Throwable {        TypeSet.Resolver r = getResolver();        r.resolve("foo");    }    @Test(expected = ClassNotFoundException.class)    public void importOnDemandResolverFail2() throws Throwable {        TypeSet.Resolver r = getResolver();        r.resolve("String");    }    private TypeSet.Resolver getResolver() {        Set<String> imports = new HashSet<String>();        imports.add("java.io.*");        imports.add("java.util.*");        TypeSet.Resolver r = new TypeSet.ImportOnDemandResolver(imports);        return r;    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(TypeSetTest.class);    }}
package net.sourceforge.pmd.symboltable;import static org.junit.Assert.assertEquals;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.lang.java.ast.DummyJavaNode;import net.sourceforge.pmd.lang.java.symboltable.Applier;import net.sourceforge.pmd.lang.java.symboltable.NameOccurrence;import net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration;import net.sourceforge.pmd.lang.java.symboltable.VariableUsageFinderFunction;import net.sourceforge.pmd.lang.java.symboltable.Applier;import org.junit.Test;public class VariableUsageFinderFunctionTest {    @Test    public void testLookingForUsed() {        ASTVariableDeclaratorId variableDeclarationIdNode = new ASTVariableDeclaratorId(1);        variableDeclarationIdNode.setImage("x");        VariableNameDeclaration nameDeclaration = new VariableNameDeclaration(variableDeclarationIdNode);        List<NameOccurrence> nameOccurrences = new ArrayList<NameOccurrence>();        nameOccurrences.add(new NameOccurrence(new DummyJavaNode(2), "x"));        Map<VariableNameDeclaration, List<NameOccurrence>> declarations = new HashMap<VariableNameDeclaration, List<NameOccurrence>>();        declarations.put(nameDeclaration, nameOccurrences);        List<VariableNameDeclaration> vars = new ArrayList<VariableNameDeclaration>();        vars.add(nameDeclaration);        VariableUsageFinderFunction f = new VariableUsageFinderFunction(declarations);        Applier.apply(f, vars.iterator());        Map p = f.getUsed();        assertEquals(1, p.size());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(VariableUsageFinderFunctionTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.symboltable;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;import net.sourceforge.pmd.lang.java.ast.ASTTryStatement;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.lang.java.symboltable.Scope;import net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration;import org.junit.Test;import java.util.List;public class VariableNameDeclarationTest extends STBBaseTst {    @Test    public void testConstructor() {        parseCode(TEST1);        List nodes = acu.findDescendantsOfType(ASTVariableDeclaratorId.class);        Scope s = ((ASTVariableDeclaratorId) nodes.get(0)).getScope();        VariableNameDeclaration decl = s.getVariableDeclarations().keySet().iterator().next();        assertEquals("bar", decl.getImage());        assertEquals(3, decl.getNode().getBeginLine());    }    @Test    public void testExceptionBlkParam() {        ASTVariableDeclaratorId id = new ASTVariableDeclaratorId(3);        id.testingOnly__setBeginLine(10);        id.setImage("foo");        ASTFormalParameter param = new ASTFormalParameter(2);        id.jjtSetParent(param);        param.jjtSetParent(new ASTTryStatement(1));        VariableNameDeclaration decl = new VariableNameDeclaration(id);        assertTrue(decl.isExceptionBlockParameter());    }    @Test    public void testIsArray() {        parseCode(TEST3);        VariableNameDeclaration decl = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0).getScope().getVariableDeclarations().keySet().iterator().next();        assertTrue(decl.isArray());    }    @Test    public void testPrimitiveType() {        parseCode(TEST1);        VariableNameDeclaration decl = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0).getScope().getVariableDeclarations().keySet().iterator().next();        assertTrue(decl.isPrimitiveType());    }    @Test    public void testArrayIsReferenceType() {        parseCode(TEST3);        VariableNameDeclaration decl = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0).getScope().getVariableDeclarations().keySet().iterator().next();        assertTrue(decl.isReferenceType());    }    @Test    public void testPrimitiveTypeImage() {        parseCode(TEST3);        VariableNameDeclaration decl = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0).getScope().getVariableDeclarations().keySet().iterator().next();        assertEquals("int", decl.getTypeImage());    }    @Test    public void testRefTypeImage() {        parseCode(TEST4);        VariableNameDeclaration decl = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0).getScope().getVariableDeclarations().keySet().iterator().next();        assertEquals("String", decl.getTypeImage());    }    @Test    public void testParamTypeImage() {        parseCode(TEST5);        VariableNameDeclaration decl = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0).getScope().getVariableDeclarations().keySet().iterator().next();        assertEquals("String", decl.getTypeImage());    }    public static final String TEST1 =            "public class Foo {" + PMD.EOL +            " void foo() {" + PMD.EOL +            "  int bar = 42;" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static final String TEST2 =            "public class Foo {" + PMD.EOL +            " void foo() {" + PMD.EOL +            "  try {} catch(Exception e) {}" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static final String TEST3 =            "public class Foo {" + PMD.EOL +            " void foo() {" + PMD.EOL +            "  int[] x;" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static final String TEST4 =            "public class Foo {" + PMD.EOL +            " void foo() {" + PMD.EOL +            "  String x;" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static final String TEST5 =            "public class Foo {" + PMD.EOL +            " void foo(String x) {}" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(VariableNameDeclarationTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.symboltable;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTIfStatement;import net.sourceforge.pmd.lang.java.symboltable.LocalScope;import org.junit.Test;public class ScopeCreationVisitorTest extends STBBaseTst {    @Test    public void testScopesAreCreated() {        parseCode(TEST1);        ASTIfStatement n = acu.findDescendantsOfType(ASTIfStatement.class).get(0);        assertTrue(n.getScope() instanceof LocalScope);    }    private static final String TEST1 =            "public class Foo {" + PMD.EOL +            " void foo() {" + PMD.EOL +            "  if (x>2) {}" + PMD.EOL +            " }" + PMD.EOL +            "}" + PMD.EOL;    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ScopeCreationVisitorTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.symboltable;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.Iterator;import java.util.List;import java.util.Map;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.lang.java.ast.DummyJavaNode;import net.sourceforge.pmd.lang.java.ast.JavaNode;import net.sourceforge.pmd.lang.java.symboltable.ClassNameDeclaration;import net.sourceforge.pmd.lang.java.symboltable.ClassScope;import net.sourceforge.pmd.lang.java.symboltable.MethodNameDeclaration;import net.sourceforge.pmd.lang.java.symboltable.NameOccurrence;import net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration;import org.junit.Test;public class ClassScopeTest extends STBBaseTst {    @Test    public void testEnumsClassScope() {        parseCode15(ENUM_SCOPE);    }    // FIXME - these will break when this goes from Anonymous$1 to Foo$1    @Test    public void testAnonymousInnerClassName() {        ClassScope s = new ClassScope("Foo");        s = new ClassScope();        assertEquals("Anonymous$1", s.getClassName());        s = new ClassScope();        assertEquals("Anonymous$2", s.getClassName());    }    @Test    public void testContains() {        ClassScope s = new ClassScope("Foo");        ASTVariableDeclaratorId node = new ASTVariableDeclaratorId(1);        node.setImage("bar");        s.addDeclaration(new VariableNameDeclaration(node));        assertTrue(s.getVariableDeclarations().keySet().iterator().hasNext());    }    @Test    public void testCantContainsSuperToString() {        ClassScope s = new ClassScope("Foo");        JavaNode node = new DummyJavaNode(1);        node.setImage("super.toString");        assertFalse(s.contains(new NameOccurrence(node, node.getImage())));    }    @Test    public void testContainsStaticVariablePrefixedWithClassName() {        ClassScope s = new ClassScope("Foo");        ASTVariableDeclaratorId node = new ASTVariableDeclaratorId(1);        node.setImage("X");        s.addDeclaration(new VariableNameDeclaration(node));        JavaNode node2 = new DummyJavaNode(2);        node2.setImage("Foo.X");        assertTrue(s.contains(new NameOccurrence(node2, node2.getImage())));    }    @Test    public void testClassName() {        parseCode(CLASS_NAME);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        assertEquals("Foo", n.getScope().getEnclosingClassScope().getClassName());    }    @Test    public void testMethodDeclarationRecorded() {        parseCode(METHOD_DECLARATIONS_RECORDED);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        ClassScope s = (ClassScope) n.getScope();        Map m = s.getMethodDeclarations();        assertEquals(1, m.size());        MethodNameDeclaration mnd = (MethodNameDeclaration) m.keySet().iterator().next();        assertEquals("bar", mnd.getImage());        ASTMethodDeclaration node = (ASTMethodDeclaration) mnd.getNode().jjtGetParent();        assertTrue(node.isPrivate());    }    @Test    public void testTwoMethodsSameNameDiffArgs() {        // TODO this won't work with String and java.lang.String        parseCode(METHODS_WITH_DIFF_ARG);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map m = ((ClassScope) n.getScope()).getMethodDeclarations();        assertEquals(2, m.size());        Iterator i = m.keySet().iterator();        MethodNameDeclaration mnd = (MethodNameDeclaration) i.next();        assertEquals("bar", mnd.getImage());        assertEquals("bar", ((MethodNameDeclaration) i.next()).getImage());    }    @Test    public final void testOneParam() throws Throwable {        parseCode(ONE_PARAM);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map m = ((ClassScope) n.getScope()).getMethodDeclarations();        MethodNameDeclaration mnd = (MethodNameDeclaration) m.keySet().iterator().next();        assertEquals("(String)", mnd.getParameterDisplaySignature());    }    @Test    public final void testTwoParams() throws Throwable {        parseCode(TWO_PARAMS);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map m = ((ClassScope) n.getScope()).getMethodDeclarations();        MethodNameDeclaration mnd = (MethodNameDeclaration) m.keySet().iterator().next();        assertEquals("(String,int)", mnd.getParameterDisplaySignature());    }    @Test    public final void testNoParams() throws Throwable {        parseCode(NO_PARAMS);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map m = ((ClassScope) n.getScope()).getMethodDeclarations();        MethodNameDeclaration mnd = (MethodNameDeclaration) m.keySet().iterator().next();        assertEquals("()", mnd.getParameterDisplaySignature());    }    @Test    public final void testOneParamVararg() throws Throwable {    parseCode15(ONE_PARAM_VARARG);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map m = ((ClassScope) n.getScope()).getMethodDeclarations();        MethodNameDeclaration mnd = (MethodNameDeclaration) m.keySet().iterator().next();        assertEquals("(String...)", mnd.getParameterDisplaySignature());    }    @Test    public final void testTwoParamsVararg() throws Throwable {    parseCode15(TWO_PARAMS_VARARG);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map m = ((ClassScope) n.getScope()).getMethodDeclarations();        MethodNameDeclaration mnd = (MethodNameDeclaration) m.keySet().iterator().next();        assertEquals("(String,String...)", mnd.getParameterDisplaySignature());    }    @Test    public final void testNestedClassDeclFound() throws Throwable {        parseCode(NESTED_CLASS_FOUND);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        ClassScope c = (ClassScope) n.getScope();        Map m = c.getClassDeclarations();        ClassNameDeclaration cnd = (ClassNameDeclaration) m.keySet().iterator().next();        assertEquals("Buz", cnd.getImage());    }    @Test    public final void testbuz() throws Throwable {        parseCode(METH);        //SymbolTableViewer st = new SymbolTableViewer();        //acu.jjtAccept(st, null);    }    @Test    public void testMethodUsageSeen() {        parseCode(METHOD_USAGE_SEEN);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map m = ((ClassScope) n.getScope()).getMethodDeclarations();        Iterator i = m.entrySet().iterator();        MethodNameDeclaration mnd;        Map.Entry entry;                do {            entry = (Map.Entry) i.next();            mnd = (MethodNameDeclaration) entry.getKey();        } while (!mnd.getImage().equals("bar"));        List usages = (List) entry.getValue();        assertEquals(1, usages.size());        assertEquals("bar", ((NameOccurrence) usages.get(0)).getImage());    }    @Test    public void testMethodUsageSeenWithThis() {        parseCode(METHOD_USAGE_SEEN_WITH_THIS);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map m = ((ClassScope) n.getScope()).getMethodDeclarations();        Iterator i = m.entrySet().iterator();        MethodNameDeclaration mnd;        Map.Entry entry;                do {            entry = (Map.Entry) i.next();            mnd = (MethodNameDeclaration) entry.getKey();        } while (!mnd.getImage().equals("bar"));        List usages = (List) entry.getValue();        assertEquals(1, usages.size());        assertEquals("bar", ((NameOccurrence) usages.get(0)).getImage());    }    @Test    public void testMethodUsageSeen2() {        parseCode(METHOD_USAGE_SEEN2);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map m = ((ClassScope) n.getScope()).getMethodDeclarations();        Iterator i = m.entrySet().iterator();        Map.Entry entry = (Map.Entry) i.next();        MethodNameDeclaration mnd = (MethodNameDeclaration) entry.getKey();        if (mnd.getNode().getBeginLine() == 2) {            List usages = (List) entry.getValue();            System.out.println(usages.size());            System.out.println(mnd);            mnd = (MethodNameDeclaration) i.next();        }    }    private static final String METHOD_USAGE_SEEN2 =            "public class Foo {" + PMD.EOL +            " public void baz() {" + PMD.EOL +            "  baz(x, y);" + PMD.EOL +            " }" + PMD.EOL +            " private void baz(int x, int y) {}" + PMD.EOL +            "}";    private static final String METHOD_USAGE_SEEN =            "public class Foo {" + PMD.EOL +            " private void bar() {}" + PMD.EOL +            " public void buz() {" + PMD.EOL +            "  bar();" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String METHOD_USAGE_SEEN_WITH_THIS =            "public class Foo {" + PMD.EOL +            " private void bar() {}" + PMD.EOL +            " public void buz() {" + PMD.EOL +            "  this.bar();" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String METH =            "public class Test {" + PMD.EOL +            "  static { " + PMD.EOL +            "   int y; " + PMD.EOL +            "  } " + PMD.EOL +            "  void bar(int x) {} " + PMD.EOL +            "  void baz(int x) {} " + PMD.EOL +            "}";    private static final String NESTED_CLASS_FOUND =            "public class Test {" + PMD.EOL +            "  private class Buz {} " + PMD.EOL +            "}";    private static final String ONE_PARAM =            "public class Test {" + PMD.EOL +            "  void bar(String x) {" + PMD.EOL +            "  }" + PMD.EOL +            "}";    private static final String TWO_PARAMS =            "public class Test {" + PMD.EOL +            "  void bar(String x, int y) {" + PMD.EOL +            "  }" + PMD.EOL +            "}";    private static final String NO_PARAMS =            "public class Test {" + PMD.EOL +            "  void bar() {" + PMD.EOL +            "  }" + PMD.EOL +            "}";    private static final String ONE_PARAM_VARARG =            "public class Test {" + PMD.EOL +            "  void bar(String... s) {" + PMD.EOL +            "  }" + PMD.EOL +            "}";    private static final String TWO_PARAMS_VARARG =            "public class Test {" + PMD.EOL +            "  void bar(String s1, String... s2) {" + PMD.EOL +            "  }" + PMD.EOL +            "}";    private static final String CLASS_NAME =            "public class Foo {}";    private static final String METHOD_DECLARATIONS_RECORDED =            "public class Foo {" + PMD.EOL +            " private void bar() {}" + PMD.EOL +            "}";    private static final String METHODS_WITH_DIFF_ARG =            "public class Foo {" + PMD.EOL +            " private void bar(String x) {}" + PMD.EOL +            " private void bar() {}" + PMD.EOL +            "}";    private static final String ENUM_SCOPE =            "public enum Foo {" + PMD.EOL +            " HEAP(\"foo\");" + PMD.EOL +            " private final String fuz;" + PMD.EOL +            " public String getFuz() {" + PMD.EOL +            "  return fuz;" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ClassScopeTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.symboltable;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;import net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTName;import net.sourceforge.pmd.lang.java.ast.ASTPrimaryPrefix;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.lang.java.symboltable.LocalScope;import net.sourceforge.pmd.lang.java.symboltable.MethodScope;import net.sourceforge.pmd.lang.java.symboltable.NameDeclaration;import net.sourceforge.pmd.lang.java.symboltable.NameOccurrence;import net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration;import org.junit.Test;import java.util.List;import java.util.Map;public class LocalScopeTest extends STBBaseTst {    @Test    public void testNameWithThisOrSuperIsNotFlaggedAsUnused() {        LocalScope scope = new LocalScope();        ASTName name = new ASTName(1);        name.setImage("foo");        ASTPrimaryPrefix prefix = new ASTPrimaryPrefix(2);        prefix.setUsesThisModifier();        name.jjtAddChild(prefix, 1);        NameOccurrence occ = new NameOccurrence(name, "foo");        scope.addVariableNameOccurrence(occ);        assertFalse(scope.getVariableDeclarations().keySet().iterator().hasNext());    }    @Test    public void testNameWithSuperIsNotFlaggedAsUnused() {        LocalScope scope = new LocalScope();        ASTName name = new ASTName(1);        name.setImage("foo");        ASTPrimaryPrefix prefix = new ASTPrimaryPrefix(2);        prefix.setUsesSuperModifier();        name.jjtAddChild(prefix, 1);        NameOccurrence occ = new NameOccurrence(name, "foo");        scope.addVariableNameOccurrence(occ);        assertFalse(scope.getVariableDeclarations().keySet().iterator().hasNext());    }    @Test    public void testLocalVariableDeclarationFound() {        parseCode(TEST1);        List nodes = acu.findDescendantsOfType(ASTVariableDeclaratorId.class);        ASTVariableDeclaratorId node = (ASTVariableDeclaratorId) nodes.get(0);        Map vars = node.getScope().getVariableDeclarations();        assertEquals(1, vars.size());        NameDeclaration decl = (NameDeclaration) vars.keySet().iterator().next();        assertEquals("b", decl.getImage());    }    @Test    public void testQualifiedNameOccurrence() {        parseCode(TEST2);        List nodes = acu.findDescendantsOfType(ASTVariableDeclaratorId.class);        ASTVariableDeclaratorId node = (ASTVariableDeclaratorId) nodes.get(0);        Map vars = node.getScope().getVariableDeclarations();        NameDeclaration decl = (NameDeclaration) vars.keySet().iterator().next();        NameOccurrence occ = (NameOccurrence) ((List) vars.get(decl)).get(0);        assertEquals("b", occ.getImage());    }    @Test    public void testPostfixUsageIsRecorded() {        parseCode(TEST3);        List nodes = acu.findDescendantsOfType(ASTVariableDeclaratorId.class);        ASTVariableDeclaratorId node = (ASTVariableDeclaratorId) nodes.get(0);        Map vars = node.getScope().getVariableDeclarations();        NameDeclaration decl = (NameDeclaration) vars.keySet().iterator().next();        List usages = (List) vars.get(decl);        NameOccurrence occ = (NameOccurrence) usages.get(0);        assertEquals(4, occ.getLocation().getBeginLine());    }    @Test    public void testLocalVariableTypesAreRecorded() {        parseCode(TEST1);        List nodes = acu.findDescendantsOfType(ASTVariableDeclaratorId.class);        Map vars = ((ASTVariableDeclaratorId) nodes.get(0)).getScope().getVariableDeclarations();        VariableNameDeclaration decl = (VariableNameDeclaration) vars.keySet().iterator().next();        assertEquals("Bar", decl.getTypeImage());    }    @Test    public void testMethodArgumentTypesAreRecorded() {        parseCode(TEST5);        List nodes = acu.findDescendantsOfType(ASTFormalParameter.class);        Map vars = ((ASTFormalParameter) nodes.get(0)).getScope().getVariableDeclarations();        VariableNameDeclaration decl = (VariableNameDeclaration) vars.keySet().iterator().next();        assertEquals("String", decl.getTypeImage());    }    @Test    public void testgetEnclosingMethodScope() {        parseCode(TEST4);        ASTLocalVariableDeclaration node = acu.findDescendantsOfType(ASTLocalVariableDeclaration.class).get(0);        LocalScope scope = (LocalScope) node.getScope();        MethodScope ms = scope.getEnclosingMethodScope();        assertEquals(2, ms.getVariableDeclarations().size());    }    public static final String TEST1 =            "public class Foo {" + PMD.EOL +            " void foo() {" + PMD.EOL +            "  Bar b = new Bar();" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static final String TEST2 =            "public class Foo {" + PMD.EOL +            " void foo() {" + PMD.EOL +            "  Bar b = new Bar();" + PMD.EOL +            "  b.buz = 2;" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static final String TEST3 =            "public class Foo {" + PMD.EOL +            " void foo() {" + PMD.EOL +            "  int x = 2;" + PMD.EOL +            "  x++;" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static final String TEST4 =            "public class Foo {" + PMD.EOL +            " void foo(String x, String z) { int y; }" + PMD.EOL +            "}";    public static final String TEST5 =            "public class Foo {" + PMD.EOL +            " void foo(String x);" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(LocalScopeTest.class);    }}
package net.sourceforge.pmd.symboltable;import static org.junit.Assert.assertEquals;import java.util.List;import java.util.Map;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;import net.sourceforge.pmd.lang.java.symboltable.MethodScope;import net.sourceforge.pmd.lang.java.symboltable.NameOccurrence;import net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration;import org.junit.Test;public class MethodScopeTest extends STBBaseTst {    @Test    public void testMethodParameterOccurrenceRecorded() {        parseCode(TEST1);        Map m = acu.findDescendantsOfType(ASTMethodDeclaration.class).get(0).getScope().getVariableDeclarations();        VariableNameDeclaration vnd = (VariableNameDeclaration) m.keySet().iterator().next();        assertEquals("bar", vnd.getImage());        List occs = (List) m.get(vnd);        NameOccurrence occ = (NameOccurrence) occs.get(0);        assertEquals(3, occ.getLocation().getBeginLine());    }    @Test    public void testMethodName() {        parseCode(TEST1);        ASTMethodDeclaration meth = acu.findDescendantsOfType(ASTMethodDeclaration.class).get(0);        MethodScope ms = (MethodScope) meth.getScope();        assertEquals(ms.getName(), "foo");    }    @Test    public void testGenerics() {        parseCode(TEST_GENERICS);    }    public static final String TEST1 =            "public class Foo {" + PMD.EOL +            " void foo(int bar) {" + PMD.EOL +            "  bar = 2;" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String TEST_GENERICS =        "public class Tree {" + PMD.EOL +        "  private List<Object> subForest;" + PMD.EOL +        "  public <B> Tree<B> fmap(final F<B> f) { return Tree.<B>foo(); }" + PMD.EOL +        "  public List<Object> subForest() { return null; }" + PMD.EOL +        "}" + PMD.EOL;    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(MethodScopeTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.symboltable;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression;import net.sourceforge.pmd.lang.java.symboltable.NameFinder;import net.sourceforge.pmd.lang.java.symboltable.NameOccurrence;import org.junit.Test;import java.util.List;public class NameOccurrencesTest extends STBBaseTst {    @Test    public void testSuper() {        parseCode(TEST1);        List nodes = acu.findDescendantsOfType(ASTPrimaryExpression.class);        NameFinder occs = new NameFinder((ASTPrimaryExpression) nodes.get(0));        assertEquals("super", occs.getNames().get(0).getImage());    }    @Test    public void testThis() {        parseCode(TEST2);        List nodes = acu.findDescendantsOfType(ASTPrimaryExpression.class);        NameFinder occs = new NameFinder((ASTPrimaryExpression) nodes.get(0));        assertEquals("this", occs.getNames().get(0).getImage());        assertEquals("x", occs.getNames().get(1).getImage());    }    @Test    public void testNameLinkage() {        parseCode(TEST2);        List nodes = acu.findDescendantsOfType(ASTPrimaryExpression.class);        NameFinder occs = new NameFinder((ASTPrimaryExpression) nodes.get(0));        NameOccurrence thisNameOccurrence = occs.getNames().get(0);        assertEquals(thisNameOccurrence.getNameForWhichThisIsAQualifier(), occs.getNames().get(1));    }    @Test    public void testSimpleVariableOccurrence() {        parseCode(TEST3);        List nodes = acu.findDescendantsOfType(ASTPrimaryExpression.class);        NameFinder occs = new NameFinder((ASTPrimaryExpression) nodes.get(0));        assertEquals("x", occs.getNames().get(0).getImage());        assertFalse(occs.getNames().get(0).isThisOrSuper());        assertFalse(occs.getNames().get(0).isMethodOrConstructorInvocation());        assertTrue(occs.getNames().get(0).isOnLeftHandSide());    }    @Test    public void testQualifiedOccurrence() {        parseCode(TEST4);        List nodes = acu.findDescendantsOfType(ASTPrimaryExpression.class);        NameFinder occs = new NameFinder((ASTPrimaryExpression) nodes.get(0));        assertEquals("b", occs.getNames().get(0).getImage());        assertEquals("x", occs.getNames().get(1).getImage());    }        @Test    public void testIsSelfAssignment(){        parseCode(TEST5);        List nodes = acu.findDescendantsOfType(ASTPrimaryExpression.class);        NameFinder occs = new NameFinder((ASTPrimaryExpression) nodes.get(2));        assertTrue(occs.getNames().get(0).isSelfAssignment());        parseCode(TEST6);        nodes = acu.findDescendantsOfType(ASTPrimaryExpression.class);        occs = new NameFinder((ASTPrimaryExpression) nodes.get(2));        assertTrue(occs.getNames().get(0).isSelfAssignment());    }    public static final String TEST1 =            "public class Foo {" + PMD.EOL +            " void foo() {" + PMD.EOL +            "  super.x = 2;" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static final String TEST2 =            "public class Foo {" + PMD.EOL +            " void foo() {" + PMD.EOL +            "  this.x = 2;" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static final String TEST3 =            "public class Foo {" + PMD.EOL +            " void foo() {" + PMD.EOL +            "  x = 2;" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static final String TEST4 =            "public class Foo {" + PMD.EOL +            " void foo() {" + PMD.EOL +            "  b.x = 2;" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static final String TEST5 =        "public class Foo{" + PMD.EOL +        "    private int counter;" + PMD.EOL +        "    private Foo(){" + PMD.EOL +        "        counter = 0;" + PMD.EOL +        "    }" + PMD.EOL +        "    private int foo(){" + PMD.EOL +        "        if (++counter < 3) {" + PMD.EOL +        "            return 0;" + PMD.EOL +        "        }" + PMD.EOL +        "        return 1;" + PMD.EOL +        "    }" + PMD.EOL +        "}";        public static final String TEST6 =        "public class Foo{" + PMD.EOL +        "    private int counter;" + PMD.EOL +        "    private Foo(){" + PMD.EOL +        "        counter = 0;" + PMD.EOL +        "    }" + PMD.EOL +        "    private int foo(){" + PMD.EOL +        "        if (++this.counter < 3) {" + PMD.EOL +        "            return 0;" + PMD.EOL +        "        }" + PMD.EOL +        "        return 1;" + PMD.EOL +        "    }" + PMD.EOL +        "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(NameOccurrencesTest.class);    }}
package net.sourceforge.pmd.symboltable;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.symboltable.ClassNameDeclaration;import net.sourceforge.pmd.lang.java.symboltable.Scope;import org.junit.Test;import java.util.Map;public class GlobalScopeTest extends STBBaseTst {    @Test    public void testClassDeclAppears() {        parseCode(TEST1);        ASTCompilationUnit decl = acu;        Scope scope = decl.getScope();        Map m = scope.getClassDeclarations();        ClassNameDeclaration classNameDeclaration = (ClassNameDeclaration) m.keySet().iterator().next();        assertEquals(classNameDeclaration.getImage(), "Foo");    }    @Test    public void testEnums() {        parseCode15(TEST2);    }    private static final String TEST1 =            "public class Foo {}" + PMD.EOL;    private static final String TEST2 =            "public enum Bar {" + PMD.EOL +            "  FOO1 {          " + PMD.EOL +            "    private static final String FIELD_NAME = \"\";" + PMD.EOL +            "  }," + PMD.EOL +            "  FOO2 {          " + PMD.EOL +            "    private static final String FIELD_NAME = \"\";" + PMD.EOL +            "  }" + PMD.EOL +            "}" + PMD.EOL;    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(GlobalScopeTest.class);    }}
package net.sourceforge.pmd.symboltable;import static org.junit.Assert.assertEquals;import java.util.List;import java.util.Map;import java.util.Set;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.lang.java.symboltable.ClassScope;import net.sourceforge.pmd.lang.java.symboltable.MethodNameDeclaration;import net.sourceforge.pmd.lang.java.symboltable.NameOccurrence;import org.junit.Test;public class MethodNameDeclarationTest extends STBBaseTst {    @Test    public void testEquality() {    // Verify proper number of nodes are not equal        parseCode15(SIMILAR);        ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);        Map<MethodNameDeclaration, List<NameOccurrence>> m = ((ClassScope) n.getScope()).getMethodDeclarations();        Set<MethodNameDeclaration> methodNameDeclarations = m.keySet();        assertEquals("Wrong number of method name declarations", methodNameDeclarations.size(), 3);    }    private static final String SIMILAR =            "public class Foo {" + PMD.EOL +            " public void bar() {" + PMD.EOL +            "  bar(x, y);" + PMD.EOL +            " }" + PMD.EOL +            " private void bar(int x, int y) {}" + PMD.EOL +            " private void bar(int x, int... y) {}" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(MethodNameDeclarationTest.class);    }}
package net.sourceforge.pmd.symboltable;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.symboltable.ClassNameDeclaration;import org.junit.Test;import java.util.Iterator;import java.util.Map;public class SourceFileScopeTest extends STBBaseTst {    @Test    public void testClassDeclAppears() {        parseCode(TEST1);        Map m = acu.getScope().getClassDeclarations();        ClassNameDeclaration classNameDeclaration = (ClassNameDeclaration) m.keySet().iterator().next();        assertEquals(classNameDeclaration.getImage(), "Foo");    }    @Test    public void testPackageIsEmptyString() {        parseCode(TEST1);        ASTCompilationUnit decl = acu;        assertEquals(decl.getScope().getEnclosingSourceFileScope().getPackageName(), "");    }    @Test    public void testPackageNameFound() {        parseCode(TEST2);        ASTCompilationUnit decl = acu;        assertEquals(decl.getScope().getEnclosingSourceFileScope().getPackageName(), "foo.bar");    }    @Test    public void testNestedClasses() {        parseCode(TEST3);        Map m = acu.getScope().getClassDeclarations();        Iterator iterator = m.keySet().iterator();        ClassNameDeclaration classNameDeclaration = (ClassNameDeclaration) iterator.next();        assertEquals(classNameDeclaration.getImage(), "Foo");        assertFalse(iterator.hasNext());    }    private static final String TEST1 =            "public class Foo {}" + PMD.EOL;    private static final String TEST2 =            "package foo.bar;" + PMD.EOL +            "public class Foo {" + PMD.EOL +            "}" + PMD.EOL;    private static final String TEST3 =            "public class Foo {" + PMD.EOL +            " public class Bar {" + PMD.EOL +            " }" + PMD.EOL +            "}" + PMD.EOL;    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(SourceFileScopeTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.symboltable;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.Iterator;import java.util.List;import java.util.Map;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.java.ast.ASTBlock;import net.sourceforge.pmd.lang.java.ast.ASTCatchStatement;import net.sourceforge.pmd.lang.java.ast.ASTEqualityExpression;import net.sourceforge.pmd.lang.java.ast.ASTInitializer;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;import net.sourceforge.pmd.lang.java.symboltable.Scope;import net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration;import org.junit.Ignore;import org.junit.Test;public class AcceptanceTest extends STBBaseTst {    @Ignore    @Test    public void testClashingSymbols() {        parseCode(TEST1);    }    @Ignore    @Test    public void testInitializer() {        parseCode(TEST_INITIALIZERS);        ASTInitializer a = acu.findDescendantsOfType(ASTInitializer.class).get(0);        assertFalse(a.isStatic());        a = acu.findDescendantsOfType(ASTInitializer.class).get(1);        assertTrue(a.isStatic());    }    @Ignore    @Test    public void testCatchBlocks() {        parseCode(TEST_CATCH_BLOCKS);        ASTCatchStatement c = acu.findDescendantsOfType(ASTCatchStatement.class).get(0);        ASTBlock a = c.findDescendantsOfType(ASTBlock.class).get(0);        Scope s = a.getScope();        Map vars = s.getParent().getVariableDeclarations();        assertEquals(1, vars.size());        VariableNameDeclaration v = (VariableNameDeclaration)vars.keySet().iterator().next();        assertEquals("e", v.getImage());        assertEquals(1, ((List)vars.get(v)).size());    }    @Ignore    @Test    public void testEq() {        parseCode(TEST_EQ);        ASTEqualityExpression e = acu.findDescendantsOfType(ASTEqualityExpression.class).get(0);        ASTMethodDeclaration method = e.getFirstParentOfType(ASTMethodDeclaration.class);        Scope s = method.getScope();        Map m = s.getVariableDeclarations();        for (Iterator i = m.keySet().iterator(); i.hasNext();) {            VariableNameDeclaration vnd = (VariableNameDeclaration)i.next();            Node node = vnd.getNode();            //System.out.println();        }        //System.out.println(m.size());    }    @Test    public void testFieldFinder() {        //FIXME - Does this test do anything?        //Not really, I think it's just a demo -- Tom/*        System.out.println(TEST_FIELD);        parseCode(TEST_FIELD);        List<ASTVariableDeclaratorId> variableDeclaratorIds = acu.findDescendantsOfType(ASTVariableDeclaratorId.class);        ASTVariableDeclaratorId declaration = null;        for (Iterator iter = variableDeclaratorIds.iterator(); iter.hasNext();) {            declaration = (ASTVariableDeclaratorId) iter.next();            if ("b".equals(declaration.getImage()))                break;        }        NameOccurrence no = declaration.getUsages().iterator().next();        SimpleNode location = no.getLocation();        System.out.println("variable " + declaration.getImage() + " is used here: " + location.getImage());*/    }    @Ignore    @Test    public void testDemo() {        parseCode(TEST_DEMO);        System.out.println(TEST_DEMO);        ASTMethodDeclaration node = acu.findDescendantsOfType(ASTMethodDeclaration.class).get(0);        Scope s = node.getScope();        Map m = s.getVariableDeclarations();        for (Iterator i = m.keySet().iterator(); i.hasNext();) {            VariableNameDeclaration d = (VariableNameDeclaration) i.next();            System.out.println("Variable: " + d.getImage());            System.out.println("Type: " + d.getTypeImage());        }    }/*            List u = (List)m.get(d);            System.out.println("Usages: " + u.size());            NameOccurrence o = (NameOccurrence)u.get(0);            int beginLine = o.getLocation().getBeginLine();            System.out.println("Used in line " + beginLine);*/    private static final String TEST_DEMO =            "public class Foo  {" + PMD.EOL +            " void bar(ArrayList buz) { " + PMD.EOL +            " } " + PMD.EOL +            "}" + PMD.EOL;    private static final String TEST_EQ =            "public class Foo  {" + PMD.EOL +            " boolean foo(String a, String b) { " + PMD.EOL +            "  return a == b; " + PMD.EOL +            " } " + PMD.EOL +            "}" + PMD.EOL;    private static final String TEST1 =            "import java.io.*;" + PMD.EOL +            "public class Foo  {" + PMD.EOL +            " void buz( ) {" + PMD.EOL +            "  Object o = new Serializable() { int x; };" + PMD.EOL +            "  Object o1 = new Serializable() { int x; };" + PMD.EOL +            " }" + PMD.EOL +            "}" + PMD.EOL;    private static final String TEST_INITIALIZERS =            "public class Foo  {" + PMD.EOL +            " {} " + PMD.EOL +            " static {} " + PMD.EOL +            "}" + PMD.EOL;    private static final String TEST_CATCH_BLOCKS =            "public class Foo  {" + PMD.EOL +            " void foo() { " + PMD.EOL +            "  try { " + PMD.EOL +            "  } catch (Exception e) { " + PMD.EOL +            "   e.printStackTrace(); " + PMD.EOL +            "  } " + PMD.EOL +            " } " + PMD.EOL +            "}" + PMD.EOL;    private static final String TEST_FIELD =    "public class MyClass {" + PMD.EOL +    " private int a; " + PMD.EOL +    " boolean b = MyClass.ASCENDING; " + PMD.EOL +    "}" + PMD.EOL;    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(AcceptanceTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.symboltable;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.lang.java.symboltable.ImageFinderFunction;import net.sourceforge.pmd.lang.java.symboltable.NameDeclaration;import net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration;import org.junit.Test;import java.util.ArrayList;import java.util.List;public class ImageFinderFunctionTest {    @Test    public void testSingleImage() {        ImageFinderFunction f = new ImageFinderFunction("foo");        ASTVariableDeclaratorId node = new ASTVariableDeclaratorId(1);        node.setImage("foo");        NameDeclaration decl = new VariableNameDeclaration(node);        f.applyTo(decl);        assertEquals(decl, f.getDecl());    }    @Test    public void testSeveralImages() {        List<String> imgs = new ArrayList<String>();        imgs.add("Foo.foo");        imgs.add("foo");        ImageFinderFunction f = new ImageFinderFunction(imgs);        ASTVariableDeclaratorId node = new ASTVariableDeclaratorId(1);        node.setImage("foo");        NameDeclaration decl = new VariableNameDeclaration(node);        f.applyTo(decl);        assertEquals(decl, f.getDecl());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ImageFinderFunctionTest.class);    }}
package net.sourceforge.pmd.typeresolution;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNotNull;import net.sourceforge.pmd.lang.java.typeresolution.PMDASMClassLoader;import org.junit.Before;import org.junit.Test;import java.util.Map;public class PMDASMClassLoaderTest {    private PMDASMClassLoader cl;        @Before    public void setUp() throws Exception {        cl = new PMDASMClassLoader(getClass().getClassLoader());    }    @Test    public void testLoadClassWithImportOnDemand() throws Exception {        String className = "net.sourceforge.pmd.typeresolution.ClassWithImportOnDemand";        Class<?> clazz = cl.loadClass(className);        assertNotNull(clazz);        Map<String, String> imports = cl.getImportedClasses(className);        assertNotNull(imports);        assertEquals(4, imports.size());        assertEquals("java.util.List", imports.get("List"));        assertEquals("java.util.ArrayList", imports.get("ArrayList"));        assertEquals("java.lang.Object", imports.get("Object"));        assertEquals("net.sourceforge.pmd.typeresolution.ClassWithImportOnDemand", imports.get("ClassWithImportOnDemand"));    }        @Test    public void testClassWithImportInnerOnDemand() throws Exception {        String className = "net.sourceforge.pmd.typeresolution.ClassWithImportInnerOnDemand";        Class<?> clazz = cl.loadClass(className);        assertNotNull(clazz);        Map<String, String> imports = cl.getImportedClasses(className);        assertNotNull(imports);        assertEquals(8, imports.size());        assertEquals("java.util.Iterator", imports.get("Iterator"));        assertEquals("java.util.Map", imports.get("Map"));        assertEquals("java.util.Set", imports.get("Set"));        assertEquals("java.util.Map$Entry", imports.get("Entry"));        assertEquals("java.util.Map$Entry", imports.get("Map$Entry"));        assertEquals("java.util.Map$Entry", imports.get("Map$Entry"));        assertEquals("java.lang.Object", imports.get("Object"));        assertEquals("net.sourceforge.pmd.typeresolution.ClassWithImportInnerOnDemand", imports.get("ClassWithImportInnerOnDemand"));    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(PMDASMClassLoaderTest.class);    }}
package net.sourceforge.pmd.typeresolution;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNull;import java.io.InputStream;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.List;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.LanguageVersionHandler;import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;import net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTExpression;import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;import net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTLiteral;import net.sourceforge.pmd.lang.java.ast.ASTNullLiteral;import net.sourceforge.pmd.lang.java.ast.ASTReferenceType;import net.sourceforge.pmd.lang.java.ast.ASTStatementExpression;import net.sourceforge.pmd.lang.java.ast.ASTType;import net.sourceforge.pmd.lang.java.ast.ASTTypeDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.lang.java.ast.TypeNode;import net.sourceforge.pmd.lang.java.typeresolution.ClassTypeResolver;import net.sourceforge.pmd.typeresolution.testdata.AnonymousInnerClass;import net.sourceforge.pmd.typeresolution.testdata.ArrayListFound;import net.sourceforge.pmd.typeresolution.testdata.ExtraTopLevelClass;import net.sourceforge.pmd.typeresolution.testdata.InnerClass;import net.sourceforge.pmd.typeresolution.testdata.Literals;import net.sourceforge.pmd.typeresolution.testdata.Operators;import net.sourceforge.pmd.typeresolution.testdata.Promotion;import org.jaxen.JaxenException;import org.junit.Test;public class ClassTypeResolverTest {@Testpublic void testClassNameExists() {ClassTypeResolver classTypeResolver = new ClassTypeResolver();assertEquals(true, classTypeResolver.classNameExists("java.lang.System"));assertEquals(false, classTypeResolver.classNameExists("im.sure.that.this.does.not.Exist"));assertEquals(true, classTypeResolver.classNameExists("java.awt.List"));}@Testpublic void acceptanceTest() {ASTCompilationUnit acu = parseAndTypeResolveForClass(ArrayListFound.class);assertEquals(ArrayListFound.class, acu.getFirstDescendantOfType(ASTTypeDeclaration.class).getType());assertEquals(ArrayListFound.class, acu.getFirstDescendantOfType(ASTClassOrInterfaceDeclaration.class).getType());ASTImportDeclaration id = acu.getFirstDescendantOfType(ASTImportDeclaration.class);assertEquals("java.util", id.getPackage().getName());assertEquals(java.util.ArrayList.class, id.getType());assertEquals(ArrayList.class, acu.getFirstDescendantOfType(ASTClassOrInterfaceType.class).getType());assertEquals(ArrayList.class, acu.getFirstDescendantOfType(ASTReferenceType.class).getType());assertEquals(ArrayList.class, acu.getFirstDescendantOfType(ASTType.class).getType());assertEquals(ArrayList.class, acu.getFirstDescendantOfType(ASTVariableDeclaratorId.class).getType());assertEquals(ArrayList.class, acu.getFirstDescendantOfType(ASTVariableDeclarator.class).getType());assertEquals(ArrayList.class, acu.getFirstDescendantOfType(ASTFieldDeclaration.class).getType());}@Testpublic void testExtraTopLevelClass() throws ClassNotFoundException {ASTCompilationUnit acu = parseAndTypeResolveForClass(ExtraTopLevelClass.class);Class<?> theExtraTopLevelClass = Class.forName("net.sourceforge.pmd.typeresolution.testdata.TheExtraTopLevelClass");// First classASTTypeDeclaration typeDeclaration = (ASTTypeDeclaration)acu.jjtGetChild(1);assertEquals(ExtraTopLevelClass.class, typeDeclaration.getType());assertEquals(ExtraTopLevelClass.class,typeDeclaration.getFirstDescendantOfType(ASTClassOrInterfaceDeclaration.class).getType());// Second classtypeDeclaration = (ASTTypeDeclaration)acu.jjtGetChild(2);assertEquals(theExtraTopLevelClass, typeDeclaration.getType());assertEquals(theExtraTopLevelClass,typeDeclaration.getFirstDescendantOfType(ASTClassOrInterfaceDeclaration.class).getType());}@Testpublic void testInnerClass() throws ClassNotFoundException {ASTCompilationUnit acu = parseAndTypeResolveForClass(InnerClass.class);Class<?> theInnerClass = Class.forName("net.sourceforge.pmd.typeresolution.testdata.InnerClass$TheInnerClass");// Outer classASTTypeDeclaration typeDeclaration = acu.getFirstDescendantOfType(ASTTypeDeclaration.class);assertEquals(InnerClass.class, typeDeclaration.getType());ASTClassOrInterfaceDeclaration outerClassDeclaration = typeDeclaration.getFirstDescendantOfType(ASTClassOrInterfaceDeclaration.class);assertEquals(InnerClass.class, outerClassDeclaration.getType());// Inner classassertEquals(theInnerClass,outerClassDeclaration.getFirstDescendantOfType(ASTClassOrInterfaceDeclaration.class).getType());// Method parameter as inner classASTFormalParameter formalParameter = typeDeclaration.getFirstDescendantOfType(ASTFormalParameter.class);assertEquals(theInnerClass, formalParameter.getTypeNode().getType());}@Testpublic void testAnonymousInnerClass() throws ClassNotFoundException {ASTCompilationUnit acu = parseAndTypeResolveForClass(AnonymousInnerClass.class);Class<?> theAnonymousInnerClass = Class.forName("net.sourceforge.pmd.typeresolution.testdata.AnonymousInnerClass$1");// Outer classASTTypeDeclaration typeDeclaration = acu.getFirstDescendantOfType(ASTTypeDeclaration.class);assertEquals(AnonymousInnerClass.class, typeDeclaration.getType());ASTClassOrInterfaceDeclaration outerClassDeclaration = typeDeclaration.getFirstDescendantOfType(ASTClassOrInterfaceDeclaration.class);assertEquals(AnonymousInnerClass.class, outerClassDeclaration.getType());// Anonymous Inner classassertEquals(theAnonymousInnerClass,outerClassDeclaration.getFirstDescendantOfType(ASTAllocationExpression.class).getType());}@Test@SuppressWarnings("unchecked")public void testLiterals() throws JaxenException {ASTCompilationUnit acu = parseAndTypeResolveForClass(Literals.class);List<ASTLiteral> literals = acu.findChildNodesWithXPath("//Literal");int index = 0;// String s = "s";assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(String.class, literals.get(index++).getType());// boolean boolean1 = false;assertEquals(Boolean.TYPE, literals.get(index).getFirstDescendantOfType(ASTBooleanLiteral.class).getType());assertEquals(Boolean.TYPE, literals.get(index++).getType());// boolean boolean2 = true;assertEquals(Boolean.TYPE, literals.get(index).getFirstDescendantOfType(ASTBooleanLiteral.class).getType());assertEquals(Boolean.TYPE, literals.get(index++).getType());// Object obj = null;assertNull(literals.get(index).getFirstDescendantOfType(ASTNullLiteral.class).getType());assertNull(literals.get(index++).getType());// byte byte1 = 0;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// byte byte2 = 0x0F;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// byte byte3 = -007;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// short short1 = 0;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// short short2 = 0x0F;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// short short3 = -007;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// char char1 = 0;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// char char2 = 0x0F;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// char char3 = 007;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// char char4 = 'a';assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Character.TYPE, literals.get(index++).getType());// int int1 = 0;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// int int2 = 0x0F;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// int int3 = -007;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// int int4 = 'a';assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Character.TYPE, literals.get(index++).getType());// long long1 = 0;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// long long2 = 0x0F;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// long long3 = -007;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// long long4 = 0L;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Long.TYPE, literals.get(index++).getType());// long long5 = 0x0Fl;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Long.TYPE, literals.get(index++).getType());// long long6 = -007L;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Long.TYPE, literals.get(index++).getType());// long long7 = 'a';assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Character.TYPE, literals.get(index++).getType());// float float1 = 0.0f;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Float.TYPE, literals.get(index++).getType());// float float2 = -10e+01f;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Float.TYPE, literals.get(index++).getType());// float float3 = 0x08.08p3f;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Float.TYPE, literals.get(index++).getType());// float float4 = 0xFF;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// float float5 = 'a';assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Character.TYPE, literals.get(index++).getType());// double double1 = 0.0;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Double.TYPE, literals.get(index++).getType());// double double2 = -10e+01;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Double.TYPE, literals.get(index++).getType());// double double3 = 0x08.08p3;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Double.TYPE, literals.get(index++).getType());// double double4 = 0xFF;assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Integer.TYPE, literals.get(index++).getType());// double double5 = 'a';assertEquals(0, literals.get(index).jjtGetNumChildren());assertEquals(Character.TYPE, literals.get(index++).getType());// Make sure we got them all.assertEquals("All literals not tested", index, literals.size());}@Test@SuppressWarnings("unchecked")public void testUnaryNumericPromotion() throws JaxenException {ASTCompilationUnit acu = parseAndTypeResolveForClass(Promotion.class);List<ASTExpression> expressions = acu.findChildNodesWithXPath("//Block[preceding-sibling::MethodDeclarator[@Image = 'unaryNumericPromotion']]//Expression[UnaryExpression]");int index = 0;assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Float.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());// Make sure we got them all.assertEquals("All expressions not tested", index, expressions.size());}@Test@SuppressWarnings("unchecked")public void testBinaryNumericPromotion() throws JaxenException {ASTCompilationUnit acu = parseAndTypeResolveForClass(Promotion.class);List<ASTExpression> expressions = acu.findChildNodesWithXPath("//Block[preceding-sibling::MethodDeclarator[@Image = 'binaryNumericPromotion']]//Expression[AdditiveExpression]");int index = 0;// LHS = byteassertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Float.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());// LHS = shortassertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Float.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());// LHS = charassertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Float.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());// LHS = intassertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Float.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());// LHS = longassertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Float.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());// LHS = floatassertEquals(Float.TYPE, expressions.get(index++).getType());assertEquals(Float.TYPE, expressions.get(index++).getType());assertEquals(Float.TYPE, expressions.get(index++).getType());assertEquals(Float.TYPE, expressions.get(index++).getType());assertEquals(Float.TYPE, expressions.get(index++).getType());assertEquals(Float.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());// LHS = doubleassertEquals(Double.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());// Make sure we got them all.assertEquals("All expressions not tested", index, expressions.size());}@Test@SuppressWarnings("unchecked")public void testBinaryStringPromotion() throws JaxenException {ASTCompilationUnit acu = parseAndTypeResolveForClass(Promotion.class);List<ASTExpression> expressions = acu.findChildNodesWithXPath("//Block[preceding-sibling::MethodDeclarator[@Image = 'binaryStringPromotion']]//Expression");int index = 0;assertEquals(String.class, expressions.get(index++).getType());assertEquals(String.class, expressions.get(index++).getType());assertEquals(String.class, expressions.get(index++).getType());assertEquals(String.class, expressions.get(index++).getType());assertEquals(String.class, expressions.get(index++).getType());// Make sure we got them all.assertEquals("All expressions not tested", index, expressions.size());}@Test@SuppressWarnings("unchecked")public void testUnaryLogicalOperators() throws JaxenException {ASTCompilationUnit acu = parseAndTypeResolveForClass(Operators.class);List<ASTExpression> expressions = acu.findChildNodesWithXPath("//Block[preceding-sibling::MethodDeclarator[@Image = 'unaryLogicalOperators']]//Expression");int index = 0;assertEquals(Boolean.TYPE, expressions.get(index++).getType());assertEquals(Boolean.TYPE, expressions.get(index++).getType());// Make sure we got them all.assertEquals("All expressions not tested", index, expressions.size());}@Test@SuppressWarnings("unchecked")public void testBinaryLogicalOperators() throws JaxenException {ASTCompilationUnit acu = parseAndTypeResolveForClass(Operators.class);List<ASTExpression> expressions = acu.findChildNodesWithXPath("//Block[preceding-sibling::MethodDeclarator[@Image = 'binaryLogicalOperators']]//Expression");int index = 0;assertEquals(Boolean.TYPE, expressions.get(index++).getType());assertEquals(Boolean.TYPE, expressions.get(index++).getType());assertEquals(Boolean.TYPE, expressions.get(index++).getType());assertEquals(Boolean.TYPE, expressions.get(index++).getType());assertEquals(Boolean.TYPE, expressions.get(index++).getType());assertEquals(Boolean.TYPE, expressions.get(index++).getType());assertEquals(Boolean.TYPE, expressions.get(index++).getType());assertEquals(Boolean.TYPE, expressions.get(index++).getType());assertEquals(Boolean.TYPE, expressions.get(index++).getType());assertEquals(Boolean.TYPE, expressions.get(index++).getType());assertEquals(Boolean.TYPE, expressions.get(index++).getType());assertEquals(Boolean.TYPE, expressions.get(index++).getType());assertEquals(Boolean.TYPE, expressions.get(index++).getType());// Make sure we got them all.assertEquals("All expressions not tested", index, expressions.size());}@Test@SuppressWarnings("unchecked")public void testUnaryNumericOperators() throws JaxenException {ASTCompilationUnit acu = parseAndTypeResolveForClass(Operators.class);List<TypeNode> expressions = new ArrayList<TypeNode>();expressions.addAll(acu.findChildNodesWithXPath("//Block[preceding-sibling::MethodDeclarator[@Image = 'unaryNumericOperators']]//Expression"));expressions.addAll(acu.findChildNodesWithXPath("//Block[preceding-sibling::MethodDeclarator[@Image = 'unaryNumericOperators']]//PostfixExpression"));expressions.addAll(acu.findChildNodesWithXPath("//Block[preceding-sibling::MethodDeclarator[@Image = 'unaryNumericOperators']]//PreIncrementExpression"));expressions.addAll(acu.findChildNodesWithXPath("//Block[preceding-sibling::MethodDeclarator[@Image = 'unaryNumericOperators']]//PreDecrementExpression"));int index = 0;assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());assertEquals(Double.TYPE, expressions.get(index++).getType());// Make sure we got them all.assertEquals("All expressions not tested", index, expressions.size());}@Test@SuppressWarnings("unchecked")public void testBinaryNumericOperators() throws JaxenException {ASTCompilationUnit acu = parseAndTypeResolveForClass(Operators.class);List<ASTExpression> expressions = acu.findChildNodesWithXPath("//Block[preceding-sibling::MethodDeclarator[@Image = 'binaryNumericOperators']]//Expression");int index = 0;assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());assertEquals(Integer.TYPE, expressions.get(index++).getType());// Make sure we got them all.assertEquals("All expressions not tested", index, expressions.size());}@Test@SuppressWarnings("unchecked")public void testAssignmentOperators() throws JaxenException {ASTCompilationUnit acu = parseAndTypeResolveForClass(Operators.class);List<ASTStatementExpression> expressions = acu.findChildNodesWithXPath("//Block[preceding-sibling::MethodDeclarator[@Image = 'assignmentOperators']]//StatementExpression");int index = 0;assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());assertEquals(Long.TYPE, expressions.get(index++).getType());// Make sure we got them all.assertEquals("All expressions not tested", index, expressions.size());}public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(ClassTypeResolverTest.class);}// Note: If you're using Eclipse or some other IDE to run this test, you _must_ have the regress folder in// the classpath.  Normally the IDE doesn't put source directories themselves directly in the classpath, only// the output directories are in the classpath.private ASTCompilationUnit parseAndTypeResolveForClass(Class<?> clazz) {String sourceFile = clazz.getName().replace('.', '/') + ".java";InputStream is = ClassTypeResolverTest.class.getClassLoader().getResourceAsStream(sourceFile);if (is == null) {throw new IllegalArgumentException("Unable to find source file " + sourceFile + " for " + clazz);}LanguageVersionHandler languageVersionHandler = LanguageVersion.JAVA_15.getLanguageVersionHandler();ASTCompilationUnit acu = (ASTCompilationUnit)languageVersionHandler.getParser(languageVersionHandler.getDefaultParserOptions()).parse(null, new InputStreamReader(is));languageVersionHandler.getSymbolFacade().start(acu);languageVersionHandler.getTypeResolutionFacade(ClassTypeResolverTest.class.getClassLoader()).start(acu);return acu;}}
package net.sourceforge.pmd.ast;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;import java.util.Set;public class ASTPrimarySuffixTest extends ParserTst {    @Test    public void testArrayDereference() throws Throwable {        Set ops = getNodes(ASTPrimarySuffix.class, TEST1);        assertTrue(((ASTPrimarySuffix) (ops.iterator().next())).isArrayDereference());    }    @Test    public void testArguments() throws Throwable {        Set ops = getNodes(ASTPrimarySuffix.class, TEST2);        assertTrue(((ASTPrimarySuffix) (ops.iterator().next())).isArguments());    }    private static final String TEST1 =            "public class Foo {" + PMD.EOL +            "  {x[0] = 2;}" + PMD.EOL +            "}";    private static final String TEST2 =            "public class Foo {" + PMD.EOL +            "  {foo(a);}" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTPrimarySuffixTest.class);    }}
package net.sourceforge.pmd.ast;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTLiteral;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;import java.util.Set;public class ASTLiteralTest extends ParserTst {    @Test    public void testIsStringLiteral() throws Throwable {        Set literals = getNodes(ASTLiteral.class, TEST1);        assertTrue(((ASTLiteral)(literals.iterator().next())).isStringLiteral());    }    @Test    public void testIsNotStringLiteral() throws Throwable {        Set literals = getNodes(ASTLiteral.class, TEST2);        assertFalse(((ASTLiteral)(literals.iterator().next())).isStringLiteral());    }    @Test    public void testIsIntIntLiteral() throws Throwable {        Set literals = getNodes(ASTLiteral.class, TEST3);        assertTrue(((ASTLiteral)(literals.iterator().next())).isIntLiteral());    }    @Test    public void testIsIntLongLiteral() throws Throwable {        Set literals = getNodes(ASTLiteral.class, TEST4);        assertTrue(((ASTLiteral)(literals.iterator().next())).isIntLiteral());    }    @Test    public void testIsFloatFloatLiteral() throws Throwable {        Set literals = getNodes(ASTLiteral.class, TEST5);        assertTrue(((ASTLiteral)(literals.iterator().next())).isFloatLiteral());    }    @Test    public void testIsFloatDoubleLiteral() throws Throwable {        Set literals = getNodes(ASTLiteral.class, TEST6);        assertTrue(((ASTLiteral)(literals.iterator().next())).isFloatLiteral());    }    @Test    public void testIsCharLiteral() throws Throwable {        Set literals = getNodes(ASTLiteral.class, TEST7);        assertTrue(((ASTLiteral)(literals.iterator().next())).isCharLiteral());    }    private static final String TEST1 =    "public class Foo {" + PMD.EOL +    "  String x = \"foo\";" + PMD.EOL +    "}";    private static final String TEST2 =    "public class Foo {" + PMD.EOL +    "  int x = 42;" + PMD.EOL +    "}";    private static final String TEST3 =    "public class Foo {" + PMD.EOL +    "  int x = 42;" + PMD.EOL +    "}";    private static final String TEST4 =    "public class Foo {" + PMD.EOL +    "  int x = 42L;" + PMD.EOL +    "}";    private static final String TEST5 =    "public class Foo {" + PMD.EOL +    "  float x = 3.14159f;" + PMD.EOL +    "}";    private static final String TEST6 =    "public class Foo {" + PMD.EOL +    "  float x = 3.14159;" + PMD.EOL +    "}";    private static final String TEST7 =    "public class Foo {" + PMD.EOL +    "  char x = 'x';" + PMD.EOL +    "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTLiteralTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ast;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;import java.util.Iterator;import java.util.Set;public class ClassDeclTest extends ParserTst {    @Test    public void testPublic() throws Throwable {        String access[] = {"public"};        ASTClassOrInterfaceDeclaration acd = getClassDecl(access);        verifyFlags(acd, true, false, false, false);    }    @Test    public void testAbstract() throws Throwable {        String access[] = {"abstract"};        ASTClassOrInterfaceDeclaration acd = getClassDecl(access);        verifyFlags(acd, false, true, false, false);    }    @Test    public void testFinal() throws Throwable {        String access[] = {"final"};        ASTClassOrInterfaceDeclaration acd = getClassDecl(access);        verifyFlags(acd, false, false, true, false);    }    @Test    public void testStrict() throws Throwable {        String access[] = {"strictfp"};        ASTClassOrInterfaceDeclaration acd = getClassDecl(access);        verifyFlags(acd, false, false, false, true);    }    @Test    public void testPublicFinal() throws Throwable {        String access[] = {"public", "final"};        ASTClassOrInterfaceDeclaration acd = getClassDecl(access);        verifyFlags(acd, true, false, true, false);    }    public void verifyFlags(ASTClassOrInterfaceDeclaration acd, boolean bPublic, boolean bAbstract, boolean bFinal, boolean bStrict) {        assertEquals("Public: ", bPublic, acd.isPublic());        assertEquals("Abstract: ", bAbstract, acd.isAbstract());        assertEquals("Final: ", bFinal, acd.isFinal());        assertEquals("Strict: ", bStrict, acd.isStrictfp());    }    public ASTClassOrInterfaceDeclaration getClassDecl(String access[]) throws Throwable {        String javaCode = "";        for (int i = 0; i < access.length; i++) {            javaCode += access[i] + " ";        }        javaCode += " class Test { } ";        Set classes = getNodes(ASTClassOrInterfaceDeclaration.class, javaCode);        assertEquals("Wrong number of classes", 1, classes.size());        Iterator i = classes.iterator();        return (ASTClassOrInterfaceDeclaration) i.next();    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ClassDeclTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;import java.util.Iterator;import java.util.Set;public class FieldDeclTest extends ParserTst {    public String makeAccessJavaCode(String access[]) {        String result = "public class Test { ";        for (int i = 0; i < access.length; i++) {            result += access[i] + " ";        }        return result + " int j;  }";    }    public ASTFieldDeclaration getFieldDecl(String access[]) throws Throwable {        Set fields = getNodes(ASTFieldDeclaration.class, makeAccessJavaCode(access));        assertEquals("Wrong number of fields", 1, fields.size());        Iterator i = fields.iterator();        return (ASTFieldDeclaration) i.next();    }    @Test    public void testPublic() throws Throwable {        String access[] = {"public"};        ASTFieldDeclaration afd = getFieldDecl(access);        assertTrue("Expecting field to be public.", afd.isPublic());    }    @Test    public void testProtected() throws Throwable {        String access[] = {"protected"};        ASTFieldDeclaration afd = getFieldDecl(access);        assertTrue("Expecting field to be protected.", afd.isProtected());    }    @Test    public void testPrivate() throws Throwable {        String access[] = {"private"};        ASTFieldDeclaration afd = getFieldDecl(access);        assertTrue("Expecting field to be private.", afd.isPrivate());    }    @Test    public void testStatic() throws Throwable {        String access[] = {"private", "static"};        ASTFieldDeclaration afd = getFieldDecl(access);        assertTrue("Expecting field to be static.", afd.isStatic());        assertTrue("Expecting field to be private.", afd.isPrivate());    }    @Test    public void testFinal() throws Throwable {        String access[] = {"public", "final"};        ASTFieldDeclaration afd = getFieldDecl(access);        assertTrue("Expecting field to be final.", afd.isFinal());        assertTrue("Expecting field to be public.", afd.isPublic());    }    @Test    public void testTransient() throws Throwable {        String access[] = {"private", "transient"};        ASTFieldDeclaration afd = getFieldDecl(access);        assertTrue("Expecting field to be private.", afd.isPrivate());        assertTrue("Expecting field to be transient.", afd.isTransient());    }    @Test    public void testVolatile() throws Throwable {        String access[] = {"private", "volatile"};        ASTFieldDeclaration afd = getFieldDecl(access);        assertTrue("Expecting field to be volatile.", afd.isVolatile());        assertTrue("Expecting field to be private.", afd.isPrivate());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(FieldDeclTest.class);    }}
package net.sourceforge.pmd.ast;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;import net.sourceforge.pmd.lang.java.ast.ASTAssertStatement;import net.sourceforge.pmd.lang.java.ast.ASTBlockStatement;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;public class ASTBlockStatementTest extends ParserTst {    @Test    public void testIsAllocation() {        ASTBlockStatement bs = new ASTBlockStatement(0);        bs.jjtAddChild(new ASTAllocationExpression(1), 0);        assertTrue(bs.isAllocation());    }    @Test    public void testIsAllocation2() {        ASTBlockStatement bs = new ASTBlockStatement(0);        bs.jjtAddChild(new ASTAssertStatement(1), 0);        assertFalse(bs.isAllocation());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTBlockStatementTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;import java.util.Iterator;import java.util.Set;public class MethodDeclTest extends ParserTst {    @Test    public void testPublic() throws Throwable {        String access[] = {"public"};        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be public.", amd.isPublic());    }    @Test    public void testPrivate() throws Throwable {        String access[] = {"private"};        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be private.", amd.isPrivate());    }    @Test    public void testProtected() throws Throwable {        String access[] = {"protected"};        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be protected.", amd.isProtected());    }    @Test    public void testFinal() throws Throwable {        String access[] = {"public", "final"};        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be final.", amd.isFinal());        assertTrue("Expecting method to be public.", amd.isPublic());    }    @Test    public void testSynchronized() throws Throwable {        String access[] = {"public", "synchronized"};        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be synchronized.", amd.isSynchronized());        assertTrue("Expecting method to be public.", amd.isPublic());    }    @Test    public void testAbstract() throws Throwable {        String access[] = {"public", "abstract"};        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be abstract.", amd.isAbstract());        assertTrue("Expecting method to be public.", amd.isPublic());    }    @Test    public void testNative() throws Throwable {        String access[] = {"private", "native"};        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be native.", amd.isNative());        assertTrue("Expecting method to be private.", amd.isPrivate());    }    @Test    public void testStrict() throws Throwable {        String access[] = {"public", "strictfp"};        ASTMethodDeclaration amd = getMethodDecl(access);        assertTrue("Expecting method to be strict.", amd.isStrictfp());        assertTrue("Expecting method to be public.", amd.isPublic());    }    public ASTMethodDeclaration getMethodDecl(String access[]) throws Throwable {        String javaCode = "public class Test { ";        for (int i = 0; i < access.length; i++) {            javaCode += access[i] + " ";        }        javaCode += " void stuff() { } }";        Set methods = getNodes(ASTMethodDeclaration.class, javaCode);        assertEquals("Wrong number of methods", 1, methods.size());        Iterator i = methods.iterator();        return (ASTMethodDeclaration) i.next();    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(MethodDeclTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.util.Set;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration;import net.sourceforge.pmd.lang.java.ast.ParseException;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;public class ASTImportDeclarationTest extends ParserTst {    @Test    public void testImportOnDemand() throws Throwable {        Set<ASTImportDeclaration> ops = getNodes(ASTImportDeclaration.class, TEST1);        assertTrue(ops.iterator().next().isImportOnDemand());    }    @Test    public void testGetImportedNameNode() throws Throwable {        ASTImportDeclaration i = getNodes(ASTImportDeclaration.class, TEST2).iterator().next();        assertEquals("foo.bar.Baz", i.getImportedName());    }    @Test    public void testStaticImport() throws Throwable {        Set<ASTImportDeclaration> ops = getNodes(ASTImportDeclaration.class, TEST3);        ASTImportDeclaration i = ops.iterator().next();        assertTrue(i.isStatic());    }    @Test(expected = ParseException.class)    public void testStaticImportFailsWithJDK14() throws Throwable {        getNodes(LanguageVersion.JAVA_14, ASTImportDeclaration.class, TEST3);    }    private static final String TEST1 =            "import foo.bar.*;" + PMD.EOL +            "public class Foo {}";    private static final String TEST2 =            "import foo.bar.Baz;" + PMD.EOL +            "public class Foo {}";    private static final String TEST3 =            "import static foo.bar.Baz;" + PMD.EOL +            "public class Foo {}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTImportDeclarationTest.class);    }}
package net.sourceforge.pmd.ast;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.java.ast.ASTAnnotation;import net.sourceforge.pmd.lang.java.ast.ParseException;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;public class ASTAnnotationTest extends ParserTst {    @Test    public void testAnnotationSucceedsWithDefaultMode() throws Throwable {        getNodes(ASTAnnotation.class, TEST1);    }    @Test(expected = ParseException.class)    public void testAnnotationFailsWithJDK14() throws Throwable {        getNodes(LanguageVersion.JAVA_14, ASTAnnotation.class, TEST1);    }    @Test    public void testAnnotationSucceedsWithJDK15() throws Throwable {        getNodes(LanguageVersion.JAVA_15, ASTAnnotation.class, TEST1);    }    private static final String TEST1 =            "public class Foo extends Buz {" + PMD.EOL +            " @Override" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  // overrides a superclass method" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTAnnotationTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTBlock;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTTryStatement;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;public class ASTVariableDeclaratorIdTest extends ParserTst {    @Test    public void testIsExceptionBlockParameter() {        ASTTryStatement tryNode = new ASTTryStatement(1);        ASTBlock block = new ASTBlock(2);        ASTVariableDeclaratorId v = new ASTVariableDeclaratorId(3);        v.jjtSetParent(block);        block.jjtSetParent(tryNode);        assertTrue(v.isExceptionBlockParameter());    }    @Test    public void testTypeNameNode() throws Throwable {        ASTCompilationUnit acu = super.getNodes(ASTCompilationUnit.class, TYPE_NAME_NODE).iterator().next();        ASTVariableDeclaratorId id = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0);        ASTClassOrInterfaceType name = (ASTClassOrInterfaceType) id.getTypeNameNode().jjtGetChild(0);        assertEquals("String", name.getImage());    }    @Test    public void testAnnotations() throws Throwable {        ASTCompilationUnit acu = super.getNodes(ASTCompilationUnit.class, TEST_ANNOTATIONS).iterator().next();        ASTVariableDeclaratorId id = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0);        ASTClassOrInterfaceType name = (ASTClassOrInterfaceType) id.getTypeNameNode().jjtGetChild(0);        assertEquals("String", name.getImage());    }    private static final String TYPE_NAME_NODE =            "public class Test {" + PMD.EOL +            "  private String bar;" + PMD.EOL +            "}";    private static final String TEST_ANNOTATIONS =            "public class Foo {" + PMD.EOL +            "    public void bar(@A1 @A2 String s) {}" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTVariableDeclaratorIdTest.class);    }}
package net.sourceforge.pmd.ast;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Ignore;import org.junit.Test;public class ParserCornersTest extends ParserTst {    @Test    public final void testGetFirstASTNameImageNull() throws Throwable {        parseJava14(ABSTRACT_METHOD_LEVEL_CLASS_DECL);    }    @Test    @Ignore    public final void testCastLookaheadProblem() throws Throwable {        parseJava14(CAST_LOOKAHEAD_PROBLEM);    }    private static final String ABSTRACT_METHOD_LEVEL_CLASS_DECL =            "public class Test {" + PMD.EOL +            "  void bar() {" + PMD.EOL +            "   abstract class X { public abstract void f(); }" + PMD.EOL +            "   class Y extends X { public void f() {" + PMD.EOL +            "    new Y().f();" + PMD.EOL +            "   }}" + PMD.EOL +            "  }" + PMD.EOL +            "}";    private static final String CAST_LOOKAHEAD_PROBLEM =        "public class BadClass {" + PMD.EOL +        "  public Class foo() {" + PMD.EOL +        "    return (byte[].class);" + PMD.EOL +        "  }" + PMD.EOL +        "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ParserCornersTest.class);    }}
package net.sourceforge.pmd.ast;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;public class ASTLocalVariableDeclarationTest extends ParserTst {    @Test    public void testSingleDimArray() {        ASTCompilationUnit cu = parseJava14(TEST1);        ASTLocalVariableDeclaration node = cu.findDescendantsOfType(ASTLocalVariableDeclaration.class).get(0);        assertEquals(1, node.getArrayDepth());    }    @Test    public void testMultDimArray() {        ASTCompilationUnit cu = parseJava14(TEST2);        ASTLocalVariableDeclaration node = cu.findDescendantsOfType(ASTLocalVariableDeclaration.class).get(0);        assertEquals(2, node.getArrayDepth());    }    @Test    public void testMultDimArraySplitBraces() {        ASTCompilationUnit cu = parseJava14(TEST3);        ASTLocalVariableDeclaration node = cu.findDescendantsOfType(ASTLocalVariableDeclaration.class).get(0);        assertEquals(3, node.getArrayDepth());    }    private static final String TEST1 =            "class Foo {" + PMD.EOL +            " void bar() {int x[] = null;}" + PMD.EOL +            "}";    private static final String TEST2 =            "class Foo {" + PMD.EOL +            " void bar() {int x[][] = null;}" + PMD.EOL +            "}";    private static final String TEST3 =            "class Foo {" + PMD.EOL +            " void bar() {int[] x[][] = null;}" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTLocalVariableDeclarationTest.class);    }}
/* * Created on Jan 19, 2005  * * $Id$ */package net.sourceforge.pmd.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNull;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;/** * @author mgriffa */public class ASTThrowStatementTest extends ParserTst {    @Test    public final void testGetFirstASTNameImageNull() throws Throwable {        ASTThrowStatement t = getNodes(ASTThrowStatement.class, NULL_NAME).iterator().next();        assertNull(t.getFirstClassOrInterfaceTypeImage());    }    @Test    public final void testGetFirstASTNameImageNew() throws Throwable {        ASTThrowStatement t = getNodes(ASTThrowStatement.class, OK_NAME).iterator().next();        assertEquals("FooException", t.getFirstClassOrInterfaceTypeImage());    }    private static final String NULL_NAME =            "public class Test {" + PMD.EOL +            "  void bar() {" + PMD.EOL +            "   throw e;" + PMD.EOL +            "  }" + PMD.EOL +            "}";    private static final String OK_NAME =            "public class Test {" + PMD.EOL +            "  void bar() {" + PMD.EOL +            "   throw new FooException();" + PMD.EOL +            "  }" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTThrowStatementTest.class);    }}
package net.sourceforge.pmd.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTType;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.lang.java.ast.Dimensionable;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;public class ASTFieldDeclarationTest extends ParserTst {    @Test    public void testIsArray() {        ASTCompilationUnit cu = parseJava14(TEST1);        Dimensionable node = cu.findDescendantsOfType(ASTFieldDeclaration.class).get(0);        assertTrue(node.isArray());        assertEquals(1, node.getArrayDepth());    }    @Test    public void testMultiDimensionalArray() {        ASTCompilationUnit cu = parseJava14(TEST2);        Dimensionable node = cu.findDescendantsOfType(ASTFieldDeclaration.class).get(0);        assertEquals(3, node.getArrayDepth());    }    @Test    public void testIsSyntacticallyPublic() {        ASTCompilationUnit cu = parseJava14(TEST3);        ASTFieldDeclaration node = cu.findDescendantsOfType(ASTFieldDeclaration.class).get(0);        assertFalse(node.isSyntacticallyPublic());        assertFalse(node.isPackagePrivate());        assertFalse(node.isPrivate());        assertFalse(node.isProtected());        assertTrue(node.isFinal());        assertTrue(node.isStatic());        assertTrue(node.isPublic());    }    @Test    public void testWithEnum() {        ASTCompilationUnit cu = parseJava15(TEST4);        ASTFieldDeclaration node = cu.findDescendantsOfType(ASTFieldDeclaration.class).get(0);        assertFalse(node.isInterfaceMember());    }    private static final String TEST1 =            "class Foo {" + PMD.EOL +            " String[] foo;" + PMD.EOL +            "}";    private static final String TEST2 =            "class Foo {" + PMD.EOL +            " String[][][] foo;" + PMD.EOL +            "}";    private static final String TEST3 =            "interface Foo {" + PMD.EOL +            " int BAR = 6;" + PMD.EOL +            "}";    private static final String TEST4 =            "public enum Foo {" + PMD.EOL +            " FOO(1);" + PMD.EOL +            " private int x;" + PMD.EOL +            "}";    @Test    public void testGetVariableName() {        int id = 0;        ASTFieldDeclaration n = new ASTFieldDeclaration(id++);        ASTType t = new ASTType(id++);        ASTVariableDeclarator decl = new ASTVariableDeclarator(id++);        ASTVariableDeclaratorId declid = new ASTVariableDeclaratorId(id++);        n.jjtAddChild(t, 0);        t.jjtAddChild(decl, 0);        decl.jjtAddChild(declid, 0);        declid.setImage("foo");        assertEquals("foo", n.getVariableName());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTFieldDeclarationTest.class);    }}
package net.sourceforge.pmd.ast;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTInitializer;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;public class ASTInitializerTest extends ParserTst {    @Test    public void testDontCrashOnBlockStatement() throws Throwable {        getNodes(ASTInitializer.class, TEST1);    }    private static final String TEST1 =            "public class Foo {" + PMD.EOL +            " {" + PMD.EOL +            "   x = 5;" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTInitializerTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ast;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.Set;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.lang.java.ast.AbstractJavaAccessNode;import net.sourceforge.pmd.lang.java.ast.AccessNode;import net.sourceforge.pmd.lang.java.ast.JavaParser;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;public class AccessNodeTest extends ParserTst {    public static class MyAccessNode extends AbstractJavaAccessNode {public MyAccessNode(int i) {    super(i);}public MyAccessNode(JavaParser parser, int i) {    super(parser, i);}    }    @Test    public void testModifiersOnClassDecl() throws Throwable {        Set ops = getNodes(ASTClassOrInterfaceDeclaration.class, TEST1);        assertTrue(((ASTClassOrInterfaceDeclaration) ops.iterator().next()).isPublic());    }    private static final String TEST1 =            "public class Foo {}";    @Test    public void testStatic() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not static.", node.isStatic());        node.setStatic(true);        assertTrue("Node set to static, not static.", node.isStatic());    }    @Test    public void testPublic() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not public.", node.isPublic());        node.setPublic(true);        assertTrue("Node set to public, not public.", node.isPublic());    }    @Test    public void testProtected() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not protected.", node.isProtected());        node.setProtected(true);        assertTrue("Node set to protected, not protected.", node.isProtected());    }    @Test    public void testPrivate() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not private.", node.isPrivate());        node.setPrivate(true);        assertTrue("Node set to private, not private.", node.isPrivate());    }    @Test    public void testFinal() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not final.", node.isFinal());        node.setFinal(true);        assertTrue("Node set to final, not final.", node.isFinal());    }    @Test    public void testSynchronized() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not synchronized.", node.isSynchronized());        node.setSynchronized(true);        assertTrue("Node set to synchronized, not synchronized.", node.isSynchronized());    }    @Test    public void testVolatile() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not volatile.", node.isVolatile());        node.setVolatile(true);        assertTrue("Node set to volatile, not volatile.", node.isVolatile());    }    @Test    public void testTransient() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not transient.", node.isTransient());        node.setTransient(true);        assertTrue("Node set to transient, not transient.", node.isTransient());    }    @Test    public void testNative() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not native.", node.isNative());        node.setNative(true);        assertTrue("Node set to native, not native.", node.isNative());    }    @Test    public void testAbstract() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not abstract.", node.isAbstract());        node.setAbstract(true);        assertTrue("Node set to abstract, not abstract.", node.isAbstract());    }    @Test    public void testStrict() {        AccessNode node = new MyAccessNode(1);        assertFalse("Node should default to not strict.", node.isStrictfp());        node.setStrictfp(true);        assertTrue("Node set to strict, not strict.", node.isStrictfp());    }    @Test    public void testPackagePrivate() {        AccessNode node = new MyAccessNode(1);        assertTrue("Node should default to package private.", node.isPackagePrivate());        node.setPrivate(true);        assertFalse("Node set to private, still package private.", node.isPackagePrivate());        node = new MyAccessNode(1);        node.setPublic(true);        assertFalse("Node set to public, still package private.", node.isPackagePrivate());        node = new MyAccessNode(1);        node.setProtected(true);        assertFalse("Node set to protected, still package private.", node.isPackagePrivate());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(AccessNodeTest.class);    }}
package net.sourceforge.pmd.ast;import static org.junit.Assert.assertEquals;import java.io.ByteArrayInputStream;import java.io.InputStreamReader;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.LanguageVersionHandler;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator;import org.junit.Ignore;import org.junit.Test;public class EncodingTest {    @Ignore("FIXME")    @Test    public void testDecodingOfUTF8() throws Throwable {        //String platformEncoding = System.getProperty("file.encoding");        //String encoding = "ISO-8859-1";        String encoding = "UTF-8";        String code = new String(TEST_UTF8.getBytes(), encoding);        InputStreamReader isr = new InputStreamReader(new ByteArrayInputStream(code.getBytes()));        LanguageVersionHandler languageVersionHandler = LanguageVersion.JAVA_14.getLanguageVersionHandler();ASTCompilationUnit acu = (ASTCompilationUnit) languageVersionHandler.getParser(languageVersionHandler.getDefaultParserOptions()).parse(null, isr);        String methodName = acu.findDescendantsOfType(ASTMethodDeclarator.class).get(0).getImage();        assertEquals(new String("é".getBytes(), encoding), methodName);    }    private static final String TEST_UTF8 =            "class Foo {" + PMD.EOL +            " void é() {}" + PMD.EOL +            " void fiddle() {}" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(EncodingTest.class);    }}
package net.sourceforge.pmd.ast;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;import java.util.Set;public class ASTBooleanLiteralTest extends ParserTst {    @Test    public void testTrue() throws Throwable {        Set ops = getNodes(ASTBooleanLiteral.class, TEST1);        ASTBooleanLiteral b = (ASTBooleanLiteral) ops.iterator().next();        assertTrue(b.isTrue());    }    @Test    public void testFalse() throws Throwable {        Set ops = getNodes(ASTBooleanLiteral.class, TEST2);        ASTBooleanLiteral b = (ASTBooleanLiteral) ops.iterator().next();        assertFalse(b.isTrue());    }    private static final String TEST1 =            "class Foo { " + PMD.EOL +            " boolean bar = true; " + PMD.EOL +            "} ";    private static final String TEST2 =            "class Foo { " + PMD.EOL +            " boolean bar = false; " + PMD.EOL +            "} ";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTBooleanLiteralTest.class);    }}
package net.sourceforge.pmd.ast;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;import java.util.Set;public class ASTSwitchLabelTest extends ParserTst {    @Test    public void testDefaultOff() throws Throwable {        Set ops = getNodes(ASTSwitchLabel.class, TEST1);        assertFalse(((ASTSwitchLabel) (ops.iterator().next())).isDefault());    }    @Test    public void testDefaultSet() throws Throwable {        Set ops = getNodes(ASTSwitchLabel.class, TEST2);        assertTrue(((ASTSwitchLabel) (ops.iterator().next())).isDefault());    }    private static final String TEST1 =            "public class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  switch (x) {" + PMD.EOL +            "   case 1: y = 2;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String TEST2 =            "public class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  switch (x) {" + PMD.EOL +            "   default: y = 2;" + PMD.EOL +            "  }" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTSwitchLabelTest.class);    }}
package net.sourceforge.pmd.ast;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator;import org.junit.Test;public class ASTMethodDeclarationTest {    @Test    public void testGetVariableName() {        int id = 0;        ASTMethodDeclaration md = new ASTMethodDeclaration(id++);        ASTMethodDeclarator de = new ASTMethodDeclarator(id++);        de.setImage("foo");        md.jjtAddChild(de, 0);        assertEquals("foo", md.getMethodName());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTMethodDeclarationTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertSame;import static org.junit.Assert.assertTrue;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Set;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.ast.Node;import net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperator;import net.sourceforge.pmd.lang.java.ast.ASTBlock;import net.sourceforge.pmd.lang.java.ast.ASTBlockStatement;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTExpression;import net.sourceforge.pmd.lang.java.ast.ASTExtendsList;import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTImplementsList;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclarator;import net.sourceforge.pmd.lang.java.ast.ASTName;import net.sourceforge.pmd.lang.java.ast.ASTReturnStatement;import net.sourceforge.pmd.lang.java.ast.ASTStatement;import net.sourceforge.pmd.lang.java.ast.ASTVariableInitializer;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Ignore;import org.junit.Test;public class SimpleNodeTest extends ParserTst {    @Test    public void testMethodDiffLines() throws Throwable {        Set<ASTMethodDeclaration> methods = getNodes(ASTMethodDeclaration.class, METHOD_DIFF_LINES);        verifyNode(methods.iterator().next(), 2, 9, 4, 2);    }    @Test    public void testMethodSameLine() throws Throwable {        Set<ASTMethodDeclaration> methods = getNodes(ASTMethodDeclaration.class, METHOD_SAME_LINE);        verifyNode(methods.iterator().next(), 2, 9, 2, 21);    }    @Test    public void testNoLookahead() throws Throwable {        String code = NO_LOOKAHEAD; // 1, 8 -> 1, 20        Set<ASTClassOrInterfaceDeclaration> uCD = getNodes(ASTClassOrInterfaceDeclaration.class, code);        verifyNode(uCD.iterator().next(), 1, 8, 1, 20);    }    @Test    public void testHasExplicitExtends() throws Throwable {        String code = HAS_EXPLICIT_EXTENDS;        ASTClassOrInterfaceDeclaration ucd = getNodes(ASTClassOrInterfaceDeclaration.class, code).iterator().next();        assertTrue(ucd.jjtGetChild(0) instanceof ASTExtendsList);    }    @Test    public void testNoExplicitExtends() throws Throwable {        String code = NO_EXPLICIT_EXTENDS;        ASTClassOrInterfaceDeclaration ucd = getNodes(ASTClassOrInterfaceDeclaration.class, code).iterator().next();        assertFalse(ucd.jjtGetChild(0) instanceof ASTExtendsList);    }    @Test    public void testHasExplicitImplements() throws Throwable {        String code = HAS_EXPLICIT_IMPLEMENTS;        ASTClassOrInterfaceDeclaration ucd = getNodes(ASTClassOrInterfaceDeclaration.class, code).iterator().next();        assertTrue(ucd.jjtGetChild(0) instanceof ASTImplementsList);    }    @Test    public void testNoExplicitImplements() throws Throwable {        String code = NO_EXPLICIT_IMPLEMENTS;        ASTClassOrInterfaceDeclaration ucd = getNodes(ASTClassOrInterfaceDeclaration.class, code).iterator().next();        assertFalse(ucd.jjtGetChild(0) instanceof ASTImplementsList);    }    @Test    public void testColumnsOnQualifiedName() throws Throwable {        Set<ASTName> name = getNodes(ASTName.class, QUALIFIED_NAME);        Iterator<ASTName> i = name.iterator();        while (i.hasNext()) {            Node node = i.next();            if (node.getImage().equals("java.io.File")) {                verifyNode(node, 1, 8, 1, 19);            }        }    }    @Test    public void testLineNumbersForNameSplitOverTwoLines() throws Throwable {        Set<ASTName> name = getNodes(ASTName.class, BROKEN_LINE_IN_NAME);        Iterator<ASTName> i = name.iterator();        while (i.hasNext()) {            Node node = i.next();            if (node.getImage().equals("java.io.File")) {                verifyNode(node, 1, 8, 2, 4);            }            if (node.getImage().equals("Foo")) {                verifyNode(node, 2, 15, 2, 18);            }        }    }    @Test    public void testLineNumbersAreSetOnAllSiblings() throws Throwable {        for (ASTBlock b: getNodes(ASTBlock.class, LINE_NUMBERS_ON_SIBLINGS)) {            assertTrue(b.getBeginLine() > 0);        }        for (ASTVariableInitializer b: getNodes(ASTVariableInitializer.class, LINE_NUMBERS_ON_SIBLINGS)) {            assertTrue(b.getBeginLine() > 0);        }        for (ASTExpression b: getNodes(ASTExpression.class, LINE_NUMBERS_ON_SIBLINGS)) {            assertTrue(b.getBeginLine() > 0);        }    }    @Test    public void testFindDescendantsOfType() {        ASTBlock block = new ASTBlock(2);        block.jjtAddChild(new ASTReturnStatement(1), 0);        assertEquals(1, block.findDescendantsOfType(ASTReturnStatement.class).size());    }    @Test    public void testFindDescendantsOfTypeMultiple() {        ASTBlock block = new ASTBlock(1);        block.jjtAddChild(new ASTBlockStatement(2), 0);        block.jjtAddChild(new ASTBlockStatement(3), 1);        List<ASTBlockStatement> nodes = block.findDescendantsOfType(ASTBlockStatement.class);        assertEquals(2, nodes.size());    }    @Test    public void testFindDescendantsOfTypeRecurse() {        ASTBlock block = new ASTBlock(1);        ASTBlock childBlock = new ASTBlock(2);        block.jjtAddChild(childBlock, 0);        childBlock.jjtAddChild(new ASTMethodDeclaration(3), 0);        List<ASTMethodDeclaration> nodes = block.findDescendantsOfType(ASTMethodDeclaration.class);        assertEquals(1, nodes.size());    }    @Test    public void testGetFirstChild() {        ASTBlock block = new ASTBlock(1);        ASTStatement x = new ASTStatement(2);        block.jjtAddChild(x, 0);        block.jjtAddChild(new ASTStatement(3), 1);        Node n = block.getFirstDescendantOfType(ASTStatement.class);        assertNotNull(n);        assertTrue(n instanceof ASTStatement);        assertEquals(x, n);    }    @Test    public void testGetFirstChildNested() {        ASTBlock block = new ASTBlock(1);        ASTStatement x = new ASTStatement(2);        ASTAssignmentOperator x1 = new ASTAssignmentOperator(4);        x.jjtAddChild(x1, 0);        block.jjtAddChild(x, 0);        block.jjtAddChild(new ASTStatement(3), 1);        Node n = block.getFirstDescendantOfType(ASTAssignmentOperator.class);        assertNotNull(n);        assertTrue(n instanceof ASTAssignmentOperator);        assertEquals(x1, n);    }    @Test    public void testGetFirstChildNestedDeeper() {        ASTBlock block = new ASTBlock(1);        ASTStatement x = new ASTStatement(2);        ASTAssignmentOperator x1 = new ASTAssignmentOperator(4);        ASTName x2 = new ASTName(5);        x.jjtAddChild(x1, 0);        x1.jjtAddChild(x2, 0);        block.jjtAddChild(x, 0);        block.jjtAddChild(new ASTStatement(3), 1);        Node n = block.getFirstDescendantOfType(ASTName.class);        assertNotNull(n);        assertTrue(n instanceof ASTName);        assertEquals(x2, n);    }    @Test    public void testParentMethods() throws Throwable {    ASTCompilationUnit u = parseJava14(TEST1);    ASTMethodDeclarator d = u.getFirstDescendantOfType(ASTMethodDeclarator.class);    assertSame("getFirstParentOfType ASTMethodDeclaration", d.jjtGetParent(), d.getFirstParentOfType(ASTMethodDeclaration.class));    assertNull("getFirstParentOfType ASTName", d.getFirstParentOfType(ASTName.class));    assertSame("getNthParent 1", d.jjtGetParent(), d.getNthParent(1));    assertSame("getNthParent 2", d.jjtGetParent().jjtGetParent(), d.getNthParent(2));    assertSame("getNthParent 6", u, d.getNthParent(6));    assertNull("getNthParent 7", d.getNthParent(7));    assertNull("getNthParent 8", d.getNthParent(8));    }    private static final String TEST1 =            "public class Test {" + PMD.EOL +            "  void bar(String s) {" + PMD.EOL +            "   s = s.toLowerCase();" + PMD.EOL +            "  }" + PMD.EOL +            "}";    @Ignore    @Test    public void testContainsNoInner() throws Throwable {        ASTCompilationUnit c = getNodes(ASTCompilationUnit.class, CONTAINS_NO_INNER).iterator().next();        List<ASTFieldDeclaration> res = new ArrayList<ASTFieldDeclaration>();        c.findDescendantsOfType(ASTFieldDeclaration.class, res, false);        assertTrue(res.isEmpty());/*        String expectedXml = "<CompilationUnit BeginColumn=\"1\" BeginLine=\"5\" EndColumn=\"1\" EndLine=\"5\">" +                "<TypeDeclaration BeginColumn=\"1\" BeginLine=\"1\" EndColumn=\"1\" EndLine=\"5\">" +                "<ClassOrInterfaceDeclaration Abstract=\"false\" BeginColumn=\"8\" BeginLine=\"1\" EndColumn=\"1\" " +                "EndLine=\"5\" Final=\"false\" Image=\"Test\" Interface=\"false\" Native=\"false\" Nested=\"false\" PackagePrivate=\"false\" Private=\"false\" Protected=\"false\" Public=\"true\" Static=\"false\" Strictfp=\"false\" Synchronized=\"false\" Transient=\"false\" Volatile=\"false\">" +                "<ClassOrInterfaceBody BeginColumn=\"19\" BeginLine=\"1\" EndColumn=\"1\" EndLine=\"5\">" +                "<ClassOrInterfaceBodyDeclaration AnonymousInnerClass=\"false\" BeginColumn=\"3\" BeginLine=\"2\" EndColumn=\"3\" EndLine=\"4\">" +                "<ClassOrInterfaceDeclaration Abstract=\"false\" BeginColumn=\"10\" BeginLine=\"2\" EndColumn=\"3\" EndLine=\"4\" Final=\"false\" " +                "Image=\"Inner\" Interface=\"false\" Native=\"false\" Nested=\"true\" PackagePrivate=\"false\" Private=\"false\" Protected=\"false\" " +                "Public=\"true\" Static=\"false\" Strictfp=\"false\" Synchronized=\"false\" Transient=\"false\" Volatile=\"false\">" +                "<ClassOrInterfaceBody BeginColumn=\"22\" BeginLine=\"2\" EndColumn=\"3\" EndLine=\"4\">" +                "<ClassOrInterfaceBodyDeclaration AnonymousInnerClass=\"false\" BeginColumn=\"4\" BeginLine=\"3\" EndColumn=\"11\" EndLine=\"3\">" +                "<FieldDeclaration Abstract=\"false\" Array=\"false\" ArrayDepth=\"0\" BeginColumn=\"4\" BeginLine=\"3\" EndColumn=\"11\" EndLine=\"3\" Final=\"false\" Native=\"false\" PackagePrivate=\"true\" Private=\"false\" Protected=\"false\" Public=\"false\" Static=\"false\" Strictfp=\"false\" Synchronized=\"false\" Transient=\"false\" VariableName=\"foo\" Volatile=\"false\"><Type Array=\"false\" ArrayDepth=\"0\" BeginColumn=\"4\" BeginLine=\"3\" EndColumn=\"6\" EndLine=\"3\">" +                "<PrimitiveType Array=\"false\" ArrayDepth=\"0\" BeginColumn=\"4\" BeginLine=\"3\" Boolean=\"false\" EndColumn=\"6\" EndLine=\"3\" Image=\"int\"/>" +                "</Type>" +                "<VariableDeclarator BeginColumn=\"8\" BeginLine=\"3\" EndColumn=\"10\" EndLine=\"3\">" +                "<VariableDeclaratorId Array=\"false\" ArrayDepth=\"0\" BeginColumn=\"8\" BeginLine=\"3\" EndColumn=\"10\" EndLine=\"3\" ExceptionBlockParameter=\"false\" Image=\"foo\"/>" +                "</VariableDeclarator></FieldDeclaration></ClassOrInterfaceBodyDeclaration></ClassOrInterfaceBody>" +                "</ClassOrInterfaceDeclaration></ClassOrInterfaceBodyDeclaration></ClassOrInterfaceBody></ClassOrInterfaceDeclaration>" +                "</TypeDeclaration></CompilationUnit>";        assertEquals( expectedXml, getXmlString( c ) );*/    }    @Test    public void testContainsNoInnerWithAnonInner() throws Throwable {        ASTCompilationUnit c = getNodes(ASTCompilationUnit.class, CONTAINS_NO_INNER_WITH_ANON_INNER).iterator().next();        List<ASTFieldDeclaration> res = new ArrayList<ASTFieldDeclaration>();        c.findDescendantsOfType(ASTFieldDeclaration.class, res, false);        assertTrue(res.isEmpty());    }    @Test    public void testContainsChildOfType() throws Throwable {        ASTClassOrInterfaceDeclaration c = getNodes(ASTClassOrInterfaceDeclaration.class, CONTAINS_CHILDREN_OF_TYPE).iterator().next();        assertTrue(c.hasDescendantOfType(ASTFieldDeclaration.class));    }    @Test    public void testXPathNodeSelect() throws Throwable {        ASTClassOrInterfaceDeclaration c = getNodes(ASTClassOrInterfaceDeclaration.class, TEST_XPATH).iterator().next();        List nodes = c.findChildNodesWithXPath("//FieldDeclaration");        assertEquals(2, nodes.size());        assertTrue(nodes.get(0) instanceof ASTFieldDeclaration);        assertTrue(c.hasDescendantMatchingXPath("//FieldDeclaration"));        assertFalse(c.hasDescendantMatchingXPath("//MethodDeclaration"));    }        @Test    public void testUserData() throws Throwable {        ASTClassOrInterfaceDeclaration c = getNodes(ASTClassOrInterfaceDeclaration.class, HAS_EXPLICIT_EXTENDS).iterator().next();        assertNull(c.getUserData());        c.setUserData("foo");        assertEquals("foo", c.getUserData());        c.setUserData(null);        assertNull(c.getUserData());    }    private void verifyNode(Node node, int beginLine, int beginCol, int endLine, int endCol) {        assertEquals("Unexpected beginning line: ", beginLine, node.getBeginLine());        assertEquals("Unexpected beginning column: ", beginCol, node.getBeginColumn());        assertEquals("Unexpected ending line:", endLine, node.getEndLine());        assertEquals("Unexpected ending column:", endCol, node.getEndColumn());    }    private static final String HAS_EXPLICIT_EXTENDS =            "public class Test extends Foo {}";    private static final String NO_EXPLICIT_EXTENDS =            "public class Test {}";    private static final String HAS_EXPLICIT_IMPLEMENTS =            "public class Test implements Foo {}";    private static final String NO_EXPLICIT_IMPLEMENTS =            "public class Test {}";    private static final String METHOD_SAME_LINE =            "public class Test {" + PMD.EOL +            " public void foo() {}" + PMD.EOL +            "}";    private static final String QUALIFIED_NAME =            "import java.io.File;" + PMD.EOL +            "public class Foo{}";    private static final String BROKEN_LINE_IN_NAME =            "import java.io." + PMD.EOL +            "File;" + PMD.EOL +            "public class Foo{}";    private static final String LINE_NUMBERS_ON_SIBLINGS =            "public class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  try {" + PMD.EOL +            "  } catch (Exception1 e) {" + PMD.EOL +            "   int x =2;" + PMD.EOL +            "  }" + PMD.EOL +            " if (x != null) {}" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String NO_LOOKAHEAD = "public class Foo { }";    private static final String METHOD_DIFF_LINES =            "public class Test {" + PMD.EOL +            " public void foo() {" + PMD.EOL +            "  int x;" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String CONTAINS_CHILDREN_OF_TYPE =            "public class Test {" + PMD.EOL +            "  int x;" + PMD.EOL +            "}";    private static final String CONTAINS_NO_INNER =            "public class Test {" + PMD.EOL +            "  public class Inner {" + PMD.EOL +            "   int foo;" + PMD.EOL +            "  }" + PMD.EOL +            "}";    private static final String CONTAINS_NO_INNER_WITH_ANON_INNER =            "public class Test {" + PMD.EOL +            "  void bar() {" + PMD.EOL +            "   foo(new Fuz() { int x = 2;});" + PMD.EOL +            "  }" + PMD.EOL +            "}";    private static final String TEST_XPATH =            "public class Test {" + PMD.EOL +            "  int x = 2;" + PMD.EOL +            "  int y = 42;" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(SimpleNodeTest.class);    }}
package net.sourceforge.pmd.ast;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ParseException;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;public class JDKVersionTest extends ParserTst {    // enum keyword/identifier    @Test(expected = ParseException.class)    public void testEnumAsKeywordShouldFailWith14() throws Throwable {        parseJava15(JDK14_ENUM);    }    @Test    public void testEnumAsIdentifierShouldPassWith14() throws Throwable {        parseJava14(JDK14_ENUM);    }    @Test    public void testEnumAsKeywordShouldPassWith15() throws Throwable {        parseJava15(JDK15_ENUM);    }    @Test(expected = ParseException.class)    public void testEnumAsIdentifierShouldFailWith15() throws Throwable {        parseJava15(JDK14_ENUM);    }    // enum keyword/identifier    // assert keyword/identifier    @Test    public void testAssertAsKeywordVariantsSucceedWith1_4() {        parseJava14(ASSERT_TEST1);        parseJava14(ASSERT_TEST2);        parseJava14(ASSERT_TEST3);        parseJava14(ASSERT_TEST4);    }    @Test(expected = ParseException.class)    public void testAssertAsVariableDeclIdentifierFailsWith1_4() {        parseJava14(ASSERT_TEST5);    }    @Test(expected = ParseException.class)    public void testAssertAsMethodNameIdentifierFailsWith1_4() {        parseJava14(ASSERT_TEST7);    }    @Test    public void testAssertAsIdentifierSucceedsWith1_3() {        parseJava13(ASSERT_TEST5);    }    @Test(expected = ParseException.class)    public void testAssertAsKeywordFailsWith1_3() {        parseJava13(ASSERT_TEST6);    }    // assert keyword/identifier    @Test    public void testVarargsShouldPassWith15() throws Throwable {        parseJava15(JDK15_VARARGS);    }    @Test(expected = ParseException.class)    public void testVarargsShouldFailWith14() throws Throwable {        parseJava14(JDK15_VARARGS);    }    @Test    public void testJDK15ForLoopSyntaxShouldPassWith15() throws Throwable {        parseJava15(JDK15_FORLOOP);    }    @Test    public void testJDK15ForLoopSyntaxWithModifiers() throws Throwable {        parseJava15(JDK15_FORLOOP_WITH_MODIFIER);    }    @Test(expected = ParseException.class)    public void testJDK15ForLoopShouldFailWith14() throws Throwable {        parseJava14(JDK15_FORLOOP);    }    @Test    public void testJDK15GenericsSyntaxShouldPassWith15() throws Throwable {        parseJava15(JDK15_GENERICS);    }    @Test    public void testVariousParserBugs() throws Throwable {        parseJava15(FIELDS_BUG);        parseJava15(GT_BUG);        parseJava15(ANNOTATIONS_BUG);        parseJava15(CONSTANT_FIELD_IN_ANNOTATION_BUG);        parseJava15(GENERIC_IN_FIELD);    }    @Test    public void testNestedClassInMethodBug() throws Throwable {        parseJava15(INNER_BUG);        parseJava15(INNER_BUG2);    }    @Test    public void testGenericsInMethodCall() throws Throwable {        parseJava15(GENERIC_IN_METHOD_CALL);    }    @Test    public void testGenericINAnnotation() throws Throwable {        parseJava15(GENERIC_IN_ANNOTATION);    }    @Test    public void testGenericReturnType() throws Throwable {        parseJava15(GENERIC_RETURN_TYPE);    }    @Test    public void testMultipleGenerics() throws Throwable {        parseJava15(FUNKY_GENERICS);        parseJava15(MULTIPLE_GENERICS);    }    @Test    public void testAnnotatedParams() throws Throwable {        parseJava15(ANNOTATED_PARAMS);    }    @Test    public void testAnnotatedLocals() throws Throwable {        parseJava15(ANNOTATED_LOCALS);    }    @Test    public void testAssertAsIdentifierSucceedsWith1_3_test2() {        parseJava13(ASSERT_TEST5_a);    }    @Test    public final void testBinaryAndUnderscoresInNumericalLiterals() throws Throwable {        parseJava17(JDK17_NUMERICAL_LITERALS);    }        @Test    public final void testStringInSwitch() throws Throwable {        parseJava17(JDK17_STRING_IN_SWITCH);    }        @Test    public final void testGenericDiamond() throws Throwable {        parseJava17(JDK17_GENERIC_DIAMOND);    }    @Test    public final void testTryWithResources() throws Throwable {        parseJava17(JDK17_TRY_WITH_RESOURCES);    }        @Test    public final void testTryWithResourcesSemi() throws Throwable {        parseJava17(JDK17_TRY_WITH_RESOURCES_SEMI);    }        @Test    public final void testTryWithResourcesMulti() throws Throwable {        parseJava17(JDK17_TRY_WITH_RESOURCES_MULTI);    }        @Test    public final void testTryWithResourcesWithAnnotations() throws Throwable {        parseJava17(JDK17_TRY_WITH_RESOURCES_WITH_ANNOTATIONS);    }    @Test    public final void testMulticatch() throws Throwable {        parseJava17(JDK17_MULTICATCH);    }        @Test    public final void testMulticatchWithAnnotations() throws Throwable {        parseJava17(JDK17_MULTICATCH_WITH_ANNOTATIONS);    }    private static final String ANNOTATED_LOCALS =            "public class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  @SuppressWarnings(\"foo\") int y = 5;" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String ANNOTATED_PARAMS =            "public class Foo {" + PMD.EOL +            " void bar(@SuppressWarnings(\"foo\") int x) {}" + PMD.EOL +            "}";    private static final String ASSERT_TEST1 =            "public class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  assert x == 2;" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String ASSERT_TEST2 =            "public class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  assert (x == 2);" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String ASSERT_TEST3 =            "public class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  assert (x==2) : \"hi!\";" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String ASSERT_TEST4 =            "public class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  assert (x==2) : \"hi!\";" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String ASSERT_TEST5 =            "public class Foo {" + PMD.EOL +            "  int assert = 2;" + PMD.EOL +            "}";    private static final String ASSERT_TEST5_a =            "public class Foo {" + PMD.EOL +            "  void bar() { assert(); }" + PMD.EOL +            "}";    private static final String ASSERT_TEST6 =            "public class Foo {" + PMD.EOL +            " void foo() {" + PMD.EOL +            "  assert (x == 2) : \"hi!\";" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String ASSERT_TEST7 =            "public class Foo {" + PMD.EOL +            " void assert() {}" + PMD.EOL +            "}";    private static final String JDK15_ENUM =            "public class Test {" + PMD.EOL +            " enum Season { winter, spring, summer, fall };" + PMD.EOL +            "}";    private static final String JDK14_ENUM =            "public class Test {" + PMD.EOL +            " int enum;" + PMD.EOL +            "}";    private static final String JDK15_VARARGS =            "public class Test {" + PMD.EOL +            " void bar(Object ... args) {}" + PMD.EOL +            "}";    private static final String JDK15_FORLOOP =            "public class Test {" + PMD.EOL +            " void foo(List list) {" + PMD.EOL +            "  for (Integer i : list) {}" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String JDK15_FORLOOP_WITH_MODIFIER =            "public class Test {" + PMD.EOL +            " void foo(List list) {" + PMD.EOL +            "  for (final Integer i : list) {}" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String JDK15_GENERICS =            "public class Test {" + PMD.EOL +            "  ArrayList<Integer> list =  new ArrayList<Integer>();" + PMD.EOL +            "}";    private static final String FIELDS_BUG =            "public class Test {" + PMD.EOL +            "  private Foo bar;" + PMD.EOL +            "}";    private static final String GT_BUG =            "public class Test {" + PMD.EOL +            "  int y = x > 32;" + PMD.EOL +            "}";    private static final String ANNOTATIONS_BUG =            "@Target(ElementType.METHOD)" + PMD.EOL +            "public @interface Foo {" + PMD.EOL +            "}";    private static final String CONSTANT_FIELD_IN_ANNOTATION_BUG =            "public @interface Foo {" + PMD.EOL +            "  String CONST = \"foo\";" + PMD.EOL +            "}";    private static final String GENERIC_IN_FIELD =            "public class Foo {" + PMD.EOL +            " Class<Double> foo = (Class<Double>)clazz;" + PMD.EOL +            "}";    private static final String GENERIC_IN_ANNOTATION =            "public class Foo {" + PMD.EOL +            " public <A extends Annotation> A foo(Class<A> c) {" + PMD.EOL +            "  return null;" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String INNER_BUG =            "public class Test {" + PMD.EOL +            "  void bar() {" + PMD.EOL +            "   final class Inner {};" + PMD.EOL +            "   Inner i = new Inner();" + PMD.EOL +            "  }" + PMD.EOL +            "}";    private static final String INNER_BUG2 =            "public class Test {" + PMD.EOL +            "  void bar() {" + PMD.EOL +            "   class Inner {};" + PMD.EOL +            "   Inner i = new Inner();" + PMD.EOL +            "  }" + PMD.EOL +            "}";    private static final String GENERIC_IN_METHOD_CALL =            "public class Test {" + PMD.EOL +            "  List<String> test() {" + PMD.EOL +            "   return Collections.<String>emptyList();" + PMD.EOL +            "  }" + PMD.EOL +            "}";    private static final String GENERIC_RETURN_TYPE =            "public class Test {" + PMD.EOL +            "  public static <String> String test(String x) {" + PMD.EOL +            "   return x;" + PMD.EOL +            "  }" + PMD.EOL +            "}";    // See java/lang/concurrent/ConcurrentHashMap    private static final String MULTIPLE_GENERICS =            "public class Foo<K,V> {" + PMD.EOL +            "  public <A extends K, B extends V> Foo(Bar<A,B> t) {}" + PMD.EOL +            "}";    // See java/lang/concurrent/CopyOnWriteArraySet    private static final String FUNKY_GENERICS =            "public class Foo {" + PMD.EOL +            "  public <T extends E> Foo() {}" + PMD.EOL +            "}";    private static final String JDK17_NUMERICAL_LITERALS =      "public class Test {" + PMD.EOL +      "  int i1 = 0b00011110;" + PMD.EOL +      "  int i2 = 0B00011110;" + PMD.EOL +      "  int i3 = 0xA;" + PMD.EOL +      "  int i4 = 0x1___A_F;" + PMD.EOL +      "  int i5 = 0b1;" + PMD.EOL +      "  int i6 = 0b1___1_0;" + PMD.EOL +      "  int i7 = 0;" + PMD.EOL +      "  int i8 = 02;" + PMD.EOL +      "  int i9 = 0_123;" + PMD.EOL +      "  int i10 = 1;" + PMD.EOL +      "  int i11 = 1___3;" + PMD.EOL +      "  int i12 = 1_43_43598_7;" + PMD.EOL +      "  " + PMD.EOL +      "  long l1 = 0b00011110L;" + PMD.EOL +      "  long l2 = 0B00011110l;" + PMD.EOL +      "  long l3 = 0xAL;" + PMD.EOL +      "  long l4 = 0x1___A_FL;" + PMD.EOL +      "  long l5 = 0b1L;" + PMD.EOL +      "  long l6 = 0b1___1_0L;" + PMD.EOL +      "  long l7 = 0l;" + PMD.EOL +      "  long l8 = 02L;" + PMD.EOL +      "  long l9 = 0_123l;" + PMD.EOL +      "  long l10 = 1l;" + PMD.EOL +      "  long l11 = 1___3l;" + PMD.EOL +      "  long l12 = 1_43_43598_7L;" + PMD.EOL +      "  long l13 = 1_43_43598_7;" + PMD.EOL +      "  " + PMD.EOL +      "  float f1 = .1f;" + PMD.EOL +      "  float f2 = 1.f;" + PMD.EOL +      "  float f3 = 0f;" + PMD.EOL +      "  float f4 = 1e0F;" + PMD.EOL +      "  float f5 = 1e0f;" + PMD.EOL +      "  float f6 = 12.345F;" + PMD.EOL +      "  float f7 = .5____2_1f;" + PMD.EOL +      "  float f8 = 1__42__3.f;" + PMD.EOL +      "  float f9 = 0__2_4__324f;" + PMD.EOL +      "  float f10 = 1_34e0F;" + PMD.EOL +      "  float f11 = 1__1_2e0f;" + PMD.EOL +      "  float f12 = 2_1___2.3__4_5F;" + PMD.EOL +      "  float f13 = 1_34e0__4__3f;" + PMD.EOL +      "  float f14 = 1__1_2e00__000_4f;" + PMD.EOL +      "  float f15 = 2_1___2.3__4_5e00______0_5F;" + PMD.EOL +      "  " + PMD.EOL +      "  double d1 = .1d;" + PMD.EOL +      "  double d2 = 1.D;" + PMD.EOL +      "  double d3 = 0d;" + PMD.EOL +      "  double d4 = 1e0D;" + PMD.EOL +      "  double d5 = 1e0d;" + PMD.EOL +      "  double d6 = 12.345D;" + PMD.EOL +      "  double d7 = .5____2_1d;" + PMD.EOL +      "  double d8 = 1__42__3.D;" + PMD.EOL +      "  double d9 = 0__2_4__324d;" + PMD.EOL +      "  double d10 = 1_34e0d;" + PMD.EOL +      "  double d11 = 1__1_2e0d;" + PMD.EOL +      "  double d12 = 2_1___2.3__4_5D;" + PMD.EOL +      "  double d13 = 1_34e0__4__3d;" + PMD.EOL +      "  double d14 = 1__1_2e00__000_4d;" + PMD.EOL +      "  double d15 = 2_1___2.3__4_5e00______0_5D;" + PMD.EOL +      "  double d16 = 0.12___34;" + PMD.EOL +      "  " + PMD.EOL +      "  float hf1 = 0x.1___AFp1;" + PMD.EOL +      "  float hf2 = 0x.1___AFp0__0__0f;" + PMD.EOL +      "  float hf3 = 0x2__3_34.4___AFP00_00f;" + PMD.EOL +      "  " + PMD.EOL +      "  double hd1 = 0x.1___AFp1;" + PMD.EOL +      "  double hd2 = 0x.1___AFp0__0__0d;" + PMD.EOL +      "  double hd3 = 0x2__3_34.4___AFP00_00d;" + PMD.EOL +      "  " + PMD.EOL +      "  int doc1 = 1234_5678;" + PMD.EOL +      "  long doc2 = 1_2_3_4__5_6_7_8L;" + PMD.EOL +      "  int doc3 = 0b0001_0010_0100_1000;" + PMD.EOL +      "  double doc4 = 3.141_592_653_589_793d;" + PMD.EOL +      "  double doc5 = 0x1.ffff_ffff_ffff_fP1_023;" + PMD.EOL +      "}" + PMD.EOL      ;        private static final String JDK17_STRING_IN_SWITCH =      "public class Test {" + PMD.EOL +      "public static void main(String[] args) {" + PMD.EOL +      "String mystr = \"value\" + \"2\";" + PMD.EOL +      "switch (mystr) {" + PMD.EOL +      "case \"value1\":" + PMD.EOL +      "break;" + PMD.EOL +      "case \"value2\":" + PMD.EOL +      "break;" + PMD.EOL +      "default:" + PMD.EOL +      "break;" + PMD.EOL +      "}" + PMD.EOL +      "}" + PMD.EOL +      "}" + PMD.EOL      ;        private static final String JDK17_GENERIC_DIAMOND =    "public class InputJava7Diamond {" + PMD.EOL +    " HashMap<String> map = new HashMap<>();" + PMD.EOL +    "}";        private static final String JDK17_TRY_WITH_RESOURCES =    "public class InputJava7TryWithResources {" + PMD.EOL +    " public static void main() {" + PMD.EOL +    "  try (MyResource resource = new MyResource()) { }" + PMD.EOL +    " }" + PMD.EOL +    "}";        private static final String JDK17_TRY_WITH_RESOURCES_SEMI =    "public class InputJava7TryWithResources {" + PMD.EOL +    " public static void main() {" + PMD.EOL +    "  try (MyResource resource = new MyResource();) { }" + PMD.EOL +    " }" + PMD.EOL +    "}";        private static final String JDK17_TRY_WITH_RESOURCES_MULTI =    "public class InputJava7TryWithResources {" + PMD.EOL +    " public static void main() {" + PMD.EOL +    "  try (MyResource resource = new MyResource(); MyResource2 resource2 = new MyResource2()) { }" + PMD.EOL +    " }" + PMD.EOL +    "}";        private static final String JDK17_TRY_WITH_RESOURCES_WITH_ANNOTATIONS =    "public class InputJava7TryWithResources {" + PMD.EOL +    " public static void main() {" + PMD.EOL +    "  try (@SuppressWarnings(\"all\") final MyResource resource = new MyResource()) { }" + PMD.EOL +    " }" + PMD.EOL +    "}";        private static final String JDK17_MULTICATCH =    "public class InputJava7Multicatch {" + PMD.EOL +    " public static void main() {" + PMD.EOL +    "  try { }" + PMD.EOL +    "  catch (FileNotFoundException | CustomException e) { }" + PMD.EOL +    " }" + PMD.EOL +    "}";        private static final String JDK17_MULTICATCH_WITH_ANNOTATIONS =    "public class InputJava7Multicatch {" + PMD.EOL +    " public static void main() {" + PMD.EOL +    "  try { }" + PMD.EOL +    "  catch (final @SuppressWarnings(\"all\") FileNotFoundException | CustomException e) { }" + PMD.EOL +    " }" + PMD.EOL +    "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(JDKVersionTest.class);    }}
package net.sourceforge.pmd.ast;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperator;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;import java.util.Set;public class ASTAssignmentOperatorTest extends ParserTst {    @Test    public void testSimpleAssignmentRecognized() throws Throwable {        Set ops = super.getNodes(ASTAssignmentOperator.class, TEST1);        assertFalse(((ASTAssignmentOperator) (ops.iterator().next())).isCompound());    }    @Test    public void testCompoundAssignmentPlusRecognized() throws Throwable {        Set ops = super.getNodes(ASTAssignmentOperator.class, TEST2);        assertTrue(((ASTAssignmentOperator) (ops.iterator().next())).isCompound());    }    @Test    public void testCompoundAssignmentMultRecognized() throws Throwable {        Set ops = super.getNodes(ASTAssignmentOperator.class, TEST3);        assertTrue(((ASTAssignmentOperator) (ops.iterator().next())).isCompound());    }    private static final String TEST1 =            "public class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  int x;" + PMD.EOL +            "  x=2;" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String TEST2 =            "public class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  int x;" + PMD.EOL +            "  x += 2;" + PMD.EOL +            " }" + PMD.EOL +            "}";    private static final String TEST3 =            "public class Foo {" + PMD.EOL +            " void bar() {" + PMD.EOL +            "  int x;" + PMD.EOL +            "  x *= 2;" + PMD.EOL +            " }" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTAssignmentOperatorTest.class);    }}
package net.sourceforge.pmd.ast;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.Iterator;import java.util.Set;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.testframework.ParserTst;import org.junit.Test;public class ASTFormalParameterTest extends ParserTst {    @Test    public void testVarargs() throws Throwable {        int nrOfVarArgs   = 0;        int nrOfNoVarArgs = 0;                Set<ASTFormalParameter> ops = getNodes(LanguageVersion.JAVA_15, ASTFormalParameter.class, TEST1);        for (Iterator<ASTFormalParameter> iter = ops.iterator(); iter.hasNext();) {            ASTFormalParameter b = iter.next();            ASTVariableDeclaratorId variableDeclId = b.getFirstDescendantOfType(ASTVariableDeclaratorId.class);            if (!"x".equals(variableDeclId.getImage())) {                assertTrue(b.isVarargs());                nrOfVarArgs++;            } else {                assertFalse(b.isVarargs());                nrOfNoVarArgs++;            }        }                //Ensure that both possibilities are tested        assertEquals(1, nrOfVarArgs);        assertEquals(1, nrOfNoVarArgs);    }    private static final String TEST1 =            "class Foo {" + PMD.EOL +            " void bar(int x, int... others) {}" + PMD.EOL +            "}";    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(ASTFormalParameterTest.class);    }}
package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import java.io.File;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.LanguageFilenameFilter;import org.junit.Test;/** * Tests on FileSelector. * * @author pieter_van_raemdonck - Application Engineers NV/SA - www.ae.be */public class FileSelectorTest {    /**     * Test wanted selection of a source file.     */    @Test    public void testWantedFile() {        LanguageFilenameFilter fileSelector = new LanguageFilenameFilter(Language.JAVA);        File javaFile = new File("/path/to/myFile.java");        boolean selected = fileSelector.accept(javaFile.getParentFile(), javaFile.getName());        assertEquals("This file should be selected !",true, selected);    }        /**     * Test unwanted selection of a non source file.     */    @Test    public void testUnwantedFile() {        LanguageFilenameFilter fileSelector = new LanguageFilenameFilter(Language.JAVA);        File javaFile = new File("/path/to/myFile.txt");        boolean selected = fileSelector.accept(javaFile.getParentFile(), javaFile.getName());        assertEquals("Not-source file must not be selected!", false, selected);    }    /**     * Test unwanted selection of a java file.     */    @Test    public void testUnwantedJavaFile() {        LanguageFilenameFilter fileSelector = new LanguageFilenameFilter(Language.XML);        File javaFile = new File("/path/to/MyClass.java");        boolean selected = fileSelector.accept(javaFile.getParentFile(), javaFile.getName());        assertEquals("Unwanted java file must not be selected!", false, selected);    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(FileSelectorTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertSame;import static org.junit.Assert.assertTrue;import java.io.InputStreamReader;import java.net.URL;import java.nio.charset.Charset;import junit.framework.JUnit4TestAdapter;import net.sourceforge.pmd.CommandLineOptions;import net.sourceforge.pmd.Configuration;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.renderers.CSVRenderer;import net.sourceforge.pmd.renderers.EmacsRenderer;import net.sourceforge.pmd.renderers.HTMLRenderer;import net.sourceforge.pmd.renderers.IDEAJRenderer;import net.sourceforge.pmd.renderers.Renderer;import net.sourceforge.pmd.renderers.SummaryHTMLRenderer;import net.sourceforge.pmd.renderers.TextColorRenderer;import net.sourceforge.pmd.renderers.TextPadRenderer;import net.sourceforge.pmd.renderers.TextRenderer;import net.sourceforge.pmd.renderers.VBHTMLRenderer;import net.sourceforge.pmd.renderers.XMLRenderer;import net.sourceforge.pmd.renderers.XSLTRenderer;import net.sourceforge.pmd.renderers.YAHTMLRenderer;import net.sourceforge.pmd.util.ClasspathClassLoader;import org.junit.Test;public class CommandLineOptionsTest {    @Test    public void testLang() {// Testing command line default behavior (no -lang option, means Java 1.5)        CommandLineOptions opt = new CommandLineOptions(new String[]{"file", "format", "basic"});        assertEquals("LanguageVersion[Java 1.7]", opt.getConfiguration().getLanguageVersionDiscoverer().getDefaultLanguageVersion(Language.JAVA).toString());        opt = new CommandLineOptions(new String[]{"file", "format", "ruleset", "-version","java", "1.3"});        assertEquals("LanguageVersion[Java 1.3]", opt.getConfiguration().getLanguageVersionDiscoverer().getDefaultLanguageVersion(Language.JAVA).toString());        opt = new CommandLineOptions(new String[]{"file", "format", "ruleset", "-version","java", "1.5"});        assertEquals("LanguageVersion[Java 1.5]", opt.getConfiguration().getLanguageVersionDiscoverer().getDefaultLanguageVersion(Language.JAVA).toString());        opt = new CommandLineOptions(new String[]{"file", "format", "ruleset", "-version","java", "1.6"});        assertEquals("LanguageVersion[Java 1.6]", opt.getConfiguration().getLanguageVersionDiscoverer().getDefaultLanguageVersion(Language.JAVA).toString());        opt = new CommandLineOptions(new String[]{"-version","java","1.6","file", "format", "ruleset"});        assertEquals("LanguageVersion[Java 1.6]", opt.getConfiguration().getLanguageVersionDiscoverer().getDefaultLanguageVersion(Language.JAVA).toString());        opt = new CommandLineOptions(new String[]{"file", "format", "ruleset","-version","java","1.7"});        assertEquals("LanguageVersion[Java 1.7]", opt.getConfiguration().getLanguageVersionDiscoverer().getDefaultLanguageVersion(Language.JAVA).toString());    }    @Test    public void testDebug() {        CommandLineOptions opt = new CommandLineOptions(new String[]{"file", "format", "basic", "-debug"});        assertTrue(opt.getConfiguration().isDebug());        opt = new CommandLineOptions(new String[]{"-debug", "file", "format", "basic"});        assertTrue(opt.getConfiguration().isDebug());    }    @Test    public void testSuppressMarker() {        CommandLineOptions opt = new CommandLineOptions(new String[]{"file", "format", "basic", "-suppressmarker", "FOOBAR"});        assertEquals("FOOBAR", opt.getConfiguration().getSuppressMarker());        opt = new CommandLineOptions(new String[]{"-suppressmarker", "FOOBAR", "file", "format", "basic"});        assertEquals("FOOBAR", opt.getConfiguration().getSuppressMarker());    }    @Test    public void testShortNames() {        CommandLineOptions opt = new CommandLineOptions(new String[]{"file", "format", "basic", "-shortnames"});        assertTrue(opt.getConfiguration().isReportShortNames());        opt = new CommandLineOptions(new String[]{"-shortnames", "file", "format", "basic"});        assertTrue(opt.getConfiguration().isReportShortNames());    }    @Test    public void testEncoding() {        CommandLineOptions opt = new CommandLineOptions(new String[]{"file", "format", "basic"});        assertEquals(Charset.forName(opt.getConfiguration().getSourceEncoding()), Charset.forName(new InputStreamReader(System.in).getEncoding()));        opt = new CommandLineOptions(new String[]{"file", "format", "ruleset", "-encoding", "UTF-8"});        assertEquals(opt.getConfiguration().getSourceEncoding(), "UTF-8");        opt = new CommandLineOptions(new String[]{"-encoding", "UTF-8", "file", "format", "ruleset"});        assertEquals(opt.getConfiguration().getSourceEncoding(), "UTF-8");    }    @Test    public void testInputFileName() {        CommandLineOptions opt = new CommandLineOptions(new String[]{"file", "format", "basic"});        assertEquals("file", opt.getConfiguration().getInputPaths());    }    @Test    public void testReportFormat() {        CommandLineOptions opt = new CommandLineOptions(new String[]{"file", "format", "basic"});        assertEquals("format", opt.getConfiguration().getReportFormat());    }    @Test    public void testRulesets() {        CommandLineOptions opt = new CommandLineOptions(new String[]{"file", "format", "java-basic"});        assertEquals("rulesets/java/basic.xml", opt.getConfiguration().getRuleSets());    }    @Test    public void testCommaSeparatedFiles() {        CommandLineOptions opt = new CommandLineOptions(new String[]{"file1,file2,file3", "format", "basic"});        assertEquals("file1,file2,file3", opt.getConfiguration().getInputPaths());    }    @Test(expected = RuntimeException.class)    public void testNotEnoughArgs() {        new CommandLineOptions(new String[] { "file1", "format" });    }    @Test(expected = RuntimeException.class)    public void testNullArgs() {        new CommandLineOptions(null);    }        @Test    public void testReportFile(){            CommandLineOptions opt = new CommandLineOptions(new String[]{"file", "format", "basic", "-reportfile", "foo.txt"});        assertSame("foo.txt", opt.getConfiguration().getReportFile());        opt = new CommandLineOptions(new String[]{"-reportfile", "foo.txt", "file", "format", "basic"});        assertSame("foo.txt", opt.getConfiguration().getReportFile());    }    @Test    public void testThreads() {CommandLineOptions opt = new CommandLineOptions(new String[] { "file", "format", "basic", "-threads", "2" });assertEquals(2, opt.getConfiguration().getThreads());opt = new CommandLineOptions(new String[] { "-threads", "2", "file", "format", "basic" });assertEquals(2, opt.getConfiguration().getThreads());}    @Test    public void testRenderer() {        CommandLineOptions opt = new CommandLineOptions(new String[]{"file", "xml", "basic"});        Renderer renderer = opt.getConfiguration().createRenderer();        assertTrue(renderer instanceof XMLRenderer);        opt = new CommandLineOptions(new String[]{"file", "html", "basic"});        renderer = opt.getConfiguration().createRenderer();        assertTrue(renderer instanceof HTMLRenderer);        opt = new CommandLineOptions(new String[]{"file", "text", "basic"});        renderer = opt.getConfiguration().createRenderer();        assertTrue(renderer instanceof TextRenderer);        opt = new CommandLineOptions(new String[]{"file", "emacs", "basic"});        renderer = opt.getConfiguration().createRenderer();        assertTrue(renderer instanceof EmacsRenderer);        opt = new CommandLineOptions(new String[]{"file", "csv", "basic"});        renderer = opt.getConfiguration().createRenderer();        assertTrue(renderer instanceof CSVRenderer);        opt = new CommandLineOptions(new String[]{"file", "vbhtml", "basic"});        renderer = opt.getConfiguration().createRenderer();        assertTrue(renderer instanceof VBHTMLRenderer);        opt = new CommandLineOptions(new String[]{"file", "yahtml", "basic"});        renderer = opt.getConfiguration().createRenderer();        assertTrue(renderer instanceof YAHTMLRenderer);        opt = new CommandLineOptions(new String[]{"file", "ideaj", "basic"});        renderer = opt.getConfiguration().createRenderer();        assertTrue(renderer instanceof IDEAJRenderer);        opt = new CommandLineOptions(new String[]{"file", "summaryhtml", "basic"});        renderer = opt.getConfiguration().createRenderer();        assertTrue(renderer instanceof SummaryHTMLRenderer);        opt = new CommandLineOptions(new String[]{"file", "textcolor", "basic"});        renderer = opt.getConfiguration().createRenderer();        assertTrue(renderer instanceof TextColorRenderer);        opt = new CommandLineOptions(new String[]{"file", "textpad", "basic"});        renderer = opt.getConfiguration().createRenderer();        assertTrue(renderer instanceof TextPadRenderer);        opt = new CommandLineOptions(new String[]{"file", "xml", "basic"});        renderer = opt.getConfiguration().createRenderer();        assertTrue(renderer instanceof XMLRenderer);        opt = new CommandLineOptions(new String[]{"file", "xslt", "basic"});        renderer = opt.getConfiguration().createRenderer();        assertTrue(renderer instanceof XSLTRenderer);    }    @Test(expected = IllegalArgumentException.class)    public void illegalArgument1() {        CommandLineOptions opt = new CommandLineOptions(new String[] { "file", "", "basic" });        opt.getConfiguration().createRenderer();    }        @Test(expected = IllegalArgumentException.class)    public void illegalArgument2() {        CommandLineOptions opt = new CommandLineOptions(new String[]{"file", "fiddlefaddle", "basic"});        opt.getConfiguration().createRenderer();    }        @Test    public void testOptionsFirst(){CommandLineOptions opt = new CommandLineOptions(new String[] { "-threads", "2", "-debug", "file", "format", "java-basic" });assertEquals(2, opt.getConfiguration().getThreads());        assertEquals("file", opt.getConfiguration().getInputPaths());        assertEquals("format", opt.getConfiguration().getReportFormat());        assertEquals("rulesets/java/basic.xml", opt.getConfiguration().getRuleSets());        assertTrue(opt.getConfiguration().isDebug());    }    @Test    public void testAuxilaryClasspath() {CommandLineOptions opt = new CommandLineOptions(new String[] { "-auxclasspath", "/classpath", "file", "format","basic" });ClassLoader classLoader = opt.getConfiguration().getClassLoader();assertTrue("classloader is ClasspathClassLoader", classLoader instanceof ClasspathClassLoader);URL[] urls = ((ClasspathClassLoader) classLoader).getURLs();assertEquals("urls length", 1, urls.length);assertTrue("url[0]", urls[0].toString().endsWith("/classpath"));assertEquals("parent classLoader", Configuration.class.getClassLoader(), classLoader.getParent());    }    @Test(expected = IllegalArgumentException.class)    public void testAuxilaryClasspathIllegal() {new CommandLineOptions(new String[] { "file", "format", "basic", "-auxclasspath" });}    @Test    public void testShowSuppressed() {        CommandLineOptions opt = new CommandLineOptions(new String[]{"file", "format", "basic"});        assertFalse(opt.getConfiguration().isShowSuppressedViolations());        opt = new CommandLineOptions(new String[]{"-showsuppressed", "file", "format", "basic"});        assertTrue(opt.getConfiguration().isShowSuppressedViolations());    }    public static junit.framework.Test suite() {        return new JUnit4TestAdapter(CommandLineOptionsTest.class);    }}
package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.Report;import org.junit.Test;import org.junit.runner.RunWith;import org.junit.runners.Parameterized;import org.junit.runners.Parameterized.Parameters;import java.util.Arrays;import java.util.Collection;import junit.framework.JUnit4TestAdapter;@RunWith(Parameterized.class)public class ReadableDurationTest {    private Integer value;    private String expected;    public ReadableDurationTest(String expected, Integer value) {        this.value = value;        this.expected = expected;    }    @Parameters    public static Collection<Object[]> data() {        return Arrays.asList(new Object[][]{                {"0s", 35},                {"25s", (25 * 1000)},                {"5m 0s", (60 * 1000 * 5)},                {"2h 0m 0s", (60 * 1000 * 120)}        });    }    @Test    public void test() {        assertEquals(expected, new Report.ReadableDuration(value).getTime());    }    public static junit.framework.Test suite() {        return new JUnit4TestAdapter(ReadableDurationTest.class);    }}
package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import java.io.File;import junit.framework.JUnit4TestAdapter;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.LanguageVersionDiscoverer;import org.junit.Test;public class LanguageVersionDiscovererTest {    /**     * Test on JSP file.     */    @Test    public void testJspFile() {        LanguageVersionDiscoverer discoverer = new LanguageVersionDiscoverer();        File jspFile = new File("/path/to/MyPage.jsp");        LanguageVersion languageVersion = discoverer.getDefaultLanguageVersionForFile(jspFile);        assertEquals("LanguageVersion must be JSP!", LanguageVersion.JSP, languageVersion);    }    /**     * Test on Java file with default options.     */    @Test    public void testJavaFileUsingDefaults() {        LanguageVersionDiscoverer discoverer = new LanguageVersionDiscoverer();        File javaFile = new File("/path/to/MyClass.java");        LanguageVersion languageVersion = discoverer.getDefaultLanguageVersionForFile(javaFile);        assertEquals("LanguageVersion must be Java 1.7 !", LanguageVersion.JAVA_17, languageVersion);    }    /**     * Test on Java file with Java version set to 1.4.     */    @Test    public void testJavaFileUsing15() {        LanguageVersionDiscoverer discoverer = new LanguageVersionDiscoverer();        discoverer.setDefaultLanguageVersion(LanguageVersion.JAVA_14);        File javaFile = new File("/path/to/MyClass.java");        LanguageVersion languageVersion = discoverer.getDefaultLanguageVersionForFile(javaFile);        assertEquals("LanguageVersion must be Java 1.4!", LanguageVersion.JAVA_14, languageVersion);    }    public static junit.framework.Test suite() {        return new JUnit4TestAdapter(LanguageVersionDiscovererTest.class);    }}
package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertSame;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.List;import java.util.Random;import junit.framework.JUnit4TestAdapter;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.RuleViolationComparator;import net.sourceforge.pmd.lang.java.ast.DummyJavaNode;import net.sourceforge.pmd.lang.java.rule.JavaRuleViolation;import net.sourceforge.pmd.lang.java.symboltable.SourceFileScope;import net.sourceforge.pmd.lang.rule.MockRule;import org.junit.Test;public class RuleViolationComparatorTest {    @Test    public void testComparator() {Rule rule1 = new MockRule("name1", "desc", "msg", "rulesetname1");Rule rule2 = new MockRule("name2", "desc", "msg", "rulesetname2");// RuleViolations created in pre-sorted orderRuleViolation[] expectedOrder = new RuleViolation[12];int index = 0;// Different begin lineexpectedOrder[index++] = createJavaRuleViolation(rule1, "file1", 10, "desc1", 0, 20, 80);expectedOrder[index++] = createJavaRuleViolation(rule1, "file1", 20, "desc1", 0, 20, 80);// Different descriptionexpectedOrder[index++] = createJavaRuleViolation(rule1, "file2", 10, "desc1", 0, 20, 80);expectedOrder[index++] = createJavaRuleViolation(rule1, "file2", 10, "desc2", 0, 20, 80);// Different begin columnexpectedOrder[index++] = createJavaRuleViolation(rule1, "file3", 10, "desc1", 0, 20, 80);expectedOrder[index++] = createJavaRuleViolation(rule1, "file3", 10, "desc1", 10, 20, 80);// Different end lineexpectedOrder[index++] = createJavaRuleViolation(rule1, "file4", 10, "desc1", 0, 20, 80);expectedOrder[index++] = createJavaRuleViolation(rule1, "file4", 10, "desc1", 0, 30, 80);// Different end columnexpectedOrder[index++] = createJavaRuleViolation(rule1, "file5", 10, "desc1", 0, 20, 80);expectedOrder[index++] = createJavaRuleViolation(rule1, "file5", 10, "desc1", 0, 20, 90);// Different rule nameexpectedOrder[index++] = createJavaRuleViolation(rule1, "file6", 10, "desc1", 0, 20, 80);expectedOrder[index++] = createJavaRuleViolation(rule2, "file6", 10, "desc1", 0, 20, 80);// RandomizeList<RuleViolation> ruleViolations = new ArrayList<RuleViolation>(Arrays.asList(expectedOrder));long seed = System.nanoTime();Random random = new Random(seed);Collections.shuffle(ruleViolations, random);// SortCollections.sort(ruleViolations, RuleViolationComparator.INSTANCE);// Checkint count = 0;for (int i = 0; i < expectedOrder.length; i++) {    count++;    assertSame("Wrong RuleViolation " + i + ", usind seed: " + seed, expectedOrder[i], ruleViolations.get(i));}assertEquals("Missing assertion for every RuleViolation", expectedOrder.length, count);    }    private RuleViolation createJavaRuleViolation(Rule rule, String fileName, int beginLine, String description,    int beginColumn, int endLine, int endColumn) {RuleContext ruleContext = new RuleContext();ruleContext.setSourceCodeFilename(fileName);DummyJavaNode simpleNode = new DummyJavaNode(1);simpleNode.setScope(new SourceFileScope(fileName));simpleNode.testingOnly__setBeginLine(beginLine);simpleNode.testingOnly__setBeginColumn(beginColumn);simpleNode.testingOnly__setEndLine(endLine);simpleNode.testingOnly__setEndColumn(endColumn);RuleViolation ruleViolation = new JavaRuleViolation(rule, ruleContext, simpleNode, description);return ruleViolation;    }    public static junit.framework.Test suite() {return new JUnit4TestAdapter(RuleViolationComparatorTest.class);    }}
package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertTrue;import junit.framework.JUnit4TestAdapter;import net.sourceforge.pmd.RulePriority;import net.sourceforge.pmd.RuleSetReference;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.rule.MockRule;import net.sourceforge.pmd.lang.rule.RuleReference;import net.sourceforge.pmd.lang.rule.properties.StringProperty;import org.junit.Test;public class RuleReferenceTest {@Testpublic void testRuleSetReference() {RuleReference ruleReference = new RuleReference();RuleSetReference ruleSetReference = new RuleSetReference();ruleReference.setRuleSetReference(ruleSetReference);assertEquals("Not same rule set reference", ruleSetReference, ruleReference.getRuleSetReference());}@Testpublic void testOverride() {    StringProperty PROPERTY1_DESCRIPTOR = new StringProperty("property1", "Test property", null, 0f);MockRule rule = new MockRule();rule.definePropertyDescriptor(PROPERTY1_DESCRIPTOR);rule.setLanguage(Language.XML);rule.setName("name1");rule.setProperty(PROPERTY1_DESCRIPTOR, "value1");rule.setMessage("message1");rule.setDescription("description1");rule.addExample("example1");rule.setExternalInfoUrl("externalInfoUrl1");rule.setPriority(RulePriority.HIGH);StringProperty PROPERTY2_DESCRIPTOR = new StringProperty("property2", "Test property", null, 0f);RuleReference ruleReference = new RuleReference();ruleReference.setRule(rule);ruleReference.definePropertyDescriptor(PROPERTY2_DESCRIPTOR);ruleReference.setLanguage(Language.JAVA);ruleReference.setMinimumLanguageVersion(LanguageVersion.JAVA_13);ruleReference.setMaximumLanguageVersion(LanguageVersion.JAVA_17);ruleReference.setDeprecated(true);ruleReference.setName("name2");ruleReference.setProperty(PROPERTY1_DESCRIPTOR, "value2");ruleReference.setProperty(PROPERTY2_DESCRIPTOR, "value3");ruleReference.setMessage("message2");ruleReference.setDescription("description2");ruleReference.addExample("example2");ruleReference.setExternalInfoUrl("externalInfoUrl2");ruleReference.setPriority(RulePriority.MEDIUM_HIGH);assertEquals("Override failed", Language.JAVA, ruleReference.getLanguage());assertEquals("Override failed", Language.JAVA, ruleReference.getOverriddenLanguage());assertEquals("Override failed", LanguageVersion.JAVA_13, ruleReference.getMinimumLanguageVersion());assertEquals("Override failed", LanguageVersion.JAVA_13, ruleReference.getOverriddenMinimumLanguageVersion());assertEquals("Override failed", LanguageVersion.JAVA_17, ruleReference.getMaximumLanguageVersion());assertEquals("Override failed", LanguageVersion.JAVA_17, ruleReference.getOverriddenMaximumLanguageVersion());assertEquals("Override failed", false, ruleReference.getRule().isDeprecated());assertEquals("Override failed", true, ruleReference.isDeprecated());assertEquals("Override failed", true, ruleReference.isOverriddenDeprecated());assertEquals("Override failed", "name2", ruleReference.getName());assertEquals("Override failed", "name2", ruleReference.getOverriddenName());assertEquals("Override failed", "value2", ruleReference.getProperty(PROPERTY1_DESCRIPTOR));assertEquals("Override failed", "value3", ruleReference.getProperty(PROPERTY2_DESCRIPTOR));assertTrue("Override failed", ruleReference.getPropertyDescriptors().contains(PROPERTY1_DESCRIPTOR));assertTrue("Override failed", ruleReference.getPropertyDescriptors().contains(PROPERTY2_DESCRIPTOR));assertFalse("Override failed", ruleReference.getOverriddenPropertyDescriptors().contains(PROPERTY1_DESCRIPTOR));assertTrue("Override failed", ruleReference.getOverriddenPropertyDescriptors().contains(PROPERTY2_DESCRIPTOR));assertTrue("Override failed", ruleReference.getPropertiesByPropertyDescriptor().containsKey(PROPERTY1_DESCRIPTOR));assertTrue("Override failed", ruleReference.getPropertiesByPropertyDescriptor().containsKey(PROPERTY2_DESCRIPTOR));assertTrue("Override failed", ruleReference.getOverriddenPropertiesByPropertyDescriptor().containsKey(PROPERTY1_DESCRIPTOR));assertTrue("Override failed", ruleReference.getOverriddenPropertiesByPropertyDescriptor().containsKey(PROPERTY2_DESCRIPTOR));assertEquals("Override failed", "message2", ruleReference.getMessage());assertEquals("Override failed", "message2", ruleReference.getOverriddenMessage());assertEquals("Override failed", "description2", ruleReference.getDescription());assertEquals("Override failed", "description2", ruleReference.getOverriddenDescription());assertEquals("Override failed", 2, ruleReference.getExamples().size());assertEquals("Override failed", "example1", ruleReference.getExamples().get(0));assertEquals("Override failed", "example2", ruleReference.getExamples().get(1));assertEquals("Override failed", "example2", ruleReference.getOverriddenExamples().get(0));assertEquals("Override failed", "externalInfoUrl2", ruleReference.getExternalInfoUrl());assertEquals("Override failed", "externalInfoUrl2", ruleReference.getOverriddenExternalInfoUrl());assertEquals("Override failed", RulePriority.MEDIUM_HIGH, ruleReference.getPriority());assertEquals("Override failed", RulePriority.MEDIUM_HIGH, ruleReference.getOverriddenPriority());}@Testpublic void testNotOverride() {    StringProperty PROPERTY1_DESCRIPTOR = new StringProperty("property1", "Test property", null, 0f);MockRule rule = new MockRule();rule.definePropertyDescriptor(PROPERTY1_DESCRIPTOR);rule.setLanguage(Language.JAVA);rule.setMinimumLanguageVersion(LanguageVersion.JAVA_13);rule.setMaximumLanguageVersion(LanguageVersion.JAVA_17);rule.setName("name1");rule.setProperty(PROPERTY1_DESCRIPTOR, "value1");rule.setMessage("message1");rule.setDescription("description1");rule.addExample("example1");rule.setExternalInfoUrl("externalInfoUrl1");rule.setPriority(RulePriority.HIGH);RuleReference ruleReference = new RuleReference();ruleReference.setRule(rule);ruleReference.setLanguage(Language.JAVA);ruleReference.setMinimumLanguageVersion(LanguageVersion.JAVA_13);ruleReference.setMaximumLanguageVersion(LanguageVersion.JAVA_17);ruleReference.setDeprecated(false);ruleReference.setName("name1");ruleReference.setProperty(PROPERTY1_DESCRIPTOR, "value1");ruleReference.setMessage("message1");ruleReference.setDescription("description1");ruleReference.addExample("example1");ruleReference.setExternalInfoUrl("externalInfoUrl1");ruleReference.setPriority(RulePriority.HIGH);assertEquals("Override failed", Language.JAVA, ruleReference.getLanguage());assertNull("Override failed", ruleReference.getOverriddenLanguage());assertEquals("Override failed", LanguageVersion.JAVA_13, ruleReference.getMinimumLanguageVersion());assertNull("Override failed", ruleReference.getOverriddenMinimumLanguageVersion());assertEquals("Override failed", LanguageVersion.JAVA_17, ruleReference.getMaximumLanguageVersion());assertNull("Override failed", ruleReference.getOverriddenMaximumLanguageVersion());assertEquals("Override failed", false, ruleReference.isDeprecated());assertNull("Override failed", ruleReference.isOverriddenDeprecated());assertEquals("Override failed", "name1", ruleReference.getName());assertNull("Override failed", ruleReference.getOverriddenName());assertEquals("Override failed", "value1", ruleReference.getProperty(PROPERTY1_DESCRIPTOR));assertEquals("Override failed", "message1", ruleReference.getMessage());assertNull("Override failed", ruleReference.getOverriddenMessage());assertEquals("Override failed", "description1", ruleReference.getDescription());assertNull("Override failed", ruleReference.getOverriddenDescription());assertEquals("Override failed", 1, ruleReference.getExamples().size());assertEquals("Override failed", "example1", ruleReference.getExamples().get(0));assertNull("Override failed", ruleReference.getOverriddenExamples());assertEquals("Override failed", "externalInfoUrl1", ruleReference.getExternalInfoUrl());assertNull("Override failed", ruleReference.getOverriddenExternalInfoUrl());assertEquals("Override failed", RulePriority.HIGH, ruleReference.getPriority());assertNull("Override failed", ruleReference.getOverriddenPriority());}public static junit.framework.Test suite() {return new JUnit4TestAdapter(RuleReferenceTest.class);}}
 package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import junit.framework.JUnit4TestAdapter;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;import net.sourceforge.pmd.testframework.RuleTst;import org.junit.Test; public class SuppressWarningsTest extends RuleTst {     private static class FooRule extends AbstractJavaRule {        @Override        public Object visit(ASTClassOrInterfaceDeclaration c, Object ctx) {            if (c.getImage().equalsIgnoreCase("Foo")) {                addViolation(ctx, c);            }            return super.visit(c, ctx);        }        @Override        public Object visit(ASTVariableDeclaratorId c, Object ctx) {            if (c.getImage().equalsIgnoreCase("Foo")) {                addViolation(ctx, c);            }            return super.visit(c, ctx);        }        @Override        public String getName() {            return "NoFoo";        }     }     private static class BarRule extends AbstractJavaRule {        @Override        public Object visit(ASTCompilationUnit cu, Object ctx) {            // Convoluted rule to make sure the violation is reported for the ASTCompilationUnit node            for (ASTClassOrInterfaceDeclaration c : cu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class)) {                if (c.getImage().equalsIgnoreCase("bar")) {                    addViolation(ctx, cu);                }            }            return super.visit(cu, ctx);        }        @Override        public String getName() {            return "NoBar";        }     }     @Test     public void testClassLevelSuppression() throws Throwable {         Report rpt = new Report();         runTestFromString(TEST1, new FooRule(), rpt, LanguageVersion.JAVA_15);         assertEquals(0, rpt.size());         runTestFromString(TEST2, new FooRule(), rpt, LanguageVersion.JAVA_15);         assertEquals(0, rpt.size());     }     @Test     public void testInheritedSuppression() throws Throwable {         Report rpt = new Report();         runTestFromString(TEST3, new FooRule(), rpt, LanguageVersion.JAVA_15);         assertEquals(0, rpt.size());     }     @Test     public void testMethodLevelSuppression() throws Throwable {         Report rpt = new Report();         runTestFromString(TEST4, new FooRule(), rpt, LanguageVersion.JAVA_15);         assertEquals(1, rpt.size());     }     @Test     public void testConstructorLevelSuppression() throws Throwable {         Report rpt = new Report();         runTestFromString(TEST5, new FooRule(), rpt, LanguageVersion.JAVA_15);         assertEquals(0, rpt.size());     }     @Test     public void testFieldLevelSuppression() throws Throwable {         Report rpt = new Report();         runTestFromString(TEST6, new FooRule(), rpt, LanguageVersion.JAVA_15);         assertEquals(1, rpt.size());     }     @Test     public void testParameterLevelSuppression() throws Throwable {         Report rpt = new Report();         runTestFromString(TEST7, new FooRule(), rpt, LanguageVersion.JAVA_15);         assertEquals(1, rpt.size());     }     @Test     public void testLocalVariableLevelSuppression() throws Throwable {         Report rpt = new Report();         runTestFromString(TEST8, new FooRule(), rpt, LanguageVersion.JAVA_15);         assertEquals(1, rpt.size());     }     @Test     public void testSpecificSuppression() throws Throwable {         Report rpt = new Report();         runTestFromString(TEST9, new FooRule(), rpt, LanguageVersion.JAVA_15);         assertEquals(1, rpt.size());     }     @Test     public void testNoSuppressionBlank() throws Throwable {         Report rpt = new Report();         runTestFromString(TEST10, new FooRule(), rpt, LanguageVersion.JAVA_15);         assertEquals(2, rpt.size());     }     @Test     public void testNoSuppressionSomethingElseS() throws Throwable {         Report rpt = new Report();         runTestFromString(TEST11, new FooRule(), rpt, LanguageVersion.JAVA_15);         assertEquals(2, rpt.size());     }     @Test     public void testSuppressAll() throws Throwable {         Report rpt = new Report();         runTestFromString(TEST12, new FooRule(), rpt, LanguageVersion.JAVA_15);         assertEquals(0, rpt.size());     }     @Test     public void testSpecificSuppressionAtTopLevel() throws Throwable {         Report rpt = new Report();         runTestFromString(TEST13, new BarRule(), rpt, LanguageVersion.JAVA_15);         assertEquals(0, rpt.size());     }     private static final String TEST1 =             "@SuppressWarnings(\"PMD\")" + PMD.EOL +             "public class Foo {}";     private static final String TEST2 =             "@SuppressWarnings(\"PMD\")" + PMD.EOL +             "public class Foo {" + PMD.EOL +             " void bar() {" + PMD.EOL +             "  int foo;" + PMD.EOL +             " }" + PMD.EOL +             "}";     private static final String TEST3 =             "public class Baz {" + PMD.EOL +             " @SuppressWarnings(\"PMD\")" + PMD.EOL +             " public class Bar {" + PMD.EOL +             "  void bar() {" + PMD.EOL +             "   int foo;" + PMD.EOL +             "  }" + PMD.EOL +             " }" + PMD.EOL +             "}";     private static final String TEST4 =             "public class Foo {" + PMD.EOL +             " @SuppressWarnings(\"PMD\")" + PMD.EOL +             " void bar() {" + PMD.EOL +             "  int foo;" + PMD.EOL +             " }" + PMD.EOL +             "}";     private static final String TEST5 =             "public class Bar {" + PMD.EOL +             " @SuppressWarnings(\"PMD\")" + PMD.EOL +             " public Bar() {" + PMD.EOL +             "  int foo;" + PMD.EOL +             " }" + PMD.EOL +             "}";     private static final String TEST6 =             "public class Bar {" + PMD.EOL +             " @SuppressWarnings(\"PMD\")" + PMD.EOL +             " int foo;" + PMD.EOL +             " void bar() {" + PMD.EOL +             "  int foo;" + PMD.EOL +             " }" + PMD.EOL +             "}";     private static final String TEST7 =             "public class Bar {" + PMD.EOL +             " int foo;" + PMD.EOL +             " void bar(@SuppressWarnings(\"PMD\") int foo) {}" + PMD.EOL +             "}";     private static final String TEST8 =             "public class Bar {" + PMD.EOL +             " int foo;" + PMD.EOL +             " void bar() {" + PMD.EOL +             "  @SuppressWarnings(\"PMD\") int foo;" + PMD.EOL +             " }" + PMD.EOL +             "}";     private static final String TEST9 =             "public class Bar {" + PMD.EOL +             " int foo;" + PMD.EOL +             " void bar() {" + PMD.EOL +             "  @SuppressWarnings(\"PMD.NoFoo\") int foo;" + PMD.EOL +             " }" + PMD.EOL +             "}";     private static final String TEST10 =             "public class Bar {" + PMD.EOL +             " int foo;" + PMD.EOL +             " void bar() {" + PMD.EOL +             "  @SuppressWarnings(\"\") int foo;" + PMD.EOL +             " }" + PMD.EOL +             "}";     private static final String TEST11 =             "public class Bar {" + PMD.EOL +             " int foo;" + PMD.EOL +             " void bar() {" + PMD.EOL +             "  @SuppressWarnings(\"SomethingElse\") int foo;" + PMD.EOL +             " }" + PMD.EOL +             "}";     private static final String TEST12 =             "public class Bar {" + PMD.EOL +             " @SuppressWarnings(\"all\") int foo;" + PMD.EOL +             "}";     private static final String TEST13 =             "@SuppressWarnings(\"PMD.NoBar\")" + PMD.EOL +             "public class Bar {" + PMD.EOL +             "}";    public static junit.framework.Test suite() {        return new JUnit4TestAdapter(SuppressWarningsTest.class);    } }
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertSame;import static org.junit.Assert.assertTrue;import java.util.HashMap;import java.util.Map;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RulePriority;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.java.ast.DummyJavaNode;import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;import net.sourceforge.pmd.lang.java.rule.JavaRuleViolation;import net.sourceforge.pmd.lang.java.symboltable.SourceFileScope;import net.sourceforge.pmd.lang.rule.properties.IntegerProperty;import net.sourceforge.pmd.lang.rule.properties.StringProperty;import org.junit.Test;public class AbstractRuleTest {    private static class MyRule extends AbstractJavaRule {    private static final StringProperty pd = new StringProperty("foo", "foo property", "x", 1.0f);    private static final StringProperty xpath = new StringProperty("xpath", "xpath property", "", 2.0f);        public MyRule() {            definePropertyDescriptor(pd);            definePropertyDescriptor(xpath);            setName("MyRule");            setMessage("my rule msg");            setPriority(RulePriority.MEDIUM);            setProperty(pd, "value");        }    }    private static class MyOtherRule extends AbstractJavaRule {    private static final PropertyDescriptor pd = new StringProperty("foo", "foo property", "x", 1.0f);public MyOtherRule() {            definePropertyDescriptor(pd);            setName("MyOtherRule");            setMessage("my other rule");            setPriority(RulePriority.MEDIUM);            setProperty(pd, "value");        }    }    @Test    public void testCreateRV() {        MyRule r = new MyRule();        r.setRuleSetName("foo");        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename");        DummyJavaNode s = new DummyJavaNode(1);        s.testingOnly__setBeginColumn(5);        s.testingOnly__setBeginLine(5);        s.setScope(new SourceFileScope("foo"));        RuleViolation rv = new JavaRuleViolation(r, ctx, s, r.getMessage());        assertEquals("Line number mismatch!", 5, rv.getBeginLine());        assertEquals("Filename mismatch!", "filename", rv.getFilename());        assertEquals("Rule object mismatch!", r, rv.getRule());        assertEquals("Rule msg mismatch!", "my rule msg", rv.getDescription());        assertEquals("RuleSet name mismatch!", "foo", rv.getRule().getRuleSetName());    }    @Test    public void testCreateRV2() {        MyRule r = new MyRule();        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename");        DummyJavaNode s = new DummyJavaNode(1);        s.testingOnly__setBeginColumn(5);        s.testingOnly__setBeginLine(5);        s.setScope(new SourceFileScope("foo"));        RuleViolation rv = new JavaRuleViolation(r, ctx, s, "specificdescription");        assertEquals("Line number mismatch!", 5, rv.getBeginLine());        assertEquals("Filename mismatch!", "filename", rv.getFilename());        assertEquals("Rule object mismatch!", r, rv.getRule());        assertEquals("Rule description mismatch!", "specificdescription", rv.getDescription());    }    @Test    public void testRuleWithVariableInMessage() {        MyRule r = new MyRule();        r.definePropertyDescriptor(new IntegerProperty("testInt", "description", 0, 100, 10, 0));        r.setMessage("Message ${packageName} ${className} ${methodName} ${variableName} ${testInt} ${noSuchProperty}");        RuleContext ctx = new RuleContext();        ctx.setLanguageVersion(Language.JAVA.getDefaultVersion());        ctx.setReport(new Report());        ctx.setSourceCodeFilename("filename");        DummyJavaNode s = new DummyJavaNode(1);        s.testingOnly__setBeginColumn(5);        s.testingOnly__setBeginLine(5);        s.setImage("TestImage");        s.setScope(new SourceFileScope("foo"));        r.addViolation(ctx, s);        RuleViolation rv = ctx.getReport().getViolationTree().iterator().next();        assertEquals("Message foo    10 ${noSuchProperty}", rv.getDescription());    }    @Test    public void testRuleSuppress() {        MyRule r = new MyRule();        RuleContext ctx = new RuleContext();        Map<Integer, String> m = new HashMap<Integer, String>();        m.put(Integer.valueOf(5), "");        ctx.setReport(new Report());        ctx.getReport().suppress(m);        ctx.setSourceCodeFilename("filename");        DummyJavaNode n = new DummyJavaNode(1);        n.testingOnly__setBeginColumn(5);        n.testingOnly__setBeginLine(5);        n.setScope(new SourceFileScope("foo"));        RuleViolation rv = new JavaRuleViolation(r, ctx, n, "specificdescription");        ctx.getReport().addRuleViolation(rv);        assertTrue(ctx.getReport().isEmpty());    }    @Test    public void testEquals1() {        MyRule r = new MyRule();        assertFalse("A rule is never equals to null!", r.equals(null));    }    @Test    public void testEquals2() {        MyRule r = new MyRule();        assertEquals("A rule must be equals to itself", r, r);    }    @Test    public void testEquals3() {        MyRule r1 = new MyRule();        MyRule r2 = new MyRule();        assertEquals("Two instances of the same rule are equal", r1, r2);        assertEquals("Hashcode for two instances of the same rule must be equal", r1.hashCode(), r2.hashCode());    }    @Test    public void testEquals4() {        MyRule myRule = new MyRule();        assertFalse("A rule cannot be equal to an object of another class", myRule.equals("MyRule"));    }    @Test    public void testEquals5() {        MyRule myRule = new MyRule();        MyOtherRule myOtherRule = new MyOtherRule();        assertFalse("Two rules from different classes cannot be equal", myRule.equals(myOtherRule));    }    @Test    public void testEquals6() {        MyRule r1 = new MyRule();        MyRule r2 = new MyRule();        r2.setName("MyRule2");        assertFalse("Rules with different names cannot be equal", r1.equals(r2));    }    @Test    public void testEquals7() {        MyRule r1 = new MyRule();        MyRule r2 = new MyRule();        r2.setPriority(RulePriority.HIGH);        assertFalse("Rules with different priority levels cannot be equal", r1.equals(r2));    }    @Test    public void testEquals8() {        MyRule r1 = new MyRule();        r1.setProperty(MyRule.xpath, "something");        MyRule r2 = new MyRule();        r2.setProperty(MyRule.xpath, "something else");        assertFalse("Rules with different properties values cannot be equal", r1.equals(r2));    }    @Test    public void testEquals9() {        MyRule r1 = new MyRule();        MyRule r2 = new MyRule();        r2.setProperty(MyRule.xpath, "something else");        assertFalse("Rules with different properties cannot be equal", r1.equals(r2));    }    @Test    public void testEquals10() {        MyRule r1 = new MyRule();        MyRule r2 = new MyRule();        r2.setMessage("another message");        assertEquals("Rules with different messages are still equal", r1, r2);        assertEquals("Rules that are equal must have the an equal hashcode", r1.hashCode(), r2.hashCode());    }    public static junit.framework.Test suite() {        return new junit.framework.JUnit4TestAdapter(AbstractRuleTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import java.util.List;import net.sourceforge.pmd.RuleSetReferenceId;import org.junit.Test;public class RuleSetReferenceIdTest {    private static void assertRuleSetReferenceId(final boolean expectedExternal, final String expectedRuleSetFileName,    final boolean expectedAllRules, final String expectedRuleName, final String expectedToString,    final RuleSetReferenceId reference) {assertEquals("Wrong external", expectedExternal, reference.isExternal());assertEquals("Wrong RuleSet file name", expectedRuleSetFileName, reference.getRuleSetFileName());assertEquals("Wrong all Rule reference", expectedAllRules, reference.isAllRules());assertEquals("Wrong Rule name", expectedRuleName, reference.getRuleName());assertEquals("Wrong toString()", expectedToString, reference.toString());    }    @Test(expected = IllegalArgumentException.class)    public void testCommaInSingleId() {new RuleSetReferenceId("bad,id");    }    @Test(expected = IllegalArgumentException.class)    public void testInternalWithInternal() {new RuleSetReferenceId("SomeRule", new RuleSetReferenceId("SomeOtherRule"));    }    @Test(expected = IllegalArgumentException.class)    public void testExternalWithExternal() {new RuleSetReferenceId("someruleset.xml/SomeRule", new RuleSetReferenceId("someruleset.xml/SomeOtherRule"));    }    @Test(expected = IllegalArgumentException.class)    public void testExternalWithInternal() {new RuleSetReferenceId("someruleset.xml/SomeRule", new RuleSetReferenceId("SomeOtherRule"));    }    @Test    public void testInteralWithExternal() {// This is okaynew RuleSetReferenceId("SomeRule", new RuleSetReferenceId("someruleset.xml/SomeOtherRule"));    }    @Test    public void testEmptyRuleSet() {// This is representative of how the Test framework creates RuleSetReferenceId from static RuleSet XMLsRuleSetReferenceId reference = new RuleSetReferenceId(null);assertRuleSetReferenceId(true, null, true, null, "anonymous all Rule", reference);    }    @Test    public void testInternalWithExternalRuleSet() {// This is representative of how the RuleSetFactory temporarily pairs an internal reference// with an external reference.RuleSetReferenceId internalRuleSetReferenceId = new RuleSetReferenceId("MockRuleName");assertRuleSetReferenceId(false, null, false, "MockRuleName", "MockRuleName", internalRuleSetReferenceId);RuleSetReferenceId externalRuleSetReferenceId = new RuleSetReferenceId("rulesets/java/basic.xml");assertRuleSetReferenceId(true, "rulesets/java/basic.xml", true, null, "rulesets/java/basic.xml",externalRuleSetReferenceId);RuleSetReferenceId pairRuleSetReferenceId = new RuleSetReferenceId("MockRuleName", externalRuleSetReferenceId);assertRuleSetReferenceId(true, "rulesets/java/basic.xml", false, "MockRuleName","rulesets/java/basic.xml/MockRuleName", pairRuleSetReferenceId);    }    @Test    public void testOneSimpleRuleSet() {List<RuleSetReferenceId> references = RuleSetReferenceId.parse("java-basic");assertEquals(1, references.size());assertRuleSetReferenceId(true, "rulesets/java/basic.xml", true, null, "rulesets/java/basic.xml", references.get(0));    }    @Test    public void testMultipleSimpleRuleSet() {List<RuleSetReferenceId> references = RuleSetReferenceId.parse("java-unusedcode,java-basic");assertEquals(2, references.size());assertRuleSetReferenceId(true, "rulesets/java/unusedcode.xml", true, null, "rulesets/java/unusedcode.xml",references.get(0));assertRuleSetReferenceId(true, "rulesets/java/basic.xml", true, null, "rulesets/java/basic.xml", references.get(1));    }    @Test    public void testOneReleaseRuleSet() {List<RuleSetReferenceId> references = RuleSetReferenceId.parse("50");assertEquals(1, references.size());assertRuleSetReferenceId(true, "rulesets/releases/50.xml", true, null, "rulesets/releases/50.xml", references.get(0));    }    @Test    public void testOneFullRuleSet() {List<RuleSetReferenceId> references = RuleSetReferenceId.parse("rulesets/java/unusedcode.xml");assertEquals(1, references.size());assertRuleSetReferenceId(true, "rulesets/java/unusedcode.xml", true, null, "rulesets/java/unusedcode.xml",references.get(0));    }    @Test    public void testOneFullRuleSetURL() {List<RuleSetReferenceId> references = RuleSetReferenceId.parse("file://somepath/rulesets/java/unusedcode.xml");assertEquals(1, references.size());assertRuleSetReferenceId(true, "file://somepath/rulesets/java/unusedcode.xml", true, null,"file://somepath/rulesets/java/unusedcode.xml", references.get(0));    }    @Test    public void testMultipleFullRuleSet() {List<RuleSetReferenceId> references = RuleSetReferenceId.parse("rulesets/java/unusedcode.xml,rulesets/java/basic.xml");assertEquals(2, references.size());assertRuleSetReferenceId(true, "rulesets/java/unusedcode.xml", true, null, "rulesets/java/unusedcode.xml",references.get(0));assertRuleSetReferenceId(true, "rulesets/java/basic.xml", true, null, "rulesets/java/basic.xml", references.get(1));    }    @Test    public void testMixRuleSet() {List<RuleSetReferenceId> references = RuleSetReferenceId.parse("rulesets/java/unusedcode.xml,xml-basic");assertEquals(2, references.size());assertRuleSetReferenceId(true, "rulesets/java/unusedcode.xml", true, null, "rulesets/java/unusedcode.xml",references.get(0));assertRuleSetReferenceId(true, "rulesets/xml/basic.xml", true, null, "rulesets/xml/basic.xml", references.get(1));    }    @Test    public void testUnknownRuleSet() {List<RuleSetReferenceId> references = RuleSetReferenceId.parse("nonexistant.xml");assertEquals(1, references.size());assertRuleSetReferenceId(true, "nonexistant.xml", true, null, "nonexistant.xml", references.get(0));    }    @Test    public void testUnknownAndSimpleRuleSet() {List<RuleSetReferenceId> references = RuleSetReferenceId.parse("jsp-basic,nonexistant.xml");assertEquals(2, references.size());assertRuleSetReferenceId(true, "rulesets/jsp/basic.xml", true, null, "rulesets/jsp/basic.xml", references.get(0));assertRuleSetReferenceId(true, "nonexistant.xml", true, null, "nonexistant.xml", references.get(1));    }    @Test    public void testSimpleRuleSetAndRule() {List<RuleSetReferenceId> references = RuleSetReferenceId.parse("java-basic/EmptyCatchBlock");assertEquals(1, references.size());assertRuleSetReferenceId(true, "rulesets/java/basic.xml", false, "EmptyCatchBlock","rulesets/java/basic.xml/EmptyCatchBlock", references.get(0));    }    @Test    public void testFullRuleSetAndRule() {List<RuleSetReferenceId> references = RuleSetReferenceId.parse("rulesets/java/basic.xml/EmptyCatchBlock");assertEquals(1, references.size());assertRuleSetReferenceId(true, "rulesets/java/basic.xml", false, "EmptyCatchBlock","rulesets/java/basic.xml/EmptyCatchBlock", references.get(0));    }    @Test    public void testFullRuleSetURLAndRule() {List<RuleSetReferenceId> references = RuleSetReferenceId.parse("file://somepath/rulesets/java/unusedcode.xml/EmptyCatchBlock");assertEquals(1, references.size());assertRuleSetReferenceId(true, "file://somepath/rulesets/java/unusedcode.xml", false, "EmptyCatchBlock","file://somepath/rulesets/java/unusedcode.xml/EmptyCatchBlock", references.get(0));    }    @Test    public void testInternalRuleSetAndRule() {List<RuleSetReferenceId> references = RuleSetReferenceId.parse("EmptyCatchBlock");assertEquals(1, references.size());assertRuleSetReferenceId(false, null, false, "EmptyCatchBlock", "EmptyCatchBlock", references.get(0));    }    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(RuleSetReferenceIdTest.class);    }}
package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import java.util.Arrays;import java.util.Collection;import junit.framework.JUnit4TestAdapter;import net.sourceforge.pmd.lang.LanguageVersion;import org.junit.Test;import org.junit.runner.RunWith;import org.junit.runners.Parameterized;import org.junit.runners.Parameterized.Parameters;@RunWith(Parameterized.class)public class LanguageVersionTest {    private String terseName;    private LanguageVersion expected;    public LanguageVersionTest(String terseName, LanguageVersion expected) {        this.terseName = terseName;        this.expected = expected;    }    @Parameters    public static Collection data() {        return Arrays.asList(new Object[][] { { "java 1.3", LanguageVersion.JAVA_13 },                { "java 1.4", LanguageVersion.JAVA_14 }, { "java 1.5", LanguageVersion.JAVA_15 },                { "java 1.6", LanguageVersion.JAVA_16 }, { "java 1.7", LanguageVersion.JAVA_17 },                { "jsp", LanguageVersion.JSP }, });    }    @Test    public void testGetLanguageVersionForTerseName() {        assertEquals(expected, LanguageVersion.findByTerseName(terseName));    }    public static junit.framework.Test suite() {        return new JUnit4TestAdapter(LanguageVersionTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertTrue;import java.io.File;import java.io.StringReader;import java.util.ArrayList;import java.util.Collection;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.PMDException;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSets;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.LanguageVersionHandler;import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;import net.sourceforge.pmd.lang.rule.MockRule;import net.sourceforge.pmd.lang.rule.RuleReference;import net.sourceforge.pmd.testframework.RuleTst;import org.junit.Test;public class RuleSetTest extends RuleTst {    private String javaCode = "public class Test { }";    @Test    public void testNoDFA() {RuleSet rs = new RuleSet();MockRule mock = new MockRule("name", "desc", "msg", "rulesetname");rs.addRule(mock);assertFalse(rs.usesDFA(Language.JAVA));    }    @Test    public void testIncludesRuleWithDFA() {RuleSet rs = new RuleSet();MockRule mock = new MockRule("name", "desc", "msg", "rulesetname");mock.setUsesDFA();rs.addRule(mock);assertTrue(rs.usesDFA(Language.JAVA));    }    @Test    public void testAccessors() {RuleSet rs = new RuleSet();rs.setFileName("baz");assertEquals("file name mismatch", "baz", rs.getFileName());rs.setName("foo");assertEquals("name mismatch", "foo", rs.getName());rs.setDescription("bar");assertEquals("description mismatch", "bar", rs.getDescription());    }    @Test    public void testGetRuleByName() {RuleSet rs = new RuleSet();MockRule mock = new MockRule("name", "desc", "msg", "rulesetname");rs.addRule(mock);assertEquals("unable to fetch rule by name", mock, rs.getRuleByName("name"));    }    @Test    public void testGetRuleByName2() {RuleSet rs = new RuleSet();MockRule mock = new MockRule("name", "desc", "msg", "rulesetname");rs.addRule(mock);assertNull("the rule FooRule must not be found!", rs.getRuleByName("FooRule"));    }    @Test    public void testRuleList() {RuleSet IUT = new RuleSet();assertEquals("Size of RuleSet isn't zero.", 0, IUT.size());MockRule rule = new MockRule("name", "desc", "msg", "rulesetname");IUT.addRule(rule);assertEquals("Size of RuleSet isn't one.", 1, IUT.size());Collection rules = IUT.getRules();Iterator i = rules.iterator();assertTrue("Empty Set", i.hasNext());assertEquals("Returned set of wrong size.", 1, rules.size());assertEquals("Rule isn't in ruleset.", rule, i.next());    }    @Test    public void testAddRuleSet() {RuleSet set1 = new RuleSet();set1.addRule(new MockRule("name", "desc", "msg", "rulesetname"));RuleSet set2 = new RuleSet();set2.addRule(new MockRule("name2", "desc", "msg", "rulesetname"));set1.addRuleSet(set2);assertEquals("ruleset size wrong", 2, set1.size());    }    @Test(expected = RuntimeException.class)    public void testAddRuleSetByReferenceBad() {RuleSet set1 = new RuleSet();set1.addRule(new MockRule("name", "desc", "msg", "rulesetname"));RuleSet set2 = new RuleSet();set2.addRule(new MockRule("name2", "desc", "msg", "rulesetname"));set1.addRuleSetByReference(set2, false);    }    @Test    public void testAddRuleSetByReferenceAllRule() {RuleSet set1 = new RuleSet();RuleSet set2 = new RuleSet();set2.setFileName("foo");set2.addRule(new MockRule("name", "desc", "msg", "rulesetname"));set2.addRule(new MockRule("name2", "desc", "msg", "rulesetname"));set1.addRuleSetByReference(set2, true);assertEquals("wrong rule size", 2, set1.getRules().size());for (Rule rule : set1.getRules()) {    assertTrue("not a rule reference", rule instanceof RuleReference);    RuleReference ruleReference = (RuleReference) rule;    assertEquals("wrong ruleset file name", "foo", ruleReference.getRuleSetReference().getRuleSetFileName());    assertTrue("not all rule reference", ruleReference.getRuleSetReference().isAllRules());}    }    @Test    public void testAddRuleSetByReferenceSingleRule() {RuleSet set1 = new RuleSet();RuleSet set2 = new RuleSet();set2.setFileName("foo");set2.addRule(new MockRule("name", "desc", "msg", "rulesetname"));set2.addRule(new MockRule("name2", "desc", "msg", "rulesetname"));set1.addRuleSetByReference(set2, false);assertEquals("wrong rule size", 2, set1.getRules().size());for (Rule rule : set1.getRules()) {    assertTrue("not a rule reference", rule instanceof RuleReference);    RuleReference ruleReference = (RuleReference) rule;    assertEquals("wrong ruleset file name", "foo", ruleReference.getRuleSetReference().getRuleSetFileName());    assertFalse("should not be all rule reference", ruleReference.getRuleSetReference().isAllRules());}    }    @Test    public void testApply0Rules() throws Throwable {RuleSet IUT = new RuleSet();verifyRuleSet(IUT, 0, new HashSet());    }    @Test    public void testEquals1() {RuleSet s = new RuleSet();assertFalse("A ruleset cannot be equals to null", s.equals(null));    }    @Test    @SuppressWarnings("PMD.UseAssertEqualsInsteadOfAssertTrue")    public void testEquals2() {RuleSet s = new RuleSet();assertTrue("A rulset must be equals to itself", s.equals(s));    }    @Test    public void testEquals3() {RuleSet s = new RuleSet();s.setName("basic rules");assertFalse("A ruleset cannot be equals to another kind of object", s.equals("basic rules"));    }    @Test    public void testEquals4() {RuleSet s1 = new RuleSet();s1.setName("my ruleset");s1.addRule(new MockRule("name", "desc", "msg", "rulesetname"));RuleSet s2 = new RuleSet();s2.setName("my ruleset");s2.addRule(new MockRule("name", "desc", "msg", "rulesetname"));assertEquals("2 rulesets with same name and rules must be equals", s1, s2);assertEquals("Equals rulesets must have the same hashcode", s1.hashCode(), s2.hashCode());    }    @Test    public void testEquals5() {RuleSet s1 = new RuleSet();s1.setName("my ruleset");s1.addRule(new MockRule("name", "desc", "msg", "rulesetname"));RuleSet s2 = new RuleSet();s2.setName("my other ruleset");s2.addRule(new MockRule("name", "desc", "msg", "rulesetname"));assertFalse("2 rulesets with different name but same rules must not be equals", s1.equals(s2));    }    @Test    public void testEquals6() {RuleSet s1 = new RuleSet();s1.setName("my ruleset");s1.addRule(new MockRule("name", "desc", "msg", "rulesetname"));RuleSet s2 = new RuleSet();s2.setName("my ruleset");s2.addRule(new MockRule("other rule", "desc", "msg", "rulesetname"));assertFalse("2 rulesets with same name but different rules must not be equals", s1.equals(s2));    }        @Test    public void testLanguageApplies() {RuleSet ruleSet = new RuleSet();Rule rule = new MockRule();rule.setLanguage(Language.ECMASCRIPT);assertFalse("Different languages should not apply", ruleSet.applies(rule, LanguageVersion.JAVA_15));rule.setLanguage(Language.JAVA);assertTrue("Same language with no min/max should apply", ruleSet.applies(rule, LanguageVersion.JAVA_15));rule.setMinimumLanguageVersion(LanguageVersion.JAVA_15);assertTrue("Same language with valid min only should apply", ruleSet.applies(rule, LanguageVersion.JAVA_15));rule.setMaximumLanguageVersion(LanguageVersion.JAVA_16);assertTrue("Same language with valid min and max should apply", ruleSet.applies(rule, LanguageVersion.JAVA_15));assertFalse("Same language with outside range of min/max should not apply", ruleSet.applies(rule, LanguageVersion.JAVA_14));assertFalse("Same language with outside range of min/max should not apply", ruleSet.applies(rule, LanguageVersion.JAVA_17));    }    @Test    public void testAddExcludePattern() {RuleSet ruleSet = new RuleSet();ruleSet.addExcludePattern("*");assertNotNull("Exclude patterns", ruleSet.getExcludePatterns());assertEquals("Invalid number of patterns", 1, ruleSet.getExcludePatterns().size());assertEquals("Exclude pattern", "*", ruleSet.getExcludePatterns().get(0));assertNotNull("Include patterns", ruleSet.getIncludePatterns());assertEquals("Invalid number of include patterns", 0, ruleSet.getIncludePatterns().size());    }    @Test    public void testAddExcludePatterns() {RuleSet ruleSet = new RuleSet();ruleSet.addExcludePattern("*");ruleSet.addExcludePattern(".*");RuleSet ruleSet2 = new RuleSet();ruleSet2.addExcludePatterns(ruleSet.getExcludePatterns());assertNotNull("Exclude patterns", ruleSet2.getExcludePatterns());assertEquals("Invalid number of patterns", 2, ruleSet2.getExcludePatterns().size());assertEquals("Exclude pattern", "*", ruleSet2.getExcludePatterns().get(0));assertEquals("Exclude pattern", ".*", ruleSet2.getExcludePatterns().get(1));assertNotNull("Include patterns", ruleSet2.getIncludePatterns());assertEquals("Invalid number of include patterns", 0, ruleSet2.getIncludePatterns().size());    }    @Test    public void testSetExcludePatterns() {List<String> excludePatterns = new ArrayList<String>();excludePatterns.add("*");excludePatterns.add(".*");RuleSet ruleSet = new RuleSet();ruleSet.setExcludePatterns(excludePatterns);assertNotNull("Exclude patterns", ruleSet.getExcludePatterns());assertEquals("Invalid number of exclude patterns", 2, ruleSet.getExcludePatterns().size());assertEquals("Exclude pattern", "*", ruleSet.getExcludePatterns().get(0));assertEquals("Exclude pattern", ".*", ruleSet.getExcludePatterns().get(1));assertNotNull("Include patterns", ruleSet.getIncludePatterns());assertEquals("Invalid number of include patterns", 0, ruleSet.getIncludePatterns().size());    }    @Test    public void testAddIncludePattern() {RuleSet ruleSet = new RuleSet();ruleSet.addIncludePattern("*");assertNotNull("Include patterns", ruleSet.getIncludePatterns());assertEquals("Invalid number of patterns", 1, ruleSet.getIncludePatterns().size());assertEquals("Include pattern", "*", ruleSet.getIncludePatterns().get(0));assertNotNull("Exclude patterns", ruleSet.getExcludePatterns());assertEquals("Invalid number of exclude patterns", 0, ruleSet.getExcludePatterns().size());    }    @Test    public void testAddIncludePatterns() {RuleSet ruleSet = new RuleSet();ruleSet.addIncludePattern("*");ruleSet.addIncludePattern(".*");RuleSet ruleSet2 = new RuleSet();ruleSet2.addIncludePatterns(ruleSet.getIncludePatterns());assertNotNull("Include patterns", ruleSet2.getIncludePatterns());assertEquals("Invalid number of patterns", 2, ruleSet2.getIncludePatterns().size());assertEquals("Include pattern", "*", ruleSet2.getIncludePatterns().get(0));assertEquals("Include pattern", ".*", ruleSet2.getIncludePatterns().get(1));assertNotNull("Exclude patterns", ruleSet.getExcludePatterns());assertEquals("Invalid number of exclude patterns", 0, ruleSet.getExcludePatterns().size());    }    @Test    public void testSetIncludePatterns() {List<String> includePatterns = new ArrayList<String>();includePatterns.add("*");includePatterns.add(".*");RuleSet ruleSet = new RuleSet();ruleSet.setIncludePatterns(includePatterns);assertNotNull("Include patterns", ruleSet.getIncludePatterns());assertEquals("Invalid number of include patterns", 2, ruleSet.getIncludePatterns().size());assertEquals("Include pattern", "*", ruleSet.getIncludePatterns().get(0));assertEquals("Include pattern", ".*", ruleSet.getIncludePatterns().get(1));assertNotNull("Exclude patterns", ruleSet.getExcludePatterns());assertEquals("Invalid number of exclude patterns", 0, ruleSet.getExcludePatterns().size());    }    @Test    public void testIncludeExcludeApplies() {File file = new File("C:\\myworkspace\\project\\some\\random\\package\\RandomClass.java");RuleSet ruleSet = new RuleSet();assertTrue("No patterns", ruleSet.applies(file));ruleSet = new RuleSet();ruleSet.addExcludePattern("nomatch");assertTrue("Non-matching exclude", ruleSet.applies(file));ruleSet = new RuleSet();ruleSet.addExcludePattern("nomatch");ruleSet.addExcludePattern(".*/package/.*");assertFalse("Matching exclude", ruleSet.applies(file));ruleSet = new RuleSet();ruleSet.addExcludePattern("nomatch");ruleSet.addExcludePattern(".*/package/.*");ruleSet.addIncludePattern(".*/randomX/.*");assertFalse("Non-matching include", ruleSet.applies(file));ruleSet = new RuleSet();ruleSet.addExcludePattern("nomatch");ruleSet.addExcludePattern(".*/package/.*");ruleSet.addIncludePattern(".*/randomX/.*");ruleSet.addIncludePattern(".*/random/.*");assertTrue("Matching include", ruleSet.applies(file));    }    @Test    public void testIncludeExcludeMultipleRuleSetWithRuleChainApplies() throws PMDException {File file = new File("C:\\myworkspace\\project\\some\\random\\package\\RandomClass.java");RuleSet ruleSet1 = new RuleSet();ruleSet1.setName("RuleSet1");Rule rule = findRule("java-empty", "EmptyIfStmt");assertTrue("RuleChain rule", rule.usesRuleChain());ruleSet1.addRule(rule);RuleSet ruleSet2 = new RuleSet();ruleSet2.setName("RuleSet2");ruleSet2.addRule(rule);RuleSets ruleSets = new RuleSets();ruleSets.addRuleSet(ruleSet1);ruleSets.addRuleSet(ruleSet2);// Two violations        PMD p = new PMD();        RuleContext ctx = new RuleContext();        Report r = new Report();        ctx.setReport(r);        ctx.setSourceCodeFilename(file.getName());        ctx.setSourceCodeFile(file);        p.getSourceCodeProcessor().processSourceCode(new StringReader(TEST1), ruleSets, ctx);        assertEquals("Violations", 2, r.size());        // One violationruleSet1 = new RuleSet();ruleSet1.setName("RuleSet1");        ruleSet1.addExcludePattern(".*/package/.*");ruleSet1.addRule(rule);ruleSets = new RuleSets();ruleSets.addRuleSet(ruleSet1);ruleSets.addRuleSet(ruleSet2);        r = new Report();        ctx.setReport(r);        p.getSourceCodeProcessor().processSourceCode(new StringReader(TEST1), ruleSets, ctx);        assertEquals("Violations", 1, r.size());    }    protected void verifyRuleSet(RuleSet IUT, int size, Set values) throws Throwable {RuleContext context = new RuleContext();Set<RuleViolation> reportedValues = new HashSet<RuleViolation>();context.setReport(new Report());IUT.apply(makeCompilationUnits(), context);assertEquals("Invalid number of Violations Reported", size, context.getReport().size());Iterator violations = context.getReport().iterator();while (violations.hasNext()) {    RuleViolation violation = (RuleViolation) violations.next();    reportedValues.add(violation);    assertTrue("Unexpected Violation Returned: " + violation, values.contains(violation));}Iterator expected = values.iterator();while (expected.hasNext()) {    RuleViolation violation = (RuleViolation) expected.next();    assertTrue("Expected Violation not Returned: " + violation, reportedValues.contains(violation));}    }    protected List<ASTCompilationUnit> makeCompilationUnits() throws Throwable {List<ASTCompilationUnit> RC = new ArrayList<ASTCompilationUnit>();LanguageVersionHandler languageVersionHandler = Language.JAVA.getDefaultVersion().getLanguageVersionHandler();ASTCompilationUnit cu = (ASTCompilationUnit) languageVersionHandler.getParser(languageVersionHandler.getDefaultParserOptions()).parse(null, new StringReader(javaCode));RC.add(cu);return RC;    }    private static final String TEST1 = "public class Foo {" + PMD.EOL +    "   public void foo() {" + PMD.EOL +    "      if (true) { }" + PMD.EOL +    "   }" + PMD.EOL +"}" + PMD.EOL;    public static junit.framework.Test suite() {return new junit.framework.JUnit4TestAdapter(RuleSetTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.io.IOException;import java.io.StringWriter;import java.util.Iterator;import java.util.Map;import java.util.Properties;import junit.framework.JUnit4TestAdapter;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.ReportListener;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;import net.sourceforge.pmd.lang.java.ast.DummyJavaNode;import net.sourceforge.pmd.lang.java.ast.JavaNode;import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;import net.sourceforge.pmd.lang.java.rule.JavaRuleViolation;import net.sourceforge.pmd.lang.java.symboltable.SourceFileScope;import net.sourceforge.pmd.lang.rule.MockRule;import net.sourceforge.pmd.renderers.Renderer;import net.sourceforge.pmd.renderers.XMLRenderer;import net.sourceforge.pmd.stat.Metric;import net.sourceforge.pmd.testframework.RuleTst;import org.junit.Test;public class ReportTest extends RuleTst implements ReportListener {    private static class FooRule extends AbstractJavaRule {        public Object visit(ASTClassOrInterfaceDeclaration c, Object ctx) {            if ("Foo".equals(c.getImage())) addViolation(ctx, c);            return ctx;        }        public String getMessage() {            return "blah";        }        public String getName() {            return "Foo";        }        public String getRuleSetName() {            return "RuleSet";        }        public String getDescription() {            return "desc";        }    }    private boolean violationSemaphore;    private boolean metricSemaphore;    public void ruleViolationAdded(RuleViolation ruleViolation) {        violationSemaphore = true;    }    public void metricAdded(Metric metric) {        metricSemaphore = true;    }    @Test    public void testBasic() throws Throwable {        Report r = new Report();        runTestFromString(TEST1, new FooRule(), r);        assertFalse(r.isEmpty());    }    @Test    public void testMetric0() {        Report r = new Report();        assertFalse("Default report shouldn't contain metrics", r.hasMetrics());    }    @Test    public void testMetric1() {        Report r = new Report();        assertFalse("Default report shouldn't contain metrics", r.hasMetrics());        r.addMetric(new Metric("m1", 0, 0.0, 1.0, 2.0, 3.0, 4.0));        assertTrue("Expected metrics weren't there", r.hasMetrics());        Iterator ms = r.metrics();        assertTrue("Should have some metrics in there now", ms.hasNext());        Object o = ms.next();        assertTrue("Expected Metric, got " + o.getClass(), o instanceof Metric);        Metric m = (Metric) o;        assertEquals("metric name mismatch", "m1", m.getMetricName());        assertEquals("wrong low value", 1.0, m.getLowValue(), 0.05);        assertEquals("wrong high value", 2.0, m.getHighValue(), 0.05);        assertEquals("wrong avg value", 3.0, m.getAverage(), 0.05);        assertEquals("wrong std dev value", 4.0, m.getStandardDeviation(), 0.05);    }    @Test    public void testExclusionsInReportWithRuleViolationSuppressRegex() throws Throwable {        Report rpt = new Report();        Rule rule =  new FooRule();        rule.setProperty(Rule.VIOLATION_SUPPRESS_REGEX_DESCRIPTOR, ".*blah.*");        runTestFromString(TEST1, rule, rpt);        assertTrue(rpt.isEmpty());        assertEquals(1, rpt.getSuppressedRuleViolations().size());    }    @Test    public void testExclusionsInReportWithRuleViolationSuppressXPath() throws Throwable {        Report rpt = new Report();        Rule rule =  new FooRule();        rule.setProperty(Rule.VIOLATION_SUPPRESS_XPATH_DESCRIPTOR, ".[@Image = 'Foo']");        runTestFromString(TEST1, rule, rpt);        assertTrue(rpt.isEmpty());        assertEquals(1, rpt.getSuppressedRuleViolations().size());    }    @Test    public void testExclusionsInReportWithAnnotations() throws Throwable {        Report rpt = new Report();        runTestFromString(TEST2, new FooRule(), rpt, LanguageVersion.JAVA_15);        assertTrue(rpt.isEmpty());        assertEquals(1, rpt.getSuppressedRuleViolations().size());    }    @Test    public void testExclusionsInReportWithNOPMD() throws Throwable {        Report rpt = new Report();        runTestFromString(TEST3, new FooRule(), rpt);        assertTrue(rpt.isEmpty());        assertEquals(1, rpt.getSuppressedRuleViolations().size());    }    private static final String TEST1 =            "public class Foo {}" + PMD.EOL;    private static final String TEST2 =            "@SuppressWarnings(\"PMD\")" + PMD.EOL +            "public class Foo {}";    private static final String TEST3 =            "public class Foo {} // NOPMD";    // Files are grouped together now.    @Test    public void testSortedReport_File() throws IOException {        Report r = new Report();        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("foo");        JavaNode s = getNode(10, 5, ctx.getSourceCodeFilename());        Rule rule1 = new MockRule("name", "desc", "msg", "rulesetname");        r.addRuleViolation(new JavaRuleViolation(rule1, ctx, s, rule1.getMessage()));        ctx.setSourceCodeFilename("bar");        JavaNode s1 = getNode(10, 5, ctx.getSourceCodeFilename());        Rule rule2 = new MockRule("name", "desc", "msg", "rulesetname");        r.addRuleViolation(new JavaRuleViolation(rule2, ctx, s1, rule2.getMessage()));        Renderer rend = new XMLRenderer(new Properties());        String result = render(rend, r);        assertTrue("sort order wrong", result.indexOf("bar") < result.indexOf("foo"));    }    @Test    public void testSortedReport_Line() throws IOException {        Report r = new Report();        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("foo1");        JavaNode s = getNode(10, 5, ctx.getSourceCodeFilename());        Rule rule1 = new MockRule("rule2", "rule2", "msg", "rulesetname");        r.addRuleViolation(new JavaRuleViolation(rule1, ctx, s, rule1.getMessage()));        ctx.setSourceCodeFilename("foo2");        JavaNode s1 = getNode(20, 5, ctx.getSourceCodeFilename());        Rule rule2 = new MockRule("rule1", "rule1", "msg", "rulesetname");        r.addRuleViolation(new JavaRuleViolation(rule2, ctx, s1, rule2.getMessage()));        Renderer rend = new XMLRenderer(new Properties());        String result = render(rend, r);        assertTrue("sort order wrong", result.indexOf("rule2") < result.indexOf("rule1"));    }    @Test    public void testListener() {        Report rpt = new Report();        rpt.addListener(this);        violationSemaphore = false;        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("file");        JavaNode s = getNode(5, 5, ctx.getSourceCodeFilename());        Rule rule1 = new MockRule("name", "desc", "msg", "rulesetname");        rpt.addRuleViolation(new JavaRuleViolation(rule1, ctx, s, rule1.getMessage()));        assertTrue(violationSemaphore);        metricSemaphore = false;        rpt.addMetric(new Metric("test", 0, 0.0, 0.0, 0.0, 0.0, 0.0));        assertTrue("no metric", metricSemaphore);    }    @Test    public void testSummary() {        Report r = new Report();        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("foo1");        JavaNode s = getNode(5, 5, ctx.getSourceCodeFilename());        Rule rule = new MockRule("name", "desc", "msg", "rulesetname");        r.addRuleViolation(new JavaRuleViolation(rule, ctx, s, rule.getMessage()));        ctx.setSourceCodeFilename("foo2");        Rule mr = new MockRule("rule1", "rule1", "msg", "rulesetname");        JavaNode s1 = getNode(20, 5, ctx.getSourceCodeFilename());        JavaNode s2 = getNode(30, 5, ctx.getSourceCodeFilename());        r.addRuleViolation(new JavaRuleViolation(mr, ctx, s1, mr.getMessage()));        r.addRuleViolation(new JavaRuleViolation(mr, ctx, s2, mr.getMessage()));        Map summary = r.getSummary();        assertEquals(summary.keySet().size(), 2);        assertTrue(summary.values().contains(Integer.valueOf(1)));        assertTrue(summary.values().contains(Integer.valueOf(2)));    }        private JavaNode getNode(int line, int column, String scopeName){DummyJavaNode s = new DummyJavaNode(2);        DummyJavaNode parent = new DummyJavaNode(1);        parent.testingOnly__setBeginLine(line);        parent.testingOnly__setBeginColumn(column);        s.jjtSetParent(parent);        s.setScope(new SourceFileScope(scopeName));        s.testingOnly__setBeginLine(10);        s.testingOnly__setBeginColumn(5);        return s;    }    public static String render(Renderer renderer, Report report) throws IOException {        StringWriter writer = new StringWriter();        renderer.setWriter(writer);        renderer.start();        renderer.renderFileReport(report);        renderer.end();        return writer.toString();    }    public static junit.framework.Test suite() {        return new JUnit4TestAdapter(ReportTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.io.IOException;import java.net.URL;import java.util.Properties;import junit.framework.JUnit4TestAdapter;import net.sourceforge.pmd.Configuration;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.RulePriority;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.LanguageVersionDiscoverer;import net.sourceforge.pmd.renderers.CSVRenderer;import net.sourceforge.pmd.renderers.Renderer;import net.sourceforge.pmd.util.ClasspathClassLoader;import org.junit.Test;public class ConfigurationTest {    @Test    public void testSuppressMarker() {Configuration configuration = new Configuration();assertEquals("Default suppress marker", PMD.SUPPRESS_MARKER, configuration.getSuppressMarker());configuration.setSuppressMarker("CUSTOM_MARKER");assertEquals("Changed suppress marker", "CUSTOM_MARKER", configuration.getSuppressMarker());    }    @Test    public void testThreads() {Configuration configuration = new Configuration();assertEquals("Default threads", Runtime.getRuntime().availableProcessors(), configuration.getThreads());configuration.setThreads(0);assertEquals("Changed threads", 0, configuration.getThreads());    }    @Test    public void testClassLoader() throws IOException {Configuration configuration = new Configuration();assertEquals("Default ClassLoader", Configuration.class.getClassLoader(), configuration.getClassLoader());configuration.prependClasspath("some.jar");assertEquals("Prepended ClassLoader class", ClasspathClassLoader.class, configuration.getClassLoader().getClass());URL[] urls = ((ClasspathClassLoader) configuration.getClassLoader()).getURLs();assertEquals("urls length", 1, urls.length);assertTrue("url[0]", urls[0].toString().endsWith("/some.jar"));assertEquals("parent classLoader", Configuration.class.getClassLoader(), configuration.getClassLoader().getParent());configuration.setClassLoader(null);assertEquals("Revert to default ClassLoader", Configuration.class.getClassLoader(), configuration.getClassLoader());    }    @Test    public void testLanguageVersionDiscoverer() {Configuration configuration = new Configuration();LanguageVersionDiscoverer languageVersionDiscoverer = configuration.getLanguageVersionDiscoverer();assertEquals("Default Java version", LanguageVersion.JAVA_17, languageVersionDiscoverer.getDefaultLanguageVersion(Language.JAVA));configuration.setDefaultLanguageVersion(LanguageVersion.JAVA_15);assertEquals("Modified Java version", LanguageVersion.JAVA_15, languageVersionDiscoverer.getDefaultLanguageVersion(Language.JAVA));    }    @Test    public void testRuleSets() {Configuration configuration = new Configuration();assertEquals("Default RuleSets", null, configuration.getRuleSets());configuration.setRuleSets("/rulesets/basic.xml");assertEquals("Changed RuleSets", "/rulesets/basic.xml", configuration.getRuleSets());    }    @Test    public void testMinimumPriority() {Configuration configuration = new Configuration();assertEquals("Default minimum priority", RulePriority.LOW, configuration.getMinimumPriority());configuration.setMinimumPriority(RulePriority.HIGH);assertEquals("Changed minimum priority", RulePriority.HIGH, configuration.getMinimumPriority());    }    @Test    public void testSourceEncoding() {Configuration configuration = new Configuration();assertEquals("Default source encoding", System.getProperty("file.encoding"), configuration.getSourceEncoding());configuration.setSourceEncoding("some_other_encoding");assertEquals("Changed source encoding", "some_other_encoding", configuration.getSourceEncoding());    }    @Test    public void testInputPaths() {Configuration configuration = new Configuration();assertEquals("Default input paths", null, configuration.getInputPaths());configuration.setInputPaths("a,b,c");assertEquals("Changed input paths", "a,b,c", configuration.getInputPaths());    }    @Test    public void testReportShortNames() {Configuration configuration = new Configuration();assertEquals("Default report short names", false, configuration.isReportShortNames());configuration.setReportShortNames(true);assertEquals("Changed report short names", true, configuration.isReportShortNames());    }    @Test    public void testReportFormat() {Configuration configuration = new Configuration();assertEquals("Default report format", null, configuration.getReportFormat());configuration.setReportFormat("csv");assertEquals("Changed report format", "csv", configuration.getReportFormat());    }    @Test    public void testCreateRenderer() {Configuration configuration = new Configuration();configuration.setReportFormat("csv");Renderer renderer = configuration.createRenderer();assertEquals("Renderer class", CSVRenderer.class, renderer.getClass());assertEquals("Default renderer show suppressed violations", false, renderer.isShowSuppressedViolations());configuration.setShowSuppressedViolations(true);renderer = configuration.createRenderer();assertEquals("Renderer class", CSVRenderer.class, renderer.getClass());assertEquals("Changed renderer show suppressed violations", true, renderer.isShowSuppressedViolations());    }    @Test    public void testReportFile() {Configuration configuration = new Configuration();assertEquals("Default report file", null, configuration.getReportFile());configuration.setReportFile("somefile");assertEquals("Changed report file", "somefile", configuration.getReportFile());    }    @Test    public void testShowSuppressedViolations() {Configuration configuration = new Configuration();assertEquals("Default show suppressed violations", false, configuration.isShowSuppressedViolations());configuration.setShowSuppressedViolations(true);assertEquals("Changed show suppressed violations", true, configuration.isShowSuppressedViolations());    }    @Test    public void testReportProperties() {Configuration configuration = new Configuration();assertEquals("Default report properties size", 0, configuration.getReportProperties().size());configuration.getReportProperties().put("key", "value");assertEquals("Changed report properties size", 1, configuration.getReportProperties().size());assertEquals("Changed report properties value", "value", configuration.getReportProperties().get("key"));configuration.setReportProperties(new Properties());assertEquals("Replaced report properties size", 0, configuration.getReportProperties().size());    }    @Test    public void testDebug() {Configuration configuration = new Configuration();assertEquals("Default debug", false, configuration.isDebug());configuration.setDebug(true);assertEquals("Changed debug", true, configuration.isDebug());    }    @Test    public void testStressTest() {Configuration configuration = new Configuration();assertEquals("Default stress test", false, configuration.isStressTest());configuration.setStressTest(true);assertEquals("Changed stress test", true, configuration.isStressTest());    }    @Test    public void testBenchmark() {Configuration configuration = new Configuration();assertEquals("Default benchmark", false, configuration.isBenchmark());configuration.setBenchmark(true);assertEquals("Changed benchmark", true, configuration.isBenchmark());    }    public static junit.framework.Test suite() {return new JUnit4TestAdapter(ConfigurationTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertNotSame;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertTrue;import static org.junit.Assert.fail;import java.io.BufferedReader;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Properties;import java.util.Set;import java.util.StringTokenizer;import javax.xml.parsers.ParserConfigurationException;import javax.xml.parsers.SAXParser;import javax.xml.parsers.SAXParserFactory;import junit.framework.JUnit4TestAdapter;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.PropertyDescriptor;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RulePriority;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSetFactory;import net.sourceforge.pmd.RuleSetNotFoundException;import net.sourceforge.pmd.RuleSetReferenceId;import net.sourceforge.pmd.RuleSetWriter;import net.sourceforge.pmd.lang.Language;import net.sourceforge.pmd.lang.LanguageVersion;import net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedLocalVariableRule;import net.sourceforge.pmd.lang.rule.RuleReference;import net.sourceforge.pmd.lang.rule.XPathRule;import net.sourceforge.pmd.util.ResourceLoader;import org.junit.Test;import org.xml.sax.InputSource;import org.xml.sax.SAXException;import org.xml.sax.SAXParseException;import org.xml.sax.helpers.DefaultHandler;public class RuleSetFactoryTest {@Testpublic void testRuleSetFileName() throws RuleSetNotFoundException {RuleSet rs = loadRuleSet(EMPTY_RULESET);assertNull("RuleSet file name not expected", rs.getFileName());RuleSetFactory rsf = new RuleSetFactory();rs = rsf.createRuleSet("rulesets/java/basic.xml");assertEquals("wrong RuleSet file name", rs.getFileName(),"rulesets/java/basic.xml");}@Testpublic void testNoRuleSetFileName() throws RuleSetNotFoundException {RuleSet rs = loadRuleSet(EMPTY_RULESET);assertNull("RuleSet file name not expected", rs.getFileName());}@Testpublic void testRefs() throws Throwable {InputStream in = ResourceLoader.loadResourceAsStream("rulesets/java/migrating_to_15.xml", this.getClass().getClassLoader());if (in == null) {throw new RuleSetNotFoundException("Can't find resource   Make sure the resource is a valid file or URL or is on the CLASSPATH.  Here's the current classpath: "+ System.getProperty("java.class.path"));}RuleSetFactory rsf = new RuleSetFactory();RuleSet rs = rsf.createRuleSet("rulesets/java/migrating_to_15.xml");assertNotNull(rs.getRuleByName("AvoidEnumAsIdentifier"));}@Test(expected = RuleSetNotFoundException.class)public void testRuleSetNotFound() throws RuleSetNotFoundException {RuleSetFactory rsf = new RuleSetFactory();rsf.createRuleSet("fooooo");}@Testpublic void testCreateEmptyRuleSet() throws RuleSetNotFoundException {RuleSet rs = loadRuleSet(EMPTY_RULESET);assertEquals("test", rs.getName());assertEquals(0, rs.size());}@Testpublic void testSingleRule() throws RuleSetNotFoundException {RuleSet rs = loadRuleSet(SINGLE_RULE);assertEquals(1, rs.size());Rule r = rs.getRules().iterator().next();assertEquals("MockRuleName", r.getName());assertEquals("net.sourceforge.pmd.lang.rule.MockRule", r.getRuleClass());assertEquals("avoid the mock rule", r.getMessage());}@Testpublic void testMultipleRules() throws RuleSetNotFoundException {RuleSet rs = loadRuleSet(MULTIPLE_RULES);assertEquals(2, rs.size());Set<String> expected = new HashSet<String>();expected.add("MockRuleName1");expected.add("MockRuleName2");for (Rule rule : rs.getRules()) {assertTrue(expected.contains(rule.getName()));}}@Testpublic void testSingleRuleWithPriority() throws RuleSetNotFoundException {assertEquals(RulePriority.MEDIUM, loadFirstRule(PRIORITY).getPriority());}@Test@SuppressWarnings("unchecked")public void testProps() throws RuleSetNotFoundException {Rule r = loadFirstRule(PROPERTIES);assertEquals("bar", r.getProperty((PropertyDescriptor<String>) r.getPropertyDescriptor("fooString")));assertEquals(new Integer(3), r.getProperty((PropertyDescriptor<Integer>) r.getPropertyDescriptor("fooInt")));assertTrue(r.getProperty((PropertyDescriptor<Boolean>) r.getPropertyDescriptor("fooBoolean")));assertEquals(3.0d, r.getProperty((PropertyDescriptor<Double>) r.getPropertyDescriptor("fooDouble")), 0.05);assertNull(r.getPropertyDescriptor("BuggleFish"));assertNotSame(r.getDescription().indexOf("testdesc2"), -1);}@Test@SuppressWarnings("unchecked")public void testXPath() throws RuleSetNotFoundException {Rule r = loadFirstRule(XPATH);PropertyDescriptor<String> xpathProperty = (PropertyDescriptor<String>) r.getPropertyDescriptor("xpath");assertNotNull("xpath property descriptor", xpathProperty);assertNotSame(r.getProperty(xpathProperty).indexOf(" //Block "), -1);}@Testpublic void testFacadesOffByDefault() throws RuleSetNotFoundException {Rule r = loadFirstRule(XPATH);assertFalse(r.usesDFA());}@Testpublic void testDFAFlag() throws RuleSetNotFoundException {assertTrue(loadFirstRule(DFA).usesDFA());}@Testpublic void testExternalReferenceOverride() throws RuleSetNotFoundException {Rule r = loadFirstRule(REF_OVERRIDE);assertEquals("TestNameOverride", r.getName());assertEquals("Test message override", r.getMessage());assertEquals("Test description override", r.getDescription());assertEquals("Test that both example are stored", 2, r.getExamples().size());assertEquals("Test example override", r.getExamples().get(1));assertEquals(RulePriority.MEDIUM, r.getPriority());PropertyDescriptor<?> test2Descriptor = r.getPropertyDescriptor("test2");assertNotNull("test2 descriptor", test2Descriptor);assertEquals("override2", r.getProperty(test2Descriptor));PropertyDescriptor<?> test3Descriptor = r.getPropertyDescriptor("test3");assertNotNull("test3 descriptor", test3Descriptor);assertEquals("override3", r.getProperty(test3Descriptor));PropertyDescriptor<?> test4Descriptor = r.getPropertyDescriptor("test4");assertNotNull("test3 descriptor", test4Descriptor);assertEquals("new property", r.getProperty(test4Descriptor));}@Testpublic void testReferenceInternalToInternal()throws RuleSetNotFoundException {RuleSet ruleSet = loadRuleSet(REF_INTERNAL_TO_INTERNAL);Rule rule = ruleSet.getRuleByName("MockRuleName");assertNotNull("Could not find Rule MockRuleName", rule);Rule ruleRef = ruleSet.getRuleByName("MockRuleNameRef");assertNotNull("Could not find Rule MockRuleNameRef", ruleRef);}@Testpublic void testReferenceInternalToInternalChain()throws RuleSetNotFoundException {RuleSet ruleSet = loadRuleSet(REF_INTERNAL_TO_INTERNAL_CHAIN);Rule rule = ruleSet.getRuleByName("MockRuleName");assertNotNull("Could not find Rule MockRuleName", rule);Rule ruleRef = ruleSet.getRuleByName("MockRuleNameRef");assertNotNull("Could not find Rule MockRuleNameRef", ruleRef);Rule ruleRefRef = ruleSet.getRuleByName("MockRuleNameRefRef");assertNotNull("Could not find Rule MockRuleNameRefRef", ruleRefRef);}@Testpublic void testReferenceInternalToExternal()throws RuleSetNotFoundException {RuleSet ruleSet = loadRuleSet(REF_INTERNAL_TO_EXTERNAL);Rule rule = ruleSet.getRuleByName("ExternalRefRuleName");assertNotNull("Could not find Rule ExternalRefRuleName", rule);Rule ruleRef = ruleSet.getRuleByName("ExternalRefRuleNameRef");assertNotNull("Could not find Rule ExternalRefRuleNameRef", ruleRef);}@Testpublic void testReferenceInternalToExternalChain()throws RuleSetNotFoundException {RuleSet ruleSet = loadRuleSet(REF_INTERNAL_TO_EXTERNAL_CHAIN);Rule rule = ruleSet.getRuleByName("ExternalRefRuleName");assertNotNull("Could not find Rule ExternalRefRuleName", rule);Rule ruleRef = ruleSet.getRuleByName("ExternalRefRuleNameRef");assertNotNull("Could not find Rule ExternalRefRuleNameRef", ruleRef);Rule ruleRefRef = ruleSet.getRuleByName("ExternalRefRuleNameRefRef");assertNotNull("Could not find Rule ExternalRefRuleNameRefRef",ruleRefRef);}@Testpublic void testReferencePriority() throws RuleSetNotFoundException {RuleSetFactory rsf = new RuleSetFactory();rsf.setMinimumPriority(RulePriority.LOW);RuleSet ruleSet = rsf.createRuleSet(createRuleSetReferenceId(REF_INTERNAL_TO_INTERNAL_CHAIN));assertEquals("Number of Rules", 3, ruleSet.getRules().size());assertNotNull(ruleSet.getRuleByName("MockRuleName"));assertNotNull(ruleSet.getRuleByName("MockRuleNameRef"));assertNotNull(ruleSet.getRuleByName("MockRuleNameRefRef"));rsf.setMinimumPriority(RulePriority.MEDIUM_HIGH);ruleSet = rsf.createRuleSet(createRuleSetReferenceId(REF_INTERNAL_TO_INTERNAL_CHAIN));assertEquals("Number of Rules", 2, ruleSet.getRules().size());assertNotNull(ruleSet.getRuleByName("MockRuleNameRef"));assertNotNull(ruleSet.getRuleByName("MockRuleNameRefRef"));rsf.setMinimumPriority(RulePriority.HIGH);ruleSet = rsf.createRuleSet(createRuleSetReferenceId(REF_INTERNAL_TO_INTERNAL_CHAIN));assertEquals("Number of Rules", 1, ruleSet.getRules().size());assertNotNull(ruleSet.getRuleByName("MockRuleNameRefRef"));rsf.setMinimumPriority(RulePriority.LOW);ruleSet = rsf.createRuleSet(createRuleSetReferenceId(REF_INTERNAL_TO_EXTERNAL_CHAIN));assertEquals("Number of Rules", 3, ruleSet.getRules().size());assertNotNull(ruleSet.getRuleByName("ExternalRefRuleName"));assertNotNull(ruleSet.getRuleByName("ExternalRefRuleNameRef"));assertNotNull(ruleSet.getRuleByName("ExternalRefRuleNameRefRef"));rsf.setMinimumPriority(RulePriority.MEDIUM_HIGH);ruleSet = rsf.createRuleSet(createRuleSetReferenceId(REF_INTERNAL_TO_EXTERNAL_CHAIN));assertEquals("Number of Rules", 2, ruleSet.getRules().size());assertNotNull(ruleSet.getRuleByName("ExternalRefRuleNameRef"));assertNotNull(ruleSet.getRuleByName("ExternalRefRuleNameRefRef"));rsf.setMinimumPriority(RulePriority.HIGH);ruleSet = rsf.createRuleSet(createRuleSetReferenceId(REF_INTERNAL_TO_EXTERNAL_CHAIN));assertEquals("Number of Rules", 1, ruleSet.getRules().size());assertNotNull(ruleSet.getRuleByName("ExternalRefRuleNameRefRef"));}@Testpublic void testOverrideMessage() throws RuleSetNotFoundException {Rule r = loadFirstRule(REF_OVERRIDE_ORIGINAL_NAME);assertEquals("TestMessageOverride", r.getMessage());}@Testpublic void testOverrideMessageOneElem() throws RuleSetNotFoundException {Rule r = loadFirstRule(REF_OVERRIDE_ORIGINAL_NAME_ONE_ELEM);assertEquals("TestMessageOverride", r.getMessage());}@Test(expected = IllegalArgumentException.class)public void testIncorrectExternalRef() throws IllegalArgumentException,RuleSetNotFoundException {loadFirstRule(REF_MISPELLED_XREF);}@Testpublic void testSetPriority() throws RuleSetNotFoundException {RuleSetFactory rsf = new RuleSetFactory();rsf.setMinimumPriority(RulePriority.MEDIUM_HIGH);assertEquals(0, rsf.createRuleSet(createRuleSetReferenceId(SINGLE_RULE)).size());rsf.setMinimumPriority(RulePriority.MEDIUM_LOW);assertEquals(1, rsf.createRuleSet(createRuleSetReferenceId(SINGLE_RULE)).size());}@Testpublic void testLanguage() throws RuleSetNotFoundException {Rule r = loadFirstRule(LANGUAGE);assertEquals(Language.JAVA, r.getLanguage());}@Test(expected = IllegalArgumentException.class)public void testIncorrectLanguage() throws RuleSetNotFoundException {loadFirstRule(INCORRECT_LANGUAGE);}@Testpublic void testMinimumLanugageVersion() throws RuleSetNotFoundException {Rule r = loadFirstRule(MINIMUM_LANGUAGE_VERSION);assertEquals(LanguageVersion.JAVA_14, r.getMinimumLanguageVersion());}@Test(expected = IllegalArgumentException.class)public void testIncorrectMinimumLanugageVersion()throws RuleSetNotFoundException {loadFirstRule(INCORRECT_MINIMUM_LANGUAGE_VERSION);}@Testpublic void testMaximumLanugageVersion() throws RuleSetNotFoundException {Rule r = loadFirstRule(MAXIMUM_LANGUAGE_VERSION);assertEquals(LanguageVersion.JAVA_17, r.getMaximumLanguageVersion());}@Test(expected = IllegalArgumentException.class)public void testIncorrectMaximumLanugageVersion()throws RuleSetNotFoundException {loadFirstRule(INCORRECT_MAXIMUM_LANGUAGE_VERSION);}@Test(expected = IllegalArgumentException.class)public void testInvertedMinimumMaximumLanugageVersions()throws RuleSetNotFoundException {loadFirstRule(INVERTED_MINIMUM_MAXIMUM_LANGUAGE_VERSIONS);}@Testpublic void testDirectDeprecatedRule() throws RuleSetNotFoundException {Rule r = loadFirstRule(DIRECT_DEPRECATED_RULE);assertNotNull("Direct Deprecated Rule", r);}@Testpublic void testReferenceToDeprecatedRule() throws RuleSetNotFoundException {Rule r = loadFirstRule(REFERENCE_TO_DEPRECATED_RULE);assertNotNull("Reference to Deprecated Rule", r);assertTrue("Rule Reference", r instanceof RuleReference);assertFalse("Not deprecated", r.isDeprecated());assertTrue("Original Rule Deprecated", ((RuleReference) r).getRule().isDeprecated());assertEquals("Rule name", r.getName(), DEPRECATED_RULE_NAME);}@Testpublic void testRuleSetReferenceWithDeprecatedRule()throws RuleSetNotFoundException {RuleSet ruleSet = loadRuleSet(REFERENCE_TO_RULESET_WITH_DEPRECATED_RULE);assertNotNull("RuleSet", ruleSet);assertFalse("RuleSet empty", ruleSet.getRules().isEmpty());// No deprecated Rules should be loaded when loading an entire RuleSet// by reference.Rule r = ruleSet.getRuleByName(DEPRECATED_RULE_NAME);assertNull("Deprecated Rule Reference", r);for (Rule rule : ruleSet.getRules()) {assertFalse("Rule not deprecated", rule.isDeprecated());}}@Testpublic void testExternalReferences() throws RuleSetNotFoundException {RuleSet rs = loadRuleSet(EXTERNAL_REFERENCE_RULE_SET);assertEquals(1, rs.size());assertEquals(UnusedLocalVariableRule.class.getName(), rs.getRuleByName("UnusedLocalVariable").getRuleClass());}@Testpublic void testIncludeExcludePatterns() throws RuleSetNotFoundException {RuleSet ruleSet = loadRuleSet(INCLUDE_EXCLUDE_RULESET);assertNotNull("Include patterns", ruleSet.getIncludePatterns());assertEquals("Include patterns size", 2, ruleSet.getIncludePatterns().size());assertEquals("Include pattern #1", "include1", ruleSet.getIncludePatterns().get(0));assertEquals("Include pattern #2", "include2", ruleSet.getIncludePatterns().get(1));assertNotNull("Exclude patterns", ruleSet.getExcludePatterns());assertEquals("Exclude patterns size", 3, ruleSet.getExcludePatterns().size());assertEquals("Exclude pattern #1", "exclude1", ruleSet.getExcludePatterns().get(0));assertEquals("Exclude pattern #2", "exclude2", ruleSet.getExcludePatterns().get(1));assertEquals("Exclude pattern #3", "exclude3", ruleSet.getExcludePatterns().get(2));}@Testpublic void testAllPMDBuiltInRulesMeetConventions() throws IOException,RuleSetNotFoundException, ParserConfigurationException,SAXException {int invalidSinceAttributes = 0;int invalidExternalInfoURL = 0;int invalidClassName = 0;int invalidRegexSuppress = 0;int invalidXPathSuppress = 0;String messages = "";// TODO Need to handle each LanguageList<String> ruleSetFileNames = getRuleSetFileNames();for (String fileName : ruleSetFileNames) {RuleSet ruleSet = loadRuleSetByFileName(fileName);for (Rule rule : ruleSet.getRules()) {// Skip referencesif (rule instanceof RuleReference) {continue;}Language language = Language.JAVA;String group = fileName.substring(fileName.lastIndexOf('/') + 1);group = group.substring(0, group.indexOf(".xml"));if (group.indexOf('-') >= 0) {group = group.substring(0, group.indexOf('-'));}// Is since missing ?if (rule.getSince() == null) {invalidSinceAttributes++;messages += "Rule " + fileName + "/" + rule.getName()+ " is missing 'since' attribute" + PMD.EOL;}// Is URL valid ?if (rule.getExternalInfoUrl() == null|| "".equalsIgnoreCase(rule.getExternalInfoUrl())) {invalidExternalInfoURL++;messages += "Rule " + fileName + "/" + rule.getName()+ " is missing 'externalInfoURL' attribute"+ PMD.EOL;} else {String expectedExternalInfoURL = "http://pmd.sourceforge.net/rules/"+ fileName.replaceAll("rulesets/", "").replaceAll(".xml", "") + ".html#" + rule.getName();if (!expectedExternalInfoURL.equals(rule.getExternalInfoUrl())) {invalidExternalInfoURL++;messages += "Rule "+ fileName+ "/"+ rule.getName()+ " seems to have an invalid 'externalInfoURL' value ("+ rule.getExternalInfoUrl()+ "), it should be:" + expectedExternalInfoURL+ PMD.EOL;}}// Proper class name/packaging?String expectedClassName = "net.sourceforge.pmd.lang."+ language.getTerseName() + ".rule." + group + "."+ rule.getName() + "Rule";if (!rule.getRuleClass().equals(expectedClassName)&& !rule.getRuleClass().equals(XPathRule.class.getName())) {invalidClassName++;messages += "Rule " + fileName + "/" + rule.getName()+ " seems to have an invalid 'class' value ("+ rule.getRuleClass() + "), it should be:"+ expectedClassName + PMD.EOL;}// Should not have violation suppress regex propertyif (rule.getProperty(Rule.VIOLATION_SUPPRESS_REGEX_DESCRIPTOR) != null) {invalidRegexSuppress++;messages += "Rule "+ fileName+ "/"+ rule.getName()+ " should not have '"+ Rule.VIOLATION_SUPPRESS_REGEX_DESCRIPTOR.name()+ "', this is intended for end user customization only."+ PMD.EOL;}// Should not have violation suppress xpath propertyif (rule.getProperty(Rule.VIOLATION_SUPPRESS_XPATH_DESCRIPTOR) != null) {invalidXPathSuppress++;messages += "Rule "+ fileName+ "/"+ rule.getName()+ " should not have '"+ Rule.VIOLATION_SUPPRESS_XPATH_DESCRIPTOR.name()+ "', this is intended for end user customization only."+ PMD.EOL;}}}// We do this at the end to ensure we test ALL the rules before failing// the testif (invalidSinceAttributes > 0 || invalidExternalInfoURL > 0|| invalidClassName > 0 || invalidRegexSuppress > 0|| invalidXPathSuppress > 0) {fail("All built-in PMD rules need 'since' attribute ("+ invalidSinceAttributes+ " are missing), a proper ExternalURLInfo ("+ invalidExternalInfoURL+ " are invalid), a class name meeting conventions ("+ invalidClassName + " are invalid), no '"+ Rule.VIOLATION_SUPPRESS_REGEX_DESCRIPTOR.name()+ "' property (" + invalidRegexSuppress+ " are invalid), and no '"+ Rule.VIOLATION_SUPPRESS_XPATH_DESCRIPTOR.name()+ "' property (" + invalidXPathSuppress + " are invalid)"+ PMD.EOL + messages);}}@Testpublic void testXmlSchema() throws IOException, RuleSetNotFoundException,ParserConfigurationException, SAXException {boolean allValid = true;List<String> ruleSetFileNames = getRuleSetFileNames();for (String fileName : ruleSetFileNames) {boolean valid = validateAgainstSchema(fileName);allValid = allValid && valid;}assertTrue("All XML must parse without producing validation messages.",allValid);}@Testpublic void testDtd() throws IOException, RuleSetNotFoundException,ParserConfigurationException, SAXException {boolean allValid = true;List<String> ruleSetFileNames = getRuleSetFileNames();for (String fileName : ruleSetFileNames) {boolean valid = validateAgainstDtd(fileName);allValid = allValid && valid;}assertTrue("All XML must parse without producing validation messages.",allValid);}@Testpublic void testReadWriteRoundTrip() throws IOException,RuleSetNotFoundException, ParserConfigurationException,SAXException {List<String> ruleSetFileNames = getRuleSetFileNames();for (String fileName : ruleSetFileNames) {testRuleSet(fileName);}}public void testRuleSet(String fileName) throws IOException,RuleSetNotFoundException, ParserConfigurationException,SAXException {// Load original XMLString xml1 = readFullyToString(ResourceLoader.loadResourceAsStream(fileName));// System.out.println("xml1: " + xml1);// Load the original RuleSetRuleSet ruleSet1 = loadRuleSetByFileName(fileName);// Write to XML, first timeByteArrayOutputStream outputStream1 = new ByteArrayOutputStream();RuleSetWriter writer1 = new RuleSetWriter(outputStream1);writer1.write(ruleSet1);writer1.close();String xml2 = new String(outputStream1.toByteArray());// System.out.println("xml2: " + xml2);// Read RuleSet from XML, first timeRuleSetFactory ruleSetFactory = new RuleSetFactory();RuleSet ruleSet2 = ruleSetFactory.createRuleSet(createRuleSetReferenceId(new String(outputStream1.toByteArray())));// Do write/read a 2nd time, just to be sure// Write to XML, second timeByteArrayOutputStream outputStream2 = new ByteArrayOutputStream();RuleSetWriter writer2 = new RuleSetWriter(outputStream2);writer2.write(ruleSet2);writer2.close();String xml3 = new String(outputStream2.toByteArray());// System.out.println("xml3: " + xml3);// Read RuleSet from XML, second timeRuleSet ruleSet3 = ruleSetFactory.createRuleSet(createRuleSetReferenceId(new String(outputStream2.toByteArray())));// The 2 written XMLs should all be valid w.r.t Schema/DTDassertTrue("1st roundtrip RuleSet XML is not valid against Schema",validateAgainstSchema(new ByteArrayInputStream(xml2.getBytes())));assertTrue("2nd roundtrip RuleSet XML is not valid against Schema",validateAgainstSchema(new ByteArrayInputStream(xml3.getBytes())));assertTrue("1st roundtrip RuleSet XML is not valid against DTD",validateAgainstDtd(new ByteArrayInputStream(xml2.getBytes())));assertTrue("2nd roundtrip RuleSet XML is not valid against DTD",validateAgainstDtd(new ByteArrayInputStream(xml3.getBytes())));// All 3 versions of the RuleSet should be the sameassertEqualsRuleSet("Original RuleSet and 1st roundtrip Ruleset not the same",ruleSet1, ruleSet2);assertEqualsRuleSet("1st roundtrip Ruleset and 2nd roundtrip RuleSet not the same",ruleSet2, ruleSet3);// It's hard to compare the XML DOMs. At least the roundtrip ones should// textually be the same.assertEquals("1st roundtrip RuleSet XML and 2nd roundtrip RuleSet XML",xml2, xml3);}private void assertEqualsRuleSet(String message, RuleSet ruleSet1,RuleSet ruleSet2) {assertEquals(message + ", RuleSet name", ruleSet1.getName(), ruleSet2.getName());assertEquals(message + ", RuleSet description", ruleSet1.getDescription(), ruleSet2.getDescription());assertEquals(message + ", RuleSet exclude patterns", ruleSet1.getExcludePatterns(), ruleSet2.getExcludePatterns());assertEquals(message + ", RuleSet include patterns", ruleSet1.getIncludePatterns(), ruleSet2.getIncludePatterns());assertEquals(message + ", RuleSet rule count", ruleSet1.getRules().size(), ruleSet2.getRules().size());for (int i = 0; i < ruleSet1.getRules().size(); i++) {Rule rule1 = ((List<Rule>) ruleSet1.getRules()).get(i);Rule rule2 = ((List<Rule>) ruleSet2.getRules()).get(i);assertFalse(message + ", Different RuleReference",rule1 instanceof RuleReference&& !(rule2 instanceof RuleReference)|| !(rule1 instanceof RuleReference)&& rule2 instanceof RuleReference);if (rule1 instanceof RuleReference) {RuleReference ruleReference1 = (RuleReference) rule1;RuleReference ruleReference2 = (RuleReference) rule2;assertEquals(message + ", RuleReference overridden language",ruleReference1.getOverriddenLanguage(), ruleReference2.getOverriddenLanguage());assertEquals(message+ ", RuleReference overridden minimum language version",ruleReference1.getOverriddenMinimumLanguageVersion(),ruleReference2.getOverriddenMinimumLanguageVersion());assertEquals(message+ ", RuleReference overridden maximum language version",ruleReference1.getOverriddenMaximumLanguageVersion(),ruleReference2.getOverriddenMaximumLanguageVersion());assertEquals(message + ", RuleReference overridden deprecated",ruleReference1.isOverriddenDeprecated(), ruleReference2.isOverriddenDeprecated());assertEquals(message + ", RuleReference overridden name",ruleReference1.getOverriddenName(), ruleReference2.getOverriddenName());assertEquals(message + ", RuleReference overridden description",ruleReference1.getOverriddenDescription(),ruleReference2.getOverriddenDescription());assertEquals(message + ", RuleReference overridden message",ruleReference1.getOverriddenMessage(), ruleReference2.getOverriddenMessage());assertEquals(message+ ", RuleReference overridden external info url",ruleReference1.getOverriddenExternalInfoUrl(),ruleReference2.getOverriddenExternalInfoUrl());assertEquals(message + ", RuleReference overridden priority",ruleReference1.getOverriddenPriority(), ruleReference2.getOverriddenPriority());assertEquals(message + ", RuleReference overridden examples",ruleReference1.getOverriddenExamples(), ruleReference2.getOverriddenExamples());}assertEquals(message + ", Rule name", rule1.getName(), rule2.getName());assertEquals(message + ", Rule class", rule1.getRuleClass(), rule2.getRuleClass());assertEquals(message + ", Rule description " + rule1.getName(),rule1.getDescription(), rule2.getDescription());assertEquals(message + ", Rule message", rule1.getMessage(), rule2.getMessage());assertEquals(message + ", Rule external info url", rule1.getExternalInfoUrl(), rule2.getExternalInfoUrl());assertEquals(message + ", Rule priority", rule1.getPriority(),rule2.getPriority());assertEquals(message + ", Rule examples", rule1.getExamples(),rule2.getExamples());List<PropertyDescriptor<?>> propertyDescriptors1 = rule1.getPropertyDescriptors();List<PropertyDescriptor<?>> propertyDescriptors2 = rule2.getPropertyDescriptors();try {assertEquals(message + ", Rule property descriptor ",propertyDescriptors1, propertyDescriptors2);} catch (Error e) {throw e;}for (int j = 0; j < propertyDescriptors1.size(); j++) {assertEquals(message + ", Rule property value " + j, rule1.getProperty(propertyDescriptors1.get(j)), rule2.getProperty(propertyDescriptors2.get(j)));}assertEquals(message + ", Rule property descriptor count",propertyDescriptors1.size(), propertyDescriptors2.size());}}private boolean validateAgainstSchema(String fileName) throws IOException,RuleSetNotFoundException, ParserConfigurationException,SAXException {InputStream inputStream = loadResourceAsStream(fileName);boolean valid = validateAgainstSchema(inputStream);if (!valid) {System.err.println("Validation against XML Schema failed for: "+ fileName);}return valid;}private boolean validateAgainstSchema(InputStream inputStream)throws IOException, RuleSetNotFoundException,ParserConfigurationException, SAXException {SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();saxParserFactory.setValidating(true);saxParserFactory.setNamespaceAware(true);// Hope we're using Xerces, or this may not work!// Note: Features are listed here// http://xerces.apache.org/xerces2-j/features.htmlsaxParserFactory.setFeature("http://xml.org/sax/features/validation",true);saxParserFactory.setFeature("http://apache.org/xml/features/validation/schema", true);saxParserFactory.setFeature("http://apache.org/xml/features/validation/schema-full-checking",true);SAXParser saxParser = saxParserFactory.newSAXParser();ValidateDefaultHandler validateDefaultHandler = new ValidateDefaultHandler("src/main/resources/ruleset_2_0_0.xsd");saxParser.parse(inputStream, validateDefaultHandler);inputStream.close();return validateDefaultHandler.isValid();}private boolean validateAgainstDtd(String fileName) throws IOException,RuleSetNotFoundException, ParserConfigurationException,SAXException {InputStream inputStream = loadResourceAsStream(fileName);boolean valid = validateAgainstDtd(inputStream);if (!valid) {System.err.println("Validation against DTD failed for: " + fileName);}return valid;}private boolean validateAgainstDtd(InputStream inputStream)throws IOException, RuleSetNotFoundException,ParserConfigurationException, SAXException {SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();saxParserFactory.setValidating(true);saxParserFactory.setNamespaceAware(true);// Read file into memoryString file = readFullyToString(inputStream);// Remove XML Schema stuff, replace with DTDfile = file.replaceAll("<\\?xml [ a-zA-Z0-9=\".-]*\\?>", "");file = file.replaceAll("xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"", "");file = file.replaceAll("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", "");file = file.replaceAll("xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\"","");file = file.replaceAll("xsi:noNamespaceSchemaLocation=\"http://pmd.sourceforge.net/ruleset_2_0_0.xsd\"","");file = "<?xml version=\"1.0\"?>" + PMD.EOL+ "<!DOCTYPE ruleset SYSTEM \"file://"+ System.getProperty("user.dir") + "/src/main/resources/ruleset_2_0_0.dtd\">"+ PMD.EOL + file;inputStream = new ByteArrayInputStream(file.getBytes());SAXParser saxParser = saxParserFactory.newSAXParser();ValidateDefaultHandler validateDefaultHandler = new ValidateDefaultHandler("src/main/resources/ruleset_2_0_0.dtd");saxParser.parse(inputStream, validateDefaultHandler);inputStream.close();return validateDefaultHandler.isValid();}private String readFullyToString(InputStream inputStream)throws IOException {StringBuffer buf = new StringBuffer(64 * 1024);BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));String line;while ((line = reader.readLine()) != null) {buf.append(line);buf.append(PMD.EOL);}reader.close();return buf.toString();}// Gets all test PMD Ruleset XML filesprivate List<String> getRuleSetFileNames() throws IOException,RuleSetNotFoundException {Properties properties = new Properties();properties.load(ResourceLoader.loadResourceAsStream("rulesets/java/rulesets.properties"));String fileNames = properties.getProperty("rulesets.filenames");StringTokenizer st = new StringTokenizer(fileNames, ",");List<String> ruleSetFileNames = new ArrayList<String>();while (st.hasMoreTokens()) {ruleSetFileNames.add(st.nextToken());}return ruleSetFileNames;}private class ValidateDefaultHandler extends DefaultHandler {private final String validateDocument;private boolean valid = true;public ValidateDefaultHandler(String validateDocument) {this.validateDocument = validateDocument;}public boolean isValid() {return valid;}@Overridepublic void error(SAXParseException e) throws SAXException {log("Error", e);}@Overridepublic void fatalError(SAXParseException e) throws SAXException {log("FatalError", e);}@Overridepublic void warning(SAXParseException e) throws SAXException {log("Warning", e);}private void log(String prefix, SAXParseException e) {String message = prefix + " at (" + e.getLineNumber() + ", " + e.getColumnNumber() + "): " + e.getMessage();System.err.println(message);valid = false;}@Overridepublic InputSource resolveEntity(String publicId, String systemId)throws IOException, SAXException {if ("http://pmd.sourceforge.net/ruleset_2_0_0.xsd".equals(systemId)|| systemId.endsWith("ruleset_2_0_0.dtd")) {try {InputStream inputStream = loadResourceAsStream(validateDocument);return new InputSource(inputStream);} catch (RuleSetNotFoundException e) {System.err.println(e.getMessage());throw new IOException(e.getMessage());}}throw new IllegalArgumentException("No clue how to handle: publicId=" + publicId+ ", systemId=" + systemId);}}private InputStream loadResourceAsStream(String resource)throws RuleSetNotFoundException {InputStream inputStream = ResourceLoader.loadResourceAsStream(resource,this.getClass().getClassLoader());if (inputStream == null) {throw new RuleSetNotFoundException("Can't find resource "+ resource+ "  Make sure the resource is a valid file or URL or is on the CLASSPATH.  Here's the current classpath: "+ System.getProperty("java.class.path"));}return inputStream;}private static final String REF_OVERRIDE_ORIGINAL_NAME = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ " <description>testdesc</description>"+ PMD.EOL+ " <rule "+ PMD.EOL+ "  ref=\"rulesets/java/unusedcode.xml/UnusedLocalVariable\" message=\"TestMessageOverride\"> "+ PMD.EOL + " </rule>" + PMD.EOL + "</ruleset>";private static final String REF_MISPELLED_XREF = "<?xml version=\"1.0\"?>"+ PMD.EOL + "<ruleset name=\"test\">" + PMD.EOL+ " <description>testdesc</description>" + PMD.EOL + " <rule "+ PMD.EOL+ "  ref=\"rulesets/java/unusedcode.xml/FooUnusedLocalVariable\"> "+ PMD.EOL + " </rule>" + PMD.EOL + "</ruleset>";private static final String REF_OVERRIDE_ORIGINAL_NAME_ONE_ELEM = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ " <description>testdesc</description>"+ PMD.EOL+ " <rule ref=\"rulesets/java/unusedcode.xml/UnusedLocalVariable\" message=\"TestMessageOverride\"/> "+ PMD.EOL + "</ruleset>";private static final String REF_OVERRIDE = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ " <description>testdesc</description>"+ PMD.EOL+ " <rule "+ PMD.EOL+ "  ref=\"rulesets/java/unusedcode.xml/UnusedLocalVariable\" "+ PMD.EOL+ "  name=\"TestNameOverride\" "+ PMD.EOL+ "  message=\"Test message override\"> "+ PMD.EOL+ "  <description>Test description override</description>"+ PMD.EOL+ "  <example>Test example override</example>"+ PMD.EOL+ "  <priority>3</priority>"+ PMD.EOL+ "  <properties>"+ PMD.EOL+ "   <property name=\"test2\" description=\"test2\" type=\"String\" value=\"override2\"/>"+ PMD.EOL+ "   <property name=\"test3\" description=\"test3\" type=\"String\"><value>override3</value></property>"+ PMD.EOL+ "   <property name=\"test4\" description=\"test4\" type=\"String\" value=\"new property\"/>"+ PMD.EOL + "  </properties>" + PMD.EOL + " </rule>" + PMD.EOL+ "</ruleset>";private static final String REF_INTERNAL_TO_INTERNAL = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ " <description>testdesc</description>"+ PMD.EOL+ "<rule "+ PMD.EOL+ "name=\"MockRuleName\" "+ PMD.EOL+ "message=\"avoid the mock rule\" "+ PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\">"+ PMD.EOL+ "</rule>"+ " <rule ref=\"MockRuleName\" name=\"MockRuleNameRef\"/> "+ PMD.EOL + "</ruleset>";private static final String REF_INTERNAL_TO_INTERNAL_CHAIN = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ " <description>testdesc</description>"+ PMD.EOL+ "<rule "+ PMD.EOL+ "name=\"MockRuleName\" "+ PMD.EOL+ "message=\"avoid the mock rule\" "+ PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\">"+ PMD.EOL+ "</rule>"+ " <rule ref=\"MockRuleName\" name=\"MockRuleNameRef\"><priority>2</priority></rule> "+ PMD.EOL+ " <rule ref=\"MockRuleNameRef\" name=\"MockRuleNameRefRef\"><priority>1</priority></rule> "+ PMD.EOL + "</ruleset>";private static final String REF_INTERNAL_TO_EXTERNAL = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ " <description>testdesc</description>"+ PMD.EOL+ "<rule "+ PMD.EOL+ "name=\"ExternalRefRuleName\" "+ PMD.EOL+ "ref=\"rulesets/java/unusedcode.xml/UnusedLocalVariable\"/>"+ PMD.EOL+ " <rule ref=\"ExternalRefRuleName\" name=\"ExternalRefRuleNameRef\"/> "+ PMD.EOL + "</ruleset>";private static final String REF_INTERNAL_TO_EXTERNAL_CHAIN = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ " <description>testdesc</description>"+ PMD.EOL+ "<rule "+ PMD.EOL+ "name=\"ExternalRefRuleName\" "+ PMD.EOL+ "ref=\"rulesets/java/unusedcode.xml/UnusedLocalVariable\"/>"+ PMD.EOL+ " <rule ref=\"ExternalRefRuleName\" name=\"ExternalRefRuleNameRef\"><priority>2</priority></rule> "+ PMD.EOL+ " <rule ref=\"ExternalRefRuleNameRef\" name=\"ExternalRefRuleNameRefRef\"><priority>1</priority></rule> "+ PMD.EOL + "</ruleset>";private static final String EMPTY_RULESET = "<?xml version=\"1.0\"?>"+ PMD.EOL + "<ruleset name=\"test\">" + PMD.EOL+ "<description>testdesc</description>" + PMD.EOL + "</ruleset>";private static final String SINGLE_RULE = "<?xml version=\"1.0\"?>"+ PMD.EOL + "<ruleset name=\"test\">" + PMD.EOL+ "<description>testdesc</description>" + PMD.EOL + "<rule "+ PMD.EOL + "name=\"MockRuleName\" " + PMD.EOL+ "message=\"avoid the mock rule\" " + PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\">"+ "<priority>3</priority>" + PMD.EOL + "</rule></ruleset>";private static final String MULTIPLE_RULES = "<?xml version=\"1.0\"?>"+ PMD.EOL + "<ruleset name=\"test\">" + PMD.EOL+ "<description>testdesc</description>" + PMD.EOL+ "<rule name=\"MockRuleName1\" " + PMD.EOL+ "message=\"avoid the mock rule\" " + PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\">" + PMD.EOL+ "</rule>" + PMD.EOL + "<rule name=\"MockRuleName2\" " + PMD.EOL+ "message=\"avoid the mock rule\" " + PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\">" + PMD.EOL+ "</rule></ruleset>";private static final String PROPERTIES = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ "<description>testdesc</description>"+ PMD.EOL+ "<rule name=\"MockRuleName\" "+ PMD.EOL+ "message=\"avoid the mock rule\" "+ PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\">"+ PMD.EOL+ "<description>testdesc2</description>"+ PMD.EOL+ "<properties>"+ PMD.EOL+ "<property name=\"fooBoolean\" description=\"test\" type=\"Boolean\" value=\"true\" />"+ PMD.EOL+ "<property name=\"fooChar\" description=\"test\" type=\"Character\" value=\"B\" />"+ PMD.EOL+ "<property name=\"fooInt\" description=\"test\" type=\"Integer\" min=\"1\" max=\"10\" value=\"3\" />"+ PMD.EOL+ "<property name=\"fooFloat\" description=\"test\" type=\"Float\" min=\"1.0\" max=\"1.0\" value=\"1.0\"  />"+ PMD.EOL+ "<property name=\"fooDouble\" description=\"test\" type=\"Double\" min=\"1.0\" max=\"9.0\" value=\"3.0\"  />"+ PMD.EOL+ "<property name=\"fooString\" description=\"test\" type=\"String\" value=\"bar\" />"+ PMD.EOL + "</properties>" + PMD.EOL + "</rule></ruleset>";private static final String XPATH = "<?xml version=\"1.0\"?>" + PMD.EOL+ "<ruleset name=\"test\">" + PMD.EOL+ "<description>testdesc</description>" + PMD.EOL+ "<rule name=\"MockRuleName\" " + PMD.EOL+ "message=\"avoid the mock rule\" " + PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\">"+ "<priority>3</priority>" + PMD.EOL + PMD.EOL+ "<description>testdesc2</description>" + PMD.EOL + "<properties>"+ PMD.EOL+ "<property name=\"xpath\" description=\"test\" type=\"String\">"+ PMD.EOL + "<value>" + PMD.EOL + "<![CDATA[ //Block ]]>" + PMD.EOL+ "</value>" + PMD.EOL + "</property>" + PMD.EOL + "</properties>"+ PMD.EOL + "</rule></ruleset>";private static final String PRIORITY = "<?xml version=\"1.0\"?>" + PMD.EOL+ "<ruleset name=\"test\">" + PMD.EOL+ "<description>testdesc</description>" + PMD.EOL + "<rule "+ PMD.EOL + "name=\"MockRuleName\" " + PMD.EOL+ "message=\"avoid the mock rule\" " + PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\">"+ "<priority>3</priority>" + PMD.EOL + "</rule></ruleset>";private static final String LANGUAGE = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ "<description>testdesc</description>"+ PMD.EOL+ "<rule "+ PMD.EOL+ "name=\"MockRuleName\" "+ PMD.EOL+ "message=\"avoid the mock rule\" "+ PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\" language=\"java\">"+ PMD.EOL + "</rule></ruleset>";private static final String INCORRECT_LANGUAGE = "<?xml version=\"1.0\"?>"+ PMD.EOL + "<ruleset name=\"test\">" + PMD.EOL+ "<description>testdesc</description>" + PMD.EOL + "<rule "+ PMD.EOL + "name=\"MockRuleName\" " + PMD.EOL+ "message=\"avoid the mock rule\" " + PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\"" + PMD.EOL+ " language=\"bogus\">" + PMD.EOL + "</rule></ruleset>";private static final String MINIMUM_LANGUAGE_VERSION = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ "<description>testdesc</description>"+ PMD.EOL+ "<rule "+ PMD.EOL+ "name=\"MockRuleName\" "+ PMD.EOL+ "message=\"avoid the mock rule\" "+ PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\""+ PMD.EOL+ " language=\"java\""+ PMD.EOL+ " minimumLanguageVersion=\"1.4\">"+ PMD.EOL+ "</rule></ruleset>";private static final String INCORRECT_MINIMUM_LANGUAGE_VERSION = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ "<description>testdesc</description>"+ PMD.EOL+ "<rule "+ PMD.EOL+ "name=\"MockRuleName\" "+ PMD.EOL+ "message=\"avoid the mock rule\" "+ PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\""+ PMD.EOL+ " language=\"java\""+ PMD.EOL+ " minimumLanguageVersion=\"bogus\">"+ PMD.EOL+ "</rule></ruleset>";private static final String MAXIMUM_LANGUAGE_VERSION = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ "<description>testdesc</description>"+ PMD.EOL+ "<rule "+ PMD.EOL+ "name=\"MockRuleName\" "+ PMD.EOL+ "message=\"avoid the mock rule\" "+ PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\""+ PMD.EOL+ " language=\"java\""+ PMD.EOL+ " maximumLanguageVersion=\"1.7\">"+ PMD.EOL+ "</rule></ruleset>";private static final String INCORRECT_MAXIMUM_LANGUAGE_VERSION = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ "<description>testdesc</description>"+ PMD.EOL+ "<rule "+ PMD.EOL+ "name=\"MockRuleName\" "+ PMD.EOL+ "message=\"avoid the mock rule\" "+ PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\""+ PMD.EOL+ " language=\"java\""+ PMD.EOL+ " maximumLanguageVersion=\"bogus\">"+ PMD.EOL+ "</rule></ruleset>";private static final String INVERTED_MINIMUM_MAXIMUM_LANGUAGE_VERSIONS = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ "<description>testdesc</description>"+ PMD.EOL+ "<rule "+ PMD.EOL+ "name=\"MockRuleName\" "+ PMD.EOL+ "message=\"avoid the mock rule\" "+ PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\" "+ PMD.EOL+ "language=\"java\""+ PMD.EOL+ " minimumLanguageVersion=\"1.7\""+ PMD.EOL+ "maximumLanguageVersion=\"1.4\">"+ PMD.EOL+ "</rule></ruleset>";private static final String DIRECT_DEPRECATED_RULE = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ "<description>testdesc</description>"+ PMD.EOL+ "<rule "+ PMD.EOL+ "name=\"MockRuleName\" "+ PMD.EOL+ "message=\"avoid the mock rule\" "+ PMD.EOL+ "class=\"net.sourceforge.pmd.lang.rule.MockRule\" deprecated=\"true\">"+ PMD.EOL + "</rule></ruleset>";// Note: Update this RuleSet name to a different RuleSet with deprecated// Rules when the Rules are finally removed.private static final String DEPRECATED_RULE_RULESET_NAME = "rulesets/java/basic.xml";// Note: Update this Rule name to a different deprecated Rule when the one// listed here is finally removed.private static final String DEPRECATED_RULE_NAME = "EmptyCatchBlock";private static final String REFERENCE_TO_DEPRECATED_RULE = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ "<description>testdesc</description>"+ PMD.EOL+ "<rule "+ PMD.EOL+ "ref=\""+ DEPRECATED_RULE_RULESET_NAME+ "/"+ DEPRECATED_RULE_NAME + "\">" + PMD.EOL + "</rule></ruleset>";private static final String REFERENCE_TO_RULESET_WITH_DEPRECATED_RULE = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ "<description>testdesc</description>"+ PMD.EOL+ "<rule "+ PMD.EOL+ "ref=\""+ DEPRECATED_RULE_RULESET_NAME+ "\">"+ PMD.EOL + "</rule></ruleset>";private static final String DFA = "<?xml version=\"1.0\"?>" + PMD.EOL+ "<ruleset name=\"test\">" + PMD.EOL+ "<description>testdesc</description>" + PMD.EOL + "<rule "+ PMD.EOL + "name=\"MockRuleName\" " + PMD.EOL+ "message=\"avoid the mock rule\" " + PMD.EOL + "dfa=\"true\" "+ PMD.EOL + "class=\"net.sourceforge.pmd.lang.rule.MockRule\">"+ "<priority>3</priority>" + PMD.EOL + "</rule></ruleset>";private static final String INCLUDE_EXCLUDE_RULESET = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ "<description>testdesc</description>"+ PMD.EOL+ "<include-pattern>include1</include-pattern>"+ PMD.EOL+ "<include-pattern>include2</include-pattern>"+ PMD.EOL+ "<exclude-pattern>exclude1</exclude-pattern>"+ PMD.EOL+ "<exclude-pattern>exclude2</exclude-pattern>"+ PMD.EOL+ "<exclude-pattern>exclude3</exclude-pattern>"+ PMD.EOL+ "</ruleset>";private static final String EXTERNAL_REFERENCE_RULE_SET = "<?xml version=\"1.0\"?>"+ PMD.EOL+ "<ruleset name=\"test\">"+ PMD.EOL+ "<description>testdesc</description>"+ PMD.EOL+ "<rule ref=\"rulesets/java/unusedcode.xml/UnusedLocalVariable\"/>"+ PMD.EOL + "</ruleset>";private Rule loadFirstRule(String ruleSetXml)throws RuleSetNotFoundException {RuleSet rs = loadRuleSet(ruleSetXml);return rs.getRules().iterator().next();}private RuleSet loadRuleSetByFileName(String ruleSetFileName)throws RuleSetNotFoundException {RuleSetFactory rsf = new RuleSetFactory();return rsf.createRuleSet(ruleSetFileName);}private RuleSet loadRuleSet(String ruleSetXml)throws RuleSetNotFoundException {RuleSetFactory rsf = new RuleSetFactory();return rsf.createRuleSet(createRuleSetReferenceId(ruleSetXml));}private static RuleSetReferenceId createRuleSetReferenceId(final String ruleSetXml) {return new RuleSetReferenceId(null) {@Overridepublic InputStream getInputStream(ClassLoader classLoader)throws RuleSetNotFoundException {return new ByteArrayInputStream(ruleSetXml.getBytes());}};}public static junit.framework.Test suite() {return new JUnit4TestAdapter(RuleSetFactoryTest.class);}}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertNull;import static org.junit.Assert.assertSame;import static org.junit.Assert.assertTrue;import java.io.File;import junit.framework.JUnit4TestAdapter;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.RuleContext;import org.junit.Test;public class RuleContextTest {@Testpublic void testReport() {RuleContext ctx = new RuleContext();assertEquals(0, ctx.getReport().size());Report r = new Report();ctx.setReport(r);Report r2 = ctx.getReport();assertEquals("report object mismatch", r, r2);}@Testpublic void testSourceCodeFilename() {RuleContext ctx = new RuleContext();assertNull("filename should be null", ctx.getSourceCodeFilename());ctx.setSourceCodeFilename("foo");assertEquals("filename mismatch", "foo", ctx.getSourceCodeFilename());}@Testpublic void testSourceCodeFile() {RuleContext ctx = new RuleContext();assertNull("file should be null", ctx.getSourceCodeFile());ctx.setSourceCodeFile(new File("somefile.java"));assertEquals("filename mismatch", new File("somefile.java"), ctx.getSourceCodeFile());}@Testpublic void testAttributes() {RuleContext ctx1 = new RuleContext();Object obj1 = new Object();Object obj2 = new Object();assertNull("attribute should be null", ctx1.getAttribute("attribute"));boolean set = ctx1.setAttribute("attribute", obj1);assertTrue("attribute should have been set", set);assertNotNull("attribute should not be null", ctx1.getAttribute("attribute"));assertSame("attribute should be expected instance", ctx1.getAttribute("attribute"), obj1);set = ctx1.setAttribute("attribute", obj2);assertFalse("attribute should not have been set", set);assertSame("attribute should be expected instance", ctx1.getAttribute("attribute"), obj1);Object value = ctx1.removeAttribute("attribute");assertSame("attribute value should be expected instance", value, obj1);assertNull("attribute should be null", ctx1.getAttribute("attribute"));}@Testpublic void testSharedAttributes() {RuleContext ctx1 = new RuleContext();RuleContext ctx2 = new RuleContext(ctx1);StringBuilder obj1 = new StringBuilder();StringBuilder obj2 = new StringBuilder();ctx1.setAttribute("attribute1", obj1);ctx2.setAttribute("attribute2", obj2);assertNotNull("attribute should not be null", ctx1.getAttribute("attribute1"));assertNotNull("attribute should not be null", ctx1.getAttribute("attribute2"));assertNotNull("attribute should not be null", ctx2.getAttribute("attribute1"));assertNotNull("attribute should not be null", ctx2.getAttribute("attribute2"));assertSame("attribute should be expected instance", ctx1.getAttribute("attribute1"), obj1);assertSame("attribute should be expected instance", ctx1.getAttribute("attribute2"), obj2);assertSame("attribute should be expected instance", ctx2.getAttribute("attribute1"), obj1);assertSame("attribute should be expected instance", ctx2.getAttribute("attribute2"), obj2);ctx1.removeAttribute("attribute1");assertNull("attribute should be null", ctx1.getAttribute("attribute1"));assertNull("attribute should be null", ctx2.getAttribute("attribute1"));assertNotNull("attribute should not be null", ctx1.getAttribute("attribute2"));assertNotNull("attribute should not be null", ctx2.getAttribute("attribute2"));StringBuilder value = (StringBuilder)ctx1.getAttribute("attribute2");assertEquals("attribute value should be empty", "", value.toString());value.append("x");StringBuilder value1 = (StringBuilder)ctx1.getAttribute("attribute2");assertEquals("attribute value should be 'x'", "x", value1.toString());StringBuilder value2 = (StringBuilder)ctx2.getAttribute("attribute2");assertEquals("attribute value should be 'x'", "x", value2.toString());}public static junit.framework.Test suite() {return new JUnit4TestAdapter(RuleContextTest.class);}}
 package net.sourceforge.pmd;  import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.io.StringReader;import junit.framework.JUnit4TestAdapter;import net.sourceforge.pmd.PMD;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSets;import net.sourceforge.pmd.testframework.RuleTst;import net.sourceforge.pmd.testframework.TestDescriptor;import org.junit.Before;import org.junit.Test; public class ExcludeLinesTest extends RuleTst {     private Rule rule;      @Before      public void setUp() {         rule = findRule("java-unusedcode", "UnusedLocalVariable");     }      @Test     public void testAcceptance() {         runTest(new TestDescriptor(TEST1, "NOPMD should work", 0, rule));         runTest(new TestDescriptor(TEST2, "Should fail without exclude marker", 1, rule));     }      @Test     public void testAlternateMarker() throws Throwable {         PMD p = new PMD();         p.getConfiguration().setSuppressMarker("FOOBAR");         RuleContext ctx = new RuleContext();         Report r = new Report();         ctx.setReport(r);         ctx.setSourceCodeFilename("n/a");         ctx.setLanguageVersion(DEFAULT_LANGUAGE_VERSION);         RuleSet rules = new RuleSet();         rules.addRule(rule);         p.getSourceCodeProcessor().processSourceCode(new StringReader(TEST3), new RuleSets(rules), ctx);         assertTrue(r.isEmpty());         assertEquals(r.getSuppressedRuleViolations().size(), 1);     }      private static final String TEST1 =             "public class Foo {" + PMD.EOL +             " void foo() {" + PMD.EOL +             "  int x; //NOPMD " + PMD.EOL +             " } " + PMD.EOL +             "}";      private static final String TEST2 =             "public class Foo {" + PMD.EOL +             " void foo() {" + PMD.EOL +             "  int x;" + PMD.EOL +             " } " + PMD.EOL +             "}";      private static final String TEST3 =             "public class Foo {" + PMD.EOL +             " void foo() {" + PMD.EOL +             "  int x; // FOOBAR" + PMD.EOL +             " } " + PMD.EOL +             "}";    public static junit.framework.Test suite() {        return new JUnit4TestAdapter(ExcludeLinesTest.class);    }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package net.sourceforge.pmd;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import junit.framework.JUnit4TestAdapter;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.RuleViolationComparator;import net.sourceforge.pmd.lang.java.ast.DummyJavaNode;import net.sourceforge.pmd.lang.java.rule.JavaRuleViolation;import net.sourceforge.pmd.lang.rule.MockRule;import org.junit.Ignore;import org.junit.Test;public class RuleViolationTest {    @Ignore    @Test    public void testConstructor1() {        Rule rule = new MockRule("name", "desc", "msg", "rulesetname");        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename");        DummyJavaNode s = new DummyJavaNode(1);        s.testingOnly__setBeginLine(2);        RuleViolation r = new JavaRuleViolation(rule, ctx, s, rule.getMessage());        assertEquals("object mismatch", rule, r.getRule());        assertEquals("line number is wrong", 2, r.getBeginLine());        assertEquals("filename is wrong", "filename", r.getFilename());    }    @Ignore    @Test    public void testConstructor2() {        Rule rule = new MockRule("name", "desc", "msg", "rulesetname");        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename");        DummyJavaNode s = new DummyJavaNode(1);        s.testingOnly__setBeginLine(2);        RuleViolation r = new JavaRuleViolation(rule, ctx, s, "description");        assertEquals("object mismatch", rule, r.getRule());        assertEquals("line number is wrong", 2, r.getBeginLine());        assertEquals("filename is wrong", "filename", r.getFilename());        assertEquals("description is wrong", "description", r.getDescription());    }    @Ignore    @Test    public void testComparatorWithDifferentFilenames() {        Rule rule = new MockRule("name", "desc", "msg", "rulesetname");        RuleViolationComparator comp = RuleViolationComparator.INSTANCE;        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename1");        DummyJavaNode s = new DummyJavaNode(1);        s.testingOnly__setBeginLine(10);        RuleViolation r1 = new JavaRuleViolation(rule, ctx, s, "description");        ctx.setSourceCodeFilename("filename2");        DummyJavaNode s1 = new DummyJavaNode(1);        s1.testingOnly__setBeginLine(10);        RuleViolation r2 = new JavaRuleViolation(rule, ctx, s1, "description");        assertEquals(-1, comp.compare(r1, r2));        assertEquals(1, comp.compare(r2, r1));    }    @Ignore    @Test    public void testComparatorWithSameFileDifferentLines() {        Rule rule = new MockRule("name", "desc", "msg", "rulesetname");        RuleViolationComparator comp = RuleViolationComparator.INSTANCE;        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename");        DummyJavaNode s = new DummyJavaNode(1);        s.testingOnly__setBeginLine(10);        DummyJavaNode s1 = new DummyJavaNode(1);        s1.testingOnly__setBeginLine(20);        RuleViolation r1 = new JavaRuleViolation(rule, ctx, s, "description");        RuleViolation r2 = new JavaRuleViolation(rule, ctx, s1, "description");        assertTrue(comp.compare(r1, r2) < 0);        assertTrue(comp.compare(r2, r1) > 0);    }    @Ignore    @Test    public void testComparatorWithSameFileSameLines() {        Rule rule = new MockRule("name", "desc", "msg", "rulesetname");        RuleViolationComparator comp = RuleViolationComparator.INSTANCE;        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename");        DummyJavaNode s = new DummyJavaNode(1);        s.testingOnly__setBeginLine(10);        DummyJavaNode s1 = new DummyJavaNode(1);        s1.testingOnly__setBeginLine(10);        RuleViolation r1 = new JavaRuleViolation(rule, ctx, s, "description");        RuleViolation r2 = new JavaRuleViolation(rule, ctx, s1, "description");        assertEquals(1, comp.compare(r1, r2));        assertEquals(1, comp.compare(r2, r1));    }    public static junit.framework.Test suite() {        return new JUnit4TestAdapter(RuleViolationTest.class);    }}
/** * */package test.net.sourceforge.pmd.jerry.ast.xpath.visitor;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.jerry.ast.xpath.visitor.AbstractPrintVisitor;import org.junit.Before;import org.junit.Test;/** * @author rpelisse * */public class AbstractPrintVisitorTest {private AbstractPrintVisitor visitor;private static final String testString = "A string";private static final String testObject = "String as an object";/** * Dummy concrete implementation to test Abstract classe. * @author rpelisse * */private class ConcretePrintVisitor extends AbstractPrintVisitor {public static final int INDENT_LEVEL = 4;public int getIndentLevel() {return super.indentLevel;}public ConcretePrintVisitor() {super.indentLevel = INDENT_LEVEL;}public void print(String s){super.print(s);}public void print(Object o){super.print(o);}public void println(String s) {super.println(s);}public void println(Object o) {super.println(o);}public void println() {super.println();}public void applyIndent() {super.applyIndent();}public void incrementIndent() {super.incrementIndent();}public void decrementIndent() {super.decrementIndent();}}@Beforepublic void buildVisitor(){this.visitor = new ConcretePrintVisitor();}@Testpublic void print() {// Here we cast to access ConcretePrintVisitor methods((ConcretePrintVisitor)visitor).print(testString);((ConcretePrintVisitor)visitor).print((Object)testObject);// Now we test AbstractPrintVisitorassertEquals(testString + testObject,visitor.getOutput());}@Testpublic void println() {// Here we cast to access ConcretePrintVisitor methods((ConcretePrintVisitor)visitor).println(testString);((ConcretePrintVisitor)visitor).println((Object)testObject);String result = visitor.getOutput();// keeping up to indentLevelString indentLevel = "";for (int i = 0; i < ((ConcretePrintVisitor)visitor).getIndentLevel() ; i++ )indentLevel += "\t";String excepted = testString + AbstractPrintVisitor.EOL +indentLevel + testObject + AbstractPrintVisitor.EOL;assertEquals(excepted,result);}@Testpublic void incrementOperations() {assertEquals(ConcretePrintVisitor.INDENT_LEVEL,((ConcretePrintVisitor)visitor).getIndentLevel());((ConcretePrintVisitor)visitor).incrementIndent();assertEquals(ConcretePrintVisitor.INDENT_LEVEL + 1,((ConcretePrintVisitor)visitor).getIndentLevel());((ConcretePrintVisitor)visitor).decrementIndent();assertEquals(ConcretePrintVisitor.INDENT_LEVEL,((ConcretePrintVisitor)visitor).getIndentLevel());}}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTIfExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTIfExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTIfExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTPredicateList;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTPredicateListTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTPredicateList(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTCommentTest;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTCommentTestTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTCommentTest(ID));assertNotNull(new ASTCommentTest(null,ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTVarName;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTVarNameTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTVarName(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTAnyKindTest;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTAnyKindTestTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTAnyKindTest(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTDocumentTest;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTDocumentTestTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTDocumentTest(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTUnionExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTUnionExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTUnionExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTNodeTest;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTNodeTestTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTNodeTest(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTAtomicType;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTAtomicTypeTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTAtomicType(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTSequenceType;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTSequenceTypeTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTSequenceType(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTAdditiveExpr;import org.junit.Test;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTAdditiveExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTAdditiveExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTForExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTForExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTForExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTAndExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTAndExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTAndExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTSchemaElementTest;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTSchemaElementTestTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTSchemaElementTest(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTIntersectExceptExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTIntersectExceptExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTIntersectExceptExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTAttributeName;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTAttributeNameTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTAttributeName(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTDecimalLiteral;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTDecimalLiteralTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTDecimalLiteral(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTElementTest;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTElementTestTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTElementTest(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTSlashSlash;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTSlashSlashTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTSlashSlash(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTWildcard;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTWildcardTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTWildcard(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTAttributeDeclaration;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTAttributeDeclarationTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTAttributeDeclaration(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTDoubleLiteral;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTDoubleLiteralTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTDoubleLiteral(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTPredicate;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTPredicateTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTPredicate(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTStepExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTStepExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTStepExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTTypeName;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTTypeNameTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTTypeName(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTQuantifiedExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTQuantifiedExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTQuantifiedExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTContextItemExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTContextItemExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTContextItemExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTTextTest;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTTextTestTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTTextTest(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTElementDeclaration;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTElementDeclarationTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTElementDeclaration(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTTreatExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTTreatExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTTreatExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTPathExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTPathExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTPathExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTParenthesizedExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTParenthesizedExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTParenthesizedExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTComparisonExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTComparisonExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTComparisonExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTItemType;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTItemTypeTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTItemType(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTForwardAxis;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTForwardAxisTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTForwardAxis(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTStringLiteral;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTStringLiteralTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTStringLiteral(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTUnaryExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTUnaryExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTUnaryExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTReverseAxis;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTReverseAxisTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTReverseAxis(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTSchemaAttributeTest;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTSchemaAttributeTestTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTSchemaAttributeTest(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTVarRef;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTVarRefTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTVarRef(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTFunctionCall;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTFunctionCallTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTFunctionCall(ID));  }}
package test.net.sourceforge.pmd.jerry.ast.xpath;import java.io.Reader;import java.io.StringReader;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTXPath;import net.sourceforge.pmd.jerry.ast.xpath.Node;import net.sourceforge.pmd.jerry.ast.xpath.ParseException;import net.sourceforge.pmd.jerry.ast.xpath.TokenMgrError;import net.sourceforge.pmd.jerry.ast.xpath.XPath2Parser;import net.sourceforge.pmd.jerry.ast.xpath.visitor.CoreXPath2ParserVisitor;import net.sourceforge.pmd.jerry.ast.xpath.visitor.PrintXPath2ParserVisitor;import test.net.sourceforge.pmd.jerry.ast.Query;public class XPath2ParserTest extends TestCase {private static final boolean AST_DUMP = false;private static final String EOL = "\n";private static final Query[] VALID_QUERIES = {new Query("1,1", "1, 1", "1, 1", "{1, 1}"),new Query("((fn:root(self::node()) treat as document-node()))","(/)",null,"{((typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error()))}"),new Query("foo -foo","foo - foo","child::foo - child::foo","{fs:minus(fs:convert-operand(fn:data((fs:apply-ordering-mode(child::foo))), 1.0E0), fs:convert-operand(fn:data((fs:apply-ordering-mode(child::foo))), 1.0E0))}"),new Query("foo(: This is a comment :)- foo","foo - foo","child::foo - child::foo","{fs:minus(fs:convert-operand(fn:data((fs:apply-ordering-mode(child::foo))), 1.0E0), fs:convert-operand(fn:data((fs:apply-ordering-mode(child::foo))), 1.0E0))}"),new Query("foo-foo", null, "child::foo-foo","{fs:apply-ordering-mode(child::foo-foo)}"),new Query("foo (: commenting out a (: comment :) may be confusing, but often helpful :)","foo", "child::foo", "{fs:apply-ordering-mode(child::foo)}"),new Query("for (: set up loop :) $i in $x return $i","for $i in $x return $i", "for $i in $x return $i","{for $i in $x return $i}"),new Query("for (: set up loop :) $i in $x,$j in $y,$k in $z return $i","for $i in $x, $j in $y, $k in $z return $i","for $i in $x, $j in $y, $k in $z return $i","{for $i in $x for $j in $y for $k in $z return $i}"),new Query("5 instance (: strange place for a comment :) of xs:integer","5 instance of xs:integer","5 instance of xs:integer","{typeswitch(5) case $fs:new as xs:integer return fn:true() default $fs:new return fn:false()}"),new Query("fn:doc(\"zoo.xml\")/fn:id('tiger')",null,null,"{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fn:doc(\"zoo.xml\") return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fn:id('tiger')))}"),new Query("/",null,"(fn:root(self::node()) treat as document-node())","{(typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error())}"),new Query("/*",null,"(fn:root(self::node()) treat as document-node())/child::*","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := (typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error()) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::*)))}"),new Query("/ *","/*","(fn:root(self::node()) treat as document-node())/child::*","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := (typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error()) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::*)))}"),new Query("(/) * 5",null,"((fn:root(self::node()) treat as document-node())) * 5","{fs:times(fs:convert-operand(fn:data((((typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error())))), 1.0E0), fs:convert-operand(fn:data((5)), 1.0E0))}"),new Query("4", null, null, "{4}"),new Query("-4", null, null,"{fs:unary-minus(fs:convert-operand(fn:data((4)), 1.0E0))}"),new Query("+4", null, null,"{fs:unary-plus(fs:convert-operand(fn:data((4)), 1.0E0))}"),new Query("+--4",null,null,"{fs:unary-plus(fs:convert-operand(fn:data((fs:unary-minus(fs:convert-operand(fn:data((fs:unary-minus(fs:convert-operand(fn:data((4)), 1.0E0)))), 1.0E0)))), 1.0E0))}"),new Query("-++4",null,null,"{fs:unary-minus(fs:convert-operand(fn:data((fs:unary-plus(fs:convert-operand(fn:data((fs:unary-plus(fs:convert-operand(fn:data((4)), 1.0E0)))), 1.0E0)))), 1.0E0))}"),new Query("-+-+--+4",null,null,"{fs:unary-minus(fs:convert-operand(fn:data((fs:unary-plus(fs:convert-operand(fn:data((fs:unary-minus(fs:convert-operand(fn:data((fs:unary-plus(fs:convert-operand(fn:data((fs:unary-minus(fs:convert-operand(fn:data((fs:unary-minus(fs:convert-operand(fn:data((fs:unary-plus(fs:convert-operand(fn:data((4)), 1.0E0)))), 1.0E0)))), 1.0E0)))), 1.0E0)))), 1.0E0)))), 1.0E0)))), 1.0E0))}"),new Query("4 + (/) * 5",null,"4 + ((fn:root(self::node()) treat as document-node())) * 5","{fs:plus(fs:convert-operand(fn:data((4)), 1.0E0), fs:convert-operand(fn:data((fs:times(fs:convert-operand(fn:data((((typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error())))), 1.0E0), fs:convert-operand(fn:data((5)), 1.0E0)))), 1.0E0))}"),new Query("4 + /",null,"4 + (fn:root(self::node()) treat as document-node())","{fs:plus(fs:convert-operand(fn:data((4)), 1.0E0), fs:convert-operand(fn:data(((typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error()))), 1.0E0))}"),new Query("4 | 5", null, "4 union 5","{fs:apply-ordering-mode(op:union(4, 5))}"),new Query("4 union 5", "4 | 5", null,"{fs:apply-ordering-mode(op:union(4, 5))}"),new Query("4 intersect 5", null, null,"{fs:apply-ordering-mode(op:intersect(4, 5))}"),new Query("4 except 5", null, null,"{fs:apply-ordering-mode(op:except(4, 5))}"),new Query("4 treat as xs:integer",null,null,"{typeswitch(4) case $fs:new as xs:integer return $fs:new default $fs:new return fn:error()}"),new Query("4 treat as xs:integer?",null,null,"{typeswitch(4) case $fs:new as xs:integer? return $fs:new default $fs:new return fn:error()}"),new Query("4 treat as xs:integer+",null,null,"{typeswitch(4) case $fs:new as xs:integer+ return $fs:new default $fs:new return fn:error()}"),new Query("4 treat as xs:integer*",null,null,"{typeswitch(4) case $fs:new as xs:integer* return $fs:new default $fs:new return fn:error()}"),new Query("if ($widget1/unit-cost < $widget2/unit-cost)" + EOL+ "then $widget1" + EOL + "else $widget2","if ($widget1/unit-cost < $widget2/unit-cost) then $widget1 else $widget2","if ($widget1/child::unit-cost < $widget2/child::unit-cost) then $widget1 else $widget2","{if (fn:boolean((some $v1 in fn:data((fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := $widget1 return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::unit-cost))))) satisfies some $v2 in fn:data((fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := $widget2 return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::unit-cost))))) satisfies let $u1 := fs:convert-operand($v1, $v2) return let $u2 := fs:convert-operand($v2, $v1) return fs:lt($u1, $u2)))) then $widget1 else $widget2}"),new Query("if ($part/@discounted)" + EOL + "then $part/wholesale"+ EOL + "else $part/retail","if ($part/@discounted) then $part/wholesale else $part/retail","if ($part/attribute::discounted) then $part/child::wholesale else $part/child::retail","{if (fn:boolean((fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := $part return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(attribute::discounted)))))) then fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := $part return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::wholesale))) else fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := $part return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::retail)))}"),new Query("($x div $y) + xs:decimal($z)",null,null,"{fs:plus(fs:convert-operand(fn:data(((fs:div(fs:convert-operand(fn:data(($x)), 1.0E0), fs:convert-operand(fn:data(($y)), 1.0E0))))), 1.0E0), fs:convert-operand(fn:data((xs:decimal($z))), 1.0E0))}"),new Query("fn:error(xs:QName(\"app:err057\"), \"Unexpected value\", fn:string($v))",null, null,"{fn:error(xs:QName(\"app:err057\"), \"Unexpected value\", fn:string($v))}"),new Query("'this is a string with '' apostrophes and \" quotes!'",null, null,"{'this is a string with '' apostrophes and \" quotes!'}"),new Query("\"this is a string with ' apostrophes and \"\" quotes!\"",null, null,"{\"this is a string with ' apostrophes and \"\" quotes!\"}"),new Query("//book[author eq 'Berners-Lee']",null,"(fn:root(self::node()) treat as document-node())/descendant-or-self::node()/child::book[child::author eq 'Berners-Lee']","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := (typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error()) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(descendant-or-self::node()))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::book) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (fs:eq(fs:convert-operand(fn:data((fs:apply-ordering-mode(child::author))), string), fs:convert-operand(fn:data(('Berners-Lee')), string))) then $fs:dot else ()))}"),new Query("some $x in $expr1 satisfies $x = 47",null,null,"{some $x in $expr1 satisfies fn:boolean((some $v1 in fn:data(($x)) satisfies some $v2 in fn:data((47)) satisfies let $u1 := fs:convert-operand($v1, $v2) return let $u2 := fs:convert-operand($v2, $v1) return fs:eq($u1, $u2)))}"),new Query("some $x in $expr1, $y in $expr2 satisfies $x = 47",null,null,"{some $x in $expr1some $y in $expr2 satisfies fn:boolean((some $v1 in fn:data(($x)) satisfies some $v2 in fn:data((47)) satisfies let $u1 := fs:convert-operand($v1, $v2) return let $u2 := fs:convert-operand($v2, $v1) return fs:eq($u1, $u2)))}"),new Query("every $x in $expr1 satisfies $x = 47",null,null,"{every $x in $expr1 satisfies fn:boolean((some $v1 in fn:data(($x)) satisfies some $v2 in fn:data((47)) satisfies let $u1 := fs:convert-operand($v1, $v2) return let $u2 := fs:convert-operand($v2, $v1) return fs:eq($u1, $u2)))}"),new Query("every $x in $expr1, $y in $expr2 satisfies $x = 47",null,null,"{every $x in $expr1every $y in $expr2 satisfies fn:boolean((some $v1 in fn:data(($x)) satisfies some $v2 in fn:data((47)) satisfies let $u1 := fs:convert-operand($v1, $v2) return let $u2 := fs:convert-operand($v2, $v1) return fs:eq($u1, $u2)))}"),new Query("//product[id = 47]",null,"(fn:root(self::node()) treat as document-node())/descendant-or-self::node()/child::product[child::id = 47]","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := (typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error()) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(descendant-or-self::node()))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::product) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (some $v1 in fn:data((fs:apply-ordering-mode(child::id))) satisfies some $v2 in fn:data((47)) satisfies let $u1 := fs:convert-operand($v1, $v2) return let $u2 := fs:convert-operand($v2, $v1) return fs:eq($u1, $u2)) then $fs:dot else ()))}"),new Query("//product[id = 47]/following::node()/part[id = 48]",null,"(fn:root(self::node()) treat as document-node())/descendant-or-self::node()/child::product[child::id = 47]/following::node()/child::part[child::id = 48]","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := (typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error()) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(descendant-or-self::node()))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::product) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (some $v1 in fn:data((fs:apply-ordering-mode(child::id))) satisfies some $v2 in fn:data((47)) satisfies let $u1 := fs:convert-operand($v1, $v2) return let $u2 := fs:convert-operand($v2, $v1) return fs:eq($u1, $u2)) then $fs:dot else ())) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(ancestor-or-self::node()/following-sibling::node()/descendant-or-self::node()))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::part) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (some $v1 in fn:data((fs:apply-ordering-mode(child::id))) satisfies some $v2 in fn:data((48)) satisfies let $u1 := fs:convert-operand($v1, $v2) return let $u2 := fs:convert-operand($v2, $v1) return fs:eq($u1, $u2)) then $fs:dot else ()))}"),new Query("//part[color eq \"Red\"]",null,"(fn:root(self::node()) treat as document-node())/descendant-or-self::node()/child::part[child::color eq \"Red\"]","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := (typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error()) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(descendant-or-self::node()))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::part) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (fs:eq(fs:convert-operand(fn:data((fs:apply-ordering-mode(child::color))), string), fs:convert-operand(fn:data((\"Red\")), string))) then $fs:dot else ()))}"),new Query("//part[color = \"Red\"][color eq \"Red\"]",null,"(fn:root(self::node()) treat as document-node())/descendant-or-self::node()/child::part[child::color = \"Red\"][child::color eq \"Red\"]","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := (typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error()) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(descendant-or-self::node()))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::part) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (some $v1 in fn:data((fs:apply-ordering-mode(child::color))) satisfies some $v2 in fn:data((\"Red\")) satisfies let $u1 := fs:convert-operand($v1, $v2) return let $u2 := fs:convert-operand($v2, $v1) return fs:eq($u1, $u2)) then $fs:dot else () return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (fs:eq(fs:convert-operand(fn:data((fs:apply-ordering-mode(child::color))), string), fs:convert-operand(fn:data((\"Red\")), string))) then $fs:dot else ()))}"),new Query("$N[@x castable as xs:date][xs:date(@x) gt xs:date(\"2000-01-01\")]",null,"$N[attribute::x castable as xs:date][xs:date(attribute::x) gt xs:date(\"2000-01-01\")]","{let $fs:sequence := let $fs:sequence := $N return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if(fs:apply-ordering-mode(attribute::x) castable as xs:date) then $fs:dot else () return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if(fs:gt(fs:convert-operand(fn:data((xs:date(fs:apply-ordering-mode(attribute::x)))), string), fs:convert-operand(fn:data((xs:date(\"2000-01-01\"))), string))) then $fs:dot else ()}"),new Query("$N[if (@x castable as xs:date)" + EOL+ "then xs:date(@x) gt xs:date(\"2000-01-01\")"+ EOL + "else false()]","$N[if (@x castable as xs:date) then xs:date(@x) gt xs:date(\"2000-01-01\") else false()]","$N[if (attribute::x castable as xs:date) then xs:date(attribute::x) gt xs:date(\"2000-01-01\") else false()]","{let $fs:sequence := $N return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if(if (fn:boolean((fs:apply-ordering-mode(attribute::x) castable as xs:date))) then fs:gt(fs:convert-operand(fn:data((xs:date(fs:apply-ordering-mode(attribute::x)))), string), fs:convert-operand(fn:data((xs:date(\"2000-01-01\"))), string)) else false()) then $fs:dot else ()}"),new Query("\"12.5\"", null, null, "{\"12.5\"}"),new Query("12", null, null, "{12}"),new Query("12.5", null, null, "{12.5}"),new Query("125E2", null, null, "{125E2}"),new Query("\"He said, \"\"I don't like it.\"\"\"", null, null,"{\"He said, \"\"I don't like it.\"\"\"}"),new Query("9 cast as hatsize", null, null,"{let $v as xs:anyAtomicType := fn:data((9)) return $v cast as hatsize}"),new Query("9 cast as hatsize?",null,null,"{let $v as xs:anyAtomicType := fn:data((9)) return typeswitch ($v) case $fs:new as empty-sequence() return () default $fs:new return $v cast as hatsize}"),new Query("fn:doc(\"bib.xml\")/books/book[fn:count(./author)>1]","fn:doc(\"bib.xml\")/books/book[fn:count(./author) > 1]","fn:doc(\"bib.xml\")/child::books/child::book[fn:count(./child::author) > 1]","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fn:doc(\"bib.xml\") return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::books))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::book) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (some $v1 in fn:data((fn:count(fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:dot return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::author)))))) satisfies some $v2 in fn:data((1)) satisfies let $u1 := fs:convert-operand($v1, $v2) return let $u2 := fs:convert-operand($v2, $v1) return fs:gt($u1, $u2)) then $fs:dot else ()))}"),new Query("(1 to 100)[. mod 5 eq 0]",null,null,"{let $fs:sequence := (fs:to((1), (100))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if(fs:eq(fs:convert-operand(fn:data((fs:mod(fs:convert-operand(fn:data((fs:dot)), 1.0E0), fs:convert-operand(fn:data((5)), 1.0E0)))), string), fs:convert-operand(fn:data((0)), string))) then $fs:dot else ()}"),new Query("my:three-argument-function(1, 2, 3)", null, null,"{my:three-argument-function(1, 2, 3)}"),new Query("my:two-argument-function((1, 2), 3)", null, null,"{my:two-argument-function((1, 2), 3)}"),new Query("my:two-argument-function(1, ())", null, null,"{my:two-argument-function(1, ())}"),new Query("my:one-argument-function((1, 2, 3))", null, null,"{my:one-argument-function((1, 2, 3))}"),new Query("my:one-argument-function(( ))","my:one-argument-function(())","my:one-argument-function(())","{my:one-argument-function(())}"),new Query("my:zero-argument-function( )","my:zero-argument-function()","my:zero-argument-function()","{my:zero-argument-function()}"),new Query("..", null, "parent::node()","{fs:apply-ordering-mode(parent::node())}"),new Query("parent::node()", "..", null,"{fs:apply-ordering-mode(parent::node())}"),new Query("child::div1", "div1", null,"{fs:apply-ordering-mode(child::div1)}"),new Query("child::div1/child::para","div1/para",null,"{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(child::div1) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::para)))}"),new Query("child::chapter[2]","chapter[2]",null,"{let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::chapter) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (2) then $fs:dot else ()}"),new Query("descendant::toy[attribute::color = \"red\"]","descendant::toy[@color = \"red\"]","descendant::toy[attribute::color = \"red\"]","{let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(descendant::toy) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (some $v1 in fn:data((fs:apply-ordering-mode(attribute::color))) satisfies some $v2 in fn:data((\"red\")) satisfies let $u1 := fs:convert-operand($v1, $v2) return let $u2 := fs:convert-operand($v2, $v1) return fs:eq($u1, $u2)) then $fs:dot else ()}"),new Query("child::employee[secretary][assistant]","employee[secretary][assistant]","child::employee[child::secretary][child::assistant]","{let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::employee) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (fs:apply-ordering-mode(child::secretary)) then $fs:dot else () return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (fs:apply-ordering-mode(child::assistant)) then $fs:dot else ()}"),new Query("div1//para",null,"child::div1/descendant-or-self::node()/child::para","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(child::div1) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(descendant-or-self::node()))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::para)))}"),new Query("child::div1/descendant-or-self::node()/child::para","div1//para",null,"{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(child::div1) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(descendant-or-self::node()))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::para)))}"),new Query("\"This string was terminated properly!\"", null, null,"{\"This string was terminated properly!\"}"),new Query("'This string was terminated properly!'", null, null,"{'This string was terminated properly!'}"),new Query("\"This string has \"\"escaping\"\"!\"", null, null,"{\"This string has \"\"escaping\"\"!\"}"),new Query("'This string has ''escaping''!'", null, null,"{'This string has ''escaping''!'}"),new Query("para", null, "child::para","{fs:apply-ordering-mode(child::para)}"),new Query("*", null, "child::*","{fs:apply-ordering-mode(child::*)}"),new Query("text()", null, "child::text()","{fs:apply-ordering-mode(child::text())}"),new Query("@name", null, "attribute::name","{fs:apply-ordering-mode(attribute::name)}"),new Query("@*", null, "attribute::*","{fs:apply-ordering-mode(attribute::*)}"),new Query("para[1]",null,"child::para[1]","{let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::para) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (1) then $fs:dot else ()}"),new Query("para[fn:last()]",null,"child::para[fn:last()]","{let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::para) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (fn:last()) then $fs:dot else ()}"),new Query("*/para",null,"child::*/child::para","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(child::*) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::para)))}"),new Query("/book/chapter[5]/section[2]",null,"(fn:root(self::node()) treat as document-node())/child::book/child::chapter[5]/child::section[2]","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := (typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error()) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::book))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::chapter) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (5) then $fs:dot else ())) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::section) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (2) then $fs:dot else ()))}"),new Query("chapter//para",null,"child::chapter/descendant-or-self::node()/child::para","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(child::chapter) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(descendant-or-self::node()))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::para)))}"),new Query("//para",null,"(fn:root(self::node()) treat as document-node())/descendant-or-self::node()/child::para","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := (typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error()) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(descendant-or-self::node()))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::para)))}"),new Query("//@version",null,"(fn:root(self::node()) treat as document-node())/descendant-or-self::node()/attribute::version","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := (typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error()) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(descendant-or-self::node()))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(attribute::version)))}"),new Query("//list/member",null,"(fn:root(self::node()) treat as document-node())/descendant-or-self::node()/child::list/child::member","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := (typeswitch(fn:root(fs:apply-ordering-mode(self::node()))) case $fs:new as document-node() return $fs:new default $fs:new return fn:error()) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(descendant-or-self::node()))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::list))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::member)))}"),new Query(".//para",null,"./descendant-or-self::node()/child::para","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:dot return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(descendant-or-self::node()))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::para)))}"),new Query("..", null, "parent::node()","{fs:apply-ordering-mode(parent::node())}"),new Query("../@lang",null,"parent::node()/attribute::lang","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(parent::node()) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(attribute::lang)))}"),new Query("para[@type = \"warning\"]",null,"child::para[attribute::type = \"warning\"]","{let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::para) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (some $v1 in fn:data((fs:apply-ordering-mode(attribute::type))) satisfies some $v2 in fn:data((\"warning\")) satisfies let $u1 := fs:convert-operand($v1, $v2) return let $u2 := fs:convert-operand($v2, $v1) return fs:eq($u1, $u2)) then $fs:dot else ()}"),new Query("para[@type = \"warning\"][5]",null,"child::para[attribute::type = \"warning\"][5]","{let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::para) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (some $v1 in fn:data((fs:apply-ordering-mode(attribute::type))) satisfies some $v2 in fn:data((\"warning\")) satisfies let $u1 := fs:convert-operand($v1, $v2) return let $u2 := fs:convert-operand($v2, $v1) return fs:eq($u1, $u2)) then $fs:dot else () return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (5) then $fs:dot else ()}"),new Query("para[5][@type = \"warning\"]",null,"child::para[5][attribute::type = \"warning\"]","{let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::para) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (5) then $fs:dot else () return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (some $v1 in fn:data((fs:apply-ordering-mode(attribute::type))) satisfies some $v2 in fn:data((\"warning\")) satisfies let $u1 := fs:convert-operand($v1, $v2) return let $u2 := fs:convert-operand($v2, $v1) return fs:eq($u1, $u2)) then $fs:dot else ()}"),new Query("chapter[title = \"Introduction\"]",null,"child::chapter[child::title = \"Introduction\"]","{let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::chapter) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (some $v1 in fn:data((fs:apply-ordering-mode(child::title))) satisfies some $v2 in fn:data((\"Introduction\")) satisfies let $u1 := fs:convert-operand($v1, $v2) return let $u2 := fs:convert-operand($v2, $v1) return fs:eq($u1, $u2)) then $fs:dot else ()}"),new Query("chapter[title]",null,"child::chapter[child::title]","{let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::chapter) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (fs:apply-ordering-mode(child::title)) then $fs:dot else ()}"),new Query("employee[@secretary and @assistant]",null,"child::employee[attribute::secretary and attribute::assistant]","{let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::employee) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (fn:boolean((fs:apply-ordering-mode(attribute::secretary))) and fn:boolean((fs:apply-ordering-mode(attribute::assistant)))) then $fs:dot else ()}"),new Query("employee[@secretary or @assistant]",null,"child::employee[attribute::secretary or attribute::assistant]","{let $fs:sequence := fs:apply-ordering-mode(fs:distinct-doc-order(fs:apply-ordering-mode(child::employee) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return if (fn:boolean((fs:apply-ordering-mode(attribute::secretary))) or fn:boolean((fs:apply-ordering-mode(attribute::assistant)))) then $fs:dot else ()}"),new Query("book/(chapter | appendix)/section",null,"child::book/(child::chapter union child::appendix)/child::section","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(child::book) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return (fs:apply-ordering-mode(op:union(fs:apply-ordering-mode(child::chapter), fs:apply-ordering-mode(child::appendix)))))) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::section)))}"),new Query("E/.",null,"child::E/.","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(child::E) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:dot))}"),new Query("section/@id",null,"child::section/attribute::id","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(child::section) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(attribute::id)))}"),new Query("section/attribute(id)",null,"child::section/attribute::attribute(id)","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(child::section) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(attribute::attribute(id))))}"),new Query("section/schema-attribute(id)",null,"child::section/attribute::schema-attribute(id)","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(child::section) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(attribute::schema-attribute(id))))}"),new Query("section/schema-element(id)",null,"child::section/child::schema-element(id)","{fs:apply-ordering-mode(fs:distinct-doc-order-or-atomic-sequence(let $fs:sequence as node()* := fs:apply-ordering-mode(child::section) return let $fs:last := fn:count($fs:sequence) return for $fs:dot at $fs:position in $fs:sequence return fs:apply-ordering-mode(child::schema-element(id))))}"),new Query("element()", null, "child::element()","{fs:apply-ordering-mode(child::element())}"),new Query("element(cat)", null, "child::element(cat)","{fs:apply-ordering-mode(child::element(cat))}"),new Query("element(cat, cheshire)", null,"child::element(cat, cheshire)","{fs:apply-ordering-mode(child::element(cat, cheshire))}"),new Query("element(cat, cheshire?)", null,"child::element(cat, cheshire?)","{fs:apply-ordering-mode(child::element(cat, cheshire?))}"),new Query("processing-instruction()", null,"child::processing-instruction()","{fs:apply-ordering-mode(child::processing-instruction())}"),new Query("processing-instruction('cat')", null,"child::processing-instruction('cat')","{fs:apply-ordering-mode(child::processing-instruction('cat'))}"),};private static final Query[] INVALID_QUERIES = { new Query("foo- foo"),new Query("/*5"), new Query("/ * 5"), new Query("4 + / * 5"),new Query("10div 3"), new Query("10 div3"), new Query("10div3"),new Query("\"This string was not terminated properly!"),new Query("\'This string was not terminated properly!"),new Query("\"This string has missing \"escaping\"!\""),new Query("'This string has missing 'escaping'!'"),new Query("5 (: This is a unterminated comment!"), new Query("//"), };public void testValidQueries() {for (int i = 0; i < VALID_QUERIES.length; i++) {Query query = VALID_QUERIES[i];try {// Check: ParsableASTXPath xpath = parse(query.getXPath());if (AST_DUMP) {xpath.dump("");}// Check: Abbreviated(XPath)String abbreviated = PrintXPath2ParserVisitor.abbreviate(query.getXPath());System.out.println("Abbreviate:               " + abbreviated);assertEquals("Abbreviate", query.getAbbreviated(), abbreviated);// Check: Unabbreviated(XPath)String unabbreviated = PrintXPath2ParserVisitor.unabbreviate(query.getXPath());System.out.println("Unabbreviate:             " + unabbreviated);assertEquals("Unabbreviate", query.getUnabbreviated(),unabbreviated);// Check: Unabbreviate(Abbreviate(XPath))String unabbreviateAbbreviate = PrintXPath2ParserVisitor.unabbreviate(abbreviated);System.out.println("Unabbreviate(Abbreviate): "+ unabbreviateAbbreviate);assertEquals("Unabbreviate(Abbreviate)", unabbreviated,unabbreviateAbbreviate);// Check: Abbreviate(Unabbreviate(XPath))String abbreviateUnabbreviate = PrintXPath2ParserVisitor.abbreviate(unabbreviated);System.out.println("Abbreviate(Unabbreviate): "+ abbreviateUnabbreviate);assertEquals("Abbreviate(Unabbreviate)", abbreviated,abbreviateUnabbreviate);// Check: Core(XPath)String core = CoreXPath2ParserVisitor.toCore(query.getXPath());System.out.println("Core:                     " + core);// TODO Uncomment line below to test translation to XPath2 CoreassertEquals("Core(XPath)", query.getCore(), core);} catch (ParseException e) {e.printStackTrace();fail("Should have been able to parse query: " + query);} catch (TokenMgrError e) {e.printStackTrace();fail("Should have been able to parse query: " + query);}}}public void testInvalidQueries() {for (int i = 0; i < INVALID_QUERIES.length; i++) {Query query = INVALID_QUERIES[i];try {ASTXPath xpath = parse(query.getXPath());System.out.println("Should not parse: "+ getSyntaxStructure(xpath));fail("Should not have been able to parse query: " + query);} catch (ParseException e) {// Good!} catch (TokenMgrError e) {// Good!}}}private ASTXPath parse(String query) throws ParseException {System.out.println();System.out.println("XPath:                    " + query);Reader reader = new StringReader(query);XPath2Parser parser = new XPath2Parser(reader);return parser.XPath();}private String getSyntaxStructure(Node node) {StringBuffer buf = new StringBuffer();getSyntaxStructure(buf, node);return buf.toString();}private void getSyntaxStructure(StringBuffer buf, Node node) {buf.append(node);for (int i = 0; i < node.jjtGetNumChildren(); i++) {buf.append("[");getSyntaxStructure(buf, node.jjtGetChild(i));buf.append("]");}}}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTSingleType;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTSingleTypeTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTSingleType(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTPITest;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTPITestTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTPITest(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTOrExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTOrExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTOrExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTXPath;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTXPathTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTXPath(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTMultiplicativeExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTMultiplicativeExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTMultiplicativeExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTAttributeTest;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTAttributeTestTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTAttributeTest(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTInstanceofExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTInstanceofExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTInstanceofExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTCastExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTCastExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTCastExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTSlash;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTSlashTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTSlash(ID));  }}
/** * */package test.net.sourceforge.pmd.jerry.ast.xpath;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNull;import net.sourceforge.pmd.jerry.ast.xpath.ParseException;import net.sourceforge.pmd.jerry.ast.xpath.Token;import org.junit.Test;/** * @author rpelisse * */public class ParseExceptionTest {private static final String MSSG = "Message";private static final int SIZE = 5;@Testpublic void testGetMessage(){// First case : exception with no messageParseException parseException = new ParseException();assertNull(parseException.getMessage());// Simple messageparseException = new ParseException(MSSG);assertEquals(MSSG,parseException.getMessage());// specialConstructor messageint[][] exceptedToken = new int[SIZE][];    for (int i = 0; i < SIZE; i++) {      int[] row = new int[1];      row[0] = 1;      exceptedToken[i] = row;    }String[] tokenImageValue = new String[1];tokenImageValue[0] = "dummy-string";parseException = new ParseException(new Token(),exceptedToken,tokenImageValue);assertNull(parseException.getMessage());}}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTIntegerLiteral;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTIntegerLiteralTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTIntegerLiteral(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTNameTest;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTNameTestTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTNameTest(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.Node;import net.sourceforge.pmd.jerry.ast.xpath.SimpleNode;import org.junit.Test;/** * @author Romain PELISSE, belaran@gmail.com * */public class SimpleNodeTest extends TestCase {private static final int ID = 1;@Testpublic void testAddingChildrenBeyondActualLimits() {final int POS = 3;Node node = new SimpleNode(ID);assertTrue(POS > node.jjtGetNumChildren());Node child = new SimpleNode(ID + 1);node.jjtAddChild(child, POS);assertEquals(child,node.jjtGetChild(POS));// Now that children is no longer 'null', we'll add an another// beyond the limitNode secondChild = new SimpleNode(ID + 2);node.jjtAddChild(secondChild, POS + 1);assertEquals(secondChild,node.jjtGetChild(POS + 1));}}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTElementNameOrWildcard;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTElementNameOrWildcardTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTElementNameOrWildcard(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTAttribNameOrWildcard;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTAttribNameOrWildcardTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTAttribNameOrWildcard(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTElementName;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTElementNameTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTElementName(ID));  }}
/** * */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import org.junit.Test;import net.sourceforge.pmd.jerry.ast.xpath.Token;/** * @author rpelisse * */public class TokenTest extends TestCase {private static final String IMAGE = "image";@Testpublic void testToString() {Token token = new Token();token.image = IMAGE;assertEquals(IMAGE, token.toString());}}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTOccurrenceIndicator;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTOccurrenceIndicatorTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTOccurrenceIndicator(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTAbbrevReverseStep;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTAbbrevReverseStepTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTAbbrevReverseStep(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTAbbrevForwardStep;import org.junit.Test;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTAbbrevForwardStepTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTAbbrevForwardStep(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTCastableExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTCastableExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTCastableExpr(ID));  }}
/** * */package test.net.sourceforge.pmd.jerry.ast.xpath;import static org.junit.Assert.assertEquals;import net.sourceforge.pmd.jerry.ast.xpath.TokenMgrError;import org.junit.Before;import org.junit.Test;/** * @author rpelisse * */public class TokenMgrErrorTest {private static final String MESSAGE = "Message";private static final int REASON = 0;private TokenMgrError tokenMgr;@Beforepublic void buildTestTarget() {tokenMgr = new TokenMgrError(MESSAGE, REASON);}@Testpublic void getMessage() {assertEquals(MESSAGE,tokenMgr.getMessage());}@Testpublic void addEscapes() {TokenMgrErrorDummy dummy = new TokenMgrErrorDummy();assertEquals(dummy.escapes("\b"),"\\b");assertEquals(dummy.escapes("\t"),"\\t");assertEquals(dummy.escapes("\n"),"\\n");assertEquals(dummy.escapes("\f"),"\\f");assertEquals(dummy.escapes("\r"),"\\r");assertEquals(dummy.escapes("\\"),"\\\\");}private class TokenMgrErrorDummy extends TokenMgrError {private static final long serialVersionUID = 1L;public String escapes(String str) {return super.addEscapes(str);}}}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry.ast.xpath;import junit.framework.TestCase;import net.sourceforge.pmd.jerry.ast.xpath.ASTRangeExpr;import org.junit.Test;import static org.junit.Assert.assertNotNull;/** * @author Romain PELISSE, belaran@gmail.com * */public class ASTRangeExprTest extends TestCase {  private static final int ID = 1;  @Test  public void testConstructors() {assertNotNull(new ASTRangeExpr(ID));  }}
/** * BSD-style license; for more info see http://pmd.sourceforge.net/license.html */package test.net.sourceforge.pmd.jerry;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertNull;import static org.junit.Assert.fail;import net.sourceforge.pmd.jerry.xpath.AxisEnum;import net.sourceforge.pmd.jerry.xpath.NodeAccessorAxisNavigator;import org.junit.Ignore;import org.junit.Test;/** * @author rpelisse * */public class NodeAccessorAxisNavigatorTest {@Testpublic void constructorAndSetters() {NodeAccessorAxisNavigator navigator = new NodeAccessorAxisNavigator();assertNotNull(navigator);navigator = new NodeAccessorAxisNavigator(null);assertNotNull(navigator);assertNull(navigator.getNodeAccessor());navigator.setNodeAccessor(null);// FIXME:assertEquals(null,navigator.getNodeAccessor());}@Test(expected= IllegalStateException.class) public void getAxisIterator() {NodeAccessorAxisNavigator navigator = new NodeAccessorAxisNavigator();assertNotNull(navigator);Object node = new Object();navigator.getAxisIterator(node, AxisEnum.ANCESTOR);}@Ignore@Test public void getAxisIteratorNotSupported() {NodeAccessorAxisNavigator navigator = new NodeAccessorAxisNavigator();assertNotNull(navigator);Object node = new Object();this.m(navigator,AxisEnum.ANCESTOR_OR_SELF,node);this.m(navigator,AxisEnum.ANCESTOR,node);this.m(navigator,AxisEnum.PRECEDING_SIBLING,node);this.m(navigator,AxisEnum.PRECEDING,node);this.m(navigator,AxisEnum.DESCENDANT,node);this.m(navigator,AxisEnum.DESCENDANT_OR_SELF,node);this.m(navigator,AxisEnum.FOLLOWING,node);this.m(navigator,AxisEnum.FOLLOWING_SIBLING,node);}private void m(NodeAccessorAxisNavigator navigator,AxisEnum state,Object node) {try{navigator.getAxisIterator(node, state);fail();}catch ( UnsupportedOperationException e){return ;}fail();}}
/* Generated By:JJTree: Do not edit this line. ASTTextTest.java */package net.sourceforge.pmd.jerry.ast.xpath;public class ASTTextTest extends SimpleNode {  public ASTTextTest(int id) {    super(id);  }  public ASTTextTest(XPath2Parser p, int id) {    super(p, id);  }  /** Accept the visitor. **/  public Object jjtAccept(XPath2ParserVisitor visitor, Object data) {    return visitor.visit(this, data);  }}
/* Generated By:JJTree: Do not edit this line. ASTSchemaElementTest.java */package net.sourceforge.pmd.jerry.ast.xpath;public class ASTSchemaElementTest extends SimpleNode {  public ASTSchemaElementTest(int id) {    super(id);  }  public ASTSchemaElementTest(XPath2Parser p, int id) {    super(p, id);  }  /** Accept the visitor. **/  public Object jjtAccept(XPath2ParserVisitor visitor, Object data) {    return visitor.visit(this, data);  }}
/* Generated By:JJTree: Do not edit this line. ASTNodeTest.java */package net.sourceforge.pmd.jerry.ast.xpath;public class ASTNodeTest extends SimpleNode {  public ASTNodeTest(int id) {    super(id);  }  public ASTNodeTest(XPath2Parser p, int id) {    super(p, id);  }  /** Accept the visitor. **/  public Object jjtAccept(XPath2ParserVisitor visitor, Object data) {    return visitor.visit(this, data);  }}
/* Generated By:JJTree: Do not edit this line. ASTAttributeTest.java */package net.sourceforge.pmd.jerry.ast.xpath;public class ASTAttributeTest extends SimpleNode {  public ASTAttributeTest(int id) {    super(id);  }  public ASTAttributeTest(XPath2Parser p, int id) {    super(p, id);  }  /** Accept the visitor. **/  public Object jjtAccept(XPath2ParserVisitor visitor, Object data) {    return visitor.visit(this, data);  }}
/* Generated By:JJTree: Do not edit this line. ASTSchemaAttributeTest.java */package net.sourceforge.pmd.jerry.ast.xpath;public class ASTSchemaAttributeTest extends SimpleNode {  public ASTSchemaAttributeTest(int id) {    super(id);  }  public ASTSchemaAttributeTest(XPath2Parser p, int id) {    super(p, id);  }  /** Accept the visitor. **/  public Object jjtAccept(XPath2ParserVisitor visitor, Object data) {    return visitor.visit(this, data);  }}
/* Generated By:JJTree: Do not edit this line. ASTPITest.java */package net.sourceforge.pmd.jerry.ast.xpath;import net.sourceforge.pmd.jerry.ast.xpath.custom.ImageNode;public class ASTPITest extends ImageNode {  public ASTPITest(int id) {    super(id);  }  public ASTPITest(XPath2Parser p, int id) {    super(p, id);  }  /** Accept the visitor. **/  public Object jjtAccept(XPath2ParserVisitor visitor, Object data) {    return visitor.visit(this, data);  }}
/* Generated By:JJTree: Do not edit this line. ASTAnyKindTest.java */package net.sourceforge.pmd.jerry.ast.xpath;public class ASTAnyKindTest extends SimpleNode {  public ASTAnyKindTest(int id) {    super(id);  }  public ASTAnyKindTest(XPath2Parser p, int id) {    super(p, id);  }  /** Accept the visitor. **/  public Object jjtAccept(XPath2ParserVisitor visitor, Object data) {    return visitor.visit(this, data);  }}
/* Generated By:JJTree: Do not edit this line. ASTDocumentTest.java */package net.sourceforge.pmd.jerry.ast.xpath;public class ASTDocumentTest extends SimpleNode {  public ASTDocumentTest(int id) {    super(id);  }  public ASTDocumentTest(XPath2Parser p, int id) {    super(p, id);  }  /** Accept the visitor. **/  public Object jjtAccept(XPath2ParserVisitor visitor, Object data) {    return visitor.visit(this, data);  }}
/* Generated By:JJTree: Do not edit this line. ASTCommentTest.java */package net.sourceforge.pmd.jerry.ast.xpath;public class ASTCommentTest extends SimpleNode {  public ASTCommentTest(int id) {    super(id);  }  public ASTCommentTest(XPath2Parser p, int id) {    super(p, id);  }  /** Accept the visitor. **/  public Object jjtAccept(XPath2ParserVisitor visitor, Object data) {    return visitor.visit(this, data);  }}
/* Generated By:JJTree: Do not edit this line. ASTElementTest.java */package net.sourceforge.pmd.jerry.ast.xpath;import net.sourceforge.pmd.jerry.ast.xpath.custom.ImageNode;public class ASTElementTest extends ImageNode {  public ASTElementTest(int id) {    super(id);  }  public ASTElementTest(XPath2Parser p, int id) {    super(p, id);  }  /** Accept the visitor. **/  public Object jjtAccept(XPath2ParserVisitor visitor, Object data) {    return visitor.visit(this, data);  }}
/* Generated By:JJTree: Do not edit this line. ASTNameTest.java */package net.sourceforge.pmd.jerry.ast.xpath;import net.sourceforge.pmd.jerry.ast.xpath.custom.ImageNode;public class ASTNameTest extends ImageNode {  public ASTNameTest(int id) {    super(id);  }  public ASTNameTest(XPath2Parser p, int id) {    super(p, id);  }  /** Accept the visitor. **/  public Object jjtAccept(XPath2ParserVisitor visitor, Object data) {    return visitor.visit(this, data);  }}
/* *  Copyright (c) 2002-2003, the pmd-netbeans team *  All rights reserved. * *  Redistribution and use in source and binary forms, with or without modification, *  are permitted provided that the following conditions are met: * *  - Redistributions of source code must retain the above copyright notice, *  this list of conditions and the following disclaimer. * *  - Redistributions in binary form must reproduce the above copyright *  notice, this list of conditions and the following disclaimer in the *  documentation and/or other materials provided with the distribution. * *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE *  ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR *  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL *  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY *  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH *  DAMAGE. */package pmd.config;import java.util.Map;import java.util.HashMap;import org.netbeans.junit.NbTestCase;/** * @author radim */public class PMDOptionsSettingsTest extends NbTestCase {        public PMDOptionsSettingsTest(String testName) {        super(testName);    }    /**     * Test of getHelpCtx method, of class pmd.RunPMDAction.     */    public void testRuleProperties() {//      Preferences prefs = mock(Preferences.class);//      PMDOptionsSettings settings = new PMDOptionsSettings(prefs);      PMDOptionsSettings settings = PMDOptionsSettings.getDefault();      Map<String, Map<String, String>> ruleProperties = new HashMap<String, Map<String, String>>();      Map<String, String> properties = new HashMap<String, String>();      properties.put("propA", "valueA");      properties.put("propB", "valueB");      ruleProperties.put("rule1", properties);      properties = new HashMap<String, String>();      properties.put("prop1", "value1");      ruleProperties.put("rule2", properties);      settings.setRuleProperties(ruleProperties);      Map<String, Map<String, String>> readRuleProperties = settings.getRuleProperties();      assertNotNull(readRuleProperties);      assertTrue("correct size of " + readRuleProperties, readRuleProperties.size() == ruleProperties.size());      for(Map.Entry<String, Map<String, String>> entry : readRuleProperties.entrySet()) {        assertTrue(ruleProperties.containsKey(entry.getKey()));        assertEquals(entry.getValue(), ruleProperties.get(entry.getKey()));      }    }}
/* *  Copyright (c) 2002-2003, the pmd-netbeans team *  All rights reserved. * *  Redistribution and use in source and binary forms, with or without modification, *  are permitted provided that the following conditions are met: * *  - Redistributions of source code must retain the above copyright notice, *  this list of conditions and the following disclaimer. * *  - Redistributions in binary form must reproduce the above copyright *  notice, this list of conditions and the following disclaimer in the *  documentation and/or other materials provided with the distribution. * *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE *  ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR *  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL *  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY *  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH *  DAMAGE. */package pmd;import java.io.PrintStream;import java.util.logging.LogRecord;import junit.framework.*;import java.util.Collections;import java.util.List;import java.util.logging.Handler;import java.util.logging.Level;import java.util.logging.Logger;import org.netbeans.api.java.classpath.ClassPath;import org.netbeans.junit.NbTestCase;import org.netbeans.spi.java.classpath.ClassPathProvider;import org.netbeans.spi.java.classpath.support.ClassPathSupport;import org.netbeans.spi.java.queries.SourceLevelQueryImplementation;import org.openide.filesystems.FileLock;import org.openide.filesystems.FileObject;import org.openide.filesystems.FileUtil;import org.openide.loaders.DataObject;/** * @author radim */public class SourceLevelTest extends NbTestCase {        /*    static {        System.setProperty("org.openide.util.Lookup", Lkp.class.getName());    }        public static final class Lkp extends org.openide.util.lookup.AbstractLookup {        public Lkp() {            this(new org.openide.util.lookup.InstanceContent());        }                private Lkp(org.openide.util.lookup.InstanceContent ic) {            super(ic);            ic.add(new TestSourceLevelQueryImpl());        }    }     */        public SourceLevelTest(String testName) {        super(testName);    }    protected void setUp() throws Exception {        super.setUp();        // uncomment MockService registration and delete META-INF/services file when dropping 5.5 support//        MockServices.setServices(TestSourceLevelQueryImpl.class);    }    protected void tearDown() throws Exception {    }    public static Test suite() {        TestSuite suite = new TestSuite(SourceLevelTest.class);                return suite;    }    /**     * Test of checkCookies method, of class pmd.RunPMDAction.     */    public void testSourceLevels() throws Exception {        clearWorkDir();        CountingHandler counter = new CountingHandler();        Logger.getLogger("pmd").addHandler(counter);        Logger.getLogger("pmd").setLevel(Level.FINE);                List result;                FileObject dir = FileUtil.toFileObject(getWorkDir());        ClassPath cp = ClassPathSupport.createClassPath(new FileObject[] { dir });        TestClassPathProvider.testCP = cp;        assertNotNull("Cannot find FileObject for work dir", dir);        FileObject f1;        DataObject d1;                TestSourceLevelQueryImpl.level = "1.4";        f1 = dir.createData("PMDSample.java");        assertNotNull("Cannot create file in work dir", f1);        FileLock l = null;        try {            l = f1.lock();            PrintStream ps = new PrintStream (f1.getOutputStream(l));            ps.print("public class PMDSample { PMDSample () {} }");            ps.close();        }        finally {            if (l != null) {                l.releaseLock();            }        }        d1 = DataObject.find(f1);        assertNotNull("Cannot find a data object", d1);        result = pmd.RunPMDAction.performScan(Collections.singletonList(d1));        assertEquals("There should be no error for PMDSample.java file", 0, result.size());                TestSourceLevelQueryImpl.level = "1.5";        try {            l = f1.lock();            PrintStream ps = new PrintStream (f1.getOutputStream(l));            ps.print("public class PMDSample { PMDSample () { " +                    "   new java.util.ArrayList<Boolean>();" +                    "  }" +                    "}");            ps.close();        }        finally {            if (l != null) {                l.releaseLock();            }        }        result = pmd.RunPMDAction.performScan(Collections.singletonList(d1));        assertEquals("There should be no error for PMDSample.java file", 0, result.size());        assertEquals("No error logged during scanning", 0, counter.count);        TestSourceLevelQueryImpl.level = "1.6";        result = pmd.RunPMDAction.performScan(Collections.singletonList(d1));        assertEquals("There should be no error for PMDSample.java file", 0, result.size());        assertEquals("No error logged during scanning", 0, counter.count);    }    public static class TestSourceLevelQueryImpl implements SourceLevelQueryImplementation {                static String level;                public TestSourceLevelQueryImpl () {                    }            public String getSourceLevel(FileObject arg0) {//            System.out.println("TestSourceLevelQueryImpl "+arg0.toString()+", "+level);            return level;        }    }        public static class TestClassPathProvider implements ClassPathProvider {                static ClassPath testCP;                public TestClassPathProvider () {        }            public ClassPath findClassPath(FileObject file, String type) {            if (testCP == null || !ClassPath.SOURCE.equals(type))                return null;                        if (FileUtil.isParentOf(testCP.getRoots()[0], file)) {                return testCP;            }            return null;        }}        public static class CountingHandler extends Handler {        int count;            public void publish(LogRecord arg0) {            System.out.println("Log "+arg0);            count++;        }        public void flush() {        }        public void close() throws SecurityException {        }}}
/* *  Copyright (c) 2002-2003, the pmd-netbeans team *  All rights reserved. * *  Redistribution and use in source and binary forms, with or without modification, *  are permitted provided that the following conditions are met: * *  - Redistributions of source code must retain the above copyright notice, *  this list of conditions and the following disclaimer. * *  - Redistributions in binary form must reproduce the above copyright *  notice, this list of conditions and the following disclaimer in the *  documentation and/or other materials provided with the distribution. * *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE *  ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR *  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL *  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY *  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH *  DAMAGE. */package pmd;import java.io.PrintStream;import junit.framework.*;import java.util.Collections;import java.util.List;import org.netbeans.junit.NbTestCase;import org.openide.filesystems.FileLock;import org.openide.filesystems.FileObject;import org.openide.filesystems.FileSystem;import org.openide.filesystems.FileUtil;import org.openide.filesystems.XMLFileSystem;import org.openide.loaders.DataObject;/** * @author radim */public class RunPMDActionTest extends NbTestCase {        public RunPMDActionTest(String testName) {        super(testName);    }    /**     * Test of getHelpCtx method, of class pmd.RunPMDAction.     */    public void testGetHelpCtx() {        pmd.RunPMDAction instance = (RunPMDAction)RunPMDAction.get(RunPMDAction.class);        assertNotNull("There is no help context associated to RunPMDAction", instance.getHelpCtx());    }    /**     * Test of checkCookies method, of class pmd.RunPMDAction.     */    public void testCheckCookies() throws Exception {        clearWorkDir();        //        List dataobjects = null;//        List expResult = null;        List result;                // try on empty list                result = pmd.RunPMDAction.performScan(Collections.<DataObject>emptyList());//        assertEquals(expResult, result);                FileObject dir = FileUtil.toFileObject(getWorkDir());        assertNotNull("Cannot find FileObject for work dir", dir);        FileObject f1;        f1 = dir.createData("MANIFEST.MF");        assertNotNull("Cannot create file in work dir", f1);        DataObject d1 = DataObject.find(f1);        assertNotNull("Cannot find a data object", d1);        result = pmd.RunPMDAction.performScan(Collections.singletonList(d1));        assertEquals("There should be no error for MANIFEST.MF file", 0, result.size());                f1 = dir.createData("PMDSample.java");        assertNotNull("Cannot create file in work dir", f1);        FileLock l = null;        try {            l = f1.lock();            PrintStream ps = new PrintStream (f1.getOutputStream(l));            ps.print("public class PMDSample { PMDSample () {} }");            ps.close();        }        finally {            if (l != null) {                l.releaseLock();            }        }        d1 = DataObject.find(f1);        assertNotNull("Cannot find a data object", d1);        result = pmd.RunPMDAction.performScan(Collections.singletonList(d1));        assertEquals("There should be no error for PMDSample.java file", 0, result.size());            }        public void testShouldCheck() throws Exception {        clearWorkDir();                FileObject dir = FileUtil.toFileObject(getWorkDir());        assertNotNull("Cannot find FileObject for work dir", dir);        FileObject f1;        f1 = dir.createData("MANIFEST.MF");        assertNotNull("Cannot create file in work dir", f1);        DataObject d1 = DataObject.find(f1);        assertNotNull("Cannot find a data object", d1);        assertFalse("MANIFEST.MF file should not be checked", RunPMDAction.shouldCheck(d1));                f1 = dir.createData("PMDSample.java");        assertNotNull("Cannot create file in work dir", f1);        FileLock l = null;        try {            l = f1.lock();            PrintStream ps = new PrintStream (f1.getOutputStream(l));            ps.print("public class PMDSample { PMDSample () {} }");            ps.close();        }        finally {            if (l != null) {                l.releaseLock();            }        }        d1 = DataObject.find(f1);        assertTrue("Java file should be checked", RunPMDAction.shouldCheck(d1));        FileSystem fs = new XMLFileSystem(RunPMDActionTest.class.getResource("testfs.xml"));        f1 = fs.findResource("pkg/Sample.java");        assertFalse("expecting R/O file on XMLFileSystem", f1.canWrite());        d1 = DataObject.find(f1);        assertTrue("read only Java file "+d1+" should be checked too", RunPMDAction.shouldCheck(d1));    }    /**     * Test of asynchronous method, of class pmd.RunPMDAction.     */    public void testAsynchronous() {        pmd.RunPMDAction instance = (RunPMDAction)RunPMDAction.get(RunPMDAction.class);        assertTrue("RunPMDAction should be asynchronous", instance.asynchronous());    }    }
package test.net.sourceforge.pmd.rx.rules;import java.util.Set;import java.util.Iterator;import net.sourceforge.pmd.rx.facts.*;import net.sourceforge.pmd.rx.rules.*;import test.net.sourceforge.pmd.rx.*;public class DuplicateImportTest    extends DroolsRuleTst{    private String testName = null;    private String JAVA_NO_DUPE ="import java.util.*;" +"public class HelloWorld { }";    private String JAVA_DUPE_ON_DEMAND ="import java.util.*;" +"import java.util.*;" +"public class HelloWorld { }";    private String JAVA_DUPE_NO_DEMAND ="import java.util.List;" +"import java.util.List;" +"public class HelloWorld { }";    private String JAVA_DUPE_ON_NO_DEMAND ="import java.util.*;" +"import java.util.List;" +"public class HelloWorld { }";    public DuplicateImportTest(String name) {super( name );this.testName = name;    }    public void testNoDupes() throws Throwable    {Set results = collectViolations( new DuplicateImport(), JAVA_NO_DUPE );Iterator rvs = results.iterator();while (rvs.hasNext()) {    RuleViolationFact rvFact = (RuleViolationFact) rvs.next();    ImportFact impFact = (ImportFact) rvFact.getFact();    System.err.println("DuplicateImport: " + impFact.getACU() + "/" +       impFact.getImportPackage() + "/" +       Integer.toString( impFact.getLineNumber() ));}assertEquals("Expecting no violations",     0, results.size() );    }    public void testDupeOnDemand()throws Throwable    {Set results = collectViolations( new DuplicateImport(), JAVA_DUPE_ON_DEMAND );assertEquals("Expecting 2 violations",     2, results.size() );    }    public void testDupeNoDemand()throws Throwable    {Set results = collectViolations( new DuplicateImport(), JAVA_DUPE_NO_DEMAND );assertEquals("Expecting 2 violations",     2, results.size() );    }    public void testDupeOnNoDemand()throws Throwable    {Set results = collectViolations( new DuplicateImport(), JAVA_DUPE_ON_NO_DEMAND );assertEquals("Expecting 2 violations",     2, results.size() );    }}
package test.net.sourceforge.pmd.rx;import java.util.Set;import java.util.HashSet;import java.util.Iterator;import java.io.StringReader;import org.drools.*;import org.drools.spi.*;import org.drools.semantic.java.*;import net.sourceforge.pmd.*;import net.sourceforge.pmd.rx.*;import net.sourceforge.pmd.ast.*;import net.sourceforge.pmd.rx.facts.*;import junit.framework.TestCase;public class DroolsVisitorTest    extends TestCase{    private String testName = null;    private static String JAVA_TEST_PACKAGE ="package test;" +"public class HelloWorld { }";    private static String JAVA_TEST_IMPORT_1 ="import java.util.*;" +"public class HelloWorld { }";    private static String JAVA_TEST_IMPORT_2 ="import java.util.*;" +"import java.lang.ref.*;" +"public class HelloWorld { }";    private static String JAVA_TEST_IMPORT_SINGLE ="import java.util.Map;" +"public class HelloWorld { }";    private static String JAVA_TEST_IMPORT_DUP ="import java.util.*;" +"import java.util.*;" +"public class HelloWorld { }";    private static String JAVA_TEST_CLASS ="class TestClass { }";    private static String JAVA_TEST_CLASS_PUBLIC ="public class TestClass { }";    private static String JAVA_TEST_CLASS_ABSTRACT ="abstract class TestClass { }";    private static String JAVA_TEST_CLASS_INNER ="class Outer { class Inner { } }";    private static String JAVA_TEST_CLASS_ANON ="class Named { " +"  void foo() { Named.bar( new Runnable() { } ); } " +        "}";    private ASTCompilationUnit current = null;    public DroolsVisitorTest(String name) {super( name );this.testName = name;    }    public void testPackage() throws Throwable {Set results =    collectFacts( net.sourceforge.pmd.rx.facts.PackageFact.class,  JAVA_TEST_PACKAGE );assertEq("Expected one result.", 1, results.size() );Iterator facts = results.iterator();Object fact = facts.next();assertT( "Expected PackageFact.", fact instanceof PackageFact );PackageFact pkgFact = (PackageFact) fact;assertEq("Expecting package name of 'test'", "test", pkgFact.getPackageName() );    }    public void testImport1() throws Throwable {Set results =    collectFacts( net.sourceforge.pmd.rx.facts.ImportFact.class,  JAVA_TEST_IMPORT_1 );assertEq("Expected one result.", 1, results.size() );Iterator imports = results.iterator();Object fact = imports.next();assertT("Expected type of ImportFact",fact instanceof ImportFact);ImportFact impFact = (ImportFact) fact;assertEq("Expecting 'java.util' in Imports.", "java.util", impFact.getImportPackage() );    }    public void testImport2() throws Throwable {Set results =    collectFacts( net.sourceforge.pmd.rx.facts.ImportFact.class,  JAVA_TEST_IMPORT_2 );assertEq("Expected two results.", 2, results.size() );boolean sawUtil = false;boolean sawRef = false;ACUFact acu = null;Iterator imports = results.iterator();while (imports.hasNext()) {    Object fact = imports.next();    assertT("Expected type of ImportFact",    fact instanceof ImportFact);    ImportFact impFact = (ImportFact) fact;    if (acu == null) {acu = impFact.getACU();    }        assertEq("Expecting Same ACU",     acu, acu );    sawUtil = sawUtil |impFact.getImportPackage().equals("java.util");    sawRef = sawRef |impFact.getImportPackage().equals("java.lang.ref");}assertT("Expecting one import of 'java.util'", sawUtil);assertT("Expecting one import of 'java.lang.ref'", sawRef);    }    public void testImportDup() throws Throwable {Set results =    collectFacts( net.sourceforge.pmd.rx.facts.ImportFact.class,  JAVA_TEST_IMPORT_DUP );assertEq("Expected two results.", 2, results.size() );ACUFact acu = null;Iterator dups = results.iterator();while (dups.hasNext()) {    Object fact = dups.next();        assertT( "Expected fact to be of ImportFact type.",     fact instanceof ImportFact);    ImportFact impFact = (ImportFact) fact;    if (acu == null) {acu = impFact.getACU();    }        assertEq("Expecting Same ACU",     acu, acu );        assertT( "Should be On Demand.",     impFact.isOnDemand() );    assertEq("Expected java.util.Map to be imported.",     "java.util", impFact.getImportPackage() );}    }    public void testImportSingle() throws Throwable {Set results =    collectFacts( net.sourceforge.pmd.rx.facts.ImportFact.class,  JAVA_TEST_IMPORT_SINGLE );assertEq("Expected one result.", 1, results.size() );Iterator singles = results.iterator();Object fact = singles.next();assertT( "Expected fact to be of ImportFact type.", fact instanceof ImportFact );ImportFact impFact = (ImportFact) fact;assertT( "Should not be listed as On Demand.", !impFact.isOnDemand() );assertEq("Expected java.util.Map to be imported.", "java.util.Map", impFact.getImportPackage() );    }    public void testClass() throws Throwable {Set results =    collectFacts( net.sourceforge.pmd.rx.facts.ClassFact.class,  JAVA_TEST_CLASS );assertEq( "Expected one result.",  1, results.size() );Iterator facts = results.iterator();Object fact = facts.next();assertT("Expected fact to be of ClassFact type.",fact instanceof ClassFact );ClassFact classFact = (ClassFact) fact;assertEq("Expected ClassName to be 'TestClass'", "TestClass", classFact.getClassName() );assertEq("Expected outer class to be 'null'", null, classFact.getOuterClass() );verifyClassFlags( classFact, false, false, false, false );    }    public void testClassPublic() throws Throwable {Set results =      collectFacts( net.sourceforge.pmd.rx.facts.ClassFact.class,  JAVA_TEST_CLASS_PUBLIC );assertEq( "Expected one result.",  1, results.size() );Iterator singles = results.iterator();Object fact = singles.next();assertT( "Expected fact to be of ClassFact type.", fact instanceof ClassFact );ClassFact classFact = (ClassFact) fact;assertEq("Expected ClassName to be 'TestClass'", "TestClass",  classFact.getClassName() );assertEq("Expected outer class to be 'null'", null, classFact.getOuterClass() );verifyClassFlags( classFact, true, false, false, false );    }    public void testClassAbstract() throws Throwable {Set results =      collectFacts( net.sourceforge.pmd.rx.facts.ClassFact.class,  JAVA_TEST_CLASS_ABSTRACT );assertEq( "Expected one result.",  1, results.size() );Iterator singles = results.iterator();Object fact = singles.next();assertT( "Expected fact to be of ClassFact type.", fact instanceof ClassFact );ClassFact classFact = (ClassFact) fact;assertEq("Expected ClassName to be 'TestClass'", "TestClass",  classFact.getClassName() );assertEq("Expected outer class to be 'null'", null, classFact.getOuterClass() );verifyClassFlags( classFact, false, true, false, false );    }        public void testClassInner() throws Throwable {  Set results =      collectFacts(net.sourceforge.pmd.rx.facts.ClassFact.class,   JAVA_TEST_CLASS_INNER );  assertEq("Expecting two results.",   2, results.size() );  Iterator facts = results.iterator();  ClassFact outer = null;  ClassFact inner = null;  while (facts.hasNext()) {      Object fact = facts.next();          assertT("Expected both facts to be ClassFact type.",      fact instanceof ClassFact );          ClassFact classFact = (ClassFact) fact;          if (classFact.getClassName().equals("Outer")) {  outer = classFact;      }          if (classFact.getClassName().equals("Inner")) {  inner = classFact;      }}    }    public void testClassAnon() throws Throwable {  Set results =      collectFacts(net.sourceforge.pmd.rx.facts.ClassFact.class,   JAVA_TEST_CLASS_ANON );  assertEq("Expecting two results.",   2, results.size() );  Iterator facts = results.iterator();  ClassFact named = null;  ClassFact anon = null;  while (facts.hasNext()) {      Object fact = facts.next();          assertT("Expected both facts to be ClassFact type.",      fact instanceof ClassFact );          ClassFact classFact = (ClassFact) fact;      if (classFact.getOuterClass() == null) {  named = classFact;      } else {  anon = classFact;      }  }  assertNotNull( "Expected to find Named class.", named );  assertNotNull( "Expected to find Anon class.", anon );  assertEq( "Expected both classes to have same ACU.",    named.getACU(), anon.getACU() );  assertEq( "Expected Outer Class of Anon to be Named.",    named, anon.getOuterClass() );    }        public void assertEq( String message,  Object expected,  Object result ) throws Throwable    {try {    assertEquals( message, expected, result );} catch (Throwable t) {    current.dump(testName + ": ");    throw t;}    }        public void assertEq( String message,  boolean expected,  boolean result ) throws Throwable    {try {    assertEquals( message, expected, result );} catch (Throwable t) {    current.dump(testName + ": ");    throw t;}    }    public void assertEq( String message,  int expected,  int result ) throws Throwable    {try {    assertEquals( message, expected, result );} catch (Throwable t) {    current.dump(testName + ": ");    throw t;}    }    public void assertT( String message, boolean cond ) throws Throwable    {try {    assertTrue( message, cond );} catch (Throwable t) {    current.dump(testName + ": ");    throw t;}    }    public Set collectFacts( Class clazz,     String javaCode )throws Throwable    {RuleBase rules = new RuleBase();FactCollector collector = new FactCollector( clazz );rules.addRule( collector );JavaParser parser =    new JavaParser( new StringReader( javaCode ));ASTCompilationUnit acu =    parser.CompilationUnit();current = acu;WorkingMemory memory = rules.createWorkingMemory();DroolsVisitor IUT = new DroolsVisitor( memory );IUT.visit( acu, null );return collector.getFacts();    }    public void verifyClassFlags( ClassFact classFact,  boolean bPublic,  boolean bAbstract,  boolean bFinal,  boolean bStrict ) throws Throwable    {assertEq("Public: ", bPublic, classFact.isPublic() );assertEq("Abstract: ", bAbstract, classFact.isAbstract() );assertEq("Final: ", bFinal, classFact.isFinal() );assertEq("Strict: ", bStrict, classFact.isStrict() );    }}
/* * User: tom * Date: Sep 5, 2002 * Time: 12:06:26 PM */package test.net.sourceforge.pmd.dcpd;import junit.framework.TestCase;import net.sourceforge.pmd.cpd.TokenSets;import net.sourceforge.pmd.cpd.Occurrences;import net.sourceforge.pmd.cpd.Tile;import net.sourceforge.pmd.dcpd.*;import java.util.ArrayList;import java.util.List;import java.util.Iterator;public class TileHarvesterTest extends TestCase {    public TileHarvesterTest(String name) {        super(name);    }    public void test1() throws Throwable {/*        TokenSets tokenSets = TileExpanderTest.createTokenSets();        MockJavaSpace space = new MockJavaSpace();        Job job = new Job("foo", new Integer(1));        Occurrences occ = new Occurrences(tokenSets);        // do the expansion from 1 to 2 tokens and write those expansions        // back to the mock space so TileHarvester can read them        int tilesSoFar=0;        List tilesToWrite = new ArrayList();        for (Iterator i = occ.getTiles(); i.hasNext();) {            Tile tile = (Tile)i.next();            TileWrapper tw = new TileWrapper(tile,                    TileExpanderTest.marshal(occ.getOccurrences(tile)),                    job.id,                    Batch.NOT_DONE,                    null,                    new Integer(tilesSoFar),                    null, null);            tilesToWrite.add(tw);            tilesSoFar++;        }        space.setTileWrappers(tilesToWrite);        TileExpander expander = new TileExpander(space, new TokenSetsWrapper(tokenSets, job.id));        expander.expandAvailableTiles();        space.setTileWrappers(space.getWrittenEntries());        // now the test        TileHarvester tileGatherer = new TileHarvester(space, job);        Occurrences newOcc = tileGatherer.harvest(occ.size());        assertEquals(2, newOcc.size());*/    }}
/* * User: tom * Date: Sep 5, 2002 * Time: 11:04:26 AM */package test.net.sourceforge.pmd.dcpd;import junit.framework.TestCase;import net.jini.space.JavaSpace;import net.jini.core.lease.Lease;import net.sourceforge.pmd.dcpd.*;import net.sourceforge.pmd.cpd.*;import java.io.StringReader;import java.util.Iterator;import java.util.List;import java.util.ArrayList;import java.util.Stack;public class TileExpanderTest extends TestCase {    public TileExpanderTest(String name) {        super(name);    }    public void test1() throws Throwable {/*        TokenSets tokenSets = TileExpanderTest.createTokenSets();        MockJavaSpace space = new MockJavaSpace();        Job job = new Job("foo", new Integer(1));        Occurrences occ = new Occurrences(tokenSets);        int tilesSoFar=0;        List tilesToWrite = new ArrayList();        for (Iterator i = occ.getTiles(); i.hasNext();) {            Tile tile = (Tile)i.next();            TileWrapper tw = new TileWrapper(tile,                    marshal(occ.getOccurrences(tile)),                    job.id,                    Batch.NOT_DONE,                    null,                    new Integer(tilesSoFar),                    null, null);            tilesToWrite.add(tw);            tilesSoFar++;        }        space.setTileWrappers(tilesToWrite);        TileExpander expander = new TileExpander(space, new TokenSetsWrapper(tokenSets, job.id));        expander.expandAvailableTiles();        List writtenEntries = space.getWrittenEntries();        assertEquals(7, writtenEntries.size());*/    }   public static List marshal(Iterator i) {        List list = new ArrayList();        while (i.hasNext()) {            list.add(i.next());        }        return list;    }    public static TokenSets createTokenSets() throws Throwable {        TokenSets tokenSets = new TokenSets();        TokenList tokenList1 = new TokenList("list1");        JavaTokensTokenizer tokenizer = new JavaTokensTokenizer();        tokenizer.tokenize(tokenList1, new StringReader("public class Foo {}"));        tokenSets.add(tokenList1);        TokenList tokenList2 = new TokenList("list2");        tokenizer.tokenize(tokenList2, new StringReader("public class Bar {}"));        tokenSets.add(tokenList2);        return tokenSets;    }}
/* * User: tom * Date: Sep 6, 2002 * Time: 4:15:46 PM */package test.net.sourceforge.pmd.dcpd;import junit.framework.TestCase;import net.sourceforge.pmd.cpd.TokenSets;import net.sourceforge.pmd.cpd.Occurrences;import net.sourceforge.pmd.dcpd.Job;import net.sourceforge.pmd.dcpd.TilePlanter;public class TilePlanterTest extends TestCase {    public TilePlanterTest(String name) {        super(name);    }    public void test1() throws Throwable {/*        TokenSets tokenSets = TileExpanderTest.createTokenSets();        MockJavaSpace space = new MockJavaSpace();        Job job = new Job("foo", new Integer(1));        Occurrences occ = new Occurrences(tokenSets);        TilePlanter scatterer = new TilePlanter(space, job);        scatterer.plant(occ);        assertEquals(6, space.getWrittenEntries().size());*/    }}
package net.sourceforge.pmd.eclipse.ui;import net.sourceforge.pmd.eclipse.plugin.UISettings;import org.eclipse.swt.SWT;import org.eclipse.swt.graphics.RGB;import org.eclipse.swt.layout.GridData;import org.eclipse.swt.layout.GridLayout;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;public class ShapeSetCanvasTest {public static void main(String [] args) {final Display display = new Display();final Shell shell = new Shell(display);shell.setLayout (new GridLayout());ShapePicker<Shape> ssc = new ShapePicker<Shape>(shell, SWT.None, 36);ssc.setLayoutData( new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));ssc.setSize(770, 55);ssc.setShapeMap(UISettings.shapeSet(new RGB(255,255,255), 15));ssc.setItems( UISettings.allShapes() );shell.pack();shell.setBounds(10, 10, 780, 200);shell.open();while (!shell.isDisposed()) {if (!display.readAndDispatch()) display.sleep();}display.dispose();}}
/* * Created on 22 juin 2006 * * Copyright (c) 2006, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: * *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse.core.rulesets.impl;import java.io.ByteArrayOutputStream;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.Collection;import java.util.List;import junit.framework.TestCase;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleSetFactory;import net.sourceforge.pmd.RuleSetNotFoundException;import net.sourceforge.pmd.eclipse.core.PMDCoreException;import net.sourceforge.pmd.eclipse.core.rulesets.IRuleSetsManager;import net.sourceforge.pmd.eclipse.core.rulesets.vo.RuleSet;import net.sourceforge.pmd.eclipse.core.rulesets.vo.RuleSets;/** * RuleSetsManager unit tests * * @author Herlin * */public class RuleSetsManagerImplTest extends TestCase {    /**     * Test the valueOf method in its expected usage.     *     * @throws RuleSetNotFoundException     */    public void testValueOf1() throws PMDCoreException, RuleSetNotFoundException {        IRuleSetsManager rsm = new RuleSetsManagerImpl();        RuleSet ruleSet = rsm.valueOf(new String[] { "rulesets/basic.xml" });        Collection<Rule> pmdRules = ruleSet.getPmdRuleSet().getRules();        Collection<Rule> basicRules = new RuleSetFactory().createRuleSet("rulesets/basic.xml").getRules();        // dump("PMD Rules", pmdRules);        // dump("Basic Rules", basicRules);        assertTrue("All the basic rules have not been loaded !", pmdRules.containsAll(basicRules));        assertTrue("All the loaded rules are not in the basic rules!", basicRules.containsAll(pmdRules));    }    /**     * Passing a null array to valueOf is not allowed     *     * @throws RuleSetNotFoundException     *     */    public void testValueOf2() throws PMDCoreException {        try {            IRuleSetsManager rsm = new RuleSetsManagerImpl();            RuleSet ruleSet = rsm.valueOf(null);            fail("Getting a rule set from a null array is not allowed");        } catch (IllegalArgumentException e) {            // Success        }    }    /**     * Passing an empty array to valueOf is not allowed     *     * @throws RuleSetNotFoundException     *     */    public void testValueOf3() throws PMDCoreException {        try {            IRuleSetsManager rsm = new RuleSetsManagerImpl();            RuleSet ruleSet = rsm.valueOf(new String[] {});            fail("Getting a rule set from an empty array is not allowed");        } catch (IllegalArgumentException e) {            // Success        }    }    /**     * Basically test the writeToXml operation.     *     */    public void testWriteToXml() throws PMDCoreException, UnsupportedEncodingException, IOException {        ByteArrayOutputStream out = null;        InputStream in = new FileInputStream("./test/testRuleSetsManager.rulesets");        if (in == null) {            throw new IllegalStateException("The test file testRuleSetsManager.rulesets cannot be found. The test cannot be performed.");        }        byte[] bytes = new byte[in.available()];        in.read(bytes);        String reference = new String(bytes, "UTF-8");        in.close();        System.out.println("--reference");        System.out.println(reference);        try {            IRuleSetsManager rsm = new RuleSetsManagerImpl();            RuleSet ruleSet = rsm.valueOf(new String[] { "rulesets/basic.xml" });            ruleSet.setName("basic");            ruleSet.setLanguage(RuleSet.LANGUAGE_JAVA);            List<RuleSet> ruleSetsList = new ArrayList<RuleSet>();            ruleSetsList.add(ruleSet);            RuleSets ruleSets = new RuleSets();            ruleSets.setRuleSets(ruleSetsList);            ruleSets.setDefaultRuleSet(ruleSet);            out = new ByteArrayOutputStream();            rsm.writeToXml(ruleSets, out);            String result = new String(out.toByteArray(), "UTF-8");            System.out.println("--result");            System.out.println(result);            assertEquals("The outpout rulesets is not the expected one", reference, result);        } finally {            if (out != null) {                out.close();            }        }    }    /**     * Dump a collection of rules     *     * @param message     * @param rules     */    private void dump(String message, Collection<Rule> rules) {        System.out.println("Dump " + message);        for (Rule rule : rules) {            System.out.println(rule.getName());        }        System.out.println();    }}
/* * Created on 18 juin 2006 * * Copyright (c) 2006, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: *  *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse.core.rulesets.vo;import java.util.HashSet;import java.util.Set;import junit.framework.TestCase;/** * Unit tests for Properties object *  * @author Herlin * */public class PropertiesTest extends TestCase {        /**     * A new properties object must have its set of properties not null and empty     *     */    public void testDefaults() {        Properties p = new Properties();        assertNotNull("Properties set cannot be null", p.getProperties());        assertEquals("Properties set should be empty", 0, p.getProperties().size());    }    /**     * Setting any set as properties is allowed for now !     *     */    public void testSetProperties1() {        try {            Properties p = new Properties();            Set set = new HashSet();            set.add("foo");            p.setProperties(set);        } catch (IllegalArgumentException e) {            fail("Setting any set as properties is allowed for now!");        }    }        /**     * Setting a null set as properties is illegal     *     */    public void testSetProperties2() {        try {            Properties p = new Properties();            p.setProperties(null);            fail("Setting a null set as properties is illegal");        } catch (IllegalArgumentException e) {            // success!        }    }        /**     * Obviously an instance is equals to itself     *     */    public void testEquals1() {        Properties p = new Properties();        assertEquals("An instance should be equals to itself", p, p);    }        /**     * 2 different properties instances are equals if their set are the same      */    public void testEquals2() {        Properties p1 = new Properties();        Set set = new HashSet();        set.add("foo");        p1.setProperties(set);        Properties p2 = new Properties();        p2.setProperties(set);                assertEquals("2 different properties instances are equals if their set are the same", p1, p2);    }    /**     * 2 different properties instances are equals if their set are the same.     * same as previous one but with a legal properties set.     */    public void testEquals3() {        Property prop = new Property();        prop.setName("p1");        prop.setValue("value1");        Set set = new HashSet();        set.add(prop);        Properties p1 = new Properties();        p1.setProperties(set);        Properties p2 = new Properties();        p2.setProperties(set);                assertEquals("2 different properties instances are equals if their set are the same", p1, p2);    }    /**     * 2 different properties instances are equals if their set are the same.     * same as previous one but with 2 differents sets     */    public void testEquals4() {        Property prop = new Property();        prop.setName("p1");        prop.setValue("value1");        Set set1 = new HashSet();        set1.add(prop);        Set set2 = new HashSet();        set2.add(prop);        Properties p1 = new Properties();        p1.setProperties(set1);        Properties p2 = new Properties();        p2.setProperties(set2);                assertEquals("2 different properties instances are equals if their set are the same", p1, p2);    }    /**     * 2 different properties instances are equals if their set are the same.     * same as previous one but with 2 differents instances of property objets.     */    public void testEquals5() {        Property prop1 = new Property();        prop1.setName("p1");        prop1.setValue("value1");        Property prop2 = new Property();        prop2.setName("p1");        prop2.setValue("value1");        Set set1 = new HashSet();        set1.add(prop1);        Set set2 = new HashSet();        set2.add(prop2);        Properties p1 = new Properties();        p1.setProperties(set1);        Properties p2 = new Properties();        p2.setProperties(set2);                assertEquals("2 different properties instances are equals if their set are the same", p1, p2);    }    /**     * 2 different properties instances are different if their set are the different     */    public void testEquals6() {        Property prop1 = new Property();        prop1.setName("p1");        prop1.setValue("value1");        Property prop2 = new Property();        prop2.setName("p2");        prop2.setValue("value2");        Set set1 = new HashSet();        set1.add(prop1);        Set set2 = new HashSet();        set1.add(prop2);        Properties p1 = new Properties();        p1.setProperties(set1);        Properties p2 = new Properties();        p2.setProperties(set2);                assertFalse("2 different properties instances are different if their set are the different", p1.equals(p2));    }        /**     * A properties Object cannot be equals to null     *     */    public void testEquals7() {        Property prop1 = new Property();        prop1.setName("p1");        prop1.setValue("value1");        Set set1 = new HashSet();        set1.add(prop1);        Properties p1 = new Properties();        p1.setProperties(set1);                assertNotNull("A properties object cannot be equals to null", p1);    }        /**     * A properties Object cannot be equals to any other objects     *     */    public void testEquals8() {        Property prop1 = new Property();        prop1.setName("p1");        prop1.setValue("value1");        Set set1 = new HashSet();        set1.add(prop1);        Properties p1 = new Properties();        p1.setProperties(set1);                assertFalse("A properties Object cannot be equals to any other objects", p1.equals(prop1));        assertFalse("A properties Object cannot be equals to any other objects", p1.equals(set1));    }    /**     * 2 equal properties must have the same hashCode     *     */    public void testHashCode1() {        Property prop1 = new Property();        prop1.setName("p1");        prop1.setValue("value1");        Property prop2 = new Property();        prop2.setName("p1");        prop2.setValue("value1");        Set set1 = new HashSet();        set1.add(prop1);        Set set2 = new HashSet();        set2.add(prop2);        Properties p1 = new Properties();        p1.setProperties(set1);        Properties p2 = new Properties();        p2.setProperties(set2);                assertEquals("2 equal properties must have the same hashCode", p1.hashCode(), p2.hashCode());    }    /**     * 2 different properties must have the different hashCode     *     */    public void testHashCode2() {        Property prop1 = new Property();        prop1.setName("p1");        prop1.setValue("value1");        Property prop2 = new Property();        prop2.setName("p2");        prop2.setValue("value2");        Set set1 = new HashSet();        set1.add(prop1);        Set set2 = new HashSet();        set2.add(prop2);        Properties p1 = new Properties();        p1.setProperties(set1);        Properties p2 = new Properties();        p2.setProperties(set2);                assertFalse("2 different properties must have the different hashCode", p1.hashCode() == p2.hashCode());    }}
/* * Created on 17 juin 2006 * * Copyright (c) 2006, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: *  *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse.core.rulesets.vo;import junit.framework.TestCase;/** * Unit tests of class Property *  * @author Herlin *  */public class PropertyTest extends TestCase {    /**     * A new property objet has its name and value not null and assigned to an     * empty string.     *      */    public void testDefaults() {        Property p = new Property();        assertNotNull("Name must not be null", p.getName());        assertTrue("Name must be an empty string", p.getName().length() == 0);        assertNotNull("Value must not be null", p.getValue());        assertTrue("Value must be an empty string", p.getValue().length() == 0);    }    /**     * Assigning any string to name is legal.     *      */    public void testSetName1() {        Property p = new Property();        p.setName("any string");        assertEquals("Name can be assigned any string", "any string", p.getName());    }    /**     * Assigning null to name is illegal.     *      */    public void testSetName2() {        try {            Property p = new Property();            p.setName(null);            fail("Assigning null to name is illegal");        } catch (IllegalArgumentException e) {            // success        }    }    /**     * Assigning any string to value is legal.     *      */    public void testSetValue1() {        Property p = new Property();        p.setValue("any string");        assertEquals("Value can be assigned any string", "any string", p.getValue());    }    /**     * Assigning null to Value is illegal.     *      */    public void testSetValue2() {        try {            Property p = new Property();            p.setValue(null);            fail("Assigning null to value is illegal");        } catch (IllegalArgumentException e) {            // success        }    }    /**     * 2 properties are equals if their names and value are equal     *      */    public void testEquals1() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");        Property p2 = new Property();        p2.setName("p1");        p2.setValue("value1");                assertEquals("2 properties must be equals if their names and values are equals", p1, p2);    }    /**     * 2 properties are diffrent if their names are different.     *      */    public void testEquals2() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");        Property p2 = new Property();        p2.setName("p2");        p2.setValue("value1");                assertFalse("2 properties must be different if their names are different", p1.equals(p2));    }    /**     * 2 properties are diffrent if their value are different.     *      */    public void testEquals3() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");        Property p2 = new Property();        p2.setName("p1");        p2.setValue("value2");                assertFalse("2 properties must be different if their values are different", p1.equals(p2));    }        /**     * A property is always different than null     *     */    public void testEquals4() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");        assertNotNull("A property cannot be equals to null", p1);    }        /**     * Any property objet is always different that any other objets     *     */    public void testEquals5() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");        assertFalse("Property object must be different that any other object", p1.equals("p1"));    }        /**     * Obviously a property object is equals to itself     *     */    public void testEquals6() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");        assertEquals("A property object is equals to itself", p1, p1);    }        /**     * 2 equal properties must have the same hashCode     *     */    public void testHashCode1() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");        Property p2 = new Property();        p2.setName("p1");        p2.setValue("value1");                assertTrue("2 equal properties must have the same hashCode", p1.hashCode() == p2.hashCode());    }    /**     * 2 different properties must have the different hashCodes.     *     */    public void testHashCode2() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");        Property p2 = new Property();        p2.setName("p2");        p2.setValue("value1");                assertFalse("2 different properties should have different hashCodes", p1.hashCode() == p2.hashCode());    }    /**     * 2 different properties must have the different hashCodes.     *     */    public void testHashCode3() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");        Property p2 = new Property();        p2.setName("p1");        p2.setValue("value2");                assertFalse("2 different properties should have different hashCodes", p1.hashCode() == p2.hashCode());    }    /**     * 2 different properties must have the different hashCodes.     *     */    public void testHashCode4() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");        Property p2 = new Property();        p2.setName("p2");        p2.setValue("value2");                assertFalse("2 different properties should have different hashCodes", p1.hashCode() == p2.hashCode());    }}
/* * Created on 22 juin 2006 * * Copyright (c) 2006, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: * *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse.core.rulesets.vo;import java.util.Iterator;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSetFactory;import net.sourceforge.pmd.RuleSetNotFoundException;/** * * @author Herlin * */public class TestManager {    private static RuleSet basicRuleSet;    private static Rule[] rules;    public static Rule getRule(int i) throws RuleSetNotFoundException {        if (rules == null) {            getRuleSet();        }        return rules[i];    }    public static RuleSet getRuleSet() throws RuleSetNotFoundException {        if (basicRuleSet == null) {            basicRuleSet = new RuleSetFactory().createRuleSet("rulesets/basic.xml");            Iterator<Rule> i = getRuleSet().getRules().iterator();            rules = new Rule[4];            for (int j = 0; j < 4; j++) {                rules[j] = i.next();            }        }        return basicRuleSet;    }}
/* * Created on 17 juin 2006 * * Copyright (c) 2006, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: *  *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse.core.rulesets.vo;import junit.framework.TestCase;/** * Unit tests of Priority object. *  * @author Herlin * */public class PriorityTest extends TestCase {        /**     * A default constructed priority is set to level 3     *     */    public void testDefaultPriority() {        assertEquals("Default priority is not set to 3", Priority.LEVEL3, new Priority());    }    /**     * It is legal to construct a priority object and to assign a value.     * This test implicitluy test the basic equality also.     * All in one test case!     */    public void testSetPriority() {        Priority p = new Priority();        p.setPriorityValue(Priority.LEVEL1_LITTERAL);        assertEquals("Constructing a priority level 1 has failed!", Priority.LEVEL1, p);        p.setPriorityValue(Priority.LEVEL2_LITTERAL);        assertEquals("Constructing a priority level 2 has failed!", Priority.LEVEL2, p);        p.setPriorityValue(Priority.LEVEL3_LITTERAL);        assertEquals("Constructing a priority level 3 has failed!", Priority.LEVEL3, p);        p.setPriorityValue(Priority.LEVEL4_LITTERAL);        assertEquals("Constructing a priority level 4 has failed!", Priority.LEVEL4, p);        p.setPriorityValue(Priority.LEVEL5_LITTERAL);        assertEquals("Constructing a priority level 5 has failed!", Priority.LEVEL5, p);    }        /**     * Test an illegal value that is 0     *     */    public void testSetPriorityIllegal1() {        try {            Priority p = new Priority();            p.setPriorityValue(0);            fail("Setting a priority level to 0 should raise an IllegalArgumentException");        } catch (IllegalArgumentException e) {            // this is correct        }    }        /**     * Test an illegal value that is negative     *     */    public void testSetPriorityIllegal2() {        try {            Priority p = new Priority();            p.setPriorityValue(-15);            fail("Setting a priority level to a negative number should raise an IllegalArgumentException");        } catch (IllegalArgumentException e) {            // this is correct        }    }        /**     * Test an illegal value that is too high     *     */    public void testSetPriorityIllegal3() {        try {            Priority p = new Priority();            p.setPriorityValue(6);            fail("Setting a priority level to a high value should raise an IllegalArgumentException");        } catch (IllegalArgumentException e) {            // this is correct        }    }        /**     * 2 different instances assigned different levels are not equals     *     */    public void testEquals1() {        Priority p = new Priority();        p.setPriorityValue(1);                assertFalse("2 priorities with different levels (1:2) are not equals", Priority.LEVEL2.equals(p));        assertFalse("2 priorities with different levels (1:3) are not equals", Priority.LEVEL3.equals(p));        assertFalse("2 priorities with different levels (1:4) are not equals", Priority.LEVEL4.equals(p));        assertFalse("2 priorities with different levels (1:5) are not equals", Priority.LEVEL5.equals(p));    }        /**     * Any priority object is always not equal to null     *     */    public void testEquals2() {        assertNotNull("Priority object (1) is not equal to null", Priority.LEVEL1);        assertNotNull("Priority object (2) is not equal to null", Priority.LEVEL2);        assertNotNull("Priority object (3) is not equal to null", Priority.LEVEL3);        assertNotNull("Priority object (4) is not equal to null", Priority.LEVEL4);        assertNotNull("Priority object (5) is not equal to null", Priority.LEVEL5);    }        /**     * Any priority objet is always different that any other objets     *     */    public void testEquals3() {        assertFalse("Priority object must be different that any other object", Priority.LEVEL1.equals(new Integer(1)));    }        public void testEquals4() {        Priority p1 = new Priority();        assertEquals("A priority objetc must be equals to itself", p1, p1);    }        /**     * 2 equals objets have the same hashcode     *     */    public void testHashCode1() {        Priority p = new Priority();        assertTrue("2 equal priority objects must have the same hashcode value", Priority.LEVEL3.hashCode() == p.hashCode());    }        /**     * 2 different priority objects must have different hashcode values     *     */    public void testHashCode2() {        assertFalse("2 different priority objects must have different hashcode values", Priority.LEVEL1.hashCode() == Priority.LEVEL2.hashCode());    }}
/* * Created on 18 juin 2006 * * Copyright (c) 2006, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: *  *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse.core.rulesets.vo;import junit.framework.TestCase;import net.sourceforge.pmd.RuleSetNotFoundException;/** * Unit tests for the RuleSet class *  * @author Herlin *  */public class RuleSetTest extends TestCase {    /**     * Test the default attributes of a rule set     *      */    public void testDefaults() {        RuleSet rs = new RuleSet();        assertNotNull("Name should not be null", rs.getName());        assertNotNull("Description should not be null", rs.getDescription());        assertNotNull("Rules should not be null", rs.getRules());        assertNotNull("Language should not be null", rs.getLanguage());        assertEquals("Name should be empty", 0, rs.getName().length());        assertEquals("Description should be empty", 0, rs.getDescription().length());        assertEquals("Rules collecction should be empty", 0, rs.getRules().size());        assertEquals("Default language should be set to Java", RuleSet.LANGUAGE_JAVA, rs.getLanguage());    }    /**     * Setting any name is legal     *      */    public void testSetName1() {        try {            RuleSet rs = new RuleSet();            rs.setName("any name");        } catch (IllegalArgumentException e) {            fail("setting name to any name is legal");        }    }    /**     * Setting name to null is illegal     *      */    public void testSetName2() {        try {            RuleSet rs = new RuleSet();            rs.setName(null);            fail("setting name to null is illegal");        } catch (IllegalArgumentException e) {            // success        }    }    /**     * Setting name to empty string is illegal     *      */    public void testSetName3() {        try {            RuleSet rs = new RuleSet();            rs.setName("");            fail("setting name to empty string is illegal");        } catch (IllegalArgumentException e) {            // success        }    }    /**     * Setting name to empty string is illegal     *      */    public void testSetName4() {        try {            RuleSet rs = new RuleSet();            rs.setName(" \t\n");            fail("setting name to empty string is illegal");        } catch (IllegalArgumentException e) {            // success        }    }    /**     * Setting any description is legal     *      */    public void testSetDescription1() {        try {            RuleSet rs = new RuleSet();            rs.setDescription("any description");        } catch (IllegalArgumentException e) {            fail("setting description to any string is legal");        }    }    /**     * Setting description to null is illegal     *      */    public void testSetDescription2() {        try {            RuleSet rs = new RuleSet();            rs.setDescription(null);            fail("setting description to null is illegal");        } catch (IllegalArgumentException e) {            // success        }    }    /**     * Setting Description to empty string is legal     *      */    public void testSetDescription3() {        try {            RuleSet rs = new RuleSet();            rs.setDescription("");        } catch (IllegalArgumentException e) {            fail("setting description to empty string is legal");        }    }    /**     * Setting Description to empty string is legal     *      */    public void testSetDescription4() {        try {            RuleSet rs = new RuleSet();            rs.setDescription(" \t\n");            assertEquals("The string should not be modified", " \t\n", rs.getDescription());        } catch (IllegalArgumentException e) {            fail("setting description to empty string is legal");        }    }    /**     * Language could be assigned the JAVA value     *      */    public void testSetLanguage1() {        try {            RuleSet rs = new RuleSet();            rs.setLanguage("JAVA");        } catch (IllegalArgumentException e) {            fail("setting language to JAVA is legal");        }    }    /**     * Language could be assigned the JSP value     *      */    public void testSetLanguage2() {        try {            RuleSet rs = new RuleSet();            rs.setLanguage("JSP");        } catch (IllegalArgumentException e) {            fail("setting language to JSP is legal");        }    }    /**     * Setting language to null is illegal     *      */    public void testSetLanguage3() {        try {            RuleSet rs = new RuleSet();            rs.setLanguage(null);            fail("setting language to null is illegal");        } catch (IllegalArgumentException e) {            // success        }    }    /**     * Setting language to empty string is illegal     *      */    public void testSetLanguage4() {        try {            RuleSet rs = new RuleSet();            rs.setLanguage("");            fail("setting language to empty string is illegal");        } catch (IllegalArgumentException e) {            // success        }    }    /**     * Setting language to empty string is illegal     *      */    public void testSetLanguage5() {        try {            RuleSet rs = new RuleSet();            rs.setLanguage(" \t\n");            fail("setting language to empty string is illegal");        } catch (IllegalArgumentException e) {            // success        }    }    /**     * Setting language to any string is illegal     *      */    public void testSetLanguage6() {        try {            RuleSet rs = new RuleSet();            rs.setLanguage("any string");            fail("setting language to any string is illegal");        } catch (IllegalArgumentException e) {            // success        }    }    /**     * Adding a rule.     *      * @throws RuleSetNotFoundException     *      */    public void testAddRule1() throws RuleSetNotFoundException {        try {            RuleSet rs = new RuleSet();            Rule rule = new Rule();            rule.setPmdRule(TestManager.getRule(0));            rs.addRule(rule);        } catch (IllegalArgumentException e) {            fail("adding any rule object is legal !");        }    }    /**     * Adding a null rule is illegal.     *      */    public void testAddRule2() {        try {            RuleSet rs = new RuleSet();            rs.addRule(null);            fail("Adding a null rule is illegal !");        } catch (IllegalArgumentException e) {            // success        }    }    /**     * An instance of a rule set is equals to itself     *      */    public void testEquals1() {        RuleSet rs = new RuleSet();        rs.setName("default");        assertEquals("A ruleset is equal to itself", rs, rs);    }    /**     * A rule set is never equal to null     *      */    public void testEquals2() {        RuleSet rs = new RuleSet();        rs.setName("default");        assertNotNull("A ruleset is never equal to null", rs);    }    /**     * RuleSets are equal if they have the same name, language and rules     * collection whatever the description.     *      * @throws RuleSetNotFoundException     *      */    public void testEquals3() throws RuleSetNotFoundException {        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setPmdRule(TestManager.getRule(0));        Rule r2 = new Rule();        r2.setRef("ref to another rule");        r2.setPmdRule(TestManager.getRule(1));        Rule r3 = new Rule();        r3.setRef("ref to a rule");        r3.setPmdRule(TestManager.getRule(2));        Rule r4 = new Rule();        r4.setRef("ref to another rule");        r4.setPmdRule(TestManager.getRule(3));        RuleSet rs1 = new RuleSet();        rs1.setName("default");        rs1.setLanguage(RuleSet.LANGUAGE_JSP);        rs1.addRule(r1);        rs1.addRule(r2);        RuleSet rs2 = new RuleSet();        rs2.setName("default");        rs2.setLanguage(RuleSet.LANGUAGE_JSP);        rs2.addRule(r3);        rs2.addRule(r4);        rs2.setDescription("Description does not make the difference");        assertEquals("These rule sets should be equals", rs1, rs2);    }    /**     * Rule sets with different names are different     *      * @throws RuleSetNotFoundException     *      */    public void testEquals4() throws RuleSetNotFoundException {        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setPmdRule(TestManager.getRule(0));        Rule r2 = new Rule();        r2.setRef("ref to another rule");        r2.setPmdRule(TestManager.getRule(1));        Rule r3 = new Rule();        r3.setRef("ref to a rule");        r3.setPmdRule(TestManager.getRule(2));        Rule r4 = new Rule();        r4.setRef("ref to another rule");        r4.setPmdRule(TestManager.getRule(3));        RuleSet rs1 = new RuleSet();        rs1.setName("default");        rs1.setLanguage(RuleSet.LANGUAGE_JSP);        rs1.addRule(r1);        rs1.addRule(r2);        RuleSet rs2 = new RuleSet();        rs2.setName("custom");        rs2.setLanguage(RuleSet.LANGUAGE_JSP);        rs2.addRule(r3);        rs2.addRule(r4);        rs2.setDescription("Description does not make the difference");        assertFalse("Rule sets with different names are different", rs1.equals(rs2));    }    /**     * Rule sets with different languages are different     *      * @throws RuleSetNotFoundException     *      */    public void testEquals5() throws RuleSetNotFoundException {        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setPmdRule(TestManager.getRule(0));        Rule r2 = new Rule();        r2.setRef("ref to another rule");        r2.setPmdRule(TestManager.getRule(1));        Rule r3 = new Rule();        r3.setRef("ref to a rule");        r3.setPmdRule(TestManager.getRule(2));        Rule r4 = new Rule();        r4.setRef("ref to another rule");        r4.setPmdRule(TestManager.getRule(3));        RuleSet rs1 = new RuleSet();        rs1.setName("default");        rs1.setLanguage(RuleSet.LANGUAGE_JSP);        rs1.addRule(r1);        rs1.addRule(r2);        RuleSet rs2 = new RuleSet();        rs2.setName("default");        rs2.setLanguage(RuleSet.LANGUAGE_JAVA);        rs2.addRule(r3);        rs2.addRule(r4);        rs2.setDescription("Description does not make the difference");        assertFalse("Rule sets with different languages are different", rs1.equals(rs2));    }    /**     * Rule sets with different rules collection are different     *      * @throws RuleSetNotFoundException     *      */    public void testEquals7() throws RuleSetNotFoundException {        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setPmdRule(TestManager.getRule(0));        Rule r2 = new Rule();        r2.setRef("ref to another rule");        r2.setPmdRule(TestManager.getRule(1));        Rule r3 = new Rule();        r3.setRef("ref to a rule");        r3.setPmdRule(TestManager.getRule(2));        Rule r4 = new Rule();        r4.setRef("ref to yet another rule");        r4.setPmdRule(TestManager.getRule(3));        RuleSet rs1 = new RuleSet();        rs1.setName("default");        rs1.setLanguage(RuleSet.LANGUAGE_JSP);        rs1.addRule(r1);        rs1.addRule(r2);        RuleSet rs2 = new RuleSet();        rs2.setName("default");        rs2.setLanguage(RuleSet.LANGUAGE_JSP);        rs2.addRule(r3);        rs2.addRule(r4);        rs2.setDescription("Description does not make the difference");        assertFalse("Rule sets with different rules collections are different", rs1.equals(rs2));    }    /**     * Equal rule sets must have the same hash code     *      * @throws RuleSetNotFoundException     *      */    public void testHashCode1() throws RuleSetNotFoundException {        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setPmdRule(TestManager.getRule(0));        Rule r2 = new Rule();        r2.setRef("ref to another rule");        r2.setPmdRule(TestManager.getRule(1));        Rule r3 = new Rule();        r3.setRef("ref to a rule");        r3.setPmdRule(TestManager.getRule(2));        Rule r4 = new Rule();        r4.setRef("ref to another rule");        r4.setPmdRule(TestManager.getRule(3));        RuleSet rs1 = new RuleSet();        rs1.setName("default");        rs1.setLanguage(RuleSet.LANGUAGE_JSP);        rs1.addRule(r1);        rs1.addRule(r2);        RuleSet rs2 = new RuleSet();        rs2.setName("default");        rs2.setLanguage(RuleSet.LANGUAGE_JSP);        rs2.addRule(r3);        rs2.addRule(r4);        rs2.setDescription("Description does not make the difference");        assertEquals("Equal rule sets must have the same hash code", rs1.hashCode(), rs2.hashCode());    }    /**     * Different rule sets should have different hash codes     *      * @throws RuleSetNotFoundException     *      */    public void testHashCode2() throws RuleSetNotFoundException {        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setPmdRule(TestManager.getRule(0));        Rule r2 = new Rule();        r2.setRef("ref to another rule");        r2.setPmdRule(TestManager.getRule(1));        Rule r3 = new Rule();        r3.setRef("ref to a rule");        r3.setPmdRule(TestManager.getRule(2));        Rule r4 = new Rule();        r4.setRef("ref to another rule");        r4.setPmdRule(TestManager.getRule(3));        RuleSet rs1 = new RuleSet();        rs1.setName("default");        rs1.setLanguage(RuleSet.LANGUAGE_JSP);        rs1.addRule(r1);        rs1.addRule(r2);        RuleSet rs2 = new RuleSet();        rs2.setName("custom");        rs2.setLanguage(RuleSet.LANGUAGE_JSP);        rs2.addRule(r3);        rs2.addRule(r4);        rs2.setDescription("Description does not make the difference");        assertFalse("Different rule sets should have different hash codes", rs1.hashCode() == rs2.hashCode());    }    /**     * Different rule sets should have different hash codes     *      * @throws RuleSetNotFoundException     *      */    public void testHashCode3() throws RuleSetNotFoundException {        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setPmdRule(TestManager.getRule(0));        Rule r2 = new Rule();        r2.setRef("ref to another rule");        r2.setPmdRule(TestManager.getRule(1));        Rule r3 = new Rule();        r3.setRef("ref to a rule");        r3.setPmdRule(TestManager.getRule(2));        Rule r4 = new Rule();        r4.setRef("ref to another rule");        r4.setPmdRule(TestManager.getRule(3));        RuleSet rs1 = new RuleSet();        rs1.setName("default");        rs1.setLanguage(RuleSet.LANGUAGE_JSP);        rs1.addRule(r1);        rs1.addRule(r2);        RuleSet rs2 = new RuleSet();        rs2.setName("default");        rs2.setLanguage(RuleSet.LANGUAGE_JAVA);        rs2.addRule(r3);        rs2.addRule(r4);        rs2.setDescription("Description does not make the difference");        assertFalse("Different rule sets should have different hash codes", rs1.hashCode() == rs2.hashCode());    }    /**     * Different rule sets should have different hash codes     *      * @throws RuleSetNotFoundException     *      */    public void testHashCode4() throws RuleSetNotFoundException {        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setPmdRule(TestManager.getRule(0));        Rule r2 = new Rule();        r2.setRef("ref to another rule");        r2.setPmdRule(TestManager.getRule(1));        Rule r3 = new Rule();        r3.setRef("ref to a rule");        r3.setPmdRule(TestManager.getRule(2));        Rule r4 = new Rule();        r4.setRef("ref to yet another rule");        r4.setPmdRule(TestManager.getRule(3));        RuleSet rs1 = new RuleSet();        rs1.setName("default");        rs1.setLanguage(RuleSet.LANGUAGE_JSP);        rs1.addRule(r1);        rs1.addRule(r2);        RuleSet rs2 = new RuleSet();        rs2.setName("default");        rs2.setLanguage(RuleSet.LANGUAGE_JSP);        rs2.addRule(r3);        rs2.addRule(r4);        rs2.setDescription("Description does not make the difference");        assertFalse("Different rule sets should have different hash codes", rs1.hashCode() == rs2.hashCode());    }    /**     * The PMD Rule Set should contain the we have added     *      * @throws RuleSetNotFoundException     *      */    public void testGetPmdRuleSet() throws RuleSetNotFoundException {        Rule rule = new Rule();        rule.setPmdRule(TestManager.getRule(0));        RuleSet ruleSet = new RuleSet();        ruleSet.addRule(rule);        assertNotNull("The PMD Rule Set should not be null", ruleSet.getPmdRuleSet());        assertTrue("The added rule set should be present in the PMD rule set", ruleSet.getPmdRuleSet().getRules().contains(                TestManager.getRule(0)));    }}
/* * Created on 20 juin 2006 * * Copyright (c) 2006, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: *  *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse.core.rulesets.vo;import java.util.ArrayList;import java.util.List;import net.sourceforge.pmd.RuleSetNotFoundException;import junit.framework.TestCase;/** * Unit tests for RuleSets class *  * @author Herlin *  */public class RuleSetsTest extends TestCase {    /**     * Test the defaults of a RuleSets object     *      */    public void testDefaults() {        RuleSets rs = new RuleSets();        assertNull("the default rule set should be null", rs.getDefaultRuleSet());        assertNotNull("the rule sets list should not be null", rs.getRuleSets());        assertEquals("The rule sets list should be empty", 0, rs.getRuleSets().size());    }        /**     * Setting a null rule sets list is not allowed     *     */    public void testSetRuleSets1() {        try {            RuleSets rs = new RuleSets();            rs.setRuleSets(null);            fail("Setting a null rule sets is illegal");        } catch (IllegalArgumentException e) {            // success        }    }        /**     * Setting an empty rule sets list is not allowed     *     */    public void testSetRuleSets2() {        try {            RuleSets rs = new RuleSets();            rs.setRuleSets(new ArrayList());            fail("Setting an empty rule sets is illegal");        } catch (IllegalArgumentException e) {            // success        }    }        /**     * Setting any non empty list is OK.     * We do not validate the element type for now.     *     */    public void testSetRuleSets3() {        List l = new ArrayList();        l.add("a ruleset");        RuleSets rs = new RuleSets();        rs.setRuleSets(l);                assertSame("The rule set list has not been set", l, rs.getRuleSets());    }    /**     * Setting a null default rule set is illegal     *      */    public void testSetDefaultRuleSet1() {        try {            RuleSets rs = new RuleSets();            rs.setDefaultRuleSet(null);            fail("setting a default rule set to null should be illegal");        } catch (IllegalArgumentException e) {            // success        }    }    /**     * A default rule set should belong to the rule sets list.     * @throws RuleSetNotFoundException      *      */    public void testSetDefaultRuleSet2() throws RuleSetNotFoundException {        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setPmdRule(TestManager.getRule(0));        Rule r2 = new Rule();        r2.setRef("ref to another rule");        r2.setPmdRule(TestManager.getRule(1));        Rule r3 = new Rule();        r3.setRef("ref to a rule");        r3.setPmdRule(TestManager.getRule(2));        Rule r4 = new Rule();        r4.setRef("ref to another rule");        r4.setPmdRule(TestManager.getRule(3));        RuleSet rs1 = new RuleSet();        rs1.setName("default");        rs1.setLanguage(RuleSet.LANGUAGE_JSP);        rs1.addRule(r1);        rs1.addRule(r2);        RuleSet rs2 = new RuleSet();        rs2.setName("custom");        rs2.setLanguage(RuleSet.LANGUAGE_JSP);        rs2.addRule(r3);        rs2.addRule(r4);        rs2.setDescription("Description does not make the difference");        try {            RuleSets rs = new RuleSets();            rs.getRuleSets().add(rs1);            rs.setDefaultRuleSet(rs2);            fail("The default rule set should belong to the rulesets list");        } catch (IllegalArgumentException e) {            // success        }    }    /**     * Test the definition of a default rule set.     * @throws RuleSetNotFoundException      *      */    public void testSetDefaultRuleSet3() throws RuleSetNotFoundException {        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setPmdRule(TestManager.getRule(0));        Rule r2 = new Rule();        r2.setRef("ref to another rule");        r2.setPmdRule(TestManager.getRule(1));        Rule r3 = new Rule();        r3.setRef("ref to a rule");        r3.setPmdRule(TestManager.getRule(2));        Rule r4 = new Rule();        r4.setRef("ref to another rule");        r4.setPmdRule(TestManager.getRule(3));        RuleSet rs1 = new RuleSet();        rs1.setName("default");        rs1.setLanguage(RuleSet.LANGUAGE_JSP);        rs1.addRule(r1);        rs1.addRule(r2);        RuleSet rs2 = new RuleSet();        rs2.setName("custom");        rs2.setLanguage(RuleSet.LANGUAGE_JSP);        rs2.addRule(r3);        rs2.addRule(r4);        rs2.setDescription("Description does not make the difference");        RuleSets rs = new RuleSets();        rs.getRuleSets().add(rs1);        rs.getRuleSets().add(rs2);        rs.setDefaultRuleSet(rs2);                assertSame("The default rule set has not been defined!", rs2, rs.getDefaultRuleSet());    }        /**     * 2 rule sets are equals if they are the same instance     *     */    public void testEquals1() {        RuleSets rs1 = new RuleSets();        RuleSets rs2 = rs1;                assertEquals("Rule sets should be equal", rs1, rs2);    }        /**     * 2 rule sets are different if they are different instance     *     */    public void testEquals2() {        RuleSets rs1 = new RuleSets();        RuleSets rs2 = new RuleSets();                assertFalse("Rule sets should not be equal", rs1.equals(rs2));    }        /**     * A rule sets should not be equals to null     *     */    public void testEquals3() {        RuleSets rs1 = new RuleSets();                assertNotNull("Rule sets should not be equal to null", rs1);    }        /**     * 2 equals rule sets should have the same hash code     *     */    public void testHashCode1() {        RuleSets rs1 = new RuleSets();        RuleSets rs2 = rs1;                assertEquals("Equal Rule sets should have the same hash code", rs1.hashCode(), rs2.hashCode());    }        /**     * 2 different rule sets should have different hash code     *     */    public void testHashCode2() {        RuleSets rs1 = new RuleSets();        RuleSets rs2 = new RuleSets();                assertFalse("Different rule sets should have different hash code", rs1.hashCode() == rs2.hashCode());    }        /**     * Test the basic usage of the default ruleset setter     *     */    public void testSetDefaultRuleSetName() throws RuleSetNotFoundException {        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setPmdRule(TestManager.getRule(0));        Rule r2 = new Rule();        r2.setRef("ref to another rule");        r2.setPmdRule(TestManager.getRule(1));        RuleSet rs1 = new RuleSet();        rs1.setName("default");        rs1.setLanguage(RuleSet.LANGUAGE_JSP);        rs1.addRule(r1);        rs1.addRule(r2);                List ruleSetsList = new ArrayList();        ruleSetsList.add(rs1);                RuleSets ruleSets = new RuleSets();        ruleSets.setRuleSets(ruleSetsList);                ruleSets.setDefaultRuleSetName("default");                assertSame("The default ruleset has not been set correctly", rs1, ruleSets.getDefaultRuleSet());    }        /**     * Test setting a default ruleset name to null     *     */    public void testSetDefaultRuleSetNameNull() {        try {            RuleSets ruleSets = new RuleSets();            ruleSets.setDefaultRuleSetName(null);            fail("Setting a default ruleset name to null is illegal");        } catch (IllegalArgumentException e) {            // success        }    }}
/* * Created on 18 juin 2006 * * Copyright (c) 2006, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: *  *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse.core.rulesets.vo;import junit.framework.TestCase;import net.sourceforge.pmd.RuleSetNotFoundException;/** * Unit tests for class Rule *  * @author Herlin * */public class RuleTest extends TestCase {    /**     * Asserts the defaults of a new rule object     *     */    public void testDefaults() {        Rule r = new Rule();        assertNotNull("The ref attribute must not be null", r.getRef());        assertEquals("The ref attribute should be empty", 0, r.getRef().trim().length());        assertNull("The message attribute should be null", r.getMessage());        assertNull("The priority attribute should be null", r.getPriority());        assertNull("The properties attribute should be null", r.getProperties());        assertNull("The pmd rule attribute should be null", r.getPmdRule());    }        /**     * Setting a null ref attribute is illegal     *     */    public void testSetRef1() {        try {            Rule r = new Rule();            r.setRef(null);            fail("Setting a null ref attribute is illegal");        } catch (IllegalArgumentException e) {            // success        }    }        /**     * Setting an empty ref attribute is illegal     *     */    public void testSetRef2() {        try {            Rule r = new Rule();            r.setRef("");            fail("Setting an empty string for the ref attribute is illegal");        } catch (IllegalArgumentException e) {            // success        }    }        /**     * Setting an empty ref attribute is illegal.     * Test with blank characters.     *     */    public void testSetRef3() {        try {            Rule r = new Rule();            r.setRef(" \r\n");            fail("Setting an empty string for the ref attribute is illegal");        } catch (IllegalArgumentException e) {            // success        }    }        /**     * To be sure, a ref attribute should be assigned any string     *     */    public void testSetRef4() {        try {            Rule r = new Rule();            r.setRef("any string");        } catch (IllegalArgumentException e) {            fail("It should be legal to set any string to ref attribute");        }    }        /**     * Setting a null PMD Rule is illegal     *     */    public void testSetPmdRule1() {        try {            Rule r = new Rule();            r.setPmdRule(null);            fail("Setting a null PMD Rule is illegal");        } catch (IllegalArgumentException e) {            // success        }    }        /**     * Setting a any PMD Rule is legal even if the reference is     * not the same (no check for now).     *      * @throws RuleSetNotFoundException      *     */    public void testSetPmdRule2() throws RuleSetNotFoundException {        try {            Rule r = new Rule();            r.setPmdRule(TestManager.getRule(0));        } catch (IllegalArgumentException e) {            fail("Setting any PMD Rule is legal");        }    }        /**     * an instance of a Rule object is equal to itself     */    public void testEquals1() {        Rule r = new Rule();        r.setRef("A reference");        assertEquals("A instance of Rule is equals to itself", r, r);    }        /**     * a rule cannot be equals to null     */    public void testEquals2() {        Rule r = new Rule();        r.setRef("A reference");        assertNotNull("A rule cannot be equal to null", r);    }        /**     * To be equals, rules must share the same ref, priority and properties.     *     */    public void testEquals3() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");                Properties s1 = new Properties();        s1.getProperties().add(p1);                Property p2 = new Property();        p2.setName("p1");        p2.setValue("value1");                Properties s2 = new Properties();        s2.getProperties().add(p2);        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setProperties(s1);        r1.setPriority(Priority.LEVEL3);                Rule r2 = new Rule();        r2.setRef("ref to a rule");        r2.setProperties(s2);        r2.setPriority(Priority.LEVEL3);        r2.setMessage("Message doesn't make the difference");        assertEquals("These 2 rules must be equal", r1, r2);            }        /**     * Rules with a different ref attribute are not equals     *     */    public void testEquals4() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");                Properties s1 = new Properties();        s1.getProperties().add(p1);                Property p2 = new Property();        p2.setName("p1");        p2.setValue("value1");                Properties s2 = new Properties();        s2.getProperties().add(p2);        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setProperties(s1);        r1.setPriority(Priority.LEVEL3);                Rule r2 = new Rule();        r2.setRef("ref to another rule");        r2.setProperties(s2);        r2.setPriority(Priority.LEVEL3);        r2.setMessage("Message doesn't make the difference");        assertFalse("Rules with different ref attribute are different", r1.equals(r2));            }        /**     * Rules with a different priority are not equals     *     */    public void testEquals5() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");                Properties s1 = new Properties();        s1.getProperties().add(p1);                Property p2 = new Property();        p2.setName("p1");        p2.setValue("value1");                Properties s2 = new Properties();        s2.getProperties().add(p2);        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setProperties(s1);        r1.setPriority(Priority.LEVEL3);                Rule r2 = new Rule();        r2.setRef("ref to a rule");        r2.setProperties(s2);        r2.setPriority(Priority.LEVEL1);        r2.setMessage("Message doesn't make the difference");        assertFalse("Rules with different priority are different", r1.equals(r2));            }        /**     * Rules with different properties are not equals     *     */    public void testEquals6() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");                Properties s1 = new Properties();        s1.getProperties().add(p1);                Property p2 = new Property();        p2.setName("p1");        p2.setValue("value2");                Properties s2 = new Properties();        s2.getProperties().add(p2);        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setProperties(s1);        r1.setPriority(Priority.LEVEL3);                Rule r2 = new Rule();        r2.setRef("ref to a rule");        r2.setProperties(s2);        r2.setPriority(Priority.LEVEL3);        r2.setMessage("Message doesn't make the difference");        assertFalse("Rules with different properties are different", r1.equals(r2));            }        /**     * Equal rules have the same hash code     *     */    public void testHashCode1() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");                Properties s1 = new Properties();        s1.getProperties().add(p1);                Property p2 = new Property();        p2.setName("p1");        p2.setValue("value1");                Properties s2 = new Properties();        s2.getProperties().add(p2);        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setProperties(s1);        r1.setPriority(Priority.LEVEL3);                Rule r2 = new Rule();        r2.setRef("ref to a rule");        r2.setProperties(s2);        r2.setPriority(Priority.LEVEL3);        r2.setMessage("Message doesn't make the difference");        assertEquals("Equal rules have the same hashcode", r1.hashCode(), r2.hashCode());            }        /**     * Different rules should have different hashCode     *     */    public void testHashCode2() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");                Properties s1 = new Properties();        s1.getProperties().add(p1);                Property p2 = new Property();        p2.setName("p1");        p2.setValue("value1");                Properties s2 = new Properties();        s2.getProperties().add(p2);        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setProperties(s1);        r1.setPriority(Priority.LEVEL3);                Rule r2 = new Rule();        r2.setRef("ref to another rule");        r2.setProperties(s2);        r2.setPriority(Priority.LEVEL3);        r2.setMessage("Message doesn't make the difference");        assertFalse("Different rules should have different hash code", r1.hashCode() == r2.hashCode());            }        /**     * Different rules should have different hash code     *     */    public void testHashCode3() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");                Properties s1 = new Properties();        s1.getProperties().add(p1);                Property p2 = new Property();        p2.setName("p1");        p2.setValue("value1");                Properties s2 = new Properties();        s2.getProperties().add(p2);        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setProperties(s1);        r1.setPriority(Priority.LEVEL3);                Rule r2 = new Rule();        r2.setRef("ref to a rule");        r2.setProperties(s2);        r2.setPriority(Priority.LEVEL1);        r2.setMessage("Message doesn't make the difference");        assertFalse("Different rules should have different hash code", r1.hashCode() == r2.hashCode());            }        /**     * Different rules should have different hash code     *     */    public void testHashCode4() {        Property p1 = new Property();        p1.setName("p1");        p1.setValue("value1");                Properties s1 = new Properties();        s1.getProperties().add(p1);                Property p2 = new Property();        p2.setName("p1");        p2.setValue("value2");                Properties s2 = new Properties();        s2.getProperties().add(p2);        Rule r1 = new Rule();        r1.setRef("ref to a rule");        r1.setProperties(s1);        r1.setPriority(Priority.LEVEL3);                Rule r2 = new Rule();        r2.setRef("ref to a rule");        r2.setProperties(s2);        r2.setPriority(Priority.LEVEL3);        r2.setMessage("Message doesn't make the difference");        assertFalse("Different rules should have different hash code", r1.hashCode() == r2.hashCode());            }}
/* * Created on 2 juillet 2005 * * Copyright (c) 2005, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: * *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse.core.ext;import java.util.Iterator;import java.util.Set;import junit.framework.TestCase;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSetFactory;import net.sourceforge.pmd.RuleSetNotFoundException;import net.sourceforge.pmd.eclipse.plugin.PMDPlugin;/** * Test the ruleset extension * * @author Philippe Herlin * */public class RuleSetsExtensionProcessorTest extends TestCase {    /**     * Tests the additional rulesets has been registered. For this test to work,     * the test plugin fragment must be installed.     *     */    public void testAdditionalRuleSetsRegistered() throws RuleSetNotFoundException {        Set<RuleSet> registeredRuleSets = PMDPlugin.getDefault().getRuleSetManager().getRegisteredRuleSets();        assertFalse("No registered rulesets!", registeredRuleSets.isEmpty());        RuleSetFactory factory = new RuleSetFactory();        RuleSet ruleSet = factory.createRuleSet("rulesets/extra1.xml");        assertTrue("RuleSet \"rulesets/extra1.xml\" has not been registered", ruleSetRegistered(ruleSet, registeredRuleSets));        ruleSet = factory.createRuleSet("rulesets/extra2.xml");        assertTrue("RuleSet \"rulesets/extra2.xml\" has not been registered", ruleSetRegistered(ruleSet, registeredRuleSets));    }    /**     * Tests the additional default rulesets has been registered. For this test     * to work, the test plugin fragment must be installed.     *     */    public void testAdditionalDefaultRuleSetsRegistered() throws RuleSetNotFoundException {        Set<RuleSet> registeredRuleSets = PMDPlugin.getDefault().getRuleSetManager().getDefaultRuleSets();        assertFalse("No registered default rulesets!", registeredRuleSets.isEmpty());        RuleSetFactory factory = new RuleSetFactory();        RuleSet ruleSet = factory.createRuleSet("rulesets/extra1.xml");        assertTrue("RuleSet \"rulesets/extra1.xml\" has not been registered", ruleSetRegistered(ruleSet, registeredRuleSets));        ruleSet = factory.createRuleSet("rulesets/extra2.xml");        assertTrue("RuleSet \"rulesets/extra2.xml\" has not been registered", ruleSetRegistered(ruleSet, registeredRuleSets));    }    /**     * test if a ruleset is registered     *     * @param ruleSet     * @param set     * @return true if OK     */    private boolean ruleSetRegistered(RuleSet ruleSet, Set<RuleSet> set) {        boolean registered = false;        Iterator<RuleSet> i = set.iterator();        while (i.hasNext() && !registered) {            RuleSet registeredRuleSet = i.next();            registered = registeredRuleSet.getName().equals(ruleSet.getName());        }        return registered;    }}
/* * Created on 7 juin 2005 * * Copyright (c) 2005, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: *  *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse.core;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.eclipse.core.IRuleSetManager;import net.sourceforge.pmd.eclipse.core.impl.RuleSetManagerImpl;import junit.framework.TestCase;/** * Test the ruleset manager. *  * @author Philippe Herlin * */public class RuleSetManagerTest extends TestCase {    private IRuleSetManager ruleSetManager;    /**     * Default constructor     * @param name     */    public RuleSetManagerTest(String name) {        super(name);    }        /**     * Test the register ruleset     *     */    public void testRegisterRuleSet() {        RuleSet ruleSet = new RuleSet();        this.ruleSetManager.registerRuleSet(ruleSet);        assertEquals("RuleSet not registrered!", 1, this.ruleSetManager.getRegisteredRuleSets().size());    }        /**     * Test the registration of a null ruleset     *     */    public void testRegisterNullRuleSet() {        try {            this.ruleSetManager.registerRuleSet(null);            fail("Should return an IllegalArgumentException");        } catch (IllegalArgumentException e) {            ; // cool        }    }        /**     * Registering twice the same rule set results in no addition     *     */    public void testDuplicateRegister() {        RuleSet ruleSet = new RuleSet();        this.ruleSetManager.registerRuleSet(ruleSet);        this.ruleSetManager.registerRuleSet(ruleSet);        assertEquals("Only one rule set should have been registered", 1, this.ruleSetManager.getRegisteredRuleSets().size());    }        /**     * Test unregistration     *     */    public void testUnregisterRuleSet() {        RuleSet ruleSet = new RuleSet();        this.ruleSetManager.registerRuleSet(ruleSet);        assertEquals("RuleSet not registered!", 1, this.ruleSetManager.getRegisteredRuleSets().size());        this.ruleSetManager.unregisterRuleSet(ruleSet);        assertEquals("RuleSet not unregistered", 0, this.ruleSetManager.getRegisteredRuleSets().size());    }        /**     * Unregistering a null ruleset is illegal     *     */    public void testUnregisterNullRuleSet() {        try {            this.ruleSetManager.unregisterRuleSet(null);            fail("An IllegalArgumentException should be returned");        } catch (RuntimeException e) {            ; // cool        }    }        /**     * Unregistering twice the same rule set has no effect     *     */    public void testDuplicateUnregister() {        RuleSet ruleSet = new RuleSet();        this.ruleSetManager.registerRuleSet(ruleSet);        this.ruleSetManager.unregisterRuleSet(ruleSet);        this.ruleSetManager.unregisterRuleSet(ruleSet);        assertEquals("RuleSet not unregistered", 0, this.ruleSetManager.getRegisteredRuleSets().size());    }        /**     * Test the register default ruleset     *     */    public void testRegisterDefaultRuleSet() {        RuleSet ruleSet = new RuleSet();        this.ruleSetManager.registerDefaultRuleSet(ruleSet);        assertEquals("Default RuleSet not registrered!", 1, this.ruleSetManager.getDefaultRuleSets().size());    }        /**     * Test the registration of a null ruleset     *     */    public void testRegisterNullDefaultRuleSet() {        try {            this.ruleSetManager.registerDefaultRuleSet(null);            fail("Should return an IllegalArgumentException");        } catch (IllegalArgumentException e) {            ; // cool        }    }        /**     * Registering twice the same default rule set results in no addition     *     */    public void testDuplicateRegisterDefault() {        RuleSet ruleSet = new RuleSet();        this.ruleSetManager.registerDefaultRuleSet(ruleSet);        this.ruleSetManager.registerDefaultRuleSet(ruleSet);        assertEquals("Only one rule set should have been registered", 1, this.ruleSetManager.getDefaultRuleSets().size());    }        /**     * Test unregistration default     *     */    public void testUnregisterDefaultRuleSet() {        RuleSet ruleSet = new RuleSet();        this.ruleSetManager.registerDefaultRuleSet(ruleSet);        assertEquals("Default RuleSet not registered!", 1, this.ruleSetManager.getDefaultRuleSets().size());        this.ruleSetManager.unregisterDefaultRuleSet(ruleSet);        assertEquals("Default RuleSet not unregistered", 0, this.ruleSetManager.getDefaultRuleSets().size());    }        /**     * Unregistering a null default ruleset is illegal     *     */    public void testUnregisterNullDefaultRuleSet() {        try {            this.ruleSetManager.unregisterDefaultRuleSet(null);            fail("An IllegalArgumentException should be returned");        } catch (RuntimeException e) {            ; // cool        }    }        /**     * Unregistering twice the same Default rule set has no effect     *     */    public void testDuplicateUnregisterDefault() {        RuleSet ruleSet = new RuleSet();        this.ruleSetManager.registerRuleSet(ruleSet);        this.ruleSetManager.unregisterDefaultRuleSet(ruleSet);        this.ruleSetManager.unregisterDefaultRuleSet(ruleSet);        assertEquals("Default RuleSet not unregistered", 0, this.ruleSetManager.getDefaultRuleSets().size());    }        /**     * @see junit.framework.TestCase#setUp()     */    protected void setUp() throws Exception {        super.setUp();        this.ruleSetManager = new RuleSetManagerImpl();    }}
/* * Created on 7 juin 2005 * * Copyright (c) 2005, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: * *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse.core;import java.util.Iterator;import java.util.Set;import junit.framework.TestCase;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSetFactory;import net.sourceforge.pmd.RuleSetNotFoundException;import net.sourceforge.pmd.eclipse.plugin.PMDPlugin;/** * Test the PMD Core plugin * * @author Philippe Herlin * */public class PMDCorePluginTest extends TestCase {    /**     * Constructor for PMDPluginTest.     *     * @param name     */    public PMDCorePluginTest(String name) {        super(name);    }    /**     * Test that the core plugin has been instantiated     *     */    public void testPMDPluginNotNull() {        assertNotNull("The Core Plugin has not been instantiated", PMDPlugin.getDefault());    }    /**     * Test that we can get a ruleset manager     *     */    public void testRuleSetManagerNotNull() {        assertNotNull("Cannot get a ruleset manager", PMDPlugin.getDefault().getRuleSetManager());    }    /**     * Test all the known PMD rulesets has been registered For this test to     * work, no fragment or only the test plugin fragment should be installed.     *     */    public void testStandardPMDRuleSetsRegistered() throws RuleSetNotFoundException {        Set<RuleSet> registeredRuleSets = PMDPlugin.getDefault().getRuleSetManager().getRegisteredRuleSets();        assertFalse("No registered rulesets!", registeredRuleSets.isEmpty());        RuleSetFactory factory = new RuleSetFactory();        Iterator<RuleSet> iterator = factory.getRegisteredRuleSets();        while (iterator.hasNext()) {            RuleSet ruleSet = iterator.next();            assertTrue("RuleSet \"" + ruleSet.getName() + "\" has not been registered", ruleSetRegistered(ruleSet,                    registeredRuleSets));        }    }    /**     * Test the default rulesets has been registered For this test to work, no     * Fragment or only the test plugin fragment should be installed.     *     */    public void testDefaultPMDRuleSetsRegistered() throws RuleSetNotFoundException {        Set<RuleSet> defaultRuleSets = PMDPlugin.getDefault().getRuleSetManager().getRegisteredRuleSets();        assertFalse("No registered default rulesets!", defaultRuleSets.isEmpty());        RuleSetFactory factory = new RuleSetFactory();        Iterator<RuleSet> iterator = factory.getRegisteredRuleSets();        while (iterator.hasNext()) {            RuleSet ruleSet = iterator.next();            assertTrue("RuleSet \"" + ruleSet.getName() + "\" has not been registered", ruleSetRegistered(ruleSet,                    defaultRuleSets));        }    }    /**     * test if a ruleset is registered     *     * @param ruleSet     * @param set     * @return true if OK     */    private boolean ruleSetRegistered(RuleSet ruleSet, Set<RuleSet> set) {        boolean registered = false;        Iterator<RuleSet> i = set.iterator();        while (i.hasNext() && !registered) {            RuleSet registeredRuleSet = i.next();            registered = registeredRuleSet.getName().equals(ruleSet.getName());        }        return registered;    }}
/* * Created on 14 avr. 2005 * * Copyright (c) 2005, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: * *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse.runtime.cmd;import java.io.InputStream;import java.util.Properties;import junit.framework.TestCase;import name.herlin.command.CommandException;import name.herlin.command.UnsetInputPropertiesException;import net.sourceforge.pmd.eclipse.EclipseUtils;import net.sourceforge.pmd.eclipse.runtime.PMDRuntimeConstants;import net.sourceforge.pmd.renderers.HTMLRenderer;import org.eclipse.core.resources.IFile;import org.eclipse.core.resources.IFolder;import org.eclipse.core.resources.IProject;import org.eclipse.core.resources.IResource;import org.eclipse.core.runtime.CoreException;/** * Test the report rendering * * @author Philippe Herlin * */public class RenderReportCmdTest extends TestCase {    private IProject testProject;    /**     * Default constructor     *     * @param name     */    public RenderReportCmdTest(String name) {        super(name);    }    /**     * Test the basic usage of the report rendering command     *     */    public void testRenderReportCmdBasic() throws CommandException, CoreException {        ReviewCodeCmd reviewCmd = new ReviewCodeCmd();        reviewCmd.addResource(this.testProject);        reviewCmd.performExecute();        RenderReportCmd cmd = new RenderReportCmd();        cmd.setProject(this.testProject);        cmd.registerRenderer(new HTMLRenderer(new Properties()), PMDRuntimeConstants.HTML_REPORT_NAME);        cmd.performExecute();        cmd.join();        IFolder reportFolder = this.testProject.getFolder(PMDRuntimeConstants.REPORT_FOLDER);        assertTrue(reportFolder.exists());        IFile reportFile = reportFolder.getFile(PMDRuntimeConstants.HTML_REPORT_NAME);        assertTrue(reportFile.exists());        this.testProject.deleteMarkers(PMDRuntimeConstants.PMD_MARKER, true, IResource.DEPTH_INFINITE);        if (reportFile.exists()) {            reportFile.delete(true, false, null);        }        if (reportFolder.exists()) {            reportFolder.delete(true, false, null);        }    }    /**     * Test robustness #1     *     * @throws CommandException     */    public void testRenderReportCmdNullArg1() throws CommandException {        try {            RenderReportCmd cmd = new RenderReportCmd();            cmd.setProject(null);            cmd.registerRenderer(new HTMLRenderer(new Properties()), PMDRuntimeConstants.HTML_REPORT_NAME);            cmd.performExecute();            fail();        } catch (UnsetInputPropertiesException e) {            // yes cool        }    }    /**     * Test robustness #2     *     * @throws CommandException     */    public void testRenderReportCmdNullArg2() throws CommandException {        try {            RenderReportCmd cmd = new RenderReportCmd();            cmd.setProject(this.testProject);            cmd.registerRenderer(null, PMDRuntimeConstants.HTML_REPORT_NAME);            cmd.performExecute();            fail();        } catch (UnsetInputPropertiesException e) {            // yes cool        }    }    /**     * Test robustness #3     *     * @throws CommandException     */    public void testRenderReportCmdNullArg3() throws CommandException {        try {            RenderReportCmd cmd = new RenderReportCmd();            cmd.setProject(this.testProject);            cmd.registerRenderer(new HTMLRenderer(new Properties()), null);            cmd.performExecute();            fail();        } catch (UnsetInputPropertiesException e) {            // yes cool        }    }    /**     * Test robustness #4     *     * @throws CommandException     */    public void testRenderReportCmdNullArg4() throws CommandException {        try {            RenderReportCmd cmd = new RenderReportCmd();            cmd.setProject(null);            cmd.registerRenderer(null, PMDRuntimeConstants.HTML_REPORT_NAME);            cmd.performExecute();            fail();        } catch (UnsetInputPropertiesException e) {            // yes cool        }    }    /**     * Test robustness #5     *     * @throws CommandException     */    public void testRenderReportCmdNullArg5() throws CommandException {        try {            RenderReportCmd cmd = new RenderReportCmd();            cmd.setProject(null);            cmd.registerRenderer(new HTMLRenderer(new Properties()), null);            cmd.performExecute();            fail();        } catch (UnsetInputPropertiesException e) {            // yes cool        }    }    /**     * Test robustness #6     *     * @throws CommandException     */    public void testRenderReportCmdNullArg6() throws CommandException {        try {            RenderReportCmd cmd = new RenderReportCmd();            cmd.setProject(this.testProject);            cmd.registerRenderer(null, null);            cmd.performExecute();            fail();        } catch (UnsetInputPropertiesException e) {            // yes cool        }    }    /**     * Test robustness #7     *     * @throws CommandException     */    public void testRenderReportCmdNullArg7() throws CommandException {        try {            RenderReportCmd cmd = new RenderReportCmd();            cmd.setProject(null);            cmd.registerRenderer(null, null);            cmd.performExecute();            fail();        } catch (UnsetInputPropertiesException e) {            // yes cool        }    }    /**     * @see junit.framework.TestCase#setUp()     */    @Override    protected void setUp() throws Exception {        super.setUp();        // 1. Create a Java project        this.testProject = EclipseUtils.createJavaProject("PMDTestProject");        assertTrue("A test project cannot be created; the tests cannot be performed.", this.testProject != null                && this.testProject.exists() && this.testProject.isAccessible());        // 2. Create a test source file inside that project        EclipseUtils.createTestSourceFile(this.testProject);        InputStream is = EclipseUtils.getResourceStream(this.testProject, "/Test.java");        assertNotNull("Cannot find the test source file", is);        is.close();    }    /**     * @see junit.framework.TestCase#tearDown()     */    @Override    protected void tearDown() throws Exception {        if (this.testProject != null) {            if (this.testProject.exists() && this.testProject.isAccessible()) {                EclipseUtils.removePMDNature(this.testProject);                // this.testProject.refreshLocal(IResource.DEPTH_INFINITE,                // null);                // Thread.sleep(500);                // this.testProject.delete(true, true, null);                // this.testProject = null;            }        }        super.tearDown();    }}
/* * Created on 14 avr. 2005 * * Copyright (c) 2005, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: * *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse.runtime.cmd;import java.io.InputStream;import junit.framework.TestCase;import name.herlin.command.CommandException;import name.herlin.command.UnsetInputPropertiesException;import net.sourceforge.pmd.cpd.SimpleRenderer;import net.sourceforge.pmd.eclipse.EclipseUtils;import net.sourceforge.pmd.eclipse.runtime.PMDRuntimeConstants;import org.eclipse.core.resources.IFile;import org.eclipse.core.resources.IFolder;import org.eclipse.core.resources.IProject;import org.eclipse.core.runtime.CoreException;/** * Test the CPD command * * @author Philippe Herlin * */public class DetectCutAndPasteCmdTest extends TestCase {    private IProject testProject;    /**     * Default constructor     *     * @param name     */    public DetectCutAndPasteCmdTest(String name) {        super(name);    }    /**     * Test the basic usage of the cpd command     *     */    public void testDetectCutAndPasteCmdBasic1() throws CommandException, CoreException {        DetectCutAndPasteCmd cmd = new DetectCutAndPasteCmd();        cmd.setProject(this.testProject);        cmd.setRenderer(new SimpleRenderer());        cmd.setReportName(PMDRuntimeConstants.SIMPLE_CPDREPORT_NAME);        cmd.setCreateReport(true);        cmd.setLanguage("java");        cmd.setMinTileSize(10);        cmd.performExecute();        cmd.join();        IFolder reportFolder = this.testProject.getFolder(PMDRuntimeConstants.REPORT_FOLDER);        assertTrue(reportFolder.exists());        IFile reportFile = reportFolder.getFile(PMDRuntimeConstants.SIMPLE_CPDREPORT_NAME);        assertTrue(reportFile.exists());        if (reportFile.exists()) {            reportFile.delete(true, false, null);        }        if (reportFolder.exists()) {            reportFolder.delete(true, false, null);        }    }    /**     * Test the basic usage of the cpd command     *     */    public void testDetectCutAndPasteCmdBasic2() throws CommandException, CoreException {        DetectCutAndPasteCmd cmd = new DetectCutAndPasteCmd();        cmd.setProject(this.testProject);        cmd.setCreateReport(false);        cmd.setLanguage("java");        cmd.setMinTileSize(10);        cmd.performExecute();        cmd.join();        IFolder reportFolder = this.testProject.getFolder(PMDRuntimeConstants.REPORT_FOLDER);        assertFalse(reportFolder.exists());        IFile reportFile = reportFolder.getFile(PMDRuntimeConstants.SIMPLE_CPDREPORT_NAME);        assertFalse(reportFile.exists());    }    /**     * Test robustness #1     *     * @throws CommandException     */    public void testDetectCutAndPasteCmdNullArg1() throws CommandException {        try {            DetectCutAndPasteCmd cmd = new DetectCutAndPasteCmd();            cmd.setProject(null);            cmd.setRenderer(new SimpleRenderer());            cmd.setReportName(PMDRuntimeConstants.SIMPLE_CPDREPORT_NAME);            cmd.performExecute();            fail();        } catch (UnsetInputPropertiesException e) {            // yes cool        }    }    /**     * Test robustness #2     *     * @throws CommandException     */    public void testDetectCutAndPasteCmdNullArg2() throws CommandException {        try {            DetectCutAndPasteCmd cmd = new DetectCutAndPasteCmd();            cmd.setProject(this.testProject);            cmd.setRenderer(null);            cmd.setReportName(PMDRuntimeConstants.SIMPLE_CPDREPORT_NAME);            cmd.performExecute();            fail();        } catch (UnsetInputPropertiesException e) {            // yes cool        }    }    /**     * Test robustness #3     *     * @throws CommandException     */    public void testDetectCutAndPasteCmdNullArg3() throws CommandException {        try {            DetectCutAndPasteCmd cmd = new DetectCutAndPasteCmd();            cmd.setProject(this.testProject);            cmd.setRenderer(new SimpleRenderer());            cmd.setReportName(null);            cmd.performExecute();            fail();        } catch (UnsetInputPropertiesException e) {            // yes cool        }    }    /**     * Test robustness #4     *     * @throws CommandException     */    public void testDetectCutAndPasteCmdNullArg4() throws CommandException {        try {            DetectCutAndPasteCmd cmd = new DetectCutAndPasteCmd();            cmd.setProject(null);            cmd.setRenderer(null);            cmd.setReportName(PMDRuntimeConstants.SIMPLE_CPDREPORT_NAME);            cmd.performExecute();            fail();        } catch (UnsetInputPropertiesException e) {            // yes cool        }    }    /**     * Test robustness #5     *     * @throws CommandException     */    public void testDetectCutAndPasteCmdNullArg5() throws CommandException {        try {            DetectCutAndPasteCmd cmd = new DetectCutAndPasteCmd();            cmd.setProject(null);            cmd.setRenderer(new SimpleRenderer());            cmd.setReportName(null);            cmd.performExecute();            fail();        } catch (UnsetInputPropertiesException e) {            // yes cool        }    }    /**     * Test robustness #6     *     * @throws CommandException     */    public void testDetectCutAndPasteCmdNullArg6() throws CommandException {        try {            DetectCutAndPasteCmd cmd = new DetectCutAndPasteCmd();            cmd.setProject(this.testProject);            cmd.setRenderer(null);            cmd.setReportName(null);            cmd.performExecute();            fail();        } catch (UnsetInputPropertiesException e) {            // yes cool        }    }    /**     * Test robustness #7     *     * @throws CommandException     */    public void testDetectCutAndPasteCmdNullArg7() throws CommandException {        try {            DetectCutAndPasteCmd cmd = new DetectCutAndPasteCmd();            cmd.setProject(null);            cmd.setRenderer(null);            cmd.setReportName(null);            cmd.performExecute();            fail();        } catch (UnsetInputPropertiesException e) {            // yes cool        }    }    /**     * @see junit.framework.TestCase#setUp()     */    protected void setUp() throws Exception {        super.setUp();        // 1. Create a Java project        this.testProject = EclipseUtils.createJavaProject("PMDTestProject");        assertTrue("A test project cannot be created; the tests cannot be performed.", this.testProject != null                && this.testProject.exists() && this.testProject.isAccessible());        // 2. Create a test source file inside that project        EclipseUtils.createTestSourceFile(this.testProject);        InputStream is = EclipseUtils.getResourceStream(this.testProject, "/Test.java");        assertNotNull("Cannot find the test source file", is);        is.close();    }    /**     * @see junit.framework.TestCase#tearDown()     */    protected void tearDown() throws Exception {        if (this.testProject != null) {            if (this.testProject.exists() && this.testProject.isAccessible()) {                EclipseUtils.removePMDNature(this.testProject);                // this.testProject.refreshLocal(IResource.DEPTH_INFINITE,                // null);                // Thread.sleep(500);                // this.testProject.delete(true, true, null);                // this.testProject = null;            }        }        super.tearDown();    }}
/* * Created on 12 avr. 2005 * * Copyright (c) 2005, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: * *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse.runtime.cmd;import java.io.InputStream;import java.util.Map;import java.util.Set;import junit.framework.TestCase;import name.herlin.command.CommandException;import name.herlin.command.UnsetInputPropertiesException;import net.sourceforge.pmd.eclipse.EclipseUtils;import org.eclipse.core.resources.IFile;import org.eclipse.core.resources.IProject;import org.eclipse.core.runtime.CoreException;/** * This tests the PMD Processor command * * @author Philippe Herlin * */public class ReviewCmdTest extends TestCase {    private IProject testProject;    /**     * Test case constructor     *     * @param name     *            of the test case     */    public ReviewCmdTest(String name) {        super(name);    }    /**     * Test the basic usage of the processor command     *     */    public void testReviewCmdBasic() throws CommandException, CoreException {        ReviewCodeCmd cmd = new ReviewCodeCmd();        cmd.addResource(this.testProject);        cmd.performExecute();        cmd.join();        Map<IFile, Set<MarkerInfo>> markers = cmd.getMarkers();        // We do not test PMD, only a non-empty report is enough        assertNotNull(markers);        assertTrue("Report size = " + markers.size(), markers.size() > 0);    }    /**     * The ReviewCodeCmd must also work on a ResourceDelta     * @throws CommandException     */    public void testReviewCmdDelta() throws CommandException {        // Don't know how to test that yet        // How to instantiate a ResourceDelta ?        // Let's comment for now    }    /**     * Normally a null resource and a null resource delta is not acceptable.     * @throws CommandException     */    public void testReviewCmdNullResource() throws CommandException {        try {            ReviewCodeCmd cmd = new ReviewCodeCmd();            cmd.addResource(null);            cmd.setResourceDelta(null);            cmd.performExecute();            fail("An Exception must be thrown");        } catch (UnsetInputPropertiesException e) {            fail("An IllegalArgumentException must have been thrown before");        } catch (IllegalArgumentException e) {            ; // cool, success        }    }    /**     * @see junit.framework.TestCase#setUp()     */    @Override    protected void setUp() throws Exception {        super.setUp();        // 1. Create a Java project        this.testProject = EclipseUtils.createJavaProject("PMDTestProject");        assertTrue("A test project cannot be created; the tests cannot be performed.", this.testProject != null                && this.testProject.exists() && this.testProject.isAccessible());        // 2. Create a test source file inside that project        IFile testFile = EclipseUtils.createTestSourceFile(this.testProject);        InputStream is = EclipseUtils.getResourceStream(this.testProject, "/Test.java");        assertNotNull("Cannot find the test source file", is);        is.close();    }    /**     * @see junit.framework.TestCase#tearDown()     */    @Override    protected void tearDown() throws Exception {        try {            if (this.testProject != null) {                if (this.testProject.exists() && this.testProject.isAccessible()) {                    EclipseUtils.removePMDNature(this.testProject);//                this.testProject.refreshLocal(IResource.DEPTH_INFINITE, null);//                Thread.sleep(500);//                this.testProject.delete(true, true, null);//                this.testProject = null;                }            }            super.tearDown();        } catch (Exception e) {            System.out.println("Exception " + e.getClass().getName() + " when tearing down. Ignored.");        }    }}
/* * Created on 6 fevr. 2005 * * Copyright (c) 2004, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: * *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse.runtime.properties;import java.util.Iterator;import java.util.Set;import junit.framework.TestCase;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSetFactory;import net.sourceforge.pmd.RuleSetNotFoundException;import net.sourceforge.pmd.eclipse.EclipseUtils;import net.sourceforge.pmd.eclipse.plugin.PMDPlugin;import net.sourceforge.pmd.eclipse.runtime.builder.PMDNature;import net.sourceforge.pmd.eclipse.runtime.preferences.IPreferencesManager;import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;import org.eclipse.core.resources.IFile;import org.eclipse.core.resources.IProject;import org.eclipse.core.runtime.CoreException;import org.eclipse.ui.IWorkingSet;/** * Test the project properties model. * * @author Philippe Herlin * */public class ProjectPropertiesModelTest extends TestCase {    private IProject testProject;    private RuleSet initialPluginRuleSet;    /**     * Test case constructor     *     * @param name of the test case     */    public ProjectPropertiesModelTest(String name) {        super(name);    }    /**     * A property should be used to know if PMD is enabled for a project. Set to     * TRUE     *     */    public void testPmdEnabledTRUE() throws CoreException, PropertiesException {        IProjectPropertiesManager mgr = PMDPlugin.getDefault().getPropertiesManager();        IProjectProperties model = mgr.loadProjectProperties(this.testProject);        model.setPmdEnabled(true);        model.sync();        assertTrue("Cannot activate PMD for that project", this.testProject.hasNature(PMDNature.PMD_NATURE));        assertTrue("PMD Property not set!", model.isPmdEnabled());    }    /**     * A property should be used to know id PMD is enabled for a project. Set to     * FALSE.     *     */    public void testPmdEnabledFALSE() throws PropertiesException, CoreException {        IProjectPropertiesManager mgr = PMDPlugin.getDefault().getPropertiesManager();        IProjectProperties model = mgr.loadProjectProperties(this.testProject);        model.setPmdEnabled(true);        model.sync();        assertTrue("Cannot activate PMD for that project", this.testProject.hasNature(PMDNature.PMD_NATURE));        model.setPmdEnabled(false);        model.sync();        assertFalse("Cannot desactivate PMD for that project", this.testProject.hasNature(PMDNature.PMD_NATURE));        assertFalse("PMD Property not reset!", model.isPmdEnabled());    }    /**     * A brand new project should be affected the Plugin ruleset in the global     * ruleset.     *     */    public void testProjectRuleSet() throws PropertiesException {        IProjectPropertiesManager mgr = PMDPlugin.getDefault().getPropertiesManager();        IProjectProperties model = mgr.loadProjectProperties(this.testProject);        IPreferencesManager pmgr = PMDPlugin.getDefault().getPreferencesManager();        assertSame("A new project is not set the plugin ruleset", model.getProjectRuleSet(), pmgr.getRuleSet());    }    /**     * Set another ruleset.     */    public void testProjectRuleSet1() throws PropertiesException, RuleSetNotFoundException, CoreException {        IProjectPropertiesManager mgr = PMDPlugin.getDefault().getPropertiesManager();        IProjectProperties model = mgr.loadProjectProperties(this.testProject);        RuleSetFactory factory = new RuleSetFactory();        // use the basic ruleset because it should be included in the plugin        // ruleset.        RuleSet basicRuleSet = factory.createRuleSet("rulesets/basic.xml");        // First set the project ruleset        model.setProjectRuleSet(basicRuleSet);        model.sync();        // Test the ruleset we set is equal to the ruleset we queried        RuleSet projectRuleSet = model.getProjectRuleSet();        assertNotNull("Project ruleset has not been set", projectRuleSet);        assertTrue("The project ruleset is not the basic ruleset", EclipseUtils.assertRuleSetEquals(basicRuleSet.getRules(),                projectRuleSet.getRules(), System.out));    }    /**     * When rules are removed from the plugin preferences, these rules should     * also be removed from the project     * euh... ben en fait non. annulé.     */    public void testProjectRuleSet2() throws PropertiesException, RuleSetNotFoundException, CoreException {/*        // First ensure that the plugin initial ruleset is equal to the project        // ruleset        IProjectPropertiesManager mgr = PMDPlugin.getDefault().getPropertiesManager();        IProjectProperties model = mgr.loadProjectProperties(this.testProject);        RuleSet projectRuleSet = model.getProjectRuleSet();        assertEquals("The project ruleset is not equal to the plugin ruleset", this.initialPluginRuleSet.getRules(), projectRuleSet                .getRules());        // use the basic ruleset and set it at the only plugin ruleset        RuleSetFactory factory = new RuleSetFactory();        RuleSet basicRuleSet = factory.createSingleRuleSet("rulesets/basic.xml");        IPreferencesManager pmgr = PMDPlugin.getDefault().getPreferencesManager();        pmgr.setRuleSet(basicRuleSet);        projectRuleSet = model.getProjectRuleSet();        dumpRuleSet(basicRuleSet);        dumpRuleSet(projectRuleSet);        assertEquals("The project ruleset is not equal to the plugin ruleset", basicRuleSet.getRules(), projectRuleSet.getRules());*/    }    /**     * When rules are added to the plugin preferences, these rules should also     * be added to the project     */    public void testProjectRuleSet3() throws PropertiesException, RuleSetNotFoundException, CoreException {        // First ensure that the plugin initial ruleset is equal to the project        // ruleset        IProjectPropertiesManager mgr = PMDPlugin.getDefault().getPropertiesManager();        IProjectProperties model = mgr.loadProjectProperties(this.testProject);        RuleSet projectRuleSet = model.getProjectRuleSet();        assertEquals("The project ruleset is not equal to the plugin ruleset", this.initialPluginRuleSet.getRules(), projectRuleSet.getRules());        // 2. add a rule to the plugin rule set        Rule myRule = new AbstractJavaRule() {            @Override            public String getName() {                return "MyRule";            }        };        RuleSet newRuleSet = new RuleSet();        newRuleSet.setName("foo");        newRuleSet.addRuleSet(this.initialPluginRuleSet);        newRuleSet.addRule(myRule);        PMDPlugin.getDefault().getPreferencesManager().setRuleSet(newRuleSet);        // Test that the project rule set should still be the same as the plugin        // rule set        model = mgr.loadProjectProperties(this.testProject);        projectRuleSet = model.getProjectRuleSet();        assertEquals("The project ruleset is not equal to the plugin ruleset", PMDPlugin.getDefault()                .getPreferencesManager().getRuleSet().getRules(), projectRuleSet.getRules());    }    /**     * Bug: when a user deselect a project rule it is not saved     */    public void testBug() throws PropertiesException, RuleSetNotFoundException, CoreException {        RuleSetFactory factory = new RuleSetFactory();        // First ensure that the plugin initial ruleset is equal to the project        // ruleset        IProjectPropertiesManager mgr = PMDPlugin.getDefault().getPropertiesManager();        IProjectProperties model = mgr.loadProjectProperties(this.testProject);        RuleSet projectRuleSet = model.getProjectRuleSet();        assertEquals("The project ruleset is not equal to the plugin ruleset", this.initialPluginRuleSet.getRules(), projectRuleSet.getRules());        // 2. remove the first rule (keep its name for assertion)        RuleSet newRuleSet = new RuleSet();        newRuleSet.addRuleSet(projectRuleSet);        Iterator<Rule> i = newRuleSet.getRules().iterator();        Rule removedRule = i.next();        i.remove();        model.setProjectRuleSet(newRuleSet);        model.sync();        // 3. test the rule has correctly been removed        projectRuleSet = model.getProjectRuleSet();        assertNull("The rule has not been removed!", projectRuleSet.getRuleByName(removedRule.getName()));    }    /**     * It should not be possible to set to null a project ruleset     *     */    public void testProjectRuleSetNull() throws PropertiesException {        IProjectPropertiesManager mgr = PMDPlugin.getDefault().getPropertiesManager();        IProjectProperties model = mgr.loadProjectProperties(this.testProject);        try {            model.setProjectRuleSet(null);            fail("A ModelException must be raised when setting a project ruleset to null");        } catch (PropertiesException e) {            // OK that's correct        }    }    /**     * A project may have its ruleset stored in the project own directory. Test     * set to TRUE.     */    public void testRuleSetStoredInProjectTRUE() throws PropertiesException, RuleSetNotFoundException {        IProjectPropertiesManager mgr = PMDPlugin.getDefault().getPropertiesManager();        IProjectProperties model = mgr.loadProjectProperties(this.testProject);        RuleSetFactory factory = new RuleSetFactory();        RuleSet basicRuleSet = factory.createRuleSet("rulesets/basic.xml");        model.setPmdEnabled(true);        model.setRuleSetStoredInProject(false);        model.setProjectWorkingSet(null);        model.setProjectRuleSet(basicRuleSet);        model.sync();        model.createDefaultRuleSetFile();        model.setRuleSetStoredInProject(true);        model.sync();        boolean b = model.isRuleSetStoredInProject();        IFile file = this.testProject.getFile(".ruleset");        RuleSet projectRuleSet = factory.createRuleSet(file.getLocation().toOSString());        assertTrue("the ruleset should be stored in the project", b);        assertEquals("The project ruleset must be equals to the one found in the project", model.getProjectRuleSet(),                projectRuleSet);    }    /**     * A project may have its ruleset stored in the project own directory. Test     * set to FALSE.     *     */    public void testRuleSetStoredInProjectFALSE() throws PropertiesException, RuleSetNotFoundException {        IProjectPropertiesManager mgr = PMDPlugin.getDefault().getPropertiesManager();        IProjectProperties model = mgr.loadProjectProperties(this.testProject);        RuleSetFactory factory = new RuleSetFactory();        RuleSet basicRuleSet = factory.createRuleSet("rulesets/basic.xml");        model.setPmdEnabled(true);        model.setRuleSetStoredInProject(false);        model.setProjectWorkingSet(null);        model.setProjectRuleSet(basicRuleSet);        model.sync();        model.createDefaultRuleSetFile();        model.setRuleSetStoredInProject(true);        model.sync();        model.setRuleSetStoredInProject(false);        model.sync();        boolean b = model.isRuleSetStoredInProject();        assertFalse("the ruleset should'nt be stored in the project", b);    }    /**     * A project may work only on a subset of files defined by a working set     *     */    public void testProjectWorkingSetNull() throws PropertiesException {        IProjectPropertiesManager mgr = PMDPlugin.getDefault().getPropertiesManager();        IProjectProperties model = mgr.loadProjectProperties(this.testProject);        model.setProjectWorkingSet(null);        IWorkingSet w = model.getProjectWorkingSet();        assertNull("The project should not have a working set defined", w);    }    /**     * A project may know if it should be rebuilt or not     *     */    public void testRebuild1() throws PropertiesException {        IProjectPropertiesManager mgr = PMDPlugin.getDefault().getPropertiesManager();        IProjectProperties model = mgr.loadProjectProperties(this.testProject);        model.setPmdEnabled(false);        model.setProjectWorkingSet(null);        model.setRuleSetStoredInProject(false);        model.setNeedRebuild(false);        assertFalse(model.isNeedRebuild());    }    /**     * A project may know if it should be rebuilt or not     *     */    public void testRebuild2() throws PropertiesException {        IProjectPropertiesManager mgr = PMDPlugin.getDefault().getPropertiesManager();        IProjectProperties model = mgr.loadProjectProperties(this.testProject);        model.setPmdEnabled(true);        assertTrue(model.isNeedRebuild());    }    /**     * A project may know if it should be rebuilt or not     *     */    public void testRebuild3() throws PropertiesException {        IProjectPropertiesManager mgr = PMDPlugin.getDefault().getPropertiesManager();        IProjectProperties model = mgr.loadProjectProperties(this.testProject);        model.setPmdEnabled(true);        RuleSet pmdRuleSet = PMDPlugin.getDefault().getPreferencesManager().getRuleSet();        RuleSet fooRuleSet = new RuleSet();        Rule rule1 = pmdRuleSet.getRuleByName("EmptyCatchBlock");        fooRuleSet.addRule(rule1);        model.setProjectRuleSet(fooRuleSet);        assertTrue(model.isNeedRebuild());    }    /**     * @see junit.framework.TestCase#setUp()     */    @Override    protected void setUp() throws Exception {        super.setUp();        // 1. Create a Java project        this.testProject = EclipseUtils.createJavaProject("PMDTestProject");        assertTrue("A test project cannot be created; the tests cannot be performed.", this.testProject != null                && this.testProject.exists() && this.testProject.isAccessible());        // 2. Keep the plugin ruleset        this.initialPluginRuleSet = PMDPlugin.getDefault().getPreferencesManager().getRuleSet();        this.initialPluginRuleSet.getRules().clear();        Set<RuleSet> defaultRuleSets = PMDPlugin.getDefault().getRuleSetManager().getDefaultRuleSets();        for (RuleSet ruleSet : defaultRuleSets) {            this.initialPluginRuleSet.addRuleSet(ruleSet);        }    }    /**     * @see junit.framework.TestCase#tearDown()     */    @Override    protected void tearDown() throws Exception {        // 1. Delete the test project        if (this.testProject != null) {            if (this.testProject.exists() && this.testProject.isAccessible()) {                this.testProject.delete(true, true, null);                this.testProject = null;            }        }        // 2. Restore the plugin initial rule set        PMDPlugin.getDefault().getPreferencesManager().setRuleSet(this.initialPluginRuleSet);        super.tearDown();    }    private void dumpRuleSet(RuleSet ruleSet) {        System.out.println("Dumping rule set:" + ruleSet.getName());        for (Rule rule: ruleSet.getRules()) {            System.out.println(rule.getName());        }        System.out.println();    }}
package net.sourceforge.pmd.eclipse.ui.properties;import java.util.Iterator;import junit.framework.TestCase;import name.herlin.command.CommandException;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSetFactory;import net.sourceforge.pmd.eclipse.EclipseUtils;import net.sourceforge.pmd.eclipse.plugin.PMDPlugin;import net.sourceforge.pmd.eclipse.runtime.properties.IProjectProperties;import net.sourceforge.pmd.eclipse.runtime.properties.IProjectPropertiesManager;import net.sourceforge.pmd.eclipse.runtime.properties.PropertiesException;import org.eclipse.core.resources.IProject;public class UpdateProjectPropertiesCmdTest extends TestCase {    private IProject testProject;    @Override    protected void setUp() throws Exception {        super.setUp();        // 1. Create a Java project        this.testProject = EclipseUtils.createJavaProject("PMDTestProject");        assertTrue("A test project cannot be created; the tests cannot be performed.", this.testProject != null                && this.testProject.exists() && this.testProject.isAccessible());    }    @Override    protected void tearDown() throws Exception {        try {            // 1. Delete the test project            if (this.testProject != null) {                if (this.testProject.exists() && this.testProject.isAccessible()) {                    this.testProject.delete(true, true, null);                    this.testProject = null;                }            }            super.tearDown();        } catch (Exception e) {            System.out.println("Exception " + e.getClass().getName() + " when tearing down. Ignored.");        }    }    /**     * Bug: when a user deselect a project rule it is not saved     */    public void testBug() throws CommandException, PropertiesException {        RuleSetFactory factory = new RuleSetFactory();        // First ensure that the plugin initial ruleset is equal to the project        // ruleset        IProjectPropertiesManager mgr = PMDPlugin.getDefault().getPropertiesManager();        IProjectProperties model = mgr.loadProjectProperties(this.testProject);        RuleSet projectRuleSet = model.getProjectRuleSet();        assertEquals("The project ruleset is not equal to the plugin ruleset", PMDPlugin.getDefault()                .getPreferencesManager().getRuleSet().getRules(), projectRuleSet.getRules());        // 2. remove the first rule (keep its name for assertion)        RuleSet newRuleSet = new RuleSet();        newRuleSet.addRuleSet(projectRuleSet);        Iterator<Rule> i = newRuleSet.getRules().iterator();        Rule removedRule = i.next();        i.remove();        UpdateProjectPropertiesCmd cmd = new UpdateProjectPropertiesCmd();        cmd.setPmdEnabled(true);        cmd.setProject(this.testProject);        cmd.setProjectRuleSet(newRuleSet);        cmd.setProjectWorkingSet(null);        cmd.setRuleSetStoredInProject(false);        cmd.execute();        // 3. test the rule has correctly been removed        projectRuleSet = model.getProjectRuleSet();        assertNull("The rule has not been removed!", projectRuleSet.getRuleByName(removedRule.getName()));    }}
/* * Created on 6 f�vr. 2005 * * Copyright (c) 2004, PMD for Eclipse Development Team * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: * *     * Redistributions of source code must retain the above copyright *       notice, this list of conditions and the following disclaimer. *     * Redistributions in binary form must reproduce the above copyright *       notice, this list of conditions and the following disclaimer in the *       documentation and/or other materials provided with the distribution. *     * The end-user documentation included with the redistribution, if *       any, must include the following acknowledgement: *       "This product includes software developed in part by support from *        the Defense Advanced Research Project Agency (DARPA)" *     * Neither the name of "PMD for Eclipse Development Team" nor the names of its *       contributors may be used to endorse or promote products derived from *       this software without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package net.sourceforge.pmd.eclipse;import java.io.Reader;import java.io.StringReader;import java.util.Iterator;import junit.framework.TestCase;import net.sourceforge.pmd.PMDException;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSetFactory;import net.sourceforge.pmd.RuleSetNotFoundException;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.eclipse.runtime.cmd.PMDEngine;import net.sourceforge.pmd.lang.LanguageVersion;/** * Test if PMD can be run correctly * * @author Philippe Herlin * */public class BasicPMDTest extends TestCase {    /**     * Test case constructor     *     * @param name of the test case     */    public BasicPMDTest(String name) {        super(name);    }    /**     * One first thing the plugin must be able to do is to run PMD     *     */    public void testRunPmdJdk13() {        try {            PMDEngine pmd = new PMDEngine();            pmd.setLanguageVersion(LanguageVersion.JAVA_13);            String sourceCode = "public class Foo {\n public void foo() {\nreturn;\n}}";            Reader input = new StringReader(sourceCode);            RuleContext context = new RuleContext();            context.setSourceCodeFilename("foo.java");            context.setReport(new Report());            RuleSet basicRuleSet = new RuleSetFactory().createRuleSet("rulesets/basic.xml");            pmd.processFile(input, basicRuleSet, context);            Iterator<RuleViolation> iter = context.getReport().iterator();            assertTrue("There should be at least one violation", iter.hasNext());            RuleViolation violation = iter.next();            assertEquals(violation.getRule().getName(), "UnnecessaryReturn");            assertEquals(3, violation.getBeginLine());        } catch (RuleSetNotFoundException e) {            e.printStackTrace();            fail();        } catch (PMDException e) {            e.printStackTrace();            fail();        }    }    /**     * Let see with Java 1.4     *     */    public void testRunPmdJdk14() {        try {            PMDEngine pmd = new PMDEngine();            pmd.setLanguageVersion(LanguageVersion.JAVA_14);            String sourceCode = "public class Foo {\n public void foo() {\nreturn;\n}}";            Reader input = new StringReader(sourceCode);            RuleContext context = new RuleContext();            context.setSourceCodeFilename("foo.java");            context.setReport(new Report());            RuleSet basicRuleSet = new RuleSetFactory().createRuleSet("rulesets/basic.xml");            pmd.processFile(input, basicRuleSet, context);            Iterator<RuleViolation> iter = context.getReport().iterator();            assertTrue("There should be at least one violation", iter.hasNext());            RuleViolation violation = iter.next();            assertEquals(violation.getRule().getName(), "UnnecessaryReturn");            assertEquals(3, violation.getBeginLine());        } catch (RuleSetNotFoundException e) {            e.printStackTrace();            fail();        } catch (PMDException e) {            e.printStackTrace();            fail();        }    }    /**     * Let see with Java 1.5     *     */    public void testRunPmdJdk15() {        try {            PMDEngine pmd = new PMDEngine();            pmd.setLanguageVersion(LanguageVersion.JAVA_15);            String sourceCode = "public class Foo {\n public void foo() {\nreturn;\n}}";            Reader input = new StringReader(sourceCode);            RuleContext context = new RuleContext();            context.setSourceCodeFilename("foo.java");            context.setReport(new Report());            RuleSet basicRuleSet = new RuleSetFactory().createRuleSet("rulesets/basic.xml");            pmd.processFile(input, basicRuleSet, context);            Iterator<RuleViolation> iter = context.getReport().iterator();            assertTrue("There should be at least one violation", iter.hasNext());            RuleViolation violation = iter.next();            assertEquals(violation.getRule().getName(), "UnnecessaryReturn");            assertEquals(3, violation.getBeginLine());        } catch (RuleSetNotFoundException e) {            e.printStackTrace();            fail();        } catch (PMDException e) {            e.printStackTrace();            fail();        }    }    /**     * Try to load all the plugin known rulesets     *     */    public void testDefaulltRuleSets() {        try {            RuleSetFactory factory = new RuleSetFactory();            Iterator<RuleSet> iterator = factory.getRegisteredRuleSets();            while (iterator.hasNext()) {                iterator.next();            }        } catch (RuleSetNotFoundException e) {            e.printStackTrace();            fail("unable to load registered rulesets ");        }    }}