public class SymbolTableBuilderTest { private int y; private void foo() {  int x = 2; }}
package test.net.sourceforge.pmd.stat;import java.util.Iterator;import java.util.List;import java.util.ArrayList;import java.util.Random;import net.sourceforge.pmd.*;import net.sourceforge.pmd.stat.*;import junit.framework.AssertionFailedError;import junit.framework.TestCase;/** * This class tests the Statistical Rules in PMD. * * The idea is, that we fill up 999 datapoints into * the Stat Rule, and then throw random parameters * at it. * * The three parameters which are checked are: * sigma - # Sigmas over the mean. * topscore - Only the top 5 or so items. * minimum - Only things of score 10 or better * * When more than one parameter is lumped together, then * we expect the one which would return the fewest to * determine what gets sent back. * * So, we throw each collection of parameters, where each * one is a different order into the system.  We check the * results off of what the smallest value should be. * * If you are going to work with StatisticalRule any, please * bump the "NUM_TESTS" number up to something like 128.  That * way you are more likely to identify problems.  It is set low * now to make building and running tests easier (when we aren't * touching the file.) * * Note also, that when verifying the Sigma, I wasn't quite able * to determine how many results it would return (it would vary * from -2 to 2 of what I expected.)  That is what the delta * parameter on the verify method takes.  If you can figure it * out exactly, (without stealing code from the StatRule) then * feel free to change it and tighten the deltas. */public class StatisticalRuleTest    extends TestCase{    private DataPoint points[] = new DataPoint[1000];    private MockStatisticalRule IUT = null;    private String testName = null;private Random random = new Random();public static final double MAX_MINIMUM = 1000.0;public static final double NO_MINIMUM = -1.0;public static final double MAX_SIGMA = 5.0;public static final double NO_SIGMA = -1.0;public static final int MIN_TOPSCORE = 0;public static final int NO_TOPSCORE = -1;public static final double MEAN = 499.5;public static final double SIGMA = 288.6750;public static final int NUM_TESTS = 10;public static final double DELTA = 0.005;    public StatisticalRuleTest(String name)    {super( name );this.testName = name;    }    public void setUp() {IUT = new MockStatisticalRule();for (int i = 0; i < 1000; i++) {    points[i] = new DataPoint();    points[i].setScore( 1.0 * i );    points[i].setLineNumber( i );    points[i].setMessage("DataPoint[" + Integer.toString(i) + "]");    IUT.addDataPoint( points[i] );}    }/** * This test verifies that the Stat rule creates a Metric, * with the proper values. */public void testMetrics() throws Throwable{Report report = makeReport( IUT );Iterator metrics = report.metrics();assertTrue( metrics.hasNext());Object o = metrics.next();assertTrue( o instanceof Metric);Metric m = (Metric) o;assertEquals("test.net.sourceforge.pmd.stat.MockStatisticalRule",m.getMetricName());assertEquals( 0.0, m.getLowValue(), 0.05 );assertEquals( 999.0, m.getHighValue(), 0.05 );assertEquals( MEAN, m.getAverage(), 0.05 );assertEquals( SIGMA, m.getStandardDeviation(), 0.05 );}/** * This returns a Random value for Sigma which will * return some values. */public double randomSigma() {return random.nextDouble() * 1.0;}/** * This returns a Random value for Sigma which value * is greater than the parameter. */public double randomSigma(int minimum) {double minSigma = ((999 - minimum) - MEAN)/SIGMA;if ((minSigma <= 0) || (minSigma > 2)) return randomSigma();return minSigma + (random.nextDouble() * (2 - minSigma));}/** * This returns the expected number of results when * the Sigma rating is the smallest. */public int expectedSigma(double sigma) {long expectedMin = Math.round(MEAN + (sigma * SIGMA));if ((999 - expectedMin) < 0) return 0;return 999 - (int) expectedMin;}/** * This generates a random minimum value for testing. */public double randomMinimum() {return random.nextDouble() * 999;}/** * This generates a random minimum value for which fewer * results would be returned. */public double randomMinimum(int minimum) {double diffTarget = 1.0 * (999 - minimum);return (random.nextDouble() * minimum) + diffTarget;}/** * This returns the expected number of reports. * * If the Minimum comes in at 521.569 then we expect * 522, 523, ... 999 will pass. */public int expectedMinimum(double minimum) {Double d = new Double( minimum );return 999 - d.intValue();}public void testExpectedMinimum() {for (int i = 0; i < 999; i++) {assertEquals("Integer Min", 999 - i, expectedMinimum( i * 1.0 ));assertEquals("Double Min", 999 - i, expectedMinimum( (i * 1.0) + 0.5 ));}}/** * This returns a random value for Top Score. */public int randomTopScore() {return random.nextInt(999);}/** * This will return a random value for the Top Score * which will return more than the minimum provided. */public int randomTopScore(double target) {if (target < 0) return 0;return random.nextInt( (new Double(target)).intValue() );}/** * This will return the expected number of results * with the given Top Score. */public int expectedTopScore(int target) {return target;}    // Test Single Datapoint    public void testSingleDatapoint()    {        StatisticalRule IUT = new MockStatisticalRule();        DataPoint point = new DataPoint();        point.setScore(1001.0);        point.setLineNumber( 1001 );        point.setMessage("SingleDataPoint");        IUT.addProperty("minimum", "1000");        IUT.addDataPoint( point );        Report report = makeReport( IUT );        assertEquals("Expecting only one result.", 1, report.size());    }// Okay, we have three properties we need to// test in Combination://  S = Sigma//  T = Top Score//  M = Minimum//// They are listed in decreasing order of what// to expect.//// Thus testSM() should have the Sigma less than// the minimum, so we expect the Minimum # of results.//public void testS() throws Throwable{verifyResults( MAX_SIGMA, NO_MINIMUM, NO_TOPSCORE, 0, 2 );for (int i = 0; i < NUM_TESTS; i++) {double sigma = randomSigma();verifyResults( sigma, -1.0, -1, expectedSigma( sigma ), 2);}}public void testT() throws Throwable{verifyResults( NO_SIGMA, NO_MINIMUM, MIN_TOPSCORE, 0, 0 );for (int i = 0; i < NUM_TESTS; i++) {int topScore = randomTopScore();verifyResults( -1.0, -1.0, topScore, expectedTopScore(topScore), 0);}}public void testM() throws Throwable{verifyResults( NO_SIGMA, MAX_MINIMUM, NO_TOPSCORE, 0, 0 );for (int i = 0; i < NUM_TESTS; i++) {double minimum = randomMinimum();verifyResults( -1.0, minimum, -1, expectedMinimum( minimum ), 0 );}}public void testST() throws Throwable{verifyResults( randomSigma(), NO_MINIMUM, MIN_TOPSCORE, 0, 0 );for (int i = 0; i < NUM_TESTS; i++) {double sigma = randomSigma();int topScore = randomTopScore( expectedSigma( sigma ));verifyResults( sigma, NO_MINIMUM, topScore, expectedTopScore( topScore ), 0);}}public void testTS() throws Throwable{verifyResults( MAX_SIGMA, NO_MINIMUM, randomTopScore(), 0, 0 );for (int i = 0; i < NUM_TESTS; i++) {int topScore = randomTopScore();double sigma = randomSigma( expectedTopScore(topScore) );verifyResults( sigma, -1.0, topScore, expectedSigma( sigma ), 2);}}public void testSM() throws Throwable{verifyResults( randomSigma(), MAX_MINIMUM, NO_TOPSCORE, 0, 0);for (int i = 0; i < NUM_TESTS; i++) {double sigma = randomSigma();double minimum = randomMinimum( expectedSigma( sigma ));verifyResults( sigma, minimum, -1, expectedMinimum( minimum ), 0);}}public void testMS() throws Throwable{verifyResults(MAX_SIGMA, randomMinimum(), NO_TOPSCORE, 0, 0);for (int i = 0; i < NUM_TESTS; i++) {double minimum = randomMinimum();double sigma = randomSigma( expectedMinimum( minimum ));verifyResults( sigma, minimum, -1, expectedSigma( sigma ), 2 );}}public void testTM() throws Throwable{verifyResults(NO_SIGMA, MAX_MINIMUM, randomTopScore(), 0, 0);for (int i = 0; i < NUM_TESTS; i++) {int topScore = randomTopScore();double minimum = randomMinimum( expectedTopScore( topScore ));verifyResults( NO_SIGMA, minimum, topScore, expectedMinimum( minimum ), 0 );}}public void testMT() throws Throwable{verifyResults(NO_SIGMA, randomMinimum(), MIN_TOPSCORE, 0, 0);for (int i = 0; i < NUM_TESTS; i++) {double minimum = randomMinimum();int topScore = randomTopScore( expectedMinimum( minimum ));verifyResults( NO_SIGMA, minimum, topScore, expectedTopScore(topScore), 0);}}public void testSTM() throws Throwable{double sigma = randomSigma();verifyResults(sigma, MAX_MINIMUM, randomTopScore( expectedSigma( sigma )),  0, 0);for (int i = 0; i < NUM_TESTS; i++) {sigma = randomSigma();int topScore = randomTopScore( expectedSigma( sigma ));double minimum = randomMinimum( expectedTopScore( topScore ));verifyResults( sigma, minimum, topScore, expectedMinimum( minimum ), 0 );}}public void testSMT() throws Throwable{double sigma = randomSigma();verifyResults(sigma, randomMinimum(expectedSigma( sigma )), MIN_TOPSCORE,0, 0 );for (int i = 0; i < NUM_TESTS; i++) {sigma = randomSigma();double minimum = randomMinimum( expectedSigma( sigma ));int topScore = randomTopScore( expectedMinimum( minimum ));verifyResults( sigma, minimum, topScore,   expectedTopScore( topScore ), 0 );}}public void testTSM() throws Throwable{int topScore = randomTopScore();verifyResults(randomSigma( expectedTopScore( topScore )), MAX_MINIMUM,  topScore, 0, 0);for (int i = 0; i < NUM_TESTS; i++) {topScore = randomTopScore();double sigma = randomSigma( expectedTopScore( topScore ));double minimum = randomMinimum( expectedSigma( sigma ));verifyResults( sigma, minimum, topScore,   expectedMinimum( minimum ), 0 );}}public void testTMS() throws Throwable{int topScore = randomTopScore();verifyResults( MAX_SIGMA, randomMinimum( expectedTopScore( topScore )),topScore, 0, 0 );for (int i = 0; i < NUM_TESTS; i++) {topScore = randomTopScore();double minimum = randomMinimum( expectedTopScore( topScore ));double sigma = randomSigma( expectedMinimum( minimum ));verifyResults( sigma, minimum, topScore,expectedSigma( sigma ), 2 );}}/**  * Verifies what happens when you pass these parameters  * into the thing.  DELTA is the amount of error allowed.  * Usually DELTA is only used for Sigma, as we really can't  * calculate it exactly.  */public void verifyResults( double sigma, double minimum,   int topScore, int expected, int delta ){try {setUp();if (sigma >= 0) {IUT.addProperty("sigma", Double.toString(sigma));}if (minimum >= 0) {IUT.addProperty("minimum", Double.toString(minimum));}if (topScore >= 0) {IUT.addProperty("topscore", Integer.toString(topScore));}Report report = makeReport( IUT );if (delta == 0) {assertEquals("Unexpected number of results: sigma= " + Double.toString(sigma) + " min= " + Double.toString(minimum) + " topscore= " + Integer.toString(topScore), expected, report.size());} else {String assertStr = "Unexpected number of results: sigma= " +    Double.toString(sigma) + " min= " +    Double.toString(minimum) + " topscore= "+    Integer.toString(topScore) + " expected= " +    Integer.toString(expected) + " +/- " +    Integer.toString(delta) + " actual-result= " +    report.size();assertTrue( assertStr, report.size() >= (expected - delta));assertTrue( assertStr, report.size() <= (expected + delta));}} catch (AssertionFailedError afe) {System.err.println("******** " + testName + " ***********");if (sigma != NO_SIGMA) {System.err.println("SIGMA: " + Double.toString( sigma ) +      " EXPECT: " + Integer.toString(expectedSigma(sigma)));}if (minimum != NO_MINIMUM) {System.err.println("MIN: " + Double.toString( minimum ) +      " EXPECT: " + Integer.toString(expectedMinimum(minimum)));}if (topScore != NO_TOPSCORE) {System.err.println("TOP: " + Integer.toString( topScore ) +      " EXPECT: " + Integer.toString(expectedTopScore(topScore)));}throw afe;}}    public Report makeReport( Rule IUT ) {List list = new ArrayList();Report report = new Report();RuleContext ctx = new RuleContext();ctx.setReport( report );ctx.setSourceCodeFilename(testName);IUT.apply( list, ctx );return report;    }}
/** * Created on Aug 28, 2002 */package test.net.sourceforge.pmd.stat;import java.util.Random;import net.sourceforge.pmd.stat.Metric;import junit.framework.TestCase;/** * @author David Dixon-Peugh */public class MetricTest extends TestCase {private String testName = null;private Random random = new Random();    /**     * Constructor for MetricTest.     * @param arg0     */    public MetricTest(String arg0) {        super(arg0);this.testName = arg0;    }    public void testGetMetricName() {    Metric IUT = new Metric(testName, 0.0, 0.0, 0.0, 0.0);        assertEquals( testName, IUT.getMetricName() );    }    public void testGetLowValue() {double low = random.nextDouble();Metric IUT = new Metric( testName, low, 0.0, 0.0, 0.0);assertEquals( low, IUT.getLowValue(), 0.05 );        }    public void testGetHighValue() {    double high = random.nextDouble();    Metric IUT = new Metric( testName, 0.0, high, 0.0, 0.0);    assertEquals( high, IUT.getHighValue(), 0.05 );    }    public void testGetAverage() {    double mean = random.nextDouble();    Metric IUT = new Metric( testName, 0.0, 0.0, mean, 0.0);    assertEquals( mean, IUT.getAverage(), 0.05);    }    public void testGetStandardDeviation() {    double stdev = random.nextDouble();    Metric IUT = new Metric( testName, 0.0, 0.0, 0.0, stdev);    assertEquals( stdev, IUT.getStandardDeviation(), 0.05);    }}
/* $Id$ */package test.net.sourceforge.pmd.rules.design;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.rules.design.LongParameterListRule;import test.net.sourceforge.pmd.rules.RuleTst;public class LongParameterListRuleTest    extends RuleTst{    public LongParameterListRule getIUT() {LongParameterListRule IUT = new LongParameterListRule();IUT.addProperty("minimum", "9");return IUT;    }    public void testShortMethod() throws Throwable {Report report = process("LongParameterList0.java", getIUT() );assertEquals( 0, report.size() );    }    public void testOneLongMethod() throws Throwable {Report report = process("LongParameterList1.java", getIUT() );assertEquals( 1, report.size() );    }//      public void testTwoLongMethods() throws Throwable {//  Report report = process("LongParameterList2.java", getIUT() );//  assertEquals( 2, report.size() );//      }}
package test.net.sourceforge.pmd.rules.design;import test.net.sourceforge.pmd.rules.*;import net.sourceforge.pmd.*;import net.sourceforge.pmd.ast.*;import net.sourceforge.pmd.rules.design.*;import net.sourceforge.pmd.stat.Metric;public class UseSingletonRuleTest    extends RuleTst implements ReportListener{    public void testUseSingleton1()throws Throwable     {Report report = process("UseSingleton1.java",new UseSingletonRule());assertEquals( 1, report.size() );    }    public void testUseSingleton2() throws Throwable     {Report report = process("UseSingleton2.java",new UseSingletonRule());assertEquals( 0, report.size() );    }    public void testUseSingleton3() throws Throwable     {Report report = process("UseSingleton3.java",new UseSingletonRule());assertEquals( 1, report.size() );    }    public void testUseSingleton4()throws Throwable     {Report report = process("UseSingleton4.java",new UseSingletonRule());assertEquals( 0, report.size() );    }    public void testResetState() throws Throwable{        callbacks = 0;        Rule rule = new UseSingletonRule();        Report report = new Report();        report.addListener(this);        process("UseSingleton3.java", rule, report);        process("UseSingleton4.java", rule, report);        assertEquals( 1, callbacks );    }    private int callbacks;    public void ruleViolationAdded(RuleViolation ruleViolation) {        callbacks++;    }        public void metricAdded(Metric metric) { }}
/* * User: tom * Date: Sep 4, 2002 * Time: 11:44:14 AM */package test.net.sourceforge.pmd.rules.design;import test.net.sourceforge.pmd.rules.RuleTst;import net.sourceforge.pmd.rules.design.PositionalIteratorRule;public class PositionalIteratorRuleTest extends RuleTst {    public void test1() throws Throwable {        runTest("PositionalIterator1.java", 1, new PositionalIteratorRule());    }    public void test2() throws Throwable {        runTest("PositionalIterator2.java", 0, new PositionalIteratorRule());    }    public void test3() throws Throwable {        runTest("PositionalIterator3.java", 0, new PositionalIteratorRule());    }}
/* $Id$ */package test.net.sourceforge.pmd.rules.design;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.rules.design.LongMethodRule;import test.net.sourceforge.pmd.rules.RuleTst;public class LongMethodRuleTest    extends RuleTst{    public LongMethodRule getIUT() {        LongMethodRule IUT = new LongMethodRule();        IUT.addProperty("minimum", "200");        return IUT;    }    public void testShortMethod() throws Throwable {Report report = process("LongMethod1.java", getIUT() );assertEquals( 0, report.size() );    }    public void testReallyLongMethod() throws Throwable {Report report = process("LongMethod2.java", getIUT() );assertEquals( 1, report.size() );    }    public void testReallyLongMethodWithLongerRange() throws Throwable {        LongMethodRule IUT = getIUT();        IUT.addProperty("minimum", "1000");Report report = process("LongMethod2.java", IUT );assertEquals( 0, report.size() );    }    public void testNotQuiteLongMethod() throws Throwable {Report report = process("LongMethod3.java", getIUT() );assertEquals( 0, report.size() );    }    public void testLongMethod() throws Throwable {Report report = process("LongMethod4.java", getIUT() );assertEquals( 1, report.size() );    }}
/* $Id$ */package test.net.sourceforge.pmd.rules.design;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.rules.design.LongClassRule;import test.net.sourceforge.pmd.rules.RuleTst;public class LongClassRuleTest    extends RuleTst{    public LongClassRule getIUT() {        LongClassRule IUT = new LongClassRule();        IUT.addProperty("minimum", "1000");        return IUT;    }    public void testShortClass() throws Throwable {Report report = process("LongClass0.java", getIUT() );assertEquals( 0, report.size() );    }    public void testLongClass() throws Throwable {Report report = process("LongClass1.java", getIUT() );assertEquals( 1, report.size() );    }    public void testLongClassWithLongerTest() throws Throwable {        LongClassRule IUT = getIUT();        IUT.addProperty("minimum", "2000");Report report = process("LongClass1.java", IUT );assertEquals( 0, report.size() );    }    public void testNotQuiteLongClass() throws Throwable {Report report = process("LongClass2.java", getIUT() );assertEquals( 0, report.size() );    }}
/* * User: tom * Date: Sep 26, 2002 * Time: 10:45:10 AM */package test.net.sourceforge.pmd.rules.design;import test.net.sourceforge.pmd.rules.RuleTst;import net.sourceforge.pmd.rules.design.OnlyOneReturnRule;public class OnlyOneReturnRuleTest extends RuleTst {    public void test1() throws Throwable {        runTest("OnlyOneReturn1.java", 1, new OnlyOneReturnRule());    }    public void test2() throws Throwable {        runTest("OnlyOneReturn2.java", 0, new OnlyOneReturnRule());    }    public void test3() throws Throwable {        runTest("OnlyOneReturn3.java", 0, new OnlyOneReturnRule());    }}
/* * User: tom * Date: Jul 22, 2002 * Time: 12:05:25 PM */package test.net.sourceforge.pmd.rules.design;import test.net.sourceforge.pmd.rules.RuleTst;import net.sourceforge.pmd.rules.design.LooseCouplingRule;public class LooseCouplingRuleTest extends RuleTst {    private LooseCouplingRule rule;    public void setUp() {        rule = new LooseCouplingRule();        rule.setMessage("Avoid this stuff -> ''{0}''");    }    public void test1() throws Throwable {        runTest("LooseCoupling1.java", 1, rule);    }    public void test2() throws Throwable {        runTest("LooseCoupling2.java", 0, rule);    }    public void test3() throws Throwable {        runTest("LooseCoupling3.java", 0, rule);    }    public void test4() throws Throwable {        runTest("LooseCoupling4.java", 0, rule);    }    public void test5() throws Throwable {        runTest("LooseCoupling5.java", 1, rule);    }    public void test6() throws Throwable {        runTest("LooseCoupling6.java", 2, rule);    }    public void test7() throws Throwable {        runTest("LooseCoupling7.java", 2, rule);    }    public void test8() throws Throwable {        runTest("LooseCoupling8.java", 1, rule);    }}
/* * User: tom * Date: Sep 27, 2002 * Time: 4:18:43 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.JumbledIncrementerRule;public class JumbledIncrementerRuleTest extends RuleTst {    public void test1() throws Throwable {        runTest("JumbledIncrementerRule1.java", 1, new JumbledIncrementerRule());    }    public void test2() throws Throwable {        runTest("JumbledIncrementerRule2.java", 0, new JumbledIncrementerRule());    }    public void test3() throws Throwable {        runTest("JumbledIncrementerRule3.java", 0, new JumbledIncrementerRule());    }}
package test.net.sourceforge.pmd.rules;import test.net.sourceforge.pmd.*;import net.sourceforge.pmd.*;import net.sourceforge.pmd.rules.LongVariableRule;import junit.framework.*;public class LongVariableRuleTest    extends RuleTst{    private LongVariableRule rule;    public void setUp() {        rule = new LongVariableRule();        rule.setMessage("Avoid long names like {0}");        rule.addProperty("minimumLength", "12");    }    public void testLongVariableField() throws Throwable {Report report = process("LongVariableField.java",rule );assertEquals( 1, report.size() );    }    public void testLongVariableLocal() throws Throwable {Report report = process("LongVariableLocal.java",rule );assertEquals( 1, report.size() );    }    public void testLongVariableFor() throws Throwable {Report report = process("LongVariableFor.java",rule );assertEquals( 1, report.size() );    }    public void testLongVariableParam() throws Throwable {Report report = process("LongVariableParam.java",rule );assertEquals( 1, report.size() );    }    public void testLongVariableNone() throws Throwable {Report report = process("LongVariableNone.java",rule );assertEquals( 0, report.size() );    }}
/* * User: tom * Date: Aug 14, 2002 * Time: 11:29:16 AM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.rules.SimplifyBooleanReturnsRule;public class SimplifyBooleanReturnsRuleTest extends RuleTst {    public void test1() throws Throwable {        Report report = process("SimplifyBooleanReturns1.java", new SimplifyBooleanReturnsRule());        assertEquals(1, report.size());    }    public void test2() throws Throwable {        Report report = process("SimplifyBooleanReturns2.java", new SimplifyBooleanReturnsRule());        assertEquals(1, report.size());    }    public void test3() throws Throwable {        Report report = process("SimplifyBooleanReturns3.java", new SimplifyBooleanReturnsRule());        assertTrue(report.isEmpty());    }}
/* * User: tom * Date: Jun 28, 2002 * Time: 2:55:48 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.IfElseStmtsMustUseBracesRule;import net.sourceforge.pmd.Report;public class IfElseStmtsMustUseBracesRuleTest extends RuleTst {    public void testIfElseStmtsMustUseBraces1() throws Throwable {        Report report = process("IfElseStmtsNeedBraces1.java", new IfElseStmtsMustUseBracesRule());        assertEquals(1, report.size());    }    public void testIfElseStmtsMustUseBraces2() throws Throwable {        Report report = process("IfElseStmtsNeedBraces2.java", new IfElseStmtsMustUseBracesRule());        assertTrue(report.isEmpty());    }}
/* * User: tom * Date: Jun 28, 2002 * Time: 1:43:05 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.*;import net.sourceforge.pmd.rules.UnusedLocalVariableRule;public class UnusedLocalVariableTest extends RuleTst {    private UnusedLocalVariableRule rule;    public void setUp() {        rule = new UnusedLocalVariableRule();        rule.setMessage("Avoid this stuff -> ''{0}''");    }    public void test1() throws Throwable {        runTest("Unused1.java", 1, rule);    }    public void test2() throws Throwable {        runTest("Unused2.java", 1, rule);    }    public void test3() throws Throwable {        runTest("Unused3.java", 1, rule);    }    public void test4() throws Throwable {        runTest("Unused4.java", 0, rule);    }    public void test5() throws Throwable {        runTest("Unused5.java", 1, rule);    }    public void test6() throws Throwable {        runTest("Unused6.java", 0, rule);    }    public void test7() throws Throwable {        runTest("Unused7.java", 0, rule);    }    public void test8() throws Throwable {        runTest("Unused8.java", 0, rule);    }    public void test9() throws Throwable {        runTest("Unused9.java", 0, rule);    }    public void test10() throws Throwable {        runTest("Unused10.java", 0, rule);    }    public void test11() throws Throwable {        runTest("Unused11.java", 2, rule);    }    public void test12() throws Throwable {        runTest("Unused12.java", 0, rule);    }    public void test13() throws Throwable {        runTest("Unused13.java", 0, rule);    }    public void test14() throws Throwable {        runTest("Unused14.java", 2, rule);    }    public void test15() throws Throwable {        runTest("Unused15.java", 0, rule);    }}
/* * User: tom * Date: Oct 11, 2002 * Time: 4:41:46 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.UnusedFormalParameterRule;public class UnusedFormalParameterRuleTest  extends RuleTst {    private UnusedFormalParameterRule rule;    public void setUp() {        rule = new UnusedFormalParameterRule();        rule.setMessage("Avoid this stuff -> ''{0}''");    }    public void testOneParam() throws Throwable {        runTest("UnusedFormalParam1.java", 1, rule);    }    public void testFullyQualified() throws Throwable {        runTest("UnusedFormalParam2.java", 0, rule);    }    public void testOneParamWithMethodCall() throws Throwable {        runTest("UnusedFormalParam3.java", 0, rule);    }    public void testInterface() throws Throwable {        runTest("UnusedFormalParam4.java", 0, rule);    }}
/* * User: tom * Date: Jun 28, 2002 * Time: 2:35:51 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.UnusedPrivateInstanceVariableRule;public class UnusedPrivateInstanceVariableRuleTest extends RuleTst {    private UnusedPrivateInstanceVariableRule rule;    public void setUp() {        rule = new UnusedPrivateInstanceVariableRule();        rule.setMessage("Avoid this stuff -> ''{0}''");    }   public void test1() throws Throwable {       runTest("UnusedPrivateInstanceVar1.java", 1, rule);    }    public void test2() throws Throwable {        runTest("UnusedPrivateInstanceVar2.java", 0, rule);    }    public void test3() throws Throwable {        runTest("UnusedPrivateInstanceVar3.java", 1, rule);    }    public void test4() throws Throwable {        runTest("UnusedPrivateInstanceVar4.java", 0, rule);    }    public void test6() throws Throwable {        runTest("UnusedPrivateInstanceVar6.java", 0, rule);    }    public void test7() throws Throwable {        runTest("UnusedPrivateInstanceVar7.java", 0, rule);    }    public void test8() throws Throwable {        runTest("UnusedPrivateInstanceVar8.java", 0, rule);    }    public void test9() throws Throwable {        runTest("UnusedPrivateInstanceVar9.java", 1, rule);    }    // TODO    // this test defines the current behavior of this rule    // i.e., it doesn't check instance vars in inner classes    // when that's fixed, this test will break    // and we should replace the current test with the commented out test    // TODO    public void test10() throws Throwable {        runTest("UnusedPrivateInstanceVar10.java", 0, rule);        //runTest("UnusedPrivateInstanceVar10.java", 1, rule);    }    public void test11() throws Throwable {        runTest("UnusedPrivateInstanceVar11.java", 1, rule);    }    public void test12() throws Throwable {        runTest("UnusedPrivateInstanceVar12.java", 0, rule);    }    public void test13() throws Throwable {        runTest("UnusedPrivateInstanceVar13.java", 0, rule);    }    public void test14() throws Throwable {        runTest("UnusedPrivateInstanceVar14.java", 1, rule);    }    public void test15() throws Throwable {        runTest("UnusedPrivateInstanceVar15.java", 2, rule);    }    public void test16() throws Throwable {        runTest("UnusedPrivateInstanceVar16.java", 1, rule);    }    public void test17() throws Throwable {        runTest("UnusedPrivateInstanceVar17.java", 0, rule);    }    public void test18() throws Throwable {        runTest("UnusedPrivateInstanceVar18.java", 0, rule);    }    public void test19() throws Throwable {        runTest("UnusedPrivateInstanceVar19.java", 0, rule);    }    public void test20() throws Throwable {        runTest("UnusedPrivateInstanceVar20.java", 0, rule);    }}
/* * User: tom * Date: Jul 3, 2002 * Time: 9:40:47 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcodeRule;public class OverrideBothEqualsAndHashcodeRuleTest extends RuleTst {    public void test1() throws Throwable{        runTest("OverrideBothEqualsAndHashcode1.java", 1, new OverrideBothEqualsAndHashcodeRule());    }    public void test2() throws Throwable{        runTest("OverrideBothEqualsAndHashcode2.java", 1, new OverrideBothEqualsAndHashcodeRule());    }    public void test3() throws Throwable{        runTest("OverrideBothEqualsAndHashcode3.java", 0, new OverrideBothEqualsAndHashcodeRule());    }    public void test4() throws Throwable{        runTest("OverrideBothEqualsAndHashcode4.java", 0, new OverrideBothEqualsAndHashcodeRule());    }}
/* * User: tom * Date: Jul 19, 2002 * Time: 11:32:02 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.rules.ForLoopsMustUseBracesRule;public class ForLoopsMustUseBracesRuleTest extends RuleTst {    public void test1() throws Throwable {        Report report = process("ForLoopsNeedBraces1.java", new ForLoopsMustUseBracesRule());        assertEquals(1, report.size());    }    public void test2() throws Throwable {        Report report = process("ForLoopsNeedBraces2.java", new ForLoopsMustUseBracesRule());        assertTrue(report.isEmpty());    }    public void test3() throws Throwable {        Report report = process("ForLoopsNeedBraces3.java", new ForLoopsMustUseBracesRule());        assertEquals(1, report.size());    }    public void test4() throws Throwable {        Report report = process("ForLoopsNeedBraces4.java", new ForLoopsMustUseBracesRule());        assertEquals(1, report.size());    }    public void test5() throws Throwable {        Report report = process("ForLoopsNeedBraces5.java", new ForLoopsMustUseBracesRule());        assertEquals(1, report.size());    }}
package test.net.sourceforge.pmd.rules;import test.net.sourceforge.pmd.*;import net.sourceforge.pmd.*;import net.sourceforge.pmd.rules.ShortVariableRule;import junit.framework.*;public class ShortVariableRuleTest    extends RuleTst{    private ShortVariableRule rule;    public void setUp() {        rule = new ShortVariableRule();        rule.setMessage("Avoid stuff like -> ''{0}''");        rule.addProperty("minimumLength", "3");    }    public void testShortVariableField() throws Throwable {Report report = process("ShortVariableField.java",rule );assertEquals( 1, report.size() );    }    public void testShortVariableLocal() throws Throwable {Report report = process("ShortVariableLocal.java",rule );assertEquals( 1, report.size() );    }    public void testShortVariableFor() throws Throwable {Report report = process("ShortVariableFor.java",rule );assertEquals( 0, report.size() );    }    public void testShortVariableParam() throws Throwable {Report report = process("ShortVariableParam.java",rule );assertEquals( 1, report.size() );    }    public void testShortVariableNone() throws Throwable {Report report = process("ShortVariableNone.java",rule );assertEquals( 0, report.size() );    }}
/* * User: tom * Date: Jul 12, 2002 * Time: 10:51:59 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.DuplicateImportsRule;public class DuplicateImportsRuleTest extends RuleTst {    private DuplicateImportsRule rule;    public void setUp() {        rule = new DuplicateImportsRule();        rule.setMessage("Avoid this stuff -> ''{0}''");    }    public void test1() throws Throwable {        runTest("DuplicateImports.java", 1, rule);    }    public void test2() throws Throwable {        runTest("DuplicateImports2.java", 1, rule);    }    public void test3() throws Throwable {        runTest("DuplicateImports3.java", 1, rule);    }    public void test4() throws Throwable {        runTest("DuplicateImports4.java", 0, rule);    }}
/* * User: tom * Date: Jul 8, 2002 * Time: 3:31:37 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.rules.EmptyCatchBlockRule;import net.sourceforge.pmd.rules.EmptyTryBlockRule;public class EmptyTryBlockRuleTest extends RuleTst {    public void testEmptyTryBlock1() throws Throwable {        Report report = process("EmptyTryBlock1.java", new EmptyTryBlockRule());        assertEquals(1, report.size());        assertEquals(new EmptyTryBlockRule(), ((RuleViolation)report.iterator().next()).getRule());    }    public void testEmptyTryBlock2() throws Throwable {        Report report = process("EmptyTryBlock2.java", new EmptyTryBlockRule());        assertEquals(1, report.size());        assertEquals(new EmptyTryBlockRule(), ((RuleViolation)report.iterator().next()).getRule());    }    public void testEmptyTryBlock3() throws Throwable {        Report report = process("EmptyTryBlock3.java", new EmptyTryBlockRule());        assertTrue(report.isEmpty());    }}
/* * User: tom * Date: Jun 28, 2002 * Time: 2:34:20 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.rules.UnnecessaryConversionTemporaryRule;public class UnnecessaryTemporariesRuleTest extends RuleTst{    public void testUnnecessaryTemporaries() throws Throwable {        Report report = process("UnnecessaryTemporary.java", new UnnecessaryConversionTemporaryRule());        assertEquals(6, report.size());        assertEquals(new UnnecessaryConversionTemporaryRule(), ((RuleViolation)report.iterator().next()).getRule());    }}
/* * User: tom * Date: Sep 12, 2002 * Time: 2:01:10 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.StringInstantiationRule;public class StringInstantiationRuleTest extends RuleTst {    public void test1() throws Throwable {        runTest("StringInstantiation1.java", 2, new StringInstantiationRule());    }    public void test2() throws Throwable {        runTest("StringInstantiation2.java", 0, new StringInstantiationRule());    }    public void test3() throws Throwable {        runTest("StringInstantiation3.java", 0, new StringInstantiationRule());    }    public void test4() throws Throwable {        runTest("StringInstantiation4.java", 0, new StringInstantiationRule());    }}
/* * User: tom * Date: Oct 10, 2002 * Time: 3:26:45 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.StringToStringRule;public class StringToStringRuleTest extends RuleTst {    public void testLocalVar() throws Throwable {        runTest("StringToString1.java", 1, new StringToStringRule());    }    public void testParam() throws Throwable {        runTest("StringToString2.java", 1, new StringToStringRule());    }    public void testInstanceVar() throws Throwable {        runTest("StringToString3.java", 1, new StringToStringRule());    }    public void testPrimitiveType() throws Throwable {        runTest("StringToString4.java", 0, new StringToStringRule());    }    public void testMultipleSimilarParams() throws Throwable {        runTest("StringToString5.java", 0, new StringToStringRule());    }    public void testStringArray() throws Throwable {        runTest("StringToString6.java", 1, new StringToStringRule());    }}
/* * User: tom * Date: Jul 19, 2002 * Time: 12:25:27 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.UnusedPrivateMethodRule;import net.sourceforge.pmd.Report;public class UnusedPrivateMethodRuleTest  extends RuleTst {    private UnusedPrivateMethodRule rule;    public void setUp() {        rule = new UnusedPrivateMethodRule();        rule.setMessage("Avoid this stuff -> ''{0}''");    }    public void test1() throws Throwable {        runTest("UnusedPrivateMethod1.java", 0, rule);    }    public void test2() throws Throwable {        runTest("UnusedPrivateMethod2.java", 1, rule);    }    public void test3() throws Throwable {        runTest("UnusedPrivateMethod3.java", 0, rule);    }    public void test4() throws Throwable {        runTest("UnusedPrivateMethod4.java", 1, rule);    }    public void test5() throws Throwable {        runTest("UnusedPrivateMethod5.java", 0, rule);    }    public void test6() throws Throwable {        runTest("UnusedPrivateMethod6.java", 0, rule);    }}
/* * User: tom * Date: Sep 5, 2002 * Time: 2:37:46 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.IfStmtsMustUseBracesRule;public class IfStmtsMustUseBracesRuleTest extends RuleTst {    public void test1() throws Throwable {        runTest("IfStmtsMustUseBraces1.java", 1, new IfStmtsMustUseBracesRule());    }    public void test2() throws Throwable {        runTest("IfStmtsMustUseBraces2.java", 0, new IfStmtsMustUseBracesRule());    }}
package test.net.sourceforge.pmd.rules;import test.net.sourceforge.pmd.*;import net.sourceforge.pmd.*;import net.sourceforge.pmd.rules.ShortMethodNameRule;import junit.framework.*;public class ShortMethodNameRuleTest    extends RuleTst{    private ShortMethodNameRule rule;    public void setUp() {        rule = new ShortMethodNameRule();        rule.setMessage("Avoid this stuff -> {0}");        rule.addProperty("minimumLength", "3");    }    public void testShortMethodName0() throws Throwable {Report report = process("ShortMethodName0.java",rule );assertEquals( 0, report.size() );    }    public void testShortMethodName1() throws Throwable {Report report = process("ShortMethodName1.java",rule );assertEquals( 1, report.size() );    }    public void testShortMethodName2() throws Throwable {Report report = process("ShortMethodName2.java",rule );assertEquals( 2, report.size() );    }    public void testShortMethodName3() throws Throwable {Report report = process("ShortMethodName3.java",rule );assertEquals( 1, report.size() );    }}
/* * User: tom * Date: Jun 28, 2002 * Time: 1:56:19 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.renderers.Renderer;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.rules.EmptyCatchBlockRule;public class EmptyCatchBlockRuleTest extends RuleTst {    public void testEmptyCatchBlock() throws Throwable {        Report report = process("EmptyCatchBlock.java", new EmptyCatchBlockRule());        assertEquals(1, report.size());        assertEquals(new EmptyCatchBlockRule(), ((RuleViolation)report.iterator().next()).getRule());    }    public void testEmptyCatchBlock2() throws Throwable {        Report report = process("EmptyCatchBlock2.java", new EmptyCatchBlockRule());        assertTrue(report.isEmpty());    }    public void testEmptyCatchBlock3() throws Throwable {        Report report = process("EmptyCatchBlock3.java", new EmptyCatchBlockRule());        assertEquals(1, report.size());        assertEquals(new EmptyCatchBlockRule(), ((RuleViolation)report.iterator().next()).getRule());    }}
/* * User: tom * Date: Sep 5, 2002 * Time: 2:19:15 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.SwitchStmtsShouldHaveDefaultRule;public class SwitchStmtsShouldHaveDefaultRuleTest extends RuleTst {    public void test1() throws Throwable {        runTest("SwitchStmtsShouldHaveDefault1.java", 1, new SwitchStmtsShouldHaveDefaultRule());    }    public void test2()  throws Throwable {        runTest("SwitchStmtsShouldHaveDefault2.java", 0, new SwitchStmtsShouldHaveDefaultRule());    }}
/* * User: tom * Date: Jul 2, 2002 * Time: 11:08:40 AM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.rules.EmptyWhileStmtRule;public class EmptyWhileStmtRuleTest extends RuleTst {    public void testEmptyWhileStmtRule() throws Throwable {        Report report = process("EmptyWhileStmtRule.java", new EmptyWhileStmtRule());        assertEquals(1, report.size());        assertEquals(new EmptyWhileStmtRule(), ((RuleViolation)report.iterator().next()).getRule());    }}
/* * User: tom * Date: Sep 11, 2002 * Time: 2:45:29 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.JUnitStaticSuiteRule;public class JUnitStaticSuiteRuleTest extends RuleTst {    public void testNonstatic() throws Throwable {        runTest("JUnitStaticSuite1.java", 1, new JUnitStaticSuiteRule());    }    public void testGoodOK() throws Throwable {        runTest("JUnitStaticSuite2.java", 0, new JUnitStaticSuiteRule());    }    public void testPrivateSuite() throws Throwable {        runTest("JUnitStaticSuite3.java", 1, new JUnitStaticSuiteRule());    }}
/* * User: tom * Date: Jul 2, 2002 * Time: 11:07:25 AM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.rules.EmptyIfStmtRule;public class EmptyIfStmtRuleTest extends RuleTst {    public void testOneEmptyOneNotEmpty() throws Throwable {        runTest("EmptyIfStmtRule.java", 1, new EmptyIfStmtRule());    }}
/* * User: tom * Date: Jul 19, 2002 * Time: 11:17:08 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.rules.WhileLoopsMustUseBracesRule;public class WhileLoopsMustUseBracesRuleTest extends RuleTst {    public void test1() throws Throwable {        Report report = process("WhileLoopsNeedBraces1.java", new WhileLoopsMustUseBracesRule());        assertEquals(1, report.size());    }    public void test2() throws Throwable {        Report report = process("WhileLoopsNeedBraces2.java", new WhileLoopsMustUseBracesRule());        assertTrue(report.isEmpty());    }}
/* * User: tom * Date: Aug 23, 2002 * Time: 9:11:25 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.UnusedImportsRule;import net.sourceforge.pmd.Report;public class UnusedImportsRuleTest extends RuleTst {    private UnusedImportsRule rule;    public void setUp() {        rule = new UnusedImportsRule();        rule.setMessage("Avoid this stuff -> ''{0}''");    }    public void test1() throws Throwable {        Report report = process("UnusedImports1.java", rule);        assertEquals(1, report.size());    }    public void test2() throws Throwable {        Report report = process("UnusedImports2.java", rule);        assertTrue(report.isEmpty());    }    public void test3() throws Throwable {        Report report = process("UnusedImports3.java", rule);        assertEquals(2, report.size());    }    public void test4() throws Throwable {        Report report = process("UnusedImports4.java", rule);        assertTrue(report.isEmpty());    }}
/* * User: tom * Date: Sep 10, 2002 * Time: 1:15:05 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.JUnitSpellingRule;import net.sourceforge.pmd.Rule;public class JUnitSpellingRuleTest extends RuleTst {    private Rule rule;    public void setUp() {        rule = new JUnitSpellingRule();        rule.setMessage("when you mean ''{0}'', don't do ''{1}''");    }    public void test1() throws Throwable {        runTest("JUnitSpelling1.java", 2, rule);    }    public void test2() throws Throwable {        runTest("JUnitSpelling2.java", 2, rule);    }    public void test3() throws Throwable {        runTest("JUnitSpelling3.java", 0, rule);    }    public void test4() throws Throwable {        runTest("JUnitSpelling4.java", 0, rule);    }}
/* * User: tom * Date: Jul 10, 2002 * Time: 3:22:57 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.rules.EmptyFinallyBlockRule;public class EmptyFinallyBlockRuleTest extends RuleTst {    public void testEmptyFinallyBlock1() throws Throwable {        Report report = process("EmptyFinallyBlock1.java", new EmptyFinallyBlockRule());        assertEquals(1, report.size());        assertEquals(new EmptyFinallyBlockRule(), ((RuleViolation)report.iterator().next()).getRule());    }    public void testEmptyFinallyBlock2() throws Throwable {        Report report = process("EmptyFinallyBlock2.java", new EmptyFinallyBlockRule());        assertEquals(1, report.size());        assertEquals(new EmptyFinallyBlockRule(), ((RuleViolation)report.iterator().next()).getRule());    }    public void testEmptyFinallyBlock3() throws Throwable {        Report report = process("EmptyFinallyBlock3.java", new EmptyFinallyBlockRule());        assertTrue(report.isEmpty());    }}
/* * User: tom * Date: Oct 1, 2002 * Time: 9:50:07 AM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.AvoidDeeplyNestedIfStmtsRule;import net.sourceforge.pmd.Rule;public class AvoidDeeplyNestedIfStmtsRuleTest extends RuleTst {    private Rule rule;    public void setUp() {        rule = new AvoidDeeplyNestedIfStmtsRule();        rule.addProperty("problemDepth", "3");    }    public void test1() throws Throwable {        runTest("AvoidDeeplyNestedIfStmtsRule1.java", 1, rule);    }/*    // TODO - this test fails... is that OK?    public void test2() throws Throwable {        runTest("AvoidDeeplyNestedIfStmtsRule2.java", 0, rule);    }*/}
/* * User: tom * Date: Sep 5, 2002 * Time: 1:51:40 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.rules.EmptySwitchStmtRule;public class EmptySwitchStmtRuleTest extends RuleTst {    public void test1() throws Throwable {        runTest("EmptySwitchStmt1.java", 1, new EmptySwitchStmtRule());    }    public void test2()  throws Throwable {        runTest("EmptySwitchStmt2.java", 0, new EmptySwitchStmtRule());    }}
/* * User: tom * Date: Jul 15, 2002 * Time: 8:46:03 AM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.rules.DontImportJavaLangRule;public class DontImportJavaLangRuleTest extends RuleTst {    public void test1() throws Throwable {        Report report = process("DontImportJavaLang1.java", new DontImportJavaLangRule());        assertEquals(1, report.size());    }    public void test2() throws Throwable {        Report report = process("DontImportJavaLang2.java", new DontImportJavaLangRule());        assertEquals(1, report.size());    }    public void test3() throws Throwable {        Report report = process("DontImportJavaLang3.java", new DontImportJavaLangRule());        assertTrue(report.isEmpty());    }}
/* * User: tom * Date: Jul 31, 2002 * Time: 10:08:40 AM */package test.net.sourceforge.pmd.cpd;import junit.framework.TestCase;import net.sourceforge.pmd.cpd.Tile;import net.sourceforge.pmd.cpd.TokenEntry;import java.util.ArrayList;import java.util.List;public class TileTest extends TestCase {    public void testConstructors() {        TokenEntry tok = new TokenEntry("a", 2,"foo", 5);        Tile tile = new Tile(tok);        assertEquals(1, tile.getTokenCount());        List tokens = new ArrayList();        tokens.add(tok);        tile = new Tile(tokens);        assertEquals(1, tile.getTokenCount());    }    public void testCopy() {        TokenEntry tok = new TokenEntry("a", 2,"foo", 5);        Tile tile = new Tile(tok);        Tile tileCopy = tile.copy();        assertEquals(1, tile.getTokenCount());        assertEquals(tok, tileCopy.getTokens().get(0));    }    public void testEquality() {        Tile tile = new Tile(new TokenEntry("a", 2,"foo", 5));        Tile tile2 = new Tile(new TokenEntry("a", 2,"foo", 5));        assertEquals(tile, tile2);        assertEquals(tile.hashCode(), tile2.hashCode());    }    public void testContains() {        TokenEntry tok = new TokenEntry("a", 2,"foo", 5);        Tile tile = new Tile(tok);        assertTrue(tile.contains(tok));        assertTrue(tile.contains(new TokenEntry("a", 2,"foo", 5)));    }    public void testAdd() {        TokenEntry tok = new TokenEntry("a", 2,"foo", 5);        Tile tile = new Tile(tok);        tile.add(new TokenEntry("l", 8, "bar", 5));        assertEquals(2, tile.getTokenCount());    }}
/* * User: tom * Date: Jul 31, 2002 * Time: 10:36:22 AM */package test.net.sourceforge.pmd.cpd;import junit.framework.TestCase;import net.sourceforge.pmd.cpd.TokenSets;import net.sourceforge.pmd.cpd.TokenList;import net.sourceforge.pmd.cpd.TokenEntry;public class TokenSetsTest extends TestCase {    public void testBasic() {        TokenEntry tok = new TokenEntry("H", 0, "foo", 5);        TokenSets tss = new TokenSets();        TokenList ts = new TokenList("foo");        ts.add(tok);        tss.add(ts);        assertEquals(ts, tss.getTokenList(tok));        assertTrue(tss.iterator().hasNext());    }}
/* * User: tom * Date: Jul 31, 2002 * Time: 2:06:36 PM */package test.net.sourceforge.pmd.cpd;import junit.framework.TestCase;import net.sourceforge.pmd.cpd.*;import java.util.Iterator;public class GSTTest extends TestCase {    public void test1() {        TokenList ts1 = GSTTest.createHelloTokenSet("foo");        TokenList ts2 = GSTTest.createHelloTokenSet("bar");        TokenSets tss = new TokenSets();        tss.add(ts1);        tss.add(ts2);        GST gst = new GST(tss, 5);        Results results = gst.crunch();        assertEquals(1, results.size());        Tile tile = (Tile)results.getTiles().next();        assertEquals("hello", tile.getImage());        Iterator occs = results.getOccurrences(tile);        assertTrue(occs.hasNext());        while (occs.hasNext()) {            TokenEntry tok = (TokenEntry)occs.next();            if (tok.getTokenSrcID().equals("foo")) {                assertEquals(0, tok.getIndex());            } else {                assertEquals("bar", tok.getTokenSrcID());            }        }    }    public static TokenList createHelloTokenSet(String id) {        TokenList ts = new TokenList(id);        ts.add(new TokenEntry("h", 0, id, 5));        ts.add(new TokenEntry("e", 1, id, 5));        ts.add(new TokenEntry("l", 2, id, 5));        ts.add(new TokenEntry("l", 3, id, 5));        ts.add(new TokenEntry("o", 4, id, 5));        return ts;    }}
/* * User: tom * Date: Aug 5, 2002 * Time: 2:02:17 PM */package test.net.sourceforge.pmd.cpd;import junit.framework.TestCase;import net.sourceforge.pmd.cpd.Results;import net.sourceforge.pmd.cpd.Tile;import net.sourceforge.pmd.cpd.TokenEntry;import net.sourceforge.pmd.cpd.ResultsImpl;import java.util.Iterator;public class ResultsTest extends TestCase {    public void testBasic() {        Results r = new ResultsImpl();        Tile tile = new Tile(CPDTest.getHelloTokens());        TokenEntry startToken = new TokenEntry("h", 0, "1", 5);        r.addTile(tile, startToken);        Iterator i = r.getOccurrences(tile);        assertTrue(i.hasNext());        assertEquals(startToken, (TokenEntry)i.next());    }}
/* * User: tom * Date: Jul 31, 2002 * Time: 10:24:58 AM */package test.net.sourceforge.pmd.cpd;import junit.framework.TestCase;import net.sourceforge.pmd.cpd.TokenList;import net.sourceforge.pmd.cpd.TokenEntry;import net.sourceforge.pmd.cpd.Tile;import java.util.ArrayList;import java.util.List;public class TokenListTest extends TestCase {    /**     * The end of line string for this machine.     */    protected String EOL = System.getProperty("line.separator", "\n");    public void testBasic() {        TokenList ts = new TokenList("foo");        assertEquals("foo", ts.getID());    }    public void testAdd() {        TokenEntry tok = new TokenEntry("L", 9, "foo", 5);        TokenList ts = new TokenList("foo");        ts.add(tok);        assertEquals(tok, ts.get(0));        assertTrue(ts.iterator().hasNext());    }    public void testCode() {        TokenList tl = new TokenList("1");        List list = new ArrayList();        list.add("public class Foo {");        list.add(" public void bar() {}");        list.add(" public void baz() {}");        list.add("}");        tl.setCode(list);        assertEquals(" public void bar() {}", tl.getSlice(1,1));        assertEquals(" public void bar() {}" +EOL + " public void baz() {}", tl.getSlice(1,2));    }    public void testHasTokenAfter() {        assertTrue(GSTTest.createHelloTokenSet("foo").hasTokenAfter(new Tile(new TokenEntry("H", 0, "foo", 5)), new TokenEntry("H", 0, "foo", 5)));    }}
/* * User: tom * Date: Aug 6, 2002 * Time: 9:05:19 AM */package test.net.sourceforge.pmd.cpd;import junit.framework.TestCase;import net.sourceforge.pmd.cpd.TokenList;import net.sourceforge.pmd.cpd.JavaTokensTokenizer;import net.sourceforge.pmd.cpd.Tokenizer;import java.io.StringReader;public class JavaTokensTokenizerTest extends TestCase {    private static final String EOL = System.getProperty("line.separator", "\n");    public void test1() throws Throwable {        Tokenizer tokenizer = new JavaTokensTokenizer();        TokenList tl = new TokenList("1");        String data = "public class Foo {}";        tokenizer.tokenize(tl, new StringReader(data));        assertEquals(5, tl.size());        assertEquals("public class Foo {}", tl.getSlice(0,0));    }    public void test2() throws Throwable {        Tokenizer t = new JavaTokensTokenizer();        TokenList tl = new TokenList("1");        String data = "public class Foo {" + EOL +                      "public void bar() {}" + EOL +                      "public void buz() {}" + EOL +                      "}";        t.tokenize(tl, new StringReader(data));        assertEquals("public class Foo {"+ EOL + "public void bar() {}", tl.getSlice(0,1));    }    public void testDiscardSemicolons() throws Throwable  {        Tokenizer t = new JavaTokensTokenizer();        TokenList tl = new TokenList("1");        String data = "public class Foo {private int x;}";        t.tokenize(tl, new StringReader(data));        assertEquals(8, tl.size());    }    public void testDiscardImports() throws Throwable {        Tokenizer t = new JavaTokensTokenizer();        TokenList tl = new TokenList("1");        String data = "import java.io.File;" + EOL + "public class Foo {}";        t.tokenize(tl, new StringReader(data));        assertEquals(5, tl.size());    }    public void testDiscardPkgStmts() throws Throwable {        Tokenizer t = new JavaTokensTokenizer();        TokenList tl = new TokenList("1");        String data = "package foo.bar.baz;" + EOL + "public class Foo {}";        t.tokenize(tl, new StringReader(data));        assertEquals(5, tl.size());    } }
/* * User: tom * Date: Jul 31, 2002 * Time: 12:25:01 PM */package test.net.sourceforge.pmd.cpd;import junit.framework.TestCase;import net.sourceforge.pmd.cpd.*;import java.util.Iterator;public class OccurrencesTest  extends TestCase {    public void testBasic1() {        Occurrences occs = new Occurrences(new TokenSets());        assertTrue(!occs.contains(new TokenEntry("h", 0, "foo", 5)));        assertTrue(!occs.getTiles().hasNext());        assertTrue(occs.isEmpty());        assertEquals(0, occs.size());    }    public void testBasic2() {        Occurrences occs = new Occurrences((new TokenSets(GSTTest.createHelloTokenSet("foo"))));        assertEquals(4, occs.size());        assertTrue(occs.contains(new TokenEntry("h", 0, "foo", 5)));        Iterator i = occs.getOccurrences(new Tile(new TokenEntry("h", 0, "foo", 5)));        assertTrue(i.hasNext());        assertTrue(occs.getTiles().hasNext());        int count = 0;        for (Iterator foo = occs.getTiles(); foo.hasNext();) {            foo.next();            count++;        }        assertEquals(4, count);    }    public void testInitialFrequencyCount() {        Occurrences occs = new Occurrences((new TokenSets(GSTTest.createHelloTokenSet("foo"))));        Iterator i = occs.getOccurrences(new Tile(new TokenEntry("h", 0, "foo", 5)));        TokenEntry tok = (TokenEntry)i.next();        assertEquals("foo", tok.getTokenSrcID());        assertEquals(0,tok.getIndex());    }    public void testContains() {        Occurrences occs = new Occurrences((new TokenSets(GSTTest.createHelloTokenSet("foo"))));        assertTrue(occs.contains(new TokenEntry("h", 0, "foo", 5)));    }    public void testDeleteSolo() {        Occurrences occs = new Occurrences((new TokenSets(GSTTest.createHelloTokenSet("foo"))));        occs.deleteSoloTiles();        assertEquals(1, occs.size());        assertTrue(!occs.contains(new TokenEntry("h", 0, "foo", 5)));        assertTrue(occs.contains(new TokenEntry("l", 2, "foo", 5)));    }}
/* * User: tom * Date: Jul 31, 2002 * Time: 10:00:36 AM */package test.net.sourceforge.pmd.cpd;import junit.framework.TestCase;import net.sourceforge.pmd.cpd.TokenEntry;public class TokenEntryTest extends TestCase {    public void testBasic() {        TokenEntry t = new TokenEntry("a", 2, "foo", 5);        assertEquals("a", t.getImage());        assertEquals(2, t.getIndex());        assertEquals("foo", t.getTokenSrcID());    }}
/* * User: tom * Date: Jul 31, 2002 * Time: 10:41:25 AM */package test.net.sourceforge.pmd.cpd;import junit.framework.TestCase;import net.sourceforge.pmd.cpd.*;import java.util.Iterator;import java.util.List;import java.util.ArrayList;public class CPDTest extends TestCase{    public void testBasic() throws Throwable {        CPD cpd = new CPD();        cpd.add("1", "public class Foo {}");        cpd.add("2", "public class Bar {}");        cpd.setMinimumTileSize(2);        cpd.go();        Results results = cpd.getResults();        Iterator i = results.getOccurrences(new Tile(getHelloTokens()));        assertTrue(i.hasNext());        TokenEntry tok = (TokenEntry)i.next();        if (tok.getTokenSrcID().equals("1")) {            assertEquals(0, tok.getIndex());        } else {            assertEquals("2", tok.getTokenSrcID());            assertEquals(0, tok.getIndex());        }    }    public void testBasic2() throws Throwable {        CPD cpd = new CPD();        cpd.add("1", "public class Foo {}");        cpd.add("2", "public class Bar {}");        cpd.setMinimumTileSize(2);        cpd.go();        Results results = cpd.getResults();        Iterator i = results.getOccurrences(new Tile(getHelloTokens()));        assertTrue(i.hasNext());        TokenEntry tok = (TokenEntry)i.next();        if (tok.getTokenSrcID().equals("1")) {            assertEquals(0, tok.getIndex());        } else {            assertEquals("2", tok.getTokenSrcID());            assertEquals(0, tok.getIndex());        }    }    public static List getHelloTokens() {        List tokens = new ArrayList();        tokens.add(new TokenEntry("public", 0, "1", 5));        tokens.add(new TokenEntry("class", 1, "1", 5));        return tokens;    }}
package test.net.sourceforge.pmd.renderers;import junit.framework.TestCase;import java.util.List;import java.util.Iterator;import java.util.ArrayList;import test.net.sourceforge.pmd.MockRule;import net.sourceforge.pmd.renderers.*;import net.sourceforge.pmd.*;public class XMLRendererTest    extends TestCase{    private XMLRenderer IUT = null;    private MockRule RULE1 = new MockRule( "RULE1", "RULE1" );    private MockRule RULE2 = new MockRule( "RULE2", "RULE2" );    public XMLRendererTest( String name ) {super( name );    }    public void setUp() {IUT = new XMLRenderer();    }    public void testEmptyReport() throws Throwable    {String rendered = IUT.render( new Report() );assertTrue("Expected empty PMD tag.",   rendered.indexOf("violation") < 0);    }    public void testSingleReport() throws Throwable    {Report report = new Report();report.addRuleViolation( new RuleViolation( RULE1,  1, "Rule1", "testSingleReport") );String rendered = IUT.render( report );// <?xml version="1.0"?>// <pmd>//   <file name="testSingleReport">//     <violation line="1" rule="RULE1">        // Rule1        //     </violation>        //   </file>        // </pmd>List expectedStrings = new ArrayList();expectedStrings.add("<pmd>");expectedStrings.add("<file name=\"testSingleReport\">" );expectedStrings.add("<violation line=\"1\" rule=\"RULE1\">");expectedStrings.add("Rule1");expectedStrings.add("</violation>");expectedStrings.add("</file>");expectedStrings.add("</pmd>");verifyPositions( rendered, expectedStrings );    }    public void testDoubleReport() throws Throwable    {Report report = new Report();report.addRuleViolation( new RuleViolation( RULE1,  1, "Rule1", "testDoubleReport") );report.addRuleViolation( new RuleViolation( RULE2,  2, "Rule2", "testDoubleReport") );String rendered = IUT.render( report );// <?xml version="1.0"?>// <pmd>//   <file name="testSingleReport">//     <violation line="1" rule="RULE1">        // Rule1        //     </violation>//     <violation line="2" rule="RULE2">// Rule2//     </violation>        //   </file>        // </pmd>List expectedStrings = new ArrayList();expectedStrings.add("<pmd>");expectedStrings.add("<file name=\"testDoubleReport\">" );expectedStrings.add("<violation line=\"1\" rule=\"RULE1\">");expectedStrings.add("Rule1");expectedStrings.add("</violation>");expectedStrings.add("<violation line=\"2\" rule=\"RULE2\">");expectedStrings.add("Rule2");expectedStrings.add("</violation>");expectedStrings.add("</file>");expectedStrings.add("</pmd>");verifyPositions( rendered, expectedStrings );    }    public void testTwoFiles() throws Throwable    {Report report = new Report();report.addRuleViolation( new RuleViolation( RULE1,  1, "Rule1", "testTwoFiles_0") );report.addRuleViolation( new RuleViolation( RULE1,  1, "Rule1", "testTwoFiles_1") );String rendered = IUT.render( report );// <?xml version="1.0"?>// <pmd>//   <file name="testTwoFiles_0">//     <violation line="1" rule="RULE1">        // Rule1        //     </violation>//   </file>//   <file name="testTwoFiles_1">//     <violation line="1" rule="RULE1">// Rule1//     </violation>        //   </file>        // </pmd>List expectedStrings = new ArrayList();expectedStrings.add("<pmd>");expectedStrings.add("<file name=\"testTwoFiles_0\">" );expectedStrings.add("<violation line=\"1\" rule=\"RULE1\">");expectedStrings.add("Rule1");expectedStrings.add("</violation>");expectedStrings.add("</file>");expectedStrings.add("<file name=\"testTwoFiles_1\">" );expectedStrings.add("<violation line=\"1\" rule=\"RULE1\">");expectedStrings.add("Rule1");expectedStrings.add("</violation>");expectedStrings.add("</file>");expectedStrings.add("</pmd>");verifyPositions( rendered, expectedStrings );    }    public void testUnorderedFiles() throws Throwable    {Report report = new Report();report.addRuleViolation( new RuleViolation( RULE1,  1, "Rule1", "testTwoFiles_0") );report.addRuleViolation( new RuleViolation( RULE1,  1, "Rule1", "testTwoFiles_1") );report.addRuleViolation( new RuleViolation( RULE2,  2, "Rule2", "testTwoFiles_0") );String rendered = IUT.render( report );// <?xml version="1.0"?>// <pmd>//   <file name="testTwoFiles_0">//     <violation line="1" rule="RULE1">        // Rule1        //     </violation>//   </file>//   <file name="testTwoFiles_1">//     <violation line="1" rule="RULE1">// Rule1//     </violation>        //   </file>        // </pmd>System.err.println( rendered );List expectedStrings = new ArrayList();expectedStrings.add("<pmd>");expectedStrings.add("<file name=\"testTwoFiles_0\">" );expectedStrings.add("<violation line=\"1\" rule=\"RULE1\">");expectedStrings.add("Rule1");expectedStrings.add("</violation>");expectedStrings.add("<violation line=\"2\" rule=\"RULE2\">");expectedStrings.add("Rule2");expectedStrings.add("</violation>");expectedStrings.add("</file>");expectedStrings.add("<file name=\"testTwoFiles_1\">" );expectedStrings.add("<violation line=\"1\" rule=\"RULE1\">");expectedStrings.add("Rule1");expectedStrings.add("</violation>");expectedStrings.add("</file>");expectedStrings.add("</pmd>");verifyPositions( rendered, expectedStrings );    }    public void verifyPositions( String rendered,  List strings ) {Iterator i = strings.iterator();int currPos = 0;String lastString = "<?xml version=\"1.0\"?>";while (i.hasNext()) {    String str = (String) i.next();    int strPos = rendered.indexOf( str, currPos );    assertTrue("Expecting: " + str + " after " + lastString,       strPos > currPos );    currPos = strPos;    lastString = str;}    }}
/* * User: tom * Date: Jul 12, 2002 * Time: 8:10:10 PM */package test.net.sourceforge.pmd.symboltable;import junit.framework.TestCase;import net.sourceforge.pmd.symboltable.TypeSet;import net.sourceforge.pmd.PMD;import java.io.File;import java.util.Set;import java.util.HashSet;public class TypeSetTest extends TestCase {    public void testASTCompilationUnitPackage() {        TypeSet t = new TypeSet();        t.setASTCompilationUnitPackage("java.lang.");        assertEquals("java.lang.", t.getASTCompilationUnitPackage());    }    public void testAddImport() {        TypeSet t = new TypeSet();        t.addImport("java.io.File");        assertEquals(1, t.getImportsCount());    }    public void testFindClassImplicitImport() throws Throwable {        TypeSet t = new TypeSet();        Class clazz = t.findClass("String");        assertEquals(String.class, clazz);    }    public void testFindClassSamePackage() throws Throwable {        TypeSet t = new TypeSet();        t.setASTCompilationUnitPackage("net.sourceforge.pmd.");        Class clazz = t.findClass("PMD");        assertEquals(PMD.class, clazz);    }    public void testFindClassExplicitImport() throws Throwable {        TypeSet t = new TypeSet();        t.addImport("java.io.File");        Class clazz = t.findClass("File");        assertEquals(File.class, clazz);    }    public void testFindClassImportOnDemand() throws Throwable {        TypeSet t = new TypeSet();        t.addImport("java.io.*");        Class clazz = t.findClass("File");        assertEquals(File.class, clazz);    }    public void testFindClassPrimitive() throws Throwable {        TypeSet t = new TypeSet();        assertEquals(int.class, t.findClass("int"));    }    public void testFindClassVoid() throws Throwable {        TypeSet t = new TypeSet();        assertEquals(void.class, t.findClass("void"));    }    public void testFindFullyQualified() throws Throwable {        TypeSet t = new TypeSet();        assertEquals(String.class, t.findClass("java.lang.String"));        assertEquals(Set.class, t.findClass("java.util.Set"));    }    // inner class tests    public void testPrimitiveTypeResolver() throws Throwable {        TypeSet.Resolver r = new TypeSet.PrimitiveTypeResolver();        assertEquals(int.class, r.resolve("int"));        assertEquals(byte.class, r.resolve("byte"));        assertEquals(long.class, r.resolve("long"));    }    public void testVoidTypeResolver() throws Throwable {        TypeSet.Resolver r = new TypeSet.VoidResolver();        assertEquals(void.class, r.resolve("void"));    }    public void testExplicitImportResolver() throws Throwable {        Set imports = new HashSet();        imports.add("java.io.File");        TypeSet.Resolver r = new TypeSet.ExplicitImportResolver(imports);        assertEquals(File.class,  r.resolve("File"));    }    public void testImplicitImportResolverPass() throws Throwable {        TypeSet.Resolver r = new TypeSet.ImplicitImportResolver();        assertEquals(String.class, r.resolve("String"));    }    public void testImplicitImportResolverPassFail() throws Throwable {        TypeSet.Resolver r = new TypeSet.ImplicitImportResolver();        try {            r.resolve("PMD");            throw new RuntimeException("Should have thrown an exception");        } catch (ClassNotFoundException cnfe) {}    }    public void testCurrentPackageResolverPass() throws Throwable {        TypeSet.Resolver r = new TypeSet.CurrentPackageResolver("net.sourceforge.pmd.");        assertEquals(PMD.class, r.resolve("PMD"));    }    public void testImportOnDemandResolverPass() throws Throwable {        Set imports = new HashSet();        imports.add("java.io.*");        imports.add("java.util.*");        TypeSet.Resolver r = new TypeSet.ImportOnDemandResolver(imports);        assertEquals(Set.class, r.resolve("Set"));        assertEquals(File.class, r.resolve("File"));    }    public void testImportOnDemandResolverFail() throws Throwable {        Set imports = new HashSet();        imports.add("java.io.*");        imports.add("java.util.*");        TypeSet.Resolver r = new TypeSet.ImportOnDemandResolver(imports);        try {            r.resolve("foo");            throw new RuntimeException("Should have thrown an exception");        } catch (ClassNotFoundException cnfe) {}        try {            r.resolve("String");            throw new RuntimeException("Should have thrown an exception");        } catch (ClassNotFoundException cnfe) {}    }}
/* * User: tom * Date: Jun 19, 2002 * Time: 11:59:24 AM */package test.net.sourceforge.pmd.symboltable;import junit.framework.TestCase;import net.sourceforge.pmd.symboltable.NameDeclaration;import net.sourceforge.pmd.ast.*;public class NameDeclarationTest extends TestCase {    public void testConstructor() {        ASTPrimaryExpression exp = createNode("foo", 10);        NameDeclaration decl = new NameDeclaration(exp);        assertEquals("foo", decl.getImage());        assertEquals(10, decl.getLine());        assertEquals(exp, decl.getNode());        assertTrue(!decl.isExceptionBlockParameter());    }    public void testExceptionBlkParam() {        ASTVariableDeclaratorId id = new ASTVariableDeclaratorId(3);        id.testingOnly__setBeginLine(10);        id.setImage("foo");        ASTFormalParameter param = new ASTFormalParameter(2);        id.jjtSetParent(param);        ASTTryStatement tryStmt = new ASTTryStatement(1);        param.jjtSetParent(tryStmt);        NameDeclaration decl = new NameDeclaration(id);        assertTrue(decl.isExceptionBlockParameter());    }    private static ASTPrimaryExpression createNode(String image, int line) {        ASTPrimaryExpression node = new ASTPrimaryExpression(1);        node.setImage(image);        node.testingOnly__setBeginLine(line);        return node;    }/*    public static final ASTPrimaryExpression FOO_NODE = NameDeclarationTest.createNode("foo", 10);    public static final NameDeclaration FOO = new NameDeclaration(FOO_NODE);    public static ASTPrimaryExpression createNode(String image, int line) {        ASTPrimaryExpression node = new ASTPrimaryExpression(1);        node.setImage(image);        node.testingOnly__setBeginLine(line);        return node;    }    public void testBasic() {        SimpleNode node = FOO_NODE;        NameDeclaration decl = new NameDeclaration(node);        assertEquals(10, decl.getLine());        assertEquals("foo", decl.getImage());        assertEquals(decl, new NameDeclaration(node));        assertTrue(!decl.isExceptionBlockParameter());    }    public void testConstructor() {        SimpleNode node = FOO_NODE;        NameDeclaration decl = new NameDeclaration(node);        assertEquals(node.getBeginLine(), decl.getLine());        assertEquals(node.getImage(), decl.getImage());    }*/}
/* * User: tom * Date: Jun 19, 2002 * Time: 11:09:06 AM */package test.net.sourceforge.pmd.symboltable;import junit.framework.TestCase;import net.sourceforge.pmd.*;import net.sourceforge.pmd.symboltable.*;public class SymbolTableTest extends TestCase {    public void testPush() {        SymbolTable s = new SymbolTable();        s.push(new GlobalScope());        assertEquals(1,s.depth());    }    public void testPop() {        SymbolTable s = new SymbolTable();        s.push(new GlobalScope());        s.pop();        assertEquals(0,s.depth());    }    public void testPeek() {        SymbolTable s = new SymbolTable();        Scope scope = new GlobalScope();        s.push(scope);        assertEquals(scope, s.peek());    }    public void testParentLinkage() {        SymbolTable s = new SymbolTable();        Scope scope = new GlobalScope();        s.push(scope);        Scope scope2 = new LocalScope();        s.push(scope2);        Scope scope3 = new LocalScope();        s.push(scope3);        assertEquals(scope2.getParent(), scope);        assertEquals(scope3.getParent(), scope2);        s.pop();        assertEquals(scope2.getParent(), scope);        assertEquals(scope3.getParent(), scope2);    }}
/* * User: tom * Date: Oct 3, 2002 * Time: 2:48:19 PM */package test.net.sourceforge.pmd.symboltable;import junit.framework.TestCase;import net.sourceforge.pmd.symboltable.*;import net.sourceforge.pmd.ast.*;public class ScopeFactoryTest extends TestCase {    public void testGlobalScope() {        ScopeFactory sf = new ScopeFactory();        assertTrue(sf.createScope(new ASTCompilationUnit(1)) instanceof GlobalScope);    }    public void testClassScope() {        ScopeFactory sf = new ScopeFactory();        assertTrue(sf.createScope(new ASTUnmodifiedClassDeclaration(1)) instanceof ClassScope);    }    public void testfunctionScope() {        ScopeFactory sf = new ScopeFactory();        assertTrue(sf.createScope(new ASTMethodDeclaration(1)) instanceof MethodScope);        assertTrue(sf.createScope(new ASTConstructorDeclaration(1)) instanceof MethodScope);    }    public void testLocalScope() {        ScopeFactory sf = new ScopeFactory();        assertTrue(sf.createScope(new ASTBlock(1)) instanceof LocalScope);        assertTrue(sf.createScope(new ASTTryStatement(1)) instanceof LocalScope);        assertTrue(sf.createScope(new ASTForStatement(1)) instanceof LocalScope);        assertTrue(sf.createScope(new ASTIfStatement(1)) instanceof LocalScope);    }    public void testUnknownScope_ThisShouldNeverHappen() throws Throwable {        ScopeFactory sf = new ScopeFactory();        try {            sf.createScope(new ASTClassBody(1));            throw new Throwable("Should have failed!");        } catch (RuntimeException re) {            // cool        }    }}
/* * User: tom * Date: Oct 10, 2002 * Time: 8:27:50 AM */package test.net.sourceforge.pmd.symboltable;import junit.framework.TestCase;import net.sourceforge.pmd.symboltable.ScopeCreator;import net.sourceforge.pmd.symboltable.LocalScope;import net.sourceforge.pmd.symboltable.GlobalScope;import net.sourceforge.pmd.ast.ASTTryStatement;import net.sourceforge.pmd.ast.ASTIfStatement;import net.sourceforge.pmd.ast.ASTCompilationUnit;public class ScopeCreatorTest extends TestCase {    public void testScopesAreCreated() {        ScopeCreator sc = new ScopeCreator();        ASTCompilationUnit acu = new ASTCompilationUnit(1);        acu.setScope(new GlobalScope());        ASTTryStatement tryNode = new ASTTryStatement(2);        tryNode.setScope(new LocalScope());        tryNode.jjtSetParent(acu);        ASTIfStatement ifNode = new ASTIfStatement(3);        ifNode.jjtSetParent(tryNode);        sc.visit(acu, null);        assertTrue(ifNode.getScope() instanceof LocalScope);    }}
/* * User: tom * Date: Oct 2, 2002 * Time: 2:16:41 PM */package test.net.sourceforge.pmd.symboltable;import junit.framework.TestCase;import net.sourceforge.pmd.symboltable.*;import net.sourceforge.pmd.ast.SimpleNode;import net.sourceforge.pmd.ast.ASTName;public class LookupControllerTest extends TestCase {/*    public void testLookupFound() {        Scope scope = new LocalScope();        scope.addDeclaration(NameDeclarationTest.FOO);        LookupController lc = new LookupController();        ASTName declNode = NameDeclarationTest.createNode("foo", 5);        declNode.setScope(scope);        NameOccurrence occ = new NameOccurrence(declNode);        lc.lookup(occ);        assertTrue(!scope.getUnusedDeclarations().hasNext());    }    public void testLookupNotFound() {        Scope scope = new LocalScope();        scope.addDeclaration(NameDeclarationTest.FOO);        LookupController lc = new LookupController();        ASTName declNode = NameDeclarationTest.createNode("bar", 5);        declNode.setScope(scope);        NameOccurrence occ = new NameOccurrence(declNode);        lc.lookup(occ);        assertTrue(scope.getUnusedDeclarations().hasNext());    }*/    public void test1() {}}
/* * User: tom * Date: Oct 16, 2002 * Time: 3:56:34 PM */package test.net.sourceforge.pmd.symboltable;import junit.framework.TestCase;import net.sourceforge.pmd.symboltable.ClassScope;import net.sourceforge.pmd.symboltable.NameDeclaration;import net.sourceforge.pmd.symboltable.NameOccurrence;import net.sourceforge.pmd.ast.ASTName;import net.sourceforge.pmd.ast.SimpleNode;public class ClassScopeTest extends TestCase {    public void testContains() {        ClassScope s = new ClassScope("Foo");        SimpleNode node = new SimpleNode(1);        node.setImage("bar");        s.addDeclaration(new NameDeclaration(node));        assertTrue(s.getUnusedDeclarations().hasNext());    }    public void testCantContainsSuperToString() {        ClassScope s = new ClassScope("foo");        SimpleNode node = new SimpleNode(1);        node.setImage("super.toString");        assertTrue(!s.contains(new NameOccurrence(node, node.getImage())));    }    public void testContainsStaticVariablePrefixedWithClassName() {        ClassScope s = new ClassScope("Foo");        SimpleNode node = new SimpleNode(1);        node.setImage("X");        s.addDeclaration(new NameDeclaration(node));        SimpleNode node2 = new SimpleNode(2);        node2.setImage("Foo.X");        assertTrue(s.contains(new NameOccurrence(node2, node2.getImage())));    }}
/* * User: tom * Date: Oct 1, 2002 * Time: 3:24:28 PM */package test.net.sourceforge.pmd.symboltable;import junit.framework.TestCase;import net.sourceforge.pmd.symboltable.*;import net.sourceforge.pmd.ast.ASTName;import net.sourceforge.pmd.ast.ASTPrimaryPrefix;public class LocalScopeTest extends TestCase {/*    public void testAdd() {        LocalScope scope = new LocalScope();        scope.addDeclaration(new NameDeclaration(NameDeclarationTest.FOO_NODE));        assertTrue(scope.contains(new NameOccurrence(NameDeclarationTest.createNode("foo", 12))));    }    public void testUnused() {        LocalScope scope = new LocalScope();        scope.addDeclaration(new NameDeclaration(NameDeclarationTest.FOO_NODE));        assertTrue(scope.getUnusedDeclarations().hasNext());    }    public void testNameWithThisOrSuperIsNotFlaggedAsUnused() {        LocalScope scope = new LocalScope();        ASTName name = NameDeclarationTest.createNode("foo", 12);        ASTPrimaryPrefix prefix = new ASTPrimaryPrefix(2);        prefix.setUsesThisModifier();        name.jjtAddChild(prefix, 1);        NameOccurrence occ = new NameOccurrence(name);        scope.addOccurrence(occ);        assertTrue(!scope.getUnusedDeclarations().hasNext());    }    public void testNameWithSuperIsNotFlaggedAsUnused() {        LocalScope scope = new LocalScope();        ASTName name = NameDeclarationTest.createNode("foo", 12);        ASTPrimaryPrefix prefix = new ASTPrimaryPrefix(2);        prefix.setUsesSuperModifier();        name.jjtAddChild(prefix, 1);        NameOccurrence occ = new NameOccurrence(name);        scope.addOccurrence(occ);        assertTrue(!scope.getUnusedDeclarations().hasNext());    }    public void testUnused2() {        LocalScope scope = new LocalScope();        scope.addDeclaration(new NameDeclaration(NameDeclarationTest.FOO_NODE));        scope.addOccurrence(new NameOccurrence(NameDeclarationTest.createNode("foo", 12)));        assertTrue(!scope.getUnusedDeclarations().hasNext());    }    public void testParent() {        Scope scope = new LocalScope();        Scope parent = new LocalScope();        scope.setParent(parent);        assertEquals(parent, scope.getParent());    }*/    public void test1(){}}
/* * User: tom * Date: Oct 18, 2002 * Time: 2:02:11 PM */package test.net.sourceforge.pmd.symboltable;import junit.framework.TestCase;import net.sourceforge.pmd.symboltable.NameOccurrences;import net.sourceforge.pmd.symboltable.NameOccurrence;import net.sourceforge.pmd.ast.ASTPrimaryExpression;import net.sourceforge.pmd.ast.ASTPrimaryPrefix;import net.sourceforge.pmd.ast.ASTName;import net.sourceforge.pmd.ast.ASTPrimarySuffix;import java.util.List;public class NameOccurrencesTest extends TestCase {    public void testNameLinkage() {        ASTPrimaryExpression primary = new ASTPrimaryExpression(1);        primary.testingOnly__setBeginLine(10);        ASTPrimaryPrefix prefix = new ASTPrimaryPrefix(2);        prefix.setUsesThisModifier();        prefix.testingOnly__setBeginLine(10);        primary.jjtAddChild(prefix, 0);        ASTPrimarySuffix suffix = new ASTPrimarySuffix(3);        suffix.setImage("x");        suffix.testingOnly__setBeginLine(10);        primary.jjtAddChild(suffix, 1);        NameOccurrences occs = new NameOccurrences(primary);        NameOccurrence thisOcc = (NameOccurrence)occs.iterator().next();        NameOccurrence xOcc = (NameOccurrence)occs.getNames().get(1);        assertEquals(thisOcc.getNameForWhichThisIsAQualifier(), xOcc);    }    // super    public void testSuper() {        ASTPrimaryExpression primary = new ASTPrimaryExpression(1);        primary.testingOnly__setBeginLine(10);        ASTPrimaryPrefix prefix = new ASTPrimaryPrefix(2);        prefix.setUsesSuperModifier();        prefix.testingOnly__setBeginLine(10);        primary.jjtAddChild(prefix, 0);        NameOccurrences occs = new NameOccurrences(primary);        assertEquals("super", ((NameOccurrence)occs.getNames().get(0)).getImage());    }    // this    public void testThis() {        ASTPrimaryExpression primary = new ASTPrimaryExpression(1);        primary.testingOnly__setBeginLine(10);        ASTPrimaryPrefix prefix = new ASTPrimaryPrefix(2);        prefix.setUsesThisModifier();        prefix.testingOnly__setBeginLine(10);        primary.jjtAddChild(prefix, 0);        NameOccurrences occs = new NameOccurrences(primary);        assertEquals("this", ((NameOccurrence)occs.getNames().get(0)).getImage());    }    // this.x    public void testFieldWithThis() {        ASTPrimaryExpression primary = new ASTPrimaryExpression(1);        primary.testingOnly__setBeginLine(10);        ASTPrimaryPrefix prefix = new ASTPrimaryPrefix(2);        prefix.setUsesThisModifier();        prefix.testingOnly__setBeginLine(10);        primary.jjtAddChild(prefix, 0);        ASTPrimarySuffix suffix = new ASTPrimarySuffix(3);        suffix.setImage("x");        suffix.testingOnly__setBeginLine(10);        primary.jjtAddChild(suffix, 1);        NameOccurrences occs = new NameOccurrences(primary);        assertEquals("this", ((NameOccurrence)occs.getNames().get(0)).getImage());        assertEquals("x", ((NameOccurrence)occs.getNames().get(1)).getImage());    }    // x    public void testField() {        ASTPrimaryExpression primary = new ASTPrimaryExpression(1);        primary.testingOnly__setBeginLine(10);        ASTPrimaryPrefix prefix = new ASTPrimaryPrefix(2);        prefix.testingOnly__setBeginLine(10);        primary.jjtAddChild(prefix, 0);        ASTName name = new ASTName(3);        name.setImage("x");        prefix.jjtAddChild(name, 0);        NameOccurrences occs = new NameOccurrences(primary);        assertEquals("x", ((NameOccurrence)occs.getNames().get(0)).getImage());    }}
/* * User: tom * Date: Oct 2, 2002 * Time: 9:15:27 AM */package test.net.sourceforge.pmd.symboltable;import junit.framework.TestCase;import java.util.List;import net.sourceforge.pmd.ast.SimpleNode;import net.sourceforge.pmd.ast.ASTPrimaryExpression;import net.sourceforge.pmd.symboltable.LocalScope;import net.sourceforge.pmd.symboltable.NameOccurrence;public class NameOccurrenceTest extends TestCase {    public void testConstructor() {        SimpleNode node = new ASTPrimaryExpression(1);        node.testingOnly__setBeginLine(10);        LocalScope lclScope = new LocalScope();        node.setScope(lclScope);        NameOccurrence occ = new NameOccurrence(node, "foo");        assertEquals("foo", occ.getImage());        assertTrue(!occ.isThisOrSuper());        assertEquals(new NameOccurrence(null, "foo"), occ);        assertEquals(10, occ.getBeginLine());    }}
/* * User: tom * Date: Oct 10, 2002 * Time: 8:20:05 AM */package test.net.sourceforge.pmd.symboltable;import junit.framework.TestCase;import net.sourceforge.pmd.symboltable.DeclarationFinder;import net.sourceforge.pmd.symboltable.LocalScope;import net.sourceforge.pmd.symboltable.NameOccurrence;import net.sourceforge.pmd.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.ast.ASTVariableDeclarator;import net.sourceforge.pmd.ast.ASTLocalVariableDeclaration;public class DeclarationFinderTest extends TestCase {/*    public void testDeclarationsAreFound() {        DeclarationFinder df = new DeclarationFinder();        ASTVariableDeclaratorId node = new ASTVariableDeclaratorId(1);        node.setImage("foo");        ASTVariableDeclarator parent = new ASTVariableDeclarator(2);        node.jjtSetParent(parent);        ASTLocalVariableDeclaration gparent = new ASTLocalVariableDeclaration(3);        parent.jjtSetParent(gparent);        LocalScope scope = new LocalScope();        node.setScope(scope);        df.visit(node, null);        assertTrue(scope.contains(new NameOccurrence(NameDeclarationTest.createNode("foo", 10))));    }*/    public void test1() {}}
/* * User: tom * Date: Sep 30, 2002 * Time: 2:28:03 PM */package test.net.sourceforge.pmd.symboltable;import junit.framework.TestCase;public class SymbolFacadeTest extends TestCase {    public void testBasic() throws Throwable {/*        Reader reader = new InputStreamReader(getClass().getClassLoader().getResourceAsStream("SymbolFacadeTest.java"));        JavaParser parser = new JavaParser(reader);        ASTCompilationUnit c = parser.CompilationUnit();*/   }}
package test.net.sourceforge.pmd.ast;import java.util.Set;import java.util.Iterator;import net.sourceforge.pmd.ast.*;public class ClassDeclTest    extends ParserTst{    public void testPublic() throws Throwable     {String access[] = { "public" };ASTClassDeclaration acd = getClassDecl( access );verifyFlags( acd, true, false, false, false );    }    public void testAbstract() throws Throwable     {String access[] = { "abstract" };ASTClassDeclaration acd = getClassDecl( access );verifyFlags( acd, false, true, false, false );    }    public void testFinal() throws Throwable     {String access[] = { "final" };ASTClassDeclaration acd = getClassDecl( access );verifyFlags( acd, false, false, true, false );    }    public void testStrict() throws Throwable     {String access[] = { "strictfp" };ASTClassDeclaration acd = getClassDecl( access );verifyFlags( acd, false, false, false, true );    }    public void testPublicFinal()throws Throwable    {String access[] = { "public", "final" };ASTClassDeclaration acd = getClassDecl( access );verifyFlags( acd, true, false, true, false );    }    public void verifyFlags( ASTClassDeclaration acd,     boolean bPublic,     boolean bAbstract,     boolean bFinal,     boolean bStrict ) {assertEquals( "Public: ",      bPublic, acd.isPublic() );assertEquals( "Abstract: ",      bAbstract, acd.isAbstract() );assertEquals( "Final: ",      bFinal, acd.isFinal() );assertEquals( "Strict: ",      bStrict, acd.isStrict() );    }    public ASTClassDeclaration getClassDecl( String access[] )throws Throwable    {String javaCode = "";for (int i = 0; i < access.length; i++) {    javaCode += access[i] + " ";}javaCode += " class Test { } ";Set classes = getNodes( ASTClassDeclaration.class,javaCode );assertEquals( "Wrong number of classes",      1, classes.size());Iterator i = classes.iterator();return (ASTClassDeclaration) i.next();    }}
package test.net.sourceforge.pmd.ast;import java.util.Set;import java.util.Iterator;import net.sourceforge.pmd.ast.*;public class FieldDeclTest    extends ParserTst{    public String makeAccessJavaCode( String access[] ) {String RC =     "public class Test { ";for (int i = 0; i < access.length; i++) {    RC += access[i] + " ";}RC += " int j;  }";return RC;    }    public ASTFieldDeclaration getFieldDecl( String access[] )throws Throwable    {Set fields = getNodes( ASTFieldDeclaration.class,       makeAccessJavaCode( access ) );assertEquals( "Wrong number of fields",      1, fields.size());Iterator i = fields.iterator();return (ASTFieldDeclaration) i.next();    }    public void testPublic() throws Throwable    {String access[] = { "public" };ASTFieldDeclaration afd = getFieldDecl( access );assertTrue( "Expecting field to be public.",    afd.isPublic() );    }    public void testProtected() throws Throwable    {String access[] = { "protected" };ASTFieldDeclaration afd = getFieldDecl( access );assertTrue( "Expecting field to be protected.",    afd.isProtected() );    }    public void testPrivate() throws Throwable    {String access[] = { "private" };ASTFieldDeclaration afd = getFieldDecl( access );assertTrue( "Expecting field to be private.",    afd.isPrivate() );    }    public void testStatic() throws Throwable    {String access[] = { "private", "static" };ASTFieldDeclaration afd = getFieldDecl( access );assertTrue( "Expecting field to be static.",    afd.isStatic() );assertTrue( "Expecting field to be private.",    afd.isPrivate() );    }    public void testFinal() throws Throwable    {String access[] = { "public", "final" };ASTFieldDeclaration afd = getFieldDecl( access );assertTrue( "Expecting field to be final.",    afd.isFinal() );assertTrue( "Expecting field to be public.",    afd.isPublic() );    }    public void testTransient() throws Throwable    {String access[] = { "private", "transient" };ASTFieldDeclaration afd = getFieldDecl( access );assertTrue( "Expecting field to be private.",    afd.isPrivate() );assertTrue( "Expecting field to be transient.",    afd.isTransient() );    }    public void testVolatile() throws Throwable    {String access[] = { "private", "volatile" };ASTFieldDeclaration afd = getFieldDecl( access );assertTrue( "Expecting field to be volatile.",    afd.isVolatile() );assertTrue( "Expecting field to be private.",    afd.isPrivate() );    }}
package test.net.sourceforge.pmd.ast;import java.io.StringReader;import java.util.Map;import java.util.Iterator;import java.util.Set;import net.sourceforge.pmd.ast.*;public class MethodDeclTest    extends ParserTst{    public void testPublic()throws Throwable    {String access[] = { "public" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be public.",    amd.isPublic() );    }    public void testPrivate() throws Throwable    {String access[] = { "private" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be private.",    amd.isPrivate() );    }    public void testProtected() throws Throwable    {String access[] = { "protected" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be protected.",    amd.isProtected() );    }    public void testFinal() throws Throwable    {String access[] = { "public", "final" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be final.",    amd.isFinal() );assertTrue( "Expecting method to be public.",    amd.isPublic() );    }    public void testSynchronized() throws Throwable    {String access[] = { "public", "synchronized" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be synchronized.",    amd.isSynchronized() );assertTrue( "Expecting method to be public.",    amd.isPublic() );    }    public void testAbstract() throws Throwable    {String access[] = { "public", "abstract" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be abstract.",    amd.isAbstract() );assertTrue( "Expecting method to be public.",    amd.isPublic() );    }    public void testNative() throws Throwable    {String access[] = { "private", "native" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be native.",    amd.isNative() );assertTrue( "Expecting method to be private.",    amd.isPrivate() );    }    public void testStrict() throws Throwable    {String access[] = { "public", "strictfp" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be strict.",    amd.isStrict() );assertTrue( "Expecting method to be public.",    amd.isPublic() );    }    public ASTMethodDeclaration getMethodDecl( String access[] )throws Throwable    {String javaCode =    "public class Test { ";for (int i = 0; i < access.length; i++) {    javaCode += access[i] + " ";} javaCode +=    " void stuff() { } }";Set methods = getNodes( ASTMethodDeclaration.class,javaCode );assertEquals( "Wrong number of methods",      1, methods.size());Iterator i = methods.iterator();return (ASTMethodDeclaration) i.next();    }}
/* * User: tom * Date: Oct 8, 2002 * Time: 12:46:04 PM */package test.net.sourceforge.pmd.ast;import junit.framework.TestCase;import net.sourceforge.pmd.ast.ASTImportDeclaration;import net.sourceforge.pmd.ast.ASTName;public class ASTImportDeclarationTest extends TestCase {    public void testBasic() {        ASTImportDeclaration i = new ASTImportDeclaration(1);        assertTrue(!i.isImportOnDemand());        i.setImportOnDemand();        assertTrue(i.isImportOnDemand());    }    public void testGetImportedNameNode() {        ASTImportDeclaration i = new ASTImportDeclaration(1);        ASTName name = new ASTName(2);        i.jjtAddChild(name, 0);        assertEquals(name, i.getImportedNameNode());    }}
/* * User: tom * Date: Oct 8, 2002 * Time: 8:55:25 AM */package test.net.sourceforge.pmd.ast;import junit.framework.TestCase;import net.sourceforge.pmd.ast.ASTVariableDeclaratorId;import net.sourceforge.pmd.ast.ASTTryStatement;import net.sourceforge.pmd.ast.ASTBlock;public class ASTVariableDeclaratorIdTest extends TestCase {    public void testIsExceptionBlockParameter() {        ASTTryStatement tryNode = new ASTTryStatement(1);        ASTBlock block = new ASTBlock(2);        ASTVariableDeclaratorId v = new ASTVariableDeclaratorId(3);        v.jjtSetParent(block);        block.jjtSetParent(tryNode);        assertTrue(v.isExceptionBlockParameter());    }}
package test.net.sourceforge.pmd.ast;import net.sourceforge.pmd.ast.*;import junit.framework.*;public class AccessNodeTest    extends TestCase{    public void testStatic() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not static.",     !node.isStatic());node.setStatic(true);assertTrue( "Node set to static, not static.",     node.isStatic() );node.setStatic(false);assertTrue( "Node set to not static, is static.",     !node.isStatic());    }    public void testPublic() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not public.",    !node.isPublic());node.setPublic(true);assertTrue( "Node set to public, not public.",    node.isPublic());node.setPublic(false);assertTrue( "Node set to not public, is public.",     !node.isPublic());    }    public void testProtected() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not protected.",    !node.isProtected());node.setProtected(true);assertTrue( "Node set to protected, not protected.",     node.isProtected());node.setProtected(false);assertTrue( "Node set to not protected, is protected.",    !node.isProtected());    }    public void testPrivate() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not private.",    !node.isPrivate());node.setPrivate(true);assertTrue( "Node set to private, not private.",    node.isPrivate());node.setPrivate(false);assertTrue( "Node set to not private, is private.",    !node.isPrivate());    }    public void testFinal() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not final.",    !node.isFinal());node.setFinal(true);assertTrue( "Node set to final, not final.",    node.isFinal());node.setFinal(false);assertTrue( "Node set to not final, is final.",    !node.isFinal());    }    public void testSynchronized() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not synchronized.",    !node.isSynchronized());node.setSynchronized(true);assertTrue( "Node set to synchronized, not synchronized.",    node.isSynchronized());node.setSynchronized(false);assertTrue( "Node set to not synchronized, is synchronized.",    !node.isSynchronized());    }    public void testVolatile() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not volatile.",    !node.isVolatile());node.setVolatile(true);assertTrue( "Node set to volatile, not volatile.",    node.isVolatile());node.setVolatile(false);assertTrue( "Node set to not volatile, is volatile.",    !node.isVolatile());    }    public void testTransient() {AccessNode node = new AccessNode( 1 );assertTrue("Node should default to not transient.",   !node.isTransient());node.setTransient(true);assertTrue( "Node set to transient, not transient.",    node.isTransient());node.setTransient(false);assertTrue( "Node set to not transient, is transient.",    !node.isTransient());    }    public void testNative() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not native.",    !node.isNative());node.setNative(true);assertTrue( "Node set to native, not native.",    node.isNative());node.setNative(false);assertTrue( "Node set to not native, is native.",    !node.isNative());    }    public void testInterface() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not interface.",    !node.isInterface());node.setInterface(true);assertTrue( "Node set to interface, not interface.",    node.isInterface());node.setInterface(false);assertTrue( "Node set to not interface, is interface.",    !node.isInterface());    }    public void testAbstract() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not abstract.",    !node.isAbstract());node.setAbstract(true);assertTrue( "Node set to abstract, not abstract.",    node.isAbstract());node.setAbstract(false);assertTrue( "Node set to not abstract, is abstract.",    !node.isAbstract());    }    public void testStrict() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not strict.",    !node.isStrict());node.setStrict(true);assertTrue( "Node set to strict, not strict.",    node.isStrict());node.setStrict(false);assertTrue( "Node set to not strict, is strict.",    !node.isStrict());    }    public void testSuper() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not super.",    !node.isSuper());node.setSuper(true);assertTrue( "Node set to super, not super.",    node.isSuper());node.setSuper(false);assertTrue( "Node set to not super, is super.",    !node.isSuper());    }}
package test.net.sourceforge.pmd.ast;import net.sourceforge.pmd.ast.*;import java.util.Set;import java.util.Iterator;import java.util.ArrayList;import java.util.List;public class SimpleNodeTest    extends ParserTst{    public void testMethodDiffLines()throws Throwable    {String javaCode = "public class Test {\n";javaCode += "  public void helloWorld() \n"; // Line 2, Col 3javaCode += "  { System.err.println(\"Hello World\"); \n";javaCode += " } \n"; // Line 4, Col 2javaCode += "}";Set methods = getNodes( ASTMethodDeclaration.class,javaCode );Iterator iter = methods.iterator();assertTrue( iter.hasNext() );verifyNode( (SimpleNode) iter.next(),    2, 3, 4, 2 );    }    public void testMethodSameColumn()throws Throwable    {String javaCode = "public class Test {\n";javaCode += "public void helloWorld() {\n"; // Line 2, Col 1javaCode += "} \n"; // Line 3, Col 1javaCode += "}\n";Set methods = getNodes( ASTMethodDeclaration.class,javaCode );Iterator iter = methods.iterator();assertTrue( iter.hasNext() );verifyNode( (SimpleNode) iter.next(),    2, 1, 3, 1 );    }    public void testMethodSameLine()throws Throwable    {String javaCode = "public class Test {\n";javaCode += "  public void helloWorld() {}\n"; // 2, 3 -> 2, 29javaCode += "}\n";Set methods = getNodes( ASTMethodDeclaration.class,javaCode );Iterator iter = methods.iterator();assertTrue( iter.hasNext() );verifyNode( (SimpleNode) iter.next(),    2, 3, 2, 29 );    }    public void testNoLookahead() throws Throwable    {String javaCode = "public class Foo { }\n"; // 1, 8 -> 1, 20Set uCD = getNodes( ASTUnmodifiedClassDeclaration.class,    javaCode );Iterator iter = uCD.iterator();assertTrue( iter.hasNext() );verifyNode( (SimpleNode) iter.next(),    1, 8, 1, 20 );    }    public void testNames() throws Throwable {        String code = "import java.io.File; \n public class Foo{}";        Set name = getNodes(ASTName.class, code);        Iterator i = name.iterator();        assertTrue(i.hasNext());        while (i.hasNext()) {            SimpleNode node = (SimpleNode) i.next();            if (node.getImage().equals("java.io.File")) {                verifyNode(node, 1, 16, 1, 19);            }        }    }    public void testNames2() throws Throwable {        String code = "import java.io.\nFile; \n public class Foo{}";        Set name = getNodes(ASTName.class, code);        Iterator i = name.iterator();        assertTrue(i.hasNext());        while (i.hasNext()) {            SimpleNode node = (SimpleNode) i.next();            if (node.getImage().equals("java.io.File")) {                verifyNode(node, 2, 1, 2, 4);                // This is a BUG!  Should start on line 1.            }            if (node.getImage().equals("Foo")) {                verifyNode(node, 2, 15, 2, 18);            }        }    }    public void verifyNode( SimpleNode node,    int beginLine, int beginCol,    int endLine, int endCol ) {assertEquals( "Wrong Line Number provided for Start: ",      beginLine, node.getBeginLine() );assertEquals( "Wrong Column provided for Begin: ",      beginCol, node.getBeginColumn() );assertEquals( "Wrong Line Number provided for End: ",      endLine, node.getEndLine() );assertEquals( "Wrong Column provide for End: ",      endCol, node.getEndColumn() );    }    public void testFindChildrenOfType() {        ASTBlock block = new ASTBlock(2);        block.jjtAddChild(new ASTReturnStatement(1), 0);        List nodes = new ArrayList();        block.findChildrenOfType(ASTReturnStatement.class, nodes);        assertEquals(1, nodes.size());    }    public void testFindChildrenOfTypeMultiple() {        ASTBlock block = new ASTBlock(1);        block.jjtAddChild(new ASTBlockStatement(2), 0);        block.jjtAddChild(new ASTBlockStatement(3), 1);        List nodes = new ArrayList();        block.findChildrenOfType(ASTBlockStatement.class, nodes);        assertEquals(2, nodes.size());    }    public void testFindChildrenOfTypeRecurse() {        ASTBlock block = new ASTBlock(1);        ASTBlock childBlock = new ASTBlock(2);        block.jjtAddChild(childBlock, 0);        childBlock.jjtAddChild(new ASTMethodDeclaration(3), 0);        List nodes = new ArrayList();        block.findChildrenOfType(ASTMethodDeclaration.class, nodes);        assertEquals(1, nodes.size());    }}
/* * User: tom * Date: Jul 9, 2002 * Time: 2:52:26 PM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import net.sourceforge.pmd.ExternalRuleID;public class ExternalRuleIDTest extends TestCase{    public ExternalRuleIDTest(String name) {        super(name);    }    public void testParse() {        String xrefString = "rulesets/basic.xml/EmptyCatchBlock";        ExternalRuleID xref = new ExternalRuleID(xrefString);        assertEquals("rulesets/basic.xml", xref.getFilename());        assertEquals("EmptyCatchBlock", xref.getRuleName());    }}
/* * User: tom * Date: Jul 1, 2002 * Time: 1:16:07 PM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import net.sourceforge.pmd.AbstractRule;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.RuleContext;public class AbstractRuleTest extends TestCase {    private static class MyRule extends AbstractRule {        public String getMessage() {            return "myrule";        }    }    public  AbstractRuleTest(String name) {        super(name);    }    public void testCreateRV() {        MyRule r = new MyRule();        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename");        RuleViolation rv = r.createRuleViolation(ctx, 5);        assertEquals(5, rv.getLine());        assertEquals("filename", rv.getFilename());        assertEquals(r, rv.getRule());        assertEquals("myrule", rv.getDescription());    }    public void testCreateRV2() {        MyRule r = new MyRule();        RuleContext ctx = new RuleContext();        ctx.setSourceCodeFilename("filename");        RuleViolation rv = r.createRuleViolation(ctx, 5, "specificdescription");        assertEquals(5, rv.getLine());        assertEquals("filename", rv.getFilename());        assertEquals(r, rv.getRule());        assertEquals("specificdescription", rv.getDescription());    }}
package test.net.sourceforge.pmd;import net.sourceforge.pmd.*;import net.sourceforge.pmd.ast.*;import java.io.StringReader;import java.util.Set;import java.util.List;import java.util.Random;import java.util.HashSet;import java.util.Iterator;import java.util.ArrayList;import java.util.Collections;import junit.framework.*;public class RuleSetTest extends TestCase{    private String javaCode ="public class Test { }";    public void testConstructor() {        new RuleSet();    }    public void testAccessors() {        RuleSet rs = new RuleSet();        rs.setName("foo");        assertEquals("foo", rs.getName());        rs.setDescription("bar");        assertEquals("bar",rs.getDescription());    }    public void testGetRuleByName() {        RuleSet rs = new RuleSet();        MockRule mock = new MockRule("name", "desc");        rs.addRule(mock);        assertEquals(mock, rs.getRuleByName("name"));    }    public void testRuleList() {RuleSet IUT = new RuleSet();assertEquals( "Size of RuleSet isn't zero.",      0, IUT.size() );MockRule rule = new MockRule();IUT.addRule( rule );assertEquals( "Size of RuleSet isn't one.",      1, IUT.size() );Set rules = IUT.getRules();Iterator i = rules.iterator();assertTrue( "Empty Set",    i.hasNext());assertEquals( "Returned set of wrong size.",      1, rules.size() );assertEquals( "Rule isn't in ruleset.",      rule, i.next() );    }    public void testAddRuleSet() {        RuleSet set1 = new RuleSet();        set1.addRule(new MockRule());        RuleSet set2 = new RuleSet();        set2.addRule(new MockRule());        set1.addRuleSet(set2);        assertEquals(2, set1.size());    }    public void testApply0Rules()throws Throwable    {RuleSet IUT = new RuleSet();verifyRuleSet( IUT, 0, new HashSet() );    }    public void testApply1Rule()throws Throwable    {RuleSet IUT = new RuleSet();MockRule rule = new MockRule();RuleViolation violation = new RuleViolation( rule, 1, "filename" );rule.addViolation( violation );IUT.addRule( rule );verifyRuleSet( IUT, 1, Collections.singleton( violation ) );    }    public void testApplyNRule() throws Throwable    {RuleSet IUT = new RuleSet();Random rand = new Random();int numRules = rand.nextInt( 10 ) + 1;Set ruleViolations = new HashSet();for (int i = 0; i < numRules; i++) {    MockRule rule = new MockRule();    RuleViolation violation = new RuleViolation( rule, i, "filename");    ruleViolations.add( violation );    rule.addViolation( violation );    IUT.addRule( rule );}verifyRuleSet( IUT, numRules, ruleViolations );    }    protected void verifyRuleSet( RuleSet IUT,   int size,  Set values )throws Throwable    {RuleContext context = new RuleContext();Set reportedValues = new HashSet();context.setReport( new Report() );IUT.apply( makeCompilationUnits(),   context );assertEquals("Invalid number of Violations Reported",     size, context.getReport().size() );Iterator violations =    context.getReport().iterator();while (violations.hasNext()) {    RuleViolation violation =(RuleViolation) violations.next();    reportedValues.add( violation );    assertTrue( "Unexpected Violation Returned: " + violation,values.contains( violation ) );}Iterator expected = values.iterator();while (expected.hasNext()) {    RuleViolation violation =(RuleViolation) expected.next();    assertTrue( "Expected Violation not Returned: " +violation,reportedValues.contains( violation ));}        }        protected List makeCompilationUnits()throws Throwable    {List RC = new ArrayList();JavaParser parser = new JavaParser( new StringReader( javaCode ));RC.add( parser.CompilationUnit() );return RC;    }}
/* * User: tom * Date: Jun 14, 2002 * Time: 1:18:30 PM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import net.sourceforge.pmd.renderers.Renderer;import net.sourceforge.pmd.renderers.XMLRenderer;import net.sourceforge.pmd.stat.Metric;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.ReportListener;import java.util.Iterator;public class ReportTest extends TestCase implements ReportListener {    private boolean violationSemaphore;private boolean metricSemaphore;    public void testBasic() {        Report r = new Report();        r.addRuleViolation(new RuleViolation(new MockRule(), 5, "foo"));        assertTrue(!r.isEmpty());    }public void testMetric0() {Report r = new Report();assertTrue( !r.hasMetrics() );}public void testMetric1() {Report r = new Report();assertTrue( !r.hasMetrics() );r.addMetric( new Metric("m1", 1.0, 2.0, 3.0, 4.0));assertTrue( r.hasMetrics() );Iterator ms = r.metrics();assertTrue( ms.hasNext());Object o = ms.next();assertTrue( o instanceof Metric );Metric m = (Metric) o;assertEquals("m1", m.getMetricName());assertEquals(1.0, m.getLowValue(), 0.05);assertEquals(2.0, m.getHighValue(), 0.05);assertEquals(3.0, m.getAverage(), 0.05);assertEquals(4.0, m.getStandardDeviation(), 0.05);}    // Files are grouped together now.    public void testSortedReport_File() {        Report r = new Report();        r.addRuleViolation(new RuleViolation(new MockRule(), 10, "foo"));        r.addRuleViolation(new RuleViolation(new MockRule(), 20, "bar"));        Renderer rend = new XMLRenderer();        String result = rend.render(r);        assertTrue(result.indexOf("bar") < result.indexOf("foo"));    }    public void testSortedReport_Line() {        Report r = new Report();        r.addRuleViolation(new RuleViolation(new MockRule("rule2", "rule2"),      10, "foo1"));        r.addRuleViolation(new RuleViolation(new MockRule("rule1", "rule1"),      20, "foo2"));        Renderer rend = new XMLRenderer();        String result = rend.render(r);        assertTrue(result.indexOf("rule2") < result.indexOf("rule1"));    }    public void testListener() {        Report rpt  = new Report();        rpt.addListener(this);        violationSemaphore = false;        rpt.addRuleViolation(new RuleViolation(new MockRule(), 5, "file"));        assertTrue(violationSemaphore);                metricSemaphore = false;        rpt.addMetric( new Metric("test", 0.0, 0.0, 0.0, 0.0 ));                assertTrue(metricSemaphore);    }    public void ruleViolationAdded(RuleViolation ruleViolation) {        violationSemaphore = true;    }        public void metricAdded( Metric metric ) {    metricSemaphore = true;    }}
package test.net.sourceforge.pmd;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.InputStream;import java.util.Enumeration;import java.util.HashMap;import java.util.Iterator;import java.util.Set;import junit.framework.TestCase;import net.sourceforge.pmd.PMDException;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleProperties;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSetReader;import net.sourceforge.pmd.RuleSetWriter;/** * A test for reading and writing a rule set file.  The registered rule sets * * @author Donald A. Leckie * @since August 30, 2002 * @version $Revision$, $Date$ */public class RuleSetReadWriteTest extends TestCase{    private InputStream m_inputStream;    private RuleSet m_ruleSetIn;    private RuleSet m_ruleSetOut;    /**     ********************************************************************************     *     */    public RuleSetReadWriteTest()    {        super("Rule Set Read/Write Test");    }    /**     ********************************************************************************     *     */    public void testReadWrite()    {        try        {            loadTestFile();            m_ruleSetIn = (new RuleSetReader()).read(m_inputStream, "foo");            write();            m_ruleSetOut = (new RuleSetReader()).read(m_inputStream, "foo");            compare();        }        catch (PMDException pmdException)        {            pmdException.getOriginalException().printStackTrace();        }    }    /**     ********************************************************************************     *     */    private void loadTestFile()    {        m_inputStream = getClass().getClassLoader().getResourceAsStream("RuleSetReadWriteTest.xml");    }    /**     ********************************************************************************     *     */    private void write()    {        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();        (new RuleSetWriter(outputStream)).write(m_ruleSetIn);        m_inputStream = new ByteArrayInputStream(outputStream.toByteArray());    }    /**     ********************************************************************************     *     */    private void compare()    {        assertEquals("Rule set names are equal.", m_ruleSetIn.getName(), m_ruleSetOut.getName());        assertEquals("Rule set descriptions are equal.", m_ruleSetIn.getDescription(), m_ruleSetOut.getDescription());        Set rulesIn = m_ruleSetIn.getRules();        Set rulesOut = m_ruleSetOut.getRules();        int rulesInCount = rulesIn.size();        int rulesOutCount = rulesOut.size();        assertEquals("Rule counts are equal.", rulesInCount, rulesOutCount);        Rule[] rulesOutArray = new Rule[rulesOutCount];        rulesOut.toArray(rulesOutArray);        HashMap rulesOutMap = new HashMap((int)(rulesInCount / 0.75));        for (int n = 0; n < rulesOutCount; n++)        {            String key = rulesOutArray[n].getName();            rulesOutMap.put(key, rulesOutArray[n]);        }        Iterator iterator = rulesIn.iterator();        while (iterator.hasNext())        {            Rule ruleIn = (Rule) iterator.next();            String key = ruleIn.getName();            Rule ruleOut = (Rule) rulesOutMap.get(key);            assertNotNull("\"" + key + "\" exists in output rules.", ruleOut);            if (ruleOut != null)            {                assertEquals("Rule messages are equal.", ruleIn.getMessage(), ruleOut.getMessage());                assertEquals("Rule class are equal.", ruleIn.getClass().getName(), ruleOut.getClass().getName());                assertEquals("Rule includes are equal.", ruleIn.include(), ruleOut.include());                assertEquals("Rule descriptions are equal.", ruleIn.getDescription(), ruleOut.getDescription());                assertEquals("Rule examples are equal.", ruleIn.getExample(), ruleOut.getExample());                RuleProperties propertiesIn = ruleIn.getProperties();                RuleProperties propertiesOut = ruleOut.getProperties();                int propertiesInCount = propertiesIn.size();                int propertiesOutCount = propertiesOut.size();                assertEquals("Properties counts are equal.", propertiesInCount, propertiesOutCount);                Enumeration property = propertiesIn.keys();                while (property.hasMoreElements())                {                    String propertyName = (String) property.nextElement();                    String propertyInValue = propertiesIn.getValue(propertyName);                    String propertyOutValue = propertiesOut.getValue(propertyName);                    assertNotNull("\"" + propertyName + "\" exists in output rule properties.", propertyOutValue);                    String msg = "Rule property \"" + propertyName + "\" values are equal.";                    assertEquals(msg, propertyInValue, propertyOutValue);                    String propertyInValueType = propertiesIn.getValueType(propertyName);                    String propertyOutValueType = propertiesOut.getValueType(propertyName);                    assertNotNull("\"" + propertyName + "\" exists in output rule properties.", propertyOutValueType);                    msg = "Rule property \"" + propertyName + "\" value types are equal.";                    assertEquals(msg, propertyInValueType, propertyOutValueType);                }            }        }    }    /**     ********************************************************************************     *     * @param args     */    public static void main(String[] args)    {        (new RuleSetReadWriteTest()).testReadWrite();    }}
/* * User: tom * Date: Jul 1, 2002 * Time: 2:18:51 PM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import net.sourceforge.pmd.RuleSet;import net.sourceforge.pmd.RuleSetFactory;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleSetNotFoundException;import java.io.ByteArrayInputStream;import java.util.Iterator;import java.util.Set;import java.util.HashSet;public class RuleSetFactoryTest  extends TestCase {    private static final String EOL = System.getProperty("line.separator", "\n");    private static final String EMPTY_RULE_SET =                        "<?xml version=\"1.0\"?>" + EOL +                        "<ruleset name=\"test\">" + EOL +                        "<description>testdesc</description>" + EOL +                        "</ruleset>";    private static final String SINGLE_RULE_SET =                        "<?xml version=\"1.0\"?>" + EOL +                        "<ruleset name=\"test\">" + EOL +                        "<description>" + EOL +                        "testdesc" + EOL +                        "</description>" + EOL +                        "<rule " + EOL +                        "name=\"MockRuleName\" " + EOL +                        "message=\"avoid the mock rule\" " + EOL +                        "class=\"test.net.sourceforge.pmd.MockRule\">" +                        "</rule>" + EOL +                        "</ruleset>";    private static final String MULTIPLE_RULE_SET =                        "<?xml version=\"1.0\"?>" + EOL +                        "<ruleset name=\"test\">" + EOL +                        "<description>" + EOL +                        "testdesc" + EOL +                        "</description>" + EOL +                        "<rule name=\"MockRuleName1\" "  + EOL +                        "message=\"avoid the mock rule\" " + EOL +                        "class=\"test.net.sourceforge.pmd.MockRule\">" + EOL +                        "</rule>" + EOL +                        "<rule name=\"MockRuleName2\" "  + EOL +                        "message=\"avoid the mock rule\" " + EOL +                        "class=\"test.net.sourceforge.pmd.MockRule\">" + EOL +                        "</rule>" + EOL +                        "</ruleset>";    private static final String RULE_WITH_PROPERTIES = "<?xml version=\"1.0\"?>" + EOL +                        "<ruleset name=\"test\">" + EOL +                        "<description>" + EOL +                        "testdesc" + EOL +                        "</description>" + EOL +                        "<rule name=\"MockRuleName\" " + EOL +                        "message=\"avoid the mock rule\" " + EOL +                        "class=\"test.net.sourceforge.pmd.MockRule\">" +  EOL +                        "<description>" + EOL +                        "testdesc2" + EOL +                        "</description>" + EOL +                        "<properties>" + EOL +                        "<property name=\"fooBoolean\" value=\"true\"/>" + EOL +                        "<property name=\"fooDouble\" value=\"1.0\" />" + EOL +                        "<property name=\"foo\" value=\"bar\"/>" + EOL +                        "<property name=\"fooint\" value=\"2\"/>" + EOL +                        "</properties>" +  EOL +                        "</rule>" + EOL +                        "</ruleset>";    public void testRuleSetNotFound() {        RuleSetFactory rsf = new RuleSetFactory();        try {            rsf.createRuleSet("fooooo");            throw new RuntimeException("Should have thrown a RuleSetNotFoundException");        } catch (RuleSetNotFoundException rsnfe) {            // cool        }    }    public void testCreateEmptyRuleSet() {        RuleSetFactory rsf = new RuleSetFactory();        RuleSet rs = rsf.createRuleSet(new ByteArrayInputStream(EMPTY_RULE_SET.getBytes()));        assertEquals("test", rs.getName());        assertEquals(0, rs.size());    }    public void testSingleRule() {        RuleSetFactory rsf = new RuleSetFactory();        RuleSet rs = rsf.createRuleSet(new ByteArrayInputStream(SINGLE_RULE_SET.getBytes()));        assertEquals("test", rs.getName());        assertEquals(1, rs.size());        Iterator i = rs.getRules().iterator();        Object o = i.next();        assertTrue(o instanceof MockRule);        assertTrue(!i.hasNext());        Rule r = (Rule)o;        assertEquals("MockRuleName", r.getName());        assertEquals("avoid the mock rule", r.getMessage());    }    public void testMultipleRules() {        RuleSetFactory rsf = new RuleSetFactory();        RuleSet rs = rsf.createRuleSet(new ByteArrayInputStream(MULTIPLE_RULE_SET.getBytes()));        assertEquals("test", rs.getName());        assertEquals(2, rs.size());        Set expected = new HashSet();        expected.add("MockRuleName1");        expected.add("MockRuleName2");        for (Iterator i = rs.getRules().iterator(); i.hasNext();) {            Rule rule = (Rule)i.next();            assertTrue(expected.contains(rule.getName()));        }    }    public void testProps() {        RuleSetFactory rsf = new RuleSetFactory();        RuleSet rs = rsf.createRuleSet(new ByteArrayInputStream(RULE_WITH_PROPERTIES.getBytes()));        Rule r = (Rule)rs.getRules().iterator().next();assertTrue( r.hasProperty("foo"));        assertEquals("bar", r.getStringProperty("foo"));        assertEquals(2, r.getIntProperty("fooint"));        assertTrue( r.hasProperty("fooBoolean"));        assertTrue(r.getBooleanProperty("fooBoolean"));        assertTrue( r.hasProperty("fooDouble"));        assertEquals( 1.0, r.getDoubleProperty("fooDouble"),  0.05 );        assertTrue( !r.hasProperty("BuggleFish"));        assertTrue(r.getDescription().indexOf("testdesc2") != -1);    }/*    public void testExternalReferences() {        RuleSetFactory rsf = new RuleSetFactory();        RuleSet rs = rsf.createRuleSet(new ByteArrayInputStream(EXTERNAL_REFERENCE_RULE_SET.getBytes()));        assertEquals(1, rs.size());    }    private static final String EXTERNAL_REFERENCE_RULE_SET = "<?xml version=\"1.0\"?>" +                         "<ruleset name=\"test\">\r\n<description>testdesc</description><rule ref=\"rulesets/basic.xml/EmptyCatchBlock\"/></ruleset>";    private static final String SINGLE_RULE_NO_PROPS = "<?xml version=\"1.0\"?>" +                         "<ruleset name=\"test\">\r\n<description>testdesc</description>" +                         "<rule name=\"MockRuleName\" message=\"avoid the mock rule\" class=\"test.net.sourceforge.pmd.MockRule\">" +                         "<properties></properties>" +                         "</rule></ruleset>";*/}
/* * User: tom * Date: Jun 26, 2002 * Time: 4:30:42 PM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.Report;public class RuleContextTest extends TestCase {    public void testReport() {        RuleContext ctx = new RuleContext();        assertNull(ctx.getReport());        Report r = new Report();        ctx.setReport(r);        Report r2 = ctx.getReport();        assertEquals(r, r2);    }    public void testFilename() {        RuleContext ctx = new RuleContext();        assertNull(ctx.getSourceCodeFilename());        ctx.setSourceCodeFilename("foo");        assertEquals("foo", ctx.getSourceCodeFilename());    }}
package test.net.sourceforge.pmd;import junit.framework.*;import java.util.*;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleViolation;public class RuleViolationTest extends TestCase {    public void testConstructor1() {        Rule rule = new MockRule("name", "desc");        RuleViolation r = new RuleViolation(rule, 2, "filename");        assertEquals(rule, r.getRule());        assertEquals(2, r.getLine());        assertEquals("filename", r.getFilename());    }    public void testConstructor2() {        Rule rule = new MockRule("name", "desc");        RuleViolation r = new RuleViolation(rule, 2, "description", "filename");        assertEquals(rule, r.getRule());        assertEquals(2, r.getLine());        assertEquals("filename", r.getFilename());        assertEquals("description", r.getDescription());    }    public void testComparatorWithDifferentFilenames() {        Rule rule = new MockRule("name", "desc");        RuleViolation.RuleViolationComparator comp = new RuleViolation.RuleViolationComparator();        RuleViolation r1 = new RuleViolation(rule, 10, "description", "filename1");        RuleViolation r2 = new RuleViolation(rule, 20, "description", "filename2");        assertEquals(-1, comp.compare(r1, r2));        assertEquals(1, comp.compare(r2, r1));    }    public void testComparatorWithSameFileDifferentLines() {        Rule rule = new MockRule("name", "desc");        RuleViolation.RuleViolationComparator comp = new RuleViolation.RuleViolationComparator();        RuleViolation r1 = new RuleViolation(rule, 10, "description", "filename");        RuleViolation r2 = new RuleViolation(rule, 20, "description", "filename");        assertTrue(comp.compare(r1, r2) < 0);        assertTrue(comp.compare(r2, r1) > 0);    }    public void testComparatorWithSameFileSameLines() {        Rule rule = new MockRule("name", "desc");        RuleViolation.RuleViolationComparator comp = new RuleViolation.RuleViolationComparator();        RuleViolation r1 = new RuleViolation(rule, 10, "description", "filename");        RuleViolation r2 = new RuleViolation(rule, 10, "description", "filename");        assertEquals(0, comp.compare(r1, r2));        assertEquals(0, comp.compare(r2, r1));    }}
package test.net.sourceforge.pmd.rx.rules;import java.util.Set;import java.util.Iterator;import net.sourceforge.pmd.rx.facts.*;import net.sourceforge.pmd.rx.rules.*;import test.net.sourceforge.pmd.rx.*;public class DuplicateImportTest    extends DroolsRuleTst{    private String testName = null;    private String JAVA_NO_DUPE ="import java.util.*;" +"public class HelloWorld { }";    private String JAVA_DUPE_ON_DEMAND ="import java.util.*;" +"import java.util.*;" +"public class HelloWorld { }";    private String JAVA_DUPE_NO_DEMAND ="import java.util.List;" +"import java.util.List;" +"public class HelloWorld { }";    private String JAVA_DUPE_ON_NO_DEMAND ="import java.util.*;" +"import java.util.List;" +"public class HelloWorld { }";    public DuplicateImportTest(String name) {super( name );this.testName = name;    }    public void testNoDupes() throws Throwable    {Set results = collectViolations( new DuplicateImport(), JAVA_NO_DUPE );Iterator rvs = results.iterator();while (rvs.hasNext()) {    RuleViolationFact rvFact = (RuleViolationFact) rvs.next();    ImportFact impFact = (ImportFact) rvFact.getFact();    System.err.println("DuplicateImport: " + impFact.getACU() + "/" +       impFact.getImportPackage() + "/" +       Integer.toString( impFact.getLineNumber() ));}assertEquals("Expecting no violations",     0, results.size() );    }    public void testDupeOnDemand()throws Throwable    {Set results = collectViolations( new DuplicateImport(), JAVA_DUPE_ON_DEMAND );assertEquals("Expecting 2 violations",     2, results.size() );    }    public void testDupeNoDemand()throws Throwable    {Set results = collectViolations( new DuplicateImport(), JAVA_DUPE_NO_DEMAND );assertEquals("Expecting 2 violations",     2, results.size() );    }    public void testDupeOnNoDemand()throws Throwable    {Set results = collectViolations( new DuplicateImport(), JAVA_DUPE_ON_NO_DEMAND );assertEquals("Expecting 2 violations",     2, results.size() );    }}
package test.net.sourceforge.pmd.rx;import java.util.Set;import java.util.HashSet;import java.util.Iterator;import java.io.StringReader;import org.drools.*;import org.drools.spi.*;import org.drools.semantic.java.*;import net.sourceforge.pmd.*;import net.sourceforge.pmd.rx.*;import net.sourceforge.pmd.ast.*;import net.sourceforge.pmd.rx.facts.*;import junit.framework.TestCase;public class DroolsVisitorTest    extends TestCase{    private String testName = null;    private static String JAVA_TEST_PACKAGE ="package test;" +"public class HelloWorld { }";    private static String JAVA_TEST_IMPORT_1 ="import java.util.*;" +"public class HelloWorld { }";    private static String JAVA_TEST_IMPORT_2 ="import java.util.*;" +"import java.lang.ref.*;" +"public class HelloWorld { }";    private static String JAVA_TEST_IMPORT_SINGLE ="import java.util.Map;" +"public class HelloWorld { }";    private static String JAVA_TEST_IMPORT_DUP ="import java.util.*;" +"import java.util.*;" +"public class HelloWorld { }";    private static String JAVA_TEST_CLASS ="class TestClass { }";    private static String JAVA_TEST_CLASS_PUBLIC ="public class TestClass { }";    private static String JAVA_TEST_CLASS_ABSTRACT ="abstract class TestClass { }";    private static String JAVA_TEST_CLASS_INNER ="class Outer { class Inner { } }";    private static String JAVA_TEST_CLASS_ANON ="class Named { " +"  void foo() { Named.bar( new Runnable() { } ); } " +        "}";    private ASTCompilationUnit current = null;    public DroolsVisitorTest(String name) {super( name );this.testName = name;    }    public void testPackage() throws Throwable {Set results =    collectFacts( net.sourceforge.pmd.rx.facts.PackageFact.class,  JAVA_TEST_PACKAGE );assertEq("Expected one result.", 1, results.size() );Iterator facts = results.iterator();Object fact = facts.next();assertT( "Expected PackageFact.", fact instanceof PackageFact );PackageFact pkgFact = (PackageFact) fact;assertEq("Expecting package name of 'test'", "test", pkgFact.getPackageName() );    }    public void testImport1() throws Throwable {Set results =    collectFacts( net.sourceforge.pmd.rx.facts.ImportFact.class,  JAVA_TEST_IMPORT_1 );assertEq("Expected one result.", 1, results.size() );Iterator imports = results.iterator();Object fact = imports.next();assertT("Expected type of ImportFact",fact instanceof ImportFact);ImportFact impFact = (ImportFact) fact;assertEq("Expecting 'java.util' in Imports.", "java.util", impFact.getImportPackage() );    }    public void testImport2() throws Throwable {Set results =    collectFacts( net.sourceforge.pmd.rx.facts.ImportFact.class,  JAVA_TEST_IMPORT_2 );assertEq("Expected two results.", 2, results.size() );boolean sawUtil = false;boolean sawRef = false;ACUFact acu = null;Iterator imports = results.iterator();while (imports.hasNext()) {    Object fact = imports.next();    assertT("Expected type of ImportFact",    fact instanceof ImportFact);    ImportFact impFact = (ImportFact) fact;    if (acu == null) {acu = impFact.getACU();    }        assertEq("Expecting Same ACU",     acu, acu );    sawUtil = sawUtil |impFact.getImportPackage().equals("java.util");    sawRef = sawRef |impFact.getImportPackage().equals("java.lang.ref");}assertT("Expecting one import of 'java.util'", sawUtil);assertT("Expecting one import of 'java.lang.ref'", sawRef);    }    public void testImportDup() throws Throwable {Set results =    collectFacts( net.sourceforge.pmd.rx.facts.ImportFact.class,  JAVA_TEST_IMPORT_DUP );assertEq("Expected two results.", 2, results.size() );ACUFact acu = null;Iterator dups = results.iterator();while (dups.hasNext()) {    Object fact = dups.next();        assertT( "Expected fact to be of ImportFact type.",     fact instanceof ImportFact);    ImportFact impFact = (ImportFact) fact;    if (acu == null) {acu = impFact.getACU();    }        assertEq("Expecting Same ACU",     acu, acu );        assertT( "Should be On Demand.",     impFact.isOnDemand() );    assertEq("Expected java.util.Map to be imported.",     "java.util", impFact.getImportPackage() );}    }    public void testImportSingle() throws Throwable {Set results =    collectFacts( net.sourceforge.pmd.rx.facts.ImportFact.class,  JAVA_TEST_IMPORT_SINGLE );assertEq("Expected one result.", 1, results.size() );Iterator singles = results.iterator();Object fact = singles.next();assertT( "Expected fact to be of ImportFact type.", fact instanceof ImportFact );ImportFact impFact = (ImportFact) fact;assertT( "Should not be listed as On Demand.", !impFact.isOnDemand() );assertEq("Expected java.util.Map to be imported.", "java.util.Map", impFact.getImportPackage() );    }    public void testClass() throws Throwable {Set results =    collectFacts( net.sourceforge.pmd.rx.facts.ClassFact.class,  JAVA_TEST_CLASS );assertEq( "Expected one result.",  1, results.size() );Iterator facts = results.iterator();Object fact = facts.next();assertT("Expected fact to be of ClassFact type.",fact instanceof ClassFact );ClassFact classFact = (ClassFact) fact;assertEq("Expected ClassName to be 'TestClass'", "TestClass", classFact.getClassName() );assertEq("Expected outer class to be 'null'", null, classFact.getOuterClass() );verifyClassFlags( classFact, false, false, false, false );    }    public void testClassPublic() throws Throwable {Set results =      collectFacts( net.sourceforge.pmd.rx.facts.ClassFact.class,  JAVA_TEST_CLASS_PUBLIC );assertEq( "Expected one result.",  1, results.size() );Iterator singles = results.iterator();Object fact = singles.next();assertT( "Expected fact to be of ClassFact type.", fact instanceof ClassFact );ClassFact classFact = (ClassFact) fact;assertEq("Expected ClassName to be 'TestClass'", "TestClass",  classFact.getClassName() );assertEq("Expected outer class to be 'null'", null, classFact.getOuterClass() );verifyClassFlags( classFact, true, false, false, false );    }    public void testClassAbstract() throws Throwable {Set results =      collectFacts( net.sourceforge.pmd.rx.facts.ClassFact.class,  JAVA_TEST_CLASS_ABSTRACT );assertEq( "Expected one result.",  1, results.size() );Iterator singles = results.iterator();Object fact = singles.next();assertT( "Expected fact to be of ClassFact type.", fact instanceof ClassFact );ClassFact classFact = (ClassFact) fact;assertEq("Expected ClassName to be 'TestClass'", "TestClass",  classFact.getClassName() );assertEq("Expected outer class to be 'null'", null, classFact.getOuterClass() );verifyClassFlags( classFact, false, true, false, false );    }        public void testClassInner() throws Throwable {  Set results =      collectFacts(net.sourceforge.pmd.rx.facts.ClassFact.class,   JAVA_TEST_CLASS_INNER );  assertEq("Expecting two results.",   2, results.size() );  Iterator facts = results.iterator();  ClassFact outer = null;  ClassFact inner = null;  while (facts.hasNext()) {      Object fact = facts.next();          assertT("Expected both facts to be ClassFact type.",      fact instanceof ClassFact );          ClassFact classFact = (ClassFact) fact;          if (classFact.getClassName().equals("Outer")) {  outer = classFact;      }          if (classFact.getClassName().equals("Inner")) {  inner = classFact;      }}    }    public void testClassAnon() throws Throwable {  Set results =      collectFacts(net.sourceforge.pmd.rx.facts.ClassFact.class,   JAVA_TEST_CLASS_ANON );  assertEq("Expecting two results.",   2, results.size() );  Iterator facts = results.iterator();  ClassFact named = null;  ClassFact anon = null;  while (facts.hasNext()) {      Object fact = facts.next();          assertT("Expected both facts to be ClassFact type.",      fact instanceof ClassFact );          ClassFact classFact = (ClassFact) fact;      if (classFact.getOuterClass() == null) {  named = classFact;      } else {  anon = classFact;      }  }  assertNotNull( "Expected to find Named class.", named );  assertNotNull( "Expected to find Anon class.", anon );  assertEq( "Expected both classes to have same ACU.",    named.getACU(), anon.getACU() );  assertEq( "Expected Outer Class of Anon to be Named.",    named, anon.getOuterClass() );    }        public void assertEq( String message,  Object expected,  Object result ) throws Throwable    {try {    assertEquals( message, expected, result );} catch (Throwable t) {    current.dump(testName + ": ");    throw t;}    }        public void assertEq( String message,  boolean expected,  boolean result ) throws Throwable    {try {    assertEquals( message, expected, result );} catch (Throwable t) {    current.dump(testName + ": ");    throw t;}    }    public void assertEq( String message,  int expected,  int result ) throws Throwable    {try {    assertEquals( message, expected, result );} catch (Throwable t) {    current.dump(testName + ": ");    throw t;}    }    public void assertT( String message, boolean cond ) throws Throwable    {try {    assertTrue( message, cond );} catch (Throwable t) {    current.dump(testName + ": ");    throw t;}    }    public Set collectFacts( Class clazz,     String javaCode )throws Throwable    {RuleBase rules = new RuleBase();FactCollector collector = new FactCollector( clazz );rules.addRule( collector );JavaParser parser =    new JavaParser( new StringReader( javaCode ));ASTCompilationUnit acu =    parser.CompilationUnit();current = acu;WorkingMemory memory = rules.createWorkingMemory();DroolsVisitor IUT = new DroolsVisitor( memory );IUT.visit( acu, null );return collector.getFacts();    }    public void verifyClassFlags( ClassFact classFact,  boolean bPublic,  boolean bAbstract,  boolean bFinal,  boolean bStrict ) throws Throwable    {assertEq("Public: ", bPublic, classFact.isPublic() );assertEq("Abstract: ", bAbstract, classFact.isAbstract() );assertEq("Final: ", bFinal, classFact.isFinal() );assertEq("Strict: ", bStrict, classFact.isStrict() );    }}
/* * User: tom * Date: Sep 5, 2002 * Time: 12:06:26 PM */package test.net.sourceforge.pmd.dcpd;import junit.framework.TestCase;import net.sourceforge.pmd.cpd.TokenSets;import net.sourceforge.pmd.cpd.Occurrences;import net.sourceforge.pmd.cpd.Tile;import net.sourceforge.pmd.dcpd.*;import java.util.ArrayList;import java.util.List;import java.util.Iterator;public class TileHarvesterTest extends TestCase {    public TileHarvesterTest(String name) {        super(name);    }    public void test1() throws Throwable {/*        TokenSets tokenSets = TileExpanderTest.createTokenSets();        MockJavaSpace space = new MockJavaSpace();        Job job = new Job("foo", new Integer(1));        Occurrences occ = new Occurrences(tokenSets);        // do the expansion from 1 to 2 tokens and write those expansions        // back to the mock space so TileHarvester can read them        int tilesSoFar=0;        List tilesToWrite = new ArrayList();        for (Iterator i = occ.getTiles(); i.hasNext();) {            Tile tile = (Tile)i.next();            TileWrapper tw = new TileWrapper(tile,                    TileExpanderTest.marshal(occ.getOccurrences(tile)),                    job.id,                    Batch.NOT_DONE,                    null,                    new Integer(tilesSoFar),                    null, null);            tilesToWrite.add(tw);            tilesSoFar++;        }        space.setTileWrappers(tilesToWrite);        TileExpander expander = new TileExpander(space, new TokenSetsWrapper(tokenSets, job.id));        expander.expandAvailableTiles();        space.setTileWrappers(space.getWrittenEntries());        // now the test        TileHarvester tileGatherer = new TileHarvester(space, job);        Occurrences newOcc = tileGatherer.harvest(occ.size());        assertEquals(2, newOcc.size());*/    }}
/* * User: tom * Date: Sep 5, 2002 * Time: 11:04:26 AM */package test.net.sourceforge.pmd.dcpd;import junit.framework.TestCase;import net.jini.space.JavaSpace;import net.jini.core.lease.Lease;import net.sourceforge.pmd.dcpd.*;import net.sourceforge.pmd.cpd.*;import java.io.StringReader;import java.util.Iterator;import java.util.List;import java.util.ArrayList;import java.util.Stack;public class TileExpanderTest extends TestCase {    public TileExpanderTest(String name) {        super(name);    }    public void test1() throws Throwable {/*        TokenSets tokenSets = TileExpanderTest.createTokenSets();        MockJavaSpace space = new MockJavaSpace();        Job job = new Job("foo", new Integer(1));        Occurrences occ = new Occurrences(tokenSets);        int tilesSoFar=0;        List tilesToWrite = new ArrayList();        for (Iterator i = occ.getTiles(); i.hasNext();) {            Tile tile = (Tile)i.next();            TileWrapper tw = new TileWrapper(tile,                    marshal(occ.getOccurrences(tile)),                    job.id,                    Batch.NOT_DONE,                    null,                    new Integer(tilesSoFar),                    null, null);            tilesToWrite.add(tw);            tilesSoFar++;        }        space.setTileWrappers(tilesToWrite);        TileExpander expander = new TileExpander(space, new TokenSetsWrapper(tokenSets, job.id));        expander.expandAvailableTiles();        List writtenEntries = space.getWrittenEntries();        assertEquals(7, writtenEntries.size());*/    }   public static List marshal(Iterator i) {        List list = new ArrayList();        while (i.hasNext()) {            list.add(i.next());        }        return list;    }    public static TokenSets createTokenSets() throws Throwable {        TokenSets tokenSets = new TokenSets();        TokenList tokenList1 = new TokenList("list1");        JavaTokensTokenizer tokenizer = new JavaTokensTokenizer();        tokenizer.tokenize(tokenList1, new StringReader("public class Foo {}"));        tokenSets.add(tokenList1);        TokenList tokenList2 = new TokenList("list2");        tokenizer.tokenize(tokenList2, new StringReader("public class Bar {}"));        tokenSets.add(tokenList2);        return tokenSets;    }}
/* * User: tom * Date: Sep 6, 2002 * Time: 4:15:46 PM */package test.net.sourceforge.pmd.dcpd;import junit.framework.TestCase;import net.sourceforge.pmd.cpd.TokenSets;import net.sourceforge.pmd.cpd.Occurrences;import net.sourceforge.pmd.dcpd.Job;import net.sourceforge.pmd.dcpd.TilePlanter;public class TilePlanterTest extends TestCase {    public TilePlanterTest(String name) {        super(name);    }    public void test1() throws Throwable {/*        TokenSets tokenSets = TileExpanderTest.createTokenSets();        MockJavaSpace space = new MockJavaSpace();        Job job = new Job("foo", new Integer(1));        Occurrences occ = new Occurrences(tokenSets);        TilePlanter scatterer = new TilePlanter(space, job);        scatterer.plant(occ);        assertEquals(6, space.getWrittenEntries().size());*/    }}