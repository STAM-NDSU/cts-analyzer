package test.net.sourceforge.pmd.rules.design;import test.net.sourceforge.pmd.rules.*;import java.util.List;import java.util.ArrayList;import java.io.InputStream;import junit.framework.TestCase;import net.sourceforge.pmd.*;import net.sourceforge.pmd.ast.*;import net.sourceforge.pmd.rules.design.*;public class UseSingletonRuleTest    extends RuleTst{    public UseSingletonRuleTest( String name ) {super( name );    }    public void testUseSingleton1() throws Throwable     {Report report = process("design/UseSingleton1.java",new UseSingletonRule());assertEquals( 1, report.countViolationsInCurrentFile() );    }    public void testUseSingleton2() throws Throwable     {Report report = process("design/UseSingleton2.java",new UseSingletonRule());assertEquals( 0, report.countViolationsInCurrentFile() );    }    public void testUseSingleton3() throws Throwable     {Report report = process("design/UseSingleton3.java",new UseSingletonRule());assertEquals( 1, report.countViolationsInCurrentFile() );    }    public void testUseSingleton4() throws Throwable     {Report report = process("design/UseSingleton4.java",new UseSingletonRule());assertEquals( 0, report.countViolationsInCurrentFile() );    }}
/* * User: tom * Date: Jun 28, 2002 * Time: 2:55:48 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.rules.IfElseStmtsMustUseBracesRule;public class IfElseStmtsMustUseBracesRuleTest extends RuleTst {    public IfElseStmtsMustUseBracesRuleTest(String name) {        super(name);    }    public void testIfElseStmtsMustUseBraces1() throws Throwable {        Report report = process("IfElseStmtsNeedBraces1.java", new IfElseStmtsMustUseBracesRule());        assertEquals(1, report.countViolationsInCurrentFile());    }    public void testIfElseStmtsMustUseBraces2() throws Throwable {        Report report = process("IfElseStmtsNeedBraces2.java", new IfElseStmtsMustUseBracesRule());        assertTrue(report.currentFileHasNoViolations());    }}
/* * User: tom * Date: Jun 28, 2002 * Time: 1:43:05 PM */package test.net.sourceforge.pmd.rules;import junit.framework.TestCase;import net.sourceforge.pmd.*;import net.sourceforge.pmd.rules.UnusedLocalVariableRule;import net.sourceforge.pmd.rules.SystemPropsRule;import java.util.Iterator;import java.util.ArrayList;import java.util.List;import java.io.FileNotFoundException;public class UnusedLocalVariableTest extends RuleTst {    public UnusedLocalVariableTest(String name) {        super(name);    }    public void testUnusedLocal1() throws Throwable {        Report report = process("Unused1.java", new UnusedLocalVariableRule());        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new UnusedLocalVariableRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testUnusedLocal2() throws Throwable {        Report report = process("Unused2.java", new UnusedLocalVariableRule());        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new UnusedLocalVariableRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testUnusedLocal3() throws Throwable {        Report report = process("Unused3.java", new UnusedLocalVariableRule());        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new UnusedLocalVariableRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testUnusedLocal4() throws Throwable {        Report report = process("Unused4.java", new UnusedLocalVariableRule());        assertTrue(report.currentFileHasNoViolations());    }    public void testUnusedLocal5() throws Throwable {        Report report = process("Unused5.java", new UnusedLocalVariableRule());        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new UnusedLocalVariableRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testUnusedLocal6() throws Throwable {        Report report = process("Unused6.java", new UnusedLocalVariableRule());        assertTrue(report.currentFileHasNoViolations());    }    public void testUnusedLocal7() throws Throwable {        Report report = process("Unused7.java", new UnusedLocalVariableRule());        assertTrue(report.currentFileHasNoViolations());    }    public void testUnusedLocal8() throws Throwable {        Report report = process("Unused8.java", new UnusedLocalVariableRule());        assertTrue(report.currentFileHasNoViolations());    }    public void testUnusedLocal9() throws Throwable {        Report report = process("Unused9.java", new UnusedLocalVariableRule());        assertEquals(2, report.countViolationsInCurrentFile());        Iterator i =  report.violationsInCurrentFile();        assertEquals(new UnusedLocalVariableRule(), ((RuleViolation)i.next()).getRule());        assertEquals(new UnusedLocalVariableRule(), ((RuleViolation)i.next()).getRule());    }    public void testUnusedLocal10() throws Throwable {        Report report = process("Unused10.java", new UnusedLocalVariableRule());        assertTrue(report.currentFileHasNoViolations());    }}
/* * User: tom * Date: Jun 28, 2002 * Time: 2:35:51 PM */package test.net.sourceforge.pmd.rules;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.rules.UnusedPrivateInstanceVariableRule;import java.util.Iterator;public class UnusedPrivateInstanceVariableRuleTest extends RuleTst {    public UnusedPrivateInstanceVariableRuleTest(String name) {        super(name);    }    public void testUnusedPrivateInstanceVar1() throws Throwable {        Report report = process("UnusedPrivateInstanceVar1.java", new UnusedPrivateInstanceVariableRule());        assertEquals(1, report.countViolationsInCurrentFile());        Iterator i =  report.violationsInCurrentFile();        assertEquals(new UnusedPrivateInstanceVariableRule(), ((RuleViolation)i.next()).getRule());    }    public void testUnusedPrivateInstanceVar2() throws Throwable {        Report report = process("UnusedPrivateInstanceVar2.java", new UnusedPrivateInstanceVariableRule());        assertTrue(report.currentFileHasNoViolations());    }    public void testUnusedPrivateInstanceVar3() throws Throwable {        Report report = process("UnusedPrivateInstanceVar3.java", new UnusedPrivateInstanceVariableRule());        assertEquals(1, report.countViolationsInCurrentFile());        Iterator i =  report.violationsInCurrentFile();        assertEquals(new UnusedPrivateInstanceVariableRule(), ((RuleViolation)i.next()).getRule());    }    public void testUnusedPrivateInstanceVar4() throws Throwable {        Report report = process("UnusedPrivateInstanceVar4.java", new UnusedPrivateInstanceVariableRule());        assertTrue(report.currentFileHasNoViolations());    }    public void testUnusedPrivateInstanceVar6() throws Throwable {        Report report = process("UnusedPrivateInstanceVar6.java", new UnusedPrivateInstanceVariableRule());        assertTrue(report.currentFileHasNoViolations());    }    public void testUnusedPrivateInstanceVar7() throws Throwable {        Report report = process("UnusedPrivateInstanceVar7.java", new UnusedPrivateInstanceVariableRule());        assertTrue(report.currentFileHasNoViolations());    }    public void testUnusedPrivateInstanceVar8() throws Throwable {        Report report = process("UnusedPrivateInstanceVar8.java", new UnusedPrivateInstanceVariableRule());        assertTrue(report.currentFileHasNoViolations());    }/*TODO - this tests unused variables in nested classes    public void testUnusedPrivateInstanceVar9() throws Throwable {        Report report = process("UnusedPrivateInstanceVar9.java");        assertEquals(1, report.violationsInCurrentFile());    }TODO - this tests unused variables in nested classes*/}
/* * User: tom * Date: Jun 28, 2002 * Time: 2:34:20 PM */package test.net.sourceforge.pmd.rules;import junit.framework.TestCase;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.rules.UnnecessaryConversionTemporaryRule;public class UnnecessaryTemporariesRuleTest extends RuleTst{    public UnnecessaryTemporariesRuleTest(String name) {        super(name);    }    public void testUnnecessaryTemporaries() throws Throwable {        Report report = process("UnnecessaryTemporary.java", new UnnecessaryConversionTemporaryRule());        assertEquals(6, report.countViolationsInCurrentFile());        assertEquals(new UnnecessaryConversionTemporaryRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }}
/* * User: tom * Date: Jun 28, 2002 * Time: 1:56:19 PM */package test.net.sourceforge.pmd.rules;import junit.framework.TestCase;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.rules.EmptyCatchBlockRule;public class EmptyCatchBlockRuleTest extends RuleTst {    public EmptyCatchBlockRuleTest(String name) {        super(name);    }    public void testEmptyCatchBlock() throws Throwable {        Report report = process("EmptyCatchBlock.java", new EmptyCatchBlockRule());        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new EmptyCatchBlockRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testEmptyCatchBlock2() throws Throwable {        Report report = process("EmptyCatchBlock2.java", new EmptyCatchBlockRule());        assertTrue(report.currentFileHasNoViolations());    }    public void testEmptyCatchBlock3() throws Throwable {        Report report = process("EmptyCatchBlock3.java", new EmptyCatchBlockRule());        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new EmptyCatchBlockRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }}
package test.net.sourceforge.pmd.ast;import java.util.Set;import java.util.Iterator;import net.sourceforge.pmd.ast.*;public class FieldDeclTest    extends ParserTst{    public FieldDeclTest( String name ) {super( name );    }    public String makeAccessJavaCode( String access[] ) {String RC =     "public class Test { ";for (int i = 0; i < access.length; i++) {    RC += access[i] + " ";}RC += " int j;  }";return RC;    }    public ASTFieldDeclaration getFieldDecl( String access[] )throws Throwable    {Set fields = getNodes( ASTFieldDeclaration.class,       makeAccessJavaCode( access ) );assertEquals( "Wrong number of fields",      1, fields.size());Iterator i = fields.iterator();return (ASTFieldDeclaration) i.next();    }    public void testPublic() throws Throwable    {String access[] = { "public" };ASTFieldDeclaration afd = getFieldDecl( access );assertTrue( "Expecting field to be public.",    afd.isPublic() );    }    public void testProtected() throws Throwable    {String access[] = { "protected" };ASTFieldDeclaration afd = getFieldDecl( access );assertTrue( "Expecting field to be protected.",    afd.isProtected() );    }    public void testPrivate() throws Throwable    {String access[] = { "private" };ASTFieldDeclaration afd = getFieldDecl( access );assertTrue( "Expecting field to be private.",    afd.isPrivate() );    }    public void testStatic() throws Throwable    {String access[] = { "private", "static" };ASTFieldDeclaration afd = getFieldDecl( access );assertTrue( "Expecting field to be static.",    afd.isStatic() );assertTrue( "Expecting field to be private.",    afd.isPrivate() );    }    public void testFinal() throws Throwable    {String access[] = { "public", "final" };ASTFieldDeclaration afd = getFieldDecl( access );assertTrue( "Expecting field to be final.",    afd.isFinal() );assertTrue( "Expecting field to be public.",    afd.isPublic() );    }    public void testTransient() throws Throwable    {String access[] = { "private", "transient" };ASTFieldDeclaration afd = getFieldDecl( access );assertTrue( "Expecting field to be private.",    afd.isPrivate() );assertTrue( "Expecting field to be transient.",    afd.isTransient() );    }    public void testVolatile() throws Throwable    {String access[] = { "private", "volatile" };ASTFieldDeclaration afd = getFieldDecl( access );assertTrue( "Expecting field to be volatile.",    afd.isVolatile() );assertTrue( "Expecting field to be private.",    afd.isPrivate() );    }}
package test.net.sourceforge.pmd.ast;import java.io.StringReader;import java.util.Set;import java.util.HashSet;import java.util.Map;import java.util.HashMap;import java.util.Iterator;import net.sourceforge.pmd.ast.*;public class MethodDeclTest    extends ParserTst{    public MethodDeclTest( String name ) {super( name );    }    public void testPublic() throws Throwable    {String access[] = { "public" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be public.",    amd.isPublic() );    }    public void testPrivate() throws Throwable    {String access[] = { "private" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be private.",    amd.isPrivate() );    }    public void testProtected() throws Throwable    {String access[] = { "protected" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be protected.",    amd.isProtected() );    }    public void testFinal() throws Throwable    {String access[] = { "public", "final" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be final.",    amd.isFinal() );assertTrue( "Expecting method to be public.",    amd.isPublic() );    }    public void testSynchronized() throws Throwable    {String access[] = { "public", "synchronized" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be synchronized.",    amd.isSynchronized() );assertTrue( "Expecting method to be public.",    amd.isPublic() );    }    public void testAbstract() throws Throwable    {String access[] = { "public", "abstract" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be abstract.",    amd.isAbstract() );assertTrue( "Expecting method to be public.",    amd.isPublic() );    }    public void testNative() throws Throwable    {String access[] = { "private", "native" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be native.",    amd.isNative() );assertTrue( "Expecting method to be private.",    amd.isPrivate() );    }    public void testStrict() throws Throwable    {String access[] = { "public", "strictfp" };ASTMethodDeclaration amd = getMethodDecl( access );assertTrue( "Expecting method to be strict.",    amd.isStrict() );assertTrue( "Expecting method to be public.",    amd.isPublic() );    }    public ASTMethodDeclaration getMethodDecl( String access[] )throws Throwable    {String javaCode =    "public class Test { ";for (int i = 0; i < access.length; i++) {    javaCode += access[i] + " ";} javaCode +=    " void stuff() { } }";Set methods = getNodes( ASTMethodDeclaration.class,javaCode );assertEquals( "Wrong number of methods",      1, methods.size());Iterator i = methods.iterator();return (ASTMethodDeclaration) i.next();    }}
package test.net.sourceforge.pmd.ast;import net.sourceforge.pmd.ast.*;import junit.framework.*;public class AccessNodeTest    extends TestCase{    public AccessNodeTest( String name ) { super( name ); }    public void testStatic() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not static.",     !node.isStatic());node.setStatic(true);assertTrue( "Node set to static, not static.",     node.isStatic() );node.setStatic(false);assertTrue( "Node set to not static, is static.",     !node.isStatic());    }    public void testPublic() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not public.",    !node.isPublic());node.setPublic(true);assertTrue( "Node set to public, not public.",    node.isPublic());node.setPublic(false);assertTrue( "Node set to not public, is public.",     !node.isPublic());    }    public void testProtected() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not protected.",    !node.isProtected());node.setProtected(true);assertTrue( "Node set to protected, not protected.",     node.isProtected());node.setProtected(false);assertTrue( "Node set to not protected, is protected.",    !node.isProtected());    }    public void testPrivate() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not private.",    !node.isPrivate());node.setPrivate(true);assertTrue( "Node set to private, not private.",    node.isPrivate());node.setPrivate(false);assertTrue( "Node set to not private, is private.",    !node.isPrivate());    }    public void testFinal() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not final.",    !node.isFinal());node.setFinal(true);assertTrue( "Node set to final, not final.",    node.isFinal());node.setFinal(false);assertTrue( "Node set to not final, is final.",    !node.isFinal());    }    public void testSynchronized() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not synchronized.",    !node.isSynchronized());node.setSynchronized(true);assertTrue( "Node set to synchronized, not synchronized.",    node.isSynchronized());node.setSynchronized(false);assertTrue( "Node set to not synchronized, is synchronized.",    !node.isSynchronized());    }    public void testVolatile() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not volatile.",    !node.isVolatile());node.setVolatile(true);assertTrue( "Node set to volatile, not volatile.",    node.isVolatile());node.setVolatile(false);assertTrue( "Node set to not volatile, is volatile.",    !node.isVolatile());    }    public void testTransient() {AccessNode node = new AccessNode( 1 );assertTrue("Node should default to not transient.",   !node.isTransient());node.setTransient(true);assertTrue( "Node set to transient, not transient.",    node.isTransient());node.setTransient(false);assertTrue( "Node set to not transient, is transient.",    !node.isTransient());    }    public void testNative() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not native.",    !node.isNative());node.setNative(true);assertTrue( "Node set to native, not native.",    node.isNative());node.setNative(false);assertTrue( "Node set to not native, is native.",    !node.isNative());    }    public void testInterface() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not interface.",    !node.isInterface());node.setInterface(true);assertTrue( "Node set to interface, not interface.",    node.isInterface());node.setInterface(false);assertTrue( "Node set to not interface, is interface.",    !node.isInterface());    }    public void testAbstract() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not abstract.",    !node.isAbstract());node.setAbstract(true);assertTrue( "Node set to abstract, not abstract.",    node.isAbstract());node.setAbstract(false);assertTrue( "Node set to not abstract, is abstract.",    !node.isAbstract());    }    public void testStrict() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not strict.",    !node.isStrict());node.setStrict(true);assertTrue( "Node set to strict, not strict.",    node.isStrict());node.setStrict(false);assertTrue( "Node set to not strict, is strict.",    !node.isStrict());    }    public void testSuper() {AccessNode node = new AccessNode( 1 );assertTrue( "Node should default to not super.",    !node.isSuper());node.setSuper(true);assertTrue( "Node set to super, not super.",    node.isSuper());node.setSuper(false);assertTrue( "Node set to not super, is super.",    !node.isSuper());    }}
/* * User: tom * Date: Jun 20, 2002 * Time: 8:43:20 AM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import java.util.List;import net.sourceforge.pmd.RuleFactory;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.rules.DontCreateTimersRule;import net.sourceforge.pmd.rules.EmptyIfStmtRule;public class RuleFactoryTest extends TestCase {    public RuleFactoryTest(String name) {        super(name);    }    public void testCougaar() {        RuleFactory rf = new RuleFactory();        List r = rf.createRules(RuleFactory.COUGAAR);        assertTrue(r.contains(new DontCreateTimersRule()));    }    public void testAll() {        RuleFactory rf = new RuleFactory();        List r = rf.createRules(RuleFactory.ALL);        assertTrue(r.contains(new EmptyIfStmtRule()));    }    public void testGeneral() {        RuleFactory rf = new RuleFactory();        List r = rf.createRules(RuleFactory.GENERAL);        assertTrue(r.contains(new EmptyIfStmtRule()));        assertTrue(!r.contains(new DontCreateTimersRule()));    }    public void testException() {        RuleFactory rf = new RuleFactory();        try {            rf.createRules("blah");        } catch (Exception e) {            return; // cool        }        throw new RuntimeException("Should have thrown RuntimeException");    }    public void testConcatenatedList() {        RuleFactory rf = new RuleFactory();        String list = rf.getConcatenatedRuleSetList();        assertTrue(list.indexOf("design") != -1);    }    public void testContains() {        RuleFactory rf = new RuleFactory();        assertTrue(rf.containsRuleSet("all"));        assertTrue(!rf.containsRuleSet("foo"));    }}
/* * User: tom * Date: Jun 19, 2002 * Time: 11:09:06 AM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import net.sourceforge.pmd.SymbolTable;import net.sourceforge.pmd.Symbol;import java.util.HashMap;public class SymbolTableTest extends TestCase {    private static final Symbol FOO = new Symbol("foo", 10);    public SymbolTableTest(String name) {        super(name);    }    public void testAdd() {        SymbolTable s = new SymbolTable();        s.add(FOO);        try {            s.add(FOO);        } catch (RuntimeException e) {            return; // cool        }        throw new RuntimeException("Should have thrown RuntimeException");    }    public void testParent() {        SymbolTable parent = new SymbolTable();        SymbolTable child = new SymbolTable(parent);        assertEquals(child.getParent(), parent);    }    public void testAddSameSymbol() {        SymbolTable parent = new SymbolTable();        parent.add(FOO);        SymbolTable child = new SymbolTable(parent);        try {            child.add(FOO);        } catch (RuntimeException e) {            return; // cool        }        throw new RuntimeException("Should have thrown RuntimeException");    }    public void testParentContains2() {        SymbolTable parent = new SymbolTable();        SymbolTable child = new SymbolTable(parent);        child.add(new Symbol("bar", 12));        child.add(new Symbol("baz", 12));        assertTrue(!parent.getUnusedSymbols().hasNext());        assertTrue(child.getUnusedSymbols().hasNext());    }    public void testRecordUsage() {        SymbolTable s = new SymbolTable();        s.add(FOO);        assertTrue(s.getUnusedSymbols().hasNext());        s.recordPossibleUsageOf(FOO);        assertTrue(!s.getUnusedSymbols().hasNext());    }    public void testRecordPossibleUsage() {        SymbolTable parent = new SymbolTable();        SymbolTable child = new SymbolTable(parent);        child.recordPossibleUsageOf(new Symbol("bar", 10));        assertTrue(!parent.getUnusedSymbols().hasNext());    }    public void testRecordPossibleUsage2() {        SymbolTable s = new SymbolTable();        s.recordPossibleUsageOf(new Symbol("bar", 10));        assertTrue(!s.getUnusedSymbols().hasNext());    }    public void testRecordUsageParent() {        SymbolTable parent = new SymbolTable();        parent.add(FOO);        SymbolTable child = new SymbolTable(parent);        assertEquals(FOO, parent.getUnusedSymbols().next());    }    public void testRecordUsageParent2() {        SymbolTable parent = new SymbolTable();        parent.add(FOO);        SymbolTable child = new SymbolTable(parent);        child.recordPossibleUsageOf(FOO);        assertTrue(!parent.getUnusedSymbols().hasNext());    }}
/* * User: tom * Date: Jun 17, 2002 * Time: 3:19:33 PM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.util.Iterator;import net.sourceforge.pmd.*;import net.sourceforge.pmd.rules.*;public class FunctionalTest extends TestCase{    public FunctionalTest(String name) {        super(name);    }    public void testRemoveMe() {}/*    public void testProps() {        Report report = process("ContainsSystemGetProps.java");        assertEquals(3, report.countViolationsInCurrentFile());        assertEquals(new SystemPropsRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testSystemIn() {        Report report = process("ContainsSystemIn.java");        assertEquals(3, report.countViolationsInCurrentFile());        assertEquals(new SystemOutRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testSystemOut() {        Report report = process("ContainsSystemOut.java");        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new SystemOutRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testCreateAThread() {        Report report = process("CreatesAThread.java");        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new DontCreateThreadsRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testCreateATimer() {        Report report = process("CreatesATimer.java");        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new DontCreateTimersRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testEmptyIf() {        Report report = process("EmptyIfStmtRule.java");        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new EmptyIfStmtRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }    public void testEmptyWhileStmtRule() {        Report report = process("EmptyWhileStmtRule.java");        assertEquals(1, report.countViolationsInCurrentFile());        assertEquals(new EmptyWhileStmtRule(), ((RuleViolation)report.violationsInCurrentFile().next()).getRule());    }*/}
package test.net.sourceforge.pmd;import net.sourceforge.pmd.*;import net.sourceforge.pmd.ast.*;import java.io.StringReader;import java.util.Set;import java.util.List;import java.util.Random;import java.util.HashSet;import java.util.Iterator;import java.util.ArrayList;import java.util.Collections;import junit.framework.*;public class RuleSetTest extends TestCase{    private String javaCode ="public class Test { }";    public RuleSetTest( String name ) {super( name );    }    public void testConstructor() {RuleSet IUT = new RuleSet();    }    public void testRuleList() {RuleSet IUT = new RuleSet();assertEquals( "Size of RuleSet isn't zero.",      0, IUT.size() );MockRule rule = new MockRule();IUT.addRule( rule );assertEquals( "Size of RuleSet isn't one.",      1, IUT.size() );Set rules = IUT.getRules();Iterator i = rules.iterator();assertTrue( "Empty Set",    i.hasNext());assertEquals( "Returned set of wrong size.",      1, rules.size() );assertEquals( "Rule isn't in ruleset.",      rule, i.next() );    }    public void testApply0Rules() throws Throwable    {RuleSet IUT = new RuleSet();verifyRuleSet( IUT, 0, new HashSet() );    }    public void testApply1Rule()throws Throwable    {RuleSet IUT = new RuleSet();MockRule rule = new MockRule();RuleViolation violation = new RuleViolation( rule, 1 );rule.addViolation( violation );IUT.addRule( rule );verifyRuleSet( IUT, 1, Collections.singleton( violation ) );    }    public void testApplyNRule() throws Throwable    {RuleSet IUT = new RuleSet();Random rand = new Random();int numRules = rand.nextInt( 10 ) + 1;Set ruleViolations = new HashSet();for (int i = 0; i < numRules; i++) {    MockRule rule = new MockRule();    RuleViolation violation = new RuleViolation( rule, i );    ruleViolations.add( violation );    rule.addViolation( violation );    IUT.addRule( rule );}verifyRuleSet( IUT, numRules, ruleViolations );    }    protected void verifyRuleSet( RuleSet IUT,   int size,  Set values )throws Throwable    {RuleContext context = new RuleContext();Set reportedValues = new HashSet();Report report = new Report("xml");context.setReport( report );IUT.apply( makeCompilationUnits(),   context );assertEquals("Invalid number of Violations Reported",     size, report.countViolationsInCurrentFile() );Iterator violations =    report.violationsInCurrentFile();while (violations.hasNext()) {    RuleViolation violation =(RuleViolation) violations.next();    reportedValues.add( violation );    assertTrue( "Unexpected Violation Returned: " + violation,values.contains( violation ) );}Iterator expected = values.iterator();while (expected.hasNext()) {    RuleViolation violation =(RuleViolation) expected.next();    assertTrue( "Expected Violation not Returned: " +violation,reportedValues.contains( violation ));}        }        protected List makeCompilationUnits()throws Throwable    {List RC = new ArrayList();JavaParser parser = new JavaParser( new StringReader( javaCode ));RC.add( parser.CompilationUnit() );return RC;    }}
/* * User: tom * Date: Jun 14, 2002 * Time: 1:18:30 PM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import net.sourceforge.pmd.Report;import net.sourceforge.pmd.RuleViolation;import net.sourceforge.pmd.Rule;import java.lang.reflect.Proxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;public class ReportTest extends TestCase {    public ReportTest(String name) {        super(name);    }    public void testBasic() {        Report r = new Report("xml", "foo");        r.addRuleViolation(new RuleViolation(new MockRule(), 5));        assertTrue(!r.currentFileHasNoViolations());    }    public void testRenderXML() {        Report r = new Report("xml", "foo");        r.addRuleViolation(new RuleViolation(new MockRule(), 5));        String rpt = r.render();        assertTrue(rpt.indexOf("foo") != -1);        assertTrue(rpt.indexOf("<pmd>") != -1);    }    public void testRenderHTML() {        Report r = new Report("html", "foo");        r.addRuleViolation(new RuleViolation(new MockRule(), 5));        String rpt = r.render();        assertTrue(rpt.indexOf("foo") != -1);        assertTrue(rpt.indexOf("<table>") != -1);    }}
/* * User: tom * Date: Jun 21, 2002 * Time: 2:21:44 PM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import net.sourceforge.pmd.Namespace;import net.sourceforge.pmd.SymbolTable;public class NamespaceTest extends TestCase{    public NamespaceTest(String name) {        super(name);    }    public void testBasic() {        Namespace nameSpace = new Namespace();        nameSpace.addTable();        assertEquals(1, nameSpace.size());        nameSpace.removeTable();        assertEquals(0, nameSpace.size());    }    public void testParent() {        Namespace nameSpace = new Namespace();        nameSpace.addTable();        SymbolTable parent = nameSpace.peek();        nameSpace.addTable();        assertEquals(parent, nameSpace.peek().getParent());    }}
/* * User: tom * Date: Jun 19, 2002 * Time: 11:59:24 AM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import net.sourceforge.pmd.Symbol;public class SymbolTest extends TestCase {    public SymbolTest(String name) {        super(name);    }    public void testBasic() {        Symbol s = new Symbol("foo", 10);        assertEquals(10, s.getLine());        assertEquals("foo", s.getImage());        assertEquals(s, new Symbol("foo", 5));        assertEquals(s.hashCode(), new Symbol("foo", 6).hashCode());    }}
/* * User: tom * Date: Jun 26, 2002 * Time: 4:30:42 PM */package test.net.sourceforge.pmd;import junit.framework.TestCase;import net.sourceforge.pmd.RuleContext;import net.sourceforge.pmd.Report;public class RuleContextTest extends TestCase {    public RuleContextTest(String name) {        super(name);    }    public void testReport() {        RuleContext ctx = new RuleContext();        assertNull(ctx.getReport());        Report r = new Report("xml");        ctx.setReport(r);        Report r2 = ctx.getReport();        assertEquals(r, r2);    }}
package test.net.sourceforge.pmd;import junit.framework.*;import java.util.*;import net.sourceforge.pmd.Rule;import net.sourceforge.pmd.RuleViolation;public class RuleViolationTest extends TestCase {    public RuleViolationTest(String name) {        super(name);    }    public void testBasic() {        Rule rule = new MockRule("name", "desc");        RuleViolation r = new RuleViolation(rule, 2);        assertTrue(r.getText().indexOf("name") != -1);        assertTrue(r.getText().indexOf("desc") != -1);        assertTrue(r.getText().indexOf("2") != -1);        System.out.println("r.getXML() = " + r.getXML());        assertTrue(r.getXML().indexOf("desc") != -1);        assertTrue(r.getXML().indexOf("2") != -1);        assertTrue(r.getHTML().indexOf("desc") != -1);        assertTrue(r.getHTML().indexOf("2") != -1);    }}
package net.sourceforge.pmd.ast;import java.io.*;public class Test implements JavaParserVisitor{    public static void main(String[] args) {        try {            FileReader fr = new FileReader(new File("c:\\data\\pmd\\pmd\\test-data\\ContainsSystemGetProps.java"));            JavaParser parser = new JavaParser(fr);            Test test = new Test();            ASTCompilationUnit c = parser.CompilationUnit();            c.dump("");            c.childrenAccept(test, null);        } catch (Exception e) {            e.printStackTrace();        }    }    public Object visit(ASTAssertStatement node, Object data){node.childrenAccept(this, data);return null;}    public Object visit(ASTName node, Object data){node.childrenAccept(this, data);return null;}    public Object visit(ASTLocalVariableDeclaration node, Object data){node.childrenAccept(this, data);return null;}    public Object visit(ASTPrimitiveType node, Object data){node.childrenAccept(this, data);return null;}    public Object visit(ASTImportDeclaration node, Object data){node.childrenAccept(this, data);return null;}    public Object visit(ASTLiteral node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(SimpleNode node, Object data) {node.childrenAccept(this, data);return null;}  public Object visit(ASTCompilationUnit node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTPackageDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTTypeDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTClassDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTUnmodifiedClassDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTClassBody node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTNestedClassDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTClassBodyDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTMethodDeclarationLookahead node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTInterfaceDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTNestedInterfaceDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTUnmodifiedInterfaceDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTInterfaceMemberDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTFieldDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTVariableDeclarator node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTVariableDeclaratorId node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTVariableInitializer node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTArrayInitializer node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTMethodDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTMethodDeclarator node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTFormalParameters node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTFormalParameter node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTConstructorDeclaration node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTExplicitConstructorInvocation node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTInitializer node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTType node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTResultType node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTNameList node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTAssignmentOperator node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTConditionalExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTConditionalOrExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTConditionalAndExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTInclusiveOrExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTExclusiveOrExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTAndExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTEqualityExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTInstanceOfExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTRelationalExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTShiftExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTAdditiveExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTMultiplicativeExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTUnaryExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTPreIncrementExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTPreDecrementExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTUnaryExpressionNotPlusMinus node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTCastLookahead node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTPostfixExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTCastExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTPrimaryExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTPrimaryPrefix node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTPrimarySuffix node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTBooleanLiteral node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTNullLiteral node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTArguments node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTArgumentList node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTAllocationExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTArrayDimsAndInits node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTLabeledStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTBlock node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTBlockStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTEmptyStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTStatementExpression node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTSwitchStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTSwitchLabel node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTIfStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTWhileStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTDoStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTForStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTForInit node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTStatementExpressionList node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTForUpdate node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTBreakStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTContinueStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTReturnStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTThrowStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTSynchronizedStatement node, Object data){node.childrenAccept(this, data);return null;}  public Object visit(ASTTryStatement node, Object data){node.childrenAccept(this, data);return null;}}