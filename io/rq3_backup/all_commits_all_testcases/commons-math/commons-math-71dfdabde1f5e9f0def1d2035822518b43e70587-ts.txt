/* ==================================================================== * The Apache Software License, Version 1.1 * * Copyright (c) 2003 The Apache Software Foundation.  All rights * reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * * 1. Redistributions of source code must retain the above copyright *    notice, this list of conditions and the following disclaimer. * * 2. Redistributions in binary form must reproduce the above copyright *    notice, this list of conditions and the following disclaimer in *    the documentation and/or other materials provided with the *    distribution. * * 3. The end-user documentation included with the redistribution, if *    any, must include the following acknowlegement: *       "This product includes software developed by the *        Apache Software Foundation (http://www.apache.org/)." *    Alternately, this acknowlegement may appear in the software itself, *    if and wherever such third-party acknowlegements normally appear. * * 4. The names "The Jakarta Project", "Commons", and "Apache Software *    Foundation" must not be used to endorse or promote products derived *    from this software without prior written permission. For written *    permission, please contact apache@apache.org. * * 5. Products derived from this software may not be called "Apache" *    nor may "Apache" appear in their names without prior written *    permission of the Apache Software Foundation. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * ==================================================================== * * This software consists of voluntary contributions made by many * individuals on behalf of the Apache Software Foundation.  For more * information on the Apache Software Foundation, please see * <http://www.apache.org/>. */package org.apache.commons.math;import junit.framework.TestCase;/** * This class contains test cases for the ExpandableDoubleArray. *  * @author <a href="mailto:tobrien@apache.org">Tim O'Brien</a> */public abstract class DoubleArrayAbstractTest extends TestCase {protected DoubleArray da = null;public DoubleArrayAbstractTest(String name) {super( name );}/** TEST NORMAL OPERATIONS **/public void testAdd1000() {for( int i = 0; i < 1000; i++) {da.addElement( i );}assertEquals("Number of elements should be equal to 1000 after adding 1000 values",1000, da.getNumElements() );    assertEquals("The element at the 56th index should be 56", 56.0, da.getElement(56), Double.MIN_VALUE );    }public void testGetValues() {double[] controlArray = {2.0, 4.0, 6.0};da.addElement(2.0);da.addElement(4.0);da.addElement(6.0);double[] testArray = da.getElements();for( int i = 0; i < da.getNumElements(); i++) {assertEquals( "The testArray values should equal the controlArray values, index i: " + i +" does not match", testArray[i], controlArray[i], Double.MIN_VALUE);}}public void testSetElementArbitraryExpansion() {double[] controlArray = {2.0, 4.0, 6.0};da.addElement(2.0);da.addElement(4.0);da.addElement(6.0);da.setElement(1, 3.0);// Expand the array arbitrarily to 1000 itemsda.setElement(1000, 3.4);assertEquals( "The number of elements should now be 1001, it isn't", da.getNumElements(), 1001);assertEquals( "Uninitialized Elements are default value of 0.0, index 766 wasn't", 0.0,da.getElement( 760 ), Double.MIN_VALUE );assertEquals( "The 1000th index should be 3.4, it isn't", 3.4, da.getElement(1000), Double.MIN_VALUE );assertEquals( "The 0th index should be 2.0, it isn't", 2.0, da.getElement(0), Double.MIN_VALUE);}public void testSetNumberOfElements() {da.addElement( 1.0 );da.addElement( 1.0 );da.addElement( 1.0 );da.addElement( 1.0 );da.addElement( 1.0 );da.addElement( 1.0 );assertEquals( "Number of elements should equal 6", da.getNumElements(), 6);((ExpandableDoubleArray) da).setNumElements( 3 );assertEquals( "Number of elements should equal 3", da.getNumElements(), 3);try {((ExpandableDoubleArray) da).setNumElements( -3 );fail( "Setting number of elements to negative should've thrown an exception");} catch( IllegalArgumentException iae ) {}((ExpandableDoubleArray) da).setNumElements(1024);assertEquals( "Number of elements should now be 1024", da.getNumElements(), 1024);assertEquals( "Element 453 should be a default double", da.getElement( 453 ), 0.0, Double.MIN_VALUE);}public void testAddElementRolling() {da.addElement( 1.0 );da.addElement( 1.0 );da.addElement( 1.0 );da.addElement( 1.0 );da.addElement( 1.0 );da.addElement( 1.0 );da.addElementRolling( 2.0 );assertEquals( "There should be 6 elements in the eda", da.getNumElements(), 6);assertEquals( "The last element should be 2.0", da.getElement( da.getNumElements() -1 ), 2.0, Double.MIN_VALUE);for( int i = 0; i  < 1024; i++ ) {da.addElementRolling( i );}assertEquals( "We just inserted 1024 rolling elements, num elements should still be 6", da.getNumElements(), 6);}}
/* ==================================================================== * The Apache Software License, Version 1.1 * * Copyright (c) 2003 The Apache Software Foundation.  All rights * reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * * 1. Redistributions of source code must retain the above copyright *    notice, this list of conditions and the following disclaimer. * * 2. Redistributions in binary form must reproduce the above copyright *    notice, this list of conditions and the following disclaimer in *    the documentation and/or other materials provided with the *    distribution. * * 3. The end-user documentation included with the redistribution, if *    any, must include the following acknowlegement: *       "This product includes software developed by the *        Apache Software Foundation (http://www.apache.org/)." *    Alternately, this acknowlegement may appear in the software itself, *    if and wherever such third-party acknowlegements normally appear. * * 4. The names "The Jakarta Project", "Commons", and "Apache Software *    Foundation" must not be used to endorse or promote products derived *    from this software without prior written permission. For written *    permission, please contact apache@apache.org. * * 5. Products derived from this software may not be called "Apache" *    nor may "Apache" appear in their names without prior written *    permission of the Apache Software Foundation. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * ==================================================================== * * This software consists of voluntary contributions made by many * individuals on behalf of the Apache Software Foundation.  For more * information on the Apache Software Foundation, please see * <http://www.apache.org/>. */package org.apache.commons.math;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Test cases for the {@link Univariate} class. * * @author <a href="mailto:phil@steitz.com">Phil Steitz</a> * @version $Revision: 1.1 $ $Date: 2003/05/15 05:39:01 $ */public final class StoreUnivariateImplTest extends TestCase {    private double one = 1;    private float two = 2;    private int three = 3;    private double mean = 2;    private double sumSq = 18;    private double sum = 8;    private double var = 0.666666666666666666667;    private double std = Math.sqrt(var);    private double n = 4;    private double min = 1;    private double max = 3;    private double skewness = 0;    private double kurtosis = 0.5;    private int kClass = StoreUnivariate.LEPTOKURTIC;    private double tolerance = 10E-15;        public StoreUnivariateImplTest(String name) {        super(name);    }        public void setUp() {      }        public static Test suite() {        TestSuite suite = new TestSuite(StoreUnivariateImplTest.class);        suite.setName("Freq Tests");        return suite;    }        /** test stats */    public void testStats() {        StoreUnivariate u = new StoreUnivariateImpl();         assertEquals("total count",0,u.getN(),tolerance);        u.addValue(one);        u.addValue(two);        u.addValue(two);        u.addValue(three);        assertEquals("N",n,u.getN(),tolerance);        assertEquals("sum",sum,u.getSum(),tolerance);        assertEquals("sumsq",sumSq,u.getSumsq(),tolerance);        assertEquals("var",var,u.getVariance(),tolerance);        assertEquals("std",std,u.getStandardDeviation(),tolerance);        assertEquals("mean",mean,u.getMean(),tolerance);        assertEquals("min",min,u.getMin(),tolerance);        assertEquals("max",max,u.getMax(),tolerance);        u.clear();        assertEquals("total count",0,u.getN(),tolerance);        }             public void testN0andN1Conditions() throws Exception {    StoreUnivariate u = new StoreUnivariateImpl();        assertTrue("Mean of n = 0 set should be NaN", Double.isNaN( u.getMean() ) );assertTrue("Standard Deviation of n = 0 set should be NaN", Double.isNaN( u.getStandardDeviation() ) );assertTrue("Variance of n = 0 set should be NaN", Double.isNaN(u.getVariance() ) );u.addValue(one);assertTrue( "Mean of n = 1 set should be value of single item n1", u.getMean() == one);assertTrue( "StdDev of n = 1 set should be zero, instead it is: " + u.getStandardDeviation(), u.getStandardDeviation() == 0);assertTrue( "Variance of n = 1 set should be zero", u.getVariance() == 0);    }        public void testSkewAndKurtosis() {    StoreUnivariate u = new StoreUnivariateImpl();        double[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,     9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };    for( int i = 0; i < testArray.length; i++) {    u.addValue( testArray[i]);    }    assertEquals("mean", 12.40455, u.getMean(), 0.0001);assertEquals("variance", 10.00236, u.getVariance(), 0.0001);assertEquals("skewness", 1.437424, u.getSkewness(), 0.0001);    assertEquals("kurtosis", 2.37719, u.getKurtosis(), 0.0001);    }}
/* ==================================================================== * The Apache Software License, Version 1.1 * * Copyright (c) 2003 The Apache Software Foundation.  All rights * reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * * 1. Redistributions of source code must retain the above copyright *    notice, this list of conditions and the following disclaimer. * * 2. Redistributions in binary form must reproduce the above copyright *    notice, this list of conditions and the following disclaimer in *    the documentation and/or other materials provided with the *    distribution. * * 3. The end-user documentation included with the redistribution, if *    any, must include the following acknowlegement: *       "This product includes software developed by the *        Apache Software Foundation (http://www.apache.org/)." *    Alternately, this acknowlegement may appear in the software itself, *    if and wherever such third-party acknowlegements normally appear. * * 4. The names "The Jakarta Project", "Commons", and "Apache Software *    Foundation" must not be used to endorse or promote products derived *    from this software without prior written permission. For written *    permission, please contact apache@apache.org. * * 5. Products derived from this software may not be called "Apache" *    nor may "Apache" appear in their names without prior written *    permission of the Apache Software Foundation. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * ==================================================================== * * This software consists of voluntary contributions made by many * individuals on behalf of the Apache Software Foundation.  For more * information on the Apache Software Foundation, please see * <http://www.apache.org/>. */package org.apache.commons.math;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Test cases for the TestStatistic class. * * @author Phil Steitz * @version $Revision: 1.2 $ $Date: 2003/05/16 03:55:34 $ */public final class TestStatisticTest extends TestCase {    private TestStatisticImpl testStatistic = new TestStatisticImpl();        public TestStatisticTest(String name) {        super(name);    }            public void setUp() {     }    public static Test suite() {        TestSuite suite = new TestSuite(TestStatisticTest.class);        suite.setName("TestStatistic Tests");        return suite;    }    public void testChiSquare() {       double[] observed = {11,24,69,96};       double[] expected = {8.2,25.2,65.8,100.8};       assertEquals("chi-square statistic",           1.39743495,testStatistic.chiSquare(expected,observed),10E-5);              double[] tooShortObs = {0};       double[] tooShortEx = {1};       try {           double x = testStatistic.chiSquare(tooShortObs,tooShortEx);           fail("arguments too short, IllegalArgumentException expected");       } catch (IllegalArgumentException ex) {           ;       }              double[] unMatchedObs = {0,1,2,3};       double[] unMatchedEx = {1,1,2};       try {           double x = testStatistic.chiSquare(unMatchedEx,unMatchedObs);           fail("arrays have different lengths, IllegalArgumentException expected");       } catch (IllegalArgumentException ex) {           ;       }              expected[0] = 0;       assertEquals("chi-square statistic", Double.POSITIVE_INFINITY,            testStatistic.chiSquare(expected,observed),Double.MIN_VALUE);    }       }
/* ==================================================================== * The Apache Software License, Version 1.1 * * Copyright (c) 2003 The Apache Software Foundation.  All rights * reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * * 1. Redistributions of source code must retain the above copyright *    notice, this list of conditions and the following disclaimer. * * 2. Redistributions in binary form must reproduce the above copyright *    notice, this list of conditions and the following disclaimer in *    the documentation and/or other materials provided with the *    distribution. * * 3. The end-user documentation included with the redistribution, if *    any, must include the following acknowlegement: *       "This product includes software developed by the *        Apache Software Foundation (http://www.apache.org/)." *    Alternately, this acknowlegement may appear in the software itself, *    if and wherever such third-party acknowlegements normally appear. * * 4. The names "The Jakarta Project", "Commons", and "Apache Software *    Foundation" must not be used to endorse or promote products derived *    from this software without prior written permission. For written *    permission, please contact apache@apache.org. * * 5. Products derived from this software may not be called "Apache" *    nor may "Apache" appear in their names without prior written *    permission of the Apache Software Foundation. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * ==================================================================== * * This software consists of voluntary contributions made by many * individuals on behalf of the Apache Software Foundation.  For more * information on the Apache Software Foundation, please see * <http://www.apache.org/>. */package org.apache.commons.math;/** * This class contains test cases for the ExpandableDoubleArray. *  * @author <a href="mailto:tobrien@apache.org">Tim O'Brien</a> */public class ContractableDoubleArrayTest extends DoubleArrayAbstractTest {public ContractableDoubleArrayTest(String name) {super( name );}/* (non-Javadoc) * @see junit.framework.TestCase#setUp() */protected void setUp() throws Exception {da = new ContractableDoubleArray();}/** Test normal operations and then test internal storage */public void testAdd1000() {super.testAdd1000();assertEquals("Internal Storage length should be 1024 if we started out with initial capacity of " +"16 and an expansion factor of 2.0",1024, ((ExpandableDoubleArray) da).getInternalLength());}public void testSetElementArbitraryExpansion() {super.testSetElementArbitraryExpansion();assertEquals( "The length of the internal array should now be 1001, it isn't", ((ExpandableDoubleArray) da).getInternalLength(), 1001);}public void testAddElementRolling() {super.testAddElementRolling();assertTrue( "Even though there are only 6 element, internal storage should be less than 2.5 times the number of elements", ((ExpandableDoubleArray) da).getInternalLength() < ((int) 6 * 2.5) );}/** Test ERROR conditions *//** TEST ERROR CONDITIONS **/public void testIllegalInitialCapacity() {try {ContractableDoubleArray eDA = new ContractableDoubleArray(-3, 2.0f);fail( "That constructor should have thrown an IllegalArgumentException because " +"the initialCapacity was negative, if it didn't then" +" the range checking of initialCapacity is not working properly" );} catch( IllegalArgumentException iae ) {}try {ContractableDoubleArray eDA = new ContractableDoubleArray(0, 2.0f);fail( "That constructor should have thrown an IllegalArgumentException because " +"the initialCapacity was ZERO if it didn't then" +" the range checking of initialCapacity is not working properly" );} catch( IllegalArgumentException iae ) {}}public void testIllegalExpansionFactor() {try {ContractableDoubleArray eDA = new ContractableDoubleArray(3, 0.66f);fail( "That constructor should have thrown an IllegalArgumentException because " +"the expansionFactor for 0.66 which would shrink the array instead of expand the array");} catch( IllegalArgumentException iae ) {}try {ContractableDoubleArray eDA = new ContractableDoubleArray(3, 0.0f);fail( "That constructor should have thrown an IllegalArgumentException because " +"the expansionFactor for 0.0");} catch( IllegalArgumentException iae) {}try {ContractableDoubleArray eDA = new ContractableDoubleArray(3, -4.35f);fail( "That constructor should have thrown an IllegalArgumentException because " +"the expansionFactor for -4.35");} catch( IllegalArgumentException iae) {}}}
/* ==================================================================== * The Apache Software License, Version 1.1 * * Copyright (c) 2003 The Apache Software Foundation.  All rights * reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * * 1. Redistributions of source code must retain the above copyright *    notice, this list of conditions and the following disclaimer. * * 2. Redistributions in binary form must reproduce the above copyright *    notice, this list of conditions and the following disclaimer in *    the documentation and/or other materials provided with the *    distribution. * * 3. The end-user documentation included with the redistribution, if *    any, must include the following acknowlegement: *       "This product includes software developed by the *        Apache Software Foundation (http://www.apache.org/)." *    Alternately, this acknowlegement may appear in the software itself, *    if and wherever such third-party acknowlegements normally appear. * * 4. The names "The Jakarta Project", "Commons", and "Apache Software *    Foundation" must not be used to endorse or promote products derived *    from this software without prior written permission. For written *    permission, please contact apache@apache.org. * * 5. Products derived from this software may not be called "Apache" *    nor may "Apache" appear in their names without prior written *    permission of the Apache Software Foundation. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * ==================================================================== * * This software consists of voluntary contributions made by many * individuals on behalf of the Apache Software Foundation.  For more * information on the Apache Software Foundation, please see * <http://www.apache.org/>. */package org.apache.commons.math;import java.util.ArrayList;import java.util.List;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Test cases for the {@link Univariate} class. * * @author <a href="mailto:phil@steitz.com">Phil Steitz</a> * @version $Revision: 1.2 $ $Date: 2003/05/15 15:38:48 $ */public final class ListUnivariateImplTest extends TestCase {    private double one = 1;    private float two = 2;    private int three = 3;    private double mean = 2;    private double sumSq = 18;    private double sum = 8;    private double var = 0.666666666666666666667;    private double std = Math.sqrt(var);    private double n = 4;    private double min = 1;    private double max = 3;    private double skewness = 0;    private double kurtosis = 0.5;    private int kClass = StoreUnivariate.LEPTOKURTIC;    private double tolerance = 10E-15;        public ListUnivariateImplTest(String name) {        super(name);    }        public void setUp() {      }        public static Test suite() {        TestSuite suite = new TestSuite(ListUnivariateImplTest.class);        suite.setName("Freq Tests");        return suite;    }        /** test stats */    public void testStats() {    List externalList = new ArrayList();            StoreUnivariate u = new ListUnivariateImpl( externalList );         assertEquals("total count",0,u.getN(),tolerance);        u.addValue(one);        u.addValue(two);        u.addValue(two);        u.addValue(three);        assertEquals("N",n,u.getN(),tolerance);        assertEquals("sum",sum,u.getSum(),tolerance);        assertEquals("sumsq",sumSq,u.getSumsq(),tolerance);        assertEquals("var",var,u.getVariance(),tolerance);        assertEquals("std",std,u.getStandardDeviation(),tolerance);        assertEquals("mean",mean,u.getMean(),tolerance);        assertEquals("min",min,u.getMin(),tolerance);        assertEquals("max",max,u.getMax(),tolerance);        u.clear();        assertEquals("total count",0,u.getN(),tolerance);        }             public void testN0andN1Conditions() throws Exception {    List list = new ArrayList();        StoreUnivariate u = new ListUnivariateImpl( list );        assertTrue("Mean of n = 0 set should be NaN", Double.isNaN( u.getMean() ) );assertTrue("Standard Deviation of n = 0 set should be NaN", Double.isNaN( u.getStandardDeviation() ) );assertTrue("Variance of n = 0 set should be NaN", Double.isNaN(u.getVariance() ) );list.add( new Double(one));assertTrue( "Mean of n = 1 set should be value of single item n1", u.getMean() == one);assertTrue( "StdDev of n = 1 set should be zero, instead it is: " + u.getStandardDeviation(), u.getStandardDeviation() == 0);assertTrue( "Variance of n = 1 set should be zero", u.getVariance() == 0);    }        public void testSkewAndKurtosis() {    StoreUnivariate u = new StoreUnivariateImpl();        double[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,     9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };    for( int i = 0; i < testArray.length; i++) {    u.addValue( testArray[i]);    }    assertEquals("mean", 12.40455, u.getMean(), 0.0001);assertEquals("variance", 10.00236, u.getVariance(), 0.0001);assertEquals("skewness", 1.437424, u.getSkewness(), 0.0001);    assertEquals("kurtosis", 2.37719, u.getKurtosis(), 0.0001);    }}
/* ==================================================================== * The Apache Software License, Version 1.1 * * Copyright (c) 2003 The Apache Software Foundation.  All rights * reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * * 1. Redistributions of source code must retain the above copyright *    notice, this list of conditions and the following disclaimer. * * 2. Redistributions in binary form must reproduce the above copyright *    notice, this list of conditions and the following disclaimer in *    the documentation and/or other materials provided with the *    distribution. * * 3. The end-user documentation included with the redistribution, if *    any, must include the following acknowlegement: *       "This product includes software developed by the *        Apache Software Foundation (http://www.apache.org/)." *    Alternately, this acknowlegement may appear in the software itself, *    if and wherever such third-party acknowlegements normally appear. * * 4. The names "The Jakarta Project", "Commons", and "Apache Software *    Foundation" must not be used to endorse or promote products derived *    from this software without prior written permission. For written *    permission, please contact apache@apache.org. * * 5. Products derived from this software may not be called "Apache" *    nor may "Apache" appear in their names without prior written *    permission of the Apache Software Foundation. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * ==================================================================== * * This software consists of voluntary contributions made by many * individuals on behalf of the Apache Software Foundation.  For more * information on the Apache Software Foundation, please see * <http://www.apache.org/>. */package org.apache.commons.math;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Test cases for the {@link Freq} class. * * @author Phil Steitz * @version $Revision: 1.1 $ $Date: 2003/05/12 19:04:38 $ */public final class FreqTest extends TestCase {    private long oneL = 1;    private long twoL = 2;    private int oneI = 1;    private int twoI = 2;    private String oneS = "1";    private String twoS = "2";    private double tolerance = 10E-15;        public FreqTest(String name) {        super(name);    }        public void setUp() {      }        public static Test suite() {        TestSuite suite = new TestSuite(FreqTest.class);        suite.setName("Freq Tests");        return suite;    }        /** test freq counts */    public void testCounts() {        Freq f = new Freq("test counts");         assertEquals("total count",0,f.getSumFreq());        f.addValue(oneL);        f.addValue(twoL);        f.addValue(oneS);        f.addValue(oneI);        assertEquals("one frequency count",3,f.getCount("1"));        assertEquals("two frequency count",1,f.getCount("2"));        assertEquals("foo frequency count",0,f.getCount("foo"));        assertEquals("total count",4,f.getSumFreq());        f.clear();        assertEquals("total count",0,f.getSumFreq());    }             /** test pcts */    public void testPcts() {        Freq f = new Freq("test counts");         f.addValue(oneL);        f.addValue(twoL);        f.addValue(oneI);        f.addValue(twoI);        f.addValue("foo");        f.addValue("foo");        f.addValue("foo");        f.addValue("foo");        assertEquals("one pct",0.25,f.getPct("1"),tolerance);        assertEquals("two pct",0.25,f.getPct("2"),tolerance);        assertEquals("foo pct",0.5,f.getPct("foo"),tolerance);        assertEquals("bar pct",0,f.getPct("bar"),tolerance);    }      }
/* ==================================================================== * The Apache Software License, Version 1.1 * * Copyright (c) 2003 The Apache Software Foundation.  All rights * reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * * 1. Redistributions of source code must retain the above copyright *    notice, this list of conditions and the following disclaimer. * * 2. Redistributions in binary form must reproduce the above copyright *    notice, this list of conditions and the following disclaimer in *    the documentation and/or other materials provided with the *    distribution. * * 3. The end-user documentation included with the redistribution, if *    any, must include the following acknowlegement: *       "This product includes software developed by the *        Apache Software Foundation (http://www.apache.org/)." *    Alternately, this acknowlegement may appear in the software itself, *    if and wherever such third-party acknowlegements normally appear. * * 4. The names "The Jakarta Project", "Commons", and "Apache Software *    Foundation" must not be used to endorse or promote products derived *    from this software without prior written permission. For written *    permission, please contact apache@apache.org. * * 5. Products derived from this software may not be called "Apache" *    nor may "Apache" appear in their names without prior written *    permission of the Apache Software Foundation. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * ==================================================================== * * This software consists of voluntary contributions made by many * individuals on behalf of the Apache Software Foundation.  For more * information on the Apache Software Foundation, please see * <http://www.apache.org/>. */package org.apache.commons.math;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Test cases for the {@link RealMatrixImpl} class. * * @author Phil Steitz * @version $Revision: 1.1 $ $Date: 2003/05/12 19:02:53 $ */public final class RealMatrixImplTest extends TestCase {        private double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };    private double[][] testDataInv =         { {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };    private double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};    private double[][] testDataPlusInv =         { {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };    private double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };    private double[] testVector = {1,2,3};    private double entryTolerance = Math.pow(2,-64);    private double normTolerance = Math.pow(2,-64);        public RealMatrixImplTest(String name) {        super(name);    }        public void setUp() {            }        public static Test suite() {        TestSuite suite = new TestSuite(RealMatrixImplTest.class);        suite.setName("RealMatrixImpl Tests");        return suite;    }        /** test dimensions */    public void testDimensions() {        RealMatrixImpl m = new RealMatrixImpl(testData);        RealMatrixImpl m2 = new RealMatrixImpl(testData2);        assertEquals("testData row dimension",3,m.getRowDimension());        assertEquals("testData column dimension",3,m.getColumnDimension());        assertTrue("testData is square",m.isSquare());        assertEquals("testData2 row dimension",m2.getRowDimension(),2);        assertEquals("testData2 column dimension",m2.getColumnDimension(),3);        assertTrue("testData2 is not square",!m2.isSquare());    }             /** test add */    public void testAdd() {        RealMatrixImpl m = new RealMatrixImpl(testData);        RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);        RealMatrixImpl mPlusMInv = (RealMatrixImpl)m.add(mInv);        double[][] sumEntries = mPlusMInv.getData();        for (int row = 0; row < m.getRowDimension(); row++) {            for (int col = 0; col < m.getColumnDimension(); col++) {                assertEquals("sum entry entry",                    testDataPlusInv[row][col],sumEntries[row][col],                        entryTolerance);            }        }        }        /** test add failure */    public void testAddFail() {        RealMatrixImpl m = new RealMatrixImpl(testData);        RealMatrixImpl m2 = new RealMatrixImpl(testData2);        try {            RealMatrixImpl mPlusMInv = (RealMatrixImpl)m.add(m2);            fail("IllegalArgumentException expected");        } catch (IllegalArgumentException ex) {            ;        }    }        /** test norm */    public void testNorm() {        RealMatrixImpl m = new RealMatrixImpl(testData);        RealMatrixImpl m2 = new RealMatrixImpl(testData2);        assertEquals("testData norm",14d,m.getNorm(),entryTolerance);        assertEquals("testData2 norm",7d,m2.getNorm(),entryTolerance);    }         /** test m-n = m + -n */    public void testPlusMinus() {        RealMatrixImpl m = new RealMatrixImpl(testData);        RealMatrixImpl m2 = new RealMatrixImpl(testDataInv);        assertClose("m-n = m + -n",m.subtract(m2),            m2.scalarMultiply(-1d).add(m),entryTolerance);    }        /** test multiply */     public void testMultiply() {        RealMatrixImpl m = new RealMatrixImpl(testData);        RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);        RealMatrixImpl identity = new RealMatrixImpl(id);        RealMatrixImpl m2 = new RealMatrixImpl(testData2);        assertClose("inverse multiply",m.multiply(mInv),            identity,entryTolerance);        assertClose("inverse multiply",mInv.multiply(m),            identity,entryTolerance);        assertClose("identity multiply",m.multiply(identity),            m,entryTolerance);        assertClose("identity multiply",identity.multiply(mInv),            mInv,entryTolerance);        assertClose("identity multiply",m2.multiply(identity),            m2,entryTolerance);           }        private void assertClose(String msg, RealMatrix m, RealMatrix n,        double tolerance) {        assertTrue(msg,m.subtract(n).getNorm() < tolerance);    }        }
/* ==================================================================== * The Apache Software License, Version 1.1 * * Copyright (c) 2003 The Apache Software Foundation.  All rights * reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * * 1. Redistributions of source code must retain the above copyright *    notice, this list of conditions and the following disclaimer. * * 2. Redistributions in binary form must reproduce the above copyright *    notice, this list of conditions and the following disclaimer in *    the documentation and/or other materials provided with the *    distribution. * * 3. The end-user documentation included with the redistribution, if *    any, must include the following acknowlegement: *       "This product includes software developed by the *        Apache Software Foundation (http://www.apache.org/)." *    Alternately, this acknowlegement may appear in the software itself, *    if and wherever such third-party acknowlegements normally appear. * * 4. The names "The Jakarta Project", "Commons", and "Apache Software *    Foundation" must not be used to endorse or promote products derived *    from this software without prior written permission. For written *    permission, please contact apache@apache.org. * * 5. Products derived from this software may not be called "Apache" *    nor may "Apache" appear in their names without prior written *    permission of the Apache Software Foundation. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * ==================================================================== * * This software consists of voluntary contributions made by many * individuals on behalf of the Apache Software Foundation.  For more * information on the Apache Software Foundation, please see * <http://www.apache.org/>. */package org.apache.commons.math;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Test cases for the {@link Univariate} class. * * @author <a href="mailto:phil@steitz.com">Phil Steitz</a> * @version $Revision: 1.1 $ $Date: 2003/05/15 05:39:01 $ */public final class UnivariateImplTest extends TestCase {    private double one = 1;    private float twoF = 2;    private long twoL = 2;    private int three = 3;    private double mean = 2;    private double sumSq = 18;    private double sum = 8;    private double var = 0.666666666666666666667;    private double std = Math.sqrt(var);    private double n = 4;    private double min = 1;    private double max = 3;    private double tolerance = 10E-15;        public UnivariateImplTest(String name) {        super(name);    }        public void setUp() {      }        public static Test suite() {        TestSuite suite = new TestSuite(UnivariateImplTest.class);        suite.setName("Freq Tests");        return suite;    }        /** test stats */    public void testStats() {        UnivariateImpl u = new UnivariateImpl();         assertEquals("total count",0,u.getN(),tolerance);        u.addValue(one);        u.addValue(twoF);        u.addValue(twoL);        u.addValue(three);        assertEquals("N",n,u.getN(),tolerance);        assertEquals("sum",sum,u.getSum(),tolerance);        assertEquals("sumsq",sumSq,u.getSumsq(),tolerance);        assertEquals("var",var,u.getVariance(),tolerance);        assertEquals("std",std,u.getStandardDeviation(),tolerance);        assertEquals("mean",mean,u.getMean(),tolerance);        assertEquals("min",min,u.getMin(),tolerance);        assertEquals("max",max,u.getMax(),tolerance);        u.clear();        assertEquals("total count",0,u.getN(),tolerance);        }             public void testN0andN1Conditions() throws Exception {    UnivariateImpl u = new UnivariateImpl();        assertTrue("Mean of n = 0 set should be NaN", Double.isNaN( u.getMean() ) );assertTrue("Standard Deviation of n = 0 set should be NaN", Double.isNaN( u.getStandardDeviation() ) );assertTrue("Variance of n = 0 set should be NaN", Double.isNaN(u.getVariance() ) );u.addValue(one);assertTrue( "Mean of n = 1 set should be value of single item n1", u.getMean() == one);assertTrue( "Mean of n = 1 set should be zero", u.getStandardDeviation() == 0);assertTrue( "Variance of n = 1 set should be zero", u.getVariance() == 0);    }}
/* ==================================================================== * The Apache Software License, Version 1.1 * * Copyright (c) 2003 The Apache Software Foundation.  All rights * reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * * 1. Redistributions of source code must retain the above copyright *    notice, this list of conditions and the following disclaimer. * * 2. Redistributions in binary form must reproduce the above copyright *    notice, this list of conditions and the following disclaimer in *    the documentation and/or other materials provided with the *    distribution. * * 3. The end-user documentation included with the redistribution, if *    any, must include the following acknowlegement: *       "This product includes software developed by the *        Apache Software Foundation (http://www.apache.org/)." *    Alternately, this acknowlegement may appear in the software itself, *    if and wherever such third-party acknowlegements normally appear. * * 4. The names "The Jakarta Project", "Commons", and "Apache Software *    Foundation" must not be used to endorse or promote products derived *    from this software without prior written permission. For written *    permission, please contact apache@apache.org. * * 5. Products derived from this software may not be called "Apache" *    nor may "Apache" appear in their names without prior written *    permission of the Apache Software Foundation. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * ==================================================================== * * This software consists of voluntary contributions made by many * individuals on behalf of the Apache Software Foundation.  For more * information on the Apache Software Foundation, please see * <http://www.apache.org/>. */package org.apache.commons.math;/** * This class contains test cases for the ExpandableDoubleArray. *  * @author <a href="mailto:tobrien@apache.org">Tim O'Brien</a> */public class ExpandableDoubleArrayTest extends DoubleArrayAbstractTest {public ExpandableDoubleArrayTest(String name) {super( name );}/* (non-Javadoc) * @see junit.framework.TestCase#setUp() */protected void setUp() throws Exception {da = new ExpandableDoubleArray();}/* (non-Javadoc) * @see junit.framework.TestCase#tearDown() */protected void tearDown() throws Exception {da = null;}/** TEST NORMAL OPERATIONS - calling super class test and then checking internal *   storage **/public void testAdd1000() {super.testAdd1000();assertEquals("Internal Storage length should be 1024 if we started out with initial capacity of " +"16 and an expansion factor of 2.0",1024, ((ExpandableDoubleArray) da).getInternalLength());}public void testSetElementArbitraryExpansion() {super.testSetElementArbitraryExpansion();assertEquals( "The length of the internal array should now be 1001, it isn't", ((ExpandableDoubleArray) da).getInternalLength(), 1001);}public void testAddElementRolling() {super.testAddElementRolling();assertEquals( "Even though there are only 6 element, internal storage should be 2048", ((ExpandableDoubleArray) da).getInternalLength(), 2048);}/** TESTS WHICH FOCUS ON ExpandableSpecific internal storage */public void testWithInitialCapacity() {ExpandableDoubleArray eDA2 = new ExpandableDoubleArray(2);assertEquals("Initial internal length should be 2", 2, eDA2.getInternalLength());assertEquals("Initial number of elements should be 0", 0, eDA2.getNumElements());int iterations = (int) Math.pow(2.0, 15.0);for( int i = 0; i < iterations; i++) {eDA2.addElement( i );}assertEquals("Number of elements should be equal to 2^15", (int) Math.pow(2.0, 15.0), eDA2.getNumElements());assertEquals("Internal length should be 2^15", (int) Math.pow(2.0, 15.0), eDA2.getInternalLength());eDA2.addElement( 2.0 );assertEquals("Number of elements should be equals to 2^15 + 1",        ( (int) Math.pow(2.0, 15.0) + 1 ), eDA2.getNumElements() );assertEquals("Internal length should be 2^16", (int) Math.pow(2.0, 16.0), eDA2.getInternalLength());}public void testWithInitialCapacityAndExpansionFactor() {ExpandableDoubleArray eDA3 = new ExpandableDoubleArray(3, 3.0f);assertEquals("Initial internal length should be 3", 3, eDA3.getInternalLength() );assertEquals("Initial number of elements should be 0", 0, eDA3.getNumElements() );int iterations = (int) Math.pow(3.0, 7.0);for( int i = 0; i < iterations; i++) {eDA3.addElement( i );}assertEquals("Number of elements should be equal to 3^7", (int) Math.pow(3.0, 7.0), eDA3.getNumElements());assertEquals("Internal length should be 3^7", (int) Math.pow(3.0, 7.0), eDA3.getInternalLength());eDA3.addElement( 2.0 );assertEquals("Number of elements should be equals to 3^7 + 1",( (int) Math.pow(3.0, 7.0) + 1 ), eDA3.getNumElements() );assertEquals("Internal length should be 3^8", (int) Math.pow(3.0, 8.0), eDA3.getInternalLength());   assertEquals("Expansion factor should equal 3.0", 3.0f, eDA3.getExpansionFactor(), Double.MIN_VALUE);}/** TEST ERROR CONDITIONS **/public void testIllegalInitialCapacity() {try {ExpandableDoubleArray eDA = new ExpandableDoubleArray(-3, 2.0f);fail( "That constructor should have thrown an IllegalArgumentException because " +"the initialCapacity was negative, if it didn't then" +" the range checking of initialCapacity is not working properly" );} catch( IllegalArgumentException iae ) {}try {ExpandableDoubleArray eDA = new ExpandableDoubleArray(0, 2.0f);fail( "That constructor should have thrown an IllegalArgumentException because " +"the initialCapacity was ZERO if it didn't then" +" the range checking of initialCapacity is not working properly" );} catch( IllegalArgumentException iae ) {}}public void testIllegalExpansionFactor() {try {ExpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.66f);fail( "That constructor should have thrown an IllegalArgumentException because " +"the expansionFactor for 0.66 which would shrink the array instead of expand the array");} catch( IllegalArgumentException iae ) {}try {ExpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.0f);fail( "That constructor should have thrown an IllegalArgumentException because " +"the expansionFactor for 0.0");} catch( IllegalArgumentException iae) {}try {ExpandableDoubleArray eDA = new ExpandableDoubleArray(3, -4.35f);fail( "That constructor should have thrown an IllegalArgumentException because " +"the expansionFactor for -4.35");} catch( IllegalArgumentException iae) {}}}
/* ==================================================================== * The Apache Software License, Version 1.1 * * Copyright (c) 2003 The Apache Software Foundation.  All rights * reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * * 1. Redistributions of source code must retain the above copyright *    notice, this list of conditions and the following disclaimer. * * 2. Redistributions in binary form must reproduce the above copyright *    notice, this list of conditions and the following disclaimer in *    the documentation and/or other materials provided with the *    distribution. * * 3. The end-user documentation included with the redistribution, if *    any, must include the following acknowlegement: *       "This product includes software developed by the *        Apache Software Foundation (http://www.apache.org/)." *    Alternately, this acknowlegement may appear in the software itself, *    if and wherever such third-party acknowlegements normally appear. * * 4. The names "The Jakarta Project", "Commons", and "Apache Software *    Foundation" must not be used to endorse or promote products derived *    from this software without prior written permission. For written *    permission, please contact apache@apache.org. * * 5. Products derived from this software may not be called "Apache" *    nor may "Apache" appear in their names without prior written *    permission of the Apache Software Foundation. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * ==================================================================== * * This software consists of voluntary contributions made by many * individuals on behalf of the Apache Software Foundation.  For more * information on the Apache Software Foundation, please see * <http://www.apache.org/>. */package org.apache.commons.math;/** * Implements the following test statistics <ul> * <li><a href = http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm> *     Chi-Square</a></li></ul> * @author Phil Steitz * @version $Revision: 1.1 $ $Date: 2003/05/15 21:58:23 $ * */public class TestStatisticImpl implements TestStatistic {        public TestStatisticImpl() {    }        /**     * Computes Chi-Square statistic given observed and expected counts <br>     * <strong>Algorithm</strong>:      * http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm <br>     * <strong>Numerical considerations</strong>: none <br>     * @param observed array of observed frequency counts     * @param expected array of expected frequency counts     * @throws IllegalArgumentException if input arrays have different lengths     * or length is less than 2     */    public double chiSquare(double[] expected, double[] observed) {        double sumSq = 0.0d;        double dev = 0.0d;        if ((expected.length < 2) || (expected.length != observed.length)) {            throw new IllegalArgumentException                ("observed, expected array lengths incorrect");        }        for (int i = 0; i< observed.length; i++) {            dev = (observed[i] - expected[i]);            sumSq += dev*dev/expected[i];        }                 for (int i = 0; i< observed.length; i++) {        }        return sumSq;    }           }
/* ==================================================================== * The Apache Software License, Version 1.1 * * Copyright (c) 2003 The Apache Software Foundation.  All rights * reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * * 1. Redistributions of source code must retain the above copyright *    notice, this list of conditions and the following disclaimer. * * 2. Redistributions in binary form must reproduce the above copyright *    notice, this list of conditions and the following disclaimer in *    the documentation and/or other materials provided with the *    distribution. * * 3. The end-user documentation included with the redistribution, if *    any, must include the following acknowlegement: *       "This product includes software developed by the *        Apache Software Foundation (http://www.apache.org/)." *    Alternately, this acknowlegement may appear in the software itself, *    if and wherever such third-party acknowlegements normally appear. * * 4. The names "The Jakarta Project", "Commons", and "Apache Software *    Foundation" must not be used to endorse or promote products derived *    from this software without prior written permission. For written *    permission, please contact apache@apache.org. * * 5. Products derived from this software may not be called "Apache" *    nor may "Apache" appear in their names without prior written *    permission of the Apache Software Foundation. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * ==================================================================== * * This software consists of voluntary contributions made by many * individuals on behalf of the Apache Software Foundation.  For more * information on the Apache Software Foundation, please see * <http://www.apache.org/>. */package org.apache.commons.math;/** * Interfaces for the following test statistics <ul> * <li><a href = http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm> *     Chi-Square</a></li> * </ul> * @author Phil Steitz * @version $Revision: 1.1 $ $Date: 2003/05/15 21:58:23 $ * */public interface TestStatistic {        /**     * <strong>Description</strong>:     * Computes Chi-Square statistic given observed and expected freqeuncy counts <br>     * This statistic can be used to perform Chi-Square tests for goodness     * of fit.<br>     * <strong>Definition</strong>:      * http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm <br>     * <strong>Preconditions</strong>: <ul>     * <li>Expected counts should all be positive. If any expected     * counts are 0, the test will return INFINITY.  Negative expected or observed counts      * make the statistic meaningless.</li>     * <li>The observed and expected arrays <i>must</i> have the same length and     * their common length must be at least 2 </li>     * </ul>     * @param observed array of observed frequency counts     * @param expected array of exptected frequency counts     * @throws IllegalArgumentException if input arrays have different lengths     * or length is less than 2     */    public double chiSquare(double[] expected, double[] observed);}